
ExampleUartInterruptionMethod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800d398  0800d398  0001d398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d444  0800d444  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d444  0800d444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d44c  0800d44c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d44c  0800d44c  0001d44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d450  0800d450  0001d450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00008ddc  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008e70  20008e70  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002be9f  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d03  00000000  00000000  0004bf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002340  00000000  00000000  00051c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002100  00000000  00000000  00053fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b715  00000000  00000000  000560a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c3f5  00000000  00000000  000817bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f52ca  00000000  00000000  000adbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a2e7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009800  00000000  00000000  001a2ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d380 	.word	0x0800d380

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800d380 	.word	0x0800d380

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200000b0 	.word	0x200000b0
 8000558:	20000108 	.word	0x20000108

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f001 f943 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f835 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fac3 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA_Init();
 800056e:	f000 fa51 	bl	8000a14 <MX_DMA_Init>
  MX_CRC_Init();
 8000572:	f000 f899 	bl	80006a8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000576:	f000 f8ab 	bl	80006d0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800057a:	f000 fa6b 	bl	8000a54 <MX_FMC_Init>
  MX_I2C3_Init();
 800057e:	f000 f8d9 	bl	8000734 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000582:	f000 f917 	bl	80007b4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000586:	f000 f995 	bl	80008b4 <MX_SPI5_Init>
  MX_TIM1_Init();
 800058a:	f000 f9c9 	bl	8000920 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800058e:	f000 fa17 	bl	80009c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)u8ReceivedData, 2);
 8000592:	2202      	movs	r2, #2
 8000594:	490b      	ldr	r1, [pc, #44]	; (80005c4 <main+0x68>)
 8000596:	480c      	ldr	r0, [pc, #48]	; (80005c8 <main+0x6c>)
 8000598:	f005 ffb9 	bl	800650e <HAL_UART_Receive_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <main+0x70>)
 800059e:	1d3c      	adds	r4, r7, #4
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f00a f81d 	bl	800a5f2 <osThreadCreate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <main+0x74>)
 80005bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005be:	f00a f811 	bl	800a5e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <main+0x66>
 80005c4:	200005c8 	.word	0x200005c8
 80005c8:	200004ec 	.word	0x200004ec
 80005cc:	0800d3a4 	.word	0x0800d3a4
 80005d0:	200005c4 	.word	0x200005c4

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f00c fdc6 	bl	800d174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000620:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <SystemClock_Config+0xd0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800064c:	2348      	movs	r3, #72	; 0x48
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000654:	2303      	movs	r3, #3
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f004 faaf 	bl	8004bc0 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000668:	f000 fbf2 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fd11 	bl	80050b0 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000694:	f000 fbdc 	bl	8000e50 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_CRC_Init+0x20>)
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <MX_CRC_Init+0x24>)
 80006b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_CRC_Init+0x20>)
 80006b4:	f001 f9e2 	bl	8001a7c <HAL_CRC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006be:	f000 fbc7 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000308 	.word	0x20000308
 80006cc:	40023000 	.word	0x40023000

080006d0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <MX_DMA2D_Init+0x60>)
 80006d8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_DMA2D_Init+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <MX_DMA2D_Init+0x5c>)
 8000706:	f001 fd45 	bl	8002194 <HAL_DMA2D_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000710:	f000 fb9e 	bl	8000e50 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000714:	2101      	movs	r1, #1
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_DMA2D_Init+0x5c>)
 8000718:	f001 fe96 	bl	8002448 <HAL_DMA2D_ConfigLayer>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000722:	f000 fb95 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000310 	.word	0x20000310
 8000730:	4002b000 	.word	0x4002b000

08000734 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_I2C3_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_I2C3_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <MX_I2C3_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_I2C3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000756:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_I2C3_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000772:	f003 fcfd 	bl	8004170 <HAL_I2C_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 fb68 	bl	8000e50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000780:	2100      	movs	r1, #0
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000784:	f003 fe38 	bl	80043f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800078e:	f000 fb5f 	bl	8000e50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000796:	f003 fe6b 	bl	8004470 <HAL_I2CEx_ConfigDigitalFilter>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 fb56 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000350 	.word	0x20000350
 80007ac:	40005c00 	.word	0x40005c00
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2234      	movs	r2, #52	; 0x34
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00c fcd7 	bl	800d174 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007c6:	4b39      	ldr	r3, [pc, #228]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007c8:	4a39      	ldr	r2, [pc, #228]	; (80008b0 <MX_LTDC_Init+0xfc>)
 80007ca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007cc:	4b37      	ldr	r3, [pc, #220]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007d8:	4b34      	ldr	r3, [pc, #208]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007f0:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007f2:	221d      	movs	r2, #29
 80007f4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007f8:	2203      	movs	r2, #3
 80007fa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <MX_LTDC_Init+0xf8>)
 80007fe:	f240 120d 	movw	r2, #269	; 0x10d
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <MX_LTDC_Init+0xf8>)
 8000806:	f240 1243 	movw	r2, #323	; 0x143
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <MX_LTDC_Init+0xf8>)
 800080e:	f240 1217 	movw	r2, #279	; 0x117
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <MX_LTDC_Init+0xf8>)
 8000816:	f240 1247 	movw	r2, #327	; 0x147
 800081a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_LTDC_Init+0xf8>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000824:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_LTDC_Init+0xf8>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_LTDC_Init+0xf8>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000834:	481d      	ldr	r0, [pc, #116]	; (80008ac <MX_LTDC_Init+0xf8>)
 8000836:	f003 fe5b 	bl	80044f0 <HAL_LTDC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 fb06 	bl	8000e50 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000848:	23f0      	movs	r3, #240	; 0xf0
 800084a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000850:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000854:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000856:	2302      	movs	r3, #2
 8000858:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800085a:	23ff      	movs	r3, #255	; 0xff
 800085c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000866:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000868:	2307      	movs	r3, #7
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800086c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000872:	23f0      	movs	r3, #240	; 0xf0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000876:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_LTDC_Init+0xf8>)
 8000896:	f003 ffbd 	bl	8004814 <HAL_LTDC_ConfigLayer>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008a0:	f000 fad6 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3738      	adds	r7, #56	; 0x38
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200003a4 	.word	0x200003a4
 80008b0:	40016800 	.word	0x40016800

080008b4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_SPI5_Init+0x64>)
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_SPI5_Init+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_SPI5_Init+0x64>)
 80008c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_SPI5_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_SPI5_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_SPI5_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_SPI5_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_SPI5_Init+0x64>)
 80008e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_SPI5_Init+0x64>)
 80008e8:	2218      	movs	r2, #24
 80008ea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_SPI5_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_SPI5_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_SPI5_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_SPI5_Init+0x64>)
 8000900:	220a      	movs	r2, #10
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_SPI5_Init+0x64>)
 8000906:	f005 f819 	bl	800593c <HAL_SPI_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000910:	f000 fa9e 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000044c 	.word	0x2000044c
 800091c:	40015000 	.word	0x40015000

08000920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_TIM1_Init+0x98>)
 800093e:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <MX_TIM1_Init+0x9c>)
 8000940:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_TIM1_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_TIM1_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_TIM1_Init+0x98>)
 8000950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000954:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_TIM1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_TIM1_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_TIM1_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000968:	4813      	ldr	r0, [pc, #76]	; (80009b8 <MX_TIM1_Init+0x98>)
 800096a:	f005 f870 	bl	8005a4e <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 fa6c 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <MX_TIM1_Init+0x98>)
 8000986:	f005 fa29 	bl	8005ddc <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000990:	f000 fa5e 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_TIM1_Init+0x98>)
 80009a2:	f005 fc45 	bl	8006230 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009ac:	f000 fa50 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200004a4 	.word	0x200004a4
 80009bc:	40010000 	.word	0x40010000

080009c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <MX_USART1_UART_Init+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009f8:	f005 fcaa 	bl	8006350 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a02:	f000 fa25 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200004ec 	.word	0x200004ec
 8000a10:	40011000 	.word	0x40011000

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_DMA_Init+0x3c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <MX_DMA_Init+0x3c>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_DMA_Init+0x3c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	203a      	movs	r0, #58	; 0x3a
 8000a3c:	f000 fff4 	bl	8001a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a40:	203a      	movs	r0, #58	; 0x3a
 8000a42:	f001 f80d 	bl	8001a60 <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_FMC_Init+0x98>)
 8000a6e:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000a70:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <MX_FMC_Init+0x98>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_FMC_Init+0x98>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_FMC_Init+0x98>)
 8000a80:	2204      	movs	r2, #4
 8000a82:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <MX_FMC_Init+0x98>)
 8000a86:	2210      	movs	r2, #16
 8000a88:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_FMC_Init+0x98>)
 8000a8c:	2240      	movs	r2, #64	; 0x40
 8000a8e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_FMC_Init+0x98>)
 8000a92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a96:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_FMC_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_FMC_Init+0x98>)
 8000aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aa4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_FMC_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_FMC_Init+0x98>)
 8000aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_FMC_Init+0x98>)
 8000ad6:	f004 fefd 	bl	80058d4 <HAL_SDRAM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ae0:	f000 f9b6 	bl	8000e50 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000590 	.word	0x20000590
 8000af0:	a0000140 	.word	0xa0000140

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
 8000b0e:	4b7b      	ldr	r3, [pc, #492]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a7a      	ldr	r2, [pc, #488]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b78      	ldr	r3, [pc, #480]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	623b      	str	r3, [r7, #32]
 8000b24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	4b74      	ldr	r3, [pc, #464]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a73      	ldr	r2, [pc, #460]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b30:	f043 0320 	orr.w	r3, r3, #32
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b71      	ldr	r3, [pc, #452]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0320 	and.w	r3, r3, #32
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	4b6d      	ldr	r3, [pc, #436]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a6c      	ldr	r2, [pc, #432]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b6a      	ldr	r3, [pc, #424]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	4b66      	ldr	r3, [pc, #408]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a65      	ldr	r2, [pc, #404]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b63      	ldr	r3, [pc, #396]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b5f      	ldr	r3, [pc, #380]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a5e      	ldr	r2, [pc, #376]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b5c      	ldr	r3, [pc, #368]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a57      	ldr	r2, [pc, #348]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b55      	ldr	r3, [pc, #340]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a50      	ldr	r2, [pc, #320]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a49      	ldr	r2, [pc, #292]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <MX_GPIO_Init+0x208>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2116      	movs	r1, #22
 8000bee:	4844      	ldr	r0, [pc, #272]	; (8000d00 <MX_GPIO_Init+0x20c>)
 8000bf0:	f001 fe80 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	4842      	ldr	r0, [pc, #264]	; (8000d04 <MX_GPIO_Init+0x210>)
 8000bfa:	f001 fe7b 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c04:	4840      	ldr	r0, [pc, #256]	; (8000d08 <MX_GPIO_Init+0x214>)
 8000c06:	f001 fe75 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c10:	483e      	ldr	r0, [pc, #248]	; (8000d0c <MX_GPIO_Init+0x218>)
 8000c12:	f001 fe6f 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c16:	2316      	movs	r3, #22
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4834      	ldr	r0, [pc, #208]	; (8000d00 <MX_GPIO_Init+0x20c>)
 8000c2e:	f001 fc9d 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c32:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c38:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	482e      	ldr	r0, [pc, #184]	; (8000d04 <MX_GPIO_Init+0x210>)
 8000c4a:	f001 fc8f 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4827      	ldr	r0, [pc, #156]	; (8000d04 <MX_GPIO_Init+0x210>)
 8000c66:	f001 fc81 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c6a:	2320      	movs	r3, #32
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c6e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4820      	ldr	r0, [pc, #128]	; (8000d00 <MX_GPIO_Init+0x20c>)
 8000c80:	f001 fc74 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c84:	2304      	movs	r3, #4
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	481e      	ldr	r0, [pc, #120]	; (8000d10 <MX_GPIO_Init+0x21c>)
 8000c98:	f001 fc68 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <MX_GPIO_Init+0x214>)
 8000cb2:	f001 fc5b 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cb6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480e      	ldr	r0, [pc, #56]	; (8000d08 <MX_GPIO_Init+0x214>)
 8000cd0:	f001 fc4c 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cd4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4807      	ldr	r0, [pc, #28]	; (8000d0c <MX_GPIO_Init+0x218>)
 8000cee:	f001 fc3d 	bl	800256c <HAL_GPIO_Init>

}
 8000cf2:	bf00      	nop
 8000cf4:	3738      	adds	r7, #56	; 0x38
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020c00 	.word	0x40020c00
 8000d0c:	40021800 	.word	0x40021800
 8000d10:	40020400 	.word	0x40020400

08000d14 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// when reach half of the data we waiting for, turn LED4 on just as an indication
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *uart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d22:	4803      	ldr	r0, [pc, #12]	; (8000d30 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000d24:	f001 fde6 	bl	80028f4 <HAL_GPIO_WritePin>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021800 	.word	0x40021800

08000d34 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, u8ReceivedData, sizeof(u8ReceivedData), 100);

	// if first Char is '0', then turn LED3 off
	if(u8ReceivedData[0]=='0')
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_UART_RxCpltCallback+0x50>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b30      	cmp	r3, #48	; 0x30
 8000d42:	d106      	bne.n	8000d52 <HAL_UART_RxCpltCallback+0x1e>
	{
	  // turn LED3 off
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4a:	480f      	ldr	r0, [pc, #60]	; (8000d88 <HAL_UART_RxCpltCallback+0x54>)
 8000d4c:	f001 fdd2 	bl	80028f4 <HAL_GPIO_WritePin>
 8000d50:	e009      	b.n	8000d66 <HAL_UART_RxCpltCallback+0x32>
	}
	// if first Char is '1', then turn LED3 on
	else if(u8ReceivedData[0]=='1')
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_UART_RxCpltCallback+0x50>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b31      	cmp	r3, #49	; 0x31
 8000d58:	d105      	bne.n	8000d66 <HAL_UART_RxCpltCallback+0x32>
	{
	  // turn LED3 on
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <HAL_UART_RxCpltCallback+0x54>)
 8000d62:	f001 fdc7 	bl	80028f4 <HAL_GPIO_WritePin>
	}

	HAL_UART_Receive_DMA(&huart1, (uint8_t*)u8ReceivedData, 2);
 8000d66:	2202      	movs	r2, #2
 8000d68:	4906      	ldr	r1, [pc, #24]	; (8000d84 <HAL_UART_RxCpltCallback+0x50>)
 8000d6a:	4808      	ldr	r0, [pc, #32]	; (8000d8c <HAL_UART_RxCpltCallback+0x58>)
 8000d6c:	f005 fbcf 	bl	800650e <HAL_UART_Receive_DMA>
	// turn led 4 off
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <HAL_UART_RxCpltCallback+0x54>)
 8000d78:	f001 fdbc 	bl	80028f4 <HAL_GPIO_WritePin>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200005c8 	.word	0x200005c8
 8000d88:	40021800 	.word	0x40021800
 8000d8c:	200004ec 	.word	0x200004ec

08000d90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d98:	f00b fe9c 	bl	800cad4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	uint8_t cMsg[30]="Button clicked\r\n";
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <StartDefaultTask+0x8c>)
 8000d9e:	f107 0408 	add.w	r4, r7, #8
 8000da2:	461d      	mov	r5, r3
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	7023      	strb	r3, [r4, #0]
 8000dac:	f107 0319 	add.w	r3, r7, #25
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	731a      	strb	r2, [r3, #12]
	uint8_t bButtonClicked = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Infinite loop */
	for(;;)
	{
		// if button change state to clicked, then save the new state of the button then send message and toggle LED4
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&&bButtonClicked==0)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4817      	ldr	r0, [pc, #92]	; (8000e20 <StartDefaultTask+0x90>)
 8000dc4:	f001 fd7e 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d013      	beq.n	8000df6 <StartDefaultTask+0x66>
 8000dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10f      	bne.n	8000df6 <StartDefaultTask+0x66>
		{
			// save button state
			bButtonClicked=1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			// toggle LED4
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de0:	4810      	ldr	r0, [pc, #64]	; (8000e24 <StartDefaultTask+0x94>)
 8000de2:	f001 fda0 	bl	8002926 <HAL_GPIO_TogglePin>
			// Send message
			HAL_UART_Transmit(&huart1, cMsg, sizeof(cMsg), 100);
 8000de6:	f107 0108 	add.w	r1, r7, #8
 8000dea:	2364      	movs	r3, #100	; 0x64
 8000dec:	221e      	movs	r2, #30
 8000dee:	480e      	ldr	r0, [pc, #56]	; (8000e28 <StartDefaultTask+0x98>)
 8000df0:	f005 fafb 	bl	80063ea <HAL_UART_Transmit>
 8000df4:	e00d      	b.n	8000e12 <StartDefaultTask+0x82>
		}
		// if button released then save the new state of the button
		else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0 && bButtonClicked==1)
 8000df6:	2101      	movs	r1, #1
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <StartDefaultTask+0x90>)
 8000dfa:	f001 fd63 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d106      	bne.n	8000e12 <StartDefaultTask+0x82>
 8000e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <StartDefaultTask+0x82>
		{
			// save button state
			bButtonClicked=0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		osDelay(10);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f009 fc39 	bl	800a68a <osDelay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&&bButtonClicked==0)
 8000e18:	e7d2      	b.n	8000dc0 <StartDefaultTask+0x30>
 8000e1a:	bf00      	nop
 8000e1c:	0800d3c0 	.word	0x0800d3c0
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40021800 	.word	0x40021800
 8000e28:	200004ec 	.word	0x200004ec

08000e2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e3e:	f000 fcf7 	bl	8001830 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40001000 	.word	0x40001000

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	f06f 0001 	mvn.w	r0, #1
 8000ea2:	f000 fdc1 	bl	8001a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_CRC_MspInit+0x3c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d10d      	bne.n	8000ee2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_CRC_MspInit+0x40>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <HAL_CRC_MspInit+0x40>)
 8000ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <HAL_CRC_MspInit+0x40>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023000 	.word	0x40023000
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_DMA2D_MspInit+0x48>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d115      	bne.n	8000f36 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_DMA2D_MspInit+0x4c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <HAL_DMA2D_MspInit+0x4c>)
 8000f14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_DMA2D_MspInit+0x4c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2105      	movs	r1, #5
 8000f2a:	205a      	movs	r0, #90	; 0x5a
 8000f2c:	f000 fd7c 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f30:	205a      	movs	r0, #90	; 0x5a
 8000f32:	f000 fd95 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	4002b000 	.word	0x4002b000
 8000f44:	40023800 	.word	0x40023800

08000f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a29      	ldr	r2, [pc, #164]	; (800100c <HAL_I2C_MspInit+0xc4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d14b      	bne.n	8001002 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a27      	ldr	r2, [pc, #156]	; (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa8:	2312      	movs	r3, #18
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4815      	ldr	r0, [pc, #84]	; (8001014 <HAL_I2C_MspInit+0xcc>)
 8000fc0:	f001 fad4 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fca:	2312      	movs	r3, #18
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <HAL_I2C_MspInit+0xd0>)
 8000fe2:	f001 fac3 	bl	800256c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_I2C_MspInit+0xc8>)
 8000ff0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_I2C_MspInit+0xc8>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40005c00 	.word	0x40005c00
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020000 	.word	0x40020000

0800101c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b09a      	sub	sp, #104	; 0x68
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	2230      	movs	r2, #48	; 0x30
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00c f899 	bl	800d174 <memset>
  if(hltdc->Instance==LTDC)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a85      	ldr	r2, [pc, #532]	; (800125c <HAL_LTDC_MspInit+0x240>)
 8001048:	4293      	cmp	r3, r2
 800104a:	f040 8102 	bne.w	8001252 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800104e:	2308      	movs	r3, #8
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001052:	2332      	movs	r3, #50	; 0x32
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001056:	2302      	movs	r3, #2
 8001058:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800105a:	2300      	movs	r3, #0
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fa76 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800106e:	f7ff feef 	bl	8000e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
 8001076:	4b7a      	ldr	r3, [pc, #488]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a79      	ldr	r2, [pc, #484]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 800107c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b77      	ldr	r3, [pc, #476]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	4b73      	ldr	r3, [pc, #460]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a72      	ldr	r2, [pc, #456]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b70      	ldr	r3, [pc, #448]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	4b6c      	ldr	r3, [pc, #432]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a6b      	ldr	r2, [pc, #428]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b69      	ldr	r3, [pc, #420]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	4b65      	ldr	r3, [pc, #404]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a64      	ldr	r2, [pc, #400]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b62      	ldr	r3, [pc, #392]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b5e      	ldr	r3, [pc, #376]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a5d      	ldr	r2, [pc, #372]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b57      	ldr	r3, [pc, #348]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a56      	ldr	r2, [pc, #344]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b54      	ldr	r3, [pc, #336]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b50      	ldr	r3, [pc, #320]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a4f      	ldr	r2, [pc, #316]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b4d      	ldr	r3, [pc, #308]	; (8001260 <HAL_LTDC_MspInit+0x244>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001148:	230e      	movs	r3, #14
 800114a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001150:	4619      	mov	r1, r3
 8001152:	4844      	ldr	r0, [pc, #272]	; (8001264 <HAL_LTDC_MspInit+0x248>)
 8001154:	f001 fa0a 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001158:	f641 0358 	movw	r3, #6232	; 0x1858
 800115c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800116a:	230e      	movs	r3, #14
 800116c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001172:	4619      	mov	r1, r3
 8001174:	483c      	ldr	r0, [pc, #240]	; (8001268 <HAL_LTDC_MspInit+0x24c>)
 8001176:	f001 f9f9 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800117a:	2303      	movs	r3, #3
 800117c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800118a:	2309      	movs	r3, #9
 800118c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001192:	4619      	mov	r1, r3
 8001194:	4835      	ldr	r0, [pc, #212]	; (800126c <HAL_LTDC_MspInit+0x250>)
 8001196:	f001 f9e9 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800119a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800119e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ac:	230e      	movs	r3, #14
 80011ae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	482d      	ldr	r0, [pc, #180]	; (800126c <HAL_LTDC_MspInit+0x250>)
 80011b8:	f001 f9d8 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011bc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80011c0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ce:	230e      	movs	r3, #14
 80011d0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d6:	4619      	mov	r1, r3
 80011d8:	4825      	ldr	r0, [pc, #148]	; (8001270 <HAL_LTDC_MspInit+0x254>)
 80011da:	f001 f9c7 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80011de:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80011e2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f0:	230e      	movs	r3, #14
 80011f2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f8:	4619      	mov	r1, r3
 80011fa:	481e      	ldr	r0, [pc, #120]	; (8001274 <HAL_LTDC_MspInit+0x258>)
 80011fc:	f001 f9b6 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001200:	2348      	movs	r3, #72	; 0x48
 8001202:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001210:	230e      	movs	r3, #14
 8001212:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001214:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001218:	4619      	mov	r1, r3
 800121a:	4817      	ldr	r0, [pc, #92]	; (8001278 <HAL_LTDC_MspInit+0x25c>)
 800121c:	f001 f9a6 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001220:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001224:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001232:	2309      	movs	r3, #9
 8001234:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001236:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <HAL_LTDC_MspInit+0x254>)
 800123e:	f001 f995 	bl	800256c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2105      	movs	r1, #5
 8001246:	2058      	movs	r0, #88	; 0x58
 8001248:	f000 fbee 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800124c:	2058      	movs	r0, #88	; 0x58
 800124e:	f000 fc07 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3768      	adds	r7, #104	; 0x68
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40016800 	.word	0x40016800
 8001260:	40023800 	.word	0x40023800
 8001264:	40021400 	.word	0x40021400
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40021800 	.word	0x40021800
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00

0800127c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_SPI_MspInit+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12c      	bne.n	80012f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_SPI_MspInit+0x88>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_SPI_MspInit+0x88>)
 80012a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_SPI_MspInit+0x88>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_SPI_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_SPI_MspInit+0x88>)
 80012c4:	f043 0320 	orr.w	r3, r3, #32
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_SPI_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012d6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012e8:	2305      	movs	r3, #5
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_SPI_MspInit+0x8c>)
 80012f4:	f001 f93a 	bl	800256c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40015000 	.word	0x40015000
 8001304:	40023800 	.word	0x40023800
 8001308:	40021400 	.word	0x40021400

0800130c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_TIM_Base_MspInit+0x3c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10d      	bne.n	800133a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_TIM_Base_MspInit+0x40>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_TIM_Base_MspInit+0x40>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_TIM_Base_MspInit+0x40>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40010000 	.word	0x40010000
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a31      	ldr	r2, [pc, #196]	; (8001434 <HAL_UART_MspInit+0xe4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d15b      	bne.n	800142a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <HAL_UART_MspInit+0xe8>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a2f      	ldr	r2, [pc, #188]	; (8001438 <HAL_UART_MspInit+0xe8>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_UART_MspInit+0xe8>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <HAL_UART_MspInit+0xe8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a28      	ldr	r2, [pc, #160]	; (8001438 <HAL_UART_MspInit+0xe8>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_UART_MspInit+0xe8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013bc:	2307      	movs	r3, #7
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	481d      	ldr	r0, [pc, #116]	; (800143c <HAL_UART_MspInit+0xec>)
 80013c8:	f001 f8d0 	bl	800256c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_UART_MspInit+0xf0>)
 80013ce:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <HAL_UART_MspInit+0xf4>)
 80013d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_UART_MspInit+0xf0>)
 80013d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_UART_MspInit+0xf0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_UART_MspInit+0xf0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_UART_MspInit+0xf0>)
 80013e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_UART_MspInit+0xf0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_UART_MspInit+0xf0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_UART_MspInit+0xf0>)
 80013fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001400:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_UART_MspInit+0xf0>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_UART_MspInit+0xf0>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800140e:	480c      	ldr	r0, [pc, #48]	; (8001440 <HAL_UART_MspInit+0xf0>)
 8001410:	f000 fb50 	bl	8001ab4 <HAL_DMA_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800141a:	f7ff fd19 	bl	8000e50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_UART_MspInit+0xf0>)
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_UART_MspInit+0xf0>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40011000 	.word	0x40011000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	20000530 	.word	0x20000530
 8001444:	40026440 	.word	0x40026440

08001448 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800145c:	4b3b      	ldr	r3, [pc, #236]	; (800154c <HAL_FMC_MspInit+0x104>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d16f      	bne.n	8001544 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_FMC_MspInit+0x104>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <HAL_FMC_MspInit+0x108>)
 8001470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001472:	4a37      	ldr	r2, [pc, #220]	; (8001550 <HAL_FMC_MspInit+0x108>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6393      	str	r3, [r2, #56]	; 0x38
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <HAL_FMC_MspInit+0x108>)
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001486:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800148a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	230c      	movs	r3, #12
 800149a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	482c      	ldr	r0, [pc, #176]	; (8001554 <HAL_FMC_MspInit+0x10c>)
 80014a2:	f001 f863 	bl	800256c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80014a6:	2301      	movs	r3, #1
 80014a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014b6:	230c      	movs	r3, #12
 80014b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4826      	ldr	r0, [pc, #152]	; (8001558 <HAL_FMC_MspInit+0x110>)
 80014c0:	f001 f854 	bl	800256c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80014c4:	f248 1333 	movw	r3, #33075	; 0x8133
 80014c8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d6:	230c      	movs	r3, #12
 80014d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	481f      	ldr	r0, [pc, #124]	; (800155c <HAL_FMC_MspInit+0x114>)
 80014e0:	f001 f844 	bl	800256c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014e8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f6:	230c      	movs	r3, #12
 80014f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4818      	ldr	r0, [pc, #96]	; (8001560 <HAL_FMC_MspInit+0x118>)
 8001500:	f001 f834 	bl	800256c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001504:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001508:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001516:	230c      	movs	r3, #12
 8001518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <HAL_FMC_MspInit+0x11c>)
 8001520:	f001 f824 	bl	800256c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001534:	230c      	movs	r3, #12
 8001536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <HAL_FMC_MspInit+0x120>)
 800153e:	f001 f815 	bl	800256c <HAL_GPIO_Init>
 8001542:	e000      	b.n	8001546 <HAL_FMC_MspInit+0xfe>
    return;
 8001544:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200005cc 	.word	0x200005cc
 8001550:	40023800 	.word	0x40023800
 8001554:	40021400 	.word	0x40021400
 8001558:	40020800 	.word	0x40020800
 800155c:	40021800 	.word	0x40021800
 8001560:	40021000 	.word	0x40021000
 8001564:	40020c00 	.word	0x40020c00
 8001568:	40020400 	.word	0x40020400

0800156c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001574:	f7ff ff68 	bl	8001448 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08e      	sub	sp, #56	; 0x38
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_InitTick+0xe4>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a32      	ldr	r2, [pc, #200]	; (8001664 <HAL_InitTick+0xe4>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_InitTick+0xe4>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ac:	f107 0210 	add.w	r2, r7, #16
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 ff9a 	bl	80054f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015c6:	f003 ff6b 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 80015ca:	6378      	str	r0, [r7, #52]	; 0x34
 80015cc:	e004      	b.n	80015d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015ce:	f003 ff67 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 80015d2:	4603      	mov	r3, r0
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015da:	4a23      	ldr	r2, [pc, #140]	; (8001668 <HAL_InitTick+0xe8>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0c9b      	lsrs	r3, r3, #18
 80015e2:	3b01      	subs	r3, #1
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_InitTick+0xec>)
 80015e8:	4a21      	ldr	r2, [pc, #132]	; (8001670 <HAL_InitTick+0xf0>)
 80015ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_InitTick+0xec>)
 80015ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_InitTick+0xec>)
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_InitTick+0xec>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_InitTick+0xec>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_InitTick+0xec>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800160c:	4817      	ldr	r0, [pc, #92]	; (800166c <HAL_InitTick+0xec>)
 800160e:	f004 fa1e 	bl	8005a4e <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001618:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800161c:	2b00      	cmp	r3, #0
 800161e:	d11b      	bne.n	8001658 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001620:	4812      	ldr	r0, [pc, #72]	; (800166c <HAL_InitTick+0xec>)
 8001622:	f004 fa63 	bl	8005aec <HAL_TIM_Base_Start_IT>
 8001626:	4603      	mov	r3, r0
 8001628:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800162c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001630:	2b00      	cmp	r3, #0
 8001632:	d111      	bne.n	8001658 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001634:	2036      	movs	r0, #54	; 0x36
 8001636:	f000 fa13 	bl	8001a60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d808      	bhi.n	8001652 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	2036      	movs	r0, #54	; 0x36
 8001646:	f000 f9ef 	bl	8001a28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_InitTick+0xf4>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e002      	b.n	8001658 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001658:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800165c:	4618      	mov	r0, r3
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	431bde83 	.word	0x431bde83
 800166c:	200005d0 	.word	0x200005d0
 8001670:	40001000 	.word	0x40001000
 8001674:	20000004 	.word	0x20000004

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIM6_DAC_IRQHandler+0x10>)
 80016aa:	f004 fa8f 	bl	8005bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200005d0 	.word	0x200005d0

080016b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA2_Stream2_IRQHandler+0x10>)
 80016be:	f000 faff 	bl	8001cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000530 	.word	0x20000530

080016cc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <OTG_HS_IRQHandler+0x10>)
 80016d2:	f001 fbad 	bl	8002e30 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20008b5c 	.word	0x20008b5c

080016e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <LTDC_IRQHandler+0x10>)
 80016e6:	f002 ffd3 	bl	8004690 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200003a4 	.word	0x200003a4

080016f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <DMA2D_IRQHandler+0x10>)
 80016fa:	f000 fd94 	bl	8002226 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000310 	.word	0x20000310

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f00b fcd4 	bl	800d0e4 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20030000 	.word	0x20030000
 8001768:	00000400 	.word	0x00000400
 800176c:	20000618 	.word	0x20000618
 8001770:	20008e70 	.word	0x20008e70

08001774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800179e:	490e      	ldr	r1, [pc, #56]	; (80017d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b4:	4c0b      	ldr	r4, [pc, #44]	; (80017e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c2:	f7ff ffd7 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f00b fc93 	bl	800d0f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7fe fec7 	bl	800055c <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80017dc:	0800d454 	.word	0x0800d454
  ldr r2, =_sbss
 80017e0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80017e4:	20008e70 	.word	0x20008e70

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_Init+0x40>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_Init+0x40>)
 8001802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_Init+0x40>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 f8fc 	bl	8001a12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff feb0 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff fb1c 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000008 	.word	0x20000008
 8001854:	2000061c 	.word	0x2000061c

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	2000061c 	.word	0x2000061c

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff ffee 	bl	8001858 <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffde 	bl	8001858 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff4c 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3a:	f7ff ff61 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	6978      	ldr	r0, [r7, #20]
 8001a46:	f7ff ffb1 	bl	80019ac <NVIC_EncodePriority>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff80 	bl	8001958 <__NVIC_SetPriority>
}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff54 	bl	800191c <__NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fa08 	bl	8000eb4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff feca 	bl	8001858 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e099      	b.n	8001c04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af0:	e00f      	b.n	8001b12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001af2:	f7ff feb1 	bl	8001858 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b05      	cmp	r3, #5
 8001afe:	d908      	bls.n	8001b12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2203      	movs	r2, #3
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e078      	b.n	8001c04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1e8      	bne.n	8001af2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_DMA_Init+0x158>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d107      	bne.n	8001b7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4313      	orrs	r3, r2
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f023 0307 	bic.w	r3, r3, #7
 8001b92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d117      	bne.n	8001bd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00e      	beq.n	8001bd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fa6f 	bl	800209c <DMA_CheckFifoParam>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2240      	movs	r2, #64	; 0x40
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e016      	b.n	8001c04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fa26 	bl	8002030 <DMA_CalcBaseAndBitshift>
 8001be4:	4603      	mov	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	223f      	movs	r2, #63	; 0x3f
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	f010803f 	.word	0xf010803f

08001c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Start_IT+0x26>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e040      	b.n	8001cb8 <HAL_DMA_Start_IT+0xa8>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d12f      	bne.n	8001caa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f9b8 	bl	8001fd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	223f      	movs	r2, #63	; 0x3f
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0216 	orr.w	r2, r2, #22
 8001c7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0208 	orr.w	r2, r2, #8
 8001c96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e005      	b.n	8001cb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ccc:	4b8e      	ldr	r3, [pc, #568]	; (8001f08 <HAL_DMA_IRQHandler+0x248>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a8e      	ldr	r2, [pc, #568]	; (8001f0c <HAL_DMA_IRQHandler+0x24c>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	0a9b      	lsrs	r3, r3, #10
 8001cd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	2208      	movs	r2, #8
 8001cec:	409a      	lsls	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01a      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0204 	bic.w	r2, r2, #4
 8001d12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	2208      	movs	r2, #8
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2201      	movs	r2, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d012      	beq.n	8001d62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	2201      	movs	r2, #1
 8001d50:	409a      	lsls	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	f043 0202 	orr.w	r2, r3, #2
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2204      	movs	r2, #4
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d012      	beq.n	8001d98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00b      	beq.n	8001d98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	2204      	movs	r2, #4
 8001d86:	409a      	lsls	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d90:	f043 0204 	orr.w	r2, r3, #4
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d043      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d03c      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	2210      	movs	r2, #16
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d018      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d108      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d024      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
 8001dee:	e01f      	b.n	8001e30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01b      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
 8001e00:	e016      	b.n	8001e30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0208 	bic.w	r2, r2, #8
 8001e1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	2220      	movs	r2, #32
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 808f 	beq.w	8001f60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8087 	beq.w	8001f60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	2220      	movs	r2, #32
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d136      	bne.n	8001ed8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0216 	bic.w	r2, r2, #22
 8001e78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d103      	bne.n	8001e9a <HAL_DMA_IRQHandler+0x1da>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0208 	bic.w	r2, r2, #8
 8001ea8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	223f      	movs	r2, #63	; 0x3f
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d07e      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4798      	blx	r3
        }
        return;
 8001ed6:	e079      	b.n	8001fcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01d      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d031      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
 8001f04:	e02c      	b.n	8001f60 <HAL_DMA_IRQHandler+0x2a0>
 8001f06:	bf00      	nop
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d023      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
 8001f20:	e01e      	b.n	8001f60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10f      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0210 	bic.w	r2, r2, #16
 8001f3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d032      	beq.n	8001fce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d022      	beq.n	8001fba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2205      	movs	r2, #5
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d307      	bcc.n	8001fa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f2      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x2cc>
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
 8001fca:	e000      	b.n	8001fce <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fcc:	bf00      	nop
    }
  }
}
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b40      	cmp	r3, #64	; 0x40
 8002000:	d108      	bne.n	8002014 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002012:	e007      	b.n	8002024 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	3b10      	subs	r3, #16
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <DMA_CalcBaseAndBitshift+0x64>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800204a:	4a13      	ldr	r2, [pc, #76]	; (8002098 <DMA_CalcBaseAndBitshift+0x68>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d909      	bls.n	8002072 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002066:	f023 0303 	bic.w	r3, r3, #3
 800206a:	1d1a      	adds	r2, r3, #4
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	659a      	str	r2, [r3, #88]	; 0x58
 8002070:	e007      	b.n	8002082 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	aaaaaaab 	.word	0xaaaaaaab
 8002098:	0800d43c 	.word	0x0800d43c

0800209c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d11f      	bne.n	80020f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d856      	bhi.n	800216a <DMA_CheckFifoParam+0xce>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <DMA_CheckFifoParam+0x28>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020e7 	.word	0x080020e7
 80020cc:	080020d5 	.word	0x080020d5
 80020d0:	0800216b 	.word	0x0800216b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d046      	beq.n	800216e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e4:	e043      	b.n	800216e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ee:	d140      	bne.n	8002172 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f4:	e03d      	b.n	8002172 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020fe:	d121      	bne.n	8002144 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d837      	bhi.n	8002176 <DMA_CheckFifoParam+0xda>
 8002106:	a201      	add	r2, pc, #4	; (adr r2, 800210c <DMA_CheckFifoParam+0x70>)
 8002108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210c:	0800211d 	.word	0x0800211d
 8002110:	08002123 	.word	0x08002123
 8002114:	0800211d 	.word	0x0800211d
 8002118:	08002135 	.word	0x08002135
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      break;
 8002120:	e030      	b.n	8002184 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d025      	beq.n	800217a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002132:	e022      	b.n	800217a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800213c:	d11f      	bne.n	800217e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002142:	e01c      	b.n	800217e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d903      	bls.n	8002152 <DMA_CheckFifoParam+0xb6>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d003      	beq.n	8002158 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002150:	e018      	b.n	8002184 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
      break;
 8002156:	e015      	b.n	8002184 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00e      	beq.n	8002182 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      break;
 8002168:	e00b      	b.n	8002182 <DMA_CheckFifoParam+0xe6>
      break;
 800216a:	bf00      	nop
 800216c:	e00a      	b.n	8002184 <DMA_CheckFifoParam+0xe8>
      break;
 800216e:	bf00      	nop
 8002170:	e008      	b.n	8002184 <DMA_CheckFifoParam+0xe8>
      break;
 8002172:	bf00      	nop
 8002174:	e006      	b.n	8002184 <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
 8002178:	e004      	b.n	8002184 <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
 800217c:	e002      	b.n	8002184 <DMA_CheckFifoParam+0xe8>
      break;   
 800217e:	bf00      	nop
 8002180:	e000      	b.n	8002184 <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
    }
  } 
  
  return status; 
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop

08002194 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e03b      	b.n	800221e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fe9c 	bl	8000ef8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e4:	f023 0107 	bic.w	r1, r3, #7
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68d1      	ldr	r1, [r2, #12]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	430b      	orrs	r3, r1
 800220c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d026      	beq.n	8002296 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d021      	beq.n	8002296 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002260:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2201      	movs	r2, #1
 8002274:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2204      	movs	r2, #4
 800227a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d026      	beq.n	80022ee <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d021      	beq.n	80022ee <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2220      	movs	r2, #32
 80022c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	f043 0202 	orr.w	r2, r3, #2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d026      	beq.n	8002346 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d021      	beq.n	8002346 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002310:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2208      	movs	r2, #8
 8002318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	f043 0204 	orr.w	r2, r3, #4
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2204      	movs	r2, #4
 800232a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00e      	beq.n	8002378 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002368:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2204      	movs	r2, #4
 8002370:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f853 	bl	800241e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d024      	beq.n	80023cc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01f      	beq.n	80023cc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2202      	movs	r2, #2
 80023a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01f      	beq.n	8002416 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01a      	beq.n	8002416 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2210      	movs	r2, #16
 80023f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f80e 	bl	8002432 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_DMA2D_ConfigLayer+0x20>
 8002464:	2302      	movs	r3, #2
 8002466:	e079      	b.n	800255c <HAL_DMA2D_ConfigLayer+0x114>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	3318      	adds	r3, #24
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	041b      	lsls	r3, r3, #16
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002492:	4b35      	ldr	r3, [pc, #212]	; (8002568 <HAL_DMA2D_ConfigLayer+0x120>)
 8002494:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b0a      	cmp	r3, #10
 800249c:	d003      	beq.n	80024a6 <HAL_DMA2D_ConfigLayer+0x5e>
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b09      	cmp	r3, #9
 80024a4:	d107      	bne.n	80024b6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e005      	b.n	80024c2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	061b      	lsls	r3, r3, #24
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d120      	bne.n	800250a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	ea02 0103 	and.w	r1, r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	430a      	orrs	r2, r1
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b0a      	cmp	r3, #10
 80024f0:	d003      	beq.n	80024fa <HAL_DMA2D_ConfigLayer+0xb2>
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b09      	cmp	r3, #9
 80024f8:	d127      	bne.n	800254a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
 8002508:	e01f      	b.n	800254a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43db      	mvns	r3, r3
 8002514:	ea02 0103 	and.w	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	430a      	orrs	r2, r1
 8002520:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b0a      	cmp	r3, #10
 8002532:	d003      	beq.n	800253c <HAL_DMA2D_ConfigLayer+0xf4>
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b09      	cmp	r3, #9
 800253a:	d106      	bne.n	800254a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002548:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	ff03000f 	.word	0xff03000f

0800256c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e177      	b.n	8002878 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	f040 8166 	bne.w	8002872 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d005      	beq.n	80025be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d130      	bne.n	8002620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 0201 	and.w	r2, r3, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b03      	cmp	r3, #3
 800262a:	d017      	beq.n	800265c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d123      	bne.n	80026b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	08da      	lsrs	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	69b9      	ldr	r1, [r7, #24]
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80c0 	beq.w	8002872 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b66      	ldr	r3, [pc, #408]	; (8002890 <HAL_GPIO_Init+0x324>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a65      	ldr	r2, [pc, #404]	; (8002890 <HAL_GPIO_Init+0x324>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_GPIO_Init+0x324>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270e:	4a61      	ldr	r2, [pc, #388]	; (8002894 <HAL_GPIO_Init+0x328>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_GPIO_Init+0x32c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d037      	beq.n	80027aa <HAL_GPIO_Init+0x23e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_GPIO_Init+0x330>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d031      	beq.n	80027a6 <HAL_GPIO_Init+0x23a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a56      	ldr	r2, [pc, #344]	; (80028a0 <HAL_GPIO_Init+0x334>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02b      	beq.n	80027a2 <HAL_GPIO_Init+0x236>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a55      	ldr	r2, [pc, #340]	; (80028a4 <HAL_GPIO_Init+0x338>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d025      	beq.n	800279e <HAL_GPIO_Init+0x232>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a54      	ldr	r2, [pc, #336]	; (80028a8 <HAL_GPIO_Init+0x33c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01f      	beq.n	800279a <HAL_GPIO_Init+0x22e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a53      	ldr	r2, [pc, #332]	; (80028ac <HAL_GPIO_Init+0x340>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_Init+0x22a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a52      	ldr	r2, [pc, #328]	; (80028b0 <HAL_GPIO_Init+0x344>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0x226>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a51      	ldr	r2, [pc, #324]	; (80028b4 <HAL_GPIO_Init+0x348>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00d      	beq.n	800278e <HAL_GPIO_Init+0x222>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a50      	ldr	r2, [pc, #320]	; (80028b8 <HAL_GPIO_Init+0x34c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <HAL_GPIO_Init+0x21e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4f      	ldr	r2, [pc, #316]	; (80028bc <HAL_GPIO_Init+0x350>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_GPIO_Init+0x21a>
 8002782:	2309      	movs	r3, #9
 8002784:	e012      	b.n	80027ac <HAL_GPIO_Init+0x240>
 8002786:	230a      	movs	r3, #10
 8002788:	e010      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800278a:	2308      	movs	r3, #8
 800278c:	e00e      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800278e:	2307      	movs	r3, #7
 8002790:	e00c      	b.n	80027ac <HAL_GPIO_Init+0x240>
 8002792:	2306      	movs	r3, #6
 8002794:	e00a      	b.n	80027ac <HAL_GPIO_Init+0x240>
 8002796:	2305      	movs	r3, #5
 8002798:	e008      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800279a:	2304      	movs	r3, #4
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x240>
 800279e:	2303      	movs	r3, #3
 80027a0:	e004      	b.n	80027ac <HAL_GPIO_Init+0x240>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e002      	b.n	80027ac <HAL_GPIO_Init+0x240>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_GPIO_Init+0x240>
 80027aa:	2300      	movs	r3, #0
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f002 0203 	and.w	r2, r2, #3
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4093      	lsls	r3, r2
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027bc:	4935      	ldr	r1, [pc, #212]	; (8002894 <HAL_GPIO_Init+0x328>)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_GPIO_Init+0x354>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ee:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <HAL_GPIO_Init+0x354>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_GPIO_Init+0x354>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002818:	4a29      	ldr	r2, [pc, #164]	; (80028c0 <HAL_GPIO_Init+0x354>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <HAL_GPIO_Init+0x354>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_GPIO_Init+0x354>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_GPIO_Init+0x354>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800286c:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <HAL_GPIO_Init+0x354>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3301      	adds	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b0f      	cmp	r3, #15
 800287c:	f67f ae84 	bls.w	8002588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40013800 	.word	0x40013800
 8002898:	40020000 	.word	0x40020000
 800289c:	40020400 	.word	0x40020400
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40021400 	.word	0x40021400
 80028b0:	40021800 	.word	0x40021800
 80028b4:	40021c00 	.word	0x40021c00
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40022400 	.word	0x40022400
 80028c0:	40013c00 	.word	0x40013c00

080028c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e001      	b.n	80028e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
 8002900:	4613      	mov	r3, r2
 8002902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002910:	e003      	b.n	800291a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002938:	887a      	ldrh	r2, [r7, #2]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	041a      	lsls	r2, r3, #16
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43d9      	mvns	r1, r3
 8002944:	887b      	ldrh	r3, [r7, #2]
 8002946:	400b      	ands	r3, r1
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	619a      	str	r2, [r3, #24]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800295a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295c:	b08f      	sub	sp, #60	; 0x3c
 800295e:	af0a      	add	r7, sp, #40	; 0x28
 8002960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e054      	b.n	8002a16 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f00a f8f8 	bl	800cb7c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2203      	movs	r2, #3
 8002990:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 fc32 	bl	8007214 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	687e      	ldr	r6, [r7, #4]
 80029b8:	466d      	mov	r5, sp
 80029ba:	f106 0410 	add.w	r4, r6, #16
 80029be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ce:	1d33      	adds	r3, r6, #4
 80029d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d2:	6838      	ldr	r0, [r7, #0]
 80029d4:	f004 fbac 	bl	8007130 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 fc29 	bl	8007236 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	687e      	ldr	r6, [r7, #4]
 80029ec:	466d      	mov	r5, sp
 80029ee:	f106 0410 	add.w	r4, r6, #16
 80029f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a02:	1d33      	adds	r3, r6, #4
 8002a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a06:	6838      	ldr	r0, [r7, #0]
 8002a08:	f004 fdb2 	bl	8007570 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a1e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002a1e:	b590      	push	{r4, r7, lr}
 8002a20:	b089      	sub	sp, #36	; 0x24
 8002a22:	af04      	add	r7, sp, #16
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	4608      	mov	r0, r1
 8002a28:	4611      	mov	r1, r2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	70fb      	strb	r3, [r7, #3]
 8002a30:	460b      	mov	r3, r1
 8002a32:	70bb      	strb	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_HCD_HC_Init+0x28>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e076      	b.n	8002b34 <HAL_HCD_HC_Init+0x116>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	333d      	adds	r3, #61	; 0x3d
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3338      	adds	r3, #56	; 0x38
 8002a6e:	787a      	ldrb	r2, [r7, #1]
 8002a70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3340      	adds	r3, #64	; 0x40
 8002a80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a82:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3339      	adds	r3, #57	; 0x39
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	333f      	adds	r3, #63	; 0x3f
 8002aa4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002aa8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	78ba      	ldrb	r2, [r7, #2]
 8002aae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ab2:	b2d0      	uxtb	r0, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	333a      	adds	r3, #58	; 0x3a
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ac4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	da09      	bge.n	8002ae0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	333b      	adds	r3, #59	; 0x3b
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e008      	b.n	8002af2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	333b      	adds	r3, #59	; 0x3b
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	333c      	adds	r3, #60	; 0x3c
 8002b00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b04:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	787c      	ldrb	r4, [r7, #1]
 8002b0c:	78ba      	ldrb	r2, [r7, #2]
 8002b0e:	78f9      	ldrb	r1, [r7, #3]
 8002b10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b12:	9302      	str	r3, [sp, #8]
 8002b14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	4623      	mov	r3, r4
 8002b22:	f004 feab 	bl	800787c <USB_HC_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}

08002b3c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_HCD_HC_Halt+0x1e>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e00f      	b.n	8002b7a <HAL_HCD_HC_Halt+0x3e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f005 f8fb 	bl	8007d66 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	70fb      	strb	r3, [r7, #3]
 8002b96:	460b      	mov	r3, r1
 8002b98:	70bb      	strb	r3, [r7, #2]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	333b      	adds	r3, #59	; 0x3b
 8002bac:	78ba      	ldrb	r2, [r7, #2]
 8002bae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	333f      	adds	r3, #63	; 0x3f
 8002bbe:	787a      	ldrb	r2, [r7, #1]
 8002bc0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002bc2:	7c3b      	ldrb	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d112      	bne.n	8002bee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3342      	adds	r3, #66	; 0x42
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	333d      	adds	r3, #61	; 0x3d
 8002be8:	7f3a      	ldrb	r2, [r7, #28]
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e008      	b.n	8002c00 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3342      	adds	r3, #66	; 0x42
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c00:	787b      	ldrb	r3, [r7, #1]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	f200 80c6 	bhi.w	8002d94 <HAL_HCD_HC_SubmitRequest+0x210>
 8002c08:	a201      	add	r2, pc, #4	; (adr r2, 8002c10 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0e:	bf00      	nop
 8002c10:	08002c21 	.word	0x08002c21
 8002c14:	08002d81 	.word	0x08002d81
 8002c18:	08002c85 	.word	0x08002c85
 8002c1c:	08002d03 	.word	0x08002d03
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002c20:	7c3b      	ldrb	r3, [r7, #16]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	f040 80b8 	bne.w	8002d98 <HAL_HCD_HC_SubmitRequest+0x214>
 8002c28:	78bb      	ldrb	r3, [r7, #2]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 80b4 	bne.w	8002d98 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002c30:	8b3b      	ldrh	r3, [r7, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d108      	bne.n	8002c48 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3355      	adds	r3, #85	; 0x55
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3355      	adds	r3, #85	; 0x55
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3342      	adds	r3, #66	; 0x42
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c6e:	e093      	b.n	8002d98 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3342      	adds	r3, #66	; 0x42
 8002c7e:	2202      	movs	r2, #2
 8002c80:	701a      	strb	r2, [r3, #0]
      break;
 8002c82:	e089      	b.n	8002d98 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c84:	78bb      	ldrb	r3, [r7, #2]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11d      	bne.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3355      	adds	r3, #85	; 0x55
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3342      	adds	r3, #66	; 0x42
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002cb0:	e073      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3342      	adds	r3, #66	; 0x42
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
      break;
 8002cc4:	e069      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3354      	adds	r3, #84	; 0x54
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3342      	adds	r3, #66	; 0x42
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
      break;
 8002cec:	e055      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3342      	adds	r3, #66	; 0x42
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
      break;
 8002d00:	e04b      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d02:	78bb      	ldrb	r3, [r7, #2]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d11d      	bne.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3355      	adds	r3, #85	; 0x55
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3342      	adds	r3, #66	; 0x42
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d2e:	e034      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3342      	adds	r3, #66	; 0x42
 8002d3e:	2202      	movs	r2, #2
 8002d40:	701a      	strb	r2, [r3, #0]
      break;
 8002d42:	e02a      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3354      	adds	r3, #84	; 0x54
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3342      	adds	r3, #66	; 0x42
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
      break;
 8002d6a:	e016      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3342      	adds	r3, #66	; 0x42
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	701a      	strb	r2, [r3, #0]
      break;
 8002d7e:	e00c      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3342      	adds	r3, #66	; 0x42
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002d98:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3344      	adds	r3, #68	; 0x44
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	8b3a      	ldrh	r2, [r7, #24]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	202c      	movs	r0, #44	; 0x2c
 8002db4:	fb00 f303 	mul.w	r3, r0, r3
 8002db8:	440b      	add	r3, r1
 8002dba:	334c      	adds	r3, #76	; 0x4c
 8002dbc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3360      	adds	r3, #96	; 0x60
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3350      	adds	r3, #80	; 0x50
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3339      	adds	r3, #57	; 0x39
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3361      	adds	r3, #97	; 0x61
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	222c      	movs	r2, #44	; 0x2c
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	3338      	adds	r3, #56	; 0x38
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	18d1      	adds	r1, r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f004 fe4e 	bl	8007ac0 <USB_HC_StartXfer>
 8002e24:	4603      	mov	r3, r0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop

08002e30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 fb4f 	bl	80074ea <USB_GetMode>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	f040 80f6 	bne.w	8003040 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f004 fb33 	bl	80074c4 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80ec 	beq.w	800303e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 fb2a 	bl	80074c4 <USB_ReadInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e7a:	d104      	bne.n	8002e86 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fb1a 	bl	80074c4 <USB_ReadInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9a:	d104      	bne.n	8002ea6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ea4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 fb0a 	bl	80074c4 <USB_ReadInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eba:	d104      	bne.n	8002ec6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ec4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f004 fafa 	bl	80074c4 <USB_ReadInterrupts>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d103      	bne.n	8002ee2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 faec 	bl	80074c4 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef6:	d11c      	bne.n	8002f32 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f00:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f12:	2110      	movs	r1, #16
 8002f14:	6938      	ldr	r0, [r7, #16]
 8002f16:	f004 f9db 	bl	80072d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f1a:	6938      	ldr	r0, [r7, #16]
 8002f1c:	f004 fa0c 	bl	8007338 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f004 fbe2 	bl	80076f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f009 fe9f 	bl	800cc70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 fac4 	bl	80074c4 <USB_ReadInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f46:	d102      	bne.n	8002f4e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 f89e 	bl	800408a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 fab6 	bl	80074c4 <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d106      	bne.n	8002f70 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f009 fe68 	bl	800cc38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f004 faa5 	bl	80074c4 <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d101      	bne.n	8002f88 <HAL_HCD_IRQHandler+0x158>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_HCD_IRQHandler+0x15a>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d012      	beq.n	8002fb4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699a      	ldr	r2, [r3, #24]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0210 	bic.w	r2, r2, #16
 8002f9c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 ffa1 	bl	8003ee6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0210 	orr.w	r2, r2, #16
 8002fb2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f004 fa83 	bl	80074c4 <USB_ReadInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fc8:	d13a      	bne.n	8003040 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 feb8 	bl	8007d44 <USB_HC_ReadInterrupt>
 8002fd4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e025      	b.n	8003028 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d018      	beq.n	8003022 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003006:	d106      	bne.n	8003016 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8ab 	bl	800316a <HCD_HC_IN_IRQHandler>
 8003014:	e005      	b.n	8003022 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fbf9 	bl	8003814 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3301      	adds	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	429a      	cmp	r2, r3
 8003030:	d3d4      	bcc.n	8002fdc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303a:	615a      	str	r2, [r3, #20]
 800303c:	e000      	b.n	8003040 <HAL_HCD_IRQHandler+0x210>
      return;
 800303e:	bf00      	nop
    }
  }
}
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_HCD_Start+0x16>
 8003058:	2302      	movs	r3, #2
 800305a:	e013      	b.n	8003084 <HAL_HCD_Start+0x3e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fba4 	bl	80077b8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f004 f8bc 	bl	80071f2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_HCD_Stop+0x16>
 800309e:	2302      	movs	r3, #2
 80030a0:	e00d      	b.n	80030be <HAL_HCD_Stop+0x32>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 ff92 	bl	8007fd8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f004 fb46 	bl	8007764 <USB_ResetPort>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3360      	adds	r3, #96	; 0x60
 80030fc:	781b      	ldrb	r3, [r3, #0]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3350      	adds	r3, #80	; 0x50
 8003124:	681b      	ldr	r3, [r3, #0]
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f004 fb8a 	bl	8007858 <USB_GetCurrentFrame>
 8003144:	4603      	mov	r3, r0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f004 fb65 	bl	800782a <USB_GetHostSpeed>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d11a      	bne.n	80031d0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2304      	movs	r3, #4
 80031aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3361      	adds	r3, #97	; 0x61
 80031ba:	2206      	movs	r2, #6
 80031bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 fdcc 	bl	8007d66 <USB_HC_Halt>
 80031ce:	e0af      	b.n	8003330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e6:	d11b      	bne.n	8003220 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	461a      	mov	r2, r3
 80031f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	212c      	movs	r1, #44	; 0x2c
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	3361      	adds	r3, #97	; 0x61
 800320a:	2207      	movs	r2, #7
 800320c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f004 fda4 	bl	8007d66 <USB_HC_Halt>
 800321e:	e087      	b.n	8003330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b20      	cmp	r3, #32
 8003234:	d109      	bne.n	800324a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	461a      	mov	r2, r3
 8003244:	2320      	movs	r3, #32
 8003246:	6093      	str	r3, [r2, #8]
 8003248:	e072      	b.n	8003330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b08      	cmp	r3, #8
 800325e:	d11a      	bne.n	8003296 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	461a      	mov	r2, r3
 800326e:	2308      	movs	r3, #8
 8003270:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3361      	adds	r3, #97	; 0x61
 8003280:	2205      	movs	r2, #5
 8003282:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f004 fd69 	bl	8007d66 <USB_HC_Halt>
 8003294:	e04c      	b.n	8003330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ac:	d11b      	bne.n	80032e6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	461a      	mov	r2, r3
 80032bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3361      	adds	r3, #97	; 0x61
 80032d0:	2208      	movs	r2, #8
 80032d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 fd41 	bl	8007d66 <USB_HC_Halt>
 80032e4:	e024      	b.n	8003330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d119      	bne.n	8003330 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3361      	adds	r3, #97	; 0x61
 800331c:	2206      	movs	r2, #6
 800331e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fd1b 	bl	8007d66 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003346:	d112      	bne.n	800336e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fd07 	bl	8007d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	461a      	mov	r2, r3
 8003366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800336a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800336c:	e24e      	b.n	800380c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	f040 80df 	bne.w	8003544 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d019      	beq.n	80033c2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3348      	adds	r3, #72	; 0x48
 800339c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	0159      	lsls	r1, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033b0:	1ad2      	subs	r2, r2, r3
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	202c      	movs	r0, #44	; 0x2c
 80033b8:	fb00 f303 	mul.w	r3, r0, r3
 80033bc:	440b      	add	r3, r1
 80033be:	3350      	adds	r3, #80	; 0x50
 80033c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3361      	adds	r3, #97	; 0x61
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	335c      	adds	r3, #92	; 0x5c
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f2:	461a      	mov	r2, r3
 80033f4:	2301      	movs	r3, #1
 80033f6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	333f      	adds	r3, #63	; 0x3f
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d009      	beq.n	8003420 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	333f      	adds	r3, #63	; 0x3f
 800341a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800341c:	2b02      	cmp	r3, #2
 800341e:	d111      	bne.n	8003444 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f004 fc9b 	bl	8007d66 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	461a      	mov	r2, r3
 800343e:	2310      	movs	r3, #16
 8003440:	6093      	str	r3, [r2, #8]
 8003442:	e03a      	b.n	80034ba <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	333f      	adds	r3, #63	; 0x3f
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d009      	beq.n	800346c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	333f      	adds	r3, #63	; 0x3f
 8003466:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003468:	2b01      	cmp	r3, #1
 800346a:	d126      	bne.n	80034ba <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	440a      	add	r2, r1
 8003482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003486:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800348a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3360      	adds	r3, #96	; 0x60
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	b2d9      	uxtb	r1, r3
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	202c      	movs	r0, #44	; 0x2c
 80034a8:	fb00 f303 	mul.w	r3, r0, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3360      	adds	r3, #96	; 0x60
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f009 fbe9 	bl	800cc8c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d12b      	bne.n	800351a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3348      	adds	r3, #72	; 0x48
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	202c      	movs	r0, #44	; 0x2c
 80034d8:	fb00 f202 	mul.w	r2, r0, r2
 80034dc:	440a      	add	r2, r1
 80034de:	3240      	adds	r2, #64	; 0x40
 80034e0:	8812      	ldrh	r2, [r2, #0]
 80034e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 818e 	beq.w	800380c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3354      	adds	r3, #84	; 0x54
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	f083 0301 	eor.w	r3, r3, #1
 8003504:	b2d8      	uxtb	r0, r3
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3354      	adds	r3, #84	; 0x54
 8003514:	4602      	mov	r2, r0
 8003516:	701a      	strb	r2, [r3, #0]
}
 8003518:	e178      	b.n	800380c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3354      	adds	r3, #84	; 0x54
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	f083 0301 	eor.w	r3, r3, #1
 800352e:	b2d8      	uxtb	r0, r3
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3354      	adds	r3, #84	; 0x54
 800353e:	4602      	mov	r2, r0
 8003540:	701a      	strb	r2, [r3, #0]
}
 8003542:	e163      	b.n	800380c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	f040 80f6 	bne.w	8003748 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3361      	adds	r3, #97	; 0x61
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d109      	bne.n	8003584 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	3360      	adds	r3, #96	; 0x60
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e0c9      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3361      	adds	r3, #97	; 0x61
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b05      	cmp	r3, #5
 8003596:	d109      	bne.n	80035ac <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3360      	adds	r3, #96	; 0x60
 80035a6:	2205      	movs	r2, #5
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	e0b5      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3361      	adds	r3, #97	; 0x61
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b06      	cmp	r3, #6
 80035be:	d009      	beq.n	80035d4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3361      	adds	r3, #97	; 0x61
 80035ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d150      	bne.n	8003676 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	335c      	adds	r3, #92	; 0x5c
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	202c      	movs	r0, #44	; 0x2c
 80035ec:	fb00 f303 	mul.w	r3, r0, r3
 80035f0:	440b      	add	r3, r1
 80035f2:	335c      	adds	r3, #92	; 0x5c
 80035f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	335c      	adds	r3, #92	; 0x5c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d912      	bls.n	8003630 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	335c      	adds	r3, #92	; 0x5c
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	3360      	adds	r3, #96	; 0x60
 800362a:	2204      	movs	r2, #4
 800362c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800362e:	e073      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003658:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003660:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366e:	461a      	mov	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003674:	e050      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	3361      	adds	r3, #97	; 0x61
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d122      	bne.n	80036d0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	3360      	adds	r3, #96	; 0x60
 8003698:	2202      	movs	r2, #2
 800369a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e023      	b.n	8003718 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3361      	adds	r3, #97	; 0x61
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b07      	cmp	r3, #7
 80036e2:	d119      	bne.n	8003718 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	335c      	adds	r3, #92	; 0x5c
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	202c      	movs	r0, #44	; 0x2c
 80036fc:	fb00 f303 	mul.w	r3, r0, r3
 8003700:	440b      	add	r3, r1
 8003702:	335c      	adds	r3, #92	; 0x5c
 8003704:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	3360      	adds	r3, #96	; 0x60
 8003714:	2204      	movs	r2, #4
 8003716:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	2302      	movs	r3, #2
 8003728:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	b2d9      	uxtb	r1, r3
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	202c      	movs	r0, #44	; 0x2c
 8003734:	fb00 f303 	mul.w	r3, r0, r3
 8003738:	4413      	add	r3, r2
 800373a:	3360      	adds	r3, #96	; 0x60
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f009 faa3 	bl	800cc8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003746:	e061      	b.n	800380c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b10      	cmp	r3, #16
 800375c:	d156      	bne.n	800380c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	333f      	adds	r3, #63	; 0x3f
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b03      	cmp	r3, #3
 8003770:	d111      	bne.n	8003796 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	212c      	movs	r1, #44	; 0x2c
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	335c      	adds	r3, #92	; 0x5c
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f004 fae9 	bl	8007d66 <USB_HC_Halt>
 8003794:	e031      	b.n	80037fa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	333f      	adds	r3, #63	; 0x3f
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	333f      	adds	r3, #63	; 0x3f
 80037b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d11d      	bne.n	80037fa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	335c      	adds	r3, #92	; 0x5c
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d110      	bne.n	80037fa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3361      	adds	r3, #97	; 0x61
 80037e6:	2203      	movs	r2, #3
 80037e8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f004 fab6 	bl	8007d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4413      	add	r3, r2
 8003802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003806:	461a      	mov	r2, r3
 8003808:	2310      	movs	r3, #16
 800380a:	6093      	str	r3, [r2, #8]
}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b04      	cmp	r3, #4
 8003842:	d11a      	bne.n	800387a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	461a      	mov	r2, r3
 8003852:	2304      	movs	r3, #4
 8003854:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3361      	adds	r3, #97	; 0x61
 8003864:	2206      	movs	r2, #6
 8003866:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f004 fa77 	bl	8007d66 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003878:	e331      	b.n	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b20      	cmp	r3, #32
 800388e:	d12e      	bne.n	80038ee <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	461a      	mov	r2, r3
 800389e:	2320      	movs	r3, #32
 80038a0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	333d      	adds	r3, #61	; 0x3d
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	f040 8313 	bne.w	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	212c      	movs	r1, #44	; 0x2c
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	333d      	adds	r3, #61	; 0x3d
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	3360      	adds	r3, #96	; 0x60
 80038d8:	2202      	movs	r2, #2
 80038da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 fa3d 	bl	8007d66 <USB_HC_Halt>
}
 80038ec:	e2f7      	b.n	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003904:	d112      	bne.n	800392c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003912:	461a      	mov	r2, r3
 8003914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003918:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f004 fa1e 	bl	8007d66 <USB_HC_Halt>
}
 800392a:	e2d8      	b.n	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d140      	bne.n	80039c4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	335c      	adds	r3, #92	; 0x5c
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d111      	bne.n	800398e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	212c      	movs	r1, #44	; 0x2c
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	4413      	add	r3, r2
 8003976:	333d      	adds	r3, #61	; 0x3d
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	461a      	mov	r2, r3
 800398a:	2340      	movs	r3, #64	; 0x40
 800398c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	461a      	mov	r2, r3
 800399c:	2301      	movs	r3, #1
 800399e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3361      	adds	r3, #97	; 0x61
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f004 f9d2 	bl	8007d66 <USB_HC_Halt>
}
 80039c2:	e28c      	b.n	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d12c      	bne.n	8003a34 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3361      	adds	r3, #97	; 0x61
 80039e8:	2204      	movs	r2, #4
 80039ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	333d      	adds	r3, #61	; 0x3d
 80039fa:	2201      	movs	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	335c      	adds	r3, #92	; 0x5c
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 f9a3 	bl	8007d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2340      	movs	r3, #64	; 0x40
 8003a30:	6093      	str	r3, [r2, #8]
}
 8003a32:	e254      	b.n	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d11a      	bne.n	8003a80 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a56:	461a      	mov	r2, r3
 8003a58:	2308      	movs	r3, #8
 8003a5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3361      	adds	r3, #97	; 0x61
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f004 f974 	bl	8007d66 <USB_HC_Halt>
}
 8003a7e:	e22e      	b.n	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d140      	bne.n	8003b18 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	335c      	adds	r3, #92	; 0x5c
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3361      	adds	r3, #97	; 0x61
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	212c      	movs	r1, #44	; 0x2c
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	333d      	adds	r3, #61	; 0x3d
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d112      	bne.n	8003af4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	333c      	adds	r3, #60	; 0x3c
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	333d      	adds	r3, #61	; 0x3d
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 f931 	bl	8007d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	461a      	mov	r2, r3
 8003b12:	2310      	movs	r3, #16
 8003b14:	6093      	str	r3, [r2, #8]
}
 8003b16:	e1e2      	b.n	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d164      	bne.n	8003bf8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d111      	bne.n	8003b5a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	3361      	adds	r3, #97	; 0x61
 8003b44:	2206      	movs	r2, #6
 8003b46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 f907 	bl	8007d66 <USB_HC_Halt>
 8003b58:	e044      	b.n	8003be4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	335c      	adds	r3, #92	; 0x5c
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	202c      	movs	r0, #44	; 0x2c
 8003b72:	fb00 f303 	mul.w	r3, r0, r3
 8003b76:	440b      	add	r3, r1
 8003b78:	335c      	adds	r3, #92	; 0x5c
 8003b7a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	335c      	adds	r3, #92	; 0x5c
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d920      	bls.n	8003bd2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	335c      	adds	r3, #92	; 0x5c
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	212c      	movs	r1, #44	; 0x2c
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	3360      	adds	r3, #96	; 0x60
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	b2d9      	uxtb	r1, r3
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	202c      	movs	r0, #44	; 0x2c
 8003bbe:	fb00 f303 	mul.w	r3, r0, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3360      	adds	r3, #96	; 0x60
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f009 f85e 	bl	800cc8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bd0:	e008      	b.n	8003be4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	3360      	adds	r3, #96	; 0x60
 8003be0:	2202      	movs	r2, #2
 8003be2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2380      	movs	r3, #128	; 0x80
 8003bf4:	6093      	str	r3, [r2, #8]
}
 8003bf6:	e172      	b.n	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d11b      	bne.n	8003c48 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3361      	adds	r3, #97	; 0x61
 8003c1e:	2208      	movs	r2, #8
 8003c20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f004 f89a 	bl	8007d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c44:	6093      	str	r3, [r2, #8]
}
 8003c46:	e14a      	b.n	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	f040 813f 	bne.w	8003ede <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3361      	adds	r3, #97	; 0x61
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d17d      	bne.n	8003d70 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3360      	adds	r3, #96	; 0x60
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	212c      	movs	r1, #44	; 0x2c
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	333f      	adds	r3, #63	; 0x3f
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d00a      	beq.n	8003cb0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	333f      	adds	r3, #63	; 0x3f
 8003ca8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	f040 8100 	bne.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d113      	bne.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	212c      	movs	r1, #44	; 0x2c
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3355      	adds	r3, #85	; 0x55
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	f083 0301 	eor.w	r3, r3, #1
 8003ccc:	b2d8      	uxtb	r0, r3
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	3355      	adds	r3, #85	; 0x55
 8003cdc:	4602      	mov	r2, r0
 8003cde:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	f040 80e3 	bne.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	334c      	adds	r3, #76	; 0x4c
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80d8 	beq.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	334c      	adds	r3, #76	; 0x4c
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	202c      	movs	r0, #44	; 0x2c
 8003d16:	fb00 f202 	mul.w	r2, r0, r2
 8003d1a:	440a      	add	r2, r1
 8003d1c:	3240      	adds	r2, #64	; 0x40
 8003d1e:	8812      	ldrh	r2, [r2, #0]
 8003d20:	4413      	add	r3, r2
 8003d22:	3b01      	subs	r3, #1
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	202c      	movs	r0, #44	; 0x2c
 8003d2a:	fb00 f202 	mul.w	r2, r0, r2
 8003d2e:	440a      	add	r2, r1
 8003d30:	3240      	adds	r2, #64	; 0x40
 8003d32:	8812      	ldrh	r2, [r2, #0]
 8003d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80b5 	beq.w	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	212c      	movs	r1, #44	; 0x2c
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	3355      	adds	r3, #85	; 0x55
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	f083 0301 	eor.w	r3, r3, #1
 8003d5a:	b2d8      	uxtb	r0, r3
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	3355      	adds	r3, #85	; 0x55
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e09f      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3361      	adds	r3, #97	; 0x61
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d109      	bne.n	8003d98 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3360      	adds	r3, #96	; 0x60
 8003d92:	2202      	movs	r2, #2
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e08b      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3361      	adds	r3, #97	; 0x61
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d109      	bne.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3360      	adds	r3, #96	; 0x60
 8003dba:	2202      	movs	r2, #2
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e077      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3361      	adds	r3, #97	; 0x61
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d109      	bne.n	8003de8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3360      	adds	r3, #96	; 0x60
 8003de2:	2205      	movs	r2, #5
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e063      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3361      	adds	r3, #97	; 0x61
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b06      	cmp	r3, #6
 8003dfa:	d009      	beq.n	8003e10 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	3361      	adds	r3, #97	; 0x61
 8003e0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d14f      	bne.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	335c      	adds	r3, #92	; 0x5c
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	202c      	movs	r0, #44	; 0x2c
 8003e28:	fb00 f303 	mul.w	r3, r0, r3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	335c      	adds	r3, #92	; 0x5c
 8003e30:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	212c      	movs	r1, #44	; 0x2c
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	335c      	adds	r3, #92	; 0x5c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d912      	bls.n	8003e6c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	335c      	adds	r3, #92	; 0x5c
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3360      	adds	r3, #96	; 0x60
 8003e66:	2204      	movs	r2, #4
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e021      	b.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	212c      	movs	r1, #44	; 0x2c
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	3360      	adds	r3, #96	; 0x60
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e94:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e9c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eaa:	461a      	mov	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	b2d9      	uxtb	r1, r3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	202c      	movs	r0, #44	; 0x2c
 8003ecc:	fb00 f303 	mul.w	r3, r0, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3360      	adds	r3, #96	; 0x60
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f008 fed7 	bl	800cc8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ede:	bf00      	nop
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b08a      	sub	sp, #40	; 0x28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	0c5b      	lsrs	r3, r3, #17
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f1a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d004      	beq.n	8003f2c <HCD_RXQLVL_IRQHandler+0x46>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b05      	cmp	r3, #5
 8003f26:	f000 80a9 	beq.w	800407c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f2a:	e0aa      	b.n	8004082 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80a6 	beq.w	8004080 <HCD_RXQLVL_IRQHandler+0x19a>
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	212c      	movs	r1, #44	; 0x2c
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	3344      	adds	r3, #68	; 0x44
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 809b 	beq.w	8004080 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	3350      	adds	r3, #80	; 0x50
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	441a      	add	r2, r3
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	202c      	movs	r0, #44	; 0x2c
 8003f64:	fb00 f303 	mul.w	r3, r0, r3
 8003f68:	440b      	add	r3, r1
 8003f6a:	334c      	adds	r3, #76	; 0x4c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d87a      	bhi.n	8004068 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	212c      	movs	r1, #44	; 0x2c
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	4413      	add	r3, r2
 8003f82:	3344      	adds	r3, #68	; 0x44
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	b292      	uxth	r2, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f003 fa42 	bl	8007414 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3344      	adds	r3, #68	; 0x44
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	441a      	add	r2, r3
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	202c      	movs	r0, #44	; 0x2c
 8003faa:	fb00 f303 	mul.w	r3, r0, r3
 8003fae:	440b      	add	r3, r1
 8003fb0:	3344      	adds	r3, #68	; 0x44
 8003fb2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3350      	adds	r3, #80	; 0x50
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	441a      	add	r2, r3
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	202c      	movs	r0, #44	; 0x2c
 8003fce:	fb00 f303 	mul.w	r3, r0, r3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3350      	adds	r3, #80	; 0x50
 8003fd6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	0cdb      	lsrs	r3, r3, #19
 8003fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fec:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	212c      	movs	r1, #44	; 0x2c
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3340      	adds	r3, #64	; 0x40
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4293      	cmp	r3, r2
 8004004:	d13c      	bne.n	8004080 <HCD_RXQLVL_IRQHandler+0x19a>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d039      	beq.n	8004080 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004022:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800402a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	3354      	adds	r3, #84	; 0x54
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	f083 0301 	eor.w	r3, r3, #1
 8004052:	b2d8      	uxtb	r0, r3
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	3354      	adds	r3, #84	; 0x54
 8004062:	4602      	mov	r2, r0
 8004064:	701a      	strb	r2, [r3, #0]
      break;
 8004066:	e00b      	b.n	8004080 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3360      	adds	r3, #96	; 0x60
 8004076:	2204      	movs	r2, #4
 8004078:	701a      	strb	r2, [r3, #0]
      break;
 800407a:	e001      	b.n	8004080 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004080:	bf00      	nop
  }
}
 8004082:	bf00      	nop
 8004084:	3728      	adds	r7, #40	; 0x28
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b086      	sub	sp, #24
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040b6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d10b      	bne.n	80040da <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d102      	bne.n	80040d2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f008 fdc1 	bl	800cc54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f043 0302 	orr.w	r3, r3, #2
 80040d8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d132      	bne.n	800414a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f043 0308 	orr.w	r3, r3, #8
 80040ea:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d126      	bne.n	8004144 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d113      	bne.n	8004126 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004104:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004108:	d106      	bne.n	8004118 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2102      	movs	r1, #2
 8004110:	4618      	mov	r0, r3
 8004112:	f003 faed 	bl	80076f0 <USB_InitFSLSPClkSel>
 8004116:	e011      	b.n	800413c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f003 fae6 	bl	80076f0 <USB_InitFSLSPClkSel>
 8004124:	e00a      	b.n	800413c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d106      	bne.n	800413c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004134:	461a      	mov	r2, r3
 8004136:	f64e 2360 	movw	r3, #60000	; 0xea60
 800413a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f008 fdb7 	bl	800ccb0 <HAL_HCD_PortEnabled_Callback>
 8004142:	e002      	b.n	800414a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f008 fdc1 	bl	800cccc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b20      	cmp	r3, #32
 8004152:	d103      	bne.n	800415c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f043 0320 	orr.w	r3, r3, #32
 800415a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004162:	461a      	mov	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e12b      	b.n	80043da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fc fed6 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	; 0x24
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041d4:	f001 f964 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 80041d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4a81      	ldr	r2, [pc, #516]	; (80043e4 <HAL_I2C_Init+0x274>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d807      	bhi.n	80041f4 <HAL_I2C_Init+0x84>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a80      	ldr	r2, [pc, #512]	; (80043e8 <HAL_I2C_Init+0x278>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	bf94      	ite	ls
 80041ec:	2301      	movls	r3, #1
 80041ee:	2300      	movhi	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e006      	b.n	8004202 <HAL_I2C_Init+0x92>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a7d      	ldr	r2, [pc, #500]	; (80043ec <HAL_I2C_Init+0x27c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	bf94      	ite	ls
 80041fc:	2301      	movls	r3, #1
 80041fe:	2300      	movhi	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0e7      	b.n	80043da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a78      	ldr	r2, [pc, #480]	; (80043f0 <HAL_I2C_Init+0x280>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0c9b      	lsrs	r3, r3, #18
 8004214:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a6a      	ldr	r2, [pc, #424]	; (80043e4 <HAL_I2C_Init+0x274>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d802      	bhi.n	8004244 <HAL_I2C_Init+0xd4>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3301      	adds	r3, #1
 8004242:	e009      	b.n	8004258 <HAL_I2C_Init+0xe8>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	4a69      	ldr	r2, [pc, #420]	; (80043f4 <HAL_I2C_Init+0x284>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	3301      	adds	r3, #1
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	430b      	orrs	r3, r1
 800425e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800426a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	495c      	ldr	r1, [pc, #368]	; (80043e4 <HAL_I2C_Init+0x274>)
 8004274:	428b      	cmp	r3, r1
 8004276:	d819      	bhi.n	80042ac <HAL_I2C_Init+0x13c>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1e59      	subs	r1, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	fbb1 f3f3 	udiv	r3, r1, r3
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	f640 73fc 	movw	r3, #4092	; 0xffc
 800428c:	400b      	ands	r3, r1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_I2C_Init+0x138>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1e59      	subs	r1, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a6:	e051      	b.n	800434c <HAL_I2C_Init+0x1dc>
 80042a8:	2304      	movs	r3, #4
 80042aa:	e04f      	b.n	800434c <HAL_I2C_Init+0x1dc>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d111      	bne.n	80042d8 <HAL_I2C_Init+0x168>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1e58      	subs	r0, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	440b      	add	r3, r1
 80042c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c6:	3301      	adds	r3, #1
 80042c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	e012      	b.n	80042fe <HAL_I2C_Init+0x18e>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1e58      	subs	r0, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	0099      	lsls	r1, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ee:	3301      	adds	r3, #1
 80042f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_I2C_Init+0x196>
 8004302:	2301      	movs	r3, #1
 8004304:	e022      	b.n	800434c <HAL_I2C_Init+0x1dc>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10e      	bne.n	800432c <HAL_I2C_Init+0x1bc>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1e58      	subs	r0, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	440b      	add	r3, r1
 800431c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004320:	3301      	adds	r3, #1
 8004322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432a:	e00f      	b.n	800434c <HAL_I2C_Init+0x1dc>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1e58      	subs	r0, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	0099      	lsls	r1, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004342:	3301      	adds	r3, #1
 8004344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	6809      	ldr	r1, [r1, #0]
 8004350:	4313      	orrs	r3, r2
 8004352:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800437a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6911      	ldr	r1, [r2, #16]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68d2      	ldr	r2, [r2, #12]
 8004386:	4311      	orrs	r1, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	430b      	orrs	r3, r1
 800438e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	000186a0 	.word	0x000186a0
 80043e8:	001e847f 	.word	0x001e847f
 80043ec:	003d08ff 	.word	0x003d08ff
 80043f0:	431bde83 	.word	0x431bde83
 80043f4:	10624dd3 	.word	0x10624dd3

080043f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b20      	cmp	r3, #32
 800440c:	d129      	bne.n	8004462 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2224      	movs	r2, #36	; 0x24
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0210 	bic.w	r2, r2, #16
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b20      	cmp	r3, #32
 8004488:	d12a      	bne.n	80044e0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2224      	movs	r2, #36	; 0x24
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80044aa:	89fb      	ldrh	r3, [r7, #14]
 80044ac:	f023 030f 	bic.w	r3, r3, #15
 80044b0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	89fb      	ldrh	r3, [r7, #14]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	89fa      	ldrh	r2, [r7, #14]
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0bf      	b.n	8004682 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fd80 	bl	800101c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004532:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004548:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6899      	ldr	r1, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b4a      	ldr	r3, [pc, #296]	; (800468c <HAL_LTDC_Init+0x19c>)
 8004564:	400b      	ands	r3, r1
 8004566:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6899      	ldr	r1, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68d9      	ldr	r1, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b3e      	ldr	r3, [pc, #248]	; (800468c <HAL_LTDC_Init+0x19c>)
 8004592:	400b      	ands	r3, r1
 8004594:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	041b      	lsls	r3, r3, #16
 800459c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68d9      	ldr	r1, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6919      	ldr	r1, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b33      	ldr	r3, [pc, #204]	; (800468c <HAL_LTDC_Init+0x19c>)
 80045c0:	400b      	ands	r3, r1
 80045c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	041b      	lsls	r3, r3, #16
 80045ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6919      	ldr	r1, [r3, #16]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6959      	ldr	r1, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b27      	ldr	r3, [pc, #156]	; (800468c <HAL_LTDC_Init+0x19c>)
 80045ee:	400b      	ands	r3, r1
 80045f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6959      	ldr	r1, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0206 	orr.w	r2, r2, #6
 800465e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	f000f800 	.word	0xf000f800

08004690 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d023      	beq.n	80046fa <HAL_LTDC_IRQHandler+0x6a>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01e      	beq.n	80046fa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0204 	bic.w	r2, r2, #4
 80046ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2204      	movs	r2, #4
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2204      	movs	r2, #4
 80046e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f86f 	bl	80047d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d023      	beq.n	800474c <HAL_LTDC_IRQHandler+0xbc>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01e      	beq.n	800474c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0202 	bic.w	r2, r2, #2
 800471c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2202      	movs	r2, #2
 8004724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800472c:	f043 0202 	orr.w	r2, r3, #2
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2204      	movs	r2, #4
 800473a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f846 	bl	80047d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01b      	beq.n	800478e <HAL_LTDC_IRQHandler+0xfe>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d016      	beq.n	800478e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f82f 	bl	80047ec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <HAL_LTDC_IRQHandler+0x140>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0208 	bic.w	r2, r2, #8
 80047b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2208      	movs	r2, #8
 80047b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f818 	bl	8004800 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004814:	b5b0      	push	{r4, r5, r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_LTDC_ConfigLayer+0x1a>
 800482a:	2302      	movs	r3, #2
 800482c:	e02c      	b.n	8004888 <HAL_LTDC_ConfigLayer+0x74>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2134      	movs	r1, #52	; 0x34
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	4413      	add	r3, r2
 800484a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4614      	mov	r4, r2
 8004852:	461d      	mov	r5, r3
 8004854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800485a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800485c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800485e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f811 	bl	8004890 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bdb0      	pop	{r4, r5, r7, pc}

08004890 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004890:	b480      	push	{r7}
 8004892:	b089      	sub	sp, #36	; 0x24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	4413      	add	r3, r2
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	01db      	lsls	r3, r3, #7
 80048bc:	4413      	add	r3, r2
 80048be:	3384      	adds	r3, #132	; 0x84
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	4611      	mov	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	01d2      	lsls	r2, r2, #7
 80048cc:	440a      	add	r2, r1
 80048ce:	3284      	adds	r2, #132	; 0x84
 80048d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048e6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048e8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4619      	mov	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	01db      	lsls	r3, r3, #7
 80048f4:	440b      	add	r3, r1
 80048f6:	3384      	adds	r3, #132	; 0x84
 80048f8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800490e:	4413      	add	r3, r2
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	01db      	lsls	r3, r3, #7
 800491e:	4413      	add	r3, r2
 8004920:	3384      	adds	r3, #132	; 0x84
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	4611      	mov	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	01d2      	lsls	r2, r2, #7
 800492e:	440a      	add	r2, r1
 8004930:	3284      	adds	r2, #132	; 0x84
 8004932:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004936:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004946:	4413      	add	r3, r2
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4619      	mov	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	01db      	lsls	r3, r3, #7
 8004954:	440b      	add	r3, r1
 8004956:	3384      	adds	r3, #132	; 0x84
 8004958:	4619      	mov	r1, r3
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4313      	orrs	r3, r2
 800495e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	01db      	lsls	r3, r3, #7
 800496a:	4413      	add	r3, r2
 800496c:	3384      	adds	r3, #132	; 0x84
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	4611      	mov	r1, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	01d2      	lsls	r2, r2, #7
 800497a:	440a      	add	r2, r1
 800497c:	3284      	adds	r2, #132	; 0x84
 800497e:	f023 0307 	bic.w	r3, r3, #7
 8004982:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	01db      	lsls	r3, r3, #7
 800498e:	4413      	add	r3, r2
 8004990:	3384      	adds	r3, #132	; 0x84
 8004992:	461a      	mov	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	061b      	lsls	r3, r3, #24
 80049b4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	01db      	lsls	r3, r3, #7
 80049c0:	4413      	add	r3, r2
 80049c2:	3384      	adds	r3, #132	; 0x84
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	01db      	lsls	r3, r3, #7
 80049d0:	4413      	add	r3, r2
 80049d2:	3384      	adds	r3, #132	; 0x84
 80049d4:	461a      	mov	r2, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049e0:	461a      	mov	r2, r3
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	440b      	add	r3, r1
 80049f6:	3384      	adds	r3, #132	; 0x84
 80049f8:	4619      	mov	r1, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	01db      	lsls	r3, r3, #7
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3384      	adds	r3, #132	; 0x84
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	4611      	mov	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	01d2      	lsls	r2, r2, #7
 8004a1a:	440a      	add	r2, r1
 8004a1c:	3284      	adds	r2, #132	; 0x84
 8004a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	01db      	lsls	r3, r3, #7
 8004a2e:	4413      	add	r3, r2
 8004a30:	3384      	adds	r3, #132	; 0x84
 8004a32:	461a      	mov	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	01db      	lsls	r3, r3, #7
 8004a44:	4413      	add	r3, r2
 8004a46:	3384      	adds	r3, #132	; 0x84
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	01d2      	lsls	r2, r2, #7
 8004a54:	440a      	add	r2, r1
 8004a56:	3284      	adds	r2, #132	; 0x84
 8004a58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a5c:	f023 0307 	bic.w	r3, r3, #7
 8004a60:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	69da      	ldr	r2, [r3, #28]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	6809      	ldr	r1, [r1, #0]
 8004a6e:	4608      	mov	r0, r1
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	01c9      	lsls	r1, r1, #7
 8004a74:	4401      	add	r1, r0
 8004a76:	3184      	adds	r1, #132	; 0x84
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	01db      	lsls	r3, r3, #7
 8004a86:	4413      	add	r3, r2
 8004a88:	3384      	adds	r3, #132	; 0x84
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	01db      	lsls	r3, r3, #7
 8004a96:	4413      	add	r3, r2
 8004a98:	3384      	adds	r3, #132	; 0x84
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	01db      	lsls	r3, r3, #7
 8004aaa:	4413      	add	r3, r2
 8004aac:	3384      	adds	r3, #132	; 0x84
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004abe:	2304      	movs	r3, #4
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e01b      	b.n	8004afc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d102      	bne.n	8004ad2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004acc:	2303      	movs	r3, #3
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e014      	b.n	8004afc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d00b      	beq.n	8004af2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d007      	beq.n	8004af2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d003      	beq.n	8004af2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004aee:	2b07      	cmp	r3, #7
 8004af0:	d102      	bne.n	8004af8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004af2:	2302      	movs	r3, #2
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	e001      	b.n	8004afc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004af8:	2301      	movs	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	01db      	lsls	r3, r3, #7
 8004b06:	4413      	add	r3, r2
 8004b08:	3384      	adds	r3, #132	; 0x84
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	4611      	mov	r1, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	01d2      	lsls	r2, r2, #7
 8004b16:	440a      	add	r2, r1
 8004b18:	3284      	adds	r2, #132	; 0x84
 8004b1a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	1acb      	subs	r3, r1, r3
 8004b36:	69f9      	ldr	r1, [r7, #28]
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b3e:	68f9      	ldr	r1, [r7, #12]
 8004b40:	6809      	ldr	r1, [r1, #0]
 8004b42:	4608      	mov	r0, r1
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	01c9      	lsls	r1, r1, #7
 8004b48:	4401      	add	r1, r0
 8004b4a:	3184      	adds	r1, #132	; 0x84
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	01db      	lsls	r3, r3, #7
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3384      	adds	r3, #132	; 0x84
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	4611      	mov	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	01d2      	lsls	r2, r2, #7
 8004b6a:	440a      	add	r2, r1
 8004b6c:	3284      	adds	r2, #132	; 0x84
 8004b6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	01db      	lsls	r3, r3, #7
 8004b82:	4413      	add	r3, r2
 8004b84:	3384      	adds	r3, #132	; 0x84
 8004b86:	461a      	mov	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	01db      	lsls	r3, r3, #7
 8004b98:	4413      	add	r3, r2
 8004b9a:	3384      	adds	r3, #132	; 0x84
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	01d2      	lsls	r2, r2, #7
 8004ba8:	440a      	add	r2, r1
 8004baa:	3284      	adds	r2, #132	; 0x84
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6013      	str	r3, [r2, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3724      	adds	r7, #36	; 0x24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e267      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d075      	beq.n	8004cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bde:	4b88      	ldr	r3, [pc, #544]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d00c      	beq.n	8004c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bea:	4b85      	ldr	r3, [pc, #532]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d112      	bne.n	8004c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf6:	4b82      	ldr	r3, [pc, #520]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c02:	d10b      	bne.n	8004c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	4b7e      	ldr	r3, [pc, #504]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d05b      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x108>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d157      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e242      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c24:	d106      	bne.n	8004c34 <HAL_RCC_OscConfig+0x74>
 8004c26:	4b76      	ldr	r3, [pc, #472]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a75      	ldr	r2, [pc, #468]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e01d      	b.n	8004c70 <HAL_RCC_OscConfig+0xb0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCC_OscConfig+0x98>
 8004c3e:	4b70      	ldr	r3, [pc, #448]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a6f      	ldr	r2, [pc, #444]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	4b6d      	ldr	r3, [pc, #436]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6c      	ldr	r2, [pc, #432]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e00b      	b.n	8004c70 <HAL_RCC_OscConfig+0xb0>
 8004c58:	4b69      	ldr	r3, [pc, #420]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a68      	ldr	r2, [pc, #416]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b66      	ldr	r3, [pc, #408]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a65      	ldr	r2, [pc, #404]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d013      	beq.n	8004ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fc fdee 	bl	8001858 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c80:	f7fc fdea 	bl	8001858 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e207      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	4b5b      	ldr	r3, [pc, #364]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0xc0>
 8004c9e:	e014      	b.n	8004cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fc fdda 	bl	8001858 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fc fdd6 	bl	8001858 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e1f3      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cba:	4b51      	ldr	r3, [pc, #324]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0xe8>
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d063      	beq.n	8004d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cd6:	4b4a      	ldr	r3, [pc, #296]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce2:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d11c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cee:	4b44      	ldr	r3, [pc, #272]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d116      	bne.n	8004d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfa:	4b41      	ldr	r3, [pc, #260]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_RCC_OscConfig+0x152>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d001      	beq.n	8004d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e1c7      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d12:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4937      	ldr	r1, [pc, #220]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d26:	e03a      	b.n	8004d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d020      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d30:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <HAL_RCC_OscConfig+0x244>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fc fd8f 	bl	8001858 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3e:	f7fc fd8b 	bl	8001858 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e1a8      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d50:	4b2b      	ldr	r3, [pc, #172]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	4b28      	ldr	r3, [pc, #160]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4925      	ldr	r1, [pc, #148]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d72:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <HAL_RCC_OscConfig+0x244>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fc fd6e 	bl	8001858 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d80:	f7fc fd6a 	bl	8001858 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e187      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d036      	beq.n	8004e18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db2:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <HAL_RCC_OscConfig+0x248>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fc fd4e 	bl	8001858 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc0:	f7fc fd4a 	bl	8001858 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e167      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x200>
 8004dde:	e01b      	b.n	8004e18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <HAL_RCC_OscConfig+0x248>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de6:	f7fc fd37 	bl	8001858 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dec:	e00e      	b.n	8004e0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dee:	f7fc fd33 	bl	8001858 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d907      	bls.n	8004e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e150      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	42470000 	.word	0x42470000
 8004e08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e0c:	4b88      	ldr	r3, [pc, #544]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1ea      	bne.n	8004dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8097 	beq.w	8004f54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e26:	2300      	movs	r3, #0
 8004e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2a:	4b81      	ldr	r3, [pc, #516]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10f      	bne.n	8004e56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	4b7d      	ldr	r3, [pc, #500]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a7c      	ldr	r2, [pc, #496]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
 8004e46:	4b7a      	ldr	r3, [pc, #488]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e56:	4b77      	ldr	r3, [pc, #476]	; (8005034 <HAL_RCC_OscConfig+0x474>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d118      	bne.n	8004e94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e62:	4b74      	ldr	r3, [pc, #464]	; (8005034 <HAL_RCC_OscConfig+0x474>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a73      	ldr	r2, [pc, #460]	; (8005034 <HAL_RCC_OscConfig+0x474>)
 8004e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6e:	f7fc fcf3 	bl	8001858 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e76:	f7fc fcef 	bl	8001858 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e10c      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e88:	4b6a      	ldr	r3, [pc, #424]	; (8005034 <HAL_RCC_OscConfig+0x474>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x2ea>
 8004e9c:	4b64      	ldr	r3, [pc, #400]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	4a63      	ldr	r2, [pc, #396]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea8:	e01c      	b.n	8004ee4 <HAL_RCC_OscConfig+0x324>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x30c>
 8004eb2:	4b5f      	ldr	r3, [pc, #380]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a5e      	ldr	r2, [pc, #376]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebe:	4b5c      	ldr	r3, [pc, #368]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a5b      	ldr	r2, [pc, #364]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eca:	e00b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x324>
 8004ecc:	4b58      	ldr	r3, [pc, #352]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	4a57      	ldr	r2, [pc, #348]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed8:	4b55      	ldr	r3, [pc, #340]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004edc:	4a54      	ldr	r2, [pc, #336]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004ede:	f023 0304 	bic.w	r3, r3, #4
 8004ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eec:	f7fc fcb4 	bl	8001858 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fc fcb0 	bl	8001858 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e0cb      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0a:	4b49      	ldr	r3, [pc, #292]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0ee      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x334>
 8004f16:	e014      	b.n	8004f42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f18:	f7fc fc9e 	bl	8001858 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fc fc9a 	bl	8001858 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e0b5      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f36:	4b3e      	ldr	r3, [pc, #248]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1ee      	bne.n	8004f20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d105      	bne.n	8004f54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f48:	4b39      	ldr	r3, [pc, #228]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	4a38      	ldr	r2, [pc, #224]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80a1 	beq.w	80050a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f5e:	4b34      	ldr	r3, [pc, #208]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d05c      	beq.n	8005024 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d141      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f72:	4b31      	ldr	r3, [pc, #196]	; (8005038 <HAL_RCC_OscConfig+0x478>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f78:	f7fc fc6e 	bl	8001858 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f80:	f7fc fc6a 	bl	8001858 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e087      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f92:	4b27      	ldr	r3, [pc, #156]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	019b      	lsls	r3, r3, #6
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	041b      	lsls	r3, r3, #16
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	491b      	ldr	r1, [pc, #108]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc8:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <HAL_RCC_OscConfig+0x478>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fce:	f7fc fc43 	bl	8001858 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd6:	f7fc fc3f 	bl	8001858 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e05c      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x416>
 8004ff4:	e054      	b.n	80050a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff6:	4b10      	ldr	r3, [pc, #64]	; (8005038 <HAL_RCC_OscConfig+0x478>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fc fc2c 	bl	8001858 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005004:	f7fc fc28 	bl	8001858 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e045      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005016:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_RCC_OscConfig+0x470>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x444>
 8005022:	e03d      	b.n	80050a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d107      	bne.n	800503c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e038      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
 8005030:	40023800 	.word	0x40023800
 8005034:	40007000 	.word	0x40007000
 8005038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800503c:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <HAL_RCC_OscConfig+0x4ec>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d028      	beq.n	800509c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d121      	bne.n	800509c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d11a      	bne.n	800509c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800506c:	4013      	ands	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005074:	4293      	cmp	r3, r2
 8005076:	d111      	bne.n	800509c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	3b01      	subs	r3, #1
 8005086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005088:	429a      	cmp	r2, r3
 800508a:	d107      	bne.n	800509c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800

080050b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0cc      	b.n	800525e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050c4:	4b68      	ldr	r3, [pc, #416]	; (8005268 <HAL_RCC_ClockConfig+0x1b8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d90c      	bls.n	80050ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b65      	ldr	r3, [pc, #404]	; (8005268 <HAL_RCC_ClockConfig+0x1b8>)
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b63      	ldr	r3, [pc, #396]	; (8005268 <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0b8      	b.n	800525e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d020      	beq.n	800513a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005104:	4b59      	ldr	r3, [pc, #356]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	4a58      	ldr	r2, [pc, #352]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800510e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800511c:	4b53      	ldr	r3, [pc, #332]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4a52      	ldr	r2, [pc, #328]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005128:	4b50      	ldr	r3, [pc, #320]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	494d      	ldr	r1, [pc, #308]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d044      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d107      	bne.n	800515e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514e:	4b47      	ldr	r3, [pc, #284]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d119      	bne.n	800518e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e07f      	b.n	800525e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d003      	beq.n	800516e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800516a:	2b03      	cmp	r3, #3
 800516c:	d107      	bne.n	800517e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516e:	4b3f      	ldr	r3, [pc, #252]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e06f      	b.n	800525e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517e:	4b3b      	ldr	r3, [pc, #236]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e067      	b.n	800525e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518e:	4b37      	ldr	r3, [pc, #220]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f023 0203 	bic.w	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4934      	ldr	r1, [pc, #208]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051a0:	f7fc fb5a 	bl	8001858 <HAL_GetTick>
 80051a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a6:	e00a      	b.n	80051be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a8:	f7fc fb56 	bl	8001858 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e04f      	b.n	800525e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051be:	4b2b      	ldr	r3, [pc, #172]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 020c 	and.w	r2, r3, #12
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d1eb      	bne.n	80051a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051d0:	4b25      	ldr	r3, [pc, #148]	; (8005268 <HAL_RCC_ClockConfig+0x1b8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d20c      	bcs.n	80051f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b22      	ldr	r3, [pc, #136]	; (8005268 <HAL_RCC_ClockConfig+0x1b8>)
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e6:	4b20      	ldr	r3, [pc, #128]	; (8005268 <HAL_RCC_ClockConfig+0x1b8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d001      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e032      	b.n	800525e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005204:	4b19      	ldr	r3, [pc, #100]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4916      	ldr	r1, [pc, #88]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005222:	4b12      	ldr	r3, [pc, #72]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	490e      	ldr	r1, [pc, #56]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 8005232:	4313      	orrs	r3, r2
 8005234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005236:	f000 f821 	bl	800527c <HAL_RCC_GetSysClockFreq>
 800523a:	4602      	mov	r2, r0
 800523c:	4b0b      	ldr	r3, [pc, #44]	; (800526c <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	490a      	ldr	r1, [pc, #40]	; (8005270 <HAL_RCC_ClockConfig+0x1c0>)
 8005248:	5ccb      	ldrb	r3, [r1, r3]
 800524a:	fa22 f303 	lsr.w	r3, r2, r3
 800524e:	4a09      	ldr	r2, [pc, #36]	; (8005274 <HAL_RCC_ClockConfig+0x1c4>)
 8005250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005252:	4b09      	ldr	r3, [pc, #36]	; (8005278 <HAL_RCC_ClockConfig+0x1c8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7fc f992 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40023c00 	.word	0x40023c00
 800526c:	40023800 	.word	0x40023800
 8005270:	0800d424 	.word	0x0800d424
 8005274:	20000000 	.word	0x20000000
 8005278:	20000004 	.word	0x20000004

0800527c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800527c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005280:	b094      	sub	sp, #80	; 0x50
 8005282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	647b      	str	r3, [r7, #68]	; 0x44
 8005288:	2300      	movs	r3, #0
 800528a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528c:	2300      	movs	r3, #0
 800528e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005294:	4b79      	ldr	r3, [pc, #484]	; (800547c <HAL_RCC_GetSysClockFreq+0x200>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 030c 	and.w	r3, r3, #12
 800529c:	2b08      	cmp	r3, #8
 800529e:	d00d      	beq.n	80052bc <HAL_RCC_GetSysClockFreq+0x40>
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	f200 80e1 	bhi.w	8005468 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_RCC_GetSysClockFreq+0x34>
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d003      	beq.n	80052b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80052ae:	e0db      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052b0:	4b73      	ldr	r3, [pc, #460]	; (8005480 <HAL_RCC_GetSysClockFreq+0x204>)
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052b4:	e0db      	b.n	800546e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052b6:	4b73      	ldr	r3, [pc, #460]	; (8005484 <HAL_RCC_GetSysClockFreq+0x208>)
 80052b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052ba:	e0d8      	b.n	800546e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052bc:	4b6f      	ldr	r3, [pc, #444]	; (800547c <HAL_RCC_GetSysClockFreq+0x200>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052c6:	4b6d      	ldr	r3, [pc, #436]	; (800547c <HAL_RCC_GetSysClockFreq+0x200>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d063      	beq.n	800539a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d2:	4b6a      	ldr	r3, [pc, #424]	; (800547c <HAL_RCC_GetSysClockFreq+0x200>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	2200      	movs	r2, #0
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38
 80052dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30
 80052e6:	2300      	movs	r3, #0
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052ee:	4622      	mov	r2, r4
 80052f0:	462b      	mov	r3, r5
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f04f 0100 	mov.w	r1, #0
 80052fa:	0159      	lsls	r1, r3, #5
 80052fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005300:	0150      	lsls	r0, r2, #5
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4621      	mov	r1, r4
 8005308:	1a51      	subs	r1, r2, r1
 800530a:	6139      	str	r1, [r7, #16]
 800530c:	4629      	mov	r1, r5
 800530e:	eb63 0301 	sbc.w	r3, r3, r1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005320:	4659      	mov	r1, fp
 8005322:	018b      	lsls	r3, r1, #6
 8005324:	4651      	mov	r1, sl
 8005326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800532a:	4651      	mov	r1, sl
 800532c:	018a      	lsls	r2, r1, #6
 800532e:	4651      	mov	r1, sl
 8005330:	ebb2 0801 	subs.w	r8, r2, r1
 8005334:	4659      	mov	r1, fp
 8005336:	eb63 0901 	sbc.w	r9, r3, r1
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800534a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800534e:	4690      	mov	r8, r2
 8005350:	4699      	mov	r9, r3
 8005352:	4623      	mov	r3, r4
 8005354:	eb18 0303 	adds.w	r3, r8, r3
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	462b      	mov	r3, r5
 800535c:	eb49 0303 	adc.w	r3, r9, r3
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800536e:	4629      	mov	r1, r5
 8005370:	024b      	lsls	r3, r1, #9
 8005372:	4621      	mov	r1, r4
 8005374:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005378:	4621      	mov	r1, r4
 800537a:	024a      	lsls	r2, r1, #9
 800537c:	4610      	mov	r0, r2
 800537e:	4619      	mov	r1, r3
 8005380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005382:	2200      	movs	r2, #0
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
 8005386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800538c:	f7fa ff30 	bl	80001f0 <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4613      	mov	r3, r2
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005398:	e058      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539a:	4b38      	ldr	r3, [pc, #224]	; (800547c <HAL_RCC_GetSysClockFreq+0x200>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	099b      	lsrs	r3, r3, #6
 80053a0:	2200      	movs	r2, #0
 80053a2:	4618      	mov	r0, r3
 80053a4:	4611      	mov	r1, r2
 80053a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053aa:	623b      	str	r3, [r7, #32]
 80053ac:	2300      	movs	r3, #0
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
 80053b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053b4:	4642      	mov	r2, r8
 80053b6:	464b      	mov	r3, r9
 80053b8:	f04f 0000 	mov.w	r0, #0
 80053bc:	f04f 0100 	mov.w	r1, #0
 80053c0:	0159      	lsls	r1, r3, #5
 80053c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c6:	0150      	lsls	r0, r2, #5
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4641      	mov	r1, r8
 80053ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80053d2:	4649      	mov	r1, r9
 80053d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053ec:	ebb2 040a 	subs.w	r4, r2, sl
 80053f0:	eb63 050b 	sbc.w	r5, r3, fp
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	00eb      	lsls	r3, r5, #3
 80053fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005402:	00e2      	lsls	r2, r4, #3
 8005404:	4614      	mov	r4, r2
 8005406:	461d      	mov	r5, r3
 8005408:	4643      	mov	r3, r8
 800540a:	18e3      	adds	r3, r4, r3
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	464b      	mov	r3, r9
 8005410:	eb45 0303 	adc.w	r3, r5, r3
 8005414:	607b      	str	r3, [r7, #4]
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005422:	4629      	mov	r1, r5
 8005424:	028b      	lsls	r3, r1, #10
 8005426:	4621      	mov	r1, r4
 8005428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800542c:	4621      	mov	r1, r4
 800542e:	028a      	lsls	r2, r1, #10
 8005430:	4610      	mov	r0, r2
 8005432:	4619      	mov	r1, r3
 8005434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005436:	2200      	movs	r2, #0
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	61fa      	str	r2, [r7, #28]
 800543c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005440:	f7fa fed6 	bl	80001f0 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4613      	mov	r3, r2
 800544a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCC_GetSysClockFreq+0x200>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	0c1b      	lsrs	r3, r3, #16
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	3301      	adds	r3, #1
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800545c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800545e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005466:	e002      	b.n	800546e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <HAL_RCC_GetSysClockFreq+0x204>)
 800546a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800546c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800546e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005470:	4618      	mov	r0, r3
 8005472:	3750      	adds	r7, #80	; 0x50
 8005474:	46bd      	mov	sp, r7
 8005476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800547a:	bf00      	nop
 800547c:	40023800 	.word	0x40023800
 8005480:	00f42400 	.word	0x00f42400
 8005484:	007a1200 	.word	0x007a1200

08005488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800548c:	4b03      	ldr	r3, [pc, #12]	; (800549c <HAL_RCC_GetHCLKFreq+0x14>)
 800548e:	681b      	ldr	r3, [r3, #0]
}
 8005490:	4618      	mov	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000000 	.word	0x20000000

080054a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054a4:	f7ff fff0 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 80054a8:	4602      	mov	r2, r0
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	0a9b      	lsrs	r3, r3, #10
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	4903      	ldr	r1, [pc, #12]	; (80054c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b6:	5ccb      	ldrb	r3, [r1, r3]
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40023800 	.word	0x40023800
 80054c4:	0800d434 	.word	0x0800d434

080054c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054cc:	f7ff ffdc 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	0b5b      	lsrs	r3, r3, #13
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	4903      	ldr	r1, [pc, #12]	; (80054ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80054de:	5ccb      	ldrb	r3, [r1, r3]
 80054e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40023800 	.word	0x40023800
 80054ec:	0800d434 	.word	0x0800d434

080054f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	220f      	movs	r2, #15
 80054fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005500:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_RCC_GetClockConfig+0x5c>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0203 	and.w	r2, r3, #3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800550c:	4b0f      	ldr	r3, [pc, #60]	; (800554c <HAL_RCC_GetClockConfig+0x5c>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <HAL_RCC_GetClockConfig+0x5c>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <HAL_RCC_GetClockConfig+0x5c>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <HAL_RCC_GetClockConfig+0x60>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 020f 	and.w	r2, r3, #15
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	601a      	str	r2, [r3, #0]
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40023800 	.word	0x40023800
 8005550:	40023c00 	.word	0x40023c00

08005554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005578:	2b00      	cmp	r3, #0
 800557a:	d105      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005584:	2b00      	cmp	r3, #0
 8005586:	d075      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005588:	4b91      	ldr	r3, [pc, #580]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800558e:	f7fc f963 	bl	8001858 <HAL_GetTick>
 8005592:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005596:	f7fc f95f 	bl	8001858 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e189      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055a8:	4b8a      	ldr	r3, [pc, #552]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f0      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	019a      	lsls	r2, r3, #6
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	071b      	lsls	r3, r3, #28
 80055cc:	4981      	ldr	r1, [pc, #516]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01f      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055e0:	4b7c      	ldr	r3, [pc, #496]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e6:	0f1b      	lsrs	r3, r3, #28
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	019a      	lsls	r2, r3, #6
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	431a      	orrs	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	071b      	lsls	r3, r3, #28
 8005600:	4974      	ldr	r1, [pc, #464]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005608:	4b72      	ldr	r3, [pc, #456]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800560a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800560e:	f023 021f 	bic.w	r2, r3, #31
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	3b01      	subs	r3, #1
 8005618:	496e      	ldr	r1, [pc, #440]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00d      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	019a      	lsls	r2, r3, #6
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	061b      	lsls	r3, r3, #24
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	071b      	lsls	r3, r3, #28
 8005640:	4964      	ldr	r1, [pc, #400]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005648:	4b61      	ldr	r3, [pc, #388]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800564e:	f7fc f903 	bl	8001858 <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005654:	e008      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005656:	f7fc f8ff 	bl	8001858 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e129      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005668:	4b5a      	ldr	r3, [pc, #360]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005688:	2b00      	cmp	r3, #0
 800568a:	d079      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800568c:	4b52      	ldr	r3, [pc, #328]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005692:	f7fc f8e1 	bl	8001858 <HAL_GetTick>
 8005696:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005698:	e008      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800569a:	f7fc f8dd 	bl	8001858 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e107      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056ac:	4b49      	ldr	r3, [pc, #292]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b8:	d0ef      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d020      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056c6:	4b43      	ldr	r3, [pc, #268]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056cc:	0f1b      	lsrs	r3, r3, #28
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	019a      	lsls	r2, r3, #6
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	061b      	lsls	r3, r3, #24
 80056e0:	431a      	orrs	r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	071b      	lsls	r3, r3, #28
 80056e6:	493b      	ldr	r1, [pc, #236]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056ee:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	4934      	ldr	r1, [pc, #208]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01e      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005714:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	0e1b      	lsrs	r3, r3, #24
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	019a      	lsls	r2, r3, #6
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	071b      	lsls	r3, r3, #28
 8005734:	4927      	ldr	r1, [pc, #156]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800573e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005742:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	4922      	ldr	r1, [pc, #136]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005752:	4b21      	ldr	r3, [pc, #132]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005758:	f7fc f87e 	bl	8001858 <HAL_GetTick>
 800575c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005760:	f7fc f87a 	bl	8001858 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e0a4      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005772:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800577a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800577e:	d1ef      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 808b 	beq.w	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	4a0f      	ldr	r2, [pc, #60]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579c:	6413      	str	r3, [r2, #64]	; 0x40
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a0b      	ldr	r2, [pc, #44]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80057b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057b6:	f7fc f84f 	bl	8001858 <HAL_GetTick>
 80057ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057bc:	e010      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057be:	f7fc f84b 	bl	8001858 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d909      	bls.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e075      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80057d0:	42470068 	.word	0x42470068
 80057d4:	40023800 	.word	0x40023800
 80057d8:	42470070 	.word	0x42470070
 80057dc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057e0:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0e8      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057ec:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d02f      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d028      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800580a:	4b2f      	ldr	r3, [pc, #188]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005812:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005814:	4b2d      	ldr	r3, [pc, #180]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800581a:	4b2c      	ldr	r3, [pc, #176]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005820:	4a29      	ldr	r2, [pc, #164]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005826:	4b28      	ldr	r3, [pc, #160]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b01      	cmp	r3, #1
 8005830:	d114      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005832:	f7fc f811 	bl	8001858 <HAL_GetTick>
 8005836:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005838:	e00a      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583a:	f7fc f80d 	bl	8001858 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	; 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e035      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005850:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0ee      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005868:	d10d      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800586a:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800587a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587e:	4912      	ldr	r1, [pc, #72]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005880:	4313      	orrs	r3, r2
 8005882:	608b      	str	r3, [r1, #8]
 8005884:	e005      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	4a0f      	ldr	r2, [pc, #60]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800588c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005890:	6093      	str	r3, [r2, #8]
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005894:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800589e:	490a      	ldr	r1, [pc, #40]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80058b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40007000 	.word	0x40007000
 80058c8:	40023800 	.word	0x40023800
 80058cc:	42470e40 	.word	0x42470e40
 80058d0:	424711e0 	.word	0x424711e0

080058d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e025      	b.n	8005934 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fb fe35 	bl	800156c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f001 fb45 	bl	8006fa4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	461a      	mov	r2, r3
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	f001 fb9a 	bl	800705e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e07b      	b.n	8005a46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d108      	bne.n	8005968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595e:	d009      	beq.n	8005974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	61da      	str	r2, [r3, #28]
 8005966:	e005      	b.n	8005974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fb fc74 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f8:	ea42 0103 	orr.w	r1, r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	f003 0104 	and.w	r1, r3, #4
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	f003 0210 	and.w	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e041      	b.n	8005ae4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fb fc49 	bl	800130c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	f000 fa95 	bl	8005fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d001      	beq.n	8005b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e04e      	b.n	8005ba2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a23      	ldr	r2, [pc, #140]	; (8005bb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d022      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2e:	d01d      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d018      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d013      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	; (8005bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00e      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d009      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d111      	bne.n	8005b90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d010      	beq.n	8005ba0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8e:	e007      	b.n	8005ba0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40000400 	.word	0x40000400
 8005bb8:	40000800 	.word	0x40000800
 8005bbc:	40000c00 	.word	0x40000c00
 8005bc0:	40010400 	.word	0x40010400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40001800 	.word	0x40001800

08005bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d122      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d11b      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0202 	mvn.w	r2, #2
 8005bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9b5 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f9a7 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f9b8 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d122      	bne.n	8005c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d11b      	bne.n	8005c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0204 	mvn.w	r2, #4
 8005c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f98b 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f97d 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f98e 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d122      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d11b      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0208 	mvn.w	r2, #8
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f961 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f953 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f964 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b10      	cmp	r3, #16
 8005cdc:	d122      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d11b      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0210 	mvn.w	r2, #16
 8005cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f937 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005d10:	e005      	b.n	8005d1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f929 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f93a 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d10e      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d107      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0201 	mvn.w	r2, #1
 8005d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fb f86e 	bl	8000e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d10e      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d68:	2b80      	cmp	r3, #128	; 0x80
 8005d6a:	d107      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fae0 	bl	800633c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d10e      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d107      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f8ff 	bl	8005fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d10e      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d107      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0220 	mvn.w	r2, #32
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 faaa 	bl	8006328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_TIM_ConfigClockSource+0x1c>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e0b4      	b.n	8005f62 <HAL_TIM_ConfigClockSource+0x186>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e30:	d03e      	beq.n	8005eb0 <HAL_TIM_ConfigClockSource+0xd4>
 8005e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e36:	f200 8087 	bhi.w	8005f48 <HAL_TIM_ConfigClockSource+0x16c>
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	f000 8086 	beq.w	8005f4e <HAL_TIM_ConfigClockSource+0x172>
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e46:	d87f      	bhi.n	8005f48 <HAL_TIM_ConfigClockSource+0x16c>
 8005e48:	2b70      	cmp	r3, #112	; 0x70
 8005e4a:	d01a      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0xa6>
 8005e4c:	2b70      	cmp	r3, #112	; 0x70
 8005e4e:	d87b      	bhi.n	8005f48 <HAL_TIM_ConfigClockSource+0x16c>
 8005e50:	2b60      	cmp	r3, #96	; 0x60
 8005e52:	d050      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x11a>
 8005e54:	2b60      	cmp	r3, #96	; 0x60
 8005e56:	d877      	bhi.n	8005f48 <HAL_TIM_ConfigClockSource+0x16c>
 8005e58:	2b50      	cmp	r3, #80	; 0x50
 8005e5a:	d03c      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0xfa>
 8005e5c:	2b50      	cmp	r3, #80	; 0x50
 8005e5e:	d873      	bhi.n	8005f48 <HAL_TIM_ConfigClockSource+0x16c>
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d058      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x13a>
 8005e64:	2b40      	cmp	r3, #64	; 0x40
 8005e66:	d86f      	bhi.n	8005f48 <HAL_TIM_ConfigClockSource+0x16c>
 8005e68:	2b30      	cmp	r3, #48	; 0x30
 8005e6a:	d064      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x15a>
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	d86b      	bhi.n	8005f48 <HAL_TIM_ConfigClockSource+0x16c>
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	d060      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x15a>
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d867      	bhi.n	8005f48 <HAL_TIM_ConfigClockSource+0x16c>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d05c      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x15a>
 8005e7c:	2b10      	cmp	r3, #16
 8005e7e:	d05a      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x15a>
 8005e80:	e062      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6899      	ldr	r1, [r3, #8]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f000 f9ad 	bl	80061f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ea4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	609a      	str	r2, [r3, #8]
      break;
 8005eae:	e04f      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	6899      	ldr	r1, [r3, #8]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f000 f996 	bl	80061f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ed2:	609a      	str	r2, [r3, #8]
      break;
 8005ed4:	e03c      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6859      	ldr	r1, [r3, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f000 f90a 	bl	80060fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2150      	movs	r1, #80	; 0x50
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f963 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005ef4:	e02c      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f000 f929 	bl	800615a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2160      	movs	r1, #96	; 0x60
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f953 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005f14:	e01c      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6859      	ldr	r1, [r3, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f000 f8ea 	bl	80060fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2140      	movs	r1, #64	; 0x40
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f943 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005f34:	e00c      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f000 f93a 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005f46:	e003      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f4c:	e000      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a40      	ldr	r2, [pc, #256]	; (80060d0 <TIM_Base_SetConfig+0x114>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d013      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fda:	d00f      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a3d      	ldr	r2, [pc, #244]	; (80060d4 <TIM_Base_SetConfig+0x118>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00b      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a3c      	ldr	r2, [pc, #240]	; (80060d8 <TIM_Base_SetConfig+0x11c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d007      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a3b      	ldr	r2, [pc, #236]	; (80060dc <TIM_Base_SetConfig+0x120>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a3a      	ldr	r2, [pc, #232]	; (80060e0 <TIM_Base_SetConfig+0x124>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d108      	bne.n	800600e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2f      	ldr	r2, [pc, #188]	; (80060d0 <TIM_Base_SetConfig+0x114>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d02b      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601c:	d027      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2c      	ldr	r2, [pc, #176]	; (80060d4 <TIM_Base_SetConfig+0x118>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d023      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2b      	ldr	r2, [pc, #172]	; (80060d8 <TIM_Base_SetConfig+0x11c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01f      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <TIM_Base_SetConfig+0x120>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01b      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a29      	ldr	r2, [pc, #164]	; (80060e0 <TIM_Base_SetConfig+0x124>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d017      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a28      	ldr	r2, [pc, #160]	; (80060e4 <TIM_Base_SetConfig+0x128>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a27      	ldr	r2, [pc, #156]	; (80060e8 <TIM_Base_SetConfig+0x12c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00f      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a26      	ldr	r2, [pc, #152]	; (80060ec <TIM_Base_SetConfig+0x130>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00b      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a25      	ldr	r2, [pc, #148]	; (80060f0 <TIM_Base_SetConfig+0x134>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d007      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a24      	ldr	r2, [pc, #144]	; (80060f4 <TIM_Base_SetConfig+0x138>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a23      	ldr	r2, [pc, #140]	; (80060f8 <TIM_Base_SetConfig+0x13c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d108      	bne.n	8006080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a0a      	ldr	r2, [pc, #40]	; (80060d0 <TIM_Base_SetConfig+0x114>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_Base_SetConfig+0xf8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a0c      	ldr	r2, [pc, #48]	; (80060e0 <TIM_Base_SetConfig+0x124>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d103      	bne.n	80060bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	615a      	str	r2, [r3, #20]
}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40010400 	.word	0x40010400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800
 80060f0:	40001800 	.word	0x40001800
 80060f4:	40001c00 	.word	0x40001c00
 80060f8:	40002000 	.word	0x40002000

080060fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f023 030a 	bic.w	r3, r3, #10
 8006138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615a:	b480      	push	{r7}
 800615c:	b087      	sub	sp, #28
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f023 0210 	bic.w	r2, r3, #16
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	031b      	lsls	r3, r3, #12
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f043 0307 	orr.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800620a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	431a      	orrs	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006244:	2302      	movs	r3, #2
 8006246:	e05a      	b.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a21      	ldr	r2, [pc, #132]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d022      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006294:	d01d      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1d      	ldr	r2, [pc, #116]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d018      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1b      	ldr	r2, [pc, #108]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1a      	ldr	r2, [pc, #104]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00e      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a18      	ldr	r2, [pc, #96]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d009      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a17      	ldr	r2, [pc, #92]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d004      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a15      	ldr	r2, [pc, #84]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d10c      	bne.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40010000 	.word	0x40010000
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40010400 	.word	0x40010400
 8006320:	40014000 	.word	0x40014000
 8006324:	40001800 	.word	0x40001800

08006328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e03f      	b.n	80063e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fa ffea 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2224      	movs	r2, #36	; 0x24
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fb91 	bl	8006abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695a      	ldr	r2, [r3, #20]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08a      	sub	sp, #40	; 0x28
 80063ee:	af02      	add	r7, sp, #8
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b20      	cmp	r3, #32
 8006408:	d17c      	bne.n	8006504 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <HAL_UART_Transmit+0x2c>
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e075      	b.n	8006506 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_UART_Transmit+0x3e>
 8006424:	2302      	movs	r3, #2
 8006426:	e06e      	b.n	8006506 <HAL_UART_Transmit+0x11c>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2221      	movs	r2, #33	; 0x21
 800643a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800643e:	f7fb fa0b 	bl	8001858 <HAL_GetTick>
 8006442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	88fa      	ldrh	r2, [r7, #6]
 8006448:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	88fa      	ldrh	r2, [r7, #6]
 800644e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006458:	d108      	bne.n	800646c <HAL_UART_Transmit+0x82>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	e003      	b.n	8006474 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800647c:	e02a      	b.n	80064d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2200      	movs	r2, #0
 8006486:	2180      	movs	r1, #128	; 0x80
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f97e 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e036      	b.n	8006506 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	3302      	adds	r3, #2
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e007      	b.n	80064c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	781a      	ldrb	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	3301      	adds	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1cf      	bne.n	800647e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2200      	movs	r2, #0
 80064e6:	2140      	movs	r1, #64	; 0x40
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 f94e 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e006      	b.n	8006506 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	e000      	b.n	8006506 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006504:	2302      	movs	r3, #2
  }
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	4613      	mov	r3, r2
 800651a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b20      	cmp	r3, #32
 8006526:	d11d      	bne.n	8006564 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_UART_Receive_DMA+0x26>
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e016      	b.n	8006566 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_UART_Receive_DMA+0x38>
 8006542:	2302      	movs	r3, #2
 8006544:	e00f      	b.n	8006566 <HAL_UART_Receive_DMA+0x58>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	461a      	mov	r2, r3
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f984 	bl	8006868 <UART_Start_Receive_DMA>
 8006560:	4603      	mov	r3, r0
 8006562:	e000      	b.n	8006566 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006564:	2302      	movs	r3, #2
  }
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b09c      	sub	sp, #112	; 0x70
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d172      	bne.n	800669c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80065b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b8:	2200      	movs	r2, #0
 80065ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80065d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80065de:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e5      	bne.n	80065bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3314      	adds	r3, #20
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	667b      	str	r3, [r7, #100]	; 0x64
 8006608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3314      	adds	r3, #20
 800660e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006610:	647a      	str	r2, [r7, #68]	; 0x44
 8006612:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e5      	bne.n	80065f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3314      	adds	r3, #20
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	623b      	str	r3, [r7, #32]
   return(result);
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663a:	663b      	str	r3, [r7, #96]	; 0x60
 800663c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3314      	adds	r3, #20
 8006642:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006644:	633a      	str	r2, [r7, #48]	; 0x30
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800664a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e5      	bne.n	8006624 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	2b01      	cmp	r3, #1
 8006666:	d119      	bne.n	800669c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	60fb      	str	r3, [r7, #12]
   return(result);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0310 	bic.w	r3, r3, #16
 800667e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006688:	61fa      	str	r2, [r7, #28]
 800668a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	69b9      	ldr	r1, [r7, #24]
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	617b      	str	r3, [r7, #20]
   return(result);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e5      	bne.n	8006668 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800669c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d106      	bne.n	80066b2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066a8:	4619      	mov	r1, r3
 80066aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066ac:	f7ff ff69 	bl	8006582 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066b0:	e002      	b.n	80066b8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80066b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066b4:	f7fa fb3e 	bl	8000d34 <HAL_UART_RxCpltCallback>
}
 80066b8:	bf00      	nop
 80066ba:	3770      	adds	r7, #112	; 0x70
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d108      	bne.n	80066e8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	b29b      	uxth	r3, r3
 80066de:	4619      	mov	r1, r3
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff ff4e 	bl	8006582 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066e6:	e002      	b.n	80066ee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7fa fb13 	bl	8000d14 <HAL_UART_RxHalfCpltCallback>
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2300      	movne	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b21      	cmp	r3, #33	; 0x21
 8006728:	d108      	bne.n	800673c <UART_DMAError+0x46>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2200      	movs	r2, #0
 8006734:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006736:	68b8      	ldr	r0, [r7, #8]
 8006738:	f000 f934 	bl	80069a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b22      	cmp	r3, #34	; 0x22
 800675c:	d108      	bne.n	8006770 <UART_DMAError+0x7a>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800676a:	68b8      	ldr	r0, [r7, #8]
 800676c:	f000 f942 	bl	80069f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	f043 0210 	orr.w	r2, r3, #16
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800677c:	68b8      	ldr	r0, [r7, #8]
 800677e:	f7ff fef6 	bl	800656e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b090      	sub	sp, #64	; 0x40
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4613      	mov	r3, r2
 8006798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	e050      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d04c      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0x30>
 80067aa:	f7fb f855 	bl	8001858 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d241      	bcs.n	800683e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	330c      	adds	r3, #12
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	330c      	adds	r3, #12
 80067d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067da:	637a      	str	r2, [r7, #52]	; 0x34
 80067dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e5      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3314      	adds	r3, #20
 80067f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	613b      	str	r3, [r7, #16]
   return(result);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f023 0301 	bic.w	r3, r3, #1
 8006804:	63bb      	str	r3, [r7, #56]	; 0x38
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3314      	adds	r3, #20
 800680c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800680e:	623a      	str	r2, [r7, #32]
 8006810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	69f9      	ldr	r1, [r7, #28]
 8006814:	6a3a      	ldr	r2, [r7, #32]
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	61bb      	str	r3, [r7, #24]
   return(result);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e5      	bne.n	80067ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e00f      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4013      	ands	r3, r2
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	bf0c      	ite	eq
 800684e:	2301      	moveq	r3, #1
 8006850:	2300      	movne	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	429a      	cmp	r2, r3
 800685a:	d09f      	beq.n	800679c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3740      	adds	r7, #64	; 0x40
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b098      	sub	sp, #96	; 0x60
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	4613      	mov	r3, r2
 8006874:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2222      	movs	r2, #34	; 0x22
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	4a40      	ldr	r2, [pc, #256]	; (8006998 <UART_Start_Receive_DMA+0x130>)
 8006896:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	4a3f      	ldr	r2, [pc, #252]	; (800699c <UART_Start_Receive_DMA+0x134>)
 800689e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	4a3e      	ldr	r2, [pc, #248]	; (80069a0 <UART_Start_Receive_DMA+0x138>)
 80068a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	2200      	movs	r2, #0
 80068ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80068b0:	f107 0308 	add.w	r3, r7, #8
 80068b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	f7fb f9a2 	bl	8001c10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d019      	beq.n	8006926 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006908:	65bb      	str	r3, [r7, #88]	; 0x58
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006912:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006914:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e5      	bne.n	80068f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3314      	adds	r3, #20
 800692c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	657b      	str	r3, [r7, #84]	; 0x54
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006946:	63ba      	str	r2, [r7, #56]	; 0x38
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800694c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e5      	bne.n	8006926 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3314      	adds	r3, #20
 8006960:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	617b      	str	r3, [r7, #20]
   return(result);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006970:	653b      	str	r3, [r7, #80]	; 0x50
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3314      	adds	r3, #20
 8006978:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800697a:	627a      	str	r2, [r7, #36]	; 0x24
 800697c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6a39      	ldr	r1, [r7, #32]
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	61fb      	str	r3, [r7, #28]
   return(result);
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e5      	bne.n	800695a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3760      	adds	r7, #96	; 0x60
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	0800659b 	.word	0x0800659b
 800699c:	080066c1 	.word	0x080066c1
 80069a0:	080066f7 	.word	0x080066f7

080069a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b089      	sub	sp, #36	; 0x24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	61ba      	str	r2, [r7, #24]
 80069ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6979      	ldr	r1, [r7, #20]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	613b      	str	r3, [r7, #16]
   return(result);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80069e8:	bf00      	nop
 80069ea:	3724      	adds	r7, #36	; 0x24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b095      	sub	sp, #84	; 0x54
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a1c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e5      	bne.n	80069fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3314      	adds	r3, #20
 8006a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f023 0301 	bic.w	r3, r3, #1
 8006a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e5      	bne.n	8006a30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d119      	bne.n	8006aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f023 0310 	bic.w	r3, r3, #16
 8006a82:	647b      	str	r3, [r7, #68]	; 0x44
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a8c:	61ba      	str	r2, [r7, #24]
 8006a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6979      	ldr	r1, [r7, #20]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e5      	bne.n	8006a6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006aae:	bf00      	nop
 8006ab0:	3754      	adds	r7, #84	; 0x54
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ac0:	b0c0      	sub	sp, #256	; 0x100
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad8:	68d9      	ldr	r1, [r3, #12]
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	ea40 0301 	orr.w	r3, r0, r1
 8006ae4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b14:	f021 010c 	bic.w	r1, r1, #12
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b22:	430b      	orrs	r3, r1
 8006b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b36:	6999      	ldr	r1, [r3, #24]
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	ea40 0301 	orr.w	r3, r0, r1
 8006b42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b8f      	ldr	r3, [pc, #572]	; (8006d88 <UART_SetConfig+0x2cc>)
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d005      	beq.n	8006b5c <UART_SetConfig+0xa0>
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b8d      	ldr	r3, [pc, #564]	; (8006d8c <UART_SetConfig+0x2d0>)
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d104      	bne.n	8006b66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b5c:	f7fe fcb4 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 8006b60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b64:	e003      	b.n	8006b6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b66:	f7fe fc9b 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 8006b6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b78:	f040 810c 	bne.w	8006d94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b8e:	4622      	mov	r2, r4
 8006b90:	462b      	mov	r3, r5
 8006b92:	1891      	adds	r1, r2, r2
 8006b94:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b96:	415b      	adcs	r3, r3
 8006b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	eb12 0801 	adds.w	r8, r2, r1
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	eb43 0901 	adc.w	r9, r3, r1
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bbe:	4690      	mov	r8, r2
 8006bc0:	4699      	mov	r9, r3
 8006bc2:	4623      	mov	r3, r4
 8006bc4:	eb18 0303 	adds.w	r3, r8, r3
 8006bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bcc:	462b      	mov	r3, r5
 8006bce:	eb49 0303 	adc.w	r3, r9, r3
 8006bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006be2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bea:	460b      	mov	r3, r1
 8006bec:	18db      	adds	r3, r3, r3
 8006bee:	653b      	str	r3, [r7, #80]	; 0x50
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	eb42 0303 	adc.w	r3, r2, r3
 8006bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8006bf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c00:	f7f9 faf6 	bl	80001f0 <__aeabi_uldivmod>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4b61      	ldr	r3, [pc, #388]	; (8006d90 <UART_SetConfig+0x2d4>)
 8006c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	011c      	lsls	r4, r3, #4
 8006c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c24:	4642      	mov	r2, r8
 8006c26:	464b      	mov	r3, r9
 8006c28:	1891      	adds	r1, r2, r2
 8006c2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c2c:	415b      	adcs	r3, r3
 8006c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c34:	4641      	mov	r1, r8
 8006c36:	eb12 0a01 	adds.w	sl, r2, r1
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	eb43 0b01 	adc.w	fp, r3, r1
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c54:	4692      	mov	sl, r2
 8006c56:	469b      	mov	fp, r3
 8006c58:	4643      	mov	r3, r8
 8006c5a:	eb1a 0303 	adds.w	r3, sl, r3
 8006c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c62:	464b      	mov	r3, r9
 8006c64:	eb4b 0303 	adc.w	r3, fp, r3
 8006c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c80:	460b      	mov	r3, r1
 8006c82:	18db      	adds	r3, r3, r3
 8006c84:	643b      	str	r3, [r7, #64]	; 0x40
 8006c86:	4613      	mov	r3, r2
 8006c88:	eb42 0303 	adc.w	r3, r2, r3
 8006c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c96:	f7f9 faab 	bl	80001f0 <__aeabi_uldivmod>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4b3b      	ldr	r3, [pc, #236]	; (8006d90 <UART_SetConfig+0x2d4>)
 8006ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	2264      	movs	r2, #100	; 0x64
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	1acb      	subs	r3, r1, r3
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006cb6:	4b36      	ldr	r3, [pc, #216]	; (8006d90 <UART_SetConfig+0x2d4>)
 8006cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cc4:	441c      	add	r4, r3
 8006cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cd8:	4642      	mov	r2, r8
 8006cda:	464b      	mov	r3, r9
 8006cdc:	1891      	adds	r1, r2, r2
 8006cde:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ce0:	415b      	adcs	r3, r3
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ce8:	4641      	mov	r1, r8
 8006cea:	1851      	adds	r1, r2, r1
 8006cec:	6339      	str	r1, [r7, #48]	; 0x30
 8006cee:	4649      	mov	r1, r9
 8006cf0:	414b      	adcs	r3, r1
 8006cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d00:	4659      	mov	r1, fp
 8006d02:	00cb      	lsls	r3, r1, #3
 8006d04:	4651      	mov	r1, sl
 8006d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	00ca      	lsls	r2, r1, #3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4619      	mov	r1, r3
 8006d12:	4603      	mov	r3, r0
 8006d14:	4642      	mov	r2, r8
 8006d16:	189b      	adds	r3, r3, r2
 8006d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	460a      	mov	r2, r1
 8006d20:	eb42 0303 	adc.w	r3, r2, r3
 8006d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	18db      	adds	r3, r3, r3
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d42:	4613      	mov	r3, r2
 8006d44:	eb42 0303 	adc.w	r3, r2, r3
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d52:	f7f9 fa4d 	bl	80001f0 <__aeabi_uldivmod>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <UART_SetConfig+0x2d4>)
 8006d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	2164      	movs	r1, #100	; 0x64
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	3332      	adds	r3, #50	; 0x32
 8006d6e:	4a08      	ldr	r2, [pc, #32]	; (8006d90 <UART_SetConfig+0x2d4>)
 8006d70:	fba2 2303 	umull	r2, r3, r2, r3
 8006d74:	095b      	lsrs	r3, r3, #5
 8006d76:	f003 0207 	and.w	r2, r3, #7
 8006d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4422      	add	r2, r4
 8006d82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d84:	e105      	b.n	8006f92 <UART_SetConfig+0x4d6>
 8006d86:	bf00      	nop
 8006d88:	40011000 	.word	0x40011000
 8006d8c:	40011400 	.word	0x40011400
 8006d90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006da2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006da6:	4642      	mov	r2, r8
 8006da8:	464b      	mov	r3, r9
 8006daa:	1891      	adds	r1, r2, r2
 8006dac:	6239      	str	r1, [r7, #32]
 8006dae:	415b      	adcs	r3, r3
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
 8006db2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006db6:	4641      	mov	r1, r8
 8006db8:	1854      	adds	r4, r2, r1
 8006dba:	4649      	mov	r1, r9
 8006dbc:	eb43 0501 	adc.w	r5, r3, r1
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	f04f 0300 	mov.w	r3, #0
 8006dc8:	00eb      	lsls	r3, r5, #3
 8006dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dce:	00e2      	lsls	r2, r4, #3
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	461d      	mov	r5, r3
 8006dd4:	4643      	mov	r3, r8
 8006dd6:	18e3      	adds	r3, r4, r3
 8006dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ddc:	464b      	mov	r3, r9
 8006dde:	eb45 0303 	adc.w	r3, r5, r3
 8006de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006df2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e02:	4629      	mov	r1, r5
 8006e04:	008b      	lsls	r3, r1, #2
 8006e06:	4621      	mov	r1, r4
 8006e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	008a      	lsls	r2, r1, #2
 8006e10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e14:	f7f9 f9ec 	bl	80001f0 <__aeabi_uldivmod>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4b60      	ldr	r3, [pc, #384]	; (8006fa0 <UART_SetConfig+0x4e4>)
 8006e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	011c      	lsls	r4, r3, #4
 8006e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e38:	4642      	mov	r2, r8
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	1891      	adds	r1, r2, r2
 8006e3e:	61b9      	str	r1, [r7, #24]
 8006e40:	415b      	adcs	r3, r3
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e48:	4641      	mov	r1, r8
 8006e4a:	1851      	adds	r1, r2, r1
 8006e4c:	6139      	str	r1, [r7, #16]
 8006e4e:	4649      	mov	r1, r9
 8006e50:	414b      	adcs	r3, r1
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e60:	4659      	mov	r1, fp
 8006e62:	00cb      	lsls	r3, r1, #3
 8006e64:	4651      	mov	r1, sl
 8006e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e6a:	4651      	mov	r1, sl
 8006e6c:	00ca      	lsls	r2, r1, #3
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4619      	mov	r1, r3
 8006e72:	4603      	mov	r3, r0
 8006e74:	4642      	mov	r2, r8
 8006e76:	189b      	adds	r3, r3, r2
 8006e78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	460a      	mov	r2, r1
 8006e80:	eb42 0303 	adc.w	r3, r2, r3
 8006e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	008b      	lsls	r3, r1, #2
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eaa:	4641      	mov	r1, r8
 8006eac:	008a      	lsls	r2, r1, #2
 8006eae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006eb2:	f7f9 f99d 	bl	80001f0 <__aeabi_uldivmod>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4b39      	ldr	r3, [pc, #228]	; (8006fa0 <UART_SetConfig+0x4e4>)
 8006ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	2164      	movs	r1, #100	; 0x64
 8006ec4:	fb01 f303 	mul.w	r3, r1, r3
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	3332      	adds	r3, #50	; 0x32
 8006ece:	4a34      	ldr	r2, [pc, #208]	; (8006fa0 <UART_SetConfig+0x4e4>)
 8006ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eda:	441c      	add	r4, r3
 8006edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ee4:	677a      	str	r2, [r7, #116]	; 0x74
 8006ee6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006eea:	4642      	mov	r2, r8
 8006eec:	464b      	mov	r3, r9
 8006eee:	1891      	adds	r1, r2, r2
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	415b      	adcs	r3, r3
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006efa:	4641      	mov	r1, r8
 8006efc:	1851      	adds	r1, r2, r1
 8006efe:	6039      	str	r1, [r7, #0]
 8006f00:	4649      	mov	r1, r9
 8006f02:	414b      	adcs	r3, r1
 8006f04:	607b      	str	r3, [r7, #4]
 8006f06:	f04f 0200 	mov.w	r2, #0
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f12:	4659      	mov	r1, fp
 8006f14:	00cb      	lsls	r3, r1, #3
 8006f16:	4651      	mov	r1, sl
 8006f18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f1c:	4651      	mov	r1, sl
 8006f1e:	00ca      	lsls	r2, r1, #3
 8006f20:	4610      	mov	r0, r2
 8006f22:	4619      	mov	r1, r3
 8006f24:	4603      	mov	r3, r0
 8006f26:	4642      	mov	r2, r8
 8006f28:	189b      	adds	r3, r3, r2
 8006f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f2c:	464b      	mov	r3, r9
 8006f2e:	460a      	mov	r2, r1
 8006f30:	eb42 0303 	adc.w	r3, r2, r3
 8006f34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	663b      	str	r3, [r7, #96]	; 0x60
 8006f40:	667a      	str	r2, [r7, #100]	; 0x64
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f4e:	4649      	mov	r1, r9
 8006f50:	008b      	lsls	r3, r1, #2
 8006f52:	4641      	mov	r1, r8
 8006f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f58:	4641      	mov	r1, r8
 8006f5a:	008a      	lsls	r2, r1, #2
 8006f5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f60:	f7f9 f946 	bl	80001f0 <__aeabi_uldivmod>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4b0d      	ldr	r3, [pc, #52]	; (8006fa0 <UART_SetConfig+0x4e4>)
 8006f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	2164      	movs	r1, #100	; 0x64
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	3332      	adds	r3, #50	; 0x32
 8006f7c:	4a08      	ldr	r2, [pc, #32]	; (8006fa0 <UART_SetConfig+0x4e4>)
 8006f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	f003 020f 	and.w	r2, r3, #15
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4422      	add	r2, r4
 8006f90:	609a      	str	r2, [r3, #8]
}
 8006f92:	bf00      	nop
 8006f94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f9e:	bf00      	nop
 8006fa0:	51eb851f 	.word	0x51eb851f

08006fa4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d123      	bne.n	8006ffe <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006fbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	6851      	ldr	r1, [r2, #4]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	6892      	ldr	r2, [r2, #8]
 8006fca:	4311      	orrs	r1, r2
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	68d2      	ldr	r2, [r2, #12]
 8006fd0:	4311      	orrs	r1, r2
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	6912      	ldr	r2, [r2, #16]
 8006fd6:	4311      	orrs	r1, r2
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	6952      	ldr	r2, [r2, #20]
 8006fdc:	4311      	orrs	r1, r2
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	6992      	ldr	r2, [r2, #24]
 8006fe2:	4311      	orrs	r1, r2
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	69d2      	ldr	r2, [r2, #28]
 8006fe8:	4311      	orrs	r1, r2
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	6a12      	ldr	r2, [r2, #32]
 8006fee:	4311      	orrs	r1, r2
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e028      	b.n	8007050 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	69d9      	ldr	r1, [r3, #28]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	4319      	orrs	r1, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	430b      	orrs	r3, r1
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007024:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	6851      	ldr	r1, [r2, #4]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	6892      	ldr	r2, [r2, #8]
 8007030:	4311      	orrs	r1, r2
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	68d2      	ldr	r2, [r2, #12]
 8007036:	4311      	orrs	r1, r2
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	6912      	ldr	r2, [r2, #16]
 800703c:	4311      	orrs	r1, r2
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	6952      	ldr	r2, [r2, #20]
 8007042:	4311      	orrs	r1, r2
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	6992      	ldr	r2, [r2, #24]
 8007048:	430a      	orrs	r2, r1
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d128      	bne.n	80070c2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	1e59      	subs	r1, r3, #1
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	3b01      	subs	r3, #1
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	4319      	orrs	r1, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	3b01      	subs	r3, #1
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	4319      	orrs	r1, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	3b01      	subs	r3, #1
 8007098:	031b      	lsls	r3, r3, #12
 800709a:	4319      	orrs	r1, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	041b      	lsls	r3, r3, #16
 80070a4:	4319      	orrs	r1, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	051b      	lsls	r3, r3, #20
 80070ae:	4319      	orrs	r1, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	061b      	lsls	r3, r3, #24
 80070b8:	430b      	orrs	r3, r1
 80070ba:	431a      	orrs	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	609a      	str	r2, [r3, #8]
 80070c0:	e02f      	b.n	8007122 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	68d2      	ldr	r2, [r2, #12]
 80070d2:	3a01      	subs	r2, #1
 80070d4:	0311      	lsls	r1, r2, #12
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	6952      	ldr	r2, [r2, #20]
 80070da:	3a01      	subs	r2, #1
 80070dc:	0512      	lsls	r2, r2, #20
 80070de:	430a      	orrs	r2, r1
 80070e0:	431a      	orrs	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	1e59      	subs	r1, r3, #1
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	4319      	orrs	r1, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	3b01      	subs	r3, #1
 8007104:	021b      	lsls	r3, r3, #8
 8007106:	4319      	orrs	r1, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	3b01      	subs	r3, #1
 800710e:	041b      	lsls	r3, r3, #16
 8007110:	4319      	orrs	r1, r3
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	3b01      	subs	r3, #1
 8007118:	061b      	lsls	r3, r3, #24
 800711a:	430b      	orrs	r3, r1
 800711c:	431a      	orrs	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007130:	b084      	sub	sp, #16
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	f107 001c 	add.w	r0, r7, #28
 800713e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	2b01      	cmp	r3, #1
 8007146:	d122      	bne.n	800718e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800715c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d105      	bne.n	8007182 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f9c0 	bl	8007508 <USB_CoreReset>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
 800718c:	e01a      	b.n	80071c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9b4 	bl	8007508 <USB_CoreReset>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	639a      	str	r2, [r3, #56]	; 0x38
 80071b6:	e005      	b.n	80071c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d10b      	bne.n	80071e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f043 0206 	orr.w	r2, r3, #6
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f043 0220 	orr.w	r2, r3, #32
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071ee:	b004      	add	sp, #16
 80071f0:	4770      	bx	lr

080071f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f043 0201 	orr.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f023 0201 	bic.w	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	460b      	mov	r3, r1
 8007240:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d115      	bne.n	8007284 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007264:	2001      	movs	r0, #1
 8007266:	f7fa fb03 	bl	8001870 <HAL_Delay>
      ms++;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f93a 	bl	80074ea <USB_GetMode>
 8007276:	4603      	mov	r3, r0
 8007278:	2b01      	cmp	r3, #1
 800727a:	d01e      	beq.n	80072ba <USB_SetCurrentMode+0x84>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b31      	cmp	r3, #49	; 0x31
 8007280:	d9f0      	bls.n	8007264 <USB_SetCurrentMode+0x2e>
 8007282:	e01a      	b.n	80072ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d115      	bne.n	80072b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007296:	2001      	movs	r0, #1
 8007298:	f7fa faea 	bl	8001870 <HAL_Delay>
      ms++;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3301      	adds	r3, #1
 80072a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f921 	bl	80074ea <USB_GetMode>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <USB_SetCurrentMode+0x84>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b31      	cmp	r3, #49	; 0x31
 80072b2:	d9f0      	bls.n	8007296 <USB_SetCurrentMode+0x60>
 80072b4:	e001      	b.n	80072ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e005      	b.n	80072c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b32      	cmp	r3, #50	; 0x32
 80072be:	d101      	bne.n	80072c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e000      	b.n	80072c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4a13      	ldr	r2, [pc, #76]	; (8007334 <USB_FlushTxFifo+0x64>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d901      	bls.n	80072f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e01b      	b.n	8007328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	daf2      	bge.n	80072de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	019b      	lsls	r3, r3, #6
 8007300:	f043 0220 	orr.w	r2, r3, #32
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a08      	ldr	r2, [pc, #32]	; (8007334 <USB_FlushTxFifo+0x64>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d901      	bls.n	800731a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e006      	b.n	8007328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b20      	cmp	r3, #32
 8007324:	d0f0      	beq.n	8007308 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	00030d40 	.word	0x00030d40

08007338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4a11      	ldr	r2, [pc, #68]	; (8007394 <USB_FlushRxFifo+0x5c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d901      	bls.n	8007356 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e018      	b.n	8007388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	daf2      	bge.n	8007344 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2210      	movs	r2, #16
 8007366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a08      	ldr	r2, [pc, #32]	; (8007394 <USB_FlushRxFifo+0x5c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d901      	bls.n	800737a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e006      	b.n	8007388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	2b10      	cmp	r3, #16
 8007384:	d0f0      	beq.n	8007368 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	00030d40 	.word	0x00030d40

08007398 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007398:	b480      	push	{r7}
 800739a:	b089      	sub	sp, #36	; 0x24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	4611      	mov	r1, r2
 80073a4:	461a      	mov	r2, r3
 80073a6:	460b      	mov	r3, r1
 80073a8:	71fb      	strb	r3, [r7, #7]
 80073aa:	4613      	mov	r3, r2
 80073ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d123      	bne.n	8007406 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073be:	88bb      	ldrh	r3, [r7, #4]
 80073c0:	3303      	adds	r3, #3
 80073c2:	089b      	lsrs	r3, r3, #2
 80073c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073c6:	2300      	movs	r3, #0
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	e018      	b.n	80073fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	031a      	lsls	r2, r3, #12
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d8:	461a      	mov	r2, r3
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	3301      	adds	r3, #1
 80073e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	3301      	adds	r3, #1
 80073ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	3301      	adds	r3, #1
 80073f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	3301      	adds	r3, #1
 80073f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	429a      	cmp	r2, r3
 8007404:	d3e2      	bcc.n	80073cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3724      	adds	r7, #36	; 0x24
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007414:	b480      	push	{r7}
 8007416:	b08b      	sub	sp, #44	; 0x2c
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800742a:	88fb      	ldrh	r3, [r7, #6]
 800742c:	089b      	lsrs	r3, r3, #2
 800742e:	b29b      	uxth	r3, r3
 8007430:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800743a:	2300      	movs	r3, #0
 800743c:	623b      	str	r3, [r7, #32]
 800743e:	e014      	b.n	800746a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	601a      	str	r2, [r3, #0]
    pDest++;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	3301      	adds	r3, #1
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	3301      	adds	r3, #1
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	3301      	adds	r3, #1
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	3301      	adds	r3, #1
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	3301      	adds	r3, #1
 8007468:	623b      	str	r3, [r7, #32]
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	429a      	cmp	r2, r3
 8007470:	d3e6      	bcc.n	8007440 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007472:	8bfb      	ldrh	r3, [r7, #30]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01e      	beq.n	80074b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007482:	461a      	mov	r2, r3
 8007484:	f107 0310 	add.w	r3, r7, #16
 8007488:	6812      	ldr	r2, [r2, #0]
 800748a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
 8007498:	b2da      	uxtb	r2, r3
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	701a      	strb	r2, [r3, #0]
      i++;
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	3301      	adds	r3, #1
 80074a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	3301      	adds	r3, #1
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80074aa:	8bfb      	ldrh	r3, [r7, #30]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074b0:	8bfb      	ldrh	r3, [r7, #30]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1ea      	bne.n	800748c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	372c      	adds	r7, #44	; 0x2c
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4013      	ands	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074dc:	68fb      	ldr	r3, [r7, #12]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	f003 0301 	and.w	r3, r3, #1
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
	...

08007508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4a13      	ldr	r2, [pc, #76]	; (800756c <USB_CoreReset+0x64>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d901      	bls.n	8007526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e01b      	b.n	800755e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	daf2      	bge.n	8007514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f043 0201 	orr.w	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4a09      	ldr	r2, [pc, #36]	; (800756c <USB_CoreReset+0x64>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d901      	bls.n	8007550 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e006      	b.n	800755e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b01      	cmp	r3, #1
 800755a:	d0f0      	beq.n	800753e <USB_CoreReset+0x36>

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	00030d40 	.word	0x00030d40

08007570 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007570:	b084      	sub	sp, #16
 8007572:	b580      	push	{r7, lr}
 8007574:	b086      	sub	sp, #24
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800757e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007590:	461a      	mov	r2, r3
 8007592:	2300      	movs	r3, #0
 8007594:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d018      	beq.n	80075f8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d10a      	bne.n	80075e2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075da:	f043 0304 	orr.w	r3, r3, #4
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	e014      	b.n	800760c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075f0:	f023 0304 	bic.w	r3, r3, #4
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	e009      	b.n	800760c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007606:	f023 0304 	bic.w	r3, r3, #4
 800760a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800760c:	2110      	movs	r1, #16
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fe5e 	bl	80072d0 <USB_FlushTxFifo>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff fe8a 	bl	8007338 <USB_FlushRxFifo>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800762e:	2300      	movs	r3, #0
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	e015      	b.n	8007660 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007640:	461a      	mov	r2, r3
 8007642:	f04f 33ff 	mov.w	r3, #4294967295
 8007646:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4413      	add	r3, r2
 8007650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007654:	461a      	mov	r2, r3
 8007656:	2300      	movs	r3, #0
 8007658:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	3301      	adds	r3, #1
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	429a      	cmp	r2, r3
 8007666:	d3e5      	bcc.n	8007634 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f04f 32ff 	mov.w	r2, #4294967295
 8007674:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007688:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a13      	ldr	r2, [pc, #76]	; (80076dc <USB_HostInit+0x16c>)
 800768e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <USB_HostInit+0x170>)
 8007694:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007698:	e009      	b.n	80076ae <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2280      	movs	r2, #128	; 0x80
 800769e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a10      	ldr	r2, [pc, #64]	; (80076e4 <USB_HostInit+0x174>)
 80076a4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a0f      	ldr	r2, [pc, #60]	; (80076e8 <USB_HostInit+0x178>)
 80076aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d105      	bne.n	80076c0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	f043 0210 	orr.w	r2, r3, #16
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	4b09      	ldr	r3, [pc, #36]	; (80076ec <USB_HostInit+0x17c>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076d8:	b004      	add	sp, #16
 80076da:	4770      	bx	lr
 80076dc:	01000200 	.word	0x01000200
 80076e0:	00e00300 	.word	0x00e00300
 80076e4:	00600080 	.word	0x00600080
 80076e8:	004000e0 	.word	0x004000e0
 80076ec:	a3200008 	.word	0xa3200008

080076f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800770e:	f023 0303 	bic.w	r3, r3, #3
 8007712:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007728:	4313      	orrs	r3, r2
 800772a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d107      	bne.n	8007742 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007738:	461a      	mov	r2, r3
 800773a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800773e:	6053      	str	r3, [r2, #4]
 8007740:	e009      	b.n	8007756 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d106      	bne.n	8007756 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800774e:	461a      	mov	r2, r3
 8007750:	f241 7370 	movw	r3, #6000	; 0x1770
 8007754:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007784:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800778e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007792:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007794:	2064      	movs	r0, #100	; 0x64
 8007796:	f7fa f86b 	bl	8001870 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80077a8:	200a      	movs	r0, #10
 80077aa:	f7fa f861 	bl	8001870 <HAL_Delay>

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <USB_DriveVbus+0x44>
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d106      	bne.n	80077fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007806:	d109      	bne.n	800781c <USB_DriveVbus+0x64>
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800781a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800782a:	b480      	push	{r7}
 800782c:	b085      	sub	sp, #20
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	0c5b      	lsrs	r3, r3, #17
 8007848:	f003 0303 	and.w	r3, r3, #3
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	b29b      	uxth	r3, r3
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
	...

0800787c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	461a      	mov	r2, r3
 800788a:	4603      	mov	r3, r0
 800788c:	70fb      	strb	r3, [r7, #3]
 800788e:	460b      	mov	r3, r1
 8007890:	70bb      	strb	r3, [r7, #2]
 8007892:	4613      	mov	r3, r2
 8007894:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078aa:	461a      	mov	r2, r3
 80078ac:	f04f 33ff 	mov.w	r3, #4294967295
 80078b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80078b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d87e      	bhi.n	80079b8 <USB_HC_Init+0x13c>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <USB_HC_Init+0x44>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	0800797b 	.word	0x0800797b
 80078c8:	080078d1 	.word	0x080078d1
 80078cc:	0800793d 	.word	0x0800793d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078dc:	461a      	mov	r2, r3
 80078de:	f240 439d 	movw	r3, #1181	; 0x49d
 80078e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80078e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da10      	bge.n	800790e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	440a      	add	r2, r1
 8007902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800790a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800790c:	e057      	b.n	80079be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007916:	2b00      	cmp	r3, #0
 8007918:	d051      	beq.n	80079be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	4413      	add	r3, r2
 8007922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	78fa      	ldrb	r2, [r7, #3]
 800792a:	0151      	lsls	r1, r2, #5
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	440a      	add	r2, r1
 8007930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007934:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007938:	60d3      	str	r3, [r2, #12]
      break;
 800793a:	e040      	b.n	80079be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007948:	461a      	mov	r2, r3
 800794a:	f240 639d 	movw	r3, #1693	; 0x69d
 800794e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007950:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007954:	2b00      	cmp	r3, #0
 8007956:	da34      	bge.n	80079c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	0151      	lsls	r1, r2, #5
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	440a      	add	r2, r1
 800796e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007976:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007978:	e023      	b.n	80079c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800797a:	78fb      	ldrb	r3, [r7, #3]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	4413      	add	r3, r2
 8007982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007986:	461a      	mov	r2, r3
 8007988:	f240 2325 	movw	r3, #549	; 0x225
 800798c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800798e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007992:	2b00      	cmp	r3, #0
 8007994:	da17      	bge.n	80079c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80079b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80079b6:	e006      	b.n	80079c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	77fb      	strb	r3, [r7, #31]
      break;
 80079bc:	e004      	b.n	80079c8 <USB_HC_Init+0x14c>
      break;
 80079be:	bf00      	nop
 80079c0:	e002      	b.n	80079c8 <USB_HC_Init+0x14c>
      break;
 80079c2:	bf00      	nop
 80079c4:	e000      	b.n	80079c8 <USB_HC_Init+0x14c>
      break;
 80079c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	78fa      	ldrb	r2, [r7, #3]
 80079d8:	0151      	lsls	r1, r2, #5
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	440a      	add	r2, r1
 80079de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079e2:	f043 0302 	orr.w	r3, r3, #2
 80079e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	2101      	movs	r1, #1
 80079f8:	fa01 f303 	lsl.w	r3, r1, r3
 80079fc:	6939      	ldr	r1, [r7, #16]
 80079fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a02:	4313      	orrs	r3, r2
 8007a04:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da03      	bge.n	8007a22 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1e:	61bb      	str	r3, [r7, #24]
 8007a20:	e001      	b.n	8007a26 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff feff 	bl	800782a <USB_GetHostSpeed>
 8007a2c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007a2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d106      	bne.n	8007a44 <USB_HC_Init+0x1c8>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d003      	beq.n	8007a44 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	e001      	b.n	8007a48 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a48:	787b      	ldrb	r3, [r7, #1]
 8007a4a:	059b      	lsls	r3, r3, #22
 8007a4c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a50:	78bb      	ldrb	r3, [r7, #2]
 8007a52:	02db      	lsls	r3, r3, #11
 8007a54:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a58:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a5e:	049b      	lsls	r3, r3, #18
 8007a60:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a64:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a6c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	0159      	lsls	r1, r3, #5
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	440b      	add	r3, r1
 8007a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a84:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d003      	beq.n	8007a96 <USB_HC_Init+0x21a>
 8007a8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d10f      	bne.n	8007ab6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007a96:	78fb      	ldrb	r3, [r7, #3]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	0151      	lsls	r1, r2, #5
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	440a      	add	r2, r1
 8007aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ab0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ab4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3720      	adds	r7, #32
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08c      	sub	sp, #48	; 0x30
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	4613      	mov	r3, r2
 8007acc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007adc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d02d      	beq.n	8007b46 <USB_HC_StartXfer+0x86>
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	791b      	ldrb	r3, [r3, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d129      	bne.n	8007b46 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d117      	bne.n	8007b28 <USB_HC_StartXfer+0x68>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	79db      	ldrb	r3, [r3, #7]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <USB_HC_StartXfer+0x48>
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	79db      	ldrb	r3, [r3, #7]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d10f      	bne.n	8007b28 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	69fa      	ldr	r2, [r7, #28]
 8007b18:	0151      	lsls	r1, r2, #5
 8007b1a:	6a3a      	ldr	r2, [r7, #32]
 8007b1c:	440a      	add	r2, r1
 8007b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b26:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10b      	bne.n	8007b46 <USB_HC_StartXfer+0x86>
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	795b      	ldrb	r3, [r3, #5]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d107      	bne.n	8007b46 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 fa0f 	bl	8007f60 <USB_DoPing>
      return HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e0f8      	b.n	8007d38 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d018      	beq.n	8007b80 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	8912      	ldrh	r2, [r2, #8]
 8007b56:	4413      	add	r3, r2
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	8912      	ldrh	r2, [r2, #8]
 8007b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b62:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b66:	8b7b      	ldrh	r3, [r7, #26]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d90b      	bls.n	8007b84 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b6c:	8b7b      	ldrh	r3, [r7, #26]
 8007b6e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	8912      	ldrh	r2, [r2, #8]
 8007b76:	fb03 f202 	mul.w	r2, r3, r2
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	611a      	str	r2, [r3, #16]
 8007b7e:	e001      	b.n	8007b84 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b80:	2301      	movs	r3, #1
 8007b82:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	78db      	ldrb	r3, [r3, #3]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	8912      	ldrh	r2, [r2, #8]
 8007b92:	fb03 f202 	mul.w	r2, r3, r2
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	611a      	str	r2, [r3, #16]
 8007b9a:	e003      	b.n	8007ba4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	695a      	ldr	r2, [r3, #20]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007bae:	04d9      	lsls	r1, r3, #19
 8007bb0:	4b63      	ldr	r3, [pc, #396]	; (8007d40 <USB_HC_StartXfer+0x280>)
 8007bb2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bb4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	7a9b      	ldrb	r3, [r3, #10]
 8007bba:	075b      	lsls	r3, r3, #29
 8007bbc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bc0:	69f9      	ldr	r1, [r7, #28]
 8007bc2:	0148      	lsls	r0, r1, #5
 8007bc4:	6a39      	ldr	r1, [r7, #32]
 8007bc6:	4401      	add	r1, r0
 8007bc8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bcc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d009      	beq.n	8007bea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	68d9      	ldr	r1, [r3, #12]
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be6:	460a      	mov	r2, r1
 8007be8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bf0c      	ite	eq
 8007bfa:	2301      	moveq	r3, #1
 8007bfc:	2300      	movne	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	6a3a      	ldr	r2, [r7, #32]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c20:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	7e7b      	ldrb	r3, [r7, #25]
 8007c32:	075b      	lsls	r3, r3, #29
 8007c34:	69f9      	ldr	r1, [r7, #28]
 8007c36:	0148      	lsls	r0, r1, #5
 8007c38:	6a39      	ldr	r1, [r7, #32]
 8007c3a:	4401      	add	r1, r0
 8007c3c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007c40:	4313      	orrs	r3, r2
 8007c42:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c5a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	78db      	ldrb	r3, [r3, #3]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	e003      	b.n	8007c76 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c74:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c7c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e04e      	b.n	8007d38 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	78db      	ldrb	r3, [r3, #3]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d149      	bne.n	8007d36 <USB_HC_StartXfer+0x276>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d045      	beq.n	8007d36 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	79db      	ldrb	r3, [r3, #7]
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d830      	bhi.n	8007d14 <USB_HC_StartXfer+0x254>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <USB_HC_StartXfer+0x1f8>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007cc9 	.word	0x08007cc9
 8007cbc:	08007ced 	.word	0x08007ced
 8007cc0:	08007cc9 	.word	0x08007cc9
 8007cc4:	08007ced 	.word	0x08007ced
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	3303      	adds	r3, #3
 8007cce:	089b      	lsrs	r3, r3, #2
 8007cd0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cd2:	8afa      	ldrh	r2, [r7, #22]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d91c      	bls.n	8007d18 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f043 0220 	orr.w	r2, r3, #32
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cea:	e015      	b.n	8007d18 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	3303      	adds	r3, #3
 8007cf2:	089b      	lsrs	r3, r3, #2
 8007cf4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007cf6:	8afa      	ldrh	r2, [r7, #22]
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d90a      	bls.n	8007d1c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d12:	e003      	b.n	8007d1c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007d14:	bf00      	nop
 8007d16:	e002      	b.n	8007d1e <USB_HC_StartXfer+0x25e>
        break;
 8007d18:	bf00      	nop
 8007d1a:	e000      	b.n	8007d1e <USB_HC_StartXfer+0x25e>
        break;
 8007d1c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	68d9      	ldr	r1, [r3, #12]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	785a      	ldrb	r2, [r3, #1]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	9000      	str	r0, [sp, #0]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff fb31 	bl	8007398 <USB_WritePacket>
  }

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3728      	adds	r7, #40	; 0x28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	1ff80000 	.word	0x1ff80000

08007d44 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	b29b      	uxth	r3, r3
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b089      	sub	sp, #36	; 0x24
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	0c9b      	lsrs	r3, r3, #18
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	0fdb      	lsrs	r3, r3, #31
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d104      	bne.n	8007dc0 <USB_HC_Halt+0x5a>
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e0c8      	b.n	8007f52 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <USB_HC_Halt+0x66>
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d163      	bne.n	8007e94 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f040 80ab 	bne.w	8007f50 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d133      	bne.n	8007e6e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	0151      	lsls	r1, r2, #5
 8007e18:	69fa      	ldr	r2, [r7, #28]
 8007e1a:	440a      	add	r2, r1
 8007e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e24:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e44:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e52:	d81d      	bhi.n	8007e90 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e6a:	d0ec      	beq.n	8007e46 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e6c:	e070      	b.n	8007f50 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e8c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e8e:	e05f      	b.n	8007f50 <USB_HC_Halt+0x1ea>
            break;
 8007e90:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e92:	e05d      	b.n	8007f50 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	0151      	lsls	r1, r2, #5
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	440a      	add	r2, r1
 8007eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eb2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d133      	bne.n	8007f2c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	0151      	lsls	r1, r2, #5
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	440a      	add	r2, r1
 8007eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ee2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f02:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f10:	d81d      	bhi.n	8007f4e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f28:	d0ec      	beq.n	8007f04 <USB_HC_Halt+0x19e>
 8007f2a:	e011      	b.n	8007f50 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	0151      	lsls	r1, r2, #5
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	440a      	add	r2, r1
 8007f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	e000      	b.n	8007f50 <USB_HC_Halt+0x1ea>
          break;
 8007f4e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3724      	adds	r7, #36	; 0x24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
	...

08007f60 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f74:	2301      	movs	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	04da      	lsls	r2, r3, #19
 8007f7c:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <USB_DoPing+0x74>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	0151      	lsls	r1, r2, #5
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	440a      	add	r2, r1
 8007f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f90:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fa8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fb0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	1ff80000 	.word	0x1ff80000

08007fd8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff f911 	bl	8007214 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ff2:	2110      	movs	r1, #16
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff f96b 	bl	80072d0 <USB_FlushTxFifo>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff f997 	bl	8007338 <USB_FlushRxFifo>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008014:	2300      	movs	r3, #0
 8008016:	61bb      	str	r3, [r7, #24]
 8008018:	e01f      	b.n	800805a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008030:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008038:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008040:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	4413      	add	r3, r2
 800804a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804e:	461a      	mov	r2, r3
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	3301      	adds	r3, #1
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b0f      	cmp	r3, #15
 800805e:	d9dc      	bls.n	800801a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008060:	2300      	movs	r3, #0
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	e034      	b.n	80080d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800807c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008084:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800808c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	4413      	add	r3, r2
 8008096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800809a:	461a      	mov	r2, r3
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ac:	d80c      	bhi.n	80080c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080c4:	d0ec      	beq.n	80080a0 <USB_StopHost+0xc8>
 80080c6:	e000      	b.n	80080ca <USB_StopHost+0xf2>
        break;
 80080c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	3301      	adds	r3, #1
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	2b0f      	cmp	r3, #15
 80080d4:	d9c7      	bls.n	8008066 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080dc:	461a      	mov	r2, r3
 80080de:	f04f 33ff 	mov.w	r3, #4294967295
 80080e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff f880 	bl	80071f2 <USB_EnableGlobalInt>

  return ret;
 80080f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80080fc:	b590      	push	{r4, r7, lr}
 80080fe:	b089      	sub	sp, #36	; 0x24
 8008100:	af04      	add	r7, sp, #16
 8008102:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008104:	2301      	movs	r3, #1
 8008106:	2202      	movs	r2, #2
 8008108:	2102      	movs	r1, #2
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fcb8 	bl	8008a80 <USBH_FindInterface>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	2bff      	cmp	r3, #255	; 0xff
 8008118:	d002      	beq.n	8008120 <USBH_CDC_InterfaceInit+0x24>
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d901      	bls.n	8008124 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008120:	2302      	movs	r3, #2
 8008122:	e13d      	b.n	80083a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fc8d 	bl	8008a48 <USBH_SelectInterface>
 800812e:	4603      	mov	r3, r0
 8008130:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008138:	2302      	movs	r3, #2
 800813a:	e131      	b.n	80083a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008142:	2050      	movs	r0, #80	; 0x50
 8008144:	f004 fff8 	bl	800d138 <malloc>
 8008148:	4603      	mov	r3, r0
 800814a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800815c:	2302      	movs	r3, #2
 800815e:	e11f      	b.n	80083a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008160:	2250      	movs	r2, #80	; 0x50
 8008162:	2100      	movs	r1, #0
 8008164:	68b8      	ldr	r0, [r7, #8]
 8008166:	f005 f805 	bl	800d174 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	211a      	movs	r1, #26
 8008170:	fb01 f303 	mul.w	r3, r1, r3
 8008174:	4413      	add	r3, r2
 8008176:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	b25b      	sxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	da15      	bge.n	80081ae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	211a      	movs	r1, #26
 8008188:	fb01 f303 	mul.w	r3, r1, r3
 800818c:	4413      	add	r3, r2
 800818e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	211a      	movs	r1, #26
 800819e:	fb01 f303 	mul.w	r3, r1, r3
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80081a8:	881a      	ldrh	r2, [r3, #0]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f002 f988 	bl	800a4ca <USBH_AllocPipe>
 80081ba:	4603      	mov	r3, r0
 80081bc:	461a      	mov	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	7819      	ldrb	r1, [r3, #0]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	7858      	ldrb	r0, [r3, #1]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	8952      	ldrh	r2, [r2, #10]
 80081da:	9202      	str	r2, [sp, #8]
 80081dc:	2203      	movs	r2, #3
 80081de:	9201      	str	r2, [sp, #4]
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	4623      	mov	r3, r4
 80081e4:	4602      	mov	r2, r0
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f002 f940 	bl	800a46c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2200      	movs	r2, #0
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f004 fef1 	bl	800cfdc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80081fa:	2300      	movs	r3, #0
 80081fc:	2200      	movs	r2, #0
 80081fe:	210a      	movs	r1, #10
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc3d 	bl	8008a80 <USBH_FindInterface>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	2bff      	cmp	r3, #255	; 0xff
 800820e:	d002      	beq.n	8008216 <USBH_CDC_InterfaceInit+0x11a>
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d901      	bls.n	800821a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008216:	2302      	movs	r3, #2
 8008218:	e0c2      	b.n	80083a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	211a      	movs	r1, #26
 8008220:	fb01 f303 	mul.w	r3, r1, r3
 8008224:	4413      	add	r3, r2
 8008226:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b25b      	sxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	da16      	bge.n	8008260 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	211a      	movs	r1, #26
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	4413      	add	r3, r2
 800823e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008242:	781a      	ldrb	r2, [r3, #0]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	211a      	movs	r1, #26
 800824e:	fb01 f303 	mul.w	r3, r1, r3
 8008252:	4413      	add	r3, r2
 8008254:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008258:	881a      	ldrh	r2, [r3, #0]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	835a      	strh	r2, [r3, #26]
 800825e:	e015      	b.n	800828c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	211a      	movs	r1, #26
 8008266:	fb01 f303 	mul.w	r3, r1, r3
 800826a:	4413      	add	r3, r2
 800826c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008270:	781a      	ldrb	r2, [r3, #0]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	211a      	movs	r1, #26
 800827c:	fb01 f303 	mul.w	r3, r1, r3
 8008280:	4413      	add	r3, r2
 8008282:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008286:	881a      	ldrh	r2, [r3, #0]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	211a      	movs	r1, #26
 8008292:	fb01 f303 	mul.w	r3, r1, r3
 8008296:	4413      	add	r3, r2
 8008298:	f203 3356 	addw	r3, r3, #854	; 0x356
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	b25b      	sxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	da16      	bge.n	80082d2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	211a      	movs	r1, #26
 80082aa:	fb01 f303 	mul.w	r3, r1, r3
 80082ae:	4413      	add	r3, r2
 80082b0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082b4:	781a      	ldrb	r2, [r3, #0]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	211a      	movs	r1, #26
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082ca:	881a      	ldrh	r2, [r3, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	835a      	strh	r2, [r3, #26]
 80082d0:	e015      	b.n	80082fe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	211a      	movs	r1, #26
 80082d8:	fb01 f303 	mul.w	r3, r1, r3
 80082dc:	4413      	add	r3, r2
 80082de:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	211a      	movs	r1, #26
 80082ee:	fb01 f303 	mul.w	r3, r1, r3
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082f8:	881a      	ldrh	r2, [r3, #0]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	7b9b      	ldrb	r3, [r3, #14]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f002 f8e0 	bl	800a4ca <USBH_AllocPipe>
 800830a:	4603      	mov	r3, r0
 800830c:	461a      	mov	r2, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	7bdb      	ldrb	r3, [r3, #15]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f002 f8d6 	bl	800a4ca <USBH_AllocPipe>
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	7b59      	ldrb	r1, [r3, #13]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	7b98      	ldrb	r0, [r3, #14]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	8b12      	ldrh	r2, [r2, #24]
 800833e:	9202      	str	r2, [sp, #8]
 8008340:	2202      	movs	r2, #2
 8008342:	9201      	str	r2, [sp, #4]
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	4623      	mov	r3, r4
 8008348:	4602      	mov	r2, r0
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f002 f88e 	bl	800a46c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	7b19      	ldrb	r1, [r3, #12]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	7bd8      	ldrb	r0, [r3, #15]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	8b52      	ldrh	r2, [r2, #26]
 8008368:	9202      	str	r2, [sp, #8]
 800836a:	2202      	movs	r2, #2
 800836c:	9201      	str	r2, [sp, #4]
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	4623      	mov	r3, r4
 8008372:	4602      	mov	r2, r0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f002 f879 	bl	800a46c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	7b5b      	ldrb	r3, [r3, #13]
 8008386:	2200      	movs	r2, #0
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f004 fe26 	bl	800cfdc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	7b1b      	ldrb	r3, [r3, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f004 fe1f 	bl	800cfdc <USBH_LL_SetToggle>

  return USBH_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd90      	pop	{r4, r7, pc}

080083a8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00e      	beq.n	80083e0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f002 f86e 	bl	800a4aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f002 f899 	bl	800a50c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	7b1b      	ldrb	r3, [r3, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00e      	beq.n	8008406 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	7b1b      	ldrb	r3, [r3, #12]
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f002 f85b 	bl	800a4aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	7b1b      	ldrb	r3, [r3, #12]
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f002 f886 	bl	800a50c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	7b5b      	ldrb	r3, [r3, #13]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00e      	beq.n	800842c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	7b5b      	ldrb	r3, [r3, #13]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f002 f848 	bl	800a4aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	7b5b      	ldrb	r3, [r3, #13]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f002 f873 	bl	800a50c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	4618      	mov	r0, r3
 8008442:	f004 fe81 	bl	800d148 <free>
    phost->pActiveClass->pData = 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800844c:	2200      	movs	r2, #0
 800844e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3340      	adds	r3, #64	; 0x40
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f8b1 	bl	80085da <GetLineCoding>
 8008478:	4603      	mov	r3, r0
 800847a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800847c:	7afb      	ldrb	r3, [r7, #11]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d105      	bne.n	800848e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008488:	2102      	movs	r1, #2
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800848e:	7afb      	ldrb	r3, [r7, #11]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d877      	bhi.n	80085ac <USBH_CDC_Process+0x114>
 80084bc:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <USBH_CDC_Process+0x2c>)
 80084be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c2:	bf00      	nop
 80084c4:	080084d9 	.word	0x080084d9
 80084c8:	080084df 	.word	0x080084df
 80084cc:	0800850f 	.word	0x0800850f
 80084d0:	08008583 	.word	0x08008583
 80084d4:	08008591 	.word	0x08008591
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
      break;
 80084dc:	e06d      	b.n	80085ba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f897 	bl	8008618 <SetLineCoding>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d104      	bne.n	80084fe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80084fc:	e058      	b.n	80085b0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d055      	beq.n	80085b0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2204      	movs	r2, #4
 8008508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800850c:	e050      	b.n	80085b0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	3340      	adds	r3, #64	; 0x40
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f860 	bl	80085da <GetLineCoding>
 800851a:	4603      	mov	r3, r0
 800851c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d126      	bne.n	8008572 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008536:	791b      	ldrb	r3, [r3, #4]
 8008538:	429a      	cmp	r2, r3
 800853a:	d13b      	bne.n	80085b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008546:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008548:	429a      	cmp	r2, r3
 800854a:	d133      	bne.n	80085b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008556:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008558:	429a      	cmp	r2, r3
 800855a:	d12b      	bne.n	80085b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008564:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008566:	429a      	cmp	r2, r3
 8008568:	d124      	bne.n	80085b4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f982 	bl	8008874 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008570:	e020      	b.n	80085b4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d01d      	beq.n	80085b4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2204      	movs	r2, #4
 800857c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008580:	e018      	b.n	80085b4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f867 	bl	8008656 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f8f6 	bl	800877a <CDC_ProcessReception>
      break;
 800858e:	e014      	b.n	80085ba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008590:	2100      	movs	r1, #0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f001 f95b 	bl	800984e <USBH_ClrFeature>
 8008598:	4603      	mov	r3, r0
 800859a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80085aa:	e005      	b.n	80085b8 <USBH_CDC_Process+0x120>

    default:
      break;
 80085ac:	bf00      	nop
 80085ae:	e004      	b.n	80085ba <USBH_CDC_Process+0x122>
      break;
 80085b0:	bf00      	nop
 80085b2:	e002      	b.n	80085ba <USBH_CDC_Process+0x122>
      break;
 80085b4:	bf00      	nop
 80085b6:	e000      	b.n	80085ba <USBH_CDC_Process+0x122>
      break;
 80085b8:	bf00      	nop

  }

  return status;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	22a1      	movs	r2, #161	; 0xa1
 80085e8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2221      	movs	r2, #33	; 0x21
 80085ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2207      	movs	r2, #7
 8008600:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2207      	movs	r2, #7
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 fbed 	bl	8009de8 <USBH_CtlReq>
 800860e:	4603      	mov	r3, r0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2221      	movs	r2, #33	; 0x21
 8008626:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2207      	movs	r2, #7
 800863e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2207      	movs	r2, #7
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 fbce 	bl	8009de8 <USBH_CtlReq>
 800864c:	4603      	mov	r3, r0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b086      	sub	sp, #24
 800865a:	af02      	add	r7, sp, #8
 800865c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008668:	2300      	movs	r3, #0
 800866a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008672:	2b01      	cmp	r3, #1
 8008674:	d002      	beq.n	800867c <CDC_ProcessTransmission+0x26>
 8008676:	2b02      	cmp	r3, #2
 8008678:	d023      	beq.n	80086c2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800867a:	e07a      	b.n	8008772 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	8b12      	ldrh	r2, [r2, #24]
 8008684:	4293      	cmp	r3, r2
 8008686:	d90b      	bls.n	80086a0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	69d9      	ldr	r1, [r3, #28]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8b1a      	ldrh	r2, [r3, #24]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	7b5b      	ldrb	r3, [r3, #13]
 8008694:	2001      	movs	r0, #1
 8008696:	9000      	str	r0, [sp, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fea4 	bl	800a3e6 <USBH_BulkSendData>
 800869e:	e00b      	b.n	80086b8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	7b5b      	ldrb	r3, [r3, #13]
 80086ae:	2001      	movs	r0, #1
 80086b0:	9000      	str	r0, [sp, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 fe97 	bl	800a3e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2202      	movs	r2, #2
 80086bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80086c0:	e057      	b.n	8008772 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	7b5b      	ldrb	r3, [r3, #13]
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f004 fc5d 	bl	800cf88 <USBH_LL_GetURBState>
 80086ce:	4603      	mov	r3, r0
 80086d0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80086d2:	7afb      	ldrb	r3, [r7, #11]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d136      	bne.n	8008746 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	8b12      	ldrh	r2, [r2, #24]
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d90e      	bls.n	8008702 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	8b12      	ldrh	r2, [r2, #24]
 80086ec:	1a9a      	subs	r2, r3, r2
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	8b12      	ldrh	r2, [r2, #24]
 80086fa:	441a      	add	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	61da      	str	r2, [r3, #28]
 8008700:	e002      	b.n	8008708 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8008718:	e006      	b.n	8008728 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f892 	bl	800884c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2204      	movs	r2, #4
 800872c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800873c:	2200      	movs	r2, #0
 800873e:	4619      	mov	r1, r3
 8008740:	f001 ffe0 	bl	800a704 <osMessagePut>
      break;
 8008744:	e014      	b.n	8008770 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8008746:	7afb      	ldrb	r3, [r7, #11]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d111      	bne.n	8008770 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2204      	movs	r2, #4
 8008758:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008768:	2200      	movs	r2, #0
 800876a:	4619      	mov	r1, r3
 800876c:	f001 ffca 	bl	800a704 <osMessagePut>
      break;
 8008770:	bf00      	nop
  }
}
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800878c:	2300      	movs	r3, #0
 800878e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008796:	2b03      	cmp	r3, #3
 8008798:	d002      	beq.n	80087a0 <CDC_ProcessReception+0x26>
 800879a:	2b04      	cmp	r3, #4
 800879c:	d00e      	beq.n	80087bc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800879e:	e051      	b.n	8008844 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	6a19      	ldr	r1, [r3, #32]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	8b5a      	ldrh	r2, [r3, #26]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	7b1b      	ldrb	r3, [r3, #12]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f001 fe3f 	bl	800a430 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2204      	movs	r2, #4
 80087b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80087ba:	e043      	b.n	8008844 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	7b1b      	ldrb	r3, [r3, #12]
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f004 fbe0 	bl	800cf88 <USBH_LL_GetURBState>
 80087c8:	4603      	mov	r3, r0
 80087ca:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80087cc:	7cfb      	ldrb	r3, [r7, #19]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d137      	bne.n	8008842 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	7b1b      	ldrb	r3, [r3, #12]
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f004 fb43 	bl	800ce64 <USBH_LL_GetLastXferSize>
 80087de:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d016      	beq.n	8008818 <CDC_ProcessReception+0x9e>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	8b5b      	ldrh	r3, [r3, #26]
 80087ee:	461a      	mov	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d910      	bls.n	8008818 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	1ad2      	subs	r2, r2, r3
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	6a1a      	ldr	r2, [r3, #32]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	441a      	add	r2, r3
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2203      	movs	r2, #3
 8008812:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8008816:	e006      	b.n	8008826 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f81d 	bl	8008860 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2204      	movs	r2, #4
 800882a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800883a:	2200      	movs	r2, #0
 800883c:	4619      	mov	r1, r3
 800883e:	f001 ff61 	bl	800a704 <osMessagePut>
      break;
 8008842:	bf00      	nop
  }
}
 8008844:	bf00      	nop
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008888:	b5b0      	push	{r4, r5, r7, lr}
 800888a:	b090      	sub	sp, #64	; 0x40
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800889c:	2302      	movs	r3, #2
 800889e:	e04d      	b.n	800893c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	79fa      	ldrb	r2, [r7, #7]
 80088a4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 f847 	bl	800894c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80088ec:	4b15      	ldr	r3, [pc, #84]	; (8008944 <USBH_Init+0xbc>)
 80088ee:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80088f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80088f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80088f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fed7 	bl	800a6b2 <osMessageCreate>
 8008904:	4602      	mov	r2, r0
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800890c:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <USBH_Init+0xc0>)
 800890e:	f107 0414 	add.w	r4, r7, #20
 8008912:	461d      	mov	r5, r3
 8008914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008918:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800891c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008920:	f107 0314 	add.w	r3, r7, #20
 8008924:	68f9      	ldr	r1, [r7, #12]
 8008926:	4618      	mov	r0, r3
 8008928:	f001 fe63 	bl	800a5f2 <osThreadCreate>
 800892c:	4602      	mov	r2, r0
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f004 f9d7 	bl	800cce8 <USBH_LL_Init>

  return USBH_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3740      	adds	r7, #64	; 0x40
 8008940:	46bd      	mov	sp, r7
 8008942:	bdb0      	pop	{r4, r5, r7, pc}
 8008944:	0800d3f0 	.word	0x0800d3f0
 8008948:	0800d400 	.word	0x0800d400

0800894c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	e009      	b.n	8008972 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	33e0      	adds	r3, #224	; 0xe0
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	2200      	movs	r2, #0
 800896a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3301      	adds	r3, #1
 8008970:	60fb      	str	r3, [r7, #12]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b0f      	cmp	r3, #15
 8008976:	d9f2      	bls.n	800895e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e009      	b.n	8008992 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008988:	2200      	movs	r2, #0
 800898a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008998:	d3f1      	bcc.n	800897e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2240      	movs	r2, #64	; 0x40
 80089be:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d016      	beq.n	8008a36 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10e      	bne.n	8008a30 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a18:	1c59      	adds	r1, r3, #1
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	33de      	adds	r3, #222	; 0xde
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
 8008a2e:	e004      	b.n	8008a3a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a30:	2302      	movs	r3, #2
 8008a32:	73fb      	strb	r3, [r7, #15]
 8008a34:	e001      	b.n	8008a3a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a36:	2302      	movs	r3, #2
 8008a38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008a5e:	78fa      	ldrb	r2, [r7, #3]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d204      	bcs.n	8008a6e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008a6c:	e001      	b.n	8008a72 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b087      	sub	sp, #28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4603      	mov	r3, r0
 8008a90:	70fb      	strb	r3, [r7, #3]
 8008a92:	460b      	mov	r3, r1
 8008a94:	70bb      	strb	r3, [r7, #2]
 8008a96:	4613      	mov	r3, r2
 8008a98:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008aa8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008aaa:	e025      	b.n	8008af8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
 8008aae:	221a      	movs	r2, #26
 8008ab0:	fb02 f303 	mul.w	r3, r2, r3
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4413      	add	r3, r2
 8008aba:	3302      	adds	r3, #2
 8008abc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	795b      	ldrb	r3, [r3, #5]
 8008ac2:	78fa      	ldrb	r2, [r7, #3]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d002      	beq.n	8008ace <USBH_FindInterface+0x4e>
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	2bff      	cmp	r3, #255	; 0xff
 8008acc:	d111      	bne.n	8008af2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ad2:	78ba      	ldrb	r2, [r7, #2]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d002      	beq.n	8008ade <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ad8:	78bb      	ldrb	r3, [r7, #2]
 8008ada:	2bff      	cmp	r3, #255	; 0xff
 8008adc:	d109      	bne.n	8008af2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ae2:	787a      	ldrb	r2, [r7, #1]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d002      	beq.n	8008aee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ae8:	787b      	ldrb	r3, [r7, #1]
 8008aea:	2bff      	cmp	r3, #255	; 0xff
 8008aec:	d101      	bne.n	8008af2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	e006      	b.n	8008b00 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
 8008af4:	3301      	adds	r3, #1
 8008af6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d9d6      	bls.n	8008aac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008afe:	23ff      	movs	r3, #255	; 0xff
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f004 f92d 	bl	800cd74 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f004 fa46 	bl	800cfae <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af04      	add	r7, sp, #16
 8008b32:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b34:	2302      	movs	r3, #2
 8008b36:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d102      	bne.n	8008b4e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b0b      	cmp	r3, #11
 8008b56:	f200 8247 	bhi.w	8008fe8 <USBH_Process+0x4bc>
 8008b5a:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <USBH_Process+0x34>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008b91 	.word	0x08008b91
 8008b64:	08008bdf 	.word	0x08008bdf
 8008b68:	08008c63 	.word	0x08008c63
 8008b6c:	08008f67 	.word	0x08008f67
 8008b70:	08008fe9 	.word	0x08008fe9
 8008b74:	08008d23 	.word	0x08008d23
 8008b78:	08008ef1 	.word	0x08008ef1
 8008b7c:	08008d75 	.word	0x08008d75
 8008b80:	08008db1 	.word	0x08008db1
 8008b84:	08008deb 	.word	0x08008deb
 8008b88:	08008e49 	.word	0x08008e49
 8008b8c:	08008f4f 	.word	0x08008f4f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 8227 	beq.w	8008fec <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008ba4:	20c8      	movs	r0, #200	; 0xc8
 8008ba6:	f004 fa49 	bl	800d03c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f004 f93f 	bl	800ce2e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	f001 fd94 	bl	800a704 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008bdc:	e206      	b.n	8008fec <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d107      	bne.n	8008bf8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	e025      	b.n	8008c44 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c02:	d914      	bls.n	8008c2e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d903      	bls.n	8008c26 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	220d      	movs	r2, #13
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e00e      	b.n	8008c44 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	e00a      	b.n	8008c44 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c34:	f103 020a 	add.w	r2, r3, #10
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008c3e:	200a      	movs	r0, #10
 8008c40:	f004 f9fc 	bl	800d03c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	f001 fd52 	bl	800a704 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c60:	e1cb      	b.n	8008ffa <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c72:	2104      	movs	r1, #4
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c78:	2064      	movs	r0, #100	; 0x64
 8008c7a:	f004 f9df 	bl	800d03c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f004 f8ae 	bl	800cde0 <USBH_LL_GetSpeed>
 8008c84:	4603      	mov	r3, r0
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2205      	movs	r2, #5
 8008c92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f001 fc17 	bl	800a4ca <USBH_AllocPipe>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ca4:	2180      	movs	r1, #128	; 0x80
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 fc0f 	bl	800a4ca <USBH_AllocPipe>
 8008cac:	4603      	mov	r3, r0
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	7919      	ldrb	r1, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cc8:	b292      	uxth	r2, r2
 8008cca:	9202      	str	r2, [sp, #8]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	9201      	str	r2, [sp, #4]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2280      	movs	r2, #128	; 0x80
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 fbc8 	bl	800a46c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	7959      	ldrb	r1, [r3, #5]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cf0:	b292      	uxth	r2, r2
 8008cf2:	9202      	str	r2, [sp, #8]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	9201      	str	r2, [sp, #4]
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f001 fbb4 	bl	800a46c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	f001 fcf2 	bl	800a704 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d20:	e16b      	b.n	8008ffa <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f96e 	bl	8009004 <USBH_HandleEnum>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f040 815d 	bne.w	8008ff0 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d103      	bne.n	8008d50 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2208      	movs	r2, #8
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	e002      	b.n	8008d56 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2207      	movs	r2, #7
 8008d54:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2205      	movs	r2, #5
 8008d5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f001 fcc9 	bl	800a704 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d72:	e13d      	b.n	8008ff0 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 813a 	beq.w	8008ff4 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d86:	2101      	movs	r1, #1
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2208      	movs	r2, #8
 8008d90:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2205      	movs	r2, #5
 8008d96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008da6:	2200      	movs	r2, #0
 8008da8:	4619      	mov	r1, r3
 8008daa:	f001 fcab 	bl	800a704 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008dae:	e121      	b.n	8008ff4 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fd00 	bl	80097c0 <USBH_SetCfg>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d102      	bne.n	8008dcc <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2209      	movs	r2, #9
 8008dca:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008de0:	2200      	movs	r2, #0
 8008de2:	4619      	mov	r1, r3
 8008de4:	f001 fc8e 	bl	800a704 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008de8:	e107      	b.n	8008ffa <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d015      	beq.n	8008e24 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008df8:	2101      	movs	r1, #1
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fd03 	bl	8009806 <USBH_SetFeature>
 8008e00:	4603      	mov	r3, r0
 8008e02:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d103      	bne.n	8008e14 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	220a      	movs	r2, #10
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	e00a      	b.n	8008e2a <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d106      	bne.n	8008e2a <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	220a      	movs	r2, #10
 8008e20:	701a      	strb	r2, [r3, #0]
 8008e22:	e002      	b.n	8008e2a <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	220a      	movs	r2, #10
 8008e28:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e3e:	2200      	movs	r2, #0
 8008e40:	4619      	mov	r1, r3
 8008e42:	f001 fc5f 	bl	800a704 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e46:	e0d8      	b.n	8008ffa <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d03f      	beq.n	8008ed2 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]
 8008e5e:	e016      	b.n	8008e8e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008e60:	7bfa      	ldrb	r2, [r7, #15]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	32de      	adds	r2, #222	; 0xde
 8008e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6a:	791a      	ldrb	r2, [r3, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d108      	bne.n	8008e88 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008e76:	7bfa      	ldrb	r2, [r7, #15]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	32de      	adds	r2, #222	; 0xde
 8008e7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008e86:	e005      	b.n	8008e94 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0e5      	beq.n	8008e60 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d016      	beq.n	8008ecc <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	4798      	blx	r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d109      	bne.n	8008ec4 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2206      	movs	r2, #6
 8008eb4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ebc:	2103      	movs	r1, #3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
 8008ec2:	e006      	b.n	8008ed2 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	220d      	movs	r2, #13
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e002      	b.n	8008ed2 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	220d      	movs	r2, #13
 8008ed0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	4619      	mov	r1, r3
 8008eea:	f001 fc0b 	bl	800a704 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008eee:	e084      	b.n	8008ffa <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d017      	beq.n	8008f2a <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	4798      	blx	r3
 8008f06:	4603      	mov	r3, r0
 8008f08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d103      	bne.n	8008f1a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	220b      	movs	r2, #11
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e00a      	b.n	8008f30 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d106      	bne.n	8008f30 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	220d      	movs	r2, #13
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	e002      	b.n	8008f30 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	220d      	movs	r2, #13
 8008f2e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2205      	movs	r2, #5
 8008f34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f44:	2200      	movs	r2, #0
 8008f46:	4619      	mov	r1, r3
 8008f48:	f001 fbdc 	bl	800a704 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f4c:	e055      	b.n	8008ffa <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d04f      	beq.n	8008ff8 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	4798      	blx	r3
      }
      break;
 8008f64:	e048      	b.n	8008ff8 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff fcec 	bl	800894c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fa2:	2105      	movs	r1, #5
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d107      	bne.n	8008fc4 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff fda5 	bl	8008b0c <USBH_Start>
 8008fc2:	e002      	b.n	8008fca <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f003 fed5 	bl	800cd74 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fde:	2200      	movs	r2, #0
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f001 fb8f 	bl	800a704 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fe6:	e008      	b.n	8008ffa <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8008fe8:	bf00      	nop
 8008fea:	e006      	b.n	8008ffa <USBH_Process+0x4ce>
      break;
 8008fec:	bf00      	nop
 8008fee:	e004      	b.n	8008ffa <USBH_Process+0x4ce>
      break;
 8008ff0:	bf00      	nop
 8008ff2:	e002      	b.n	8008ffa <USBH_Process+0x4ce>
    break;
 8008ff4:	bf00      	nop
 8008ff6:	e000      	b.n	8008ffa <USBH_Process+0x4ce>
      break;
 8008ff8:	bf00      	nop
  }
  return USBH_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af04      	add	r7, sp, #16
 800900a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800900c:	2301      	movs	r3, #1
 800900e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009010:	2301      	movs	r3, #1
 8009012:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	785b      	ldrb	r3, [r3, #1]
 8009018:	2b07      	cmp	r3, #7
 800901a:	f200 8208 	bhi.w	800942e <USBH_HandleEnum+0x42a>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <USBH_HandleEnum+0x20>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	08009045 	.word	0x08009045
 8009028:	08009103 	.word	0x08009103
 800902c:	0800916d 	.word	0x0800916d
 8009030:	080091fb 	.word	0x080091fb
 8009034:	08009265 	.word	0x08009265
 8009038:	080092d5 	.word	0x080092d5
 800903c:	08009371 	.word	0x08009371
 8009040:	080093ef 	.word	0x080093ef
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009044:	2108      	movs	r1, #8
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 faea 	bl	8009620 <USBH_Get_DevDesc>
 800904c:	4603      	mov	r3, r0
 800904e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d130      	bne.n	80090b8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7919      	ldrb	r1, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800907a:	b292      	uxth	r2, r2
 800907c:	9202      	str	r2, [sp, #8]
 800907e:	2200      	movs	r2, #0
 8009080:	9201      	str	r2, [sp, #4]
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	4603      	mov	r3, r0
 8009086:	2280      	movs	r2, #128	; 0x80
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 f9ef 	bl	800a46c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	7959      	ldrb	r1, [r3, #5]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090a2:	b292      	uxth	r2, r2
 80090a4:	9202      	str	r2, [sp, #8]
 80090a6:	2200      	movs	r2, #0
 80090a8:	9201      	str	r2, [sp, #4]
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	4603      	mov	r3, r0
 80090ae:	2200      	movs	r2, #0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 f9db 	bl	800a46c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090b6:	e1bc      	b.n	8009432 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	f040 81b9 	bne.w	8009432 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090c6:	3301      	adds	r3, #1
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d903      	bls.n	80090e2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	220d      	movs	r2, #13
 80090de:	701a      	strb	r2, [r3, #0]
      break;
 80090e0:	e1a7      	b.n	8009432 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	795b      	ldrb	r3, [r3, #5]
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 fa0f 	bl	800a50c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	791b      	ldrb	r3, [r3, #4]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 fa09 	bl	800a50c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	701a      	strb	r2, [r3, #0]
      break;
 8009100:	e197      	b.n	8009432 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009102:	2112      	movs	r1, #18
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fa8b 	bl	8009620 <USBH_Get_DevDesc>
 800910a:	4603      	mov	r3, r0
 800910c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d103      	bne.n	800911c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2202      	movs	r2, #2
 8009118:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800911a:	e18c      	b.n	8009436 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	2b03      	cmp	r3, #3
 8009120:	f040 8189 	bne.w	8009436 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800912a:	3301      	adds	r3, #1
 800912c:	b2da      	uxtb	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800913a:	2b03      	cmp	r3, #3
 800913c:	d903      	bls.n	8009146 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	220d      	movs	r2, #13
 8009142:	701a      	strb	r2, [r3, #0]
      break;
 8009144:	e177      	b.n	8009436 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	795b      	ldrb	r3, [r3, #5]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f9dd 	bl	800a50c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	791b      	ldrb	r3, [r3, #4]
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 f9d7 	bl	800a50c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	701a      	strb	r2, [r3, #0]
      break;
 800916a:	e164      	b.n	8009436 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800916c:	2101      	movs	r1, #1
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fb02 	bl	8009778 <USBH_SetAddress>
 8009174:	4603      	mov	r3, r0
 8009176:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d132      	bne.n	80091e4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800917e:	2002      	movs	r0, #2
 8009180:	f003 ff5c 	bl	800d03c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2203      	movs	r2, #3
 8009190:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	7919      	ldrb	r1, [r3, #4]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091a6:	b292      	uxth	r2, r2
 80091a8:	9202      	str	r2, [sp, #8]
 80091aa:	2200      	movs	r2, #0
 80091ac:	9201      	str	r2, [sp, #4]
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	4603      	mov	r3, r0
 80091b2:	2280      	movs	r2, #128	; 0x80
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 f959 	bl	800a46c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	7959      	ldrb	r1, [r3, #5]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091ce:	b292      	uxth	r2, r2
 80091d0:	9202      	str	r2, [sp, #8]
 80091d2:	2200      	movs	r2, #0
 80091d4:	9201      	str	r2, [sp, #4]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4603      	mov	r3, r0
 80091da:	2200      	movs	r2, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 f945 	bl	800a46c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80091e2:	e12a      	b.n	800943a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	f040 8127 	bne.w	800943a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	220d      	movs	r2, #13
 80091f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	705a      	strb	r2, [r3, #1]
      break;
 80091f8:	e11f      	b.n	800943a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80091fa:	2109      	movs	r1, #9
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fa37 	bl	8009670 <USBH_Get_CfgDesc>
 8009202:	4603      	mov	r3, r0
 8009204:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d103      	bne.n	8009214 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2204      	movs	r2, #4
 8009210:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009212:	e114      	b.n	800943e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b03      	cmp	r3, #3
 8009218:	f040 8111 	bne.w	800943e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009222:	3301      	adds	r3, #1
 8009224:	b2da      	uxtb	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009232:	2b03      	cmp	r3, #3
 8009234:	d903      	bls.n	800923e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	220d      	movs	r2, #13
 800923a:	701a      	strb	r2, [r3, #0]
      break;
 800923c:	e0ff      	b.n	800943e <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	795b      	ldrb	r3, [r3, #5]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 f961 	bl	800a50c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	791b      	ldrb	r3, [r3, #4]
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f001 f95b 	bl	800a50c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	701a      	strb	r2, [r3, #0]
      break;
 8009262:	e0ec      	b.n	800943e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f9ff 	bl	8009670 <USBH_Get_CfgDesc>
 8009272:	4603      	mov	r3, r0
 8009274:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d103      	bne.n	8009284 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2205      	movs	r2, #5
 8009280:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009282:	e0de      	b.n	8009442 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	2b03      	cmp	r3, #3
 8009288:	f040 80db 	bne.w	8009442 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009292:	3301      	adds	r3, #1
 8009294:	b2da      	uxtb	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d903      	bls.n	80092ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	220d      	movs	r2, #13
 80092aa:	701a      	strb	r2, [r3, #0]
      break;
 80092ac:	e0c9      	b.n	8009442 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	795b      	ldrb	r3, [r3, #5]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 f929 	bl	800a50c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	791b      	ldrb	r3, [r3, #4]
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f001 f923 	bl	800a50c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]
      break;
 80092d2:	e0b6      	b.n	8009442 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d036      	beq.n	800934c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092ea:	23ff      	movs	r3, #255	; 0xff
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f9e3 	bl	80096b8 <USBH_Get_StringDesc>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d111      	bne.n	8009320 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2206      	movs	r2, #6
 8009300:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2205      	movs	r2, #5
 8009306:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009316:	2200      	movs	r2, #0
 8009318:	4619      	mov	r1, r3
 800931a:	f001 f9f3 	bl	800a704 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800931e:	e092      	b.n	8009446 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	2b03      	cmp	r3, #3
 8009324:	f040 808f 	bne.w	8009446 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2206      	movs	r2, #6
 800932c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2205      	movs	r2, #5
 8009332:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009342:	2200      	movs	r2, #0
 8009344:	4619      	mov	r1, r3
 8009346:	f001 f9dd 	bl	800a704 <osMessagePut>
      break;
 800934a:	e07c      	b.n	8009446 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2206      	movs	r2, #6
 8009350:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2205      	movs	r2, #5
 8009356:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009366:	2200      	movs	r2, #0
 8009368:	4619      	mov	r1, r3
 800936a:	f001 f9cb 	bl	800a704 <osMessagePut>
      break;
 800936e:	e06a      	b.n	8009446 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009376:	2b00      	cmp	r3, #0
 8009378:	d027      	beq.n	80093ca <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009386:	23ff      	movs	r3, #255	; 0xff
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f995 	bl	80096b8 <USBH_Get_StringDesc>
 800938e:	4603      	mov	r3, r0
 8009390:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d103      	bne.n	80093a0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2207      	movs	r2, #7
 800939c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800939e:	e054      	b.n	800944a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d151      	bne.n	800944a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2207      	movs	r2, #7
 80093aa:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2205      	movs	r2, #5
 80093b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80093c0:	2200      	movs	r2, #0
 80093c2:	4619      	mov	r1, r3
 80093c4:	f001 f99e 	bl	800a704 <osMessagePut>
      break;
 80093c8:	e03f      	b.n	800944a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2207      	movs	r2, #7
 80093ce:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2205      	movs	r2, #5
 80093d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80093e4:	2200      	movs	r2, #0
 80093e6:	4619      	mov	r1, r3
 80093e8:	f001 f98c 	bl	800a704 <osMessagePut>
      break;
 80093ec:	e02d      	b.n	800944a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d017      	beq.n	8009428 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009404:	23ff      	movs	r3, #255	; 0xff
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f956 	bl	80096b8 <USBH_Get_StringDesc>
 800940c:	4603      	mov	r3, r0
 800940e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d102      	bne.n	800941c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800941a:	e018      	b.n	800944e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	2b03      	cmp	r3, #3
 8009420:	d115      	bne.n	800944e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]
      break;
 8009426:	e012      	b.n	800944e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]
      break;
 800942c:	e00f      	b.n	800944e <USBH_HandleEnum+0x44a>

    default:
      break;
 800942e:	bf00      	nop
 8009430:	e00e      	b.n	8009450 <USBH_HandleEnum+0x44c>
      break;
 8009432:	bf00      	nop
 8009434:	e00c      	b.n	8009450 <USBH_HandleEnum+0x44c>
      break;
 8009436:	bf00      	nop
 8009438:	e00a      	b.n	8009450 <USBH_HandleEnum+0x44c>
      break;
 800943a:	bf00      	nop
 800943c:	e008      	b.n	8009450 <USBH_HandleEnum+0x44c>
      break;
 800943e:	bf00      	nop
 8009440:	e006      	b.n	8009450 <USBH_HandleEnum+0x44c>
      break;
 8009442:	bf00      	nop
 8009444:	e004      	b.n	8009450 <USBH_HandleEnum+0x44c>
      break;
 8009446:	bf00      	nop
 8009448:	e002      	b.n	8009450 <USBH_HandleEnum+0x44c>
      break;
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <USBH_HandleEnum+0x44c>
      break;
 800944e:	bf00      	nop
  }
  return Status;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop

0800945c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f804 	bl	800949e <USBH_HandleSof>
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b0b      	cmp	r3, #11
 80094ae:	d10a      	bne.n	80094c6 <USBH_HandleSof+0x28>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	4798      	blx	r3
  }
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094f2:	2200      	movs	r2, #0
 80094f4:	4619      	mov	r1, r3
 80094f6:	f001 f905 	bl	800a704 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80094fa:	bf00      	nop
}
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009512:	bf00      	nop
}
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009552:	2200      	movs	r2, #0
 8009554:	4619      	mov	r1, r3
 8009556:	f001 f8d5 	bl	800a704 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f003 fc10 	bl	800cdaa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	791b      	ldrb	r3, [r3, #4]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 ffbb 	bl	800a50c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	795b      	ldrb	r3, [r3, #5]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 ffb5 	bl	800a50c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095b6:	2200      	movs	r2, #0
 80095b8:	4619      	mov	r1, r3
 80095ba:	f001 f8a3 	bl	800a704 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80095d6:	f107 030c 	add.w	r3, r7, #12
 80095da:	f04f 32ff 	mov.w	r2, #4294967295
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 f8d0 	bl	800a784 <osMessageGet>
    if (event.status == osEventMessage)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b10      	cmp	r3, #16
 80095e8:	d1f2      	bne.n	80095d0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7ff fa9e 	bl	8008b2c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80095f0:	e7ee      	b.n	80095d0 <USBH_Process_OS+0x8>

080095f2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800960e:	2200      	movs	r2, #0
 8009610:	4619      	mov	r1, r3
 8009612:	f001 f877 	bl	800a704 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af02      	add	r7, sp, #8
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	b29b      	uxth	r3, r3
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	4613      	mov	r3, r2
 800963a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800963e:	2100      	movs	r1, #0
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f864 	bl	800970e <USBH_GetDescriptor>
 8009646:	4603      	mov	r3, r0
 8009648:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	b292      	uxth	r2, r2
 8009660:	4619      	mov	r1, r3
 8009662:	f000 f918 	bl	8009896 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009666:	7bfb      	ldrb	r3, [r7, #15]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af02      	add	r7, sp, #8
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	331c      	adds	r3, #28
 8009680:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009682:	887b      	ldrh	r3, [r7, #2]
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800968c:	2100      	movs	r1, #0
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f83d 	bl	800970e <USBH_GetDescriptor>
 8009694:	4603      	mov	r3, r0
 8009696:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d107      	bne.n	80096ae <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800969e:	887b      	ldrh	r3, [r7, #2]
 80096a0:	461a      	mov	r2, r3
 80096a2:	68b9      	ldr	r1, [r7, #8]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f987 	bl	80099b8 <USBH_ParseCfgDesc>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af02      	add	r7, sp, #8
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	461a      	mov	r2, r3
 80096c4:	460b      	mov	r3, r1
 80096c6:	72fb      	strb	r3, [r7, #11]
 80096c8:	4613      	mov	r3, r2
 80096ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80096d4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80096dc:	893b      	ldrh	r3, [r7, #8]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	460b      	mov	r3, r1
 80096e2:	2100      	movs	r1, #0
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f812 	bl	800970e <USBH_GetDescriptor>
 80096ea:	4603      	mov	r3, r0
 80096ec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d107      	bne.n	8009704 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096fa:	893a      	ldrh	r2, [r7, #8]
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fb24 	bl	8009d4c <USBH_ParseStringDesc>
  }

  return status;
 8009704:	7dfb      	ldrb	r3, [r7, #23]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	72fb      	strb	r3, [r7, #11]
 800971c:	4613      	mov	r3, r2
 800971e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	789b      	ldrb	r3, [r3, #2]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d11c      	bne.n	8009762 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009728:	7afb      	ldrb	r3, [r7, #11]
 800972a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800972e:	b2da      	uxtb	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2206      	movs	r2, #6
 8009738:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	893a      	ldrh	r2, [r7, #8]
 800973e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009740:	893b      	ldrh	r3, [r7, #8]
 8009742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800974a:	d104      	bne.n	8009756 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f240 4209 	movw	r2, #1033	; 0x409
 8009752:	829a      	strh	r2, [r3, #20]
 8009754:	e002      	b.n	800975c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8b3a      	ldrh	r2, [r7, #24]
 8009760:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009762:	8b3b      	ldrh	r3, [r7, #24]
 8009764:	461a      	mov	r2, r3
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 fb3d 	bl	8009de8 <USBH_CtlReq>
 800976e:	4603      	mov	r3, r0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	789b      	ldrb	r3, [r3, #2]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d10f      	bne.n	80097ac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2205      	movs	r2, #5
 8009796:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	b29a      	uxth	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80097ac:	2200      	movs	r2, #0
 80097ae:	2100      	movs	r1, #0
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fb19 	bl	8009de8 <USBH_CtlReq>
 80097b6:	4603      	mov	r3, r0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	789b      	ldrb	r3, [r3, #2]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d10e      	bne.n	80097f2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2209      	movs	r2, #9
 80097de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	887a      	ldrh	r2, [r7, #2]
 80097e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80097f2:	2200      	movs	r2, #0
 80097f4:	2100      	movs	r1, #0
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 faf6 	bl	8009de8 <USBH_CtlReq>
 80097fc:	4603      	mov	r3, r0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	789b      	ldrb	r3, [r3, #2]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d10f      	bne.n	800983a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2203      	movs	r2, #3
 8009824:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009826:	78fb      	ldrb	r3, [r7, #3]
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800983a:	2200      	movs	r2, #0
 800983c:	2100      	movs	r1, #0
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fad2 	bl	8009de8 <USBH_CtlReq>
 8009844:	4603      	mov	r3, r0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	789b      	ldrb	r3, [r3, #2]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d10f      	bne.n	8009882 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2202      	movs	r2, #2
 8009866:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	b29a      	uxth	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009882:	2200      	movs	r2, #0
 8009884:	2100      	movs	r1, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 faae 	bl	8009de8 <USBH_CtlReq>
 800988c:	4603      	mov	r3, r0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	60f8      	str	r0, [r7, #12]
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	4613      	mov	r3, r2
 80098a2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	785a      	ldrb	r2, [r3, #1]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	3302      	adds	r3, #2
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	3303      	adds	r3, #3
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	4313      	orrs	r3, r2
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	791a      	ldrb	r2, [r3, #4]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	795a      	ldrb	r2, [r3, #5]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	799a      	ldrb	r2, [r3, #6]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	79da      	ldrb	r2, [r3, #7]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	79db      	ldrb	r3, [r3, #7]
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	dc11      	bgt.n	800991c <USBH_ParseDevDesc+0x86>
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	db16      	blt.n	800992a <USBH_ParseDevDesc+0x94>
 80098fc:	3b08      	subs	r3, #8
 80098fe:	2201      	movs	r2, #1
 8009900:	fa02 f303 	lsl.w	r3, r2, r3
 8009904:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800990c:	2b00      	cmp	r3, #0
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <USBH_ParseDevDesc+0x8a>
 800991a:	e006      	b.n	800992a <USBH_ParseDevDesc+0x94>
 800991c:	2b40      	cmp	r3, #64	; 0x40
 800991e:	d104      	bne.n	800992a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	79da      	ldrb	r2, [r3, #7]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	71da      	strb	r2, [r3, #7]
      break;
 8009928:	e003      	b.n	8009932 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2240      	movs	r2, #64	; 0x40
 800992e:	71da      	strb	r2, [r3, #7]
      break;
 8009930:	bf00      	nop
  }

  if (length > 8U)
 8009932:	88fb      	ldrh	r3, [r7, #6]
 8009934:	2b08      	cmp	r3, #8
 8009936:	d939      	bls.n	80099ac <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	3308      	adds	r3, #8
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	b29a      	uxth	r2, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	3309      	adds	r3, #9
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b29b      	uxth	r3, r3
 8009948:	021b      	lsls	r3, r3, #8
 800994a:	b29b      	uxth	r3, r3
 800994c:	4313      	orrs	r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	330a      	adds	r3, #10
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	b29a      	uxth	r2, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	330b      	adds	r3, #11
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	021b      	lsls	r3, r3, #8
 8009966:	b29b      	uxth	r3, r3
 8009968:	4313      	orrs	r3, r2
 800996a:	b29a      	uxth	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	330c      	adds	r3, #12
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	b29a      	uxth	r2, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	330d      	adds	r3, #13
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b29b      	uxth	r3, r3
 8009980:	021b      	lsls	r3, r3, #8
 8009982:	b29b      	uxth	r3, r3
 8009984:	4313      	orrs	r3, r2
 8009986:	b29a      	uxth	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	7b9a      	ldrb	r2, [r3, #14]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	7bda      	ldrb	r2, [r3, #15]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	7c1a      	ldrb	r2, [r3, #16]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	7c5a      	ldrb	r2, [r3, #17]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	745a      	strb	r2, [r3, #17]
  }
}
 80099ac:	bf00      	nop
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08c      	sub	sp, #48	; 0x30
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	4613      	mov	r3, r2
 80099c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80099cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80099de:	2300      	movs	r3, #0
 80099e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	781a      	ldrb	r2, [r3, #0]
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	785a      	ldrb	r2, [r3, #1]
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	3302      	adds	r3, #2
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	3303      	adds	r3, #3
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	021b      	lsls	r3, r3, #8
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a14:	bf28      	it	cs
 8009a16:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	791a      	ldrb	r2, [r3, #4]
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	795a      	ldrb	r2, [r3, #5]
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	799a      	ldrb	r2, [r3, #6]
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	79da      	ldrb	r2, [r3, #7]
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	7a1a      	ldrb	r2, [r3, #8]
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b09      	cmp	r3, #9
 8009a4e:	d002      	beq.n	8009a56 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	2209      	movs	r2, #9
 8009a54:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009a56:	88fb      	ldrh	r3, [r7, #6]
 8009a58:	2b09      	cmp	r3, #9
 8009a5a:	f240 809d 	bls.w	8009b98 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009a5e:	2309      	movs	r3, #9
 8009a60:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a66:	e081      	b.n	8009b6c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a68:	f107 0316 	add.w	r3, r7, #22
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a70:	f000 f99f 	bl	8009db2 <USBH_GetNextDesc>
 8009a74:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d176      	bne.n	8009b6c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b09      	cmp	r3, #9
 8009a84:	d002      	beq.n	8009a8c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	2209      	movs	r2, #9
 8009a8a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a90:	221a      	movs	r2, #26
 8009a92:	fb02 f303 	mul.w	r3, r2, r3
 8009a96:	3308      	adds	r3, #8
 8009a98:	6a3a      	ldr	r2, [r7, #32]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	3302      	adds	r3, #2
 8009a9e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa2:	69f8      	ldr	r0, [r7, #28]
 8009aa4:	f000 f87e 	bl	8009ba4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ab2:	e043      	b.n	8009b3c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ab4:	f107 0316 	add.w	r3, r7, #22
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009abc:	f000 f979 	bl	8009db2 <USBH_GetNextDesc>
 8009ac0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	785b      	ldrb	r3, [r3, #1]
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	d138      	bne.n	8009b3c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	795b      	ldrb	r3, [r3, #5]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d10f      	bne.n	8009af2 <USBH_ParseCfgDesc+0x13a>
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	799b      	ldrb	r3, [r3, #6]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d10b      	bne.n	8009af2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	79db      	ldrb	r3, [r3, #7]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10f      	bne.n	8009b02 <USBH_ParseCfgDesc+0x14a>
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b09      	cmp	r3, #9
 8009ae8:	d00b      	beq.n	8009b02 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	2209      	movs	r2, #9
 8009aee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009af0:	e007      	b.n	8009b02 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b07      	cmp	r3, #7
 8009af8:	d004      	beq.n	8009b04 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	2207      	movs	r2, #7
 8009afe:	701a      	strb	r2, [r3, #0]
 8009b00:	e000      	b.n	8009b04 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b02:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009b0c:	3201      	adds	r2, #1
 8009b0e:	00d2      	lsls	r2, r2, #3
 8009b10:	211a      	movs	r1, #26
 8009b12:	fb01 f303 	mul.w	r3, r1, r3
 8009b16:	4413      	add	r3, r2
 8009b18:	3308      	adds	r3, #8
 8009b1a:	6a3a      	ldr	r2, [r7, #32]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	3304      	adds	r3, #4
 8009b20:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b24:	69b9      	ldr	r1, [r7, #24]
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f000 f86b 	bl	8009c02 <USBH_ParseEPDesc>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b36:	3301      	adds	r3, #1
 8009b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	791b      	ldrb	r3, [r3, #4]
 8009b40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d204      	bcs.n	8009b52 <USBH_ParseCfgDesc+0x19a>
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	885a      	ldrh	r2, [r3, #2]
 8009b4c:	8afb      	ldrh	r3, [r7, #22]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d8b0      	bhi.n	8009ab4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	791b      	ldrb	r3, [r3, #4]
 8009b56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d201      	bcs.n	8009b62 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e01c      	b.n	8009b9c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b66:	3301      	adds	r3, #1
 8009b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d805      	bhi.n	8009b80 <USBH_ParseCfgDesc+0x1c8>
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	885a      	ldrh	r2, [r3, #2]
 8009b78:	8afb      	ldrh	r3, [r7, #22]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	f63f af74 	bhi.w	8009a68 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	791b      	ldrb	r3, [r3, #4]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	bf28      	it	cs
 8009b88:	2302      	movcs	r3, #2
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d201      	bcs.n	8009b98 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e001      	b.n	8009b9c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3730      	adds	r7, #48	; 0x30
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781a      	ldrb	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	785a      	ldrb	r2, [r3, #1]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	789a      	ldrb	r2, [r3, #2]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	78da      	ldrb	r2, [r3, #3]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	791a      	ldrb	r2, [r3, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	795a      	ldrb	r2, [r3, #5]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	799a      	ldrb	r2, [r3, #6]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	79da      	ldrb	r2, [r3, #7]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	7a1a      	ldrb	r2, [r3, #8]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	721a      	strb	r2, [r3, #8]
}
 8009bf6:	bf00      	nop
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b087      	sub	sp, #28
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	781a      	ldrb	r2, [r3, #0]
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	785a      	ldrb	r2, [r3, #1]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	789a      	ldrb	r2, [r3, #2]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	78da      	ldrb	r2, [r3, #3]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3304      	adds	r3, #4
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3305      	adds	r3, #5
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	021b      	lsls	r3, r3, #8
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	4313      	orrs	r3, r2
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	799a      	ldrb	r2, [r3, #6]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	889b      	ldrh	r3, [r3, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d102      	bne.n	8009c64 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	75fb      	strb	r3, [r7, #23]
 8009c62:	e033      	b.n	8009ccc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	889b      	ldrh	r3, [r3, #4]
 8009c68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009c6c:	f023 0307 	bic.w	r3, r3, #7
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	889b      	ldrh	r3, [r3, #4]
 8009c7a:	b21a      	sxth	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	b299      	uxth	r1, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3305      	adds	r3, #5
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	430b      	orrs	r3, r1
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d110      	bne.n	8009cbe <USBH_ParseEPDesc+0xbc>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	b299      	uxth	r1, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3305      	adds	r3, #5
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	430b      	orrs	r3, r1
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	b21b      	sxth	r3, r3
 8009cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cba:	b21b      	sxth	r3, r3
 8009cbc:	e001      	b.n	8009cc2 <USBH_ParseEPDesc+0xc0>
 8009cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	b21b      	sxth	r3, r3
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d116      	bne.n	8009d04 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	78db      	ldrb	r3, [r3, #3]
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d005      	beq.n	8009cee <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	78db      	ldrb	r3, [r3, #3]
 8009ce6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d127      	bne.n	8009d3e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	799b      	ldrb	r3, [r3, #6]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <USBH_ParseEPDesc+0xfc>
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	799b      	ldrb	r3, [r3, #6]
 8009cfa:	2b10      	cmp	r3, #16
 8009cfc:	d91f      	bls.n	8009d3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	75fb      	strb	r3, [r7, #23]
 8009d02:	e01c      	b.n	8009d3e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	78db      	ldrb	r3, [r3, #3]
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d10a      	bne.n	8009d26 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	799b      	ldrb	r3, [r3, #6]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d003      	beq.n	8009d20 <USBH_ParseEPDesc+0x11e>
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	799b      	ldrb	r3, [r3, #6]
 8009d1c:	2b10      	cmp	r3, #16
 8009d1e:	d90e      	bls.n	8009d3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009d20:	2303      	movs	r3, #3
 8009d22:	75fb      	strb	r3, [r7, #23]
 8009d24:	e00b      	b.n	8009d3e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	78db      	ldrb	r3, [r3, #3]
 8009d2a:	f003 0303 	and.w	r3, r3, #3
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d105      	bne.n	8009d3e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	799b      	ldrb	r3, [r3, #6]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	371c      	adds	r7, #28
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	4613      	mov	r3, r2
 8009d58:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d120      	bne.n	8009da6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	1e9a      	subs	r2, r3, #2
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	bf28      	it	cs
 8009d70:	4613      	movcs	r3, r2
 8009d72:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3302      	adds	r3, #2
 8009d78:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	82fb      	strh	r3, [r7, #22]
 8009d7e:	e00b      	b.n	8009d98 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009d80:	8afb      	ldrh	r3, [r7, #22]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	781a      	ldrb	r2, [r3, #0]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009d92:	8afb      	ldrh	r3, [r7, #22]
 8009d94:	3302      	adds	r3, #2
 8009d96:	82fb      	strh	r3, [r7, #22]
 8009d98:	8afa      	ldrh	r2, [r7, #22]
 8009d9a:	8abb      	ldrh	r3, [r7, #20]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d3ef      	bcc.n	8009d80 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2200      	movs	r2, #0
 8009da4:	701a      	strb	r2, [r3, #0]
  }
}
 8009da6:	bf00      	nop
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b085      	sub	sp, #20
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	881a      	ldrh	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	4413      	add	r3, r2
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009dda:	68fb      	ldr	r3, [r7, #12]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	4613      	mov	r3, r2
 8009df4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009df6:	2301      	movs	r3, #1
 8009df8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	789b      	ldrb	r3, [r3, #2]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d002      	beq.n	8009e08 <USBH_CtlReq+0x20>
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d01d      	beq.n	8009e42 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009e06:	e043      	b.n	8009e90 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	88fa      	ldrh	r2, [r7, #6]
 8009e12:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2201      	movs	r2, #1
 8009e18:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009e20:	2301      	movs	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2203      	movs	r2, #3
 8009e28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e38:	2200      	movs	r2, #0
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	f000 fc62 	bl	800a704 <osMessagePut>
      break;
 8009e40:	e026      	b.n	8009e90 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 f82a 	bl	8009e9c <USBH_HandleControl>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <USBH_CtlReq+0x70>
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d106      	bne.n	8009e66 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	761a      	strb	r2, [r3, #24]
 8009e64:	e005      	b.n	8009e72 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d102      	bne.n	8009e72 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2203      	movs	r2, #3
 8009e76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e86:	2200      	movs	r2, #0
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f000 fc3b 	bl	800a704 <osMessagePut>
      break;
 8009e8e:	bf00      	nop
  }
  return status;
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	7e1b      	ldrb	r3, [r3, #24]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	2b0a      	cmp	r3, #10
 8009eb4:	f200 8229 	bhi.w	800a30a <USBH_HandleControl+0x46e>
 8009eb8:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <USBH_HandleControl+0x24>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009eed 	.word	0x08009eed
 8009ec4:	08009f07 	.word	0x08009f07
 8009ec8:	08009fa9 	.word	0x08009fa9
 8009ecc:	08009fcf 	.word	0x08009fcf
 8009ed0:	0800a05b 	.word	0x0800a05b
 8009ed4:	0800a085 	.word	0x0800a085
 8009ed8:	0800a147 	.word	0x0800a147
 8009edc:	0800a169 	.word	0x0800a169
 8009ee0:	0800a1fb 	.word	0x0800a1fb
 8009ee4:	0800a221 	.word	0x0800a221
 8009ee8:	0800a2b3 	.word	0x0800a2b3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f103 0110 	add.w	r1, r3, #16
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	795b      	ldrb	r3, [r3, #5]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fa17 	bl	800a32c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2202      	movs	r2, #2
 8009f02:	761a      	strb	r2, [r3, #24]
      break;
 8009f04:	e20c      	b.n	800a320 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	795b      	ldrb	r3, [r3, #5]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f003 f83b 	bl	800cf88 <USBH_LL_GetURBState>
 8009f12:	4603      	mov	r3, r0
 8009f14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d12c      	bne.n	8009f76 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7c1b      	ldrb	r3, [r3, #16]
 8009f20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	8adb      	ldrh	r3, [r3, #22]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00a      	beq.n	8009f44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009f2e:	7b7b      	ldrb	r3, [r7, #13]
 8009f30:	2b80      	cmp	r3, #128	; 0x80
 8009f32:	d103      	bne.n	8009f3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2203      	movs	r2, #3
 8009f38:	761a      	strb	r2, [r3, #24]
 8009f3a:	e00d      	b.n	8009f58 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2205      	movs	r2, #5
 8009f40:	761a      	strb	r2, [r3, #24]
 8009f42:	e009      	b.n	8009f58 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009f44:	7b7b      	ldrb	r3, [r7, #13]
 8009f46:	2b80      	cmp	r3, #128	; 0x80
 8009f48:	d103      	bne.n	8009f52 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2209      	movs	r2, #9
 8009f4e:	761a      	strb	r2, [r3, #24]
 8009f50:	e002      	b.n	8009f58 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2207      	movs	r2, #7
 8009f56:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2203      	movs	r2, #3
 8009f5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	4619      	mov	r1, r3
 8009f70:	f000 fbc8 	bl	800a704 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f74:	e1cb      	b.n	800a30e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d003      	beq.n	8009f84 <USBH_HandleControl+0xe8>
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	f040 81c5 	bne.w	800a30e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	220b      	movs	r2, #11
 8009f88:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2203      	movs	r2, #3
 8009f8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	f000 fbaf 	bl	800a704 <osMessagePut>
      break;
 8009fa6:	e1b2      	b.n	800a30e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6899      	ldr	r1, [r3, #8]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	899a      	ldrh	r2, [r3, #12]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	791b      	ldrb	r3, [r3, #4]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f9f2 	bl	800a3aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2204      	movs	r2, #4
 8009fca:	761a      	strb	r2, [r3, #24]
      break;
 8009fcc:	e1a8      	b.n	800a320 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	791b      	ldrb	r3, [r3, #4]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f002 ffd7 	bl	800cf88 <USBH_LL_GetURBState>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d110      	bne.n	800a006 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2209      	movs	r2, #9
 8009fe8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2203      	movs	r2, #3
 8009fee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ffe:	2200      	movs	r2, #0
 800a000:	4619      	mov	r1, r3
 800a002:	f000 fb7f 	bl	800a704 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	2b05      	cmp	r3, #5
 800a00a:	d110      	bne.n	800a02e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a00c:	2303      	movs	r3, #3
 800a00e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2203      	movs	r2, #3
 800a014:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a024:	2200      	movs	r2, #0
 800a026:	4619      	mov	r1, r3
 800a028:	f000 fb6c 	bl	800a704 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a02c:	e171      	b.n	800a312 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
 800a030:	2b04      	cmp	r3, #4
 800a032:	f040 816e 	bne.w	800a312 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	220b      	movs	r2, #11
 800a03a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2203      	movs	r2, #3
 800a040:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a050:	2200      	movs	r2, #0
 800a052:	4619      	mov	r1, r3
 800a054:	f000 fb56 	bl	800a704 <osMessagePut>
      break;
 800a058:	e15b      	b.n	800a312 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6899      	ldr	r1, [r3, #8]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	899a      	ldrh	r2, [r3, #12]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	795b      	ldrb	r3, [r3, #5]
 800a066:	2001      	movs	r0, #1
 800a068:	9000      	str	r0, [sp, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f978 	bl	800a360 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a076:	b29a      	uxth	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2206      	movs	r2, #6
 800a080:	761a      	strb	r2, [r3, #24]
      break;
 800a082:	e14d      	b.n	800a320 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	795b      	ldrb	r3, [r3, #5]
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f002 ff7c 	bl	800cf88 <USBH_LL_GetURBState>
 800a090:	4603      	mov	r3, r0
 800a092:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d111      	bne.n	800a0be <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2207      	movs	r2, #7
 800a09e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2203      	movs	r2, #3
 800a0a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	f000 fb24 	bl	800a704 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0bc:	e12b      	b.n	800a316 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	2b05      	cmp	r3, #5
 800a0c2:	d113      	bne.n	800a0ec <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	220c      	movs	r2, #12
 800a0c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2203      	movs	r2, #3
 800a0d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	f000 fb0d 	bl	800a704 <osMessagePut>
      break;
 800a0ea:	e114      	b.n	800a316 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d111      	bne.n	800a116 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2205      	movs	r2, #5
 800a0f6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2203      	movs	r2, #3
 800a0fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a10c:	2200      	movs	r2, #0
 800a10e:	4619      	mov	r1, r3
 800a110:	f000 faf8 	bl	800a704 <osMessagePut>
      break;
 800a114:	e0ff      	b.n	800a316 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	2b04      	cmp	r3, #4
 800a11a:	f040 80fc 	bne.w	800a316 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	220b      	movs	r2, #11
 800a122:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a124:	2302      	movs	r3, #2
 800a126:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2203      	movs	r2, #3
 800a12c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a13c:	2200      	movs	r2, #0
 800a13e:	4619      	mov	r1, r3
 800a140:	f000 fae0 	bl	800a704 <osMessagePut>
      break;
 800a144:	e0e7      	b.n	800a316 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	791b      	ldrb	r3, [r3, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	2100      	movs	r1, #0
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f92b 	bl	800a3aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2208      	movs	r2, #8
 800a164:	761a      	strb	r2, [r3, #24]

      break;
 800a166:	e0db      	b.n	800a320 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	791b      	ldrb	r3, [r3, #4]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f002 ff0a 	bl	800cf88 <USBH_LL_GetURBState>
 800a174:	4603      	mov	r3, r0
 800a176:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d113      	bne.n	800a1a6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	220d      	movs	r2, #13
 800a182:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2203      	movs	r2, #3
 800a18c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a19c:	2200      	movs	r2, #0
 800a19e:	4619      	mov	r1, r3
 800a1a0:	f000 fab0 	bl	800a704 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1a4:	e0b9      	b.n	800a31a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d111      	bne.n	800a1d0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	220b      	movs	r2, #11
 800a1b0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2203      	movs	r2, #3
 800a1b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	f000 fa9b 	bl	800a704 <osMessagePut>
      break;
 800a1ce:	e0a4      	b.n	800a31a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	2b05      	cmp	r3, #5
 800a1d4:	f040 80a1 	bne.w	800a31a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2203      	movs	r2, #3
 800a1e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	f000 fa86 	bl	800a704 <osMessagePut>
      break;
 800a1f8:	e08f      	b.n	800a31a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	795b      	ldrb	r3, [r3, #5]
 800a1fe:	2201      	movs	r2, #1
 800a200:	9200      	str	r2, [sp, #0]
 800a202:	2200      	movs	r2, #0
 800a204:	2100      	movs	r1, #0
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f8aa 	bl	800a360 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a212:	b29a      	uxth	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	220a      	movs	r2, #10
 800a21c:	761a      	strb	r2, [r3, #24]
      break;
 800a21e:	e07f      	b.n	800a320 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	795b      	ldrb	r3, [r3, #5]
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f002 feae 	bl	800cf88 <USBH_LL_GetURBState>
 800a22c:	4603      	mov	r3, r0
 800a22e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a230:	7bbb      	ldrb	r3, [r7, #14]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d113      	bne.n	800a25e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	220d      	movs	r2, #13
 800a23e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2203      	movs	r2, #3
 800a244:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a254:	2200      	movs	r2, #0
 800a256:	4619      	mov	r1, r3
 800a258:	f000 fa54 	bl	800a704 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a25c:	e05f      	b.n	800a31e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d111      	bne.n	800a288 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2209      	movs	r2, #9
 800a268:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2203      	movs	r2, #3
 800a26e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a27e:	2200      	movs	r2, #0
 800a280:	4619      	mov	r1, r3
 800a282:	f000 fa3f 	bl	800a704 <osMessagePut>
      break;
 800a286:	e04a      	b.n	800a31e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d147      	bne.n	800a31e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	220b      	movs	r2, #11
 800a292:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2203      	movs	r2, #3
 800a298:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	f000 fa2a 	bl	800a704 <osMessagePut>
      break;
 800a2b0:	e035      	b.n	800a31e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7e5b      	ldrb	r3, [r3, #25]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	765a      	strb	r2, [r3, #25]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	7e5b      	ldrb	r3, [r3, #25]
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d806      	bhi.n	800a2d4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a2d2:	e025      	b.n	800a320 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2da:	2106      	movs	r1, #6
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	795b      	ldrb	r3, [r3, #5]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f90d 	bl	800a50c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	791b      	ldrb	r3, [r3, #4]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f907 	bl	800a50c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a304:	2302      	movs	r3, #2
 800a306:	73fb      	strb	r3, [r7, #15]
      break;
 800a308:	e00a      	b.n	800a320 <USBH_HandleControl+0x484>

    default:
      break;
 800a30a:	bf00      	nop
 800a30c:	e008      	b.n	800a320 <USBH_HandleControl+0x484>
      break;
 800a30e:	bf00      	nop
 800a310:	e006      	b.n	800a320 <USBH_HandleControl+0x484>
      break;
 800a312:	bf00      	nop
 800a314:	e004      	b.n	800a320 <USBH_HandleControl+0x484>
      break;
 800a316:	bf00      	nop
 800a318:	e002      	b.n	800a320 <USBH_HandleControl+0x484>
      break;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <USBH_HandleControl+0x484>
      break;
 800a31e:	bf00      	nop
  }

  return status;
 800a320:	7bfb      	ldrb	r3, [r7, #15]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop

0800a32c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af04      	add	r7, sp, #16
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a33a:	79f9      	ldrb	r1, [r7, #7]
 800a33c:	2300      	movs	r3, #0
 800a33e:	9303      	str	r3, [sp, #12]
 800a340:	2308      	movs	r3, #8
 800a342:	9302      	str	r3, [sp, #8]
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	2300      	movs	r3, #0
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	2300      	movs	r3, #0
 800a34e:	2200      	movs	r2, #0
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f002 fde8 	bl	800cf26 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af04      	add	r7, sp, #16
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	4611      	mov	r1, r2
 800a36c:	461a      	mov	r2, r3
 800a36e:	460b      	mov	r3, r1
 800a370:	80fb      	strh	r3, [r7, #6]
 800a372:	4613      	mov	r3, r2
 800a374:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a384:	7979      	ldrb	r1, [r7, #5]
 800a386:	7e3b      	ldrb	r3, [r7, #24]
 800a388:	9303      	str	r3, [sp, #12]
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	9302      	str	r3, [sp, #8]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	2301      	movs	r3, #1
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	2300      	movs	r3, #0
 800a398:	2200      	movs	r2, #0
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f002 fdc3 	bl	800cf26 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b088      	sub	sp, #32
 800a3ae:	af04      	add	r7, sp, #16
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	80fb      	strh	r3, [r7, #6]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a3c0:	7979      	ldrb	r1, [r7, #5]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	88fb      	ldrh	r3, [r7, #6]
 800a3c8:	9302      	str	r3, [sp, #8]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f002 fda5 	bl	800cf26 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a3dc:	2300      	movs	r3, #0

}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b088      	sub	sp, #32
 800a3ea:	af04      	add	r7, sp, #16
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	80fb      	strh	r3, [r7, #6]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a40a:	7979      	ldrb	r1, [r7, #5]
 800a40c:	7e3b      	ldrb	r3, [r7, #24]
 800a40e:	9303      	str	r3, [sp, #12]
 800a410:	88fb      	ldrh	r3, [r7, #6]
 800a412:	9302      	str	r3, [sp, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	2301      	movs	r3, #1
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	2302      	movs	r3, #2
 800a41e:	2200      	movs	r2, #0
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f002 fd80 	bl	800cf26 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af04      	add	r7, sp, #16
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4611      	mov	r1, r2
 800a43c:	461a      	mov	r2, r3
 800a43e:	460b      	mov	r3, r1
 800a440:	80fb      	strh	r3, [r7, #6]
 800a442:	4613      	mov	r3, r2
 800a444:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a446:	7979      	ldrb	r1, [r7, #5]
 800a448:	2300      	movs	r3, #0
 800a44a:	9303      	str	r3, [sp, #12]
 800a44c:	88fb      	ldrh	r3, [r7, #6]
 800a44e:	9302      	str	r3, [sp, #8]
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	2301      	movs	r3, #1
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	2302      	movs	r3, #2
 800a45a:	2201      	movs	r2, #1
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f002 fd62 	bl	800cf26 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af04      	add	r7, sp, #16
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	70fb      	strb	r3, [r7, #3]
 800a47e:	460b      	mov	r3, r1
 800a480:	70bb      	strb	r3, [r7, #2]
 800a482:	4613      	mov	r3, r2
 800a484:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a486:	7878      	ldrb	r0, [r7, #1]
 800a488:	78ba      	ldrb	r2, [r7, #2]
 800a48a:	78f9      	ldrb	r1, [r7, #3]
 800a48c:	8b3b      	ldrh	r3, [r7, #24]
 800a48e:	9302      	str	r3, [sp, #8]
 800a490:	7d3b      	ldrb	r3, [r7, #20]
 800a492:	9301      	str	r3, [sp, #4]
 800a494:	7c3b      	ldrb	r3, [r7, #16]
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	4603      	mov	r3, r0
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f002 fcf5 	bl	800ce8a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f002 fd14 	bl	800cee8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f836 	bl	800a548 <USBH_GetFreePipe>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a4e0:	89fb      	ldrh	r3, [r7, #14]
 800a4e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d00a      	beq.n	800a500 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a4ea:	78fa      	ldrb	r2, [r7, #3]
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	33e0      	adds	r3, #224	; 0xe0
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	440b      	add	r3, r1
 800a4fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a500:	89fb      	ldrh	r3, [r7, #14]
 800a502:	b2db      	uxtb	r3, r3
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	2b0f      	cmp	r3, #15
 800a51c:	d80d      	bhi.n	800a53a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	33e0      	adds	r3, #224	; 0xe0
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	685a      	ldr	r2, [r3, #4]
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	33e0      	adds	r3, #224	; 0xe0
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	440b      	add	r3, r1
 800a538:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a554:	2300      	movs	r3, #0
 800a556:	73fb      	strb	r3, [r7, #15]
 800a558:	e00f      	b.n	800a57a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	33e0      	adds	r3, #224	; 0xe0
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d102      	bne.n	800a574 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	b29b      	uxth	r3, r3
 800a572:	e007      	b.n	800a584 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	3301      	adds	r3, #1
 800a578:	73fb      	strb	r3, [r7, #15]
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	2b0f      	cmp	r3, #15
 800a57e:	d9ec      	bls.n	800a55a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a580:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a59e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5a2:	2b84      	cmp	r3, #132	; 0x84
 800a5a4:	d005      	beq.n	800a5b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a5a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	3303      	adds	r3, #3
 800a5b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5c6:	f3ef 8305 	mrs	r3, IPSR
 800a5ca:	607b      	str	r3, [r7, #4]
  return(result);
 800a5cc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bf14      	ite	ne
 800a5d2:	2301      	movne	r3, #1
 800a5d4:	2300      	moveq	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a5e8:	f001 f90a 	bl	800b800 <vTaskStartScheduler>
  
  return osOK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a5f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5f4:	b089      	sub	sp, #36	; 0x24
 800a5f6:	af04      	add	r7, sp, #16
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d020      	beq.n	800a646 <osThreadCreate+0x54>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d01c      	beq.n	800a646 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685c      	ldr	r4, [r3, #4]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681d      	ldr	r5, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	691e      	ldr	r6, [r3, #16]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7ff ffb6 	bl	800a590 <makeFreeRtosPriority>
 800a624:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a62e:	9202      	str	r2, [sp, #8]
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	9100      	str	r1, [sp, #0]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	4632      	mov	r2, r6
 800a638:	4629      	mov	r1, r5
 800a63a:	4620      	mov	r0, r4
 800a63c:	f000 ff0e 	bl	800b45c <xTaskCreateStatic>
 800a640:	4603      	mov	r3, r0
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	e01c      	b.n	800a680 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685c      	ldr	r4, [r3, #4]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a652:	b29e      	uxth	r6, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7ff ff98 	bl	800a590 <makeFreeRtosPriority>
 800a660:	4602      	mov	r2, r0
 800a662:	f107 030c 	add.w	r3, r7, #12
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	9200      	str	r2, [sp, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	4632      	mov	r2, r6
 800a66e:	4629      	mov	r1, r5
 800a670:	4620      	mov	r0, r4
 800a672:	f000 ff50 	bl	800b516 <xTaskCreate>
 800a676:	4603      	mov	r3, r0
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d001      	beq.n	800a680 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e000      	b.n	800a682 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a680:	68fb      	ldr	r3, [r7, #12]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a68a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <osDelay+0x16>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	e000      	b.n	800a6a2 <osDelay+0x18>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f001 f878 	bl	800b798 <vTaskDelay>
  
  return osOK;
 800a6a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a6b2:	b590      	push	{r4, r7, lr}
 800a6b4:	b085      	sub	sp, #20
 800a6b6:	af02      	add	r7, sp, #8
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d011      	beq.n	800a6e8 <osMessageCreate+0x36>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00d      	beq.n	800a6e8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6818      	ldr	r0, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6859      	ldr	r1, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	2400      	movs	r4, #0
 800a6de:	9400      	str	r4, [sp, #0]
 800a6e0:	f000 f9e0 	bl	800aaa4 <xQueueGenericCreateStatic>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	e008      	b.n	800a6fa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	f000 fa4e 	bl	800ab94 <xQueueGenericCreate>
 800a6f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd90      	pop	{r4, r7, pc}
	...

0800a704 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a710:	2300      	movs	r3, #0
 800a712:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <osMessagePut+0x1e>
    ticks = 1;
 800a71e:	2301      	movs	r3, #1
 800a720:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a722:	f7ff ff4d 	bl	800a5c0 <inHandlerMode>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d018      	beq.n	800a75e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a72c:	f107 0210 	add.w	r2, r7, #16
 800a730:	f107 0108 	add.w	r1, r7, #8
 800a734:	2300      	movs	r3, #0
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f000 fb84 	bl	800ae44 <xQueueGenericSendFromISR>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d001      	beq.n	800a746 <osMessagePut+0x42>
      return osErrorOS;
 800a742:	23ff      	movs	r3, #255	; 0xff
 800a744:	e018      	b.n	800a778 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d014      	beq.n	800a776 <osMessagePut+0x72>
 800a74c:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <osMessagePut+0x7c>)
 800a74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	e00b      	b.n	800a776 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a75e:	f107 0108 	add.w	r1, r7, #8
 800a762:	2300      	movs	r3, #0
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f000 fa6e 	bl	800ac48 <xQueueGenericSend>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d001      	beq.n	800a776 <osMessagePut+0x72>
      return osErrorOS;
 800a772:	23ff      	movs	r3, #255	; 0xff
 800a774:	e000      	b.n	800a778 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	e000ed04 	.word	0xe000ed04

0800a784 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a784:	b590      	push	{r4, r7, lr}
 800a786:	b08b      	sub	sp, #44	; 0x2c
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10a      	bne.n	800a7b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a79e:	2380      	movs	r3, #128	; 0x80
 800a7a0:	617b      	str	r3, [r7, #20]
    return event;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	461c      	mov	r4, r3
 800a7a6:	f107 0314 	add.w	r3, r7, #20
 800a7aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a7b2:	e054      	b.n	800a85e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c2:	d103      	bne.n	800a7cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7ca:	e009      	b.n	800a7e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d006      	beq.n	800a7e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <osMessageGet+0x5c>
      ticks = 1;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a7e0:	f7ff feee 	bl	800a5c0 <inHandlerMode>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d01c      	beq.n	800a824 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a7ea:	f107 0220 	add.w	r2, r7, #32
 800a7ee:	f107 0314 	add.w	r3, r7, #20
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	68b8      	ldr	r0, [r7, #8]
 800a7f8:	f000 fca0 	bl	800b13c <xQueueReceiveFromISR>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d102      	bne.n	800a808 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a802:	2310      	movs	r3, #16
 800a804:	617b      	str	r3, [r7, #20]
 800a806:	e001      	b.n	800a80c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a808:	2300      	movs	r3, #0
 800a80a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a80c:	6a3b      	ldr	r3, [r7, #32]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d01d      	beq.n	800a84e <osMessageGet+0xca>
 800a812:	4b15      	ldr	r3, [pc, #84]	; (800a868 <osMessageGet+0xe4>)
 800a814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	e014      	b.n	800a84e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a824:	f107 0314 	add.w	r3, r7, #20
 800a828:	3304      	adds	r3, #4
 800a82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a82c:	4619      	mov	r1, r3
 800a82e:	68b8      	ldr	r0, [r7, #8]
 800a830:	f000 fba4 	bl	800af7c <xQueueReceive>
 800a834:	4603      	mov	r3, r0
 800a836:	2b01      	cmp	r3, #1
 800a838:	d102      	bne.n	800a840 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a83a:	2310      	movs	r3, #16
 800a83c:	617b      	str	r3, [r7, #20]
 800a83e:	e006      	b.n	800a84e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a842:	2b00      	cmp	r3, #0
 800a844:	d101      	bne.n	800a84a <osMessageGet+0xc6>
 800a846:	2300      	movs	r3, #0
 800a848:	e000      	b.n	800a84c <osMessageGet+0xc8>
 800a84a:	2340      	movs	r3, #64	; 0x40
 800a84c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	461c      	mov	r4, r3
 800a852:	f107 0314 	add.w	r3, r7, #20
 800a856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a85a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	372c      	adds	r7, #44	; 0x2c
 800a862:	46bd      	mov	sp, r7
 800a864:	bd90      	pop	{r4, r7, pc}
 800a866:	bf00      	nop
 800a868:	e000ed04 	.word	0xe000ed04

0800a86c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f103 0208 	add.w	r2, r3, #8
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f04f 32ff 	mov.w	r2, #4294967295
 800a884:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f103 0208 	add.w	r2, r3, #8
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f103 0208 	add.w	r2, r3, #8
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b085      	sub	sp, #20
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	1c5a      	adds	r2, r3, #1
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	601a      	str	r2, [r3, #0]
}
 800a902:	bf00      	nop
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a924:	d103      	bne.n	800a92e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	e00c      	b.n	800a948 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3308      	adds	r3, #8
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e002      	b.n	800a93c <vListInsert+0x2e>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	429a      	cmp	r2, r3
 800a946:	d2f6      	bcs.n	800a936 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	683a      	ldr	r2, [r7, #0]
 800a956:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	6892      	ldr	r2, [r2, #8]
 800a996:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	6852      	ldr	r2, [r2, #4]
 800a9a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d103      	bne.n	800a9b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	1e5a      	subs	r2, r3, #1
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a9fa:	bf00      	nop
 800a9fc:	e7fe      	b.n	800a9fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a9fe:	f001 fd59 	bl	800c4b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0a:	68f9      	ldr	r1, [r7, #12]
 800aa0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa0e:	fb01 f303 	mul.w	r3, r1, r3
 800aa12:	441a      	add	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	68f9      	ldr	r1, [r7, #12]
 800aa32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa34:	fb01 f303 	mul.w	r3, r1, r3
 800aa38:	441a      	add	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	22ff      	movs	r2, #255	; 0xff
 800aa42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	22ff      	movs	r2, #255	; 0xff
 800aa4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d114      	bne.n	800aa7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01a      	beq.n	800aa92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3310      	adds	r3, #16
 800aa60:	4618      	mov	r0, r3
 800aa62:	f001 f933 	bl	800bccc <xTaskRemoveFromEventList>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d012      	beq.n	800aa92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa6c:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <xQueueGenericReset+0xcc>)
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	e009      	b.n	800aa92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	3310      	adds	r3, #16
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7ff fef2 	bl	800a86c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	3324      	adds	r3, #36	; 0x24
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff feed 	bl	800a86c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa92:	f001 fd3f 	bl	800c514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa96:	2301      	movs	r3, #1
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	e000ed04 	.word	0xe000ed04

0800aaa4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08e      	sub	sp, #56	; 0x38
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
 800aab0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <xQueueGenericCreateStatic+0x52>
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <xQueueGenericCreateStatic+0x56>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xQueueGenericCreateStatic+0x58>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	623b      	str	r3, [r7, #32]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <xQueueGenericCreateStatic+0x7e>
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <xQueueGenericCreateStatic+0x82>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e000      	b.n	800ab28 <xQueueGenericCreateStatic+0x84>
 800ab26:	2300      	movs	r3, #0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	61fb      	str	r3, [r7, #28]
}
 800ab3e:	bf00      	nop
 800ab40:	e7fe      	b.n	800ab40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab42:	2348      	movs	r3, #72	; 0x48
 800ab44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b48      	cmp	r3, #72	; 0x48
 800ab4a:	d00a      	beq.n	800ab62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	61bb      	str	r3, [r7, #24]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00d      	beq.n	800ab8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	68b9      	ldr	r1, [r7, #8]
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f000 f83f 	bl	800ac08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3730      	adds	r7, #48	; 0x30
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08a      	sub	sp, #40	; 0x28
 800ab98:	af02      	add	r7, sp, #8
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <xQueueGenericCreate+0x2a>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	613b      	str	r3, [r7, #16]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	fb02 f303 	mul.w	r3, r2, r3
 800abc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	3348      	adds	r3, #72	; 0x48
 800abcc:	4618      	mov	r0, r3
 800abce:	f001 fd93 	bl	800c6f8 <pvPortMalloc>
 800abd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d011      	beq.n	800abfe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	3348      	adds	r3, #72	; 0x48
 800abe2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abec:	79fa      	ldrb	r2, [r7, #7]
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	4613      	mov	r3, r2
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	68b9      	ldr	r1, [r7, #8]
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 f805 	bl	800ac08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abfe:	69bb      	ldr	r3, [r7, #24]
	}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3720      	adds	r7, #32
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d103      	bne.n	800ac24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	69ba      	ldr	r2, [r7, #24]
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	e002      	b.n	800ac2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac36:	2101      	movs	r1, #1
 800ac38:	69b8      	ldr	r0, [r7, #24]
 800ac3a:	f7ff fecb 	bl	800a9d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac3e:	bf00      	nop
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
	...

0800ac48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b08e      	sub	sp, #56	; 0x38
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac56:	2300      	movs	r3, #0
 800ac58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10a      	bne.n	800ac7a <xQueueGenericSend+0x32>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac76:	bf00      	nop
 800ac78:	e7fe      	b.n	800ac78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d103      	bne.n	800ac88 <xQueueGenericSend+0x40>
 800ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <xQueueGenericSend+0x44>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e000      	b.n	800ac8e <xQueueGenericSend+0x46>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10a      	bne.n	800aca8 <xQueueGenericSend+0x60>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aca4:	bf00      	nop
 800aca6:	e7fe      	b.n	800aca6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d103      	bne.n	800acb6 <xQueueGenericSend+0x6e>
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d101      	bne.n	800acba <xQueueGenericSend+0x72>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e000      	b.n	800acbc <xQueueGenericSend+0x74>
 800acba:	2300      	movs	r3, #0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10a      	bne.n	800acd6 <xQueueGenericSend+0x8e>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	623b      	str	r3, [r7, #32]
}
 800acd2:	bf00      	nop
 800acd4:	e7fe      	b.n	800acd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acd6:	f001 f9b7 	bl	800c048 <xTaskGetSchedulerState>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <xQueueGenericSend+0x9e>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <xQueueGenericSend+0xa2>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e000      	b.n	800acec <xQueueGenericSend+0xa4>
 800acea:	2300      	movs	r3, #0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10a      	bne.n	800ad06 <xQueueGenericSend+0xbe>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	61fb      	str	r3, [r7, #28]
}
 800ad02:	bf00      	nop
 800ad04:	e7fe      	b.n	800ad04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad06:	f001 fbd5 	bl	800c4b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d302      	bcc.n	800ad1c <xQueueGenericSend+0xd4>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	d129      	bne.n	800ad70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	68b9      	ldr	r1, [r7, #8]
 800ad20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad22:	f000 fa8b 	bl	800b23c <prvCopyDataToQueue>
 800ad26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d010      	beq.n	800ad52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	3324      	adds	r3, #36	; 0x24
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 ffc9 	bl	800bccc <xTaskRemoveFromEventList>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d013      	beq.n	800ad68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad40:	4b3f      	ldr	r3, [pc, #252]	; (800ae40 <xQueueGenericSend+0x1f8>)
 800ad42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	e00a      	b.n	800ad68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d007      	beq.n	800ad68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad58:	4b39      	ldr	r3, [pc, #228]	; (800ae40 <xQueueGenericSend+0x1f8>)
 800ad5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad68:	f001 fbd4 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e063      	b.n	800ae38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d103      	bne.n	800ad7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad76:	f001 fbcd 	bl	800c514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	e05c      	b.n	800ae38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad84:	f107 0314 	add.w	r3, r7, #20
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f001 f801 	bl	800bd90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad92:	f001 fbbf 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad96:	f000 fd93 	bl	800b8c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad9a:	f001 fb8b 	bl	800c4b4 <vPortEnterCritical>
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ada4:	b25b      	sxtb	r3, r3
 800ada6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adaa:	d103      	bne.n	800adb4 <xQueueGenericSend+0x16c>
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adba:	b25b      	sxtb	r3, r3
 800adbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc0:	d103      	bne.n	800adca <xQueueGenericSend+0x182>
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adca:	f001 fba3 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adce:	1d3a      	adds	r2, r7, #4
 800add0:	f107 0314 	add.w	r3, r7, #20
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f000 fff0 	bl	800bdbc <xTaskCheckForTimeOut>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d124      	bne.n	800ae2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ade2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ade4:	f000 fb22 	bl	800b42c <prvIsQueueFull>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d018      	beq.n	800ae20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	3310      	adds	r3, #16
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	4611      	mov	r1, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 ff44 	bl	800bc84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800adfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adfe:	f000 faad 	bl	800b35c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae02:	f000 fd6b 	bl	800b8dc <xTaskResumeAll>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f47f af7c 	bne.w	800ad06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ae0e:	4b0c      	ldr	r3, [pc, #48]	; (800ae40 <xQueueGenericSend+0x1f8>)
 800ae10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	e772      	b.n	800ad06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae22:	f000 fa9b 	bl	800b35c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae26:	f000 fd59 	bl	800b8dc <xTaskResumeAll>
 800ae2a:	e76c      	b.n	800ad06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae2e:	f000 fa95 	bl	800b35c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae32:	f000 fd53 	bl	800b8dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3738      	adds	r7, #56	; 0x38
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	e000ed04 	.word	0xe000ed04

0800ae44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b090      	sub	sp, #64	; 0x40
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ae56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10a      	bne.n	800ae72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae6e:	bf00      	nop
 800ae70:	e7fe      	b.n	800ae70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d103      	bne.n	800ae80 <xQueueGenericSendFromISR+0x3c>
 800ae78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <xQueueGenericSendFromISR+0x40>
 800ae80:	2301      	movs	r3, #1
 800ae82:	e000      	b.n	800ae86 <xQueueGenericSendFromISR+0x42>
 800ae84:	2300      	movs	r3, #0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10a      	bne.n	800aea0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d103      	bne.n	800aeae <xQueueGenericSendFromISR+0x6a>
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d101      	bne.n	800aeb2 <xQueueGenericSendFromISR+0x6e>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e000      	b.n	800aeb4 <xQueueGenericSendFromISR+0x70>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10a      	bne.n	800aece <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	623b      	str	r3, [r7, #32]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aece:	f001 fbd3 	bl	800c678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aed2:	f3ef 8211 	mrs	r2, BASEPRI
 800aed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	61fa      	str	r2, [r7, #28]
 800aee8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aeea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aeec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d302      	bcc.n	800af00 <xQueueGenericSendFromISR+0xbc>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d12f      	bne.n	800af60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	68b9      	ldr	r1, [r7, #8]
 800af14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af16:	f000 f991 	bl	800b23c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800af1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af22:	d112      	bne.n	800af4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d016      	beq.n	800af5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	3324      	adds	r3, #36	; 0x24
 800af30:	4618      	mov	r0, r3
 800af32:	f000 fecb 	bl	800bccc <xTaskRemoveFromEventList>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00e      	beq.n	800af5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00b      	beq.n	800af5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	e007      	b.n	800af5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af4e:	3301      	adds	r3, #1
 800af50:	b2db      	uxtb	r3, r3
 800af52:	b25a      	sxtb	r2, r3
 800af54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af5a:	2301      	movs	r3, #1
 800af5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800af5e:	e001      	b.n	800af64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af60:	2300      	movs	r3, #0
 800af62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af72:	4618      	mov	r0, r3
 800af74:	3740      	adds	r7, #64	; 0x40
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08c      	sub	sp, #48	; 0x30
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800af88:	2300      	movs	r3, #0
 800af8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10a      	bne.n	800afac <xQueueReceive+0x30>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	623b      	str	r3, [r7, #32]
}
 800afa8:	bf00      	nop
 800afaa:	e7fe      	b.n	800afaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d103      	bne.n	800afba <xQueueReceive+0x3e>
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <xQueueReceive+0x42>
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <xQueueReceive+0x44>
 800afbe:	2300      	movs	r3, #0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <xQueueReceive+0x5e>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	61fb      	str	r3, [r7, #28]
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afda:	f001 f835 	bl	800c048 <xTaskGetSchedulerState>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d102      	bne.n	800afea <xQueueReceive+0x6e>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <xQueueReceive+0x72>
 800afea:	2301      	movs	r3, #1
 800afec:	e000      	b.n	800aff0 <xQueueReceive+0x74>
 800afee:	2300      	movs	r3, #0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <xQueueReceive+0x8e>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	61bb      	str	r3, [r7, #24]
}
 800b006:	bf00      	nop
 800b008:	e7fe      	b.n	800b008 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b00a:	f001 fa53 	bl	800c4b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b012:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	2b00      	cmp	r3, #0
 800b018:	d01f      	beq.n	800b05a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b01a:	68b9      	ldr	r1, [r7, #8]
 800b01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b01e:	f000 f977 	bl	800b310 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b024:	1e5a      	subs	r2, r3, #1
 800b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b028:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00f      	beq.n	800b052 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b034:	3310      	adds	r3, #16
 800b036:	4618      	mov	r0, r3
 800b038:	f000 fe48 	bl	800bccc <xTaskRemoveFromEventList>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d007      	beq.n	800b052 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b042:	4b3d      	ldr	r3, [pc, #244]	; (800b138 <xQueueReceive+0x1bc>)
 800b044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b052:	f001 fa5f 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 800b056:	2301      	movs	r3, #1
 800b058:	e069      	b.n	800b12e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d103      	bne.n	800b068 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b060:	f001 fa58 	bl	800c514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b064:	2300      	movs	r3, #0
 800b066:	e062      	b.n	800b12e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d106      	bne.n	800b07c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b06e:	f107 0310 	add.w	r3, r7, #16
 800b072:	4618      	mov	r0, r3
 800b074:	f000 fe8c 	bl	800bd90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b078:	2301      	movs	r3, #1
 800b07a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b07c:	f001 fa4a 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b080:	f000 fc1e 	bl	800b8c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b084:	f001 fa16 	bl	800c4b4 <vPortEnterCritical>
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b08e:	b25b      	sxtb	r3, r3
 800b090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b094:	d103      	bne.n	800b09e <xQueueReceive+0x122>
 800b096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0a4:	b25b      	sxtb	r3, r3
 800b0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0aa:	d103      	bne.n	800b0b4 <xQueueReceive+0x138>
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0b4:	f001 fa2e 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0b8:	1d3a      	adds	r2, r7, #4
 800b0ba:	f107 0310 	add.w	r3, r7, #16
 800b0be:	4611      	mov	r1, r2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 fe7b 	bl	800bdbc <xTaskCheckForTimeOut>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d123      	bne.n	800b114 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ce:	f000 f997 	bl	800b400 <prvIsQueueEmpty>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d017      	beq.n	800b108 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0da:	3324      	adds	r3, #36	; 0x24
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	4611      	mov	r1, r2
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 fdcf 	bl	800bc84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b0e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0e8:	f000 f938 	bl	800b35c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0ec:	f000 fbf6 	bl	800b8dc <xTaskResumeAll>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d189      	bne.n	800b00a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b0f6:	4b10      	ldr	r3, [pc, #64]	; (800b138 <xQueueReceive+0x1bc>)
 800b0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	e780      	b.n	800b00a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b10a:	f000 f927 	bl	800b35c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b10e:	f000 fbe5 	bl	800b8dc <xTaskResumeAll>
 800b112:	e77a      	b.n	800b00a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b116:	f000 f921 	bl	800b35c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b11a:	f000 fbdf 	bl	800b8dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b120:	f000 f96e 	bl	800b400 <prvIsQueueEmpty>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	f43f af6f 	beq.w	800b00a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b12c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3730      	adds	r7, #48	; 0x30
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	e000ed04 	.word	0xe000ed04

0800b13c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08e      	sub	sp, #56	; 0x38
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	623b      	str	r3, [r7, #32]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d103      	bne.n	800b176 <xQueueReceiveFromISR+0x3a>
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <xQueueReceiveFromISR+0x3e>
 800b176:	2301      	movs	r3, #1
 800b178:	e000      	b.n	800b17c <xQueueReceiveFromISR+0x40>
 800b17a:	2300      	movs	r3, #0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10a      	bne.n	800b196 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	61fb      	str	r3, [r7, #28]
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b196:	f001 fa6f 	bl	800c678 <vPortValidateInterruptPriority>
	__asm volatile
 800b19a:	f3ef 8211 	mrs	r2, BASEPRI
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	61ba      	str	r2, [r7, #24]
 800b1b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b1b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d02f      	beq.n	800b222 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1cc:	68b9      	ldr	r1, [r7, #8]
 800b1ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1d0:	f000 f89e 	bl	800b310 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	1e5a      	subs	r2, r3, #1
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b1dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e4:	d112      	bne.n	800b20c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d016      	beq.n	800b21c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	3310      	adds	r3, #16
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 fd6a 	bl	800bccc <xTaskRemoveFromEventList>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00e      	beq.n	800b21c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00b      	beq.n	800b21c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	e007      	b.n	800b21c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b210:	3301      	adds	r3, #1
 800b212:	b2db      	uxtb	r3, r3
 800b214:	b25a      	sxtb	r2, r3
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b21c:	2301      	movs	r3, #1
 800b21e:	637b      	str	r3, [r7, #52]	; 0x34
 800b220:	e001      	b.n	800b226 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b222:	2300      	movs	r3, #0
 800b224:	637b      	str	r3, [r7, #52]	; 0x34
 800b226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b228:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	f383 8811 	msr	BASEPRI, r3
}
 800b230:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b234:	4618      	mov	r0, r3
 800b236:	3738      	adds	r7, #56	; 0x38
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b248:	2300      	movs	r3, #0
 800b24a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b250:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10d      	bne.n	800b276 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d14d      	bne.n	800b2fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	4618      	mov	r0, r3
 800b268:	f000 ff0c 	bl	800c084 <xTaskPriorityDisinherit>
 800b26c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	609a      	str	r2, [r3, #8]
 800b274:	e043      	b.n	800b2fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d119      	bne.n	800b2b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6858      	ldr	r0, [r3, #4]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b284:	461a      	mov	r2, r3
 800b286:	68b9      	ldr	r1, [r7, #8]
 800b288:	f001 ff66 	bl	800d158 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	685a      	ldr	r2, [r3, #4]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b294:	441a      	add	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d32b      	bcc.n	800b2fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	605a      	str	r2, [r3, #4]
 800b2ae:	e026      	b.n	800b2fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	68d8      	ldr	r0, [r3, #12]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	f001 ff4c 	bl	800d158 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	68da      	ldr	r2, [r3, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c8:	425b      	negs	r3, r3
 800b2ca:	441a      	add	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	68da      	ldr	r2, [r3, #12]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d207      	bcs.n	800b2ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e4:	425b      	negs	r3, r3
 800b2e6:	441a      	add	r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d105      	bne.n	800b2fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	1c5a      	adds	r2, r3, #1
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b306:	697b      	ldr	r3, [r7, #20]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d018      	beq.n	800b354 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	68da      	ldr	r2, [r3, #12]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32a:	441a      	add	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68da      	ldr	r2, [r3, #12]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d303      	bcc.n	800b344 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68d9      	ldr	r1, [r3, #12]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34c:	461a      	mov	r2, r3
 800b34e:	6838      	ldr	r0, [r7, #0]
 800b350:	f001 ff02 	bl	800d158 <memcpy>
	}
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b364:	f001 f8a6 	bl	800c4b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b36e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b370:	e011      	b.n	800b396 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	d012      	beq.n	800b3a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3324      	adds	r3, #36	; 0x24
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fca4 	bl	800bccc <xTaskRemoveFromEventList>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b38a:	f000 fd79 	bl	800be80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	3b01      	subs	r3, #1
 800b392:	b2db      	uxtb	r3, r3
 800b394:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	dce9      	bgt.n	800b372 <prvUnlockQueue+0x16>
 800b39e:	e000      	b.n	800b3a2 <prvUnlockQueue+0x46>
					break;
 800b3a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	22ff      	movs	r2, #255	; 0xff
 800b3a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3aa:	f001 f8b3 	bl	800c514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3ae:	f001 f881 	bl	800c4b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3ba:	e011      	b.n	800b3e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d012      	beq.n	800b3ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3310      	adds	r3, #16
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f000 fc7f 	bl	800bccc <xTaskRemoveFromEventList>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d001      	beq.n	800b3d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3d4:	f000 fd54 	bl	800be80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3d8:	7bbb      	ldrb	r3, [r7, #14]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dce9      	bgt.n	800b3bc <prvUnlockQueue+0x60>
 800b3e8:	e000      	b.n	800b3ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	22ff      	movs	r2, #255	; 0xff
 800b3f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3f4:	f001 f88e 	bl	800c514 <vPortExitCritical>
}
 800b3f8:	bf00      	nop
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b408:	f001 f854 	bl	800c4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b414:	2301      	movs	r3, #1
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	e001      	b.n	800b41e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b41e:	f001 f879 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800b422:	68fb      	ldr	r3, [r7, #12]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b434:	f001 f83e 	bl	800c4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b440:	429a      	cmp	r2, r3
 800b442:	d102      	bne.n	800b44a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b444:	2301      	movs	r3, #1
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	e001      	b.n	800b44e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b44e:	f001 f861 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800b452:	68fb      	ldr	r3, [r7, #12]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08e      	sub	sp, #56	; 0x38
 800b460:	af04      	add	r7, sp, #16
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10a      	bne.n	800b486 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	623b      	str	r3, [r7, #32]
}
 800b482:	bf00      	nop
 800b484:	e7fe      	b.n	800b484 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10a      	bne.n	800b4a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	61fb      	str	r3, [r7, #28]
}
 800b49e:	bf00      	nop
 800b4a0:	e7fe      	b.n	800b4a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4a2:	2358      	movs	r3, #88	; 0x58
 800b4a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	2b58      	cmp	r3, #88	; 0x58
 800b4aa:	d00a      	beq.n	800b4c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	61bb      	str	r3, [r7, #24]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d01e      	beq.n	800b508 <xTaskCreateStatic+0xac>
 800b4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d01b      	beq.n	800b508 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	2202      	movs	r2, #2
 800b4de:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	9303      	str	r3, [sp, #12]
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	9302      	str	r3, [sp, #8]
 800b4ea:	f107 0314 	add.w	r3, r7, #20
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	68b9      	ldr	r1, [r7, #8]
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 f850 	bl	800b5a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b502:	f000 f8df 	bl	800b6c4 <prvAddNewTaskToReadyList>
 800b506:	e001      	b.n	800b50c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b508:	2300      	movs	r3, #0
 800b50a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b50c:	697b      	ldr	r3, [r7, #20]
	}
 800b50e:	4618      	mov	r0, r3
 800b510:	3728      	adds	r7, #40	; 0x28
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b516:	b580      	push	{r7, lr}
 800b518:	b08c      	sub	sp, #48	; 0x30
 800b51a:	af04      	add	r7, sp, #16
 800b51c:	60f8      	str	r0, [r7, #12]
 800b51e:	60b9      	str	r1, [r7, #8]
 800b520:	603b      	str	r3, [r7, #0]
 800b522:	4613      	mov	r3, r2
 800b524:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4618      	mov	r0, r3
 800b52c:	f001 f8e4 	bl	800c6f8 <pvPortMalloc>
 800b530:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00e      	beq.n	800b556 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b538:	2058      	movs	r0, #88	; 0x58
 800b53a:	f001 f8dd 	bl	800c6f8 <pvPortMalloc>
 800b53e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d003      	beq.n	800b54e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	631a      	str	r2, [r3, #48]	; 0x30
 800b54c:	e005      	b.n	800b55a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b54e:	6978      	ldr	r0, [r7, #20]
 800b550:	f001 f9a2 	bl	800c898 <vPortFree>
 800b554:	e001      	b.n	800b55a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b556:	2300      	movs	r3, #0
 800b558:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d017      	beq.n	800b590 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b568:	88fa      	ldrh	r2, [r7, #6]
 800b56a:	2300      	movs	r3, #0
 800b56c:	9303      	str	r3, [sp, #12]
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	9302      	str	r3, [sp, #8]
 800b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b574:	9301      	str	r3, [sp, #4]
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	68b9      	ldr	r1, [r7, #8]
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f000 f80e 	bl	800b5a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b584:	69f8      	ldr	r0, [r7, #28]
 800b586:	f000 f89d 	bl	800b6c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b58a:	2301      	movs	r3, #1
 800b58c:	61bb      	str	r3, [r7, #24]
 800b58e:	e002      	b.n	800b596 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b590:	f04f 33ff 	mov.w	r3, #4294967295
 800b594:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b596:	69bb      	ldr	r3, [r7, #24]
	}
 800b598:	4618      	mov	r0, r3
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	21a5      	movs	r1, #165	; 0xa5
 800b5ba:	f001 fddb 	bl	800d174 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4413      	add	r3, r2
 800b5ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	f023 0307 	bic.w	r3, r3, #7
 800b5d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	f003 0307 	and.w	r3, r3, #7
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00a      	beq.n	800b5f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	617b      	str	r3, [r7, #20]
}
 800b5f4:	bf00      	nop
 800b5f6:	e7fe      	b.n	800b5f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d01f      	beq.n	800b63e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5fe:	2300      	movs	r3, #0
 800b600:	61fb      	str	r3, [r7, #28]
 800b602:	e012      	b.n	800b62a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	4413      	add	r3, r2
 800b60a:	7819      	ldrb	r1, [r3, #0]
 800b60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	4413      	add	r3, r2
 800b612:	3334      	adds	r3, #52	; 0x34
 800b614:	460a      	mov	r2, r1
 800b616:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	4413      	add	r3, r2
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d006      	beq.n	800b632 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	3301      	adds	r3, #1
 800b628:	61fb      	str	r3, [r7, #28]
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	2b0f      	cmp	r3, #15
 800b62e:	d9e9      	bls.n	800b604 <prvInitialiseNewTask+0x64>
 800b630:	e000      	b.n	800b634 <prvInitialiseNewTask+0x94>
			{
				break;
 800b632:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b63c:	e003      	b.n	800b646 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b648:	2b06      	cmp	r3, #6
 800b64a:	d901      	bls.n	800b650 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b64c:	2306      	movs	r3, #6
 800b64e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b654:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b65a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	2200      	movs	r2, #0
 800b660:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	3304      	adds	r3, #4
 800b666:	4618      	mov	r0, r3
 800b668:	f7ff f920 	bl	800a8ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	3318      	adds	r3, #24
 800b670:	4618      	mov	r0, r3
 800b672:	f7ff f91b 	bl	800a8ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b67a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67e:	f1c3 0207 	rsb	r2, r3, #7
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b68a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	2200      	movs	r2, #0
 800b690:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	2200      	movs	r2, #0
 800b696:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	68f9      	ldr	r1, [r7, #12]
 800b6a4:	69b8      	ldr	r0, [r7, #24]
 800b6a6:	f000 fdd9 	bl	800c25c <pxPortInitialiseStack>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d002      	beq.n	800b6bc <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6bc:	bf00      	nop
 800b6be:	3720      	adds	r7, #32
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6cc:	f000 fef2 	bl	800c4b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6d0:	4b2a      	ldr	r3, [pc, #168]	; (800b77c <prvAddNewTaskToReadyList+0xb8>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	4a29      	ldr	r2, [pc, #164]	; (800b77c <prvAddNewTaskToReadyList+0xb8>)
 800b6d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6da:	4b29      	ldr	r3, [pc, #164]	; (800b780 <prvAddNewTaskToReadyList+0xbc>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d109      	bne.n	800b6f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6e2:	4a27      	ldr	r2, [pc, #156]	; (800b780 <prvAddNewTaskToReadyList+0xbc>)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6e8:	4b24      	ldr	r3, [pc, #144]	; (800b77c <prvAddNewTaskToReadyList+0xb8>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d110      	bne.n	800b712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b6f0:	f000 fbec 	bl	800becc <prvInitialiseTaskLists>
 800b6f4:	e00d      	b.n	800b712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6f6:	4b23      	ldr	r3, [pc, #140]	; (800b784 <prvAddNewTaskToReadyList+0xc0>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d109      	bne.n	800b712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6fe:	4b20      	ldr	r3, [pc, #128]	; (800b780 <prvAddNewTaskToReadyList+0xbc>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	429a      	cmp	r2, r3
 800b70a:	d802      	bhi.n	800b712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b70c:	4a1c      	ldr	r2, [pc, #112]	; (800b780 <prvAddNewTaskToReadyList+0xbc>)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b712:	4b1d      	ldr	r3, [pc, #116]	; (800b788 <prvAddNewTaskToReadyList+0xc4>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3301      	adds	r3, #1
 800b718:	4a1b      	ldr	r2, [pc, #108]	; (800b788 <prvAddNewTaskToReadyList+0xc4>)
 800b71a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b720:	2201      	movs	r2, #1
 800b722:	409a      	lsls	r2, r3
 800b724:	4b19      	ldr	r3, [pc, #100]	; (800b78c <prvAddNewTaskToReadyList+0xc8>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4313      	orrs	r3, r2
 800b72a:	4a18      	ldr	r2, [pc, #96]	; (800b78c <prvAddNewTaskToReadyList+0xc8>)
 800b72c:	6013      	str	r3, [r2, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b732:	4613      	mov	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	4413      	add	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4a15      	ldr	r2, [pc, #84]	; (800b790 <prvAddNewTaskToReadyList+0xcc>)
 800b73c:	441a      	add	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3304      	adds	r3, #4
 800b742:	4619      	mov	r1, r3
 800b744:	4610      	mov	r0, r2
 800b746:	f7ff f8be 	bl	800a8c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b74a:	f000 fee3 	bl	800c514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b74e:	4b0d      	ldr	r3, [pc, #52]	; (800b784 <prvAddNewTaskToReadyList+0xc0>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00e      	beq.n	800b774 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b756:	4b0a      	ldr	r3, [pc, #40]	; (800b780 <prvAddNewTaskToReadyList+0xbc>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	429a      	cmp	r2, r3
 800b762:	d207      	bcs.n	800b774 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b764:	4b0b      	ldr	r3, [pc, #44]	; (800b794 <prvAddNewTaskToReadyList+0xd0>)
 800b766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b76a:	601a      	str	r2, [r3, #0]
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	20000720 	.word	0x20000720
 800b780:	20000620 	.word	0x20000620
 800b784:	2000072c 	.word	0x2000072c
 800b788:	2000073c 	.word	0x2000073c
 800b78c:	20000728 	.word	0x20000728
 800b790:	20000624 	.word	0x20000624
 800b794:	e000ed04 	.word	0xe000ed04

0800b798 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d017      	beq.n	800b7da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7aa:	4b13      	ldr	r3, [pc, #76]	; (800b7f8 <vTaskDelay+0x60>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00a      	beq.n	800b7c8 <vTaskDelay+0x30>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	60bb      	str	r3, [r7, #8]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7c8:	f000 f87a 	bl	800b8c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fcde 	bl	800c190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7d4:	f000 f882 	bl	800b8dc <xTaskResumeAll>
 800b7d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d107      	bne.n	800b7f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b7e0:	4b06      	ldr	r3, [pc, #24]	; (800b7fc <vTaskDelay+0x64>)
 800b7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7f0:	bf00      	nop
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	20000748 	.word	0x20000748
 800b7fc:	e000ed04 	.word	0xe000ed04

0800b800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08a      	sub	sp, #40	; 0x28
 800b804:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b806:	2300      	movs	r3, #0
 800b808:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b80e:	463a      	mov	r2, r7
 800b810:	1d39      	adds	r1, r7, #4
 800b812:	f107 0308 	add.w	r3, r7, #8
 800b816:	4618      	mov	r0, r3
 800b818:	f7f4 fe86 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	9202      	str	r2, [sp, #8]
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	2300      	movs	r3, #0
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	2300      	movs	r3, #0
 800b82c:	460a      	mov	r2, r1
 800b82e:	491e      	ldr	r1, [pc, #120]	; (800b8a8 <vTaskStartScheduler+0xa8>)
 800b830:	481e      	ldr	r0, [pc, #120]	; (800b8ac <vTaskStartScheduler+0xac>)
 800b832:	f7ff fe13 	bl	800b45c <xTaskCreateStatic>
 800b836:	4603      	mov	r3, r0
 800b838:	4a1d      	ldr	r2, [pc, #116]	; (800b8b0 <vTaskStartScheduler+0xb0>)
 800b83a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b83c:	4b1c      	ldr	r3, [pc, #112]	; (800b8b0 <vTaskStartScheduler+0xb0>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b844:	2301      	movs	r3, #1
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	e001      	b.n	800b84e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d116      	bne.n	800b882 <vTaskStartScheduler+0x82>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	613b      	str	r3, [r7, #16]
}
 800b866:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b868:	4b12      	ldr	r3, [pc, #72]	; (800b8b4 <vTaskStartScheduler+0xb4>)
 800b86a:	f04f 32ff 	mov.w	r2, #4294967295
 800b86e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b870:	4b11      	ldr	r3, [pc, #68]	; (800b8b8 <vTaskStartScheduler+0xb8>)
 800b872:	2201      	movs	r2, #1
 800b874:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b876:	4b11      	ldr	r3, [pc, #68]	; (800b8bc <vTaskStartScheduler+0xbc>)
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b87c:	f000 fd78 	bl	800c370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b880:	e00e      	b.n	800b8a0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b888:	d10a      	bne.n	800b8a0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	60fb      	str	r3, [r7, #12]
}
 800b89c:	bf00      	nop
 800b89e:	e7fe      	b.n	800b89e <vTaskStartScheduler+0x9e>
}
 800b8a0:	bf00      	nop
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	0800d41c 	.word	0x0800d41c
 800b8ac:	0800be99 	.word	0x0800be99
 800b8b0:	20000744 	.word	0x20000744
 800b8b4:	20000740 	.word	0x20000740
 800b8b8:	2000072c 	.word	0x2000072c
 800b8bc:	20000724 	.word	0x20000724

0800b8c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8c4:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <vTaskSuspendAll+0x18>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	4a03      	ldr	r2, [pc, #12]	; (800b8d8 <vTaskSuspendAll+0x18>)
 800b8cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8ce:	bf00      	nop
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	20000748 	.word	0x20000748

0800b8dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8ea:	4b41      	ldr	r3, [pc, #260]	; (800b9f0 <xTaskResumeAll+0x114>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10a      	bne.n	800b908 <xTaskResumeAll+0x2c>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	603b      	str	r3, [r7, #0]
}
 800b904:	bf00      	nop
 800b906:	e7fe      	b.n	800b906 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b908:	f000 fdd4 	bl	800c4b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b90c:	4b38      	ldr	r3, [pc, #224]	; (800b9f0 <xTaskResumeAll+0x114>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3b01      	subs	r3, #1
 800b912:	4a37      	ldr	r2, [pc, #220]	; (800b9f0 <xTaskResumeAll+0x114>)
 800b914:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b916:	4b36      	ldr	r3, [pc, #216]	; (800b9f0 <xTaskResumeAll+0x114>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d161      	bne.n	800b9e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b91e:	4b35      	ldr	r3, [pc, #212]	; (800b9f4 <xTaskResumeAll+0x118>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d05d      	beq.n	800b9e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b926:	e02e      	b.n	800b986 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b928:	4b33      	ldr	r3, [pc, #204]	; (800b9f8 <xTaskResumeAll+0x11c>)
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3318      	adds	r3, #24
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff f823 	bl	800a980 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3304      	adds	r3, #4
 800b93e:	4618      	mov	r0, r3
 800b940:	f7ff f81e 	bl	800a980 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b948:	2201      	movs	r2, #1
 800b94a:	409a      	lsls	r2, r3
 800b94c:	4b2b      	ldr	r3, [pc, #172]	; (800b9fc <xTaskResumeAll+0x120>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4313      	orrs	r3, r2
 800b952:	4a2a      	ldr	r2, [pc, #168]	; (800b9fc <xTaskResumeAll+0x120>)
 800b954:	6013      	str	r3, [r2, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95a:	4613      	mov	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	4413      	add	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4a27      	ldr	r2, [pc, #156]	; (800ba00 <xTaskResumeAll+0x124>)
 800b964:	441a      	add	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	3304      	adds	r3, #4
 800b96a:	4619      	mov	r1, r3
 800b96c:	4610      	mov	r0, r2
 800b96e:	f7fe ffaa 	bl	800a8c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b976:	4b23      	ldr	r3, [pc, #140]	; (800ba04 <xTaskResumeAll+0x128>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d302      	bcc.n	800b986 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b980:	4b21      	ldr	r3, [pc, #132]	; (800ba08 <xTaskResumeAll+0x12c>)
 800b982:	2201      	movs	r2, #1
 800b984:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b986:	4b1c      	ldr	r3, [pc, #112]	; (800b9f8 <xTaskResumeAll+0x11c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1cc      	bne.n	800b928 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b994:	f000 fb38 	bl	800c008 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b998:	4b1c      	ldr	r3, [pc, #112]	; (800ba0c <xTaskResumeAll+0x130>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d010      	beq.n	800b9c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9a4:	f000 f836 	bl	800ba14 <xTaskIncrementTick>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b9ae:	4b16      	ldr	r3, [pc, #88]	; (800ba08 <xTaskResumeAll+0x12c>)
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1f1      	bne.n	800b9a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b9c0:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <xTaskResumeAll+0x130>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9c6:	4b10      	ldr	r3, [pc, #64]	; (800ba08 <xTaskResumeAll+0x12c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d009      	beq.n	800b9e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ba10 <xTaskResumeAll+0x134>)
 800b9d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9d8:	601a      	str	r2, [r3, #0]
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9e2:	f000 fd97 	bl	800c514 <vPortExitCritical>

	return xAlreadyYielded;
 800b9e6:	68bb      	ldr	r3, [r7, #8]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	20000748 	.word	0x20000748
 800b9f4:	20000720 	.word	0x20000720
 800b9f8:	200006e0 	.word	0x200006e0
 800b9fc:	20000728 	.word	0x20000728
 800ba00:	20000624 	.word	0x20000624
 800ba04:	20000620 	.word	0x20000620
 800ba08:	20000734 	.word	0x20000734
 800ba0c:	20000730 	.word	0x20000730
 800ba10:	e000ed04 	.word	0xe000ed04

0800ba14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba1e:	4b4e      	ldr	r3, [pc, #312]	; (800bb58 <xTaskIncrementTick+0x144>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f040 808e 	bne.w	800bb44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba28:	4b4c      	ldr	r3, [pc, #304]	; (800bb5c <xTaskIncrementTick+0x148>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba30:	4a4a      	ldr	r2, [pc, #296]	; (800bb5c <xTaskIncrementTick+0x148>)
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d120      	bne.n	800ba7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba3c:	4b48      	ldr	r3, [pc, #288]	; (800bb60 <xTaskIncrementTick+0x14c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00a      	beq.n	800ba5c <xTaskIncrementTick+0x48>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	603b      	str	r3, [r7, #0]
}
 800ba58:	bf00      	nop
 800ba5a:	e7fe      	b.n	800ba5a <xTaskIncrementTick+0x46>
 800ba5c:	4b40      	ldr	r3, [pc, #256]	; (800bb60 <xTaskIncrementTick+0x14c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	60fb      	str	r3, [r7, #12]
 800ba62:	4b40      	ldr	r3, [pc, #256]	; (800bb64 <xTaskIncrementTick+0x150>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a3e      	ldr	r2, [pc, #248]	; (800bb60 <xTaskIncrementTick+0x14c>)
 800ba68:	6013      	str	r3, [r2, #0]
 800ba6a:	4a3e      	ldr	r2, [pc, #248]	; (800bb64 <xTaskIncrementTick+0x150>)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6013      	str	r3, [r2, #0]
 800ba70:	4b3d      	ldr	r3, [pc, #244]	; (800bb68 <xTaskIncrementTick+0x154>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3301      	adds	r3, #1
 800ba76:	4a3c      	ldr	r2, [pc, #240]	; (800bb68 <xTaskIncrementTick+0x154>)
 800ba78:	6013      	str	r3, [r2, #0]
 800ba7a:	f000 fac5 	bl	800c008 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba7e:	4b3b      	ldr	r3, [pc, #236]	; (800bb6c <xTaskIncrementTick+0x158>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	693a      	ldr	r2, [r7, #16]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d348      	bcc.n	800bb1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba88:	4b35      	ldr	r3, [pc, #212]	; (800bb60 <xTaskIncrementTick+0x14c>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d104      	bne.n	800ba9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba92:	4b36      	ldr	r3, [pc, #216]	; (800bb6c <xTaskIncrementTick+0x158>)
 800ba94:	f04f 32ff 	mov.w	r2, #4294967295
 800ba98:	601a      	str	r2, [r3, #0]
					break;
 800ba9a:	e03e      	b.n	800bb1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba9c:	4b30      	ldr	r3, [pc, #192]	; (800bb60 <xTaskIncrementTick+0x14c>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d203      	bcs.n	800babc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bab4:	4a2d      	ldr	r2, [pc, #180]	; (800bb6c <xTaskIncrementTick+0x158>)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800baba:	e02e      	b.n	800bb1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	3304      	adds	r3, #4
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe ff5d 	bl	800a980 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d004      	beq.n	800bad8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	3318      	adds	r3, #24
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe ff54 	bl	800a980 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	2201      	movs	r2, #1
 800bade:	409a      	lsls	r2, r3
 800bae0:	4b23      	ldr	r3, [pc, #140]	; (800bb70 <xTaskIncrementTick+0x15c>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	4a22      	ldr	r2, [pc, #136]	; (800bb70 <xTaskIncrementTick+0x15c>)
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	4613      	mov	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4413      	add	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4a1f      	ldr	r2, [pc, #124]	; (800bb74 <xTaskIncrementTick+0x160>)
 800baf8:	441a      	add	r2, r3
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	3304      	adds	r3, #4
 800bafe:	4619      	mov	r1, r3
 800bb00:	4610      	mov	r0, r2
 800bb02:	f7fe fee0 	bl	800a8c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0a:	4b1b      	ldr	r3, [pc, #108]	; (800bb78 <xTaskIncrementTick+0x164>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d3b9      	bcc.n	800ba88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb14:	2301      	movs	r3, #1
 800bb16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb18:	e7b6      	b.n	800ba88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb1a:	4b17      	ldr	r3, [pc, #92]	; (800bb78 <xTaskIncrementTick+0x164>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb20:	4914      	ldr	r1, [pc, #80]	; (800bb74 <xTaskIncrementTick+0x160>)
 800bb22:	4613      	mov	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	440b      	add	r3, r1
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d901      	bls.n	800bb36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bb32:	2301      	movs	r3, #1
 800bb34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb36:	4b11      	ldr	r3, [pc, #68]	; (800bb7c <xTaskIncrementTick+0x168>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d007      	beq.n	800bb4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	617b      	str	r3, [r7, #20]
 800bb42:	e004      	b.n	800bb4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb44:	4b0e      	ldr	r3, [pc, #56]	; (800bb80 <xTaskIncrementTick+0x16c>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	4a0d      	ldr	r2, [pc, #52]	; (800bb80 <xTaskIncrementTick+0x16c>)
 800bb4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb4e:	697b      	ldr	r3, [r7, #20]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3718      	adds	r7, #24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	20000748 	.word	0x20000748
 800bb5c:	20000724 	.word	0x20000724
 800bb60:	200006d8 	.word	0x200006d8
 800bb64:	200006dc 	.word	0x200006dc
 800bb68:	20000738 	.word	0x20000738
 800bb6c:	20000740 	.word	0x20000740
 800bb70:	20000728 	.word	0x20000728
 800bb74:	20000624 	.word	0x20000624
 800bb78:	20000620 	.word	0x20000620
 800bb7c:	20000734 	.word	0x20000734
 800bb80:	20000730 	.word	0x20000730

0800bb84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb8a:	4b39      	ldr	r3, [pc, #228]	; (800bc70 <vTaskSwitchContext+0xec>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d003      	beq.n	800bb9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb92:	4b38      	ldr	r3, [pc, #224]	; (800bc74 <vTaskSwitchContext+0xf0>)
 800bb94:	2201      	movs	r2, #1
 800bb96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb98:	e066      	b.n	800bc68 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800bb9a:	4b36      	ldr	r3, [pc, #216]	; (800bc74 <vTaskSwitchContext+0xf0>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bba0:	4b35      	ldr	r3, [pc, #212]	; (800bc78 <vTaskSwitchContext+0xf4>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba6:	61fb      	str	r3, [r7, #28]
 800bba8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800bbac:	61bb      	str	r3, [r7, #24]
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	69ba      	ldr	r2, [r7, #24]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d111      	bne.n	800bbdc <vTaskSwitchContext+0x58>
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	69ba      	ldr	r2, [r7, #24]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d10b      	bne.n	800bbdc <vTaskSwitchContext+0x58>
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	69ba      	ldr	r2, [r7, #24]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d105      	bne.n	800bbdc <vTaskSwitchContext+0x58>
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	330c      	adds	r3, #12
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69ba      	ldr	r2, [r7, #24]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d008      	beq.n	800bbee <vTaskSwitchContext+0x6a>
 800bbdc:	4b26      	ldr	r3, [pc, #152]	; (800bc78 <vTaskSwitchContext+0xf4>)
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	4b25      	ldr	r3, [pc, #148]	; (800bc78 <vTaskSwitchContext+0xf4>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3334      	adds	r3, #52	; 0x34
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	4610      	mov	r0, r2
 800bbea:	f7f4 fc8a 	bl	8000502 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbee:	4b23      	ldr	r3, [pc, #140]	; (800bc7c <vTaskSwitchContext+0xf8>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	fab3 f383 	clz	r3, r3
 800bbfa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bbfc:	7afb      	ldrb	r3, [r7, #11]
 800bbfe:	f1c3 031f 	rsb	r3, r3, #31
 800bc02:	617b      	str	r3, [r7, #20]
 800bc04:	491e      	ldr	r1, [pc, #120]	; (800bc80 <vTaskSwitchContext+0xfc>)
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	440b      	add	r3, r1
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10a      	bne.n	800bc2e <vTaskSwitchContext+0xaa>
	__asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	607b      	str	r3, [r7, #4]
}
 800bc2a:	bf00      	nop
 800bc2c:	e7fe      	b.n	800bc2c <vTaskSwitchContext+0xa8>
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	4613      	mov	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4a11      	ldr	r2, [pc, #68]	; (800bc80 <vTaskSwitchContext+0xfc>)
 800bc3a:	4413      	add	r3, r2
 800bc3c:	613b      	str	r3, [r7, #16]
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	605a      	str	r2, [r3, #4]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	3308      	adds	r3, #8
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d104      	bne.n	800bc5e <vTaskSwitchContext+0xda>
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	605a      	str	r2, [r3, #4]
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	4a04      	ldr	r2, [pc, #16]	; (800bc78 <vTaskSwitchContext+0xf4>)
 800bc66:	6013      	str	r3, [r2, #0]
}
 800bc68:	bf00      	nop
 800bc6a:	3720      	adds	r7, #32
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	20000748 	.word	0x20000748
 800bc74:	20000734 	.word	0x20000734
 800bc78:	20000620 	.word	0x20000620
 800bc7c:	20000728 	.word	0x20000728
 800bc80:	20000624 	.word	0x20000624

0800bc84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10a      	bne.n	800bcaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	60fb      	str	r3, [r7, #12]
}
 800bca6:	bf00      	nop
 800bca8:	e7fe      	b.n	800bca8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcaa:	4b07      	ldr	r3, [pc, #28]	; (800bcc8 <vTaskPlaceOnEventList+0x44>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3318      	adds	r3, #24
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7fe fe2b 	bl	800a90e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bcb8:	2101      	movs	r1, #1
 800bcba:	6838      	ldr	r0, [r7, #0]
 800bcbc:	f000 fa68 	bl	800c190 <prvAddCurrentTaskToDelayedList>
}
 800bcc0:	bf00      	nop
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	20000620 	.word	0x20000620

0800bccc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	60fb      	str	r3, [r7, #12]
}
 800bcf4:	bf00      	nop
 800bcf6:	e7fe      	b.n	800bcf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	3318      	adds	r3, #24
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fe fe3f 	bl	800a980 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd02:	4b1d      	ldr	r3, [pc, #116]	; (800bd78 <xTaskRemoveFromEventList+0xac>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d11c      	bne.n	800bd44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe fe36 	bl	800a980 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd18:	2201      	movs	r2, #1
 800bd1a:	409a      	lsls	r2, r3
 800bd1c:	4b17      	ldr	r3, [pc, #92]	; (800bd7c <xTaskRemoveFromEventList+0xb0>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	4a16      	ldr	r2, [pc, #88]	; (800bd7c <xTaskRemoveFromEventList+0xb0>)
 800bd24:	6013      	str	r3, [r2, #0]
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4a13      	ldr	r2, [pc, #76]	; (800bd80 <xTaskRemoveFromEventList+0xb4>)
 800bd34:	441a      	add	r2, r3
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f7fe fdc2 	bl	800a8c6 <vListInsertEnd>
 800bd42:	e005      	b.n	800bd50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	3318      	adds	r3, #24
 800bd48:	4619      	mov	r1, r3
 800bd4a:	480e      	ldr	r0, [pc, #56]	; (800bd84 <xTaskRemoveFromEventList+0xb8>)
 800bd4c:	f7fe fdbb 	bl	800a8c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd54:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <xTaskRemoveFromEventList+0xbc>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d905      	bls.n	800bd6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd62:	4b0a      	ldr	r3, [pc, #40]	; (800bd8c <xTaskRemoveFromEventList+0xc0>)
 800bd64:	2201      	movs	r2, #1
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	e001      	b.n	800bd6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd6e:	697b      	ldr	r3, [r7, #20]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	20000748 	.word	0x20000748
 800bd7c:	20000728 	.word	0x20000728
 800bd80:	20000624 	.word	0x20000624
 800bd84:	200006e0 	.word	0x200006e0
 800bd88:	20000620 	.word	0x20000620
 800bd8c:	20000734 	.word	0x20000734

0800bd90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd98:	4b06      	ldr	r3, [pc, #24]	; (800bdb4 <vTaskInternalSetTimeOutState+0x24>)
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bda0:	4b05      	ldr	r3, [pc, #20]	; (800bdb8 <vTaskInternalSetTimeOutState+0x28>)
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	605a      	str	r2, [r3, #4]
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	20000738 	.word	0x20000738
 800bdb8:	20000724 	.word	0x20000724

0800bdbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b088      	sub	sp, #32
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10a      	bne.n	800bde2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	613b      	str	r3, [r7, #16]
}
 800bdde:	bf00      	nop
 800bde0:	e7fe      	b.n	800bde0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10a      	bne.n	800bdfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdec:	f383 8811 	msr	BASEPRI, r3
 800bdf0:	f3bf 8f6f 	isb	sy
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	60fb      	str	r3, [r7, #12]
}
 800bdfa:	bf00      	nop
 800bdfc:	e7fe      	b.n	800bdfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bdfe:	f000 fb59 	bl	800c4b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be02:	4b1d      	ldr	r3, [pc, #116]	; (800be78 <xTaskCheckForTimeOut+0xbc>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	69ba      	ldr	r2, [r7, #24]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1a:	d102      	bne.n	800be22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be1c:	2300      	movs	r3, #0
 800be1e:	61fb      	str	r3, [r7, #28]
 800be20:	e023      	b.n	800be6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	4b15      	ldr	r3, [pc, #84]	; (800be7c <xTaskCheckForTimeOut+0xc0>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d007      	beq.n	800be3e <xTaskCheckForTimeOut+0x82>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	69ba      	ldr	r2, [r7, #24]
 800be34:	429a      	cmp	r2, r3
 800be36:	d302      	bcc.n	800be3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be38:	2301      	movs	r3, #1
 800be3a:	61fb      	str	r3, [r7, #28]
 800be3c:	e015      	b.n	800be6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	429a      	cmp	r2, r3
 800be46:	d20b      	bcs.n	800be60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	1ad2      	subs	r2, r2, r3
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff ff9b 	bl	800bd90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be5a:	2300      	movs	r3, #0
 800be5c:	61fb      	str	r3, [r7, #28]
 800be5e:	e004      	b.n	800be6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be66:	2301      	movs	r3, #1
 800be68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be6a:	f000 fb53 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800be6e:	69fb      	ldr	r3, [r7, #28]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3720      	adds	r7, #32
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	20000724 	.word	0x20000724
 800be7c:	20000738 	.word	0x20000738

0800be80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be80:	b480      	push	{r7}
 800be82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be84:	4b03      	ldr	r3, [pc, #12]	; (800be94 <vTaskMissedYield+0x14>)
 800be86:	2201      	movs	r2, #1
 800be88:	601a      	str	r2, [r3, #0]
}
 800be8a:	bf00      	nop
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	20000734 	.word	0x20000734

0800be98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bea0:	f000 f854 	bl	800bf4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bea4:	4b07      	ldr	r3, [pc, #28]	; (800bec4 <prvIdleTask+0x2c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d907      	bls.n	800bebc <prvIdleTask+0x24>
			{
				taskYIELD();
 800beac:	4b06      	ldr	r3, [pc, #24]	; (800bec8 <prvIdleTask+0x30>)
 800beae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800bebc:	f7f4 fb1a 	bl	80004f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bec0:	e7ee      	b.n	800bea0 <prvIdleTask+0x8>
 800bec2:	bf00      	nop
 800bec4:	20000624 	.word	0x20000624
 800bec8:	e000ed04 	.word	0xe000ed04

0800becc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bed2:	2300      	movs	r3, #0
 800bed4:	607b      	str	r3, [r7, #4]
 800bed6:	e00c      	b.n	800bef2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	4613      	mov	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4a12      	ldr	r2, [pc, #72]	; (800bf2c <prvInitialiseTaskLists+0x60>)
 800bee4:	4413      	add	r3, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe fcc0 	bl	800a86c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	3301      	adds	r3, #1
 800bef0:	607b      	str	r3, [r7, #4]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b06      	cmp	r3, #6
 800bef6:	d9ef      	bls.n	800bed8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bef8:	480d      	ldr	r0, [pc, #52]	; (800bf30 <prvInitialiseTaskLists+0x64>)
 800befa:	f7fe fcb7 	bl	800a86c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800befe:	480d      	ldr	r0, [pc, #52]	; (800bf34 <prvInitialiseTaskLists+0x68>)
 800bf00:	f7fe fcb4 	bl	800a86c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf04:	480c      	ldr	r0, [pc, #48]	; (800bf38 <prvInitialiseTaskLists+0x6c>)
 800bf06:	f7fe fcb1 	bl	800a86c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf0a:	480c      	ldr	r0, [pc, #48]	; (800bf3c <prvInitialiseTaskLists+0x70>)
 800bf0c:	f7fe fcae 	bl	800a86c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf10:	480b      	ldr	r0, [pc, #44]	; (800bf40 <prvInitialiseTaskLists+0x74>)
 800bf12:	f7fe fcab 	bl	800a86c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <prvInitialiseTaskLists+0x78>)
 800bf18:	4a05      	ldr	r2, [pc, #20]	; (800bf30 <prvInitialiseTaskLists+0x64>)
 800bf1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf1c:	4b0a      	ldr	r3, [pc, #40]	; (800bf48 <prvInitialiseTaskLists+0x7c>)
 800bf1e:	4a05      	ldr	r2, [pc, #20]	; (800bf34 <prvInitialiseTaskLists+0x68>)
 800bf20:	601a      	str	r2, [r3, #0]
}
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20000624 	.word	0x20000624
 800bf30:	200006b0 	.word	0x200006b0
 800bf34:	200006c4 	.word	0x200006c4
 800bf38:	200006e0 	.word	0x200006e0
 800bf3c:	200006f4 	.word	0x200006f4
 800bf40:	2000070c 	.word	0x2000070c
 800bf44:	200006d8 	.word	0x200006d8
 800bf48:	200006dc 	.word	0x200006dc

0800bf4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf52:	e019      	b.n	800bf88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf54:	f000 faae 	bl	800c4b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf58:	4b10      	ldr	r3, [pc, #64]	; (800bf9c <prvCheckTasksWaitingTermination+0x50>)
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3304      	adds	r3, #4
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fe fd0b 	bl	800a980 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf6a:	4b0d      	ldr	r3, [pc, #52]	; (800bfa0 <prvCheckTasksWaitingTermination+0x54>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	4a0b      	ldr	r2, [pc, #44]	; (800bfa0 <prvCheckTasksWaitingTermination+0x54>)
 800bf72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf74:	4b0b      	ldr	r3, [pc, #44]	; (800bfa4 <prvCheckTasksWaitingTermination+0x58>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	4a0a      	ldr	r2, [pc, #40]	; (800bfa4 <prvCheckTasksWaitingTermination+0x58>)
 800bf7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf7e:	f000 fac9 	bl	800c514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f810 	bl	800bfa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf88:	4b06      	ldr	r3, [pc, #24]	; (800bfa4 <prvCheckTasksWaitingTermination+0x58>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1e1      	bne.n	800bf54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf90:	bf00      	nop
 800bf92:	bf00      	nop
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	200006f4 	.word	0x200006f4
 800bfa0:	20000720 	.word	0x20000720
 800bfa4:	20000708 	.word	0x20000708

0800bfa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d108      	bne.n	800bfcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 fc6a 	bl	800c898 <vPortFree>
				vPortFree( pxTCB );
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fc67 	bl	800c898 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bfca:	e018      	b.n	800bffe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d103      	bne.n	800bfde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fc5e 	bl	800c898 <vPortFree>
	}
 800bfdc:	e00f      	b.n	800bffe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d00a      	beq.n	800bffe <prvDeleteTCB+0x56>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	60fb      	str	r3, [r7, #12]
}
 800bffa:	bf00      	nop
 800bffc:	e7fe      	b.n	800bffc <prvDeleteTCB+0x54>
	}
 800bffe:	bf00      	nop
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
	...

0800c008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c00e:	4b0c      	ldr	r3, [pc, #48]	; (800c040 <prvResetNextTaskUnblockTime+0x38>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d104      	bne.n	800c022 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c018:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <prvResetNextTaskUnblockTime+0x3c>)
 800c01a:	f04f 32ff 	mov.w	r2, #4294967295
 800c01e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c020:	e008      	b.n	800c034 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c022:	4b07      	ldr	r3, [pc, #28]	; (800c040 <prvResetNextTaskUnblockTime+0x38>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	4a04      	ldr	r2, [pc, #16]	; (800c044 <prvResetNextTaskUnblockTime+0x3c>)
 800c032:	6013      	str	r3, [r2, #0]
}
 800c034:	bf00      	nop
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	200006d8 	.word	0x200006d8
 800c044:	20000740 	.word	0x20000740

0800c048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c04e:	4b0b      	ldr	r3, [pc, #44]	; (800c07c <xTaskGetSchedulerState+0x34>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d102      	bne.n	800c05c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c056:	2301      	movs	r3, #1
 800c058:	607b      	str	r3, [r7, #4]
 800c05a:	e008      	b.n	800c06e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c05c:	4b08      	ldr	r3, [pc, #32]	; (800c080 <xTaskGetSchedulerState+0x38>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d102      	bne.n	800c06a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c064:	2302      	movs	r3, #2
 800c066:	607b      	str	r3, [r7, #4]
 800c068:	e001      	b.n	800c06e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c06a:	2300      	movs	r3, #0
 800c06c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c06e:	687b      	ldr	r3, [r7, #4]
	}
 800c070:	4618      	mov	r0, r3
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	2000072c 	.word	0x2000072c
 800c080:	20000748 	.word	0x20000748

0800c084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c090:	2300      	movs	r3, #0
 800c092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d06e      	beq.n	800c178 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c09a:	4b3a      	ldr	r3, [pc, #232]	; (800c184 <xTaskPriorityDisinherit+0x100>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d00a      	beq.n	800c0ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	60fb      	str	r3, [r7, #12]
}
 800c0b6:	bf00      	nop
 800c0b8:	e7fe      	b.n	800c0b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10a      	bne.n	800c0d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	60bb      	str	r3, [r7, #8]
}
 800c0d4:	bf00      	nop
 800c0d6:	e7fe      	b.n	800c0d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0dc:	1e5a      	subs	r2, r3, #1
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d044      	beq.n	800c178 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d140      	bne.n	800c178 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fc40 	bl	800a980 <uxListRemove>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d115      	bne.n	800c132 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10a:	491f      	ldr	r1, [pc, #124]	; (800c188 <xTaskPriorityDisinherit+0x104>)
 800c10c:	4613      	mov	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4413      	add	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	440b      	add	r3, r1
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10a      	bne.n	800c132 <xTaskPriorityDisinherit+0xae>
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	2201      	movs	r2, #1
 800c122:	fa02 f303 	lsl.w	r3, r2, r3
 800c126:	43da      	mvns	r2, r3
 800c128:	4b18      	ldr	r3, [pc, #96]	; (800c18c <xTaskPriorityDisinherit+0x108>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4013      	ands	r3, r2
 800c12e:	4a17      	ldr	r2, [pc, #92]	; (800c18c <xTaskPriorityDisinherit+0x108>)
 800c130:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13e:	f1c3 0207 	rsb	r2, r3, #7
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14a:	2201      	movs	r2, #1
 800c14c:	409a      	lsls	r2, r3
 800c14e:	4b0f      	ldr	r3, [pc, #60]	; (800c18c <xTaskPriorityDisinherit+0x108>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4313      	orrs	r3, r2
 800c154:	4a0d      	ldr	r2, [pc, #52]	; (800c18c <xTaskPriorityDisinherit+0x108>)
 800c156:	6013      	str	r3, [r2, #0]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c15c:	4613      	mov	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4413      	add	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4a08      	ldr	r2, [pc, #32]	; (800c188 <xTaskPriorityDisinherit+0x104>)
 800c166:	441a      	add	r2, r3
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4619      	mov	r1, r3
 800c16e:	4610      	mov	r0, r2
 800c170:	f7fe fba9 	bl	800a8c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c174:	2301      	movs	r3, #1
 800c176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c178:	697b      	ldr	r3, [r7, #20]
	}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3718      	adds	r7, #24
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	20000620 	.word	0x20000620
 800c188:	20000624 	.word	0x20000624
 800c18c:	20000728 	.word	0x20000728

0800c190 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c19a:	4b29      	ldr	r3, [pc, #164]	; (800c240 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1a0:	4b28      	ldr	r3, [pc, #160]	; (800c244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3304      	adds	r3, #4
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe fbea 	bl	800a980 <uxListRemove>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10b      	bne.n	800c1ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c1b2:	4b24      	ldr	r3, [pc, #144]	; (800c244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c1be:	43da      	mvns	r2, r3
 800c1c0:	4b21      	ldr	r3, [pc, #132]	; (800c248 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	4a20      	ldr	r2, [pc, #128]	; (800c248 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c1c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d0:	d10a      	bne.n	800c1e8 <prvAddCurrentTaskToDelayedList+0x58>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d007      	beq.n	800c1e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1d8:	4b1a      	ldr	r3, [pc, #104]	; (800c244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4619      	mov	r1, r3
 800c1e0:	481a      	ldr	r0, [pc, #104]	; (800c24c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c1e2:	f7fe fb70 	bl	800a8c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1e6:	e026      	b.n	800c236 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1f0:	4b14      	ldr	r3, [pc, #80]	; (800c244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d209      	bcs.n	800c214 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c200:	4b13      	ldr	r3, [pc, #76]	; (800c250 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	4b0f      	ldr	r3, [pc, #60]	; (800c244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	3304      	adds	r3, #4
 800c20a:	4619      	mov	r1, r3
 800c20c:	4610      	mov	r0, r2
 800c20e:	f7fe fb7e 	bl	800a90e <vListInsert>
}
 800c212:	e010      	b.n	800c236 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c214:	4b0f      	ldr	r3, [pc, #60]	; (800c254 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	4b0a      	ldr	r3, [pc, #40]	; (800c244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	3304      	adds	r3, #4
 800c21e:	4619      	mov	r1, r3
 800c220:	4610      	mov	r0, r2
 800c222:	f7fe fb74 	bl	800a90e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c226:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d202      	bcs.n	800c236 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c230:	4a09      	ldr	r2, [pc, #36]	; (800c258 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	6013      	str	r3, [r2, #0]
}
 800c236:	bf00      	nop
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20000724 	.word	0x20000724
 800c244:	20000620 	.word	0x20000620
 800c248:	20000728 	.word	0x20000728
 800c24c:	2000070c 	.word	0x2000070c
 800c250:	200006dc 	.word	0x200006dc
 800c254:	200006d8 	.word	0x200006d8
 800c258:	20000740 	.word	0x20000740

0800c25c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3b04      	subs	r3, #4
 800c26c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3b04      	subs	r3, #4
 800c27a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	f023 0201 	bic.w	r2, r3, #1
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	3b04      	subs	r3, #4
 800c28a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c28c:	4a0c      	ldr	r2, [pc, #48]	; (800c2c0 <pxPortInitialiseStack+0x64>)
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3b14      	subs	r3, #20
 800c296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3b04      	subs	r3, #4
 800c2a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f06f 0202 	mvn.w	r2, #2
 800c2aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3b20      	subs	r3, #32
 800c2b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	0800c2c5 	.word	0x0800c2c5

0800c2c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c2ce:	4b12      	ldr	r3, [pc, #72]	; (800c318 <prvTaskExitError+0x54>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d6:	d00a      	beq.n	800c2ee <prvTaskExitError+0x2a>
	__asm volatile
 800c2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	60fb      	str	r3, [r7, #12]
}
 800c2ea:	bf00      	nop
 800c2ec:	e7fe      	b.n	800c2ec <prvTaskExitError+0x28>
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	60bb      	str	r3, [r7, #8]
}
 800c300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c302:	bf00      	nop
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0fc      	beq.n	800c304 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c30a:	bf00      	nop
 800c30c:	bf00      	nop
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	2000002c 	.word	0x2000002c
 800c31c:	00000000 	.word	0x00000000

0800c320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c320:	4b07      	ldr	r3, [pc, #28]	; (800c340 <pxCurrentTCBConst2>)
 800c322:	6819      	ldr	r1, [r3, #0]
 800c324:	6808      	ldr	r0, [r1, #0]
 800c326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32a:	f380 8809 	msr	PSP, r0
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f04f 0000 	mov.w	r0, #0
 800c336:	f380 8811 	msr	BASEPRI, r0
 800c33a:	4770      	bx	lr
 800c33c:	f3af 8000 	nop.w

0800c340 <pxCurrentTCBConst2>:
 800c340:	20000620 	.word	0x20000620
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c344:	bf00      	nop
 800c346:	bf00      	nop

0800c348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c348:	4808      	ldr	r0, [pc, #32]	; (800c36c <prvPortStartFirstTask+0x24>)
 800c34a:	6800      	ldr	r0, [r0, #0]
 800c34c:	6800      	ldr	r0, [r0, #0]
 800c34e:	f380 8808 	msr	MSP, r0
 800c352:	f04f 0000 	mov.w	r0, #0
 800c356:	f380 8814 	msr	CONTROL, r0
 800c35a:	b662      	cpsie	i
 800c35c:	b661      	cpsie	f
 800c35e:	f3bf 8f4f 	dsb	sy
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	df00      	svc	0
 800c368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c36a:	bf00      	nop
 800c36c:	e000ed08 	.word	0xe000ed08

0800c370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c376:	4b46      	ldr	r3, [pc, #280]	; (800c490 <xPortStartScheduler+0x120>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a46      	ldr	r2, [pc, #280]	; (800c494 <xPortStartScheduler+0x124>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d10a      	bne.n	800c396 <xPortStartScheduler+0x26>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	613b      	str	r3, [r7, #16]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c396:	4b3e      	ldr	r3, [pc, #248]	; (800c490 <xPortStartScheduler+0x120>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a3f      	ldr	r2, [pc, #252]	; (800c498 <xPortStartScheduler+0x128>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d10a      	bne.n	800c3b6 <xPortStartScheduler+0x46>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	60fb      	str	r3, [r7, #12]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3b6:	4b39      	ldr	r3, [pc, #228]	; (800c49c <xPortStartScheduler+0x12c>)
 800c3b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	22ff      	movs	r2, #255	; 0xff
 800c3c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3d0:	78fb      	ldrb	r3, [r7, #3]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	4b31      	ldr	r3, [pc, #196]	; (800c4a0 <xPortStartScheduler+0x130>)
 800c3dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3de:	4b31      	ldr	r3, [pc, #196]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c3e0:	2207      	movs	r2, #7
 800c3e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3e4:	e009      	b.n	800c3fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c3e6:	4b2f      	ldr	r3, [pc, #188]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	4a2d      	ldr	r2, [pc, #180]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c3ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3fa:	78fb      	ldrb	r3, [r7, #3]
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c402:	2b80      	cmp	r3, #128	; 0x80
 800c404:	d0ef      	beq.n	800c3e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c406:	4b27      	ldr	r3, [pc, #156]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f1c3 0307 	rsb	r3, r3, #7
 800c40e:	2b04      	cmp	r3, #4
 800c410:	d00a      	beq.n	800c428 <xPortStartScheduler+0xb8>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	60bb      	str	r3, [r7, #8]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c428:	4b1e      	ldr	r3, [pc, #120]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	021b      	lsls	r3, r3, #8
 800c42e:	4a1d      	ldr	r2, [pc, #116]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c432:	4b1c      	ldr	r3, [pc, #112]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c43a:	4a1a      	ldr	r2, [pc, #104]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c43c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	b2da      	uxtb	r2, r3
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c446:	4b18      	ldr	r3, [pc, #96]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a17      	ldr	r2, [pc, #92]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c44c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c452:	4b15      	ldr	r3, [pc, #84]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a14      	ldr	r2, [pc, #80]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c45c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c45e:	f000 f8dd 	bl	800c61c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c462:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <xPortStartScheduler+0x13c>)
 800c464:	2200      	movs	r2, #0
 800c466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c468:	f000 f8fc 	bl	800c664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c46c:	4b10      	ldr	r3, [pc, #64]	; (800c4b0 <xPortStartScheduler+0x140>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a0f      	ldr	r2, [pc, #60]	; (800c4b0 <xPortStartScheduler+0x140>)
 800c472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c478:	f7ff ff66 	bl	800c348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c47c:	f7ff fb82 	bl	800bb84 <vTaskSwitchContext>
	prvTaskExitError();
 800c480:	f7ff ff20 	bl	800c2c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	e000ed00 	.word	0xe000ed00
 800c494:	410fc271 	.word	0x410fc271
 800c498:	410fc270 	.word	0x410fc270
 800c49c:	e000e400 	.word	0xe000e400
 800c4a0:	2000074c 	.word	0x2000074c
 800c4a4:	20000750 	.word	0x20000750
 800c4a8:	e000ed20 	.word	0xe000ed20
 800c4ac:	2000002c 	.word	0x2000002c
 800c4b0:	e000ef34 	.word	0xe000ef34

0800c4b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	607b      	str	r3, [r7, #4]
}
 800c4cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c4ce:	4b0f      	ldr	r3, [pc, #60]	; (800c50c <vPortEnterCritical+0x58>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	4a0d      	ldr	r2, [pc, #52]	; (800c50c <vPortEnterCritical+0x58>)
 800c4d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c4d8:	4b0c      	ldr	r3, [pc, #48]	; (800c50c <vPortEnterCritical+0x58>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d10f      	bne.n	800c500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c4e0:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <vPortEnterCritical+0x5c>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00a      	beq.n	800c500 <vPortEnterCritical+0x4c>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	603b      	str	r3, [r7, #0]
}
 800c4fc:	bf00      	nop
 800c4fe:	e7fe      	b.n	800c4fe <vPortEnterCritical+0x4a>
	}
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	2000002c 	.word	0x2000002c
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c51a:	4b12      	ldr	r3, [pc, #72]	; (800c564 <vPortExitCritical+0x50>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10a      	bne.n	800c538 <vPortExitCritical+0x24>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	607b      	str	r3, [r7, #4]
}
 800c534:	bf00      	nop
 800c536:	e7fe      	b.n	800c536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <vPortExitCritical+0x50>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	4a09      	ldr	r2, [pc, #36]	; (800c564 <vPortExitCritical+0x50>)
 800c540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c542:	4b08      	ldr	r3, [pc, #32]	; (800c564 <vPortExitCritical+0x50>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d105      	bne.n	800c556 <vPortExitCritical+0x42>
 800c54a:	2300      	movs	r3, #0
 800c54c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	f383 8811 	msr	BASEPRI, r3
}
 800c554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c556:	bf00      	nop
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	2000002c 	.word	0x2000002c
	...

0800c570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c570:	f3ef 8009 	mrs	r0, PSP
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <pxCurrentTCBConst>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	f01e 0f10 	tst.w	lr, #16
 800c580:	bf08      	it	eq
 800c582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58a:	6010      	str	r0, [r2, #0]
 800c58c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c590:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c594:	f380 8811 	msr	BASEPRI, r0
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f7ff faf0 	bl	800bb84 <vTaskSwitchContext>
 800c5a4:	f04f 0000 	mov.w	r0, #0
 800c5a8:	f380 8811 	msr	BASEPRI, r0
 800c5ac:	bc09      	pop	{r0, r3}
 800c5ae:	6819      	ldr	r1, [r3, #0]
 800c5b0:	6808      	ldr	r0, [r1, #0]
 800c5b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b6:	f01e 0f10 	tst.w	lr, #16
 800c5ba:	bf08      	it	eq
 800c5bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5c0:	f380 8809 	msr	PSP, r0
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	f3af 8000 	nop.w

0800c5d0 <pxCurrentTCBConst>:
 800c5d0:	20000620 	.word	0x20000620
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop

0800c5d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	607b      	str	r3, [r7, #4]
}
 800c5f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c5f2:	f7ff fa0f 	bl	800ba14 <xTaskIncrementTick>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c5fc:	4b06      	ldr	r3, [pc, #24]	; (800c618 <SysTick_Handler+0x40>)
 800c5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	2300      	movs	r3, #0
 800c606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	f383 8811 	msr	BASEPRI, r3
}
 800c60e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	e000ed04 	.word	0xe000ed04

0800c61c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c61c:	b480      	push	{r7}
 800c61e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <vPortSetupTimerInterrupt+0x34>)
 800c622:	2200      	movs	r2, #0
 800c624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c626:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <vPortSetupTimerInterrupt+0x38>)
 800c628:	2200      	movs	r2, #0
 800c62a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c62c:	4b0a      	ldr	r3, [pc, #40]	; (800c658 <vPortSetupTimerInterrupt+0x3c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a0a      	ldr	r2, [pc, #40]	; (800c65c <vPortSetupTimerInterrupt+0x40>)
 800c632:	fba2 2303 	umull	r2, r3, r2, r3
 800c636:	099b      	lsrs	r3, r3, #6
 800c638:	4a09      	ldr	r2, [pc, #36]	; (800c660 <vPortSetupTimerInterrupt+0x44>)
 800c63a:	3b01      	subs	r3, #1
 800c63c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c63e:	4b04      	ldr	r3, [pc, #16]	; (800c650 <vPortSetupTimerInterrupt+0x34>)
 800c640:	2207      	movs	r2, #7
 800c642:	601a      	str	r2, [r3, #0]
}
 800c644:	bf00      	nop
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	e000e010 	.word	0xe000e010
 800c654:	e000e018 	.word	0xe000e018
 800c658:	20000000 	.word	0x20000000
 800c65c:	10624dd3 	.word	0x10624dd3
 800c660:	e000e014 	.word	0xe000e014

0800c664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c674 <vPortEnableVFP+0x10>
 800c668:	6801      	ldr	r1, [r0, #0]
 800c66a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c66e:	6001      	str	r1, [r0, #0]
 800c670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c672:	bf00      	nop
 800c674:	e000ed88 	.word	0xe000ed88

0800c678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c67e:	f3ef 8305 	mrs	r3, IPSR
 800c682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b0f      	cmp	r3, #15
 800c688:	d914      	bls.n	800c6b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c68a:	4a17      	ldr	r2, [pc, #92]	; (800c6e8 <vPortValidateInterruptPriority+0x70>)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4413      	add	r3, r2
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c694:	4b15      	ldr	r3, [pc, #84]	; (800c6ec <vPortValidateInterruptPriority+0x74>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	7afa      	ldrb	r2, [r7, #11]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d20a      	bcs.n	800c6b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	607b      	str	r3, [r7, #4]
}
 800c6b0:	bf00      	nop
 800c6b2:	e7fe      	b.n	800c6b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c6b4:	4b0e      	ldr	r3, [pc, #56]	; (800c6f0 <vPortValidateInterruptPriority+0x78>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c6bc:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <vPortValidateInterruptPriority+0x7c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d90a      	bls.n	800c6da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	603b      	str	r3, [r7, #0]
}
 800c6d6:	bf00      	nop
 800c6d8:	e7fe      	b.n	800c6d8 <vPortValidateInterruptPriority+0x60>
	}
 800c6da:	bf00      	nop
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	e000e3f0 	.word	0xe000e3f0
 800c6ec:	2000074c 	.word	0x2000074c
 800c6f0:	e000ed0c 	.word	0xe000ed0c
 800c6f4:	20000750 	.word	0x20000750

0800c6f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b08a      	sub	sp, #40	; 0x28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c700:	2300      	movs	r3, #0
 800c702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c704:	f7ff f8dc 	bl	800b8c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c708:	4b5d      	ldr	r3, [pc, #372]	; (800c880 <pvPortMalloc+0x188>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d101      	bne.n	800c714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c710:	f000 f924 	bl	800c95c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c714:	4b5b      	ldr	r3, [pc, #364]	; (800c884 <pvPortMalloc+0x18c>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4013      	ands	r3, r2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f040 8093 	bne.w	800c848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d01d      	beq.n	800c764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c728:	2208      	movs	r2, #8
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4413      	add	r3, r2
 800c72e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f003 0307 	and.w	r3, r3, #7
 800c736:	2b00      	cmp	r3, #0
 800c738:	d014      	beq.n	800c764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f023 0307 	bic.w	r3, r3, #7
 800c740:	3308      	adds	r3, #8
 800c742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f003 0307 	and.w	r3, r3, #7
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00a      	beq.n	800c764 <pvPortMalloc+0x6c>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	617b      	str	r3, [r7, #20]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d06e      	beq.n	800c848 <pvPortMalloc+0x150>
 800c76a:	4b47      	ldr	r3, [pc, #284]	; (800c888 <pvPortMalloc+0x190>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	429a      	cmp	r2, r3
 800c772:	d869      	bhi.n	800c848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c774:	4b45      	ldr	r3, [pc, #276]	; (800c88c <pvPortMalloc+0x194>)
 800c776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c778:	4b44      	ldr	r3, [pc, #272]	; (800c88c <pvPortMalloc+0x194>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c77e:	e004      	b.n	800c78a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	429a      	cmp	r2, r3
 800c792:	d903      	bls.n	800c79c <pvPortMalloc+0xa4>
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1f1      	bne.n	800c780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c79c:	4b38      	ldr	r3, [pc, #224]	; (800c880 <pvPortMalloc+0x188>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d050      	beq.n	800c848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2208      	movs	r2, #8
 800c7ac:	4413      	add	r3, r2
 800c7ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	2308      	movs	r3, #8
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d91f      	bls.n	800c808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	613b      	str	r3, [r7, #16]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	1ad2      	subs	r2, r2, r3
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c802:	69b8      	ldr	r0, [r7, #24]
 800c804:	f000 f90c 	bl	800ca20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c808:	4b1f      	ldr	r3, [pc, #124]	; (800c888 <pvPortMalloc+0x190>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	4a1d      	ldr	r2, [pc, #116]	; (800c888 <pvPortMalloc+0x190>)
 800c814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c816:	4b1c      	ldr	r3, [pc, #112]	; (800c888 <pvPortMalloc+0x190>)
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	4b1d      	ldr	r3, [pc, #116]	; (800c890 <pvPortMalloc+0x198>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d203      	bcs.n	800c82a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c822:	4b19      	ldr	r3, [pc, #100]	; (800c888 <pvPortMalloc+0x190>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a1a      	ldr	r2, [pc, #104]	; (800c890 <pvPortMalloc+0x198>)
 800c828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	4b15      	ldr	r3, [pc, #84]	; (800c884 <pvPortMalloc+0x18c>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	431a      	orrs	r2, r3
 800c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c83e:	4b15      	ldr	r3, [pc, #84]	; (800c894 <pvPortMalloc+0x19c>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3301      	adds	r3, #1
 800c844:	4a13      	ldr	r2, [pc, #76]	; (800c894 <pvPortMalloc+0x19c>)
 800c846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c848:	f7ff f848 	bl	800b8dc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d101      	bne.n	800c856 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c852:	f7f3 fe61 	bl	8000518 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	f003 0307 	and.w	r3, r3, #7
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00a      	beq.n	800c876 <pvPortMalloc+0x17e>
	__asm volatile
 800c860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	60fb      	str	r3, [r7, #12]
}
 800c872:	bf00      	nop
 800c874:	e7fe      	b.n	800c874 <pvPortMalloc+0x17c>
	return pvReturn;
 800c876:	69fb      	ldr	r3, [r7, #28]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3728      	adds	r7, #40	; 0x28
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	2000875c 	.word	0x2000875c
 800c884:	20008770 	.word	0x20008770
 800c888:	20008760 	.word	0x20008760
 800c88c:	20008754 	.word	0x20008754
 800c890:	20008764 	.word	0x20008764
 800c894:	20008768 	.word	0x20008768

0800c898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d04d      	beq.n	800c946 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8aa:	2308      	movs	r3, #8
 800c8ac:	425b      	negs	r3, r3
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	685a      	ldr	r2, [r3, #4]
 800c8bc:	4b24      	ldr	r3, [pc, #144]	; (800c950 <vPortFree+0xb8>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4013      	ands	r3, r2
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10a      	bne.n	800c8dc <vPortFree+0x44>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	60fb      	str	r3, [r7, #12]
}
 800c8d8:	bf00      	nop
 800c8da:	e7fe      	b.n	800c8da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d00a      	beq.n	800c8fa <vPortFree+0x62>
	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	60bb      	str	r3, [r7, #8]
}
 800c8f6:	bf00      	nop
 800c8f8:	e7fe      	b.n	800c8f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	4b14      	ldr	r3, [pc, #80]	; (800c950 <vPortFree+0xb8>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4013      	ands	r3, r2
 800c904:	2b00      	cmp	r3, #0
 800c906:	d01e      	beq.n	800c946 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d11a      	bne.n	800c946 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	4b0e      	ldr	r3, [pc, #56]	; (800c950 <vPortFree+0xb8>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	43db      	mvns	r3, r3
 800c91a:	401a      	ands	r2, r3
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c920:	f7fe ffce 	bl	800b8c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	685a      	ldr	r2, [r3, #4]
 800c928:	4b0a      	ldr	r3, [pc, #40]	; (800c954 <vPortFree+0xbc>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4413      	add	r3, r2
 800c92e:	4a09      	ldr	r2, [pc, #36]	; (800c954 <vPortFree+0xbc>)
 800c930:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c932:	6938      	ldr	r0, [r7, #16]
 800c934:	f000 f874 	bl	800ca20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c938:	4b07      	ldr	r3, [pc, #28]	; (800c958 <vPortFree+0xc0>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3301      	adds	r3, #1
 800c93e:	4a06      	ldr	r2, [pc, #24]	; (800c958 <vPortFree+0xc0>)
 800c940:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c942:	f7fe ffcb 	bl	800b8dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c946:	bf00      	nop
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	20008770 	.word	0x20008770
 800c954:	20008760 	.word	0x20008760
 800c958:	2000876c 	.word	0x2000876c

0800c95c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c966:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c968:	4b27      	ldr	r3, [pc, #156]	; (800ca08 <prvHeapInit+0xac>)
 800c96a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f003 0307 	and.w	r3, r3, #7
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00c      	beq.n	800c990 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	3307      	adds	r3, #7
 800c97a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f023 0307 	bic.w	r3, r3, #7
 800c982:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	4a1f      	ldr	r2, [pc, #124]	; (800ca08 <prvHeapInit+0xac>)
 800c98c:	4413      	add	r3, r2
 800c98e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c994:	4a1d      	ldr	r2, [pc, #116]	; (800ca0c <prvHeapInit+0xb0>)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c99a:	4b1c      	ldr	r3, [pc, #112]	; (800ca0c <prvHeapInit+0xb0>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9a8:	2208      	movs	r2, #8
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	1a9b      	subs	r3, r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f023 0307 	bic.w	r3, r3, #7
 800c9b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4a15      	ldr	r2, [pc, #84]	; (800ca10 <prvHeapInit+0xb4>)
 800c9bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9be:	4b14      	ldr	r3, [pc, #80]	; (800ca10 <prvHeapInit+0xb4>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9c6:	4b12      	ldr	r3, [pc, #72]	; (800ca10 <prvHeapInit+0xb4>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	1ad2      	subs	r2, r2, r3
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9dc:	4b0c      	ldr	r3, [pc, #48]	; (800ca10 <prvHeapInit+0xb4>)
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	4a0a      	ldr	r2, [pc, #40]	; (800ca14 <prvHeapInit+0xb8>)
 800c9ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	4a09      	ldr	r2, [pc, #36]	; (800ca18 <prvHeapInit+0xbc>)
 800c9f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9f4:	4b09      	ldr	r3, [pc, #36]	; (800ca1c <prvHeapInit+0xc0>)
 800c9f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c9fa:	601a      	str	r2, [r3, #0]
}
 800c9fc:	bf00      	nop
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	20000754 	.word	0x20000754
 800ca0c:	20008754 	.word	0x20008754
 800ca10:	2000875c 	.word	0x2000875c
 800ca14:	20008764 	.word	0x20008764
 800ca18:	20008760 	.word	0x20008760
 800ca1c:	20008770 	.word	0x20008770

0800ca20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca28:	4b28      	ldr	r3, [pc, #160]	; (800cacc <prvInsertBlockIntoFreeList+0xac>)
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	e002      	b.n	800ca34 <prvInsertBlockIntoFreeList+0x14>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d8f7      	bhi.n	800ca2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	4413      	add	r3, r2
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d108      	bne.n	800ca62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	441a      	add	r2, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	441a      	add	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d118      	bne.n	800caa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	4b15      	ldr	r3, [pc, #84]	; (800cad0 <prvInsertBlockIntoFreeList+0xb0>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d00d      	beq.n	800ca9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685a      	ldr	r2, [r3, #4]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	441a      	add	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	e008      	b.n	800cab0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	; (800cad0 <prvInsertBlockIntoFreeList+0xb0>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	e003      	b.n	800cab0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d002      	beq.n	800cabe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cabe:	bf00      	nop
 800cac0:	3714      	adds	r7, #20
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	20008754 	.word	0x20008754
 800cad0:	2000875c 	.word	0x2000875c

0800cad4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800cad8:	2200      	movs	r2, #0
 800cada:	490e      	ldr	r1, [pc, #56]	; (800cb14 <MX_USB_HOST_Init+0x40>)
 800cadc:	480e      	ldr	r0, [pc, #56]	; (800cb18 <MX_USB_HOST_Init+0x44>)
 800cade:	f7fb fed3 	bl	8008888 <USBH_Init>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cae8:	f7f4 f9b2 	bl	8000e50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800caec:	490b      	ldr	r1, [pc, #44]	; (800cb1c <MX_USB_HOST_Init+0x48>)
 800caee:	480a      	ldr	r0, [pc, #40]	; (800cb18 <MX_USB_HOST_Init+0x44>)
 800caf0:	f7fb ff80 	bl	80089f4 <USBH_RegisterClass>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cafa:	f7f4 f9a9 	bl	8000e50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800cafe:	4806      	ldr	r0, [pc, #24]	; (800cb18 <MX_USB_HOST_Init+0x44>)
 800cb00:	f7fc f804 	bl	8008b0c <USBH_Start>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cb0a:	f7f4 f9a1 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cb0e:	bf00      	nop
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	0800cb21 	.word	0x0800cb21
 800cb18:	20008774 	.word	0x20008774
 800cb1c:	2000000c 	.word	0x2000000c

0800cb20 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cb2c:	78fb      	ldrb	r3, [r7, #3]
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	2b04      	cmp	r3, #4
 800cb32:	d819      	bhi.n	800cb68 <USBH_UserProcess+0x48>
 800cb34:	a201      	add	r2, pc, #4	; (adr r2, 800cb3c <USBH_UserProcess+0x1c>)
 800cb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3a:	bf00      	nop
 800cb3c:	0800cb69 	.word	0x0800cb69
 800cb40:	0800cb59 	.word	0x0800cb59
 800cb44:	0800cb69 	.word	0x0800cb69
 800cb48:	0800cb61 	.word	0x0800cb61
 800cb4c:	0800cb51 	.word	0x0800cb51
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cb50:	4b09      	ldr	r3, [pc, #36]	; (800cb78 <USBH_UserProcess+0x58>)
 800cb52:	2203      	movs	r2, #3
 800cb54:	701a      	strb	r2, [r3, #0]
  break;
 800cb56:	e008      	b.n	800cb6a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cb58:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <USBH_UserProcess+0x58>)
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	701a      	strb	r2, [r3, #0]
  break;
 800cb5e:	e004      	b.n	800cb6a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cb60:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <USBH_UserProcess+0x58>)
 800cb62:	2201      	movs	r2, #1
 800cb64:	701a      	strb	r2, [r3, #0]
  break;
 800cb66:	e000      	b.n	800cb6a <USBH_UserProcess+0x4a>

  default:
  break;
 800cb68:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cb6a:	bf00      	nop
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	20008b58 	.word	0x20008b58

0800cb7c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b08a      	sub	sp, #40	; 0x28
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb84:	f107 0314 	add.w	r3, r7, #20
 800cb88:	2200      	movs	r2, #0
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	605a      	str	r2, [r3, #4]
 800cb8e:	609a      	str	r2, [r3, #8]
 800cb90:	60da      	str	r2, [r3, #12]
 800cb92:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a24      	ldr	r2, [pc, #144]	; (800cc2c <HAL_HCD_MspInit+0xb0>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d141      	bne.n	800cc22 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb9e:	2300      	movs	r3, #0
 800cba0:	613b      	str	r3, [r7, #16]
 800cba2:	4b23      	ldr	r3, [pc, #140]	; (800cc30 <HAL_HCD_MspInit+0xb4>)
 800cba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba6:	4a22      	ldr	r2, [pc, #136]	; (800cc30 <HAL_HCD_MspInit+0xb4>)
 800cba8:	f043 0302 	orr.w	r3, r3, #2
 800cbac:	6313      	str	r3, [r2, #48]	; 0x30
 800cbae:	4b20      	ldr	r3, [pc, #128]	; (800cc30 <HAL_HCD_MspInit+0xb4>)
 800cbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb2:	f003 0302 	and.w	r3, r3, #2
 800cbb6:	613b      	str	r3, [r7, #16]
 800cbb8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cbba:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800cbbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cbcc:	230c      	movs	r3, #12
 800cbce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cbd0:	f107 0314 	add.w	r3, r7, #20
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4817      	ldr	r0, [pc, #92]	; (800cc34 <HAL_HCD_MspInit+0xb8>)
 800cbd8:	f7f5 fcc8 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cbdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cbe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cbea:	f107 0314 	add.w	r3, r7, #20
 800cbee:	4619      	mov	r1, r3
 800cbf0:	4810      	ldr	r0, [pc, #64]	; (800cc34 <HAL_HCD_MspInit+0xb8>)
 800cbf2:	f7f5 fcbb 	bl	800256c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	4b0d      	ldr	r3, [pc, #52]	; (800cc30 <HAL_HCD_MspInit+0xb4>)
 800cbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbfe:	4a0c      	ldr	r2, [pc, #48]	; (800cc30 <HAL_HCD_MspInit+0xb4>)
 800cc00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc04:	6313      	str	r3, [r2, #48]	; 0x30
 800cc06:	4b0a      	ldr	r3, [pc, #40]	; (800cc30 <HAL_HCD_MspInit+0xb4>)
 800cc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800cc12:	2200      	movs	r2, #0
 800cc14:	2105      	movs	r1, #5
 800cc16:	204d      	movs	r0, #77	; 0x4d
 800cc18:	f7f4 ff06 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cc1c:	204d      	movs	r0, #77	; 0x4d
 800cc1e:	f7f4 ff1f 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cc22:	bf00      	nop
 800cc24:	3728      	adds	r7, #40	; 0x28
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	40040000 	.word	0x40040000
 800cc30:	40023800 	.word	0x40023800
 800cc34:	40020400 	.word	0x40020400

0800cc38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fc fc17 	bl	800947a <USBH_LL_IncTimer>
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fc fc5b 	bl	800951e <USBH_LL_Connect>
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fc fc70 	bl	8009564 <USBH_LL_Disconnect>
}
 800cc84:	bf00      	nop
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	460b      	mov	r3, r1
 800cc96:	70fb      	strb	r3, [r7, #3]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fc fca5 	bl	80095f2 <USBH_LL_NotifyURBChange>
#endif
}
 800cca8:	bf00      	nop
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7fc fc05 	bl	80094ce <USBH_LL_PortEnabled>
}
 800ccc4:	bf00      	nop
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fc fc11 	bl	8009502 <USBH_LL_PortDisabled>
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d132      	bne.n	800cd60 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ccfa:	4a1c      	ldr	r2, [pc, #112]	; (800cd6c <USBH_LL_Init+0x84>)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a19      	ldr	r2, [pc, #100]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd06:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cd0a:	4b18      	ldr	r3, [pc, #96]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd0c:	4a18      	ldr	r2, [pc, #96]	; (800cd70 <USBH_LL_Init+0x88>)
 800cd0e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800cd10:	4b16      	ldr	r3, [pc, #88]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd12:	220c      	movs	r2, #12
 800cd14:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800cd16:	4b15      	ldr	r3, [pc, #84]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd18:	2201      	movs	r2, #1
 800cd1a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800cd1c:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd1e:	2200      	movs	r2, #0
 800cd20:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cd22:	4b12      	ldr	r3, [pc, #72]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd24:	2202      	movs	r2, #2
 800cd26:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cd28:	4b10      	ldr	r3, [pc, #64]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cd2e:	4b0f      	ldr	r3, [pc, #60]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd30:	2200      	movs	r2, #0
 800cd32:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800cd34:	4b0d      	ldr	r3, [pc, #52]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd36:	2200      	movs	r2, #0
 800cd38:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cd3a:	4b0c      	ldr	r3, [pc, #48]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800cd40:	480a      	ldr	r0, [pc, #40]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd42:	f7f5 fe0a 	bl	800295a <HAL_HCD_Init>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800cd4c:	f7f4 f880 	bl	8000e50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cd50:	4806      	ldr	r0, [pc, #24]	; (800cd6c <USBH_LL_Init+0x84>)
 800cd52:	f7f6 f9ee 	bl	8003132 <HAL_HCD_GetCurrentFrame>
 800cd56:	4603      	mov	r3, r0
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7fc fb7e 	bl	800945c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	20008b5c 	.word	0x20008b5c
 800cd70:	40040000 	.word	0x40040000

0800cd74 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f6 f95b 	bl	8003046 <HAL_HCD_Start>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 f95c 	bl	800d054 <USBH_Get_USB_Status>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7f6 f963 	bl	800308c <HAL_HCD_Stop>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 f941 	bl	800d054 <USBH_Get_USB_Status>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cde8:	2301      	movs	r3, #1
 800cdea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7f6 f9ab 	bl	800314e <HAL_HCD_GetCurrentSpeed>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d00c      	beq.n	800ce18 <USBH_LL_GetSpeed+0x38>
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d80d      	bhi.n	800ce1e <USBH_LL_GetSpeed+0x3e>
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d002      	beq.n	800ce0c <USBH_LL_GetSpeed+0x2c>
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d003      	beq.n	800ce12 <USBH_LL_GetSpeed+0x32>
 800ce0a:	e008      	b.n	800ce1e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce10:	e008      	b.n	800ce24 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ce12:	2301      	movs	r3, #1
 800ce14:	73fb      	strb	r3, [r7, #15]
    break;
 800ce16:	e005      	b.n	800ce24 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ce18:	2302      	movs	r3, #2
 800ce1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce1c:	e002      	b.n	800ce24 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	73fb      	strb	r3, [r7, #15]
    break;
 800ce22:	bf00      	nop
  }
  return  speed;
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b084      	sub	sp, #16
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce36:	2300      	movs	r3, #0
 800ce38:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7f6 f93e 	bl	80030c6 <HAL_HCD_ResetPort>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce4e:	7bfb      	ldrb	r3, [r7, #15]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 f8ff 	bl	800d054 <USBH_Get_USB_Status>
 800ce56:	4603      	mov	r3, r0
 800ce58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce76:	78fa      	ldrb	r2, [r7, #3]
 800ce78:	4611      	mov	r1, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7f6 f945 	bl	800310a <HAL_HCD_HC_GetXferCount>
 800ce80:	4603      	mov	r3, r0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ce8a:	b590      	push	{r4, r7, lr}
 800ce8c:	b089      	sub	sp, #36	; 0x24
 800ce8e:	af04      	add	r7, sp, #16
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	4608      	mov	r0, r1
 800ce94:	4611      	mov	r1, r2
 800ce96:	461a      	mov	r2, r3
 800ce98:	4603      	mov	r3, r0
 800ce9a:	70fb      	strb	r3, [r7, #3]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70bb      	strb	r3, [r7, #2]
 800cea0:	4613      	mov	r3, r2
 800cea2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ceb2:	787c      	ldrb	r4, [r7, #1]
 800ceb4:	78ba      	ldrb	r2, [r7, #2]
 800ceb6:	78f9      	ldrb	r1, [r7, #3]
 800ceb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ceba:	9302      	str	r3, [sp, #8]
 800cebc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	4623      	mov	r3, r4
 800ceca:	f7f5 fda8 	bl	8002a1e <HAL_HCD_HC_Init>
 800cece:	4603      	mov	r3, r0
 800ced0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ced2:	7bfb      	ldrb	r3, [r7, #15]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f000 f8bd 	bl	800d054 <USBH_Get_USB_Status>
 800ceda:	4603      	mov	r3, r0
 800cedc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cede:	7bbb      	ldrb	r3, [r7, #14]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd90      	pop	{r4, r7, pc}

0800cee8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf02:	78fa      	ldrb	r2, [r7, #3]
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7f5 fe18 	bl	8002b3c <HAL_HCD_HC_Halt>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 f89e 	bl	800d054 <USBH_Get_USB_Status>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cf26:	b590      	push	{r4, r7, lr}
 800cf28:	b089      	sub	sp, #36	; 0x24
 800cf2a:	af04      	add	r7, sp, #16
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	4608      	mov	r0, r1
 800cf30:	4611      	mov	r1, r2
 800cf32:	461a      	mov	r2, r3
 800cf34:	4603      	mov	r3, r0
 800cf36:	70fb      	strb	r3, [r7, #3]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	70bb      	strb	r3, [r7, #2]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cf4e:	787c      	ldrb	r4, [r7, #1]
 800cf50:	78ba      	ldrb	r2, [r7, #2]
 800cf52:	78f9      	ldrb	r1, [r7, #3]
 800cf54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf58:	9303      	str	r3, [sp, #12]
 800cf5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf5c:	9302      	str	r3, [sp, #8]
 800cf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf60:	9301      	str	r3, [sp, #4]
 800cf62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	4623      	mov	r3, r4
 800cf6a:	f7f5 fe0b 	bl	8002b84 <HAL_HCD_HC_SubmitRequest>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f000 f86d 	bl	800d054 <USBH_Get_USB_Status>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd90      	pop	{r4, r7, pc}

0800cf88 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	460b      	mov	r3, r1
 800cf92:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf9a:	78fa      	ldrb	r2, [r7, #3]
 800cf9c:	4611      	mov	r1, r2
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7f6 f89f 	bl	80030e2 <HAL_HCD_HC_GetURBState>
 800cfa4:	4603      	mov	r3, r0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b082      	sub	sp, #8
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d103      	bne.n	800cfcc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cfc4:	78fb      	ldrb	r3, [r7, #3]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 f870 	bl	800d0ac <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cfcc:	20c8      	movs	r0, #200	; 0xc8
 800cfce:	f7f4 fc4f 	bl	8001870 <HAL_Delay>
  return USBH_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b085      	sub	sp, #20
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	70fb      	strb	r3, [r7, #3]
 800cfe8:	4613      	mov	r3, r2
 800cfea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cff2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cff4:	78fb      	ldrb	r3, [r7, #3]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	212c      	movs	r1, #44	; 0x2c
 800cffa:	fb01 f303 	mul.w	r3, r1, r3
 800cffe:	4413      	add	r3, r2
 800d000:	333b      	adds	r3, #59	; 0x3b
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d009      	beq.n	800d01c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d008:	78fb      	ldrb	r3, [r7, #3]
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	212c      	movs	r1, #44	; 0x2c
 800d00e:	fb01 f303 	mul.w	r3, r1, r3
 800d012:	4413      	add	r3, r2
 800d014:	3354      	adds	r3, #84	; 0x54
 800d016:	78ba      	ldrb	r2, [r7, #2]
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	e008      	b.n	800d02e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d01c:	78fb      	ldrb	r3, [r7, #3]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	212c      	movs	r1, #44	; 0x2c
 800d022:	fb01 f303 	mul.w	r3, r1, r3
 800d026:	4413      	add	r3, r2
 800d028:	3355      	adds	r3, #85	; 0x55
 800d02a:	78ba      	ldrb	r2, [r7, #2]
 800d02c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7f4 fc13 	bl	8001870 <HAL_Delay>
}
 800d04a:	bf00      	nop
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
	...

0800d054 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d062:	79fb      	ldrb	r3, [r7, #7]
 800d064:	2b03      	cmp	r3, #3
 800d066:	d817      	bhi.n	800d098 <USBH_Get_USB_Status+0x44>
 800d068:	a201      	add	r2, pc, #4	; (adr r2, 800d070 <USBH_Get_USB_Status+0x1c>)
 800d06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06e:	bf00      	nop
 800d070:	0800d081 	.word	0x0800d081
 800d074:	0800d087 	.word	0x0800d087
 800d078:	0800d08d 	.word	0x0800d08d
 800d07c:	0800d093 	.word	0x0800d093
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	73fb      	strb	r3, [r7, #15]
    break;
 800d084:	e00b      	b.n	800d09e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d086:	2302      	movs	r3, #2
 800d088:	73fb      	strb	r3, [r7, #15]
    break;
 800d08a:	e008      	b.n	800d09e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d08c:	2301      	movs	r3, #1
 800d08e:	73fb      	strb	r3, [r7, #15]
    break;
 800d090:	e005      	b.n	800d09e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d092:	2302      	movs	r3, #2
 800d094:	73fb      	strb	r3, [r7, #15]
    break;
 800d096:	e002      	b.n	800d09e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d098:	2302      	movs	r3, #2
 800d09a:	73fb      	strb	r3, [r7, #15]
    break;
 800d09c:	bf00      	nop
  }
  return usb_status;
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3714      	adds	r7, #20
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d0ba:	79fb      	ldrb	r3, [r7, #7]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d102      	bne.n	800d0c6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	73fb      	strb	r3, [r7, #15]
 800d0c4:	e001      	b.n	800d0ca <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	2110      	movs	r1, #16
 800d0d0:	4803      	ldr	r0, [pc, #12]	; (800d0e0 <MX_DriverVbusHS+0x34>)
 800d0d2:	f7f5 fc0f 	bl	80028f4 <HAL_GPIO_WritePin>
}
 800d0d6:	bf00      	nop
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	40020800 	.word	0x40020800

0800d0e4 <__errno>:
 800d0e4:	4b01      	ldr	r3, [pc, #4]	; (800d0ec <__errno+0x8>)
 800d0e6:	6818      	ldr	r0, [r3, #0]
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	20000030 	.word	0x20000030

0800d0f0 <__libc_init_array>:
 800d0f0:	b570      	push	{r4, r5, r6, lr}
 800d0f2:	4d0d      	ldr	r5, [pc, #52]	; (800d128 <__libc_init_array+0x38>)
 800d0f4:	4c0d      	ldr	r4, [pc, #52]	; (800d12c <__libc_init_array+0x3c>)
 800d0f6:	1b64      	subs	r4, r4, r5
 800d0f8:	10a4      	asrs	r4, r4, #2
 800d0fa:	2600      	movs	r6, #0
 800d0fc:	42a6      	cmp	r6, r4
 800d0fe:	d109      	bne.n	800d114 <__libc_init_array+0x24>
 800d100:	4d0b      	ldr	r5, [pc, #44]	; (800d130 <__libc_init_array+0x40>)
 800d102:	4c0c      	ldr	r4, [pc, #48]	; (800d134 <__libc_init_array+0x44>)
 800d104:	f000 f93c 	bl	800d380 <_init>
 800d108:	1b64      	subs	r4, r4, r5
 800d10a:	10a4      	asrs	r4, r4, #2
 800d10c:	2600      	movs	r6, #0
 800d10e:	42a6      	cmp	r6, r4
 800d110:	d105      	bne.n	800d11e <__libc_init_array+0x2e>
 800d112:	bd70      	pop	{r4, r5, r6, pc}
 800d114:	f855 3b04 	ldr.w	r3, [r5], #4
 800d118:	4798      	blx	r3
 800d11a:	3601      	adds	r6, #1
 800d11c:	e7ee      	b.n	800d0fc <__libc_init_array+0xc>
 800d11e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d122:	4798      	blx	r3
 800d124:	3601      	adds	r6, #1
 800d126:	e7f2      	b.n	800d10e <__libc_init_array+0x1e>
 800d128:	0800d44c 	.word	0x0800d44c
 800d12c:	0800d44c 	.word	0x0800d44c
 800d130:	0800d44c 	.word	0x0800d44c
 800d134:	0800d450 	.word	0x0800d450

0800d138 <malloc>:
 800d138:	4b02      	ldr	r3, [pc, #8]	; (800d144 <malloc+0xc>)
 800d13a:	4601      	mov	r1, r0
 800d13c:	6818      	ldr	r0, [r3, #0]
 800d13e:	f000 b88d 	b.w	800d25c <_malloc_r>
 800d142:	bf00      	nop
 800d144:	20000030 	.word	0x20000030

0800d148 <free>:
 800d148:	4b02      	ldr	r3, [pc, #8]	; (800d154 <free+0xc>)
 800d14a:	4601      	mov	r1, r0
 800d14c:	6818      	ldr	r0, [r3, #0]
 800d14e:	f000 b819 	b.w	800d184 <_free_r>
 800d152:	bf00      	nop
 800d154:	20000030 	.word	0x20000030

0800d158 <memcpy>:
 800d158:	440a      	add	r2, r1
 800d15a:	4291      	cmp	r1, r2
 800d15c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d160:	d100      	bne.n	800d164 <memcpy+0xc>
 800d162:	4770      	bx	lr
 800d164:	b510      	push	{r4, lr}
 800d166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d16a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d16e:	4291      	cmp	r1, r2
 800d170:	d1f9      	bne.n	800d166 <memcpy+0xe>
 800d172:	bd10      	pop	{r4, pc}

0800d174 <memset>:
 800d174:	4402      	add	r2, r0
 800d176:	4603      	mov	r3, r0
 800d178:	4293      	cmp	r3, r2
 800d17a:	d100      	bne.n	800d17e <memset+0xa>
 800d17c:	4770      	bx	lr
 800d17e:	f803 1b01 	strb.w	r1, [r3], #1
 800d182:	e7f9      	b.n	800d178 <memset+0x4>

0800d184 <_free_r>:
 800d184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d186:	2900      	cmp	r1, #0
 800d188:	d044      	beq.n	800d214 <_free_r+0x90>
 800d18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d18e:	9001      	str	r0, [sp, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	f1a1 0404 	sub.w	r4, r1, #4
 800d196:	bfb8      	it	lt
 800d198:	18e4      	addlt	r4, r4, r3
 800d19a:	f000 f8e3 	bl	800d364 <__malloc_lock>
 800d19e:	4a1e      	ldr	r2, [pc, #120]	; (800d218 <_free_r+0x94>)
 800d1a0:	9801      	ldr	r0, [sp, #4]
 800d1a2:	6813      	ldr	r3, [r2, #0]
 800d1a4:	b933      	cbnz	r3, 800d1b4 <_free_r+0x30>
 800d1a6:	6063      	str	r3, [r4, #4]
 800d1a8:	6014      	str	r4, [r2, #0]
 800d1aa:	b003      	add	sp, #12
 800d1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1b0:	f000 b8de 	b.w	800d370 <__malloc_unlock>
 800d1b4:	42a3      	cmp	r3, r4
 800d1b6:	d908      	bls.n	800d1ca <_free_r+0x46>
 800d1b8:	6825      	ldr	r5, [r4, #0]
 800d1ba:	1961      	adds	r1, r4, r5
 800d1bc:	428b      	cmp	r3, r1
 800d1be:	bf01      	itttt	eq
 800d1c0:	6819      	ldreq	r1, [r3, #0]
 800d1c2:	685b      	ldreq	r3, [r3, #4]
 800d1c4:	1949      	addeq	r1, r1, r5
 800d1c6:	6021      	streq	r1, [r4, #0]
 800d1c8:	e7ed      	b.n	800d1a6 <_free_r+0x22>
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	b10b      	cbz	r3, 800d1d4 <_free_r+0x50>
 800d1d0:	42a3      	cmp	r3, r4
 800d1d2:	d9fa      	bls.n	800d1ca <_free_r+0x46>
 800d1d4:	6811      	ldr	r1, [r2, #0]
 800d1d6:	1855      	adds	r5, r2, r1
 800d1d8:	42a5      	cmp	r5, r4
 800d1da:	d10b      	bne.n	800d1f4 <_free_r+0x70>
 800d1dc:	6824      	ldr	r4, [r4, #0]
 800d1de:	4421      	add	r1, r4
 800d1e0:	1854      	adds	r4, r2, r1
 800d1e2:	42a3      	cmp	r3, r4
 800d1e4:	6011      	str	r1, [r2, #0]
 800d1e6:	d1e0      	bne.n	800d1aa <_free_r+0x26>
 800d1e8:	681c      	ldr	r4, [r3, #0]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	6053      	str	r3, [r2, #4]
 800d1ee:	4421      	add	r1, r4
 800d1f0:	6011      	str	r1, [r2, #0]
 800d1f2:	e7da      	b.n	800d1aa <_free_r+0x26>
 800d1f4:	d902      	bls.n	800d1fc <_free_r+0x78>
 800d1f6:	230c      	movs	r3, #12
 800d1f8:	6003      	str	r3, [r0, #0]
 800d1fa:	e7d6      	b.n	800d1aa <_free_r+0x26>
 800d1fc:	6825      	ldr	r5, [r4, #0]
 800d1fe:	1961      	adds	r1, r4, r5
 800d200:	428b      	cmp	r3, r1
 800d202:	bf04      	itt	eq
 800d204:	6819      	ldreq	r1, [r3, #0]
 800d206:	685b      	ldreq	r3, [r3, #4]
 800d208:	6063      	str	r3, [r4, #4]
 800d20a:	bf04      	itt	eq
 800d20c:	1949      	addeq	r1, r1, r5
 800d20e:	6021      	streq	r1, [r4, #0]
 800d210:	6054      	str	r4, [r2, #4]
 800d212:	e7ca      	b.n	800d1aa <_free_r+0x26>
 800d214:	b003      	add	sp, #12
 800d216:	bd30      	pop	{r4, r5, pc}
 800d218:	20008e60 	.word	0x20008e60

0800d21c <sbrk_aligned>:
 800d21c:	b570      	push	{r4, r5, r6, lr}
 800d21e:	4e0e      	ldr	r6, [pc, #56]	; (800d258 <sbrk_aligned+0x3c>)
 800d220:	460c      	mov	r4, r1
 800d222:	6831      	ldr	r1, [r6, #0]
 800d224:	4605      	mov	r5, r0
 800d226:	b911      	cbnz	r1, 800d22e <sbrk_aligned+0x12>
 800d228:	f000 f88c 	bl	800d344 <_sbrk_r>
 800d22c:	6030      	str	r0, [r6, #0]
 800d22e:	4621      	mov	r1, r4
 800d230:	4628      	mov	r0, r5
 800d232:	f000 f887 	bl	800d344 <_sbrk_r>
 800d236:	1c43      	adds	r3, r0, #1
 800d238:	d00a      	beq.n	800d250 <sbrk_aligned+0x34>
 800d23a:	1cc4      	adds	r4, r0, #3
 800d23c:	f024 0403 	bic.w	r4, r4, #3
 800d240:	42a0      	cmp	r0, r4
 800d242:	d007      	beq.n	800d254 <sbrk_aligned+0x38>
 800d244:	1a21      	subs	r1, r4, r0
 800d246:	4628      	mov	r0, r5
 800d248:	f000 f87c 	bl	800d344 <_sbrk_r>
 800d24c:	3001      	adds	r0, #1
 800d24e:	d101      	bne.n	800d254 <sbrk_aligned+0x38>
 800d250:	f04f 34ff 	mov.w	r4, #4294967295
 800d254:	4620      	mov	r0, r4
 800d256:	bd70      	pop	{r4, r5, r6, pc}
 800d258:	20008e64 	.word	0x20008e64

0800d25c <_malloc_r>:
 800d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d260:	1ccd      	adds	r5, r1, #3
 800d262:	f025 0503 	bic.w	r5, r5, #3
 800d266:	3508      	adds	r5, #8
 800d268:	2d0c      	cmp	r5, #12
 800d26a:	bf38      	it	cc
 800d26c:	250c      	movcc	r5, #12
 800d26e:	2d00      	cmp	r5, #0
 800d270:	4607      	mov	r7, r0
 800d272:	db01      	blt.n	800d278 <_malloc_r+0x1c>
 800d274:	42a9      	cmp	r1, r5
 800d276:	d905      	bls.n	800d284 <_malloc_r+0x28>
 800d278:	230c      	movs	r3, #12
 800d27a:	603b      	str	r3, [r7, #0]
 800d27c:	2600      	movs	r6, #0
 800d27e:	4630      	mov	r0, r6
 800d280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d284:	4e2e      	ldr	r6, [pc, #184]	; (800d340 <_malloc_r+0xe4>)
 800d286:	f000 f86d 	bl	800d364 <__malloc_lock>
 800d28a:	6833      	ldr	r3, [r6, #0]
 800d28c:	461c      	mov	r4, r3
 800d28e:	bb34      	cbnz	r4, 800d2de <_malloc_r+0x82>
 800d290:	4629      	mov	r1, r5
 800d292:	4638      	mov	r0, r7
 800d294:	f7ff ffc2 	bl	800d21c <sbrk_aligned>
 800d298:	1c43      	adds	r3, r0, #1
 800d29a:	4604      	mov	r4, r0
 800d29c:	d14d      	bne.n	800d33a <_malloc_r+0xde>
 800d29e:	6834      	ldr	r4, [r6, #0]
 800d2a0:	4626      	mov	r6, r4
 800d2a2:	2e00      	cmp	r6, #0
 800d2a4:	d140      	bne.n	800d328 <_malloc_r+0xcc>
 800d2a6:	6823      	ldr	r3, [r4, #0]
 800d2a8:	4631      	mov	r1, r6
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	eb04 0803 	add.w	r8, r4, r3
 800d2b0:	f000 f848 	bl	800d344 <_sbrk_r>
 800d2b4:	4580      	cmp	r8, r0
 800d2b6:	d13a      	bne.n	800d32e <_malloc_r+0xd2>
 800d2b8:	6821      	ldr	r1, [r4, #0]
 800d2ba:	3503      	adds	r5, #3
 800d2bc:	1a6d      	subs	r5, r5, r1
 800d2be:	f025 0503 	bic.w	r5, r5, #3
 800d2c2:	3508      	adds	r5, #8
 800d2c4:	2d0c      	cmp	r5, #12
 800d2c6:	bf38      	it	cc
 800d2c8:	250c      	movcc	r5, #12
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	4638      	mov	r0, r7
 800d2ce:	f7ff ffa5 	bl	800d21c <sbrk_aligned>
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	d02b      	beq.n	800d32e <_malloc_r+0xd2>
 800d2d6:	6823      	ldr	r3, [r4, #0]
 800d2d8:	442b      	add	r3, r5
 800d2da:	6023      	str	r3, [r4, #0]
 800d2dc:	e00e      	b.n	800d2fc <_malloc_r+0xa0>
 800d2de:	6822      	ldr	r2, [r4, #0]
 800d2e0:	1b52      	subs	r2, r2, r5
 800d2e2:	d41e      	bmi.n	800d322 <_malloc_r+0xc6>
 800d2e4:	2a0b      	cmp	r2, #11
 800d2e6:	d916      	bls.n	800d316 <_malloc_r+0xba>
 800d2e8:	1961      	adds	r1, r4, r5
 800d2ea:	42a3      	cmp	r3, r4
 800d2ec:	6025      	str	r5, [r4, #0]
 800d2ee:	bf18      	it	ne
 800d2f0:	6059      	strne	r1, [r3, #4]
 800d2f2:	6863      	ldr	r3, [r4, #4]
 800d2f4:	bf08      	it	eq
 800d2f6:	6031      	streq	r1, [r6, #0]
 800d2f8:	5162      	str	r2, [r4, r5]
 800d2fa:	604b      	str	r3, [r1, #4]
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	f104 060b 	add.w	r6, r4, #11
 800d302:	f000 f835 	bl	800d370 <__malloc_unlock>
 800d306:	f026 0607 	bic.w	r6, r6, #7
 800d30a:	1d23      	adds	r3, r4, #4
 800d30c:	1af2      	subs	r2, r6, r3
 800d30e:	d0b6      	beq.n	800d27e <_malloc_r+0x22>
 800d310:	1b9b      	subs	r3, r3, r6
 800d312:	50a3      	str	r3, [r4, r2]
 800d314:	e7b3      	b.n	800d27e <_malloc_r+0x22>
 800d316:	6862      	ldr	r2, [r4, #4]
 800d318:	42a3      	cmp	r3, r4
 800d31a:	bf0c      	ite	eq
 800d31c:	6032      	streq	r2, [r6, #0]
 800d31e:	605a      	strne	r2, [r3, #4]
 800d320:	e7ec      	b.n	800d2fc <_malloc_r+0xa0>
 800d322:	4623      	mov	r3, r4
 800d324:	6864      	ldr	r4, [r4, #4]
 800d326:	e7b2      	b.n	800d28e <_malloc_r+0x32>
 800d328:	4634      	mov	r4, r6
 800d32a:	6876      	ldr	r6, [r6, #4]
 800d32c:	e7b9      	b.n	800d2a2 <_malloc_r+0x46>
 800d32e:	230c      	movs	r3, #12
 800d330:	603b      	str	r3, [r7, #0]
 800d332:	4638      	mov	r0, r7
 800d334:	f000 f81c 	bl	800d370 <__malloc_unlock>
 800d338:	e7a1      	b.n	800d27e <_malloc_r+0x22>
 800d33a:	6025      	str	r5, [r4, #0]
 800d33c:	e7de      	b.n	800d2fc <_malloc_r+0xa0>
 800d33e:	bf00      	nop
 800d340:	20008e60 	.word	0x20008e60

0800d344 <_sbrk_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	4d06      	ldr	r5, [pc, #24]	; (800d360 <_sbrk_r+0x1c>)
 800d348:	2300      	movs	r3, #0
 800d34a:	4604      	mov	r4, r0
 800d34c:	4608      	mov	r0, r1
 800d34e:	602b      	str	r3, [r5, #0]
 800d350:	f7f4 f9da 	bl	8001708 <_sbrk>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d102      	bne.n	800d35e <_sbrk_r+0x1a>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	b103      	cbz	r3, 800d35e <_sbrk_r+0x1a>
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	20008e68 	.word	0x20008e68

0800d364 <__malloc_lock>:
 800d364:	4801      	ldr	r0, [pc, #4]	; (800d36c <__malloc_lock+0x8>)
 800d366:	f000 b809 	b.w	800d37c <__retarget_lock_acquire_recursive>
 800d36a:	bf00      	nop
 800d36c:	20008e6c 	.word	0x20008e6c

0800d370 <__malloc_unlock>:
 800d370:	4801      	ldr	r0, [pc, #4]	; (800d378 <__malloc_unlock+0x8>)
 800d372:	f000 b804 	b.w	800d37e <__retarget_lock_release_recursive>
 800d376:	bf00      	nop
 800d378:	20008e6c 	.word	0x20008e6c

0800d37c <__retarget_lock_acquire_recursive>:
 800d37c:	4770      	bx	lr

0800d37e <__retarget_lock_release_recursive>:
 800d37e:	4770      	bx	lr

0800d380 <_init>:
 800d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d382:	bf00      	nop
 800d384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d386:	bc08      	pop	{r3}
 800d388:	469e      	mov	lr, r3
 800d38a:	4770      	bx	lr

0800d38c <_fini>:
 800d38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d38e:	bf00      	nop
 800d390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d392:	bc08      	pop	{r3}
 800d394:	469e      	mov	lr, r3
 800d396:	4770      	bx	lr
