
ExampleUartPollingMethod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800c868  0800c868  0001c868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c934  0800c934  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c934  0800c934  0001c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c93c  0800c93c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c93c  0800c93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c940  0800c940  0001c940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00008d7c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008e10  20008e10  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b207  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a80  00000000  00000000  0004b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002298  00000000  00000000  00050d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002068  00000000  00000000  00052fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b4bc  00000000  00000000  00055050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b350  00000000  00000000  0008050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f502a  00000000  00000000  000ab85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a0886  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009548  00000000  00000000  001a08d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c850 	.word	0x0800c850

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800c850 	.word	0x0800c850

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200000b0 	.word	0x200000b0
 8000558:	20000108 	.word	0x20000108

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b08e      	sub	sp, #56	; 0x38
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f001 f8df 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f843 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fab1 	bl	8000ad0 <MX_GPIO_Init>
  MX_CRC_Init();
 800056e:	f000 f8a9 	bl	80006c4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000572:	f000 f8bb 	bl	80006ec <MX_DMA2D_Init>
  MX_FMC_Init();
 8000576:	f000 fa5b 	bl	8000a30 <MX_FMC_Init>
  MX_I2C3_Init();
 800057a:	f000 f8e9 	bl	8000750 <MX_I2C3_Init>
  MX_LTDC_Init();
 800057e:	f000 f927 	bl	80007d0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000582:	f000 f9a5 	bl	80008d0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000586:	f000 f9d9 	bl	800093c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800058a:	f000 fa27 	bl	80009dc <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  /* init code for USB_HOST */
   MX_USB_HOST_Init();
 800058e:	f00b fd09 	bl	800bfa4 <MX_USB_HOST_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096/4);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <main+0x84>)
 8000594:	f107 041c 	add.w	r4, r7, #28
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f009 fa86 	bl	8009abe <osThreadCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <main+0x88>)
 80005b6:	6013      	str	r3, [r2, #0]

  osThreadDef(secondtTask, StartSecondTask, osPriorityNormal, 0, 4096/4);
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <main+0x8c>)
 80005ba:	463c      	mov	r4, r7
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(secondtTask), NULL);
 80005ca:	463b      	mov	r3, r7
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f009 fa75 	bl	8009abe <osThreadCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <main+0x90>)
 80005d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005da:	f009 fa69 	bl	8009ab0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0x82>
 80005e0:	0800c880 	.word	0x0800c880
 80005e4:	20000564 	.word	0x20000564
 80005e8:	0800c89c 	.word	0x0800c89c
 80005ec:	20000568 	.word	0x20000568

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f00c f820 	bl	800c644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000668:	2348      	movs	r3, #72	; 0x48
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000670:	2303      	movs	r3, #3
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f003 fecd 	bl	8004418 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000684:	f000 fbbe 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 f92f 	bl	8004908 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b0:	f000 fba8 	bl	8000e04 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_CRC_Init+0x20>)
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_CRC_Init+0x24>)
 80006cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_CRC_Init+0x20>)
 80006d0:	f001 f970 	bl	80019b4 <HAL_CRC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006da:	f000 fb93 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000308 	.word	0x20000308
 80006e8:	40023000 	.word	0x40023000

080006ec <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_DMA2D_Init+0x5c>)
 80006f2:	4a16      	ldr	r2, [pc, #88]	; (800074c <MX_DMA2D_Init+0x60>)
 80006f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_DMA2D_Init+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_DMA2D_Init+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_DMA2D_Init+0x5c>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_DMA2D_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000722:	f001 f963 	bl	80019ec <HAL_DMA2D_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800072c:	f000 fb6a 	bl	8000e04 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000730:	2101      	movs	r1, #1
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000734:	f001 fab4 	bl	8001ca0 <HAL_DMA2D_ConfigLayer>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800073e:	f000 fb61 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000310 	.word	0x20000310
 800074c:	4002b000 	.word	0x4002b000

08000750 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C3_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C3_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C3_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C3_Init+0x74>)
 800076e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_I2C3_Init+0x74>)
 800078e:	f003 f91b 	bl	80039c8 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 fb34 	bl	8000e04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	4809      	ldr	r0, [pc, #36]	; (80007c4 <MX_I2C3_Init+0x74>)
 80007a0:	f003 fa56 	bl	8003c50 <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007aa:	f000 fb2b 	bl	8000e04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2C3_Init+0x74>)
 80007b2:	f003 fa89 	bl	8003cc8 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007bc:	f000 fb22 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000350 	.word	0x20000350
 80007c8:	40005c00 	.word	0x40005c00
 80007cc:	000186a0 	.word	0x000186a0

080007d0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	; 0x38
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2234      	movs	r2, #52	; 0x34
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f00b ff31 	bl	800c644 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007e4:	4a39      	ldr	r2, [pc, #228]	; (80008cc <MX_LTDC_Init+0xfc>)
 80007e6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000802:	2209      	movs	r2, #9
 8000804:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000808:	2201      	movs	r2, #1
 800080a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800080e:	221d      	movs	r2, #29
 8000810:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000814:	2203      	movs	r2, #3
 8000816:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800081a:	f240 120d 	movw	r2, #269	; 0x10d
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000820:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000822:	f240 1243 	movw	r2, #323	; 0x143
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800082a:	f240 1217 	movw	r2, #279	; 0x117
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000832:	f240 1247 	movw	r2, #327	; 0x147
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000852:	f003 fa79 	bl	8003d48 <HAL_LTDC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800085c:	f000 fad2 	bl	8000e04 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000864:	23f0      	movs	r3, #240	; 0xf0
 8000866:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800086c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000870:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000876:	23ff      	movs	r3, #255	; 0xff
 8000878:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800087e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000882:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000884:	2307      	movs	r3, #7
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000888:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800088e:	23f0      	movs	r3, #240	; 0xf0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000892:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80008b2:	f003 fbdb 	bl	800406c <HAL_LTDC_ConfigLayer>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008bc:	f000 faa2 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3738      	adds	r7, #56	; 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200003a4 	.word	0x200003a4
 80008cc:	40016800 	.word	0x40016800

080008d0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_SPI5_Init+0x64>)
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <MX_SPI5_Init+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI5_Init+0x64>)
 80008dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI5_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_SPI5_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI5_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI5_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_SPI5_Init+0x64>)
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI5_Init+0x64>)
 8000904:	2218      	movs	r2, #24
 8000906:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_SPI5_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI5_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_SPI5_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI5_Init+0x64>)
 800091c:	220a      	movs	r2, #10
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_SPI5_Init+0x64>)
 8000922:	f004 fc37 	bl	8005194 <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800092c:	f000 fa6a 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000044c 	.word	0x2000044c
 8000938:	40015000 	.word	0x40015000

0800093c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_TIM1_Init+0x98>)
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <MX_TIM1_Init+0x9c>)
 800095c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM1_Init+0x98>)
 800096c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000970:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_TIM1_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000986:	f004 fc8e 	bl	80052a6 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000990:	f000 fa38 	bl	8000e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009a2:	f004 fe47 	bl	8005634 <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009ac:	f000 fa2a 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009be:	f005 f863 	bl	8005a88 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009c8:	f000 fa1c 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200004a4 	.word	0x200004a4
 80009d8:	40010000 	.word	0x40010000

080009dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART1_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f005 f8c8 	bl	8005ba8 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 f9f1 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200004ec 	.word	0x200004ec
 8000a2c:	40011000 	.word	0x40011000

08000a30 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a4a:	4a20      	ldr	r2, [pc, #128]	; (8000acc <MX_FMC_Init+0x9c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a62:	2210      	movs	r2, #16
 8000a64:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a68:	2240      	movs	r2, #64	; 0x40
 8000a6a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a6e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a72:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a80:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000ab2:	f004 fb3b 	bl	800512c <HAL_SDRAM_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000abc:	f000 f9a2 	bl	8000e04 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000530 	.word	0x20000530
 8000acc:	a0000140 	.word	0xa0000140

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
 8000aea:	4b7b      	ldr	r3, [pc, #492]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a7a      	ldr	r2, [pc, #488]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b78      	ldr	r3, [pc, #480]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	4b74      	ldr	r3, [pc, #464]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a73      	ldr	r2, [pc, #460]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b71      	ldr	r3, [pc, #452]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0320 	and.w	r3, r3, #32
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	4b6d      	ldr	r3, [pc, #436]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a6c      	ldr	r2, [pc, #432]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b6a      	ldr	r3, [pc, #424]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	4b66      	ldr	r3, [pc, #408]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a65      	ldr	r2, [pc, #404]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b63      	ldr	r3, [pc, #396]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b5f      	ldr	r3, [pc, #380]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a5e      	ldr	r2, [pc, #376]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b58      	ldr	r3, [pc, #352]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a57      	ldr	r2, [pc, #348]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b55      	ldr	r3, [pc, #340]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b51      	ldr	r3, [pc, #324]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a50      	ldr	r2, [pc, #320]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2116      	movs	r1, #22
 8000bca:	4844      	ldr	r0, [pc, #272]	; (8000cdc <MX_GPIO_Init+0x20c>)
 8000bcc:	f001 fabe 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	4842      	ldr	r0, [pc, #264]	; (8000ce0 <MX_GPIO_Init+0x210>)
 8000bd6:	f001 fab9 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000be0:	4840      	ldr	r0, [pc, #256]	; (8000ce4 <MX_GPIO_Init+0x214>)
 8000be2:	f001 fab3 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bec:	483e      	ldr	r0, [pc, #248]	; (8000ce8 <MX_GPIO_Init+0x218>)
 8000bee:	f001 faad 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bf2:	2316      	movs	r3, #22
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4834      	ldr	r0, [pc, #208]	; (8000cdc <MX_GPIO_Init+0x20c>)
 8000c0a:	f001 f8db 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c0e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	482e      	ldr	r0, [pc, #184]	; (8000ce0 <MX_GPIO_Init+0x210>)
 8000c26:	f001 f8cd 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4827      	ldr	r0, [pc, #156]	; (8000ce0 <MX_GPIO_Init+0x210>)
 8000c42:	f001 f8bf 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c46:	2320      	movs	r3, #32
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c4a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4820      	ldr	r0, [pc, #128]	; (8000cdc <MX_GPIO_Init+0x20c>)
 8000c5c:	f001 f8b2 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c60:	2304      	movs	r3, #4
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	481e      	ldr	r0, [pc, #120]	; (8000cec <MX_GPIO_Init+0x21c>)
 8000c74:	f001 f8a6 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <MX_GPIO_Init+0x214>)
 8000c8e:	f001 f899 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c92:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <MX_GPIO_Init+0x214>)
 8000cac:	f001 f88a 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cb0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_GPIO_Init+0x218>)
 8000cca:	f001 f87b 	bl	8001dc4 <HAL_GPIO_Init>

}
 8000cce:	bf00      	nop
 8000cd0:	3738      	adds	r7, #56	; 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	40021800 	.word	0x40021800
 8000cec:	40020400 	.word	0x40020400

08000cf0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint8_t u8ReceivedData[2];
  /* Infinite loop */
  for(;;)
  {
	  // wait until data successfully received
	  while(HAL_UART_Receive(&huart1, (uint8_t*)u8ReceivedData, 2, 1000)!=HAL_OK)
 8000cf8:	e002      	b.n	8000d00 <StartDefaultTask+0x10>
	  {
		  //HAL_UART_Transmit(&huart1, "none\r\n", 6, 100);
		  osDelay(10);
 8000cfa:	200a      	movs	r0, #10
 8000cfc:	f008 ff2b 	bl	8009b56 <osDelay>
	  while(HAL_UART_Receive(&huart1, (uint8_t*)u8ReceivedData, 2, 1000)!=HAL_OK)
 8000d00:	f107 010c 	add.w	r1, r7, #12
 8000d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d08:	2202      	movs	r2, #2
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <StartDefaultTask+0x50>)
 8000d0c:	f005 f82b 	bl	8005d66 <HAL_UART_Receive>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f1      	bne.n	8000cfa <StartDefaultTask+0xa>
	  }

	  //HAL_UART_Transmit(&huart1, u8ReceivedData, sizeof(u8ReceivedData), 100);

	  // if first Char is '0', then turn LED3 off
	  if(u8ReceivedData[0]=='0')
 8000d16:	7b3b      	ldrb	r3, [r7, #12]
 8000d18:	2b30      	cmp	r3, #48	; 0x30
 8000d1a:	d106      	bne.n	8000d2a <StartDefaultTask+0x3a>
	  {
		  // turn LED3 off
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <StartDefaultTask+0x54>)
 8000d24:	f001 fa12 	bl	800214c <HAL_GPIO_WritePin>
 8000d28:	e7ea      	b.n	8000d00 <StartDefaultTask+0x10>
	  }
	  // if first Char is '1', then turn LED3 on
	  else if(u8ReceivedData[0]=='1')
 8000d2a:	7b3b      	ldrb	r3, [r7, #12]
 8000d2c:	2b31      	cmp	r3, #49	; 0x31
 8000d2e:	d1e7      	bne.n	8000d00 <StartDefaultTask+0x10>
	  {
		  // turn LED3 on
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d36:	4803      	ldr	r0, [pc, #12]	; (8000d44 <StartDefaultTask+0x54>)
 8000d38:	f001 fa08 	bl	800214c <HAL_GPIO_WritePin>
	  while(HAL_UART_Receive(&huart1, (uint8_t*)u8ReceivedData, 2, 1000)!=HAL_OK)
 8000d3c:	e7e0      	b.n	8000d00 <StartDefaultTask+0x10>
 8000d3e:	bf00      	nop
 8000d40:	200004ec 	.word	0x200004ec
 8000d44:	40021800 	.word	0x40021800

08000d48 <StartSecondTask>:
  }
  /* USER CODE END 5 */
}

void StartSecondTask(void const * argument)
{
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint8_t cMsg[30]="Button clicked\r\n";
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <StartSecondTask+0x88>)
 8000d52:	f107 0408 	add.w	r4, r7, #8
 8000d56:	461d      	mov	r5, r3
 8000d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d5c:	682b      	ldr	r3, [r5, #0]
 8000d5e:	7023      	strb	r3, [r4, #0]
 8000d60:	f107 0319 	add.w	r3, r7, #25
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	731a      	strb	r2, [r3, #12]
	uint8_t bButtonClicked = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(;;)
  {
	// if button change state to clicked, then save the new state of the button then send message and toggle LED4
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&&bButtonClicked==0)
 8000d74:	2101      	movs	r1, #1
 8000d76:	4817      	ldr	r0, [pc, #92]	; (8000dd4 <StartSecondTask+0x8c>)
 8000d78:	f001 f9d0 	bl	800211c <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d013      	beq.n	8000daa <StartSecondTask+0x62>
 8000d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <StartSecondTask+0x62>
	{
		// save button state
		bButtonClicked=1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		// toggle LED4
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000d90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d94:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <StartSecondTask+0x90>)
 8000d96:	f001 f9f2 	bl	800217e <HAL_GPIO_TogglePin>
		// Send message
		HAL_UART_Transmit(&huart1, cMsg, sizeof(cMsg), 100);
 8000d9a:	f107 0108 	add.w	r1, r7, #8
 8000d9e:	2364      	movs	r3, #100	; 0x64
 8000da0:	221e      	movs	r2, #30
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <StartSecondTask+0x94>)
 8000da4:	f004 ff4d 	bl	8005c42 <HAL_UART_Transmit>
 8000da8:	e00d      	b.n	8000dc6 <StartSecondTask+0x7e>
	}
	// if button released then save the new state of the button
	else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0 && bButtonClicked==1)
 8000daa:	2101      	movs	r1, #1
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <StartSecondTask+0x8c>)
 8000dae:	f001 f9b5 	bl	800211c <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d106      	bne.n	8000dc6 <StartSecondTask+0x7e>
 8000db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d102      	bne.n	8000dc6 <StartSecondTask+0x7e>
	{
		// save button state
		bButtonClicked=0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	osDelay(10);
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f008 fec5 	bl	8009b56 <osDelay>
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&&bButtonClicked==0)
 8000dcc:	e7d2      	b.n	8000d74 <StartSecondTask+0x2c>
 8000dce:	bf00      	nop
 8000dd0:	0800c8b8 	.word	0x0800c8b8
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40021800 	.word	0x40021800
 8000ddc:	200004ec 	.word	0x200004ec

08000de0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000df2:	f000 fcb9 	bl	8001768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40001000 	.word	0x40001000

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_MspInit+0x54>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_MspInit+0x54>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x54>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_MspInit+0x54>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_MspInit+0x54>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_MspInit+0x54>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	210f      	movs	r1, #15
 8000e52:	f06f 0001 	mvn.w	r0, #1
 8000e56:	f000 fd83 	bl	8001960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <HAL_CRC_MspInit+0x3c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10d      	bne.n	8000e96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_CRC_MspInit+0x40>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <HAL_CRC_MspInit+0x40>)
 8000e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_CRC_MspInit+0x40>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023000 	.word	0x40023000
 8000ea8:	40023800 	.word	0x40023800

08000eac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_DMA2D_MspInit+0x48>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d115      	bne.n	8000eea <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_DMA2D_MspInit+0x4c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <HAL_DMA2D_MspInit+0x4c>)
 8000ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_DMA2D_MspInit+0x4c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	205a      	movs	r0, #90	; 0x5a
 8000ee0:	f000 fd3e 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ee4:	205a      	movs	r0, #90	; 0x5a
 8000ee6:	f000 fd57 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	4002b000 	.word	0x4002b000
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a29      	ldr	r2, [pc, #164]	; (8000fc0 <HAL_I2C_MspInit+0xc4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d14b      	bne.n	8000fb6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <HAL_I2C_MspInit+0xc8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a27      	ldr	r2, [pc, #156]	; (8000fc4 <HAL_I2C_MspInit+0xc8>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <HAL_I2C_MspInit+0xc8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <HAL_I2C_MspInit+0xc8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <HAL_I2C_MspInit+0xc8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_I2C_MspInit+0xc8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <HAL_I2C_MspInit+0xcc>)
 8000f74:	f000 ff26 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7e:	2312      	movs	r3, #18
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <HAL_I2C_MspInit+0xd0>)
 8000f96:	f000 ff15 	bl	8001dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_I2C_MspInit+0xc8>)
 8000fa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_I2C_MspInit+0xc8>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40005c00 	.word	0x40005c00
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09a      	sub	sp, #104	; 0x68
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	2230      	movs	r2, #48	; 0x30
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00b fb27 	bl	800c644 <memset>
  if(hltdc->Instance==LTDC)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a85      	ldr	r2, [pc, #532]	; (8001210 <HAL_LTDC_MspInit+0x240>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	f040 8102 	bne.w	8001206 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001002:	2308      	movs	r3, #8
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001006:	2332      	movs	r3, #50	; 0x32
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800100e:	2300      	movs	r3, #0
 8001010:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fec8 	bl	8004dac <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001022:	f7ff feef 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
 800102a:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a79      	ldr	r2, [pc, #484]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 8001030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b77      	ldr	r3, [pc, #476]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	4b73      	ldr	r3, [pc, #460]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a72      	ldr	r2, [pc, #456]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 800104c:	f043 0320 	orr.w	r3, r3, #32
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b70      	ldr	r3, [pc, #448]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	4b6c      	ldr	r3, [pc, #432]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a6b      	ldr	r2, [pc, #428]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b69      	ldr	r3, [pc, #420]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	4b65      	ldr	r3, [pc, #404]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a64      	ldr	r2, [pc, #400]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a5d      	ldr	r2, [pc, #372]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 80010a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b5b      	ldr	r3, [pc, #364]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b57      	ldr	r3, [pc, #348]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a56      	ldr	r2, [pc, #344]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b54      	ldr	r3, [pc, #336]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b4d      	ldr	r3, [pc, #308]	; (8001214 <HAL_LTDC_MspInit+0x244>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010fc:	230e      	movs	r3, #14
 80010fe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001104:	4619      	mov	r1, r3
 8001106:	4844      	ldr	r0, [pc, #272]	; (8001218 <HAL_LTDC_MspInit+0x248>)
 8001108:	f000 fe5c 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800110c:	f641 0358 	movw	r3, #6232	; 0x1858
 8001110:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800111e:	230e      	movs	r3, #14
 8001120:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001126:	4619      	mov	r1, r3
 8001128:	483c      	ldr	r0, [pc, #240]	; (800121c <HAL_LTDC_MspInit+0x24c>)
 800112a:	f000 fe4b 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800112e:	2303      	movs	r3, #3
 8001130:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800113e:	2309      	movs	r3, #9
 8001140:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001146:	4619      	mov	r1, r3
 8001148:	4835      	ldr	r0, [pc, #212]	; (8001220 <HAL_LTDC_MspInit+0x250>)
 800114a:	f000 fe3b 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800114e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001152:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001160:	230e      	movs	r3, #14
 8001162:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001168:	4619      	mov	r1, r3
 800116a:	482d      	ldr	r0, [pc, #180]	; (8001220 <HAL_LTDC_MspInit+0x250>)
 800116c:	f000 fe2a 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001170:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001182:	230e      	movs	r3, #14
 8001184:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001186:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800118a:	4619      	mov	r1, r3
 800118c:	4825      	ldr	r0, [pc, #148]	; (8001224 <HAL_LTDC_MspInit+0x254>)
 800118e:	f000 fe19 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001192:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001196:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a4:	230e      	movs	r3, #14
 80011a6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ac:	4619      	mov	r1, r3
 80011ae:	481e      	ldr	r0, [pc, #120]	; (8001228 <HAL_LTDC_MspInit+0x258>)
 80011b0:	f000 fe08 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80011b4:	2348      	movs	r3, #72	; 0x48
 80011b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c4:	230e      	movs	r3, #14
 80011c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011cc:	4619      	mov	r1, r3
 80011ce:	4817      	ldr	r0, [pc, #92]	; (800122c <HAL_LTDC_MspInit+0x25c>)
 80011d0:	f000 fdf8 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011e6:	2309      	movs	r3, #9
 80011e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <HAL_LTDC_MspInit+0x254>)
 80011f2:	f000 fde7 	bl	8001dc4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	2058      	movs	r0, #88	; 0x58
 80011fc:	f000 fbb0 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001200:	2058      	movs	r0, #88	; 0x58
 8001202:	f000 fbc9 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3768      	adds	r7, #104	; 0x68
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40016800 	.word	0x40016800
 8001214:	40023800 	.word	0x40023800
 8001218:	40021400 	.word	0x40021400
 800121c:	40020000 	.word	0x40020000
 8001220:	40020400 	.word	0x40020400
 8001224:	40021800 	.word	0x40021800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00

08001230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <HAL_SPI_MspInit+0x84>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d12c      	bne.n	80012ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_SPI_MspInit+0x88>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <HAL_SPI_MspInit+0x88>)
 800125c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_SPI_MspInit+0x88>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_SPI_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <HAL_SPI_MspInit+0x88>)
 8001278:	f043 0320 	orr.w	r3, r3, #32
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_SPI_MspInit+0x88>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0320 	and.w	r3, r3, #32
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800128a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800129c:	2305      	movs	r3, #5
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <HAL_SPI_MspInit+0x8c>)
 80012a8:	f000 fd8c 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40015000 	.word	0x40015000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40021400 	.word	0x40021400

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <HAL_TIM_Base_MspInit+0x3c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10d      	bne.n	80012ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_TIM_Base_MspInit+0x40>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <HAL_TIM_Base_MspInit+0x40>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <HAL_TIM_Base_MspInit+0x40>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40010000 	.word	0x40010000
 8001300:	40023800 	.word	0x40023800

08001304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_UART_MspInit+0x84>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d12c      	bne.n	8001380 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_UART_MspInit+0x88>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_UART_MspInit+0x88>)
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_UART_MspInit+0x88>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_UART_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_UART_MspInit+0x88>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_UART_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800135e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001370:	2307      	movs	r3, #7
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <HAL_UART_MspInit+0x8c>)
 800137c:	f000 fd22 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40011000 	.word	0x40011000
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000

08001394 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <HAL_FMC_MspInit+0x104>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d16f      	bne.n	8001490 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <HAL_FMC_MspInit+0x104>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b38      	ldr	r3, [pc, #224]	; (800149c <HAL_FMC_MspInit+0x108>)
 80013bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013be:	4a37      	ldr	r2, [pc, #220]	; (800149c <HAL_FMC_MspInit+0x108>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6393      	str	r3, [r2, #56]	; 0x38
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <HAL_FMC_MspInit+0x108>)
 80013c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80013d6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	230c      	movs	r3, #12
 80013e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	482c      	ldr	r0, [pc, #176]	; (80014a0 <HAL_FMC_MspInit+0x10c>)
 80013ee:	f000 fce9 	bl	8001dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013f2:	2301      	movs	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001402:	230c      	movs	r3, #12
 8001404:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4826      	ldr	r0, [pc, #152]	; (80014a4 <HAL_FMC_MspInit+0x110>)
 800140c:	f000 fcda 	bl	8001dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001410:	f248 1333 	movw	r3, #33075	; 0x8133
 8001414:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001422:	230c      	movs	r3, #12
 8001424:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	481f      	ldr	r0, [pc, #124]	; (80014a8 <HAL_FMC_MspInit+0x114>)
 800142c:	f000 fcca 	bl	8001dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001430:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001434:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	230c      	movs	r3, #12
 8001444:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4818      	ldr	r0, [pc, #96]	; (80014ac <HAL_FMC_MspInit+0x118>)
 800144c:	f000 fcba 	bl	8001dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001450:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001454:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001462:	230c      	movs	r3, #12
 8001464:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <HAL_FMC_MspInit+0x11c>)
 800146c:	f000 fcaa 	bl	8001dc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001470:	2360      	movs	r3, #96	; 0x60
 8001472:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001480:	230c      	movs	r3, #12
 8001482:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	480a      	ldr	r0, [pc, #40]	; (80014b4 <HAL_FMC_MspInit+0x120>)
 800148a:	f000 fc9b 	bl	8001dc4 <HAL_GPIO_Init>
 800148e:	e000      	b.n	8001492 <HAL_FMC_MspInit+0xfe>
    return;
 8001490:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000056c 	.word	0x2000056c
 800149c:	40023800 	.word	0x40023800
 80014a0:	40021400 	.word	0x40021400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40020400 	.word	0x40020400

080014b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014c0:	f7ff ff68 	bl	8001394 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_InitTick+0xe4>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <HAL_InitTick+0xe4>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_InitTick+0xe4>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f8:	f107 0210 	add.w	r2, r7, #16
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fc20 	bl	8004d48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001512:	f003 fbf1 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8001516:	6378      	str	r0, [r7, #52]	; 0x34
 8001518:	e004      	b.n	8001524 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800151a:	f003 fbed 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 800151e:	4603      	mov	r3, r0
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	4a23      	ldr	r2, [pc, #140]	; (80015b4 <HAL_InitTick+0xe8>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	0c9b      	lsrs	r3, r3, #18
 800152e:	3b01      	subs	r3, #1
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_InitTick+0xec>)
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <HAL_InitTick+0xf0>)
 8001536:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_InitTick+0xec>)
 800153a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800153e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001540:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_InitTick+0xec>)
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_InitTick+0xec>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_InitTick+0xec>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_InitTick+0xec>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001558:	4817      	ldr	r0, [pc, #92]	; (80015b8 <HAL_InitTick+0xec>)
 800155a:	f003 fea4 	bl	80052a6 <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001568:	2b00      	cmp	r3, #0
 800156a:	d11b      	bne.n	80015a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800156c:	4812      	ldr	r0, [pc, #72]	; (80015b8 <HAL_InitTick+0xec>)
 800156e:	f003 fee9 	bl	8005344 <HAL_TIM_Base_Start_IT>
 8001572:	4603      	mov	r3, r0
 8001574:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001578:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800157c:	2b00      	cmp	r3, #0
 800157e:	d111      	bne.n	80015a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001580:	2036      	movs	r0, #54	; 0x36
 8001582:	f000 fa09 	bl	8001998 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d808      	bhi.n	800159e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	2036      	movs	r0, #54	; 0x36
 8001592:	f000 f9e5 	bl	8001960 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_InitTick+0xf4>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e002      	b.n	80015a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3738      	adds	r7, #56	; 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	431bde83 	.word	0x431bde83
 80015b8:	20000570 	.word	0x20000570
 80015bc:	40001000 	.word	0x40001000
 80015c0:	20000004 	.word	0x20000004

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM6_DAC_IRQHandler+0x10>)
 80015f6:	f003 ff15 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000570 	.word	0x20000570

08001604 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <OTG_HS_IRQHandler+0x10>)
 800160a:	f001 f83d 	bl	8002688 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20008afc 	.word	0x20008afc

08001618 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <LTDC_IRQHandler+0x10>)
 800161e:	f002 fc63 	bl	8003ee8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200003a4 	.word	0x200003a4

0800162c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA2D_IRQHandler+0x10>)
 8001632:	f000 fa24 	bl	8001a7e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000310 	.word	0x20000310

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f00a ffa0 	bl	800c5b4 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20030000 	.word	0x20030000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	200005b8 	.word	0x200005b8
 80016a8:	20008e10 	.word	0x20008e10

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d6:	490e      	ldr	r1, [pc, #56]	; (8001710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ec:	4c0b      	ldr	r4, [pc, #44]	; (800171c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016fa:	f7ff ffd7 	bl	80016ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f00a ff5f 	bl	800c5c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7fe ff2b 	bl	800055c <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001708:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001714:	0800c944 	.word	0x0800c944
  ldr r2, =_sbss
 8001718:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800171c:	20008e10 	.word	0x20008e10

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f8fc 	bl	800194a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff feba 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fb5a 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	200005bc 	.word	0x200005bc

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200005bc 	.word	0x200005bc

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff4c 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001972:	f7ff ff61 	bl	8001838 <__NVIC_GetPriorityGrouping>
 8001976:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	6978      	ldr	r0, [r7, #20]
 800197e:	f7ff ffb1 	bl	80018e4 <NVIC_EncodePriority>
 8001982:	4602      	mov	r2, r0
 8001984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff80 	bl	8001890 <__NVIC_SetPriority>
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff54 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	795b      	ldrb	r3, [r3, #5]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fa46 	bl	8000e68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e03b      	b.n	8001a76 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fa4a 	bl	8000eac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3c:	f023 0107 	bic.w	r1, r3, #7
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68d1      	ldr	r1, [r2, #12]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	430b      	orrs	r3, r1
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d026      	beq.n	8001aee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d021      	beq.n	8001aee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2201      	movs	r2, #1
 8001acc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d026      	beq.n	8001b46 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d021      	beq.n	8001b46 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b10:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2220      	movs	r2, #32
 8001b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1e:	f043 0202 	orr.w	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2204      	movs	r2, #4
 8001b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d026      	beq.n	8001b9e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d021      	beq.n	8001b9e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2208      	movs	r2, #8
 8001b70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	f043 0204 	orr.w	r2, r3, #4
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2204      	movs	r2, #4
 8001b82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00e      	beq.n	8001bd0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f853 	bl	8001c76 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d024      	beq.n	8001c24 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01f      	beq.n	8001c24 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01f      	beq.n	8001c6e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01a      	beq.n	8001c6e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c46:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f80e 	bl	8001c8a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_DMA2D_ConfigLayer+0x20>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e079      	b.n	8001db4 <HAL_DMA2D_ConfigLayer+0x114>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	3318      	adds	r3, #24
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	041b      	lsls	r3, r3, #16
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001cea:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_DMA2D_ConfigLayer+0x120>)
 8001cec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	d003      	beq.n	8001cfe <HAL_DMA2D_ConfigLayer+0x5e>
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b09      	cmp	r3, #9
 8001cfc:	d107      	bne.n	8001d0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e005      	b.n	8001d1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	061b      	lsls	r3, r3, #24
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d120      	bne.n	8001d62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	ea02 0103 	and.w	r1, r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b0a      	cmp	r3, #10
 8001d48:	d003      	beq.n	8001d52 <HAL_DMA2D_ConfigLayer+0xb2>
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b09      	cmp	r3, #9
 8001d50:	d127      	bne.n	8001da2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d60:	e01f      	b.n	8001da2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69da      	ldr	r2, [r3, #28]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	ea02 0103 	and.w	r1, r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b0a      	cmp	r3, #10
 8001d8a:	d003      	beq.n	8001d94 <HAL_DMA2D_ConfigLayer+0xf4>
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b09      	cmp	r3, #9
 8001d92:	d106      	bne.n	8001da2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001da0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	ff03000f 	.word	0xff03000f

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	e177      	b.n	80020d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 8166 	bne.w	80020ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d005      	beq.n	8001e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d130      	bne.n	8001e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 0201 	and.w	r2, r3, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d017      	beq.n	8001eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d123      	bne.n	8001f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80c0 	beq.w	80020ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f66:	4a61      	ldr	r2, [pc, #388]	; (80020ec <HAL_GPIO_Init+0x328>)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_GPIO_Init+0x32c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d037      	beq.n	8002002 <HAL_GPIO_Init+0x23e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d031      	beq.n	8001ffe <HAL_GPIO_Init+0x23a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a56      	ldr	r2, [pc, #344]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02b      	beq.n	8001ffa <HAL_GPIO_Init+0x236>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a55      	ldr	r2, [pc, #340]	; (80020fc <HAL_GPIO_Init+0x338>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x232>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a54      	ldr	r2, [pc, #336]	; (8002100 <HAL_GPIO_Init+0x33c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x22e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a53      	ldr	r2, [pc, #332]	; (8002104 <HAL_GPIO_Init+0x340>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x22a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_GPIO_Init+0x344>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x226>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_GPIO_Init+0x348>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x222>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_GPIO_Init+0x34c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x21e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	; (8002114 <HAL_GPIO_Init+0x350>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x21a>
 8001fda:	2309      	movs	r3, #9
 8001fdc:	e012      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fde:	230a      	movs	r3, #10
 8001fe0:	e010      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	e00e      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00c      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fea:	2306      	movs	r3, #6
 8001fec:	e00a      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fee:	2305      	movs	r3, #5
 8001ff0:	e008      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e004      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e002      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8002002:	2300      	movs	r3, #0
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f002 0203 	and.w	r2, r2, #3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	4093      	lsls	r3, r2
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002014:	4935      	ldr	r1, [pc, #212]	; (80020ec <HAL_GPIO_Init+0x328>)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002046:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_GPIO_Init+0x354>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002070:	4a29      	ldr	r2, [pc, #164]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209a:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_GPIO_Init+0x354>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_GPIO_Init+0x354>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_GPIO_Init+0x354>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3301      	adds	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	f67f ae84 	bls.w	8001de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40013800 	.word	0x40013800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020400 	.word	0x40020400
 80020f8:	40020800 	.word	0x40020800
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40021000 	.word	0x40021000
 8002104:	40021400 	.word	0x40021400
 8002108:	40021800 	.word	0x40021800
 800210c:	40021c00 	.word	0x40021c00
 8002110:	40022000 	.word	0x40022000
 8002114:	40022400 	.word	0x40022400
 8002118:	40013c00 	.word	0x40013c00

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002190:	887a      	ldrh	r2, [r7, #2]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	041a      	lsls	r2, r3, #16
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43d9      	mvns	r1, r3
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	400b      	ands	r3, r1
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80021b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b4:	b08f      	sub	sp, #60	; 0x3c
 80021b6:	af0a      	add	r7, sp, #40	; 0x28
 80021b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e054      	b.n	800226e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f009 ff34 	bl	800c04c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2203      	movs	r2, #3
 80021e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f004 fa6c 	bl	80066e0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	687e      	ldr	r6, [r7, #4]
 8002210:	466d      	mov	r5, sp
 8002212:	f106 0410 	add.w	r4, r6, #16
 8002216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002222:	e885 0003 	stmia.w	r5, {r0, r1}
 8002226:	1d33      	adds	r3, r6, #4
 8002228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222a:	6838      	ldr	r0, [r7, #0]
 800222c:	f004 f9e6 	bl	80065fc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	4618      	mov	r0, r3
 8002238:	f004 fa63 	bl	8006702 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	687e      	ldr	r6, [r7, #4]
 8002244:	466d      	mov	r5, sp
 8002246:	f106 0410 	add.w	r4, r6, #16
 800224a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002252:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002256:	e885 0003 	stmia.w	r5, {r0, r1}
 800225a:	1d33      	adds	r3, r6, #4
 800225c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	f004 fbec 	bl	8006a3c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002276 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002276:	b590      	push	{r4, r7, lr}
 8002278:	b089      	sub	sp, #36	; 0x24
 800227a:	af04      	add	r7, sp, #16
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	4608      	mov	r0, r1
 8002280:	4611      	mov	r1, r2
 8002282:	461a      	mov	r2, r3
 8002284:	4603      	mov	r3, r0
 8002286:	70fb      	strb	r3, [r7, #3]
 8002288:	460b      	mov	r3, r1
 800228a:	70bb      	strb	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_HCD_HC_Init+0x28>
 800229a:	2302      	movs	r3, #2
 800229c:	e076      	b.n	800238c <HAL_HCD_HC_Init+0x116>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	333d      	adds	r3, #61	; 0x3d
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3338      	adds	r3, #56	; 0x38
 80022c6:	787a      	ldrb	r2, [r7, #1]
 80022c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3340      	adds	r3, #64	; 0x40
 80022d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022da:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	212c      	movs	r1, #44	; 0x2c
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	3339      	adds	r3, #57	; 0x39
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	333f      	adds	r3, #63	; 0x3f
 80022fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002300:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	78ba      	ldrb	r2, [r7, #2]
 8002306:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800230a:	b2d0      	uxtb	r0, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	333a      	adds	r3, #58	; 0x3a
 8002318:	4602      	mov	r2, r0
 800231a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800231c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002320:	2b00      	cmp	r3, #0
 8002322:	da09      	bge.n	8002338 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	333b      	adds	r3, #59	; 0x3b
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e008      	b.n	800234a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	333b      	adds	r3, #59	; 0x3b
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	333c      	adds	r3, #60	; 0x3c
 8002358:	f897 2020 	ldrb.w	r2, [r7, #32]
 800235c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	787c      	ldrb	r4, [r7, #1]
 8002364:	78ba      	ldrb	r2, [r7, #2]
 8002366:	78f9      	ldrb	r1, [r7, #3]
 8002368:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4623      	mov	r3, r4
 800237a:	f004 fce5 	bl	8006d48 <USB_HC_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_HCD_HC_Halt+0x1e>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e00f      	b.n	80023d2 <HAL_HCD_HC_Halt+0x3e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f004 ff35 	bl	8007232 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	70fb      	strb	r3, [r7, #3]
 80023ee:	460b      	mov	r3, r1
 80023f0:	70bb      	strb	r3, [r7, #2]
 80023f2:	4613      	mov	r3, r2
 80023f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	333b      	adds	r3, #59	; 0x3b
 8002404:	78ba      	ldrb	r2, [r7, #2]
 8002406:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	333f      	adds	r3, #63	; 0x3f
 8002416:	787a      	ldrb	r2, [r7, #1]
 8002418:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800241a:	7c3b      	ldrb	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d112      	bne.n	8002446 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3342      	adds	r3, #66	; 0x42
 800242e:	2203      	movs	r2, #3
 8002430:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	333d      	adds	r3, #61	; 0x3d
 8002440:	7f3a      	ldrb	r2, [r7, #28]
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e008      	b.n	8002458 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3342      	adds	r3, #66	; 0x42
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b03      	cmp	r3, #3
 800245c:	f200 80c6 	bhi.w	80025ec <HAL_HCD_HC_SubmitRequest+0x210>
 8002460:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	08002479 	.word	0x08002479
 800246c:	080025d9 	.word	0x080025d9
 8002470:	080024dd 	.word	0x080024dd
 8002474:	0800255b 	.word	0x0800255b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002478:	7c3b      	ldrb	r3, [r7, #16]
 800247a:	2b01      	cmp	r3, #1
 800247c:	f040 80b8 	bne.w	80025f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002480:	78bb      	ldrb	r3, [r7, #2]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 80b4 	bne.w	80025f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002488:	8b3b      	ldrh	r3, [r7, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d108      	bne.n	80024a0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3355      	adds	r3, #85	; 0x55
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3355      	adds	r3, #85	; 0x55
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3342      	adds	r3, #66	; 0x42
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024c6:	e093      	b.n	80025f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3342      	adds	r3, #66	; 0x42
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
      break;
 80024da:	e089      	b.n	80025f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024dc:	78bb      	ldrb	r3, [r7, #2]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11d      	bne.n	800251e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3355      	adds	r3, #85	; 0x55
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3342      	adds	r3, #66	; 0x42
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002508:	e073      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	3342      	adds	r3, #66	; 0x42
 8002518:	2202      	movs	r2, #2
 800251a:	701a      	strb	r2, [r3, #0]
      break;
 800251c:	e069      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3354      	adds	r3, #84	; 0x54
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	3342      	adds	r3, #66	; 0x42
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
      break;
 8002544:	e055      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3342      	adds	r3, #66	; 0x42
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
      break;
 8002558:	e04b      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800255a:	78bb      	ldrb	r3, [r7, #2]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d11d      	bne.n	800259c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3355      	adds	r3, #85	; 0x55
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3342      	adds	r3, #66	; 0x42
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002586:	e034      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3342      	adds	r3, #66	; 0x42
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
      break;
 800259a:	e02a      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3354      	adds	r3, #84	; 0x54
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3342      	adds	r3, #66	; 0x42
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
      break;
 80025c2:	e016      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	3342      	adds	r3, #66	; 0x42
 80025d2:	2202      	movs	r2, #2
 80025d4:	701a      	strb	r2, [r3, #0]
      break;
 80025d6:	e00c      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3342      	adds	r3, #66	; 0x42
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80025ec:	bf00      	nop
 80025ee:	e000      	b.n	80025f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80025f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3344      	adds	r3, #68	; 0x44
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	8b3a      	ldrh	r2, [r7, #24]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	202c      	movs	r0, #44	; 0x2c
 800260c:	fb00 f303 	mul.w	r3, r0, r3
 8002610:	440b      	add	r3, r1
 8002612:	334c      	adds	r3, #76	; 0x4c
 8002614:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3360      	adds	r3, #96	; 0x60
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3350      	adds	r3, #80	; 0x50
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	3339      	adds	r3, #57	; 0x39
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	3361      	adds	r3, #97	; 0x61
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	222c      	movs	r2, #44	; 0x2c
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	3338      	adds	r3, #56	; 0x38
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	18d1      	adds	r1, r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	f004 fc88 	bl	8006f8c <USB_HC_StartXfer>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop

08002688 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 f989 	bl	80069b6 <USB_GetMode>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	f040 80f6 	bne.w	8002898 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f004 f96d 	bl	8006990 <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80ec 	beq.w	8002896 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 f964 	bl	8006990 <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d2:	d104      	bne.n	80026de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 f954 	bl	8006990 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f2:	d104      	bne.n	80026fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f004 f944 	bl	8006990 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002712:	d104      	bne.n	800271e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800271c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f004 f934 	bl	8006990 <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d103      	bne.n	800273a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2202      	movs	r2, #2
 8002738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f004 f926 	bl	8006990 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800274e:	d11c      	bne.n	800278a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002758:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800276a:	2110      	movs	r1, #16
 800276c:	6938      	ldr	r0, [r7, #16]
 800276e:	f004 f815 	bl	800679c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002772:	6938      	ldr	r0, [r7, #16]
 8002774:	f004 f846 	bl	8006804 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fa1c 	bl	8006bbc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f009 fcdb 	bl	800c140 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f004 f8fe 	bl	8006990 <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800279a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800279e:	d102      	bne.n	80027a6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f001 f89e 	bl	80038e2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 f8f0 	bl	8006990 <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d106      	bne.n	80027c8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f009 fca4 	bl	800c108 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2208      	movs	r2, #8
 80027c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 f8df 	bl	8006990 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d101      	bne.n	80027e0 <HAL_HCD_IRQHandler+0x158>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <HAL_HCD_IRQHandler+0x15a>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d012      	beq.n	800280c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0210 	bic.w	r2, r2, #16
 80027f4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 ffa1 	bl	800373e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0210 	orr.w	r2, r2, #16
 800280a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f004 f8bd 	bl	8006990 <USB_ReadInterrupts>
 8002816:	4603      	mov	r3, r0
 8002818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002820:	d13a      	bne.n	8002898 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f004 fcf2 	bl	8007210 <USB_HC_ReadInterrupt>
 800282c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e025      	b.n	8002880 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d018      	beq.n	800287a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285e:	d106      	bne.n	800286e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f8ab 	bl	80029c2 <HCD_HC_IN_IRQHandler>
 800286c:	e005      	b.n	800287a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fbf9 	bl	800306c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3301      	adds	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	429a      	cmp	r2, r3
 8002888:	d3d4      	bcc.n	8002834 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002892:	615a      	str	r2, [r3, #20]
 8002894:	e000      	b.n	8002898 <HAL_HCD_IRQHandler+0x210>
      return;
 8002896:	bf00      	nop
    }
  }
}
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_HCD_Start+0x16>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e013      	b.n	80028dc <HAL_HCD_Start+0x3e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 f9de 	bl	8006c84 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fef6 	bl	80066be <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_HCD_Stop+0x16>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e00d      	b.n	8002916 <HAL_HCD_Stop+0x32>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f004 fdcc 	bl	80074a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f004 f980 	bl	8006c30 <USB_ResetPort>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	3360      	adds	r3, #96	; 0x60
 8002954:	781b      	ldrb	r3, [r3, #0]
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3350      	adds	r3, #80	; 0x50
 800297c:	681b      	ldr	r3, [r3, #0]
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f004 f9c4 	bl	8006d24 <USB_GetCurrentFrame>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f004 f99f 	bl	8006cf6 <USB_GetHostSpeed>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d11a      	bne.n	8002a28 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	461a      	mov	r2, r3
 8002a00:	2304      	movs	r3, #4
 8002a02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3361      	adds	r3, #97	; 0x61
 8002a12:	2206      	movs	r2, #6
 8002a14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 fc06 	bl	8007232 <USB_HC_Halt>
 8002a26:	e0af      	b.n	8002b88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3e:	d11b      	bne.n	8002a78 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3361      	adds	r3, #97	; 0x61
 8002a62:	2207      	movs	r2, #7
 8002a64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 fbde 	bl	8007232 <USB_HC_Halt>
 8002a76:	e087      	b.n	8002b88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d109      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	6093      	str	r3, [r2, #8]
 8002aa0:	e072      	b.n	8002b88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d11a      	bne.n	8002aee <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3361      	adds	r3, #97	; 0x61
 8002ad8:	2205      	movs	r2, #5
 8002ada:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fba3 	bl	8007232 <USB_HC_Halt>
 8002aec:	e04c      	b.n	8002b88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b04:	d11b      	bne.n	8002b3e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	461a      	mov	r2, r3
 8002b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3361      	adds	r3, #97	; 0x61
 8002b28:	2208      	movs	r2, #8
 8002b2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 fb7b 	bl	8007232 <USB_HC_Halt>
 8002b3c:	e024      	b.n	8002b88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d119      	bne.n	8002b88 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	461a      	mov	r2, r3
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3361      	adds	r3, #97	; 0x61
 8002b74:	2206      	movs	r2, #6
 8002b76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 fb55 	bl	8007232 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b9e:	d112      	bne.n	8002bc6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fb41 	bl	8007232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002bc4:	e24e      	b.n	8003064 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f040 80df 	bne.w	8002d9c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d019      	beq.n	8002c1a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3348      	adds	r3, #72	; 0x48
 8002bf4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0159      	lsls	r1, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	202c      	movs	r0, #44	; 0x2c
 8002c10:	fb00 f303 	mul.w	r3, r0, r3
 8002c14:	440b      	add	r3, r1
 8002c16:	3350      	adds	r3, #80	; 0x50
 8002c18:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3361      	adds	r3, #97	; 0x61
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	335c      	adds	r3, #92	; 0x5c
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	333f      	adds	r3, #63	; 0x3f
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d009      	beq.n	8002c78 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	333f      	adds	r3, #63	; 0x3f
 8002c72:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d111      	bne.n	8002c9c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f004 fad5 	bl	8007232 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2310      	movs	r3, #16
 8002c98:	6093      	str	r3, [r2, #8]
 8002c9a:	e03a      	b.n	8002d12 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	333f      	adds	r3, #63	; 0x3f
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d009      	beq.n	8002cc4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	333f      	adds	r3, #63	; 0x3f
 8002cbe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d126      	bne.n	8002d12 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	0151      	lsls	r1, r2, #5
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	440a      	add	r2, r1
 8002cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ce2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3360      	adds	r3, #96	; 0x60
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	b2d9      	uxtb	r1, r3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	202c      	movs	r0, #44	; 0x2c
 8002d00:	fb00 f303 	mul.w	r3, r0, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3360      	adds	r3, #96	; 0x60
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f009 fa25 	bl	800c15c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d12b      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3348      	adds	r3, #72	; 0x48
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	202c      	movs	r0, #44	; 0x2c
 8002d30:	fb00 f202 	mul.w	r2, r0, r2
 8002d34:	440a      	add	r2, r1
 8002d36:	3240      	adds	r2, #64	; 0x40
 8002d38:	8812      	ldrh	r2, [r2, #0]
 8002d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 818e 	beq.w	8003064 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3354      	adds	r3, #84	; 0x54
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2d8      	uxtb	r0, r3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3354      	adds	r3, #84	; 0x54
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	701a      	strb	r2, [r3, #0]
}
 8002d70:	e178      	b.n	8003064 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3354      	adds	r3, #84	; 0x54
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	f083 0301 	eor.w	r3, r3, #1
 8002d86:	b2d8      	uxtb	r0, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3354      	adds	r3, #84	; 0x54
 8002d96:	4602      	mov	r2, r0
 8002d98:	701a      	strb	r2, [r3, #0]
}
 8002d9a:	e163      	b.n	8003064 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	f040 80f6 	bne.w	8002fa0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3361      	adds	r3, #97	; 0x61
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d109      	bne.n	8002ddc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3360      	adds	r3, #96	; 0x60
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e0c9      	b.n	8002f70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3361      	adds	r3, #97	; 0x61
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d109      	bne.n	8002e04 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3360      	adds	r3, #96	; 0x60
 8002dfe:	2205      	movs	r2, #5
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e0b5      	b.n	8002f70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3361      	adds	r3, #97	; 0x61
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d009      	beq.n	8002e2c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3361      	adds	r3, #97	; 0x61
 8002e26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d150      	bne.n	8002ece <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	335c      	adds	r3, #92	; 0x5c
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	202c      	movs	r0, #44	; 0x2c
 8002e44:	fb00 f303 	mul.w	r3, r0, r3
 8002e48:	440b      	add	r3, r1
 8002e4a:	335c      	adds	r3, #92	; 0x5c
 8002e4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	335c      	adds	r3, #92	; 0x5c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d912      	bls.n	8002e88 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	335c      	adds	r3, #92	; 0x5c
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3360      	adds	r3, #96	; 0x60
 8002e82:	2204      	movs	r2, #4
 8002e84:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e86:	e073      	b.n	8002f70 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	3360      	adds	r3, #96	; 0x60
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eb0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eb8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ecc:	e050      	b.n	8002f70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3361      	adds	r3, #97	; 0x61
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d122      	bne.n	8002f28 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3360      	adds	r3, #96	; 0x60
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f0a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f12:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e023      	b.n	8002f70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3361      	adds	r3, #97	; 0x61
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b07      	cmp	r3, #7
 8002f3a:	d119      	bne.n	8002f70 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	335c      	adds	r3, #92	; 0x5c
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	202c      	movs	r0, #44	; 0x2c
 8002f54:	fb00 f303 	mul.w	r3, r0, r3
 8002f58:	440b      	add	r3, r1
 8002f5a:	335c      	adds	r3, #92	; 0x5c
 8002f5c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3360      	adds	r3, #96	; 0x60
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2302      	movs	r3, #2
 8002f80:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	b2d9      	uxtb	r1, r3
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	202c      	movs	r0, #44	; 0x2c
 8002f8c:	fb00 f303 	mul.w	r3, r0, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3360      	adds	r3, #96	; 0x60
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f009 f8df 	bl	800c15c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f9e:	e061      	b.n	8003064 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d156      	bne.n	8003064 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	333f      	adds	r3, #63	; 0x3f
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d111      	bne.n	8002fee <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	335c      	adds	r3, #92	; 0x5c
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 f923 	bl	8007232 <USB_HC_Halt>
 8002fec:	e031      	b.n	8003052 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	333f      	adds	r3, #63	; 0x3f
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	333f      	adds	r3, #63	; 0x3f
 8003010:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003012:	2b02      	cmp	r3, #2
 8003014:	d11d      	bne.n	8003052 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	335c      	adds	r3, #92	; 0x5c
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d110      	bne.n	8003052 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	3361      	adds	r3, #97	; 0x61
 800303e:	2203      	movs	r2, #3
 8003040:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f004 f8f0 	bl	8007232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	461a      	mov	r2, r3
 8003060:	2310      	movs	r3, #16
 8003062:	6093      	str	r3, [r2, #8]
}
 8003064:	bf00      	nop
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d11a      	bne.n	80030d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	461a      	mov	r2, r3
 80030aa:	2304      	movs	r3, #4
 80030ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3361      	adds	r3, #97	; 0x61
 80030bc:	2206      	movs	r2, #6
 80030be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 f8b1 	bl	8007232 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80030d0:	e331      	b.n	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d12e      	bne.n	8003146 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	461a      	mov	r2, r3
 80030f6:	2320      	movs	r3, #32
 80030f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	333d      	adds	r3, #61	; 0x3d
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	f040 8313 	bne.w	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	333d      	adds	r3, #61	; 0x3d
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3360      	adds	r3, #96	; 0x60
 8003130:	2202      	movs	r2, #2
 8003132:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f004 f877 	bl	8007232 <USB_HC_Halt>
}
 8003144:	e2f7      	b.n	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	4413      	add	r3, r2
 800314e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315c:	d112      	bne.n	8003184 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003170:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f004 f858 	bl	8007232 <USB_HC_Halt>
}
 8003182:	e2d8      	b.n	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b01      	cmp	r3, #1
 8003198:	d140      	bne.n	800321c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	335c      	adds	r3, #92	; 0x5c
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d111      	bne.n	80031e6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	333d      	adds	r3, #61	; 0x3d
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	461a      	mov	r2, r3
 80031e2:	2340      	movs	r3, #64	; 0x40
 80031e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f2:	461a      	mov	r2, r3
 80031f4:	2301      	movs	r3, #1
 80031f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	3361      	adds	r3, #97	; 0x61
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f004 f80c 	bl	8007232 <USB_HC_Halt>
}
 800321a:	e28c      	b.n	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d12c      	bne.n	800328c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3361      	adds	r3, #97	; 0x61
 8003240:	2204      	movs	r2, #4
 8003242:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	333d      	adds	r3, #61	; 0x3d
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	335c      	adds	r3, #92	; 0x5c
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f003 ffdd 	bl	8007232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	461a      	mov	r2, r3
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	6093      	str	r3, [r2, #8]
}
 800328a:	e254      	b.n	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d11a      	bne.n	80032d8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	461a      	mov	r2, r3
 80032b0:	2308      	movs	r3, #8
 80032b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3361      	adds	r3, #97	; 0x61
 80032c2:	2205      	movs	r2, #5
 80032c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 ffae 	bl	8007232 <USB_HC_Halt>
}
 80032d6:	e22e      	b.n	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d140      	bne.n	8003370 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	335c      	adds	r3, #92	; 0x5c
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3361      	adds	r3, #97	; 0x61
 800330e:	2203      	movs	r2, #3
 8003310:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	333d      	adds	r3, #61	; 0x3d
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d112      	bne.n	800334c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	333c      	adds	r3, #60	; 0x3c
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	333d      	adds	r3, #61	; 0x3d
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f003 ff6b 	bl	8007232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	2310      	movs	r3, #16
 800336c:	6093      	str	r3, [r2, #8]
}
 800336e:	e1e2      	b.n	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d164      	bne.n	8003450 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d111      	bne.n	80033b2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3361      	adds	r3, #97	; 0x61
 800339c:	2206      	movs	r2, #6
 800339e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 ff41 	bl	8007232 <USB_HC_Halt>
 80033b0:	e044      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	335c      	adds	r3, #92	; 0x5c
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	202c      	movs	r0, #44	; 0x2c
 80033ca:	fb00 f303 	mul.w	r3, r0, r3
 80033ce:	440b      	add	r3, r1
 80033d0:	335c      	adds	r3, #92	; 0x5c
 80033d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	335c      	adds	r3, #92	; 0x5c
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d920      	bls.n	800342a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	335c      	adds	r3, #92	; 0x5c
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	3360      	adds	r3, #96	; 0x60
 8003408:	2204      	movs	r2, #4
 800340a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	b2d9      	uxtb	r1, r3
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	202c      	movs	r0, #44	; 0x2c
 8003416:	fb00 f303 	mul.w	r3, r0, r3
 800341a:	4413      	add	r3, r2
 800341c:	3360      	adds	r3, #96	; 0x60
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f008 fe9a 	bl	800c15c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003428:	e008      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3360      	adds	r3, #96	; 0x60
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	461a      	mov	r2, r3
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	6093      	str	r3, [r2, #8]
}
 800344e:	e172      	b.n	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003466:	d11b      	bne.n	80034a0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3361      	adds	r3, #97	; 0x61
 8003476:	2208      	movs	r2, #8
 8003478:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f003 fed4 	bl	8007232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	461a      	mov	r2, r3
 8003498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800349c:	6093      	str	r3, [r2, #8]
}
 800349e:	e14a      	b.n	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	f040 813f 	bne.w	8003736 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3361      	adds	r3, #97	; 0x61
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d17d      	bne.n	80035c8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3360      	adds	r3, #96	; 0x60
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	333f      	adds	r3, #63	; 0x3f
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d00a      	beq.n	8003508 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	333f      	adds	r3, #63	; 0x3f
 8003500:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003502:	2b03      	cmp	r3, #3
 8003504:	f040 8100 	bne.w	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d113      	bne.n	8003538 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3355      	adds	r3, #85	; 0x55
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	f083 0301 	eor.w	r3, r3, #1
 8003524:	b2d8      	uxtb	r0, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3355      	adds	r3, #85	; 0x55
 8003534:	4602      	mov	r2, r0
 8003536:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 80e3 	bne.w	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	334c      	adds	r3, #76	; 0x4c
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80d8 	beq.w	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	334c      	adds	r3, #76	; 0x4c
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	202c      	movs	r0, #44	; 0x2c
 800356e:	fb00 f202 	mul.w	r2, r0, r2
 8003572:	440a      	add	r2, r1
 8003574:	3240      	adds	r2, #64	; 0x40
 8003576:	8812      	ldrh	r2, [r2, #0]
 8003578:	4413      	add	r3, r2
 800357a:	3b01      	subs	r3, #1
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	202c      	movs	r0, #44	; 0x2c
 8003582:	fb00 f202 	mul.w	r2, r0, r2
 8003586:	440a      	add	r2, r1
 8003588:	3240      	adds	r2, #64	; 0x40
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80b5 	beq.w	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	3355      	adds	r3, #85	; 0x55
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	f083 0301 	eor.w	r3, r3, #1
 80035b2:	b2d8      	uxtb	r0, r3
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3355      	adds	r3, #85	; 0x55
 80035c2:	4602      	mov	r2, r0
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e09f      	b.n	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	3361      	adds	r3, #97	; 0x61
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d109      	bne.n	80035f0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3360      	adds	r3, #96	; 0x60
 80035ea:	2202      	movs	r2, #2
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e08b      	b.n	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3361      	adds	r3, #97	; 0x61
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d109      	bne.n	8003618 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	212c      	movs	r1, #44	; 0x2c
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	3360      	adds	r3, #96	; 0x60
 8003612:	2202      	movs	r2, #2
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e077      	b.n	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	212c      	movs	r1, #44	; 0x2c
 800361e:	fb01 f303 	mul.w	r3, r1, r3
 8003622:	4413      	add	r3, r2
 8003624:	3361      	adds	r3, #97	; 0x61
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b05      	cmp	r3, #5
 800362a:	d109      	bne.n	8003640 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	212c      	movs	r1, #44	; 0x2c
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	4413      	add	r3, r2
 8003638:	3360      	adds	r3, #96	; 0x60
 800363a:	2205      	movs	r2, #5
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e063      	b.n	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	212c      	movs	r1, #44	; 0x2c
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	4413      	add	r3, r2
 800364c:	3361      	adds	r3, #97	; 0x61
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b06      	cmp	r3, #6
 8003652:	d009      	beq.n	8003668 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3361      	adds	r3, #97	; 0x61
 8003662:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003664:	2b08      	cmp	r3, #8
 8003666:	d14f      	bne.n	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	335c      	adds	r3, #92	; 0x5c
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	202c      	movs	r0, #44	; 0x2c
 8003680:	fb00 f303 	mul.w	r3, r0, r3
 8003684:	440b      	add	r3, r1
 8003686:	335c      	adds	r3, #92	; 0x5c
 8003688:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	335c      	adds	r3, #92	; 0x5c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d912      	bls.n	80036c4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	335c      	adds	r3, #92	; 0x5c
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3360      	adds	r3, #96	; 0x60
 80036be:	2204      	movs	r2, #4
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e021      	b.n	8003708 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	3360      	adds	r3, #96	; 0x60
 80036d2:	2202      	movs	r2, #2
 80036d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036ec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036f4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003702:	461a      	mov	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	461a      	mov	r2, r3
 8003716:	2302      	movs	r3, #2
 8003718:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	b2d9      	uxtb	r1, r3
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	202c      	movs	r0, #44	; 0x2c
 8003724:	fb00 f303 	mul.w	r3, r0, r3
 8003728:	4413      	add	r3, r2
 800372a:	3360      	adds	r3, #96	; 0x60
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f008 fd13 	bl	800c15c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003736:	bf00      	nop
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b08a      	sub	sp, #40	; 0x28
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	0c5b      	lsrs	r3, r3, #17
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003772:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d004      	beq.n	8003784 <HCD_RXQLVL_IRQHandler+0x46>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b05      	cmp	r3, #5
 800377e:	f000 80a9 	beq.w	80038d4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003782:	e0aa      	b.n	80038da <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80a6 	beq.w	80038d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	3344      	adds	r3, #68	; 0x44
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 809b 	beq.w	80038d8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	3350      	adds	r3, #80	; 0x50
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	441a      	add	r2, r3
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	202c      	movs	r0, #44	; 0x2c
 80037bc:	fb00 f303 	mul.w	r3, r0, r3
 80037c0:	440b      	add	r3, r1
 80037c2:	334c      	adds	r3, #76	; 0x4c
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d87a      	bhi.n	80038c0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	212c      	movs	r1, #44	; 0x2c
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	4413      	add	r3, r2
 80037da:	3344      	adds	r3, #68	; 0x44
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	b292      	uxth	r2, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	f003 f87c 	bl	80068e0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	212c      	movs	r1, #44	; 0x2c
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	3344      	adds	r3, #68	; 0x44
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	441a      	add	r2, r3
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	202c      	movs	r0, #44	; 0x2c
 8003802:	fb00 f303 	mul.w	r3, r0, r3
 8003806:	440b      	add	r3, r1
 8003808:	3344      	adds	r3, #68	; 0x44
 800380a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3350      	adds	r3, #80	; 0x50
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	441a      	add	r2, r3
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	202c      	movs	r0, #44	; 0x2c
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	440b      	add	r3, r1
 800382c:	3350      	adds	r3, #80	; 0x50
 800382e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	0cdb      	lsrs	r3, r3, #19
 8003840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003844:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	3340      	adds	r3, #64	; 0x40
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4293      	cmp	r3, r2
 800385c:	d13c      	bne.n	80038d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d039      	beq.n	80038d8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800387a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003882:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	461a      	mov	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3354      	adds	r3, #84	; 0x54
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	f083 0301 	eor.w	r3, r3, #1
 80038aa:	b2d8      	uxtb	r0, r3
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3354      	adds	r3, #84	; 0x54
 80038ba:	4602      	mov	r2, r0
 80038bc:	701a      	strb	r2, [r3, #0]
      break;
 80038be:	e00b      	b.n	80038d8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3360      	adds	r3, #96	; 0x60
 80038ce:	2204      	movs	r2, #4
 80038d0:	701a      	strb	r2, [r3, #0]
      break;
 80038d2:	e001      	b.n	80038d8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80038d4:	bf00      	nop
 80038d6:	e000      	b.n	80038da <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80038d8:	bf00      	nop
  }
}
 80038da:	bf00      	nop
 80038dc:	3728      	adds	r7, #40	; 0x28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800390e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d10b      	bne.n	8003932 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d102      	bne.n	800392a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f008 fbfd 	bl	800c124 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b08      	cmp	r3, #8
 800393a:	d132      	bne.n	80039a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f043 0308 	orr.w	r3, r3, #8
 8003942:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d126      	bne.n	800399c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d113      	bne.n	800397e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800395c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003960:	d106      	bne.n	8003970 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f003 f927 	bl	8006bbc <USB_InitFSLSPClkSel>
 800396e:	e011      	b.n	8003994 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f003 f920 	bl	8006bbc <USB_InitFSLSPClkSel>
 800397c:	e00a      	b.n	8003994 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d106      	bne.n	8003994 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800398c:	461a      	mov	r2, r3
 800398e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003992:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f008 fbf3 	bl	800c180 <HAL_HCD_PortEnabled_Callback>
 800399a:	e002      	b.n	80039a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f008 fbfd 	bl	800c19c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d103      	bne.n	80039b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f043 0320 	orr.w	r3, r3, #32
 80039b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039ba:	461a      	mov	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6013      	str	r3, [r2, #0]
}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e12b      	b.n	8003c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fa84 	bl	8000efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2224      	movs	r2, #36	; 0x24
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a2c:	f001 f964 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8003a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4a81      	ldr	r2, [pc, #516]	; (8003c3c <HAL_I2C_Init+0x274>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d807      	bhi.n	8003a4c <HAL_I2C_Init+0x84>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a80      	ldr	r2, [pc, #512]	; (8003c40 <HAL_I2C_Init+0x278>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bf94      	ite	ls
 8003a44:	2301      	movls	r3, #1
 8003a46:	2300      	movhi	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e006      	b.n	8003a5a <HAL_I2C_Init+0x92>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a7d      	ldr	r2, [pc, #500]	; (8003c44 <HAL_I2C_Init+0x27c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	bf94      	ite	ls
 8003a54:	2301      	movls	r3, #1
 8003a56:	2300      	movhi	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0e7      	b.n	8003c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4a78      	ldr	r2, [pc, #480]	; (8003c48 <HAL_I2C_Init+0x280>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	0c9b      	lsrs	r3, r3, #18
 8003a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a6a      	ldr	r2, [pc, #424]	; (8003c3c <HAL_I2C_Init+0x274>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d802      	bhi.n	8003a9c <HAL_I2C_Init+0xd4>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	e009      	b.n	8003ab0 <HAL_I2C_Init+0xe8>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	4a69      	ldr	r2, [pc, #420]	; (8003c4c <HAL_I2C_Init+0x284>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	3301      	adds	r3, #1
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	495c      	ldr	r1, [pc, #368]	; (8003c3c <HAL_I2C_Init+0x274>)
 8003acc:	428b      	cmp	r3, r1
 8003ace:	d819      	bhi.n	8003b04 <HAL_I2C_Init+0x13c>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e59      	subs	r1, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ade:	1c59      	adds	r1, r3, #1
 8003ae0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ae4:	400b      	ands	r3, r1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_I2C_Init+0x138>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1e59      	subs	r1, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afe:	e051      	b.n	8003ba4 <HAL_I2C_Init+0x1dc>
 8003b00:	2304      	movs	r3, #4
 8003b02:	e04f      	b.n	8003ba4 <HAL_I2C_Init+0x1dc>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d111      	bne.n	8003b30 <HAL_I2C_Init+0x168>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1e58      	subs	r0, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	440b      	add	r3, r1
 8003b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e012      	b.n	8003b56 <HAL_I2C_Init+0x18e>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1e58      	subs	r0, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	0099      	lsls	r1, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b46:	3301      	adds	r3, #1
 8003b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_I2C_Init+0x196>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e022      	b.n	8003ba4 <HAL_I2C_Init+0x1dc>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10e      	bne.n	8003b84 <HAL_I2C_Init+0x1bc>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1e58      	subs	r0, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6859      	ldr	r1, [r3, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	440b      	add	r3, r1
 8003b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b82:	e00f      	b.n	8003ba4 <HAL_I2C_Init+0x1dc>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e58      	subs	r0, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	0099      	lsls	r1, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	6809      	ldr	r1, [r1, #0]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6911      	ldr	r1, [r2, #16]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	4311      	orrs	r1, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	000186a0 	.word	0x000186a0
 8003c40:	001e847f 	.word	0x001e847f
 8003c44:	003d08ff 	.word	0x003d08ff
 8003c48:	431bde83 	.word	0x431bde83
 8003c4c:	10624dd3 	.word	0x10624dd3

08003c50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d129      	bne.n	8003cba <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2224      	movs	r2, #36	; 0x24
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0210 	bic.w	r2, r2, #16
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d12a      	bne.n	8003d38 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2224      	movs	r2, #36	; 0x24
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003d02:	89fb      	ldrh	r3, [r7, #14]
 8003d04:	f023 030f 	bic.w	r3, r3, #15
 8003d08:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	89fb      	ldrh	r3, [r7, #14]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	89fa      	ldrh	r2, [r7, #14]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0bf      	b.n	8003eda <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd f92e 	bl	8000fd0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d8a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6999      	ldr	r1, [r3, #24]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003da0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <HAL_LTDC_Init+0x19c>)
 8003dbc:	400b      	ands	r3, r1
 8003dbe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6899      	ldr	r1, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68d9      	ldr	r1, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_LTDC_Init+0x19c>)
 8003dea:	400b      	ands	r3, r1
 8003dec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68d9      	ldr	r1, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6919      	ldr	r1, [r3, #16]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <HAL_LTDC_Init+0x19c>)
 8003e18:	400b      	ands	r3, r1
 8003e1a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6919      	ldr	r1, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6959      	ldr	r1, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <HAL_LTDC_Init+0x19c>)
 8003e46:	400b      	ands	r3, r1
 8003e48:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6959      	ldr	r1, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0206 	orr.w	r2, r2, #6
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	f000f800 	.word	0xf000f800

08003ee8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d023      	beq.n	8003f52 <HAL_LTDC_IRQHandler+0x6a>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01e      	beq.n	8003f52 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0204 	bic.w	r2, r2, #4
 8003f22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f32:	f043 0201 	orr.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f86f 	bl	8004030 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d023      	beq.n	8003fa4 <HAL_LTDC_IRQHandler+0xbc>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01e      	beq.n	8003fa4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0202 	bic.w	r2, r2, #2
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f84:	f043 0202 	orr.w	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2204      	movs	r2, #4
 8003f92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f846 	bl	8004030 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01b      	beq.n	8003fe6 <HAL_LTDC_IRQHandler+0xfe>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d016      	beq.n	8003fe6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f82f 	bl	8004044 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01b      	beq.n	8004028 <HAL_LTDC_IRQHandler+0x140>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0208 	bic.w	r2, r2, #8
 8004008:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2208      	movs	r2, #8
 8004010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f818 	bl	8004058 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800406c:	b5b0      	push	{r4, r5, r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_LTDC_ConfigLayer+0x1a>
 8004082:	2302      	movs	r3, #2
 8004084:	e02c      	b.n	80040e0 <HAL_LTDC_ConfigLayer+0x74>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2134      	movs	r1, #52	; 0x34
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4614      	mov	r4, r2
 80040aa:	461d      	mov	r5, r3
 80040ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f811 	bl	80040e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bdb0      	pop	{r4, r5, r7, pc}

080040e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	; 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004104:	4413      	add	r3, r2
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	01db      	lsls	r3, r3, #7
 8004114:	4413      	add	r3, r2
 8004116:	3384      	adds	r3, #132	; 0x84
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	4611      	mov	r1, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	01d2      	lsls	r2, r2, #7
 8004124:	440a      	add	r2, r1
 8004126:	3284      	adds	r2, #132	; 0x84
 8004128:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800412c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800413e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004140:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4619      	mov	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	01db      	lsls	r3, r3, #7
 800414c:	440b      	add	r3, r1
 800414e:	3384      	adds	r3, #132	; 0x84
 8004150:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004156:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004166:	4413      	add	r3, r2
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	01db      	lsls	r3, r3, #7
 8004176:	4413      	add	r3, r2
 8004178:	3384      	adds	r3, #132	; 0x84
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	4611      	mov	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	01d2      	lsls	r2, r2, #7
 8004186:	440a      	add	r2, r1
 8004188:	3284      	adds	r2, #132	; 0x84
 800418a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800418e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800419e:	4413      	add	r3, r2
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	01db      	lsls	r3, r3, #7
 80041ac:	440b      	add	r3, r1
 80041ae:	3384      	adds	r3, #132	; 0x84
 80041b0:	4619      	mov	r1, r3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	01db      	lsls	r3, r3, #7
 80041c2:	4413      	add	r3, r2
 80041c4:	3384      	adds	r3, #132	; 0x84
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	4611      	mov	r1, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	01d2      	lsls	r2, r2, #7
 80041d2:	440a      	add	r2, r1
 80041d4:	3284      	adds	r2, #132	; 0x84
 80041d6:	f023 0307 	bic.w	r3, r3, #7
 80041da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	01db      	lsls	r3, r3, #7
 80041e6:	4413      	add	r3, r2
 80041e8:	3384      	adds	r3, #132	; 0x84
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	01db      	lsls	r3, r3, #7
 8004218:	4413      	add	r3, r2
 800421a:	3384      	adds	r3, #132	; 0x84
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	01db      	lsls	r3, r3, #7
 8004228:	4413      	add	r3, r2
 800422a:	3384      	adds	r3, #132	; 0x84
 800422c:	461a      	mov	r2, r3
 800422e:	2300      	movs	r3, #0
 8004230:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004238:	461a      	mov	r2, r3
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	431a      	orrs	r2, r3
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4619      	mov	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	01db      	lsls	r3, r3, #7
 800424c:	440b      	add	r3, r1
 800424e:	3384      	adds	r3, #132	; 0x84
 8004250:	4619      	mov	r1, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	01db      	lsls	r3, r3, #7
 8004262:	4413      	add	r3, r2
 8004264:	3384      	adds	r3, #132	; 0x84
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	4611      	mov	r1, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	01d2      	lsls	r2, r2, #7
 8004272:	440a      	add	r2, r1
 8004274:	3284      	adds	r2, #132	; 0x84
 8004276:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800427a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	01db      	lsls	r3, r3, #7
 8004286:	4413      	add	r3, r2
 8004288:	3384      	adds	r3, #132	; 0x84
 800428a:	461a      	mov	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	01db      	lsls	r3, r3, #7
 800429c:	4413      	add	r3, r2
 800429e:	3384      	adds	r3, #132	; 0x84
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	4611      	mov	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	01d2      	lsls	r2, r2, #7
 80042ac:	440a      	add	r2, r1
 80042ae:	3284      	adds	r2, #132	; 0x84
 80042b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042b4:	f023 0307 	bic.w	r3, r3, #7
 80042b8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	69da      	ldr	r2, [r3, #28]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	6809      	ldr	r1, [r1, #0]
 80042c6:	4608      	mov	r0, r1
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	01c9      	lsls	r1, r1, #7
 80042cc:	4401      	add	r1, r0
 80042ce:	3184      	adds	r1, #132	; 0x84
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	01db      	lsls	r3, r3, #7
 80042de:	4413      	add	r3, r2
 80042e0:	3384      	adds	r3, #132	; 0x84
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	01db      	lsls	r3, r3, #7
 80042ee:	4413      	add	r3, r2
 80042f0:	3384      	adds	r3, #132	; 0x84
 80042f2:	461a      	mov	r2, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	01db      	lsls	r3, r3, #7
 8004302:	4413      	add	r3, r2
 8004304:	3384      	adds	r3, #132	; 0x84
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004316:	2304      	movs	r3, #4
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	e01b      	b.n	8004354 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d102      	bne.n	800432a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004324:	2303      	movs	r3, #3
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e014      	b.n	8004354 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b04      	cmp	r3, #4
 8004330:	d00b      	beq.n	800434a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004336:	2b02      	cmp	r3, #2
 8004338:	d007      	beq.n	800434a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800433e:	2b03      	cmp	r3, #3
 8004340:	d003      	beq.n	800434a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004346:	2b07      	cmp	r3, #7
 8004348:	d102      	bne.n	8004350 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800434a:	2302      	movs	r3, #2
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	e001      	b.n	8004354 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004350:	2301      	movs	r3, #1
 8004352:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	01db      	lsls	r3, r3, #7
 800435e:	4413      	add	r3, r2
 8004360:	3384      	adds	r3, #132	; 0x84
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	4611      	mov	r1, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	01d2      	lsls	r2, r2, #7
 800436e:	440a      	add	r2, r1
 8004370:	3284      	adds	r2, #132	; 0x84
 8004372:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004376:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	1acb      	subs	r3, r1, r3
 800438e:	69f9      	ldr	r1, [r7, #28]
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	6809      	ldr	r1, [r1, #0]
 800439a:	4608      	mov	r0, r1
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	01c9      	lsls	r1, r1, #7
 80043a0:	4401      	add	r1, r0
 80043a2:	3184      	adds	r1, #132	; 0x84
 80043a4:	4313      	orrs	r3, r2
 80043a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	01db      	lsls	r3, r3, #7
 80043b2:	4413      	add	r3, r2
 80043b4:	3384      	adds	r3, #132	; 0x84
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	4611      	mov	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	01d2      	lsls	r2, r2, #7
 80043c2:	440a      	add	r2, r1
 80043c4:	3284      	adds	r2, #132	; 0x84
 80043c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043ca:	f023 0307 	bic.w	r3, r3, #7
 80043ce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	01db      	lsls	r3, r3, #7
 80043da:	4413      	add	r3, r2
 80043dc:	3384      	adds	r3, #132	; 0x84
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	01db      	lsls	r3, r3, #7
 80043f0:	4413      	add	r3, r2
 80043f2:	3384      	adds	r3, #132	; 0x84
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	4611      	mov	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	01d2      	lsls	r2, r2, #7
 8004400:	440a      	add	r2, r1
 8004402:	3284      	adds	r2, #132	; 0x84
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6013      	str	r3, [r2, #0]
}
 800440a:	bf00      	nop
 800440c:	3724      	adds	r7, #36	; 0x24
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e267      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d075      	beq.n	8004522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004436:	4b88      	ldr	r3, [pc, #544]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b04      	cmp	r3, #4
 8004440:	d00c      	beq.n	800445c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004442:	4b85      	ldr	r3, [pc, #532]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444a:	2b08      	cmp	r3, #8
 800444c:	d112      	bne.n	8004474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800444e:	4b82      	ldr	r3, [pc, #520]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800445a:	d10b      	bne.n	8004474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	4b7e      	ldr	r3, [pc, #504]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d05b      	beq.n	8004520 <HAL_RCC_OscConfig+0x108>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d157      	bne.n	8004520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e242      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447c:	d106      	bne.n	800448c <HAL_RCC_OscConfig+0x74>
 800447e:	4b76      	ldr	r3, [pc, #472]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a75      	ldr	r2, [pc, #468]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e01d      	b.n	80044c8 <HAL_RCC_OscConfig+0xb0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x98>
 8004496:	4b70      	ldr	r3, [pc, #448]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6f      	ldr	r2, [pc, #444]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 800449c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b6d      	ldr	r3, [pc, #436]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a6c      	ldr	r2, [pc, #432]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e00b      	b.n	80044c8 <HAL_RCC_OscConfig+0xb0>
 80044b0:	4b69      	ldr	r3, [pc, #420]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a68      	ldr	r2, [pc, #416]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b66      	ldr	r3, [pc, #408]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a65      	ldr	r2, [pc, #404]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80044c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d013      	beq.n	80044f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fd f95e 	bl	8001790 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fd f95a 	bl	8001790 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e207      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	4b5b      	ldr	r3, [pc, #364]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0xc0>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fd f94a 	bl	8001790 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004500:	f7fd f946 	bl	8001790 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1f3      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	4b51      	ldr	r3, [pc, #324]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0xe8>
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d063      	beq.n	80045f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800452e:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453a:	4b47      	ldr	r3, [pc, #284]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004542:	2b08      	cmp	r3, #8
 8004544:	d11c      	bne.n	8004580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004546:	4b44      	ldr	r3, [pc, #272]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d116      	bne.n	8004580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004552:	4b41      	ldr	r3, [pc, #260]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_RCC_OscConfig+0x152>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e1c7      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456a:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4937      	ldr	r1, [pc, #220]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457e:	e03a      	b.n	80045f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d020      	beq.n	80045ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004588:	4b34      	ldr	r3, [pc, #208]	; (800465c <HAL_RCC_OscConfig+0x244>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fd f8ff 	bl	8001790 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004596:	f7fd f8fb 	bl	8001790 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e1a8      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b4:	4b28      	ldr	r3, [pc, #160]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4925      	ldr	r1, [pc, #148]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]
 80045c8:	e015      	b.n	80045f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <HAL_RCC_OscConfig+0x244>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd f8de 	bl	8001790 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d8:	f7fd f8da 	bl	8001790 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e187      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d036      	beq.n	8004670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <HAL_RCC_OscConfig+0x248>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fd f8be 	bl	8001790 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004618:	f7fd f8ba 	bl	8001790 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e167      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_OscConfig+0x240>)
 800462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x200>
 8004636:	e01b      	b.n	8004670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_RCC_OscConfig+0x248>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463e:	f7fd f8a7 	bl	8001790 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	e00e      	b.n	8004664 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004646:	f7fd f8a3 	bl	8001790 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d907      	bls.n	8004664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e150      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
 8004658:	40023800 	.word	0x40023800
 800465c:	42470000 	.word	0x42470000
 8004660:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004664:	4b88      	ldr	r3, [pc, #544]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ea      	bne.n	8004646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8097 	beq.w	80047ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004682:	4b81      	ldr	r3, [pc, #516]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10f      	bne.n	80046ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	4b7d      	ldr	r3, [pc, #500]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	4a7c      	ldr	r2, [pc, #496]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469c:	6413      	str	r3, [r2, #64]	; 0x40
 800469e:	4b7a      	ldr	r3, [pc, #488]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ae:	4b77      	ldr	r3, [pc, #476]	; (800488c <HAL_RCC_OscConfig+0x474>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d118      	bne.n	80046ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ba:	4b74      	ldr	r3, [pc, #464]	; (800488c <HAL_RCC_OscConfig+0x474>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a73      	ldr	r2, [pc, #460]	; (800488c <HAL_RCC_OscConfig+0x474>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c6:	f7fd f863 	bl	8001790 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ce:	f7fd f85f 	bl	8001790 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e10c      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	4b6a      	ldr	r3, [pc, #424]	; (800488c <HAL_RCC_OscConfig+0x474>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d106      	bne.n	8004702 <HAL_RCC_OscConfig+0x2ea>
 80046f4:	4b64      	ldr	r3, [pc, #400]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a63      	ldr	r2, [pc, #396]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	e01c      	b.n	800473c <HAL_RCC_OscConfig+0x324>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d10c      	bne.n	8004724 <HAL_RCC_OscConfig+0x30c>
 800470a:	4b5f      	ldr	r3, [pc, #380]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	4a5e      	ldr	r2, [pc, #376]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004710:	f043 0304 	orr.w	r3, r3, #4
 8004714:	6713      	str	r3, [r2, #112]	; 0x70
 8004716:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a5b      	ldr	r2, [pc, #364]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	e00b      	b.n	800473c <HAL_RCC_OscConfig+0x324>
 8004724:	4b58      	ldr	r3, [pc, #352]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	4a57      	ldr	r2, [pc, #348]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	6713      	str	r3, [r2, #112]	; 0x70
 8004730:	4b55      	ldr	r3, [pc, #340]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a54      	ldr	r2, [pc, #336]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004736:	f023 0304 	bic.w	r3, r3, #4
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d015      	beq.n	8004770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fd f824 	bl	8001790 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800474c:	f7fd f820 	bl	8001790 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	; 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0cb      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004762:	4b49      	ldr	r3, [pc, #292]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0ee      	beq.n	800474c <HAL_RCC_OscConfig+0x334>
 800476e:	e014      	b.n	800479a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004770:	f7fd f80e 	bl	8001790 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fd f80a 	bl	8001790 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	; 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e0b5      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478e:	4b3e      	ldr	r3, [pc, #248]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1ee      	bne.n	8004778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d105      	bne.n	80047ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a0:	4b39      	ldr	r3, [pc, #228]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	4a38      	ldr	r2, [pc, #224]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 80047a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80a1 	beq.w	80048f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047b6:	4b34      	ldr	r3, [pc, #208]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d05c      	beq.n	800487c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d141      	bne.n	800484e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ca:	4b31      	ldr	r3, [pc, #196]	; (8004890 <HAL_RCC_OscConfig+0x478>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fc ffde 	bl	8001790 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fc ffda 	bl	8001790 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e087      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	4b27      	ldr	r3, [pc, #156]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69da      	ldr	r2, [r3, #28]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	3b01      	subs	r3, #1
 8004810:	041b      	lsls	r3, r3, #16
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	061b      	lsls	r3, r3, #24
 800481a:	491b      	ldr	r1, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <HAL_RCC_OscConfig+0x478>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fc ffb3 	bl	8001790 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482e:	f7fc ffaf 	bl	8001790 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e05c      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x416>
 800484c:	e054      	b.n	80048f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_RCC_OscConfig+0x478>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fc ff9c 	bl	8001790 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485c:	f7fc ff98 	bl	8001790 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e045      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_RCC_OscConfig+0x470>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x444>
 800487a:	e03d      	b.n	80048f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d107      	bne.n	8004894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e038      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
 8004888:	40023800 	.word	0x40023800
 800488c:	40007000 	.word	0x40007000
 8004890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004894:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <HAL_RCC_OscConfig+0x4ec>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d028      	beq.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d121      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d11a      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048c4:	4013      	ands	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d111      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	3b01      	subs	r3, #1
 80048de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d107      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800

08004908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0cc      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800491c:	4b68      	ldr	r3, [pc, #416]	; (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d90c      	bls.n	8004944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b65      	ldr	r3, [pc, #404]	; (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b63      	ldr	r3, [pc, #396]	; (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0b8      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d020      	beq.n	8004992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800495c:	4b59      	ldr	r3, [pc, #356]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a58      	ldr	r2, [pc, #352]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004974:	4b53      	ldr	r3, [pc, #332]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a52      	ldr	r2, [pc, #328]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800497e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004980:	4b50      	ldr	r3, [pc, #320]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	494d      	ldr	r1, [pc, #308]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d044      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d119      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e07f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d003      	beq.n	80049c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c6:	4b3f      	ldr	r3, [pc, #252]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e06f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d6:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e067      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e6:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4934      	ldr	r1, [pc, #208]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f8:	f7fc feca 	bl	8001790 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a00:	f7fc fec6 	bl	8001790 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e04f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 020c 	and.w	r2, r3, #12
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d1eb      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a28:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d20c      	bcs.n	8004a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e032      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a5c:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4916      	ldr	r1, [pc, #88]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	490e      	ldr	r1, [pc, #56]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a8e:	f000 f821 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004a92:	4602      	mov	r2, r0
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	490a      	ldr	r1, [pc, #40]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	5ccb      	ldrb	r3, [r1, r3]
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	4a09      	ldr	r2, [pc, #36]	; (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aaa:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc fd0c 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023c00 	.word	0x40023c00
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	0800c91c 	.word	0x0800c91c
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	20000004 	.word	0x20000004

08004ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad8:	b094      	sub	sp, #80	; 0x50
 8004ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aec:	4b79      	ldr	r3, [pc, #484]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d00d      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x40>
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	f200 80e1 	bhi.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x34>
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d003      	beq.n	8004b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b06:	e0db      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b08:	4b73      	ldr	r3, [pc, #460]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b0c:	e0db      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b0e:	4b73      	ldr	r3, [pc, #460]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8004b10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b12:	e0d8      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b14:	4b6f      	ldr	r3, [pc, #444]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b1e:	4b6d      	ldr	r3, [pc, #436]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d063      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2a:	4b6a      	ldr	r3, [pc, #424]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	2200      	movs	r2, #0
 8004b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
 8004b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b46:	4622      	mov	r2, r4
 8004b48:	462b      	mov	r3, r5
 8004b4a:	f04f 0000 	mov.w	r0, #0
 8004b4e:	f04f 0100 	mov.w	r1, #0
 8004b52:	0159      	lsls	r1, r3, #5
 8004b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b58:	0150      	lsls	r0, r2, #5
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4621      	mov	r1, r4
 8004b60:	1a51      	subs	r1, r2, r1
 8004b62:	6139      	str	r1, [r7, #16]
 8004b64:	4629      	mov	r1, r5
 8004b66:	eb63 0301 	sbc.w	r3, r3, r1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b78:	4659      	mov	r1, fp
 8004b7a:	018b      	lsls	r3, r1, #6
 8004b7c:	4651      	mov	r1, sl
 8004b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b82:	4651      	mov	r1, sl
 8004b84:	018a      	lsls	r2, r1, #6
 8004b86:	4651      	mov	r1, sl
 8004b88:	ebb2 0801 	subs.w	r8, r2, r1
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ba6:	4690      	mov	r8, r2
 8004ba8:	4699      	mov	r9, r3
 8004baa:	4623      	mov	r3, r4
 8004bac:	eb18 0303 	adds.w	r3, r8, r3
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	eb49 0303 	adc.w	r3, r9, r3
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	024b      	lsls	r3, r1, #9
 8004bca:	4621      	mov	r1, r4
 8004bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	024a      	lsls	r2, r1, #9
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bda:	2200      	movs	r2, #0
 8004bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004be4:	f7fb fb04 	bl	80001f0 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf0:	e058      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf2:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	099b      	lsrs	r3, r3, #6
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
 8004c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	f04f 0000 	mov.w	r0, #0
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	0159      	lsls	r1, r3, #5
 8004c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1e:	0150      	lsls	r0, r2, #5
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4641      	mov	r1, r8
 8004c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c44:	ebb2 040a 	subs.w	r4, r2, sl
 8004c48:	eb63 050b 	sbc.w	r5, r3, fp
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	00eb      	lsls	r3, r5, #3
 8004c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5a:	00e2      	lsls	r2, r4, #3
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	461d      	mov	r5, r3
 8004c60:	4643      	mov	r3, r8
 8004c62:	18e3      	adds	r3, r4, r3
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	464b      	mov	r3, r9
 8004c68:	eb45 0303 	adc.w	r3, r5, r3
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	028b      	lsls	r3, r1, #10
 8004c7e:	4621      	mov	r1, r4
 8004c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c84:	4621      	mov	r1, r4
 8004c86:	028a      	lsls	r2, r1, #10
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8e:	2200      	movs	r2, #0
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	61fa      	str	r2, [r7, #28]
 8004c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c98:	f7fb faaa 	bl	80001f0 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3750      	adds	r7, #80	; 0x50
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	00f42400 	.word	0x00f42400
 8004cdc:	007a1200 	.word	0x007a1200

08004ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000000 	.word	0x20000000

08004cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cfc:	f7ff fff0 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	0a9b      	lsrs	r3, r3, #10
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	4903      	ldr	r1, [pc, #12]	; (8004d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0e:	5ccb      	ldrb	r3, [r1, r3]
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	0800c92c 	.word	0x0800c92c

08004d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d24:	f7ff ffdc 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	0b5b      	lsrs	r3, r3, #13
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	4903      	ldr	r1, [pc, #12]	; (8004d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d36:	5ccb      	ldrb	r3, [r1, r3]
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40023800 	.word	0x40023800
 8004d44:	0800c92c 	.word	0x0800c92c

08004d48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	220f      	movs	r2, #15
 8004d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d58:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <HAL_RCC_GetClockConfig+0x5c>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0203 	and.w	r2, r3, #3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <HAL_RCC_GetClockConfig+0x5c>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d70:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <HAL_RCC_GetClockConfig+0x5c>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_GetClockConfig+0x5c>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d8a:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <HAL_RCC_GetClockConfig+0x60>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 020f 	and.w	r2, r3, #15
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	601a      	str	r2, [r3, #0]
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40023c00 	.word	0x40023c00

08004dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d075      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004de0:	4b91      	ldr	r3, [pc, #580]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004de6:	f7fc fcd3 	bl	8001790 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dee:	f7fc fccf 	bl	8001790 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e189      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e00:	4b8a      	ldr	r3, [pc, #552]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f0      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	019a      	lsls	r2, r3, #6
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	071b      	lsls	r3, r3, #28
 8004e24:	4981      	ldr	r1, [pc, #516]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01f      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e38:	4b7c      	ldr	r3, [pc, #496]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3e:	0f1b      	lsrs	r3, r3, #28
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	019a      	lsls	r2, r3, #6
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	431a      	orrs	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	071b      	lsls	r3, r3, #28
 8004e58:	4974      	ldr	r1, [pc, #464]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e60:	4b72      	ldr	r3, [pc, #456]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e66:	f023 021f 	bic.w	r2, r3, #31
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	496e      	ldr	r1, [pc, #440]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	019a      	lsls	r2, r3, #6
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	061b      	lsls	r3, r3, #24
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	071b      	lsls	r3, r3, #28
 8004e98:	4964      	ldr	r1, [pc, #400]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ea0:	4b61      	ldr	r3, [pc, #388]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea6:	f7fc fc73 	bl	8001790 <HAL_GetTick>
 8004eaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eae:	f7fc fc6f 	bl	8001790 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e129      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ec0:	4b5a      	ldr	r3, [pc, #360]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d079      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ee4:	4b52      	ldr	r3, [pc, #328]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eea:	f7fc fc51 	bl	8001790 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ef2:	f7fc fc4d 	bl	8001790 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e107      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f04:	4b49      	ldr	r3, [pc, #292]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f10:	d0ef      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d020      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f1e:	4b43      	ldr	r3, [pc, #268]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f24:	0f1b      	lsrs	r3, r3, #28
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	019a      	lsls	r2, r3, #6
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	061b      	lsls	r3, r3, #24
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	071b      	lsls	r3, r3, #28
 8004f3e:	493b      	ldr	r1, [pc, #236]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	4934      	ldr	r1, [pc, #208]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01e      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f6c:	4b2f      	ldr	r3, [pc, #188]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	0e1b      	lsrs	r3, r3, #24
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	019a      	lsls	r2, r3, #6
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	061b      	lsls	r3, r3, #24
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	071b      	lsls	r3, r3, #28
 8004f8c:	4927      	ldr	r1, [pc, #156]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f94:	4b25      	ldr	r3, [pc, #148]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	4922      	ldr	r1, [pc, #136]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004faa:	4b21      	ldr	r3, [pc, #132]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb0:	f7fc fbee 	bl	8001790 <HAL_GetTick>
 8004fb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fb8:	f7fc fbea 	bl	8001790 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0a4      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fca:	4b18      	ldr	r3, [pc, #96]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd6:	d1ef      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 808b 	beq.w	80050fc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	4b10      	ldr	r3, [pc, #64]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	4a0f      	ldr	r2, [pc, #60]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a0b      	ldr	r2, [pc, #44]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800500e:	f7fc fbbf 	bl	8001790 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005014:	e010      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005016:	f7fc fbbb 	bl	8001790 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d909      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e075      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005028:	42470068 	.word	0x42470068
 800502c:	40023800 	.word	0x40023800
 8005030:	42470070 	.word	0x42470070
 8005034:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005038:	4b38      	ldr	r3, [pc, #224]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0e8      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005044:	4b36      	ldr	r3, [pc, #216]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d02f      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	429a      	cmp	r2, r3
 8005060:	d028      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005062:	4b2f      	ldr	r3, [pc, #188]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800506c:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005072:	4b2c      	ldr	r3, [pc, #176]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005078:	4a29      	ldr	r2, [pc, #164]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b01      	cmp	r3, #1
 8005088:	d114      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800508a:	f7fc fb81 	bl	8001790 <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005090:	e00a      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fc fb7d 	bl	8001790 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e035      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ee      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c0:	d10d      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x332>
 80050c2:	4b17      	ldr	r3, [pc, #92]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d6:	4912      	ldr	r1, [pc, #72]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	608b      	str	r3, [r1, #8]
 80050dc:	e005      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050e8:	6093      	str	r3, [r2, #8]
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f6:	490a      	ldr	r1, [pc, #40]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005110:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40007000 	.word	0x40007000
 8005120:	40023800 	.word	0x40023800
 8005124:	42470e40 	.word	0x42470e40
 8005128:	424711e0 	.word	0x424711e0

0800512c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e025      	b.n	800518c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7fc f9af 	bl	80014b8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2202      	movs	r2, #2
 800515e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3304      	adds	r3, #4
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f001 f97f 	bl	8006470 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	461a      	mov	r2, r3
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	f001 f9d4 	bl	800652a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e07b      	b.n	800529e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d108      	bne.n	80051c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b6:	d009      	beq.n	80051cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	61da      	str	r2, [r3, #28]
 80051be:	e005      	b.n	80051cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc f822 	bl	8001230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	ea42 0103 	orr.w	r1, r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	f003 0104 	and.w	r1, r3, #4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	f003 0210 	and.w	r2, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800528c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e041      	b.n	800533c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7fb fff7 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3304      	adds	r3, #4
 80052e2:	4619      	mov	r1, r3
 80052e4:	4610      	mov	r0, r2
 80052e6:	f000 fa95 	bl	8005814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d001      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e04e      	b.n	80053fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a23      	ldr	r2, [pc, #140]	; (8005408 <HAL_TIM_Base_Start_IT+0xc4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d01d      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1f      	ldr	r2, [pc, #124]	; (800540c <HAL_TIM_Base_Start_IT+0xc8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d018      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <HAL_TIM_Base_Start_IT+0xcc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <HAL_TIM_Base_Start_IT+0xd0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <HAL_TIM_Base_Start_IT+0xd4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a19      	ldr	r2, [pc, #100]	; (800541c <HAL_TIM_Base_Start_IT+0xd8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_TIM_Base_Start_IT+0xdc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d111      	bne.n	80053e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d010      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e6:	e007      	b.n	80053f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40010000 	.word	0x40010000
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40010400 	.word	0x40010400
 800541c:	40014000 	.word	0x40014000
 8005420:	40001800 	.word	0x40001800

08005424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0202 	mvn.w	r2, #2
 8005450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9b5 	bl	80057d6 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9a7 	bl	80057c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f9b8 	bl	80057ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b04      	cmp	r3, #4
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0204 	mvn.w	r2, #4
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f98b 	bl	80057d6 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f97d 	bl	80057c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f98e 	bl	80057ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0208 	mvn.w	r2, #8
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f961 	bl	80057d6 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f953 	bl	80057c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f964 	bl	80057ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b10      	cmp	r3, #16
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0210 	mvn.w	r2, #16
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2208      	movs	r2, #8
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f937 	bl	80057d6 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f929 	bl	80057c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f93a 	bl	80057ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d10e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0201 	mvn.w	r2, #1
 80055a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fb fc1c 	bl	8000de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d10e      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d107      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fae0 	bl	8005b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d10e      	bne.n	8005600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8ff 	bl	80057fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b20      	cmp	r3, #32
 800560c:	d10e      	bne.n	800562c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b20      	cmp	r3, #32
 800561a:	d107      	bne.n	800562c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0220 	mvn.w	r2, #32
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 faaa 	bl	8005b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_TIM_ConfigClockSource+0x1c>
 800564c:	2302      	movs	r3, #2
 800564e:	e0b4      	b.n	80057ba <HAL_TIM_ConfigClockSource+0x186>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800566e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005688:	d03e      	beq.n	8005708 <HAL_TIM_ConfigClockSource+0xd4>
 800568a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568e:	f200 8087 	bhi.w	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005696:	f000 8086 	beq.w	80057a6 <HAL_TIM_ConfigClockSource+0x172>
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	d87f      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056a0:	2b70      	cmp	r3, #112	; 0x70
 80056a2:	d01a      	beq.n	80056da <HAL_TIM_ConfigClockSource+0xa6>
 80056a4:	2b70      	cmp	r3, #112	; 0x70
 80056a6:	d87b      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056a8:	2b60      	cmp	r3, #96	; 0x60
 80056aa:	d050      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x11a>
 80056ac:	2b60      	cmp	r3, #96	; 0x60
 80056ae:	d877      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056b0:	2b50      	cmp	r3, #80	; 0x50
 80056b2:	d03c      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xfa>
 80056b4:	2b50      	cmp	r3, #80	; 0x50
 80056b6:	d873      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d058      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x13a>
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d86f      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056c0:	2b30      	cmp	r3, #48	; 0x30
 80056c2:	d064      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x15a>
 80056c4:	2b30      	cmp	r3, #48	; 0x30
 80056c6:	d86b      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d060      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x15a>
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d867      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05c      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x15a>
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d05a      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x15a>
 80056d8:	e062      	b.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6899      	ldr	r1, [r3, #8]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f000 f9ad 	bl	8005a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	609a      	str	r2, [r3, #8]
      break;
 8005706:	e04f      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6899      	ldr	r1, [r3, #8]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f000 f996 	bl	8005a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800572a:	609a      	str	r2, [r3, #8]
      break;
 800572c:	e03c      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6859      	ldr	r1, [r3, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	461a      	mov	r2, r3
 800573c:	f000 f90a 	bl	8005954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2150      	movs	r1, #80	; 0x50
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f963 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 800574c:	e02c      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6859      	ldr	r1, [r3, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	461a      	mov	r2, r3
 800575c:	f000 f929 	bl	80059b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2160      	movs	r1, #96	; 0x60
 8005766:	4618      	mov	r0, r3
 8005768:	f000 f953 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 800576c:	e01c      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6859      	ldr	r1, [r3, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	461a      	mov	r2, r3
 800577c:	f000 f8ea 	bl	8005954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2140      	movs	r1, #64	; 0x40
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f943 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 800578c:	e00c      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f000 f93a 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 800579e:	e003      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
      break;
 80057a4:	e000      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a40      	ldr	r2, [pc, #256]	; (8005928 <TIM_Base_SetConfig+0x114>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005832:	d00f      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a3d      	ldr	r2, [pc, #244]	; (800592c <TIM_Base_SetConfig+0x118>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00b      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a3c      	ldr	r2, [pc, #240]	; (8005930 <TIM_Base_SetConfig+0x11c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a3b      	ldr	r2, [pc, #236]	; (8005934 <TIM_Base_SetConfig+0x120>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a3a      	ldr	r2, [pc, #232]	; (8005938 <TIM_Base_SetConfig+0x124>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d108      	bne.n	8005866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2f      	ldr	r2, [pc, #188]	; (8005928 <TIM_Base_SetConfig+0x114>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d02b      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005874:	d027      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2c      	ldr	r2, [pc, #176]	; (800592c <TIM_Base_SetConfig+0x118>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d023      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2b      	ldr	r2, [pc, #172]	; (8005930 <TIM_Base_SetConfig+0x11c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01f      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2a      	ldr	r2, [pc, #168]	; (8005934 <TIM_Base_SetConfig+0x120>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01b      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a29      	ldr	r2, [pc, #164]	; (8005938 <TIM_Base_SetConfig+0x124>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d017      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a28      	ldr	r2, [pc, #160]	; (800593c <TIM_Base_SetConfig+0x128>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a27      	ldr	r2, [pc, #156]	; (8005940 <TIM_Base_SetConfig+0x12c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00f      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a26      	ldr	r2, [pc, #152]	; (8005944 <TIM_Base_SetConfig+0x130>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a25      	ldr	r2, [pc, #148]	; (8005948 <TIM_Base_SetConfig+0x134>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d007      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a24      	ldr	r2, [pc, #144]	; (800594c <TIM_Base_SetConfig+0x138>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a23      	ldr	r2, [pc, #140]	; (8005950 <TIM_Base_SetConfig+0x13c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d108      	bne.n	80058d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <TIM_Base_SetConfig+0x114>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_Base_SetConfig+0xf8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a0c      	ldr	r2, [pc, #48]	; (8005938 <TIM_Base_SetConfig+0x124>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d103      	bne.n	8005914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	615a      	str	r2, [r3, #20]
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800
 8005948:	40001800 	.word	0x40001800
 800594c:	40001c00 	.word	0x40001c00
 8005950:	40002000 	.word	0x40002000

08005954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f023 030a 	bic.w	r3, r3, #10
 8005990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b087      	sub	sp, #28
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0210 	bic.w	r2, r3, #16
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	031b      	lsls	r3, r3, #12
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f043 0307 	orr.w	r3, r3, #7
 8005a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	021a      	lsls	r2, r3, #8
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	609a      	str	r2, [r3, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e05a      	b.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a21      	ldr	r2, [pc, #132]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d022      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aec:	d01d      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1d      	ldr	r2, [pc, #116]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d018      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1b      	ldr	r2, [pc, #108]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1a      	ldr	r2, [pc, #104]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00e      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d10c      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40010400 	.word	0x40010400
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40001800 	.word	0x40001800

08005b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e03f      	b.n	8005c3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb fb98 	bl	8001304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	; 0x24
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f9cb 	bl	8005f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b08a      	sub	sp, #40	; 0x28
 8005c46:	af02      	add	r7, sp, #8
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d17c      	bne.n	8005d5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_UART_Transmit+0x2c>
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e075      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_UART_Transmit+0x3e>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e06e      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2221      	movs	r2, #33	; 0x21
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c96:	f7fb fd7b 	bl	8001790 <HAL_GetTick>
 8005c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	d108      	bne.n	8005cc4 <HAL_UART_Transmit+0x82>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	e003      	b.n	8005ccc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005cd4:	e02a      	b.n	8005d2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2180      	movs	r1, #128	; 0x80
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f8e2 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e036      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	3302      	adds	r3, #2
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	e007      	b.n	8005d1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	781a      	ldrb	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1cf      	bne.n	8005cd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2140      	movs	r1, #64	; 0x40
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f8b2 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e006      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b08a      	sub	sp, #40	; 0x28
 8005d6a:	af02      	add	r7, sp, #8
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	f040 808c 	bne.w	8005ea0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_UART_Receive+0x2e>
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e084      	b.n	8005ea2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Receive+0x40>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e07d      	b.n	8005ea2 <HAL_UART_Receive+0x13c>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2222      	movs	r2, #34	; 0x22
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dc2:	f7fb fce5 	bl	8001790 <HAL_GetTick>
 8005dc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	88fa      	ldrh	r2, [r7, #6]
 8005dcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ddc:	d108      	bne.n	8005df0 <HAL_UART_Receive+0x8a>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	e003      	b.n	8005df8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005e00:	e043      	b.n	8005e8a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f84c 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e042      	b.n	8005ea2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10c      	bne.n	8005e3c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	3302      	adds	r3, #2
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	e01f      	b.n	8005e7c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e44:	d007      	beq.n	8005e56 <HAL_UART_Receive+0xf0>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <HAL_UART_Receive+0xfe>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	e008      	b.n	8005e76 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1b6      	bne.n	8005e02 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e000      	b.n	8005ea2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005ea0:	2302      	movs	r3, #2
  }
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b090      	sub	sp, #64	; 0x40
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eba:	e050      	b.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d04c      	beq.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0x30>
 8005eca:	f7fb fc61 	bl	8001790 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d241      	bcs.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005efa:	637a      	str	r2, [r7, #52]	; 0x34
 8005efc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e5      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3314      	adds	r3, #20
 8005f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3314      	adds	r3, #20
 8005f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2e:	623a      	str	r2, [r7, #32]
 8005f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	69f9      	ldr	r1, [r7, #28]
 8005f34:	6a3a      	ldr	r2, [r7, #32]
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e00f      	b.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4013      	ands	r3, r2
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	bf0c      	ite	eq
 8005f6e:	2301      	moveq	r3, #1
 8005f70:	2300      	movne	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d09f      	beq.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3740      	adds	r7, #64	; 0x40
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f8c:	b0c0      	sub	sp, #256	; 0x100
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa4:	68d9      	ldr	r1, [r3, #12]
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	ea40 0301 	orr.w	r3, r0, r1
 8005fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fe0:	f021 010c 	bic.w	r1, r1, #12
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006002:	6999      	ldr	r1, [r3, #24]
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	ea40 0301 	orr.w	r3, r0, r1
 800600e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b8f      	ldr	r3, [pc, #572]	; (8006254 <UART_SetConfig+0x2cc>)
 8006018:	429a      	cmp	r2, r3
 800601a:	d005      	beq.n	8006028 <UART_SetConfig+0xa0>
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b8d      	ldr	r3, [pc, #564]	; (8006258 <UART_SetConfig+0x2d0>)
 8006024:	429a      	cmp	r2, r3
 8006026:	d104      	bne.n	8006032 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7fe fe7a 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 800602c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006030:	e003      	b.n	800603a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006032:	f7fe fe61 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8006036:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006044:	f040 810c 	bne.w	8006260 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800604c:	2200      	movs	r2, #0
 800604e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006052:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006056:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800605a:	4622      	mov	r2, r4
 800605c:	462b      	mov	r3, r5
 800605e:	1891      	adds	r1, r2, r2
 8006060:	65b9      	str	r1, [r7, #88]	; 0x58
 8006062:	415b      	adcs	r3, r3
 8006064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006066:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800606a:	4621      	mov	r1, r4
 800606c:	eb12 0801 	adds.w	r8, r2, r1
 8006070:	4629      	mov	r1, r5
 8006072:	eb43 0901 	adc.w	r9, r3, r1
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800608a:	4690      	mov	r8, r2
 800608c:	4699      	mov	r9, r3
 800608e:	4623      	mov	r3, r4
 8006090:	eb18 0303 	adds.w	r3, r8, r3
 8006094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006098:	462b      	mov	r3, r5
 800609a:	eb49 0303 	adc.w	r3, r9, r3
 800609e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060b6:	460b      	mov	r3, r1
 80060b8:	18db      	adds	r3, r3, r3
 80060ba:	653b      	str	r3, [r7, #80]	; 0x50
 80060bc:	4613      	mov	r3, r2
 80060be:	eb42 0303 	adc.w	r3, r2, r3
 80060c2:	657b      	str	r3, [r7, #84]	; 0x54
 80060c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060cc:	f7fa f890 	bl	80001f0 <__aeabi_uldivmod>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4b61      	ldr	r3, [pc, #388]	; (800625c <UART_SetConfig+0x2d4>)
 80060d6:	fba3 2302 	umull	r2, r3, r3, r2
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	011c      	lsls	r4, r3, #4
 80060de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	1891      	adds	r1, r2, r2
 80060f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80060f8:	415b      	adcs	r3, r3
 80060fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006100:	4641      	mov	r1, r8
 8006102:	eb12 0a01 	adds.w	sl, r2, r1
 8006106:	4649      	mov	r1, r9
 8006108:	eb43 0b01 	adc.w	fp, r3, r1
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006118:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800611c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006120:	4692      	mov	sl, r2
 8006122:	469b      	mov	fp, r3
 8006124:	4643      	mov	r3, r8
 8006126:	eb1a 0303 	adds.w	r3, sl, r3
 800612a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800612e:	464b      	mov	r3, r9
 8006130:	eb4b 0303 	adc.w	r3, fp, r3
 8006134:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006144:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006148:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800614c:	460b      	mov	r3, r1
 800614e:	18db      	adds	r3, r3, r3
 8006150:	643b      	str	r3, [r7, #64]	; 0x40
 8006152:	4613      	mov	r3, r2
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
 800615a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800615e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006162:	f7fa f845 	bl	80001f0 <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4611      	mov	r1, r2
 800616c:	4b3b      	ldr	r3, [pc, #236]	; (800625c <UART_SetConfig+0x2d4>)
 800616e:	fba3 2301 	umull	r2, r3, r3, r1
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	2264      	movs	r2, #100	; 0x64
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	1acb      	subs	r3, r1, r3
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006182:	4b36      	ldr	r3, [pc, #216]	; (800625c <UART_SetConfig+0x2d4>)
 8006184:	fba3 2302 	umull	r2, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006190:	441c      	add	r4, r3
 8006192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006196:	2200      	movs	r2, #0
 8006198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800619c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	1891      	adds	r1, r2, r2
 80061aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80061ac:	415b      	adcs	r3, r3
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061b4:	4641      	mov	r1, r8
 80061b6:	1851      	adds	r1, r2, r1
 80061b8:	6339      	str	r1, [r7, #48]	; 0x30
 80061ba:	4649      	mov	r1, r9
 80061bc:	414b      	adcs	r3, r1
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061cc:	4659      	mov	r1, fp
 80061ce:	00cb      	lsls	r3, r1, #3
 80061d0:	4651      	mov	r1, sl
 80061d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061d6:	4651      	mov	r1, sl
 80061d8:	00ca      	lsls	r2, r1, #3
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	4642      	mov	r2, r8
 80061e2:	189b      	adds	r3, r3, r2
 80061e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061e8:	464b      	mov	r3, r9
 80061ea:	460a      	mov	r2, r1
 80061ec:	eb42 0303 	adc.w	r3, r2, r3
 80061f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006200:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006208:	460b      	mov	r3, r1
 800620a:	18db      	adds	r3, r3, r3
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
 800620e:	4613      	mov	r3, r2
 8006210:	eb42 0303 	adc.w	r3, r2, r3
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800621a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800621e:	f7f9 ffe7 	bl	80001f0 <__aeabi_uldivmod>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <UART_SetConfig+0x2d4>)
 8006228:	fba3 1302 	umull	r1, r3, r3, r2
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	2164      	movs	r1, #100	; 0x64
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	3332      	adds	r3, #50	; 0x32
 800623a:	4a08      	ldr	r2, [pc, #32]	; (800625c <UART_SetConfig+0x2d4>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	f003 0207 	and.w	r2, r3, #7
 8006246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4422      	add	r2, r4
 800624e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006250:	e105      	b.n	800645e <UART_SetConfig+0x4d6>
 8006252:	bf00      	nop
 8006254:	40011000 	.word	0x40011000
 8006258:	40011400 	.word	0x40011400
 800625c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006264:	2200      	movs	r2, #0
 8006266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800626a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800626e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006272:	4642      	mov	r2, r8
 8006274:	464b      	mov	r3, r9
 8006276:	1891      	adds	r1, r2, r2
 8006278:	6239      	str	r1, [r7, #32]
 800627a:	415b      	adcs	r3, r3
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
 800627e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006282:	4641      	mov	r1, r8
 8006284:	1854      	adds	r4, r2, r1
 8006286:	4649      	mov	r1, r9
 8006288:	eb43 0501 	adc.w	r5, r3, r1
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	00eb      	lsls	r3, r5, #3
 8006296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800629a:	00e2      	lsls	r2, r4, #3
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	4643      	mov	r3, r8
 80062a2:	18e3      	adds	r3, r4, r3
 80062a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062a8:	464b      	mov	r3, r9
 80062aa:	eb45 0303 	adc.w	r3, r5, r3
 80062ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062ce:	4629      	mov	r1, r5
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	4621      	mov	r1, r4
 80062d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d8:	4621      	mov	r1, r4
 80062da:	008a      	lsls	r2, r1, #2
 80062dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062e0:	f7f9 ff86 	bl	80001f0 <__aeabi_uldivmod>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4b60      	ldr	r3, [pc, #384]	; (800646c <UART_SetConfig+0x4e4>)
 80062ea:	fba3 2302 	umull	r2, r3, r3, r2
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	011c      	lsls	r4, r3, #4
 80062f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006300:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	1891      	adds	r1, r2, r2
 800630a:	61b9      	str	r1, [r7, #24]
 800630c:	415b      	adcs	r3, r3
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006314:	4641      	mov	r1, r8
 8006316:	1851      	adds	r1, r2, r1
 8006318:	6139      	str	r1, [r7, #16]
 800631a:	4649      	mov	r1, r9
 800631c:	414b      	adcs	r3, r1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800632c:	4659      	mov	r1, fp
 800632e:	00cb      	lsls	r3, r1, #3
 8006330:	4651      	mov	r1, sl
 8006332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006336:	4651      	mov	r1, sl
 8006338:	00ca      	lsls	r2, r1, #3
 800633a:	4610      	mov	r0, r2
 800633c:	4619      	mov	r1, r3
 800633e:	4603      	mov	r3, r0
 8006340:	4642      	mov	r2, r8
 8006342:	189b      	adds	r3, r3, r2
 8006344:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006348:	464b      	mov	r3, r9
 800634a:	460a      	mov	r2, r1
 800634c:	eb42 0303 	adc.w	r3, r2, r3
 8006350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	67bb      	str	r3, [r7, #120]	; 0x78
 800635e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800636c:	4649      	mov	r1, r9
 800636e:	008b      	lsls	r3, r1, #2
 8006370:	4641      	mov	r1, r8
 8006372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006376:	4641      	mov	r1, r8
 8006378:	008a      	lsls	r2, r1, #2
 800637a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800637e:	f7f9 ff37 	bl	80001f0 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4b39      	ldr	r3, [pc, #228]	; (800646c <UART_SetConfig+0x4e4>)
 8006388:	fba3 1302 	umull	r1, r3, r3, r2
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	2164      	movs	r1, #100	; 0x64
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	3332      	adds	r3, #50	; 0x32
 800639a:	4a34      	ldr	r2, [pc, #208]	; (800646c <UART_SetConfig+0x4e4>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a6:	441c      	add	r4, r3
 80063a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ac:	2200      	movs	r2, #0
 80063ae:	673b      	str	r3, [r7, #112]	; 0x70
 80063b0:	677a      	str	r2, [r7, #116]	; 0x74
 80063b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063b6:	4642      	mov	r2, r8
 80063b8:	464b      	mov	r3, r9
 80063ba:	1891      	adds	r1, r2, r2
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	415b      	adcs	r3, r3
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063c6:	4641      	mov	r1, r8
 80063c8:	1851      	adds	r1, r2, r1
 80063ca:	6039      	str	r1, [r7, #0]
 80063cc:	4649      	mov	r1, r9
 80063ce:	414b      	adcs	r3, r1
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063de:	4659      	mov	r1, fp
 80063e0:	00cb      	lsls	r3, r1, #3
 80063e2:	4651      	mov	r1, sl
 80063e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e8:	4651      	mov	r1, sl
 80063ea:	00ca      	lsls	r2, r1, #3
 80063ec:	4610      	mov	r0, r2
 80063ee:	4619      	mov	r1, r3
 80063f0:	4603      	mov	r3, r0
 80063f2:	4642      	mov	r2, r8
 80063f4:	189b      	adds	r3, r3, r2
 80063f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f8:	464b      	mov	r3, r9
 80063fa:	460a      	mov	r2, r1
 80063fc:	eb42 0303 	adc.w	r3, r2, r3
 8006400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	663b      	str	r3, [r7, #96]	; 0x60
 800640c:	667a      	str	r2, [r7, #100]	; 0x64
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800641a:	4649      	mov	r1, r9
 800641c:	008b      	lsls	r3, r1, #2
 800641e:	4641      	mov	r1, r8
 8006420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006424:	4641      	mov	r1, r8
 8006426:	008a      	lsls	r2, r1, #2
 8006428:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800642c:	f7f9 fee0 	bl	80001f0 <__aeabi_uldivmod>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <UART_SetConfig+0x4e4>)
 8006436:	fba3 1302 	umull	r1, r3, r3, r2
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	2164      	movs	r1, #100	; 0x64
 800643e:	fb01 f303 	mul.w	r3, r1, r3
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	3332      	adds	r3, #50	; 0x32
 8006448:	4a08      	ldr	r2, [pc, #32]	; (800646c <UART_SetConfig+0x4e4>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4422      	add	r2, r4
 800645c:	609a      	str	r2, [r3, #8]
}
 800645e:	bf00      	nop
 8006460:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006464:	46bd      	mov	sp, r7
 8006466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800646a:	bf00      	nop
 800646c:	51eb851f 	.word	0x51eb851f

08006470 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d123      	bne.n	80064ca <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800648a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	6851      	ldr	r1, [r2, #4]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	6892      	ldr	r2, [r2, #8]
 8006496:	4311      	orrs	r1, r2
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	68d2      	ldr	r2, [r2, #12]
 800649c:	4311      	orrs	r1, r2
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	6912      	ldr	r2, [r2, #16]
 80064a2:	4311      	orrs	r1, r2
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	6952      	ldr	r2, [r2, #20]
 80064a8:	4311      	orrs	r1, r2
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	6992      	ldr	r2, [r2, #24]
 80064ae:	4311      	orrs	r1, r2
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	69d2      	ldr	r2, [r2, #28]
 80064b4:	4311      	orrs	r1, r2
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	6a12      	ldr	r2, [r2, #32]
 80064ba:	4311      	orrs	r1, r2
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064c0:	430a      	orrs	r2, r1
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e028      	b.n	800651c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	69d9      	ldr	r1, [r3, #28]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	4319      	orrs	r1, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	430b      	orrs	r3, r1
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80064f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	6851      	ldr	r1, [r2, #4]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	6892      	ldr	r2, [r2, #8]
 80064fc:	4311      	orrs	r1, r2
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	68d2      	ldr	r2, [r2, #12]
 8006502:	4311      	orrs	r1, r2
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	6912      	ldr	r2, [r2, #16]
 8006508:	4311      	orrs	r1, r2
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	6952      	ldr	r2, [r2, #20]
 800650e:	4311      	orrs	r1, r2
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	6992      	ldr	r2, [r2, #24]
 8006514:	430a      	orrs	r2, r1
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d128      	bne.n	800658e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	1e59      	subs	r1, r3, #1
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	3b01      	subs	r3, #1
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	4319      	orrs	r1, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	3b01      	subs	r3, #1
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	4319      	orrs	r1, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	3b01      	subs	r3, #1
 8006564:	031b      	lsls	r3, r3, #12
 8006566:	4319      	orrs	r1, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	3b01      	subs	r3, #1
 800656e:	041b      	lsls	r3, r3, #16
 8006570:	4319      	orrs	r1, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	3b01      	subs	r3, #1
 8006578:	051b      	lsls	r3, r3, #20
 800657a:	4319      	orrs	r1, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	3b01      	subs	r3, #1
 8006582:	061b      	lsls	r3, r3, #24
 8006584:	430b      	orrs	r3, r1
 8006586:	431a      	orrs	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	609a      	str	r2, [r3, #8]
 800658c:	e02f      	b.n	80065ee <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006596:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	68d2      	ldr	r2, [r2, #12]
 800659e:	3a01      	subs	r2, #1
 80065a0:	0311      	lsls	r1, r2, #12
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	6952      	ldr	r2, [r2, #20]
 80065a6:	3a01      	subs	r2, #1
 80065a8:	0512      	lsls	r2, r2, #20
 80065aa:	430a      	orrs	r2, r1
 80065ac:	431a      	orrs	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	1e59      	subs	r1, r3, #1
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	4319      	orrs	r1, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	4319      	orrs	r1, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	3b01      	subs	r3, #1
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	4319      	orrs	r1, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	061b      	lsls	r3, r3, #24
 80065e6:	430b      	orrs	r3, r1
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065fc:	b084      	sub	sp, #16
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	f107 001c 	add.w	r0, r7, #28
 800660a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	2b01      	cmp	r3, #1
 8006612:	d122      	bne.n	800665a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800663c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d105      	bne.n	800664e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9c0 	bl	80069d4 <USB_CoreReset>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
 8006658:	e01a      	b.n	8006690 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9b4 	bl	80069d4 <USB_CoreReset>
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
 8006682:	e005      	b.n	8006690 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	2b01      	cmp	r3, #1
 8006694:	d10b      	bne.n	80066ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f043 0206 	orr.w	r2, r3, #6
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f043 0220 	orr.w	r2, r3, #32
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ba:	b004      	add	sp, #16
 80066bc:	4770      	bx	lr

080066be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f043 0201 	orr.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f023 0201 	bic.w	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d115      	bne.n	8006750 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006730:	2001      	movs	r0, #1
 8006732:	f7fb f839 	bl	80017a8 <HAL_Delay>
      ms++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f93a 	bl	80069b6 <USB_GetMode>
 8006742:	4603      	mov	r3, r0
 8006744:	2b01      	cmp	r3, #1
 8006746:	d01e      	beq.n	8006786 <USB_SetCurrentMode+0x84>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b31      	cmp	r3, #49	; 0x31
 800674c:	d9f0      	bls.n	8006730 <USB_SetCurrentMode+0x2e>
 800674e:	e01a      	b.n	8006786 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d115      	bne.n	8006782 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006762:	2001      	movs	r0, #1
 8006764:	f7fb f820 	bl	80017a8 <HAL_Delay>
      ms++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3301      	adds	r3, #1
 800676c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f921 	bl	80069b6 <USB_GetMode>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <USB_SetCurrentMode+0x84>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b31      	cmp	r3, #49	; 0x31
 800677e:	d9f0      	bls.n	8006762 <USB_SetCurrentMode+0x60>
 8006780:	e001      	b.n	8006786 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e005      	b.n	8006792 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b32      	cmp	r3, #50	; 0x32
 800678a:	d101      	bne.n	8006790 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e000      	b.n	8006792 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a13      	ldr	r2, [pc, #76]	; (8006800 <USB_FlushTxFifo+0x64>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e01b      	b.n	80067f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	daf2      	bge.n	80067aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	019b      	lsls	r3, r3, #6
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a08      	ldr	r2, [pc, #32]	; (8006800 <USB_FlushTxFifo+0x64>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d901      	bls.n	80067e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e006      	b.n	80067f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d0f0      	beq.n	80067d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	00030d40 	.word	0x00030d40

08006804 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4a11      	ldr	r2, [pc, #68]	; (8006860 <USB_FlushRxFifo+0x5c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e018      	b.n	8006854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	daf2      	bge.n	8006810 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2210      	movs	r2, #16
 8006832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4a08      	ldr	r2, [pc, #32]	; (8006860 <USB_FlushRxFifo+0x5c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e006      	b.n	8006854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0310 	and.w	r3, r3, #16
 800684e:	2b10      	cmp	r3, #16
 8006850:	d0f0      	beq.n	8006834 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	00030d40 	.word	0x00030d40

08006864 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006864:	b480      	push	{r7}
 8006866:	b089      	sub	sp, #36	; 0x24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	4611      	mov	r1, r2
 8006870:	461a      	mov	r2, r3
 8006872:	460b      	mov	r3, r1
 8006874:	71fb      	strb	r3, [r7, #7]
 8006876:	4613      	mov	r3, r2
 8006878:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006886:	2b00      	cmp	r3, #0
 8006888:	d123      	bne.n	80068d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800688a:	88bb      	ldrh	r3, [r7, #4]
 800688c:	3303      	adds	r3, #3
 800688e:	089b      	lsrs	r3, r3, #2
 8006890:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006892:	2300      	movs	r3, #0
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	e018      	b.n	80068ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	031a      	lsls	r2, r3, #12
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a4:	461a      	mov	r2, r3
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	3301      	adds	r3, #1
 80068b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	3301      	adds	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	3301      	adds	r3, #1
 80068bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	3301      	adds	r3, #1
 80068c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	3301      	adds	r3, #1
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d3e2      	bcc.n	8006898 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3724      	adds	r7, #36	; 0x24
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b08b      	sub	sp, #44	; 0x2c
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	089b      	lsrs	r3, r3, #2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068fe:	88fb      	ldrh	r3, [r7, #6]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006906:	2300      	movs	r3, #0
 8006908:	623b      	str	r3, [r7, #32]
 800690a:	e014      	b.n	8006936 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	601a      	str	r2, [r3, #0]
    pDest++;
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	3301      	adds	r3, #1
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	3301      	adds	r3, #1
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	3301      	adds	r3, #1
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	3301      	adds	r3, #1
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	3301      	adds	r3, #1
 8006934:	623b      	str	r3, [r7, #32]
 8006936:	6a3a      	ldr	r2, [r7, #32]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	429a      	cmp	r2, r3
 800693c:	d3e6      	bcc.n	800690c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800693e:	8bfb      	ldrh	r3, [r7, #30]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01e      	beq.n	8006982 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800694e:	461a      	mov	r2, r3
 8006950:	f107 0310 	add.w	r3, r7, #16
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
 8006964:	b2da      	uxtb	r2, r3
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	701a      	strb	r2, [r3, #0]
      i++;
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	3301      	adds	r3, #1
 800696e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	3301      	adds	r3, #1
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006976:	8bfb      	ldrh	r3, [r7, #30]
 8006978:	3b01      	subs	r3, #1
 800697a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800697c:	8bfb      	ldrh	r3, [r7, #30]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1ea      	bne.n	8006958 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006984:	4618      	mov	r0, r3
 8006986:	372c      	adds	r7, #44	; 0x2c
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4013      	ands	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069a8:	68fb      	ldr	r3, [r7, #12]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0301 	and.w	r3, r3, #1
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4a13      	ldr	r2, [pc, #76]	; (8006a38 <USB_CoreReset+0x64>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e01b      	b.n	8006a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	daf2      	bge.n	80069e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f043 0201 	orr.w	r2, r3, #1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <USB_CoreReset+0x64>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d901      	bls.n	8006a1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e006      	b.n	8006a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d0f0      	beq.n	8006a0a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	00030d40 	.word	0x00030d40

08006a3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a72:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d018      	beq.n	8006ac4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d10a      	bne.n	8006aae <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aa6:	f043 0304 	orr.w	r3, r3, #4
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	e014      	b.n	8006ad8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006abc:	f023 0304 	bic.w	r3, r3, #4
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e009      	b.n	8006ad8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ad2:	f023 0304 	bic.w	r3, r3, #4
 8006ad6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ad8:	2110      	movs	r1, #16
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fe5e 	bl	800679c <USB_FlushTxFifo>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff fe8a 	bl	8006804 <USB_FlushRxFifo>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	e015      	b.n	8006b2c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b12:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b20:	461a      	mov	r2, r3
 8006b22:	2300      	movs	r3, #0
 8006b24:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d3e5      	bcc.n	8006b00 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b40:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a13      	ldr	r2, [pc, #76]	; (8006ba8 <USB_HostInit+0x16c>)
 8006b5a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a13      	ldr	r2, [pc, #76]	; (8006bac <USB_HostInit+0x170>)
 8006b60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006b64:	e009      	b.n	8006b7a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2280      	movs	r2, #128	; 0x80
 8006b6a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <USB_HostInit+0x174>)
 8006b70:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a0f      	ldr	r2, [pc, #60]	; (8006bb4 <USB_HostInit+0x178>)
 8006b76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d105      	bne.n	8006b8c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f043 0210 	orr.w	r2, r3, #16
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <USB_HostInit+0x17c>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ba4:	b004      	add	sp, #16
 8006ba6:	4770      	bx	lr
 8006ba8:	01000200 	.word	0x01000200
 8006bac:	00e00300 	.word	0x00e00300
 8006bb0:	00600080 	.word	0x00600080
 8006bb4:	004000e0 	.word	0x004000e0
 8006bb8:	a3200008 	.word	0xa3200008

08006bbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bda:	f023 0303 	bic.w	r3, r3, #3
 8006bde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	68f9      	ldr	r1, [r7, #12]
 8006bf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d107      	bne.n	8006c0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c04:	461a      	mov	r2, r3
 8006c06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c0a:	6053      	str	r3, [r2, #4]
 8006c0c:	e009      	b.n	8006c22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d106      	bne.n	8006c22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c60:	2064      	movs	r0, #100	; 0x64
 8006c62:	f7fa fda1 	bl	80017a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c72:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006c74:	200a      	movs	r0, #10
 8006c76:	f7fa fd97 	bl	80017a8 <HAL_Delay>

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ca8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <USB_DriveVbus+0x44>
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d106      	bne.n	8006cc8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cc6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd2:	d109      	bne.n	8006ce8 <USB_DriveVbus+0x64>
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ce6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	0c5b      	lsrs	r3, r3, #17
 8006d14:	f003 0303 	and.w	r3, r3, #3
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	b29b      	uxth	r3, r3
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	70fb      	strb	r3, [r7, #3]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70bb      	strb	r3, [r7, #2]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d76:	461a      	mov	r2, r3
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d87e      	bhi.n	8006e84 <USB_HC_Init+0x13c>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <USB_HC_Init+0x44>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006d9d 	.word	0x08006d9d
 8006d90:	08006e47 	.word	0x08006e47
 8006d94:	08006d9d 	.word	0x08006d9d
 8006d98:	08006e09 	.word	0x08006e09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da8:	461a      	mov	r2, r3
 8006daa:	f240 439d 	movw	r3, #1181	; 0x49d
 8006dae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006db0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da10      	bge.n	8006dda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	78fa      	ldrb	r2, [r7, #3]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006dd8:	e057      	b.n	8006e8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d051      	beq.n	8006e8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	78fa      	ldrb	r2, [r7, #3]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e04:	60d3      	str	r3, [r2, #12]
      break;
 8006e06:	e040      	b.n	8006e8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e14:	461a      	mov	r2, r3
 8006e16:	f240 639d 	movw	r3, #1693	; 0x69d
 8006e1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	da34      	bge.n	8006e8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	78fa      	ldrb	r2, [r7, #3]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e42:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e44:	e023      	b.n	8006e8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e52:	461a      	mov	r2, r3
 8006e54:	f240 2325 	movw	r3, #549	; 0x225
 8006e58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	da17      	bge.n	8006e92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006e80:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e82:	e006      	b.n	8006e92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	77fb      	strb	r3, [r7, #31]
      break;
 8006e88:	e004      	b.n	8006e94 <USB_HC_Init+0x14c>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e002      	b.n	8006e94 <USB_HC_Init+0x14c>
      break;
 8006e8e:	bf00      	nop
 8006e90:	e000      	b.n	8006e94 <USB_HC_Init+0x14c>
      break;
 8006e92:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	78fa      	ldrb	r2, [r7, #3]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eae:	f043 0302 	orr.w	r3, r3, #2
 8006eb2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eba:	699a      	ldr	r2, [r3, #24]
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec8:	6939      	ldr	r1, [r7, #16]
 8006eca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006ede:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	da03      	bge.n	8006eee <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	e001      	b.n	8006ef2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff feff 	bl	8006cf6 <USB_GetHostSpeed>
 8006ef8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d106      	bne.n	8006f10 <USB_HC_Init+0x1c8>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d003      	beq.n	8006f10 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	e001      	b.n	8006f14 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f14:	787b      	ldrb	r3, [r7, #1]
 8006f16:	059b      	lsls	r3, r3, #22
 8006f18:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f1c:	78bb      	ldrb	r3, [r7, #2]
 8006f1e:	02db      	lsls	r3, r3, #11
 8006f20:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f24:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f2a:	049b      	lsls	r3, r3, #18
 8006f2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	0159      	lsls	r1, r3, #5
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	440b      	add	r3, r1
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f50:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006f52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d003      	beq.n	8006f62 <USB_HC_Init+0x21a>
 8006f5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d10f      	bne.n	8006f82 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f82:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3720      	adds	r7, #32
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08c      	sub	sp, #48	; 0x30
 8006f90:	af02      	add	r7, sp, #8
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fa8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d02d      	beq.n	8007012 <USB_HC_StartXfer+0x86>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	791b      	ldrb	r3, [r3, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d129      	bne.n	8007012 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d117      	bne.n	8006ff4 <USB_HC_StartXfer+0x68>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	79db      	ldrb	r3, [r3, #7]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <USB_HC_StartXfer+0x48>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	79db      	ldrb	r3, [r3, #7]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d10f      	bne.n	8006ff4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	6a3a      	ldr	r2, [r7, #32]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <USB_HC_StartXfer+0x86>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	795b      	ldrb	r3, [r3, #5]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d107      	bne.n	8007012 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	4619      	mov	r1, r3
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fa0f 	bl	800742c <USB_DoPing>
      return HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	e0f8      	b.n	8007204 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d018      	beq.n	800704c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	8912      	ldrh	r2, [r2, #8]
 8007022:	4413      	add	r3, r2
 8007024:	3b01      	subs	r3, #1
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	8912      	ldrh	r2, [r2, #8]
 800702a:	fbb3 f3f2 	udiv	r3, r3, r2
 800702e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007030:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007032:	8b7b      	ldrh	r3, [r7, #26]
 8007034:	429a      	cmp	r2, r3
 8007036:	d90b      	bls.n	8007050 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007038:	8b7b      	ldrh	r3, [r7, #26]
 800703a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800703c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	8912      	ldrh	r2, [r2, #8]
 8007042:	fb03 f202 	mul.w	r2, r3, r2
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	611a      	str	r2, [r3, #16]
 800704a:	e001      	b.n	8007050 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800704c:	2301      	movs	r3, #1
 800704e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	78db      	ldrb	r3, [r3, #3]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007058:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	8912      	ldrh	r2, [r2, #8]
 800705e:	fb03 f202 	mul.w	r2, r3, r2
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	611a      	str	r2, [r3, #16]
 8007066:	e003      	b.n	8007070 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	695a      	ldr	r2, [r3, #20]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007078:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800707a:	04d9      	lsls	r1, r3, #19
 800707c:	4b63      	ldr	r3, [pc, #396]	; (800720c <USB_HC_StartXfer+0x280>)
 800707e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007080:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	7a9b      	ldrb	r3, [r3, #10]
 8007086:	075b      	lsls	r3, r3, #29
 8007088:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800708c:	69f9      	ldr	r1, [r7, #28]
 800708e:	0148      	lsls	r0, r1, #5
 8007090:	6a39      	ldr	r1, [r7, #32]
 8007092:	4401      	add	r1, r0
 8007094:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007098:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800709a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	68d9      	ldr	r1, [r3, #12]
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b2:	460a      	mov	r2, r1
 80070b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bf0c      	ite	eq
 80070c6:	2301      	moveq	r3, #1
 80070c8:	2300      	movne	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	7e7b      	ldrb	r3, [r7, #25]
 80070fe:	075b      	lsls	r3, r3, #29
 8007100:	69f9      	ldr	r1, [r7, #28]
 8007102:	0148      	lsls	r0, r1, #5
 8007104:	6a39      	ldr	r1, [r7, #32]
 8007106:	4401      	add	r1, r0
 8007108:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800710c:	4313      	orrs	r3, r2
 800710e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007126:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	78db      	ldrb	r3, [r3, #3]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	e003      	b.n	8007142 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007140:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007148:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	4413      	add	r3, r2
 8007152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007156:	461a      	mov	r2, r3
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	e04e      	b.n	8007204 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	78db      	ldrb	r3, [r3, #3]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d149      	bne.n	8007202 <USB_HC_StartXfer+0x276>
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d045      	beq.n	8007202 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	79db      	ldrb	r3, [r3, #7]
 800717a:	2b03      	cmp	r3, #3
 800717c:	d830      	bhi.n	80071e0 <USB_HC_StartXfer+0x254>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <USB_HC_StartXfer+0x1f8>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	08007195 	.word	0x08007195
 8007188:	080071b9 	.word	0x080071b9
 800718c:	08007195 	.word	0x08007195
 8007190:	080071b9 	.word	0x080071b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	3303      	adds	r3, #3
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800719e:	8afa      	ldrh	r2, [r7, #22]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d91c      	bls.n	80071e4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	f043 0220 	orr.w	r2, r3, #32
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80071b6:	e015      	b.n	80071e4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	3303      	adds	r3, #3
 80071be:	089b      	lsrs	r3, r3, #2
 80071c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80071c2:	8afa      	ldrh	r2, [r7, #22]
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d90a      	bls.n	80071e8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80071de:	e003      	b.n	80071e8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <USB_HC_StartXfer+0x25e>
        break;
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <USB_HC_StartXfer+0x25e>
        break;
 80071e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	68d9      	ldr	r1, [r3, #12]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	785a      	ldrb	r2, [r3, #1]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2000      	movs	r0, #0
 80071fa:	9000      	str	r0, [sp, #0]
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fb31 	bl	8006864 <USB_WritePacket>
  }

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3728      	adds	r7, #40	; 0x28
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	1ff80000 	.word	0x1ff80000

08007210 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	b29b      	uxth	r3, r3
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007232:	b480      	push	{r7}
 8007234:	b089      	sub	sp, #36	; 0x24
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	0c9b      	lsrs	r3, r3, #18
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	0fdb      	lsrs	r3, r3, #31
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b20      	cmp	r3, #32
 8007280:	d104      	bne.n	800728c <USB_HC_Halt+0x5a>
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	e0c8      	b.n	800741e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <USB_HC_Halt+0x66>
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d163      	bne.n	8007360 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 80ab 	bne.w	800741c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d133      	bne.n	800733a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	440a      	add	r2, r1
 8007308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800730c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007310:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3301      	adds	r3, #1
 8007316:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800731e:	d81d      	bhi.n	800735c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007336:	d0ec      	beq.n	8007312 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007338:	e070      	b.n	800741c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	440a      	add	r2, r1
 8007350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007358:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800735a:	e05f      	b.n	800741c <USB_HC_Halt+0x1ea>
            break;
 800735c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800735e:	e05d      	b.n	800741c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	440a      	add	r2, r1
 8007376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800737a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800737e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d133      	bne.n	80073f8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	4413      	add	r3, r2
 8007398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	0151      	lsls	r1, r2, #5
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	440a      	add	r2, r1
 80073a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	0151      	lsls	r1, r2, #5
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	440a      	add	r2, r1
 80073c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073dc:	d81d      	bhi.n	800741a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f4:	d0ec      	beq.n	80073d0 <USB_HC_Halt+0x19e>
 80073f6:	e011      	b.n	800741c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	440a      	add	r2, r1
 800740e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	e000      	b.n	800741c <USB_HC_Halt+0x1ea>
          break;
 800741a:	bf00      	nop
    }
  }

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3724      	adds	r7, #36	; 0x24
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007440:	2301      	movs	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	04da      	lsls	r2, r3, #19
 8007448:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <USB_DoPing+0x74>)
 800744a:	4013      	ands	r3, r2
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	440a      	add	r2, r1
 8007454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800745c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	4413      	add	r3, r2
 8007466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007474:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800747c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748a:	461a      	mov	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	1ff80000 	.word	0x1ff80000

080074a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff f911 	bl	80066e0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074be:	2110      	movs	r1, #16
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff f96b 	bl	800679c <USB_FlushTxFifo>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff f997 	bl	8006804 <USB_FlushRxFifo>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80074e0:	2300      	movs	r3, #0
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	e01f      	b.n	8007526 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007504:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800750c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	4413      	add	r3, r2
 8007516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751a:	461a      	mov	r2, r3
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	3301      	adds	r3, #1
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	2b0f      	cmp	r3, #15
 800752a:	d9dc      	bls.n	80074e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800752c:	2300      	movs	r3, #0
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	e034      	b.n	800759c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	4413      	add	r3, r2
 800753a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007548:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007550:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007558:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4413      	add	r3, r2
 8007562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007566:	461a      	mov	r2, r3
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3301      	adds	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007578:	d80c      	bhi.n	8007594 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	4413      	add	r3, r2
 8007582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800758c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007590:	d0ec      	beq.n	800756c <USB_StopHost+0xc8>
 8007592:	e000      	b.n	8007596 <USB_StopHost+0xf2>
        break;
 8007594:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	3301      	adds	r3, #1
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b0f      	cmp	r3, #15
 80075a0:	d9c7      	bls.n	8007532 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075a8:	461a      	mov	r2, r3
 80075aa:	f04f 33ff 	mov.w	r3, #4294967295
 80075ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff f880 	bl	80066be <USB_EnableGlobalInt>

  return ret;
 80075be:	7ffb      	ldrb	r3, [r7, #31]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80075c8:	b590      	push	{r4, r7, lr}
 80075ca:	b089      	sub	sp, #36	; 0x24
 80075cc:	af04      	add	r7, sp, #16
 80075ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80075d0:	2301      	movs	r3, #1
 80075d2:	2202      	movs	r2, #2
 80075d4:	2102      	movs	r1, #2
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fcb8 	bl	8007f4c <USBH_FindInterface>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2bff      	cmp	r3, #255	; 0xff
 80075e4:	d002      	beq.n	80075ec <USBH_CDC_InterfaceInit+0x24>
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d901      	bls.n	80075f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80075ec:	2302      	movs	r3, #2
 80075ee:	e13d      	b.n	800786c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fc8d 	bl	8007f14 <USBH_SelectInterface>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007604:	2302      	movs	r3, #2
 8007606:	e131      	b.n	800786c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800760e:	2050      	movs	r0, #80	; 0x50
 8007610:	f004 fffa 	bl	800c608 <malloc>
 8007614:	4603      	mov	r3, r0
 8007616:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007628:	2302      	movs	r3, #2
 800762a:	e11f      	b.n	800786c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800762c:	2250      	movs	r2, #80	; 0x50
 800762e:	2100      	movs	r1, #0
 8007630:	68b8      	ldr	r0, [r7, #8]
 8007632:	f005 f807 	bl	800c644 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	211a      	movs	r1, #26
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	b25b      	sxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	da15      	bge.n	800767a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	211a      	movs	r1, #26
 8007654:	fb01 f303 	mul.w	r3, r1, r3
 8007658:	4413      	add	r3, r2
 800765a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	211a      	movs	r1, #26
 800766a:	fb01 f303 	mul.w	r3, r1, r3
 800766e:	4413      	add	r3, r2
 8007670:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007674:	881a      	ldrh	r2, [r3, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f002 f988 	bl	8009996 <USBH_AllocPipe>
 8007686:	4603      	mov	r3, r0
 8007688:	461a      	mov	r2, r3
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	7819      	ldrb	r1, [r3, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	7858      	ldrb	r0, [r3, #1]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	8952      	ldrh	r2, [r2, #10]
 80076a6:	9202      	str	r2, [sp, #8]
 80076a8:	2203      	movs	r2, #3
 80076aa:	9201      	str	r2, [sp, #4]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	4623      	mov	r3, r4
 80076b0:	4602      	mov	r2, r0
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f002 f940 	bl	8009938 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2200      	movs	r2, #0
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f004 fef3 	bl	800c4ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80076c6:	2300      	movs	r3, #0
 80076c8:	2200      	movs	r2, #0
 80076ca:	210a      	movs	r1, #10
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fc3d 	bl	8007f4c <USBH_FindInterface>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2bff      	cmp	r3, #255	; 0xff
 80076da:	d002      	beq.n	80076e2 <USBH_CDC_InterfaceInit+0x11a>
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d901      	bls.n	80076e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80076e2:	2302      	movs	r3, #2
 80076e4:	e0c2      	b.n	800786c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	211a      	movs	r1, #26
 80076ec:	fb01 f303 	mul.w	r3, r1, r3
 80076f0:	4413      	add	r3, r2
 80076f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b25b      	sxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da16      	bge.n	800772c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	211a      	movs	r1, #26
 8007704:	fb01 f303 	mul.w	r3, r1, r3
 8007708:	4413      	add	r3, r2
 800770a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800770e:	781a      	ldrb	r2, [r3, #0]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	211a      	movs	r1, #26
 800771a:	fb01 f303 	mul.w	r3, r1, r3
 800771e:	4413      	add	r3, r2
 8007720:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007724:	881a      	ldrh	r2, [r3, #0]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	835a      	strh	r2, [r3, #26]
 800772a:	e015      	b.n	8007758 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	211a      	movs	r1, #26
 8007732:	fb01 f303 	mul.w	r3, r1, r3
 8007736:	4413      	add	r3, r2
 8007738:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800773c:	781a      	ldrb	r2, [r3, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	211a      	movs	r1, #26
 8007748:	fb01 f303 	mul.w	r3, r1, r3
 800774c:	4413      	add	r3, r2
 800774e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007752:	881a      	ldrh	r2, [r3, #0]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	211a      	movs	r1, #26
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	b25b      	sxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	da16      	bge.n	800779e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	211a      	movs	r1, #26
 8007776:	fb01 f303 	mul.w	r3, r1, r3
 800777a:	4413      	add	r3, r2
 800777c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	211a      	movs	r1, #26
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	4413      	add	r3, r2
 8007792:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007796:	881a      	ldrh	r2, [r3, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	835a      	strh	r2, [r3, #26]
 800779c:	e015      	b.n	80077ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	211a      	movs	r1, #26
 80077a4:	fb01 f303 	mul.w	r3, r1, r3
 80077a8:	4413      	add	r3, r2
 80077aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077ae:	781a      	ldrb	r2, [r3, #0]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	211a      	movs	r1, #26
 80077ba:	fb01 f303 	mul.w	r3, r1, r3
 80077be:	4413      	add	r3, r2
 80077c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077c4:	881a      	ldrh	r2, [r3, #0]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	7b9b      	ldrb	r3, [r3, #14]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f002 f8e0 	bl	8009996 <USBH_AllocPipe>
 80077d6:	4603      	mov	r3, r0
 80077d8:	461a      	mov	r2, r3
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	7bdb      	ldrb	r3, [r3, #15]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f002 f8d6 	bl	8009996 <USBH_AllocPipe>
 80077ea:	4603      	mov	r3, r0
 80077ec:	461a      	mov	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	7b59      	ldrb	r1, [r3, #13]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	7b98      	ldrb	r0, [r3, #14]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	8b12      	ldrh	r2, [r2, #24]
 800780a:	9202      	str	r2, [sp, #8]
 800780c:	2202      	movs	r2, #2
 800780e:	9201      	str	r2, [sp, #4]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	4623      	mov	r3, r4
 8007814:	4602      	mov	r2, r0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f002 f88e 	bl	8009938 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	7b19      	ldrb	r1, [r3, #12]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	7bd8      	ldrb	r0, [r3, #15]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	8b52      	ldrh	r2, [r2, #26]
 8007834:	9202      	str	r2, [sp, #8]
 8007836:	2202      	movs	r2, #2
 8007838:	9201      	str	r2, [sp, #4]
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	4623      	mov	r3, r4
 800783e:	4602      	mov	r2, r0
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 f879 	bl	8009938 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	7b5b      	ldrb	r3, [r3, #13]
 8007852:	2200      	movs	r2, #0
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f004 fe28 	bl	800c4ac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	7b1b      	ldrb	r3, [r3, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f004 fe21 	bl	800c4ac <USBH_LL_SetToggle>

  return USBH_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	bd90      	pop	{r4, r7, pc}

08007874 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00e      	beq.n	80078ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f002 f86e 	bl	8009976 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f002 f899 	bl	80099d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	7b1b      	ldrb	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00e      	beq.n	80078d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	7b1b      	ldrb	r3, [r3, #12]
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f002 f85b 	bl	8009976 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	7b1b      	ldrb	r3, [r3, #12]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f002 f886 	bl	80099d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	7b5b      	ldrb	r3, [r3, #13]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00e      	beq.n	80078f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	7b5b      	ldrb	r3, [r3, #13]
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f002 f848 	bl	8009976 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	7b5b      	ldrb	r3, [r3, #13]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f002 f873 	bl	80099d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	4618      	mov	r0, r3
 800790e:	f004 fe83 	bl	800c618 <free>
    phost->pActiveClass->pData = 0U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007918:	2200      	movs	r2, #0
 800791a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3340      	adds	r3, #64	; 0x40
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f8b1 	bl	8007aa6 <GetLineCoding>
 8007944:	4603      	mov	r3, r0
 8007946:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007954:	2102      	movs	r1, #2
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800795a:	7afb      	ldrb	r3, [r7, #11]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007984:	2b04      	cmp	r3, #4
 8007986:	d877      	bhi.n	8007a78 <USBH_CDC_Process+0x114>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <USBH_CDC_Process+0x2c>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079a5 	.word	0x080079a5
 8007994:	080079ab 	.word	0x080079ab
 8007998:	080079db 	.word	0x080079db
 800799c:	08007a4f 	.word	0x08007a4f
 80079a0:	08007a5d 	.word	0x08007a5d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]
      break;
 80079a8:	e06d      	b.n	8007a86 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f897 	bl	8007ae4 <SetLineCoding>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d104      	bne.n	80079ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80079c8:	e058      	b.n	8007a7c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d055      	beq.n	8007a7c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2204      	movs	r2, #4
 80079d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80079d8:	e050      	b.n	8007a7c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	3340      	adds	r3, #64	; 0x40
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f860 	bl	8007aa6 <GetLineCoding>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d126      	bne.n	8007a3e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a02:	791b      	ldrb	r3, [r3, #4]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d13b      	bne.n	8007a80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a12:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d133      	bne.n	8007a80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a22:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d12b      	bne.n	8007a80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a30:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d124      	bne.n	8007a80 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f982 	bl	8007d40 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a3c:	e020      	b.n	8007a80 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d01d      	beq.n	8007a80 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2204      	movs	r2, #4
 8007a48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a4c:	e018      	b.n	8007a80 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f867 	bl	8007b22 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f8f6 	bl	8007c46 <CDC_ProcessReception>
      break;
 8007a5a:	e014      	b.n	8007a86 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 f95b 	bl	8008d1a <USBH_ClrFeature>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007a76:	e005      	b.n	8007a84 <USBH_CDC_Process+0x120>

    default:
      break;
 8007a78:	bf00      	nop
 8007a7a:	e004      	b.n	8007a86 <USBH_CDC_Process+0x122>
      break;
 8007a7c:	bf00      	nop
 8007a7e:	e002      	b.n	8007a86 <USBH_CDC_Process+0x122>
      break;
 8007a80:	bf00      	nop
 8007a82:	e000      	b.n	8007a86 <USBH_CDC_Process+0x122>
      break;
 8007a84:	bf00      	nop

  }

  return status;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	22a1      	movs	r2, #161	; 0xa1
 8007ab4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2221      	movs	r2, #33	; 0x21
 8007aba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2207      	movs	r2, #7
 8007acc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fbed 	bl	80092b4 <USBH_CtlReq>
 8007ada:	4603      	mov	r3, r0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2221      	movs	r2, #33	; 0x21
 8007af2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2207      	movs	r2, #7
 8007b0a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2207      	movs	r2, #7
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 fbce 	bl	80092b4 <USBH_CtlReq>
 8007b18:	4603      	mov	r3, r0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b086      	sub	sp, #24
 8007b26:	af02      	add	r7, sp, #8
 8007b28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d002      	beq.n	8007b48 <CDC_ProcessTransmission+0x26>
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d023      	beq.n	8007b8e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007b46:	e07a      	b.n	8007c3e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	8b12      	ldrh	r2, [r2, #24]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d90b      	bls.n	8007b6c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	69d9      	ldr	r1, [r3, #28]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8b1a      	ldrh	r2, [r3, #24]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	7b5b      	ldrb	r3, [r3, #13]
 8007b60:	2001      	movs	r0, #1
 8007b62:	9000      	str	r0, [sp, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 fea4 	bl	80098b2 <USBH_BulkSendData>
 8007b6a:	e00b      	b.n	8007b84 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	7b5b      	ldrb	r3, [r3, #13]
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	9000      	str	r0, [sp, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 fe97 	bl	80098b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b8c:	e057      	b.n	8007c3e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	7b5b      	ldrb	r3, [r3, #13]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f004 fc5f 	bl	800c458 <USBH_LL_GetURBState>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d136      	bne.n	8007c12 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	8b12      	ldrh	r2, [r2, #24]
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d90e      	bls.n	8007bce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	8b12      	ldrh	r2, [r2, #24]
 8007bb8:	1a9a      	subs	r2, r3, r2
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	8b12      	ldrh	r2, [r2, #24]
 8007bc6:	441a      	add	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	61da      	str	r2, [r3, #28]
 8007bcc:	e002      	b.n	8007bd4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d004      	beq.n	8007be6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007be4:	e006      	b.n	8007bf4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f892 	bl	8007d18 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2204      	movs	r2, #4
 8007bf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c08:	2200      	movs	r2, #0
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f001 ffe0 	bl	8009bd0 <osMessagePut>
      break;
 8007c10:	e014      	b.n	8007c3c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d111      	bne.n	8007c3c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2204      	movs	r2, #4
 8007c24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c34:	2200      	movs	r2, #0
 8007c36:	4619      	mov	r1, r3
 8007c38:	f001 ffca 	bl	8009bd0 <osMessagePut>
      break;
 8007c3c:	bf00      	nop
  }
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d002      	beq.n	8007c6c <CDC_ProcessReception+0x26>
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d00e      	beq.n	8007c88 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007c6a:	e051      	b.n	8007d10 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	6a19      	ldr	r1, [r3, #32]
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	8b5a      	ldrh	r2, [r3, #26]
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	7b1b      	ldrb	r3, [r3, #12]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 fe3f 	bl	80098fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2204      	movs	r2, #4
 8007c82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c86:	e043      	b.n	8007d10 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	7b1b      	ldrb	r3, [r3, #12]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f004 fbe2 	bl	800c458 <USBH_LL_GetURBState>
 8007c94:	4603      	mov	r3, r0
 8007c96:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007c98:	7cfb      	ldrb	r3, [r7, #19]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d137      	bne.n	8007d0e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	7b1b      	ldrb	r3, [r3, #12]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f004 fb45 	bl	800c334 <USBH_LL_GetLastXferSize>
 8007caa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d016      	beq.n	8007ce4 <CDC_ProcessReception+0x9e>
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	8b5b      	ldrh	r3, [r3, #26]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d910      	bls.n	8007ce4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	1ad2      	subs	r2, r2, r3
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	6a1a      	ldr	r2, [r3, #32]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	441a      	add	r2, r3
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2203      	movs	r2, #3
 8007cde:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007ce2:	e006      	b.n	8007cf2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f81d 	bl	8007d2c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d06:	2200      	movs	r2, #0
 8007d08:	4619      	mov	r1, r3
 8007d0a:	f001 ff61 	bl	8009bd0 <osMessagePut>
      break;
 8007d0e:	bf00      	nop
  }
}
 8007d10:	bf00      	nop
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007d54:	b5b0      	push	{r4, r5, r7, lr}
 8007d56:	b090      	sub	sp, #64	; 0x40
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e04d      	b.n	8007e08 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	79fa      	ldrb	r2, [r7, #7]
 8007d70:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 f847 	bl	8007e18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007db8:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <USBH_Init+0xbc>)
 8007dba:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007dc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f001 fed7 	bl	8009b7e <osMessageCreate>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007dd8:	4b0e      	ldr	r3, [pc, #56]	; (8007e14 <USBH_Init+0xc0>)
 8007dda:	f107 0414 	add.w	r4, r7, #20
 8007dde:	461d      	mov	r5, r3
 8007de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007de4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007de8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007dec:	f107 0314 	add.w	r3, r7, #20
 8007df0:	68f9      	ldr	r1, [r7, #12]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 fe63 	bl	8009abe <osThreadCreate>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f004 f9d9 	bl	800c1b8 <USBH_LL_Init>

  return USBH_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3740      	adds	r7, #64	; 0x40
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e10:	0800c8e8 	.word	0x0800c8e8
 8007e14:	0800c8f8 	.word	0x0800c8f8

08007e18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	e009      	b.n	8007e3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	33e0      	adds	r3, #224	; 0xe0
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	2200      	movs	r2, #0
 8007e36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b0f      	cmp	r3, #15
 8007e42:	d9f2      	bls.n	8007e2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	e009      	b.n	8007e5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e54:	2200      	movs	r2, #0
 8007e56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e64:	d3f1      	bcc.n	8007e4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2240      	movs	r2, #64	; 0x40
 8007e8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d016      	beq.n	8007f02 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10e      	bne.n	8007efc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ee4:	1c59      	adds	r1, r3, #1
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	33de      	adds	r3, #222	; 0xde
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
 8007efa:	e004      	b.n	8007f06 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007efc:	2302      	movs	r3, #2
 8007efe:	73fb      	strb	r3, [r7, #15]
 8007f00:	e001      	b.n	8007f06 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007f02:	2302      	movs	r3, #2
 8007f04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d204      	bcs.n	8007f3a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007f38:	e001      	b.n	8007f3e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	4608      	mov	r0, r1
 8007f56:	4611      	mov	r1, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	70fb      	strb	r3, [r7, #3]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70bb      	strb	r3, [r7, #2]
 8007f62:	4613      	mov	r3, r2
 8007f64:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f74:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f76:	e025      	b.n	8007fc4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	221a      	movs	r2, #26
 8007f7c:	fb02 f303 	mul.w	r3, r2, r3
 8007f80:	3308      	adds	r3, #8
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	3302      	adds	r3, #2
 8007f88:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	795b      	ldrb	r3, [r3, #5]
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d002      	beq.n	8007f9a <USBH_FindInterface+0x4e>
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	2bff      	cmp	r3, #255	; 0xff
 8007f98:	d111      	bne.n	8007fbe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f9e:	78ba      	ldrb	r2, [r7, #2]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d002      	beq.n	8007faa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fa4:	78bb      	ldrb	r3, [r7, #2]
 8007fa6:	2bff      	cmp	r3, #255	; 0xff
 8007fa8:	d109      	bne.n	8007fbe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fae:	787a      	ldrb	r2, [r7, #1]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d002      	beq.n	8007fba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fb4:	787b      	ldrb	r3, [r7, #1]
 8007fb6:	2bff      	cmp	r3, #255	; 0xff
 8007fb8:	d101      	bne.n	8007fbe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	e006      	b.n	8007fcc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d9d6      	bls.n	8007f78 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007fca:	23ff      	movs	r3, #255	; 0xff
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	371c      	adds	r7, #28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f004 f92f 	bl	800c244 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f004 fa48 	bl	800c47e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af04      	add	r7, sp, #16
 8007ffe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008000:	2302      	movs	r3, #2
 8008002:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	d102      	bne.n	800801a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2203      	movs	r2, #3
 8008018:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b0b      	cmp	r3, #11
 8008022:	f200 8247 	bhi.w	80084b4 <USBH_Process+0x4bc>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <USBH_Process+0x34>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	0800805d 	.word	0x0800805d
 8008030:	080080ab 	.word	0x080080ab
 8008034:	0800812f 	.word	0x0800812f
 8008038:	08008433 	.word	0x08008433
 800803c:	080084b5 	.word	0x080084b5
 8008040:	080081ef 	.word	0x080081ef
 8008044:	080083bd 	.word	0x080083bd
 8008048:	08008241 	.word	0x08008241
 800804c:	0800827d 	.word	0x0800827d
 8008050:	080082b7 	.word	0x080082b7
 8008054:	08008315 	.word	0x08008315
 8008058:	0800841b 	.word	0x0800841b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 8227 	beq.w	80084b8 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008070:	20c8      	movs	r0, #200	; 0xc8
 8008072:	f004 fa4b 	bl	800c50c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f004 f941 	bl	800c2fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080a0:	2200      	movs	r2, #0
 80080a2:	4619      	mov	r1, r3
 80080a4:	f001 fd94 	bl	8009bd0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80080a8:	e206      	b.n	80084b8 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d107      	bne.n	80080c4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	e025      	b.n	8008110 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ce:	d914      	bls.n	80080fa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080d6:	3301      	adds	r3, #1
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d903      	bls.n	80080f2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	220d      	movs	r2, #13
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	e00e      	b.n	8008110 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	e00a      	b.n	8008110 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008100:	f103 020a 	add.w	r2, r3, #10
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800810a:	200a      	movs	r0, #10
 800810c:	f004 f9fe 	bl	800c50c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008124:	2200      	movs	r2, #0
 8008126:	4619      	mov	r1, r3
 8008128:	f001 fd52 	bl	8009bd0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800812c:	e1cb      	b.n	80084c6 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d005      	beq.n	8008144 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800813e:	2104      	movs	r1, #4
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008144:	2064      	movs	r0, #100	; 0x64
 8008146:	f004 f9e1 	bl	800c50c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f004 f8b0 	bl	800c2b0 <USBH_LL_GetSpeed>
 8008150:	4603      	mov	r3, r0
 8008152:	461a      	mov	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2205      	movs	r2, #5
 800815e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 fc17 	bl	8009996 <USBH_AllocPipe>
 8008168:	4603      	mov	r3, r0
 800816a:	461a      	mov	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 fc0f 	bl	8009996 <USBH_AllocPipe>
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	7919      	ldrb	r1, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008194:	b292      	uxth	r2, r2
 8008196:	9202      	str	r2, [sp, #8]
 8008198:	2200      	movs	r2, #0
 800819a:	9201      	str	r2, [sp, #4]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4603      	mov	r3, r0
 80081a0:	2280      	movs	r2, #128	; 0x80
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 fbc8 	bl	8009938 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7959      	ldrb	r1, [r3, #5]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80081bc:	b292      	uxth	r2, r2
 80081be:	9202      	str	r2, [sp, #8]
 80081c0:	2200      	movs	r2, #0
 80081c2:	9201      	str	r2, [sp, #4]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4603      	mov	r3, r0
 80081c8:	2200      	movs	r2, #0
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fbb4 	bl	8009938 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80081e4:	2200      	movs	r2, #0
 80081e6:	4619      	mov	r1, r3
 80081e8:	f001 fcf2 	bl	8009bd0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081ec:	e16b      	b.n	80084c6 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f96e 	bl	80084d0 <USBH_HandleEnum>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f040 815d 	bne.w	80084bc <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008210:	2b01      	cmp	r3, #1
 8008212:	d103      	bne.n	800821c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2208      	movs	r2, #8
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	e002      	b.n	8008222 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2207      	movs	r2, #7
 8008220:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2205      	movs	r2, #5
 8008226:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008236:	2200      	movs	r2, #0
 8008238:	4619      	mov	r1, r3
 800823a:	f001 fcc9 	bl	8009bd0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800823e:	e13d      	b.n	80084bc <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 813a 	beq.w	80084c0 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008252:	2101      	movs	r1, #1
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2208      	movs	r2, #8
 800825c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2205      	movs	r2, #5
 8008262:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008272:	2200      	movs	r2, #0
 8008274:	4619      	mov	r1, r3
 8008276:	f001 fcab 	bl	8009bd0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800827a:	e121      	b.n	80084c0 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008282:	b29b      	uxth	r3, r3
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fd00 	bl	8008c8c <USBH_SetCfg>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2209      	movs	r2, #9
 8008296:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082ac:	2200      	movs	r2, #0
 80082ae:	4619      	mov	r1, r3
 80082b0:	f001 fc8e 	bl	8009bd0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082b4:	e107      	b.n	80084c6 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d015      	beq.n	80082f0 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80082c4:	2101      	movs	r1, #1
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fd03 	bl	8008cd2 <USBH_SetFeature>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	220a      	movs	r2, #10
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	e00a      	b.n	80082f6 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d106      	bne.n	80082f6 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	220a      	movs	r2, #10
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	e002      	b.n	80082f6 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	220a      	movs	r2, #10
 80082f4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800830a:	2200      	movs	r2, #0
 800830c:	4619      	mov	r1, r3
 800830e:	f001 fc5f 	bl	8009bd0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008312:	e0d8      	b.n	80084c6 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800831a:	2b00      	cmp	r3, #0
 800831c:	d03f      	beq.n	800839e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]
 800832a:	e016      	b.n	800835a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800832c:	7bfa      	ldrb	r2, [r7, #15]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	32de      	adds	r2, #222	; 0xde
 8008332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008336:	791a      	ldrb	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800833e:	429a      	cmp	r2, r3
 8008340:	d108      	bne.n	8008354 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008342:	7bfa      	ldrb	r2, [r7, #15]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	32de      	adds	r2, #222	; 0xde
 8008348:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008352:	e005      	b.n	8008360 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	3301      	adds	r3, #1
 8008358:	73fb      	strb	r3, [r7, #15]
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0e5      	beq.n	800832c <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d016      	beq.n	8008398 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	4798      	blx	r3
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d109      	bne.n	8008390 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2206      	movs	r2, #6
 8008380:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008388:	2103      	movs	r1, #3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	4798      	blx	r3
 800838e:	e006      	b.n	800839e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	220d      	movs	r2, #13
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	e002      	b.n	800839e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	220d      	movs	r2, #13
 800839c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2205      	movs	r2, #5
 80083a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083b2:	2200      	movs	r2, #0
 80083b4:	4619      	mov	r1, r3
 80083b6:	f001 fc0b 	bl	8009bd0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083ba:	e084      	b.n	80084c6 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d017      	beq.n	80083f6 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
 80083d2:	4603      	mov	r3, r0
 80083d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d103      	bne.n	80083e6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	220b      	movs	r2, #11
 80083e2:	701a      	strb	r2, [r3, #0]
 80083e4:	e00a      	b.n	80083fc <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d106      	bne.n	80083fc <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	220d      	movs	r2, #13
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	e002      	b.n	80083fc <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	220d      	movs	r2, #13
 80083fa:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2205      	movs	r2, #5
 8008400:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008410:	2200      	movs	r2, #0
 8008412:	4619      	mov	r1, r3
 8008414:	f001 fbdc 	bl	8009bd0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008418:	e055      	b.n	80084c6 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d04f      	beq.n	80084c4 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	4798      	blx	r3
      }
      break;
 8008430:	e048      	b.n	80084c4 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7ff fcec 	bl	8007e18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d009      	beq.n	800845e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800846e:	2105      	movs	r1, #5
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	d107      	bne.n	8008490 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff fda5 	bl	8007fd8 <USBH_Start>
 800848e:	e002      	b.n	8008496 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f003 fed7 	bl	800c244 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084aa:	2200      	movs	r2, #0
 80084ac:	4619      	mov	r1, r3
 80084ae:	f001 fb8f 	bl	8009bd0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084b2:	e008      	b.n	80084c6 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 80084b4:	bf00      	nop
 80084b6:	e006      	b.n	80084c6 <USBH_Process+0x4ce>
      break;
 80084b8:	bf00      	nop
 80084ba:	e004      	b.n	80084c6 <USBH_Process+0x4ce>
      break;
 80084bc:	bf00      	nop
 80084be:	e002      	b.n	80084c6 <USBH_Process+0x4ce>
    break;
 80084c0:	bf00      	nop
 80084c2:	e000      	b.n	80084c6 <USBH_Process+0x4ce>
      break;
 80084c4:	bf00      	nop
  }
  return USBH_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af04      	add	r7, sp, #16
 80084d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80084d8:	2301      	movs	r3, #1
 80084da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80084dc:	2301      	movs	r3, #1
 80084de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2b07      	cmp	r3, #7
 80084e6:	f200 8208 	bhi.w	80088fa <USBH_HandleEnum+0x42a>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <USBH_HandleEnum+0x20>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008511 	.word	0x08008511
 80084f4:	080085cf 	.word	0x080085cf
 80084f8:	08008639 	.word	0x08008639
 80084fc:	080086c7 	.word	0x080086c7
 8008500:	08008731 	.word	0x08008731
 8008504:	080087a1 	.word	0x080087a1
 8008508:	0800883d 	.word	0x0800883d
 800850c:	080088bb 	.word	0x080088bb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008510:	2108      	movs	r1, #8
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 faea 	bl	8008aec <USBH_Get_DevDesc>
 8008518:	4603      	mov	r3, r0
 800851a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d130      	bne.n	8008584 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7919      	ldrb	r1, [r3, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008546:	b292      	uxth	r2, r2
 8008548:	9202      	str	r2, [sp, #8]
 800854a:	2200      	movs	r2, #0
 800854c:	9201      	str	r2, [sp, #4]
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	4603      	mov	r3, r0
 8008552:	2280      	movs	r2, #128	; 0x80
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 f9ef 	bl	8009938 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	7959      	ldrb	r1, [r3, #5]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800856e:	b292      	uxth	r2, r2
 8008570:	9202      	str	r2, [sp, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	9201      	str	r2, [sp, #4]
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	4603      	mov	r3, r0
 800857a:	2200      	movs	r2, #0
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 f9db 	bl	8009938 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008582:	e1bc      	b.n	80088fe <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b03      	cmp	r3, #3
 8008588:	f040 81b9 	bne.w	80088fe <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008592:	3301      	adds	r3, #1
 8008594:	b2da      	uxtb	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d903      	bls.n	80085ae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	220d      	movs	r2, #13
 80085aa:	701a      	strb	r2, [r3, #0]
      break;
 80085ac:	e1a7      	b.n	80088fe <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	795b      	ldrb	r3, [r3, #5]
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 fa0f 	bl	80099d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	791b      	ldrb	r3, [r3, #4]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fa09 	bl	80099d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	701a      	strb	r2, [r3, #0]
      break;
 80085cc:	e197      	b.n	80088fe <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80085ce:	2112      	movs	r1, #18
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fa8b 	bl	8008aec <USBH_Get_DevDesc>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d103      	bne.n	80085e8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085e6:	e18c      	b.n	8008902 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	f040 8189 	bne.w	8008902 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085f6:	3301      	adds	r3, #1
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008606:	2b03      	cmp	r3, #3
 8008608:	d903      	bls.n	8008612 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	220d      	movs	r2, #13
 800860e:	701a      	strb	r2, [r3, #0]
      break;
 8008610:	e177      	b.n	8008902 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	795b      	ldrb	r3, [r3, #5]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 f9dd 	bl	80099d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	791b      	ldrb	r3, [r3, #4]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 f9d7 	bl	80099d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	701a      	strb	r2, [r3, #0]
      break;
 8008636:	e164      	b.n	8008902 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008638:	2101      	movs	r1, #1
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fb02 	bl	8008c44 <USBH_SetAddress>
 8008640:	4603      	mov	r3, r0
 8008642:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d132      	bne.n	80086b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800864a:	2002      	movs	r0, #2
 800864c:	f003 ff5e 	bl	800c50c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2203      	movs	r2, #3
 800865c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7919      	ldrb	r1, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008672:	b292      	uxth	r2, r2
 8008674:	9202      	str	r2, [sp, #8]
 8008676:	2200      	movs	r2, #0
 8008678:	9201      	str	r2, [sp, #4]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	4603      	mov	r3, r0
 800867e:	2280      	movs	r2, #128	; 0x80
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f959 	bl	8009938 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7959      	ldrb	r1, [r3, #5]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800869a:	b292      	uxth	r2, r2
 800869c:	9202      	str	r2, [sp, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	9201      	str	r2, [sp, #4]
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	4603      	mov	r3, r0
 80086a6:	2200      	movs	r2, #0
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f945 	bl	8009938 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086ae:	e12a      	b.n	8008906 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	f040 8127 	bne.w	8008906 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	220d      	movs	r2, #13
 80086bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	705a      	strb	r2, [r3, #1]
      break;
 80086c4:	e11f      	b.n	8008906 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80086c6:	2109      	movs	r1, #9
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fa37 	bl	8008b3c <USBH_Get_CfgDesc>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2204      	movs	r2, #4
 80086dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086de:	e114      	b.n	800890a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	f040 8111 	bne.w	800890a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086ee:	3301      	adds	r3, #1
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d903      	bls.n	800870a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	220d      	movs	r2, #13
 8008706:	701a      	strb	r2, [r3, #0]
      break;
 8008708:	e0ff      	b.n	800890a <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	795b      	ldrb	r3, [r3, #5]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f961 	bl	80099d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	791b      	ldrb	r3, [r3, #4]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 f95b 	bl	80099d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	701a      	strb	r2, [r3, #0]
      break;
 800872e:	e0ec      	b.n	800890a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f9ff 	bl	8008b3c <USBH_Get_CfgDesc>
 800873e:	4603      	mov	r3, r0
 8008740:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d103      	bne.n	8008750 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2205      	movs	r2, #5
 800874c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800874e:	e0de      	b.n	800890e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	2b03      	cmp	r3, #3
 8008754:	f040 80db 	bne.w	800890e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800875e:	3301      	adds	r3, #1
 8008760:	b2da      	uxtb	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800876e:	2b03      	cmp	r3, #3
 8008770:	d903      	bls.n	800877a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	220d      	movs	r2, #13
 8008776:	701a      	strb	r2, [r3, #0]
      break;
 8008778:	e0c9      	b.n	800890e <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	795b      	ldrb	r3, [r3, #5]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 f929 	bl	80099d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	791b      	ldrb	r3, [r3, #4]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 f923 	bl	80099d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
      break;
 800879e:	e0b6      	b.n	800890e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d036      	beq.n	8008818 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087b6:	23ff      	movs	r3, #255	; 0xff
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f9e3 	bl	8008b84 <USBH_Get_StringDesc>
 80087be:	4603      	mov	r3, r0
 80087c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d111      	bne.n	80087ec <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2206      	movs	r2, #6
 80087cc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2205      	movs	r2, #5
 80087d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087e2:	2200      	movs	r2, #0
 80087e4:	4619      	mov	r1, r3
 80087e6:	f001 f9f3 	bl	8009bd0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087ea:	e092      	b.n	8008912 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	f040 808f 	bne.w	8008912 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2206      	movs	r2, #6
 80087f8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2205      	movs	r2, #5
 80087fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800880e:	2200      	movs	r2, #0
 8008810:	4619      	mov	r1, r3
 8008812:	f001 f9dd 	bl	8009bd0 <osMessagePut>
      break;
 8008816:	e07c      	b.n	8008912 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2206      	movs	r2, #6
 800881c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2205      	movs	r2, #5
 8008822:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008832:	2200      	movs	r2, #0
 8008834:	4619      	mov	r1, r3
 8008836:	f001 f9cb 	bl	8009bd0 <osMessagePut>
      break;
 800883a:	e06a      	b.n	8008912 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008842:	2b00      	cmp	r3, #0
 8008844:	d027      	beq.n	8008896 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008852:	23ff      	movs	r3, #255	; 0xff
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f995 	bl	8008b84 <USBH_Get_StringDesc>
 800885a:	4603      	mov	r3, r0
 800885c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2207      	movs	r2, #7
 8008868:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800886a:	e054      	b.n	8008916 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	2b03      	cmp	r3, #3
 8008870:	d151      	bne.n	8008916 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2207      	movs	r2, #7
 8008876:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2205      	movs	r2, #5
 800887c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800888c:	2200      	movs	r2, #0
 800888e:	4619      	mov	r1, r3
 8008890:	f001 f99e 	bl	8009bd0 <osMessagePut>
      break;
 8008894:	e03f      	b.n	8008916 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2207      	movs	r2, #7
 800889a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2205      	movs	r2, #5
 80088a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088b0:	2200      	movs	r2, #0
 80088b2:	4619      	mov	r1, r3
 80088b4:	f001 f98c 	bl	8009bd0 <osMessagePut>
      break;
 80088b8:	e02d      	b.n	8008916 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d017      	beq.n	80088f4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088d0:	23ff      	movs	r3, #255	; 0xff
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f956 	bl	8008b84 <USBH_Get_StringDesc>
 80088d8:	4603      	mov	r3, r0
 80088da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d102      	bne.n	80088e8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80088e6:	e018      	b.n	800891a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d115      	bne.n	800891a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
      break;
 80088f2:	e012      	b.n	800891a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
      break;
 80088f8:	e00f      	b.n	800891a <USBH_HandleEnum+0x44a>

    default:
      break;
 80088fa:	bf00      	nop
 80088fc:	e00e      	b.n	800891c <USBH_HandleEnum+0x44c>
      break;
 80088fe:	bf00      	nop
 8008900:	e00c      	b.n	800891c <USBH_HandleEnum+0x44c>
      break;
 8008902:	bf00      	nop
 8008904:	e00a      	b.n	800891c <USBH_HandleEnum+0x44c>
      break;
 8008906:	bf00      	nop
 8008908:	e008      	b.n	800891c <USBH_HandleEnum+0x44c>
      break;
 800890a:	bf00      	nop
 800890c:	e006      	b.n	800891c <USBH_HandleEnum+0x44c>
      break;
 800890e:	bf00      	nop
 8008910:	e004      	b.n	800891c <USBH_HandleEnum+0x44c>
      break;
 8008912:	bf00      	nop
 8008914:	e002      	b.n	800891c <USBH_HandleEnum+0x44c>
      break;
 8008916:	bf00      	nop
 8008918:	e000      	b.n	800891c <USBH_HandleEnum+0x44c>
      break;
 800891a:	bf00      	nop
  }
  return Status;
 800891c:	7bfb      	ldrb	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop

08008928 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f804 	bl	800896a <USBH_HandleSof>
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b0b      	cmp	r3, #11
 800897a:	d10a      	bne.n	8008992 <USBH_HandleSof+0x28>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008982:	2b00      	cmp	r3, #0
 8008984:	d005      	beq.n	8008992 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	4798      	blx	r3
  }
}
 8008992:	bf00      	nop
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089be:	2200      	movs	r2, #0
 80089c0:	4619      	mov	r1, r3
 80089c2:	f001 f905 	bl	8009bd0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80089c6:	bf00      	nop
}
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80089de:	bf00      	nop
}
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4619      	mov	r1, r3
 8008a22:	f001 f8d5 	bl	8009bd0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f003 fc12 	bl	800c27a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	791b      	ldrb	r3, [r3, #4]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 ffbb 	bl	80099d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	795b      	ldrb	r3, [r3, #5]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 ffb5 	bl	80099d8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a82:	2200      	movs	r2, #0
 8008a84:	4619      	mov	r1, r3
 8008a86:	f001 f8a3 	bl	8009bd0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8008aa2:	f107 030c 	add.w	r3, r7, #12
 8008aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f001 f8d0 	bl	8009c50 <osMessageGet>
    if (event.status == osEventMessage)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2b10      	cmp	r3, #16
 8008ab4:	d1f2      	bne.n	8008a9c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff fa9e 	bl	8007ff8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008abc:	e7ee      	b.n	8008a9c <USBH_Process_OS+0x8>

08008abe <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ada:	2200      	movs	r2, #0
 8008adc:	4619      	mov	r1, r3
 8008ade:	f001 f877 	bl	8009bd0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008afe:	78fb      	ldrb	r3, [r7, #3]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	4613      	mov	r3, r2
 8008b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f864 	bl	8008bda <USBH_GetDescriptor>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10a      	bne.n	8008b32 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b28:	78fa      	ldrb	r2, [r7, #3]
 8008b2a:	b292      	uxth	r2, r2
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f000 f918 	bl	8008d62 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	331c      	adds	r3, #28
 8008b4c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008b4e:	887b      	ldrh	r3, [r7, #2]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b58:	2100      	movs	r1, #0
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f83d 	bl	8008bda <USBH_GetDescriptor>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d107      	bne.n	8008b7a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008b6a:	887b      	ldrh	r3, [r7, #2]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	68b9      	ldr	r1, [r7, #8]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f987 	bl	8008e84 <USBH_ParseCfgDesc>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af02      	add	r7, sp, #8
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	607a      	str	r2, [r7, #4]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	460b      	mov	r3, r1
 8008b92:	72fb      	strb	r3, [r7, #11]
 8008b94:	4613      	mov	r3, r2
 8008b96:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008b98:	7afb      	ldrb	r3, [r7, #11]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008ba0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008ba8:	893b      	ldrh	r3, [r7, #8]
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	460b      	mov	r3, r1
 8008bae:	2100      	movs	r1, #0
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f812 	bl	8008bda <USBH_GetDescriptor>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d107      	bne.n	8008bd0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008bc6:	893a      	ldrh	r2, [r7, #8]
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fb24 	bl	8009218 <USBH_ParseStringDesc>
  }

  return status;
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	607b      	str	r3, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	72fb      	strb	r3, [r7, #11]
 8008be8:	4613      	mov	r3, r2
 8008bea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	789b      	ldrb	r3, [r3, #2]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d11c      	bne.n	8008c2e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008bf4:	7afb      	ldrb	r3, [r7, #11]
 8008bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2206      	movs	r2, #6
 8008c04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	893a      	ldrh	r2, [r7, #8]
 8008c0a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008c0c:	893b      	ldrh	r3, [r7, #8]
 8008c0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c16:	d104      	bne.n	8008c22 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f240 4209 	movw	r2, #1033	; 0x409
 8008c1e:	829a      	strh	r2, [r3, #20]
 8008c20:	e002      	b.n	8008c28 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8b3a      	ldrh	r2, [r7, #24]
 8008c2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008c2e:	8b3b      	ldrh	r3, [r7, #24]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fb3d 	bl	80092b4 <USBH_CtlReq>
 8008c3a:	4603      	mov	r3, r0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	789b      	ldrb	r3, [r3, #2]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d10f      	bne.n	8008c78 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2205      	movs	r2, #5
 8008c62:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fb19 	bl	80092b4 <USBH_CtlReq>
 8008c82:	4603      	mov	r3, r0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	789b      	ldrb	r3, [r3, #2]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10e      	bne.n	8008cbe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2209      	movs	r2, #9
 8008caa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	887a      	ldrh	r2, [r7, #2]
 8008cb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 faf6 	bl	80092b4 <USBH_CtlReq>
 8008cc8:	4603      	mov	r3, r0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	789b      	ldrb	r3, [r3, #2]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d10f      	bne.n	8008d06 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2203      	movs	r2, #3
 8008cf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008cf2:	78fb      	ldrb	r3, [r7, #3]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d06:	2200      	movs	r2, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fad2 	bl	80092b4 <USBH_CtlReq>
 8008d10:	4603      	mov	r3, r0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	789b      	ldrb	r3, [r3, #2]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d10f      	bne.n	8008d4e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2202      	movs	r2, #2
 8008d32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2100      	movs	r1, #0
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 faae 	bl	80092b4 <USBH_CtlReq>
 8008d58:	4603      	mov	r3, r0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b085      	sub	sp, #20
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	785a      	ldrb	r2, [r3, #1]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	3302      	adds	r3, #2
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	3303      	adds	r3, #3
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	4313      	orrs	r3, r2
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	791a      	ldrb	r2, [r3, #4]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	795a      	ldrb	r2, [r3, #5]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	799a      	ldrb	r2, [r3, #6]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	79da      	ldrb	r2, [r3, #7]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	79db      	ldrb	r3, [r3, #7]
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	dc11      	bgt.n	8008de8 <USBH_ParseDevDesc+0x86>
 8008dc4:	2b08      	cmp	r3, #8
 8008dc6:	db16      	blt.n	8008df6 <USBH_ParseDevDesc+0x94>
 8008dc8:	3b08      	subs	r3, #8
 8008dca:	2201      	movs	r2, #1
 8008dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	bf14      	ite	ne
 8008ddc:	2301      	movne	r3, #1
 8008dde:	2300      	moveq	r3, #0
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <USBH_ParseDevDesc+0x8a>
 8008de6:	e006      	b.n	8008df6 <USBH_ParseDevDesc+0x94>
 8008de8:	2b40      	cmp	r3, #64	; 0x40
 8008dea:	d104      	bne.n	8008df6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	79da      	ldrb	r2, [r3, #7]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	71da      	strb	r2, [r3, #7]
      break;
 8008df4:	e003      	b.n	8008dfe <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2240      	movs	r2, #64	; 0x40
 8008dfa:	71da      	strb	r2, [r3, #7]
      break;
 8008dfc:	bf00      	nop
  }

  if (length > 8U)
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d939      	bls.n	8008e78 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	3308      	adds	r3, #8
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3309      	adds	r3, #9
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	330a      	adds	r3, #10
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	330b      	adds	r3, #11
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	021b      	lsls	r3, r3, #8
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	330c      	adds	r3, #12
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	330d      	adds	r3, #13
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	4313      	orrs	r3, r2
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	7b9a      	ldrb	r2, [r3, #14]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	7bda      	ldrb	r2, [r3, #15]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	7c1a      	ldrb	r2, [r3, #16]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	7c5a      	ldrb	r2, [r3, #17]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	745a      	strb	r2, [r3, #17]
  }
}
 8008e78:	bf00      	nop
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08c      	sub	sp, #48	; 0x30
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e98:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	781a      	ldrb	r2, [r3, #0]
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	785a      	ldrb	r2, [r3, #1]
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	3303      	adds	r3, #3
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee0:	bf28      	it	cs
 8008ee2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	791a      	ldrb	r2, [r3, #4]
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	795a      	ldrb	r2, [r3, #5]
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	799a      	ldrb	r2, [r3, #6]
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	79da      	ldrb	r2, [r3, #7]
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	7a1a      	ldrb	r2, [r3, #8]
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b09      	cmp	r3, #9
 8008f1a:	d002      	beq.n	8008f22 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	2209      	movs	r2, #9
 8008f20:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008f22:	88fb      	ldrh	r3, [r7, #6]
 8008f24:	2b09      	cmp	r3, #9
 8008f26:	f240 809d 	bls.w	8009064 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008f2a:	2309      	movs	r3, #9
 8008f2c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f32:	e081      	b.n	8009038 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f34:	f107 0316 	add.w	r3, r7, #22
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f3c:	f000 f99f 	bl	800927e <USBH_GetNextDesc>
 8008f40:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d176      	bne.n	8009038 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b09      	cmp	r3, #9
 8008f50:	d002      	beq.n	8008f58 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	2209      	movs	r2, #9
 8008f56:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f5c:	221a      	movs	r2, #26
 8008f5e:	fb02 f303 	mul.w	r3, r2, r3
 8008f62:	3308      	adds	r3, #8
 8008f64:	6a3a      	ldr	r2, [r7, #32]
 8008f66:	4413      	add	r3, r2
 8008f68:	3302      	adds	r3, #2
 8008f6a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f6e:	69f8      	ldr	r0, [r7, #28]
 8008f70:	f000 f87e 	bl	8009070 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f7e:	e043      	b.n	8009008 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f80:	f107 0316 	add.w	r3, r7, #22
 8008f84:	4619      	mov	r1, r3
 8008f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f88:	f000 f979 	bl	800927e <USBH_GetNextDesc>
 8008f8c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	d138      	bne.n	8009008 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	795b      	ldrb	r3, [r3, #5]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d10f      	bne.n	8008fbe <USBH_ParseCfgDesc+0x13a>
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	799b      	ldrb	r3, [r3, #6]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d10b      	bne.n	8008fbe <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	79db      	ldrb	r3, [r3, #7]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10f      	bne.n	8008fce <USBH_ParseCfgDesc+0x14a>
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b09      	cmp	r3, #9
 8008fb4:	d00b      	beq.n	8008fce <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	2209      	movs	r2, #9
 8008fba:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008fbc:	e007      	b.n	8008fce <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b07      	cmp	r3, #7
 8008fc4:	d004      	beq.n	8008fd0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	2207      	movs	r2, #7
 8008fca:	701a      	strb	r2, [r3, #0]
 8008fcc:	e000      	b.n	8008fd0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008fce:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fd4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008fd8:	3201      	adds	r2, #1
 8008fda:	00d2      	lsls	r2, r2, #3
 8008fdc:	211a      	movs	r1, #26
 8008fde:	fb01 f303 	mul.w	r3, r1, r3
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	6a3a      	ldr	r2, [r7, #32]
 8008fe8:	4413      	add	r3, r2
 8008fea:	3304      	adds	r3, #4
 8008fec:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ff0:	69b9      	ldr	r1, [r7, #24]
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 f86b 	bl	80090ce <USBH_ParseEPDesc>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008ffe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009002:	3301      	adds	r3, #1
 8009004:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	791b      	ldrb	r3, [r3, #4]
 800900c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009010:	429a      	cmp	r2, r3
 8009012:	d204      	bcs.n	800901e <USBH_ParseCfgDesc+0x19a>
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	885a      	ldrh	r2, [r3, #2]
 8009018:	8afb      	ldrh	r3, [r7, #22]
 800901a:	429a      	cmp	r2, r3
 800901c:	d8b0      	bhi.n	8008f80 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	791b      	ldrb	r3, [r3, #4]
 8009022:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009026:	429a      	cmp	r2, r3
 8009028:	d201      	bcs.n	800902e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800902a:	2303      	movs	r3, #3
 800902c:	e01c      	b.n	8009068 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800902e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009032:	3301      	adds	r3, #1
 8009034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800903c:	2b01      	cmp	r3, #1
 800903e:	d805      	bhi.n	800904c <USBH_ParseCfgDesc+0x1c8>
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	885a      	ldrh	r2, [r3, #2]
 8009044:	8afb      	ldrh	r3, [r7, #22]
 8009046:	429a      	cmp	r2, r3
 8009048:	f63f af74 	bhi.w	8008f34 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	791b      	ldrb	r3, [r3, #4]
 8009050:	2b02      	cmp	r3, #2
 8009052:	bf28      	it	cs
 8009054:	2302      	movcs	r3, #2
 8009056:	b2db      	uxtb	r3, r3
 8009058:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800905c:	429a      	cmp	r2, r3
 800905e:	d201      	bcs.n	8009064 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009060:	2303      	movs	r3, #3
 8009062:	e001      	b.n	8009068 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009068:	4618      	mov	r0, r3
 800906a:	3730      	adds	r7, #48	; 0x30
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	785a      	ldrb	r2, [r3, #1]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	789a      	ldrb	r2, [r3, #2]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	78da      	ldrb	r2, [r3, #3]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	791a      	ldrb	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	795a      	ldrb	r2, [r3, #5]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	799a      	ldrb	r2, [r3, #6]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	79da      	ldrb	r2, [r3, #7]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	7a1a      	ldrb	r2, [r3, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	721a      	strb	r2, [r3, #8]
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b087      	sub	sp, #28
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	785a      	ldrb	r2, [r3, #1]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	789a      	ldrb	r2, [r3, #2]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	78da      	ldrb	r2, [r3, #3]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3304      	adds	r3, #4
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	b29a      	uxth	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	3305      	adds	r3, #5
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	b29b      	uxth	r3, r3
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	b29b      	uxth	r3, r3
 8009112:	4313      	orrs	r3, r2
 8009114:	b29a      	uxth	r2, r3
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	799a      	ldrb	r2, [r3, #6]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	889b      	ldrh	r3, [r3, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800912a:	2303      	movs	r3, #3
 800912c:	75fb      	strb	r3, [r7, #23]
 800912e:	e033      	b.n	8009198 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	889b      	ldrh	r3, [r3, #4]
 8009134:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009138:	f023 0307 	bic.w	r3, r3, #7
 800913c:	b29a      	uxth	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	889b      	ldrh	r3, [r3, #4]
 8009146:	b21a      	sxth	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3304      	adds	r3, #4
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	b299      	uxth	r1, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3305      	adds	r3, #5
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	b29b      	uxth	r3, r3
 8009158:	021b      	lsls	r3, r3, #8
 800915a:	b29b      	uxth	r3, r3
 800915c:	430b      	orrs	r3, r1
 800915e:	b29b      	uxth	r3, r3
 8009160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009164:	2b00      	cmp	r3, #0
 8009166:	d110      	bne.n	800918a <USBH_ParseEPDesc+0xbc>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3304      	adds	r3, #4
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	b299      	uxth	r1, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3305      	adds	r3, #5
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	b29b      	uxth	r3, r3
 8009178:	021b      	lsls	r3, r3, #8
 800917a:	b29b      	uxth	r3, r3
 800917c:	430b      	orrs	r3, r1
 800917e:	b29b      	uxth	r3, r3
 8009180:	b21b      	sxth	r3, r3
 8009182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009186:	b21b      	sxth	r3, r3
 8009188:	e001      	b.n	800918e <USBH_ParseEPDesc+0xc0>
 800918a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800918e:	4313      	orrs	r3, r2
 8009190:	b21b      	sxth	r3, r3
 8009192:	b29a      	uxth	r2, r3
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d116      	bne.n	80091d0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	78db      	ldrb	r3, [r3, #3]
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d005      	beq.n	80091ba <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	78db      	ldrb	r3, [r3, #3]
 80091b2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d127      	bne.n	800920a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	799b      	ldrb	r3, [r3, #6]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <USBH_ParseEPDesc+0xfc>
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	799b      	ldrb	r3, [r3, #6]
 80091c6:	2b10      	cmp	r3, #16
 80091c8:	d91f      	bls.n	800920a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80091ca:	2303      	movs	r3, #3
 80091cc:	75fb      	strb	r3, [r7, #23]
 80091ce:	e01c      	b.n	800920a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	78db      	ldrb	r3, [r3, #3]
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d10a      	bne.n	80091f2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	799b      	ldrb	r3, [r3, #6]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <USBH_ParseEPDesc+0x11e>
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	799b      	ldrb	r3, [r3, #6]
 80091e8:	2b10      	cmp	r3, #16
 80091ea:	d90e      	bls.n	800920a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80091ec:	2303      	movs	r3, #3
 80091ee:	75fb      	strb	r3, [r7, #23]
 80091f0:	e00b      	b.n	800920a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	78db      	ldrb	r3, [r3, #3]
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d105      	bne.n	800920a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	799b      	ldrb	r3, [r3, #6]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009206:	2303      	movs	r3, #3
 8009208:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
}
 800920c:	4618      	mov	r0, r3
 800920e:	371c      	adds	r7, #28
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	4613      	mov	r3, r2
 8009224:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3301      	adds	r3, #1
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b03      	cmp	r3, #3
 800922e:	d120      	bne.n	8009272 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	1e9a      	subs	r2, r3, #2
 8009236:	88fb      	ldrh	r3, [r7, #6]
 8009238:	4293      	cmp	r3, r2
 800923a:	bf28      	it	cs
 800923c:	4613      	movcs	r3, r2
 800923e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3302      	adds	r3, #2
 8009244:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009246:	2300      	movs	r3, #0
 8009248:	82fb      	strh	r3, [r7, #22]
 800924a:	e00b      	b.n	8009264 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800924c:	8afb      	ldrh	r3, [r7, #22]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	4413      	add	r3, r2
 8009252:	781a      	ldrb	r2, [r3, #0]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	3301      	adds	r3, #1
 800925c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800925e:	8afb      	ldrh	r3, [r7, #22]
 8009260:	3302      	adds	r3, #2
 8009262:	82fb      	strh	r3, [r7, #22]
 8009264:	8afa      	ldrh	r2, [r7, #22]
 8009266:	8abb      	ldrh	r3, [r7, #20]
 8009268:	429a      	cmp	r2, r3
 800926a:	d3ef      	bcc.n	800924c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2200      	movs	r2, #0
 8009270:	701a      	strb	r2, [r3, #0]
  }
}
 8009272:	bf00      	nop
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	881a      	ldrh	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	4413      	add	r3, r2
 8009294:	b29a      	uxth	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4413      	add	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092a6:	68fb      	ldr	r3, [r7, #12]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80092c2:	2301      	movs	r3, #1
 80092c4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	789b      	ldrb	r3, [r3, #2]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d002      	beq.n	80092d4 <USBH_CtlReq+0x20>
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d01d      	beq.n	800930e <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80092d2:	e043      	b.n	800935c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	88fa      	ldrh	r2, [r7, #6]
 80092de:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2201      	movs	r2, #1
 80092e4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2202      	movs	r2, #2
 80092ea:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80092ec:	2301      	movs	r3, #1
 80092ee:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2203      	movs	r2, #3
 80092f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009304:	2200      	movs	r2, #0
 8009306:	4619      	mov	r1, r3
 8009308:	f000 fc62 	bl	8009bd0 <osMessagePut>
      break;
 800930c:	e026      	b.n	800935c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 f82a 	bl	8009368 <USBH_HandleControl>
 8009314:	4603      	mov	r3, r0
 8009316:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <USBH_CtlReq+0x70>
 800931e:	7dfb      	ldrb	r3, [r7, #23]
 8009320:	2b03      	cmp	r3, #3
 8009322:	d106      	bne.n	8009332 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	761a      	strb	r2, [r3, #24]
 8009330:	e005      	b.n	800933e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d102      	bne.n	800933e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2203      	movs	r2, #3
 8009342:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009352:	2200      	movs	r2, #0
 8009354:	4619      	mov	r1, r3
 8009356:	f000 fc3b 	bl	8009bd0 <osMessagePut>
      break;
 800935a:	bf00      	nop
  }
  return status;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af02      	add	r7, sp, #8
 800936e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009370:	2301      	movs	r3, #1
 8009372:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009374:	2300      	movs	r3, #0
 8009376:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7e1b      	ldrb	r3, [r3, #24]
 800937c:	3b01      	subs	r3, #1
 800937e:	2b0a      	cmp	r3, #10
 8009380:	f200 8229 	bhi.w	80097d6 <USBH_HandleControl+0x46e>
 8009384:	a201      	add	r2, pc, #4	; (adr r2, 800938c <USBH_HandleControl+0x24>)
 8009386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938a:	bf00      	nop
 800938c:	080093b9 	.word	0x080093b9
 8009390:	080093d3 	.word	0x080093d3
 8009394:	08009475 	.word	0x08009475
 8009398:	0800949b 	.word	0x0800949b
 800939c:	08009527 	.word	0x08009527
 80093a0:	08009551 	.word	0x08009551
 80093a4:	08009613 	.word	0x08009613
 80093a8:	08009635 	.word	0x08009635
 80093ac:	080096c7 	.word	0x080096c7
 80093b0:	080096ed 	.word	0x080096ed
 80093b4:	0800977f 	.word	0x0800977f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f103 0110 	add.w	r1, r3, #16
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	795b      	ldrb	r3, [r3, #5]
 80093c2:	461a      	mov	r2, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fa17 	bl	80097f8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2202      	movs	r2, #2
 80093ce:	761a      	strb	r2, [r3, #24]
      break;
 80093d0:	e20c      	b.n	80097ec <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	795b      	ldrb	r3, [r3, #5]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f003 f83d 	bl	800c458 <USBH_LL_GetURBState>
 80093de:	4603      	mov	r3, r0
 80093e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d12c      	bne.n	8009442 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	7c1b      	ldrb	r3, [r3, #16]
 80093ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	8adb      	ldrh	r3, [r3, #22]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00a      	beq.n	8009410 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80093fa:	7b7b      	ldrb	r3, [r7, #13]
 80093fc:	2b80      	cmp	r3, #128	; 0x80
 80093fe:	d103      	bne.n	8009408 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2203      	movs	r2, #3
 8009404:	761a      	strb	r2, [r3, #24]
 8009406:	e00d      	b.n	8009424 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2205      	movs	r2, #5
 800940c:	761a      	strb	r2, [r3, #24]
 800940e:	e009      	b.n	8009424 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009410:	7b7b      	ldrb	r3, [r7, #13]
 8009412:	2b80      	cmp	r3, #128	; 0x80
 8009414:	d103      	bne.n	800941e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2209      	movs	r2, #9
 800941a:	761a      	strb	r2, [r3, #24]
 800941c:	e002      	b.n	8009424 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2207      	movs	r2, #7
 8009422:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2203      	movs	r2, #3
 8009428:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009438:	2200      	movs	r2, #0
 800943a:	4619      	mov	r1, r3
 800943c:	f000 fbc8 	bl	8009bd0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009440:	e1cb      	b.n	80097da <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	2b04      	cmp	r3, #4
 8009446:	d003      	beq.n	8009450 <USBH_HandleControl+0xe8>
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	2b02      	cmp	r3, #2
 800944c:	f040 81c5 	bne.w	80097da <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	220b      	movs	r2, #11
 8009454:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2203      	movs	r2, #3
 800945a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800946a:	2200      	movs	r2, #0
 800946c:	4619      	mov	r1, r3
 800946e:	f000 fbaf 	bl	8009bd0 <osMessagePut>
      break;
 8009472:	e1b2      	b.n	80097da <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800947a:	b29a      	uxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6899      	ldr	r1, [r3, #8]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	899a      	ldrh	r2, [r3, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	791b      	ldrb	r3, [r3, #4]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f9f2 	bl	8009876 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2204      	movs	r2, #4
 8009496:	761a      	strb	r2, [r3, #24]
      break;
 8009498:	e1a8      	b.n	80097ec <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	791b      	ldrb	r3, [r3, #4]
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f002 ffd9 	bl	800c458 <USBH_LL_GetURBState>
 80094a6:	4603      	mov	r3, r0
 80094a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d110      	bne.n	80094d2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2209      	movs	r2, #9
 80094b4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2203      	movs	r2, #3
 80094ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094ca:	2200      	movs	r2, #0
 80094cc:	4619      	mov	r1, r3
 80094ce:	f000 fb7f 	bl	8009bd0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	2b05      	cmp	r3, #5
 80094d6:	d110      	bne.n	80094fa <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80094d8:	2303      	movs	r3, #3
 80094da:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2203      	movs	r2, #3
 80094e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094f0:	2200      	movs	r2, #0
 80094f2:	4619      	mov	r1, r3
 80094f4:	f000 fb6c 	bl	8009bd0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094f8:	e171      	b.n	80097de <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	f040 816e 	bne.w	80097de <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	220b      	movs	r2, #11
 8009506:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2203      	movs	r2, #3
 800950c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800951c:	2200      	movs	r2, #0
 800951e:	4619      	mov	r1, r3
 8009520:	f000 fb56 	bl	8009bd0 <osMessagePut>
      break;
 8009524:	e15b      	b.n	80097de <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6899      	ldr	r1, [r3, #8]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	899a      	ldrh	r2, [r3, #12]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	795b      	ldrb	r3, [r3, #5]
 8009532:	2001      	movs	r0, #1
 8009534:	9000      	str	r0, [sp, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f978 	bl	800982c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009542:	b29a      	uxth	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2206      	movs	r2, #6
 800954c:	761a      	strb	r2, [r3, #24]
      break;
 800954e:	e14d      	b.n	80097ec <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	795b      	ldrb	r3, [r3, #5]
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f002 ff7e 	bl	800c458 <USBH_LL_GetURBState>
 800955c:	4603      	mov	r3, r0
 800955e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d111      	bne.n	800958a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2207      	movs	r2, #7
 800956a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2203      	movs	r2, #3
 8009570:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009580:	2200      	movs	r2, #0
 8009582:	4619      	mov	r1, r3
 8009584:	f000 fb24 	bl	8009bd0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009588:	e12b      	b.n	80097e2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	2b05      	cmp	r3, #5
 800958e:	d113      	bne.n	80095b8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	220c      	movs	r2, #12
 8009594:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009596:	2303      	movs	r3, #3
 8009598:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2203      	movs	r2, #3
 800959e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095ae:	2200      	movs	r2, #0
 80095b0:	4619      	mov	r1, r3
 80095b2:	f000 fb0d 	bl	8009bd0 <osMessagePut>
      break;
 80095b6:	e114      	b.n	80097e2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d111      	bne.n	80095e2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2205      	movs	r2, #5
 80095c2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2203      	movs	r2, #3
 80095c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095d8:	2200      	movs	r2, #0
 80095da:	4619      	mov	r1, r3
 80095dc:	f000 faf8 	bl	8009bd0 <osMessagePut>
      break;
 80095e0:	e0ff      	b.n	80097e2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	2b04      	cmp	r3, #4
 80095e6:	f040 80fc 	bne.w	80097e2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	220b      	movs	r2, #11
 80095ee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80095f0:	2302      	movs	r3, #2
 80095f2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2203      	movs	r2, #3
 80095f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009608:	2200      	movs	r2, #0
 800960a:	4619      	mov	r1, r3
 800960c:	f000 fae0 	bl	8009bd0 <osMessagePut>
      break;
 8009610:	e0e7      	b.n	80097e2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	791b      	ldrb	r3, [r3, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	2100      	movs	r1, #0
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f92b 	bl	8009876 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009626:	b29a      	uxth	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2208      	movs	r2, #8
 8009630:	761a      	strb	r2, [r3, #24]

      break;
 8009632:	e0db      	b.n	80097ec <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	791b      	ldrb	r3, [r3, #4]
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f002 ff0c 	bl	800c458 <USBH_LL_GetURBState>
 8009640:	4603      	mov	r3, r0
 8009642:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d113      	bne.n	8009672 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	220d      	movs	r2, #13
 800964e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2203      	movs	r2, #3
 8009658:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009668:	2200      	movs	r2, #0
 800966a:	4619      	mov	r1, r3
 800966c:	f000 fab0 	bl	8009bd0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009670:	e0b9      	b.n	80097e6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b04      	cmp	r3, #4
 8009676:	d111      	bne.n	800969c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	220b      	movs	r2, #11
 800967c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2203      	movs	r2, #3
 8009682:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009692:	2200      	movs	r2, #0
 8009694:	4619      	mov	r1, r3
 8009696:	f000 fa9b 	bl	8009bd0 <osMessagePut>
      break;
 800969a:	e0a4      	b.n	80097e6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	2b05      	cmp	r3, #5
 80096a0:	f040 80a1 	bne.w	80097e6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80096a4:	2303      	movs	r3, #3
 80096a6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2203      	movs	r2, #3
 80096ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096bc:	2200      	movs	r2, #0
 80096be:	4619      	mov	r1, r3
 80096c0:	f000 fa86 	bl	8009bd0 <osMessagePut>
      break;
 80096c4:	e08f      	b.n	80097e6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	795b      	ldrb	r3, [r3, #5]
 80096ca:	2201      	movs	r2, #1
 80096cc:	9200      	str	r2, [sp, #0]
 80096ce:	2200      	movs	r2, #0
 80096d0:	2100      	movs	r1, #0
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f8aa 	bl	800982c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096de:	b29a      	uxth	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	220a      	movs	r2, #10
 80096e8:	761a      	strb	r2, [r3, #24]
      break;
 80096ea:	e07f      	b.n	80097ec <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	795b      	ldrb	r3, [r3, #5]
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f002 feb0 	bl	800c458 <USBH_LL_GetURBState>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d113      	bne.n	800972a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	220d      	movs	r2, #13
 800970a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2203      	movs	r2, #3
 8009710:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009720:	2200      	movs	r2, #0
 8009722:	4619      	mov	r1, r3
 8009724:	f000 fa54 	bl	8009bd0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009728:	e05f      	b.n	80097ea <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d111      	bne.n	8009754 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2209      	movs	r2, #9
 8009734:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2203      	movs	r2, #3
 800973a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800974a:	2200      	movs	r2, #0
 800974c:	4619      	mov	r1, r3
 800974e:	f000 fa3f 	bl	8009bd0 <osMessagePut>
      break;
 8009752:	e04a      	b.n	80097ea <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	2b04      	cmp	r3, #4
 8009758:	d147      	bne.n	80097ea <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	220b      	movs	r2, #11
 800975e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2203      	movs	r2, #3
 8009764:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009774:	2200      	movs	r2, #0
 8009776:	4619      	mov	r1, r3
 8009778:	f000 fa2a 	bl	8009bd0 <osMessagePut>
      break;
 800977c:	e035      	b.n	80097ea <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7e5b      	ldrb	r3, [r3, #25]
 8009782:	3301      	adds	r3, #1
 8009784:	b2da      	uxtb	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	765a      	strb	r2, [r3, #25]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	7e5b      	ldrb	r3, [r3, #25]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d806      	bhi.n	80097a0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800979e:	e025      	b.n	80097ec <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097a6:	2106      	movs	r1, #6
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	795b      	ldrb	r3, [r3, #5]
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f90d 	bl	80099d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	791b      	ldrb	r3, [r3, #4]
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f907 	bl	80099d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80097d0:	2302      	movs	r3, #2
 80097d2:	73fb      	strb	r3, [r7, #15]
      break;
 80097d4:	e00a      	b.n	80097ec <USBH_HandleControl+0x484>

    default:
      break;
 80097d6:	bf00      	nop
 80097d8:	e008      	b.n	80097ec <USBH_HandleControl+0x484>
      break;
 80097da:	bf00      	nop
 80097dc:	e006      	b.n	80097ec <USBH_HandleControl+0x484>
      break;
 80097de:	bf00      	nop
 80097e0:	e004      	b.n	80097ec <USBH_HandleControl+0x484>
      break;
 80097e2:	bf00      	nop
 80097e4:	e002      	b.n	80097ec <USBH_HandleControl+0x484>
      break;
 80097e6:	bf00      	nop
 80097e8:	e000      	b.n	80097ec <USBH_HandleControl+0x484>
      break;
 80097ea:	bf00      	nop
  }

  return status;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop

080097f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af04      	add	r7, sp, #16
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	4613      	mov	r3, r2
 8009804:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009806:	79f9      	ldrb	r1, [r7, #7]
 8009808:	2300      	movs	r3, #0
 800980a:	9303      	str	r3, [sp, #12]
 800980c:	2308      	movs	r3, #8
 800980e:	9302      	str	r3, [sp, #8]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	9301      	str	r3, [sp, #4]
 8009814:	2300      	movs	r3, #0
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	2300      	movs	r3, #0
 800981a:	2200      	movs	r2, #0
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f002 fdea 	bl	800c3f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af04      	add	r7, sp, #16
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	4611      	mov	r1, r2
 8009838:	461a      	mov	r2, r3
 800983a:	460b      	mov	r3, r1
 800983c:	80fb      	strh	r3, [r7, #6]
 800983e:	4613      	mov	r3, r2
 8009840:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009850:	7979      	ldrb	r1, [r7, #5]
 8009852:	7e3b      	ldrb	r3, [r7, #24]
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	88fb      	ldrh	r3, [r7, #6]
 8009858:	9302      	str	r3, [sp, #8]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	2301      	movs	r3, #1
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	2300      	movs	r3, #0
 8009864:	2200      	movs	r2, #0
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f002 fdc5 	bl	800c3f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b088      	sub	sp, #32
 800987a:	af04      	add	r7, sp, #16
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	4611      	mov	r1, r2
 8009882:	461a      	mov	r2, r3
 8009884:	460b      	mov	r3, r1
 8009886:	80fb      	strh	r3, [r7, #6]
 8009888:	4613      	mov	r3, r2
 800988a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800988c:	7979      	ldrb	r1, [r7, #5]
 800988e:	2300      	movs	r3, #0
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	88fb      	ldrh	r3, [r7, #6]
 8009894:	9302      	str	r3, [sp, #8]
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	2301      	movs	r3, #1
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	2300      	movs	r3, #0
 80098a0:	2201      	movs	r2, #1
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f002 fda7 	bl	800c3f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80098a8:	2300      	movs	r3, #0

}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b088      	sub	sp, #32
 80098b6:	af04      	add	r7, sp, #16
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	4611      	mov	r1, r2
 80098be:	461a      	mov	r2, r3
 80098c0:	460b      	mov	r3, r1
 80098c2:	80fb      	strh	r3, [r7, #6]
 80098c4:	4613      	mov	r3, r2
 80098c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098d6:	7979      	ldrb	r1, [r7, #5]
 80098d8:	7e3b      	ldrb	r3, [r7, #24]
 80098da:	9303      	str	r3, [sp, #12]
 80098dc:	88fb      	ldrh	r3, [r7, #6]
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	2301      	movs	r3, #1
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	2302      	movs	r3, #2
 80098ea:	2200      	movs	r2, #0
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f002 fd82 	bl	800c3f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af04      	add	r7, sp, #16
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4611      	mov	r1, r2
 8009908:	461a      	mov	r2, r3
 800990a:	460b      	mov	r3, r1
 800990c:	80fb      	strh	r3, [r7, #6]
 800990e:	4613      	mov	r3, r2
 8009910:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009912:	7979      	ldrb	r1, [r7, #5]
 8009914:	2300      	movs	r3, #0
 8009916:	9303      	str	r3, [sp, #12]
 8009918:	88fb      	ldrh	r3, [r7, #6]
 800991a:	9302      	str	r3, [sp, #8]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	2301      	movs	r3, #1
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	2302      	movs	r3, #2
 8009926:	2201      	movs	r2, #1
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f002 fd64 	bl	800c3f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af04      	add	r7, sp, #16
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	4608      	mov	r0, r1
 8009942:	4611      	mov	r1, r2
 8009944:	461a      	mov	r2, r3
 8009946:	4603      	mov	r3, r0
 8009948:	70fb      	strb	r3, [r7, #3]
 800994a:	460b      	mov	r3, r1
 800994c:	70bb      	strb	r3, [r7, #2]
 800994e:	4613      	mov	r3, r2
 8009950:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009952:	7878      	ldrb	r0, [r7, #1]
 8009954:	78ba      	ldrb	r2, [r7, #2]
 8009956:	78f9      	ldrb	r1, [r7, #3]
 8009958:	8b3b      	ldrh	r3, [r7, #24]
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	7d3b      	ldrb	r3, [r7, #20]
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	7c3b      	ldrb	r3, [r7, #16]
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	4603      	mov	r3, r0
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f002 fcf7 	bl	800c35a <USBH_LL_OpenPipe>

  return USBH_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	460b      	mov	r3, r1
 8009980:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009982:	78fb      	ldrb	r3, [r7, #3]
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f002 fd16 	bl	800c3b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	460b      	mov	r3, r1
 80099a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f836 	bl	8009a14 <USBH_GetFreePipe>
 80099a8:	4603      	mov	r3, r0
 80099aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80099ac:	89fb      	ldrh	r3, [r7, #14]
 80099ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d00a      	beq.n	80099cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80099b6:	78fa      	ldrb	r2, [r7, #3]
 80099b8:	89fb      	ldrh	r3, [r7, #14]
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	33e0      	adds	r3, #224	; 0xe0
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80099cc:	89fb      	ldrh	r3, [r7, #14]
 80099ce:	b2db      	uxtb	r3, r3
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	2b0f      	cmp	r3, #15
 80099e8:	d80d      	bhi.n	8009a06 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	33e0      	adds	r3, #224	; 0xe0
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	78fb      	ldrb	r3, [r7, #3]
 80099f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	33e0      	adds	r3, #224	; 0xe0
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	440b      	add	r3, r1
 8009a04:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]
 8009a24:	e00f      	b.n	8009a46 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	33e0      	adds	r3, #224	; 0xe0
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d102      	bne.n	8009a40 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	e007      	b.n	8009a50 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	3301      	adds	r3, #1
 8009a44:	73fb      	strb	r3, [r7, #15]
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	2b0f      	cmp	r3, #15
 8009a4a:	d9ec      	bls.n	8009a26 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a6e:	2b84      	cmp	r3, #132	; 0x84
 8009a70:	d005      	beq.n	8009a7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009a72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	3303      	adds	r3, #3
 8009a7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a92:	f3ef 8305 	mrs	r3, IPSR
 8009a96:	607b      	str	r3, [r7, #4]
  return(result);
 8009a98:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	bf14      	ite	ne
 8009a9e:	2301      	movne	r3, #1
 8009aa0:	2300      	moveq	r3, #0
 8009aa2:	b2db      	uxtb	r3, r3
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009ab4:	f001 f90a 	bl	800accc <vTaskStartScheduler>
  
  return osOK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	bd80      	pop	{r7, pc}

08009abe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ac0:	b089      	sub	sp, #36	; 0x24
 8009ac2:	af04      	add	r7, sp, #16
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d020      	beq.n	8009b12 <osThreadCreate+0x54>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01c      	beq.n	8009b12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685c      	ldr	r4, [r3, #4]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681d      	ldr	r5, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691e      	ldr	r6, [r3, #16]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff ffb6 	bl	8009a5c <makeFreeRtosPriority>
 8009af0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009afa:	9202      	str	r2, [sp, #8]
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	9100      	str	r1, [sp, #0]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	4632      	mov	r2, r6
 8009b04:	4629      	mov	r1, r5
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 ff0e 	bl	800a928 <xTaskCreateStatic>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	e01c      	b.n	8009b4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685c      	ldr	r4, [r3, #4]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b1e:	b29e      	uxth	r6, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff ff98 	bl	8009a5c <makeFreeRtosPriority>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	f107 030c 	add.w	r3, r7, #12
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	9200      	str	r2, [sp, #0]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	4632      	mov	r2, r6
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 ff50 	bl	800a9e2 <xTaskCreate>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d001      	beq.n	8009b4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e000      	b.n	8009b4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <osDelay+0x16>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	e000      	b.n	8009b6e <osDelay+0x18>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 f878 	bl	800ac64 <vTaskDelay>
  
  return osOK;
 8009b74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009b7e:	b590      	push	{r4, r7, lr}
 8009b80:	b085      	sub	sp, #20
 8009b82:	af02      	add	r7, sp, #8
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d011      	beq.n	8009bb4 <osMessageCreate+0x36>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00d      	beq.n	8009bb4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6859      	ldr	r1, [r3, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689a      	ldr	r2, [r3, #8]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	2400      	movs	r4, #0
 8009baa:	9400      	str	r4, [sp, #0]
 8009bac:	f000 f9e0 	bl	8009f70 <xQueueGenericCreateStatic>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	e008      	b.n	8009bc6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6818      	ldr	r0, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	f000 fa4e 	bl	800a060 <xQueueGenericCreate>
 8009bc4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd90      	pop	{r4, r7, pc}
	...

08009bd0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d101      	bne.n	8009bee <osMessagePut+0x1e>
    ticks = 1;
 8009bea:	2301      	movs	r3, #1
 8009bec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009bee:	f7ff ff4d 	bl	8009a8c <inHandlerMode>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d018      	beq.n	8009c2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009bf8:	f107 0210 	add.w	r2, r7, #16
 8009bfc:	f107 0108 	add.w	r1, r7, #8
 8009c00:	2300      	movs	r3, #0
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 fb84 	bl	800a310 <xQueueGenericSendFromISR>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d001      	beq.n	8009c12 <osMessagePut+0x42>
      return osErrorOS;
 8009c0e:	23ff      	movs	r3, #255	; 0xff
 8009c10:	e018      	b.n	8009c44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d014      	beq.n	8009c42 <osMessagePut+0x72>
 8009c18:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <osMessagePut+0x7c>)
 8009c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	e00b      	b.n	8009c42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009c2a:	f107 0108 	add.w	r1, r7, #8
 8009c2e:	2300      	movs	r3, #0
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 fa6e 	bl	800a114 <xQueueGenericSend>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d001      	beq.n	8009c42 <osMessagePut+0x72>
      return osErrorOS;
 8009c3e:	23ff      	movs	r3, #255	; 0xff
 8009c40:	e000      	b.n	8009c44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3718      	adds	r7, #24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	e000ed04 	.word	0xe000ed04

08009c50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009c50:	b590      	push	{r4, r7, lr}
 8009c52:	b08b      	sub	sp, #44	; 0x2c
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10a      	bne.n	8009c80 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009c6a:	2380      	movs	r3, #128	; 0x80
 8009c6c:	617b      	str	r3, [r7, #20]
    return event;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	461c      	mov	r4, r3
 8009c72:	f107 0314 	add.w	r3, r7, #20
 8009c76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c7e:	e054      	b.n	8009d2a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8e:	d103      	bne.n	8009c98 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009c90:	f04f 33ff 	mov.w	r3, #4294967295
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24
 8009c96:	e009      	b.n	8009cac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d006      	beq.n	8009cac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <osMessageGet+0x5c>
      ticks = 1;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009cac:	f7ff feee 	bl	8009a8c <inHandlerMode>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d01c      	beq.n	8009cf0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009cb6:	f107 0220 	add.w	r2, r7, #32
 8009cba:	f107 0314 	add.w	r3, r7, #20
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	68b8      	ldr	r0, [r7, #8]
 8009cc4:	f000 fca0 	bl	800a608 <xQueueReceiveFromISR>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d102      	bne.n	8009cd4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009cce:	2310      	movs	r3, #16
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	e001      	b.n	8009cd8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d01d      	beq.n	8009d1a <osMessageGet+0xca>
 8009cde:	4b15      	ldr	r3, [pc, #84]	; (8009d34 <osMessageGet+0xe4>)
 8009ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	e014      	b.n	8009d1a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009cf0:	f107 0314 	add.w	r3, r7, #20
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	68b8      	ldr	r0, [r7, #8]
 8009cfc:	f000 fba4 	bl	800a448 <xQueueReceive>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d102      	bne.n	8009d0c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009d06:	2310      	movs	r3, #16
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	e006      	b.n	8009d1a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <osMessageGet+0xc6>
 8009d12:	2300      	movs	r3, #0
 8009d14:	e000      	b.n	8009d18 <osMessageGet+0xc8>
 8009d16:	2340      	movs	r3, #64	; 0x40
 8009d18:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	461c      	mov	r4, r3
 8009d1e:	f107 0314 	add.w	r3, r7, #20
 8009d22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	372c      	adds	r7, #44	; 0x2c
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd90      	pop	{r4, r7, pc}
 8009d32:	bf00      	nop
 8009d34:	e000ed04 	.word	0xe000ed04

08009d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f103 0208 	add.w	r2, r3, #8
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f103 0208 	add.w	r2, r3, #8
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f103 0208 	add.w	r2, r3, #8
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d92:	b480      	push	{r7}
 8009d94:	b085      	sub	sp, #20
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
}
 8009dce:	bf00      	nop
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df0:	d103      	bne.n	8009dfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	e00c      	b.n	8009e14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e002      	b.n	8009e08 <vListInsert+0x2e>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d2f6      	bcs.n	8009e02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	601a      	str	r2, [r3, #0]
}
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6892      	ldr	r2, [r2, #8]
 8009e62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	6852      	ldr	r2, [r2, #4]
 8009e6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d103      	bne.n	8009e80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	1e5a      	subs	r2, r3, #1
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009eca:	f001 fd5b 	bl	800b984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed6:	68f9      	ldr	r1, [r7, #12]
 8009ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009eda:	fb01 f303 	mul.w	r3, r1, r3
 8009ede:	441a      	add	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efa:	3b01      	subs	r3, #1
 8009efc:	68f9      	ldr	r1, [r7, #12]
 8009efe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f00:	fb01 f303 	mul.w	r3, r1, r3
 8009f04:	441a      	add	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	22ff      	movs	r2, #255	; 0xff
 8009f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	22ff      	movs	r2, #255	; 0xff
 8009f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d114      	bne.n	8009f4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d01a      	beq.n	8009f5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3310      	adds	r3, #16
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 f933 	bl	800b198 <xTaskRemoveFromEventList>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d012      	beq.n	8009f5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f38:	4b0c      	ldr	r3, [pc, #48]	; (8009f6c <xQueueGenericReset+0xcc>)
 8009f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	e009      	b.n	8009f5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3310      	adds	r3, #16
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff fef2 	bl	8009d38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7ff feed 	bl	8009d38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f5e:	f001 fd41 	bl	800b9e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f62:	2301      	movs	r3, #1
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	e000ed04 	.word	0xe000ed04

08009f70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08e      	sub	sp, #56	; 0x38
 8009f74:	af02      	add	r7, sp, #8
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10a      	bne.n	8009f9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f96:	bf00      	nop
 8009f98:	e7fe      	b.n	8009f98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <xQueueGenericCreateStatic+0x52>
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <xQueueGenericCreateStatic+0x56>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e000      	b.n	8009fc8 <xQueueGenericCreateStatic+0x58>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	623b      	str	r3, [r7, #32]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <xQueueGenericCreateStatic+0x7e>
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <xQueueGenericCreateStatic+0x82>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e000      	b.n	8009ff4 <xQueueGenericCreateStatic+0x84>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	61fb      	str	r3, [r7, #28]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a00e:	2348      	movs	r3, #72	; 0x48
 800a010:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b48      	cmp	r3, #72	; 0x48
 800a016:	d00a      	beq.n	800a02e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	61bb      	str	r3, [r7, #24]
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a02e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00d      	beq.n	800a056 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a042:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	4613      	mov	r3, r2
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	68b9      	ldr	r1, [r7, #8]
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 f83f 	bl	800a0d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a058:	4618      	mov	r0, r3
 800a05a:	3730      	adds	r7, #48	; 0x30
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a060:	b580      	push	{r7, lr}
 800a062:	b08a      	sub	sp, #40	; 0x28
 800a064:	af02      	add	r7, sp, #8
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	4613      	mov	r3, r2
 800a06c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	613b      	str	r3, [r7, #16]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	fb02 f303 	mul.w	r3, r2, r3
 800a092:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	3348      	adds	r3, #72	; 0x48
 800a098:	4618      	mov	r0, r3
 800a09a:	f001 fd95 	bl	800bbc8 <pvPortMalloc>
 800a09e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d011      	beq.n	800a0ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	3348      	adds	r3, #72	; 0x48
 800a0ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0b8:	79fa      	ldrb	r2, [r7, #7]
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	68b9      	ldr	r1, [r7, #8]
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f805 	bl	800a0d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0ca:	69bb      	ldr	r3, [r7, #24]
	}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3720      	adds	r7, #32
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d103      	bne.n	800a0f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	69ba      	ldr	r2, [r7, #24]
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	e002      	b.n	800a0f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a102:	2101      	movs	r1, #1
 800a104:	69b8      	ldr	r0, [r7, #24]
 800a106:	f7ff fecb 	bl	8009ea0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08e      	sub	sp, #56	; 0x38
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a122:	2300      	movs	r3, #0
 800a124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xQueueGenericSend+0x32>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d103      	bne.n	800a154 <xQueueGenericSend+0x40>
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <xQueueGenericSend+0x44>
 800a154:	2301      	movs	r3, #1
 800a156:	e000      	b.n	800a15a <xQueueGenericSend+0x46>
 800a158:	2300      	movs	r3, #0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10a      	bne.n	800a174 <xQueueGenericSend+0x60>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d103      	bne.n	800a182 <xQueueGenericSend+0x6e>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d101      	bne.n	800a186 <xQueueGenericSend+0x72>
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <xQueueGenericSend+0x74>
 800a186:	2300      	movs	r3, #0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	623b      	str	r3, [r7, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1a2:	f001 f9b7 	bl	800b514 <xTaskGetSchedulerState>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <xQueueGenericSend+0x9e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <xQueueGenericSend+0xa2>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <xQueueGenericSend+0xa4>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	61fb      	str	r3, [r7, #28]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1d2:	f001 fbd7 	bl	800b984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d302      	bcc.n	800a1e8 <xQueueGenericSend+0xd4>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d129      	bne.n	800a23c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	68b9      	ldr	r1, [r7, #8]
 800a1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ee:	f000 fa8b 	bl	800a708 <prvCopyDataToQueue>
 800a1f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d010      	beq.n	800a21e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	3324      	adds	r3, #36	; 0x24
 800a200:	4618      	mov	r0, r3
 800a202:	f000 ffc9 	bl	800b198 <xTaskRemoveFromEventList>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d013      	beq.n	800a234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a20c:	4b3f      	ldr	r3, [pc, #252]	; (800a30c <xQueueGenericSend+0x1f8>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	e00a      	b.n	800a234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d007      	beq.n	800a234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a224:	4b39      	ldr	r3, [pc, #228]	; (800a30c <xQueueGenericSend+0x1f8>)
 800a226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a234:	f001 fbd6 	bl	800b9e4 <vPortExitCritical>
				return pdPASS;
 800a238:	2301      	movs	r3, #1
 800a23a:	e063      	b.n	800a304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d103      	bne.n	800a24a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a242:	f001 fbcf 	bl	800b9e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a246:	2300      	movs	r3, #0
 800a248:	e05c      	b.n	800a304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a250:	f107 0314 	add.w	r3, r7, #20
 800a254:	4618      	mov	r0, r3
 800a256:	f001 f801 	bl	800b25c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a25a:	2301      	movs	r3, #1
 800a25c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a25e:	f001 fbc1 	bl	800b9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a262:	f000 fd93 	bl	800ad8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a266:	f001 fb8d 	bl	800b984 <vPortEnterCritical>
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a270:	b25b      	sxtb	r3, r3
 800a272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a276:	d103      	bne.n	800a280 <xQueueGenericSend+0x16c>
 800a278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a286:	b25b      	sxtb	r3, r3
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28c:	d103      	bne.n	800a296 <xQueueGenericSend+0x182>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a296:	f001 fba5 	bl	800b9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a29a:	1d3a      	adds	r2, r7, #4
 800a29c:	f107 0314 	add.w	r3, r7, #20
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 fff0 	bl	800b288 <xTaskCheckForTimeOut>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d124      	bne.n	800a2f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2b0:	f000 fb22 	bl	800a8f8 <prvIsQueueFull>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d018      	beq.n	800a2ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	3310      	adds	r3, #16
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f000 ff44 	bl	800b150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ca:	f000 faad 	bl	800a828 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2ce:	f000 fd6b 	bl	800ada8 <xTaskResumeAll>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f47f af7c 	bne.w	800a1d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a2da:	4b0c      	ldr	r3, [pc, #48]	; (800a30c <xQueueGenericSend+0x1f8>)
 800a2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	e772      	b.n	800a1d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ee:	f000 fa9b 	bl	800a828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2f2:	f000 fd59 	bl	800ada8 <xTaskResumeAll>
 800a2f6:	e76c      	b.n	800a1d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2fa:	f000 fa95 	bl	800a828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2fe:	f000 fd53 	bl	800ada8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a304:	4618      	mov	r0, r3
 800a306:	3738      	adds	r7, #56	; 0x38
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	e000ed04 	.word	0xe000ed04

0800a310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b090      	sub	sp, #64	; 0x40
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d103      	bne.n	800a34c <xQueueGenericSendFromISR+0x3c>
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <xQueueGenericSendFromISR+0x40>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <xQueueGenericSendFromISR+0x42>
 800a350:	2300      	movs	r3, #0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d103      	bne.n	800a37a <xQueueGenericSendFromISR+0x6a>
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a376:	2b01      	cmp	r3, #1
 800a378:	d101      	bne.n	800a37e <xQueueGenericSendFromISR+0x6e>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <xQueueGenericSendFromISR+0x70>
 800a37e:	2300      	movs	r3, #0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	623b      	str	r3, [r7, #32]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a39a:	f001 fbd5 	bl	800bb48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a39e:	f3ef 8211 	mrs	r2, BASEPRI
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	61fa      	str	r2, [r7, #28]
 800a3b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d302      	bcc.n	800a3cc <xQueueGenericSendFromISR+0xbc>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d12f      	bne.n	800a42c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3e2:	f000 f991 	bl	800a708 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ee:	d112      	bne.n	800a416 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d016      	beq.n	800a426 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	3324      	adds	r3, #36	; 0x24
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 fecb 	bl	800b198 <xTaskRemoveFromEventList>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00e      	beq.n	800a426 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00b      	beq.n	800a426 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	e007      	b.n	800a426 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a41a:	3301      	adds	r3, #1
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	b25a      	sxtb	r2, r3
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a426:	2301      	movs	r3, #1
 800a428:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a42a:	e001      	b.n	800a430 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a42c:	2300      	movs	r3, #0
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a432:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a43a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3740      	adds	r7, #64	; 0x40
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08c      	sub	sp, #48	; 0x30
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a454:	2300      	movs	r3, #0
 800a456:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <xQueueReceive+0x30>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	623b      	str	r3, [r7, #32]
}
 800a474:	bf00      	nop
 800a476:	e7fe      	b.n	800a476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d103      	bne.n	800a486 <xQueueReceive+0x3e>
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <xQueueReceive+0x42>
 800a486:	2301      	movs	r3, #1
 800a488:	e000      	b.n	800a48c <xQueueReceive+0x44>
 800a48a:	2300      	movs	r3, #0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <xQueueReceive+0x5e>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	61fb      	str	r3, [r7, #28]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4a6:	f001 f835 	bl	800b514 <xTaskGetSchedulerState>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d102      	bne.n	800a4b6 <xQueueReceive+0x6e>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <xQueueReceive+0x72>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <xQueueReceive+0x74>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <xQueueReceive+0x8e>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	61bb      	str	r3, [r7, #24]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4d6:	f001 fa55 	bl	800b984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d01f      	beq.n	800a526 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4e6:	68b9      	ldr	r1, [r7, #8]
 800a4e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ea:	f000 f977 	bl	800a7dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	1e5a      	subs	r2, r3, #1
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00f      	beq.n	800a51e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	3310      	adds	r3, #16
 800a502:	4618      	mov	r0, r3
 800a504:	f000 fe48 	bl	800b198 <xTaskRemoveFromEventList>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d007      	beq.n	800a51e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a50e:	4b3d      	ldr	r3, [pc, #244]	; (800a604 <xQueueReceive+0x1bc>)
 800a510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a51e:	f001 fa61 	bl	800b9e4 <vPortExitCritical>
				return pdPASS;
 800a522:	2301      	movs	r3, #1
 800a524:	e069      	b.n	800a5fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a52c:	f001 fa5a 	bl	800b9e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a530:	2300      	movs	r3, #0
 800a532:	e062      	b.n	800a5fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	2b00      	cmp	r3, #0
 800a538:	d106      	bne.n	800a548 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a53a:	f107 0310 	add.w	r3, r7, #16
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 fe8c 	bl	800b25c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a544:	2301      	movs	r3, #1
 800a546:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a548:	f001 fa4c 	bl	800b9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a54c:	f000 fc1e 	bl	800ad8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a550:	f001 fa18 	bl	800b984 <vPortEnterCritical>
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a55a:	b25b      	sxtb	r3, r3
 800a55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a560:	d103      	bne.n	800a56a <xQueueReceive+0x122>
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a570:	b25b      	sxtb	r3, r3
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d103      	bne.n	800a580 <xQueueReceive+0x138>
 800a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a580:	f001 fa30 	bl	800b9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a584:	1d3a      	adds	r2, r7, #4
 800a586:	f107 0310 	add.w	r3, r7, #16
 800a58a:	4611      	mov	r1, r2
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 fe7b 	bl	800b288 <xTaskCheckForTimeOut>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d123      	bne.n	800a5e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a59a:	f000 f997 	bl	800a8cc <prvIsQueueEmpty>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d017      	beq.n	800a5d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	3324      	adds	r3, #36	; 0x24
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fdcf 	bl	800b150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b4:	f000 f938 	bl	800a828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5b8:	f000 fbf6 	bl	800ada8 <xTaskResumeAll>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d189      	bne.n	800a4d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a5c2:	4b10      	ldr	r3, [pc, #64]	; (800a604 <xQueueReceive+0x1bc>)
 800a5c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	e780      	b.n	800a4d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5d6:	f000 f927 	bl	800a828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5da:	f000 fbe5 	bl	800ada8 <xTaskResumeAll>
 800a5de:	e77a      	b.n	800a4d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e2:	f000 f921 	bl	800a828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5e6:	f000 fbdf 	bl	800ada8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ec:	f000 f96e 	bl	800a8cc <prvIsQueueEmpty>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f43f af6f 	beq.w	800a4d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3730      	adds	r7, #48	; 0x30
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	e000ed04 	.word	0xe000ed04

0800a608 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08e      	sub	sp, #56	; 0x38
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10a      	bne.n	800a634 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	623b      	str	r3, [r7, #32]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d103      	bne.n	800a642 <xQueueReceiveFromISR+0x3a>
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <xQueueReceiveFromISR+0x3e>
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <xQueueReceiveFromISR+0x40>
 800a646:	2300      	movs	r3, #0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10a      	bne.n	800a662 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	61fb      	str	r3, [r7, #28]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a662:	f001 fa71 	bl	800bb48 <vPortValidateInterruptPriority>
	__asm volatile
 800a666:	f3ef 8211 	mrs	r2, BASEPRI
 800a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	61ba      	str	r2, [r7, #24]
 800a67c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a67e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a680:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d02f      	beq.n	800a6ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a69c:	f000 f89e 	bl	800a7dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	1e5a      	subs	r2, r3, #1
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a6a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b0:	d112      	bne.n	800a6d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d016      	beq.n	800a6e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6bc:	3310      	adds	r3, #16
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fd6a 	bl	800b198 <xTaskRemoveFromEventList>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00e      	beq.n	800a6e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00b      	beq.n	800a6e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	e007      	b.n	800a6e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6dc:	3301      	adds	r3, #1
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	b25a      	sxtb	r2, r3
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ec:	e001      	b.n	800a6f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f383 8811 	msr	BASEPRI, r3
}
 800a6fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a700:	4618      	mov	r0, r3
 800a702:	3738      	adds	r7, #56	; 0x38
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a714:	2300      	movs	r3, #0
 800a716:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10d      	bne.n	800a742 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d14d      	bne.n	800a7ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	4618      	mov	r0, r3
 800a734:	f000 ff0c 	bl	800b550 <xTaskPriorityDisinherit>
 800a738:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	609a      	str	r2, [r3, #8]
 800a740:	e043      	b.n	800a7ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d119      	bne.n	800a77c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6858      	ldr	r0, [r3, #4]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a750:	461a      	mov	r2, r3
 800a752:	68b9      	ldr	r1, [r7, #8]
 800a754:	f001 ff68 	bl	800c628 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a760:	441a      	add	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d32b      	bcc.n	800a7ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	605a      	str	r2, [r3, #4]
 800a77a:	e026      	b.n	800a7ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	68d8      	ldr	r0, [r3, #12]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a784:	461a      	mov	r2, r3
 800a786:	68b9      	ldr	r1, [r7, #8]
 800a788:	f001 ff4e 	bl	800c628 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a794:	425b      	negs	r3, r3
 800a796:	441a      	add	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	68da      	ldr	r2, [r3, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d207      	bcs.n	800a7b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b0:	425b      	negs	r3, r3
 800a7b2:	441a      	add	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d105      	bne.n	800a7ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a7d2:	697b      	ldr	r3, [r7, #20]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3718      	adds	r7, #24
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d018      	beq.n	800a820 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68da      	ldr	r2, [r3, #12]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	441a      	add	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68da      	ldr	r2, [r3, #12]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	429a      	cmp	r2, r3
 800a806:	d303      	bcc.n	800a810 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68d9      	ldr	r1, [r3, #12]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a818:	461a      	mov	r2, r3
 800a81a:	6838      	ldr	r0, [r7, #0]
 800a81c:	f001 ff04 	bl	800c628 <memcpy>
	}
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a830:	f001 f8a8 	bl	800b984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a83a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a83c:	e011      	b.n	800a862 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a842:	2b00      	cmp	r3, #0
 800a844:	d012      	beq.n	800a86c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3324      	adds	r3, #36	; 0x24
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fca4 	bl	800b198 <xTaskRemoveFromEventList>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a856:	f000 fd79 	bl	800b34c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a866:	2b00      	cmp	r3, #0
 800a868:	dce9      	bgt.n	800a83e <prvUnlockQueue+0x16>
 800a86a:	e000      	b.n	800a86e <prvUnlockQueue+0x46>
					break;
 800a86c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	22ff      	movs	r2, #255	; 0xff
 800a872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a876:	f001 f8b5 	bl	800b9e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a87a:	f001 f883 	bl	800b984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a884:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a886:	e011      	b.n	800a8ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d012      	beq.n	800a8b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3310      	adds	r3, #16
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fc7f 	bl	800b198 <xTaskRemoveFromEventList>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8a0:	f000 fd54 	bl	800b34c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dce9      	bgt.n	800a888 <prvUnlockQueue+0x60>
 800a8b4:	e000      	b.n	800a8b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	22ff      	movs	r2, #255	; 0xff
 800a8bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8c0:	f001 f890 	bl	800b9e4 <vPortExitCritical>
}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8d4:	f001 f856 	bl	800b984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d102      	bne.n	800a8e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]
 800a8e4:	e001      	b.n	800a8ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8ea:	f001 f87b 	bl	800b9e4 <vPortExitCritical>

	return xReturn;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a900:	f001 f840 	bl	800b984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d102      	bne.n	800a916 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a910:	2301      	movs	r3, #1
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	e001      	b.n	800a91a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a91a:	f001 f863 	bl	800b9e4 <vPortExitCritical>

	return xReturn;
 800a91e:	68fb      	ldr	r3, [r7, #12]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08e      	sub	sp, #56	; 0x38
 800a92c:	af04      	add	r7, sp, #16
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10a      	bne.n	800a952 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	623b      	str	r3, [r7, #32]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10a      	bne.n	800a96e <xTaskCreateStatic+0x46>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	61fb      	str	r3, [r7, #28]
}
 800a96a:	bf00      	nop
 800a96c:	e7fe      	b.n	800a96c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a96e:	2358      	movs	r3, #88	; 0x58
 800a970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b58      	cmp	r3, #88	; 0x58
 800a976:	d00a      	beq.n	800a98e <xTaskCreateStatic+0x66>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	61bb      	str	r3, [r7, #24]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a98e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01e      	beq.n	800a9d4 <xTaskCreateStatic+0xac>
 800a996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d01b      	beq.n	800a9d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	9303      	str	r3, [sp, #12]
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	9302      	str	r3, [sp, #8]
 800a9b6:	f107 0314 	add.w	r3, r7, #20
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	68b9      	ldr	r1, [r7, #8]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 f850 	bl	800aa6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9ce:	f000 f8df 	bl	800ab90 <prvAddNewTaskToReadyList>
 800a9d2:	e001      	b.n	800a9d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9d8:	697b      	ldr	r3, [r7, #20]
	}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3728      	adds	r7, #40	; 0x28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b08c      	sub	sp, #48	; 0x30
 800a9e6:	af04      	add	r7, sp, #16
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	603b      	str	r3, [r7, #0]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f001 f8e6 	bl	800bbc8 <pvPortMalloc>
 800a9fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00e      	beq.n	800aa22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa04:	2058      	movs	r0, #88	; 0x58
 800aa06:	f001 f8df 	bl	800bbc8 <pvPortMalloc>
 800aa0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	631a      	str	r2, [r3, #48]	; 0x30
 800aa18:	e005      	b.n	800aa26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa1a:	6978      	ldr	r0, [r7, #20]
 800aa1c:	f001 f9a4 	bl	800bd68 <vPortFree>
 800aa20:	e001      	b.n	800aa26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa22:	2300      	movs	r3, #0
 800aa24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d017      	beq.n	800aa5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa34:	88fa      	ldrh	r2, [r7, #6]
 800aa36:	2300      	movs	r3, #0
 800aa38:	9303      	str	r3, [sp, #12]
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	9302      	str	r3, [sp, #8]
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 f80e 	bl	800aa6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa50:	69f8      	ldr	r0, [r7, #28]
 800aa52:	f000 f89d 	bl	800ab90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa56:	2301      	movs	r3, #1
 800aa58:	61bb      	str	r3, [r7, #24]
 800aa5a:	e002      	b.n	800aa62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa62:	69bb      	ldr	r3, [r7, #24]
	}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3720      	adds	r7, #32
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b088      	sub	sp, #32
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	461a      	mov	r2, r3
 800aa84:	21a5      	movs	r1, #165	; 0xa5
 800aa86:	f001 fddd 	bl	800c644 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa94:	3b01      	subs	r3, #1
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	f023 0307 	bic.w	r3, r3, #7
 800aaa2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	f003 0307 	and.w	r3, r3, #7
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00a      	beq.n	800aac4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	617b      	str	r3, [r7, #20]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d01f      	beq.n	800ab0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaca:	2300      	movs	r3, #0
 800aacc:	61fb      	str	r3, [r7, #28]
 800aace:	e012      	b.n	800aaf6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	7819      	ldrb	r1, [r3, #0]
 800aad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	4413      	add	r3, r2
 800aade:	3334      	adds	r3, #52	; 0x34
 800aae0:	460a      	mov	r2, r1
 800aae2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	4413      	add	r3, r2
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d006      	beq.n	800aafe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	61fb      	str	r3, [r7, #28]
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	2b0f      	cmp	r3, #15
 800aafa:	d9e9      	bls.n	800aad0 <prvInitialiseNewTask+0x64>
 800aafc:	e000      	b.n	800ab00 <prvInitialiseNewTask+0x94>
			{
				break;
 800aafe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab08:	e003      	b.n	800ab12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab14:	2b06      	cmp	r3, #6
 800ab16:	d901      	bls.n	800ab1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab18:	2306      	movs	r3, #6
 800ab1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	3304      	adds	r3, #4
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff f920 	bl	8009d78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	3318      	adds	r3, #24
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff f91b 	bl	8009d78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	f1c3 0207 	rsb	r2, r3, #7
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	2200      	movs	r2, #0
 800ab62:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	69b8      	ldr	r0, [r7, #24]
 800ab72:	f000 fdd9 	bl	800b728 <pxPortInitialiseStack>
 800ab76:	4602      	mov	r2, r0
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab88:	bf00      	nop
 800ab8a:	3720      	adds	r7, #32
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab98:	f000 fef4 	bl	800b984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab9c:	4b2a      	ldr	r3, [pc, #168]	; (800ac48 <prvAddNewTaskToReadyList+0xb8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	3301      	adds	r3, #1
 800aba2:	4a29      	ldr	r2, [pc, #164]	; (800ac48 <prvAddNewTaskToReadyList+0xb8>)
 800aba4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aba6:	4b29      	ldr	r3, [pc, #164]	; (800ac4c <prvAddNewTaskToReadyList+0xbc>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d109      	bne.n	800abc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abae:	4a27      	ldr	r2, [pc, #156]	; (800ac4c <prvAddNewTaskToReadyList+0xbc>)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abb4:	4b24      	ldr	r3, [pc, #144]	; (800ac48 <prvAddNewTaskToReadyList+0xb8>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d110      	bne.n	800abde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abbc:	f000 fbec 	bl	800b398 <prvInitialiseTaskLists>
 800abc0:	e00d      	b.n	800abde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abc2:	4b23      	ldr	r3, [pc, #140]	; (800ac50 <prvAddNewTaskToReadyList+0xc0>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d109      	bne.n	800abde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abca:	4b20      	ldr	r3, [pc, #128]	; (800ac4c <prvAddNewTaskToReadyList+0xbc>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d802      	bhi.n	800abde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abd8:	4a1c      	ldr	r2, [pc, #112]	; (800ac4c <prvAddNewTaskToReadyList+0xbc>)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abde:	4b1d      	ldr	r3, [pc, #116]	; (800ac54 <prvAddNewTaskToReadyList+0xc4>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	4a1b      	ldr	r2, [pc, #108]	; (800ac54 <prvAddNewTaskToReadyList+0xc4>)
 800abe6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	2201      	movs	r2, #1
 800abee:	409a      	lsls	r2, r3
 800abf0:	4b19      	ldr	r3, [pc, #100]	; (800ac58 <prvAddNewTaskToReadyList+0xc8>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	4a18      	ldr	r2, [pc, #96]	; (800ac58 <prvAddNewTaskToReadyList+0xc8>)
 800abf8:	6013      	str	r3, [r2, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfe:	4613      	mov	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4a15      	ldr	r2, [pc, #84]	; (800ac5c <prvAddNewTaskToReadyList+0xcc>)
 800ac08:	441a      	add	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4610      	mov	r0, r2
 800ac12:	f7ff f8be 	bl	8009d92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac16:	f000 fee5 	bl	800b9e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <prvAddNewTaskToReadyList+0xc0>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00e      	beq.n	800ac40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac22:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <prvAddNewTaskToReadyList+0xbc>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d207      	bcs.n	800ac40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac30:	4b0b      	ldr	r3, [pc, #44]	; (800ac60 <prvAddNewTaskToReadyList+0xd0>)
 800ac32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	200006c0 	.word	0x200006c0
 800ac4c:	200005c0 	.word	0x200005c0
 800ac50:	200006cc 	.word	0x200006cc
 800ac54:	200006dc 	.word	0x200006dc
 800ac58:	200006c8 	.word	0x200006c8
 800ac5c:	200005c4 	.word	0x200005c4
 800ac60:	e000ed04 	.word	0xe000ed04

0800ac64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d017      	beq.n	800aca6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac76:	4b13      	ldr	r3, [pc, #76]	; (800acc4 <vTaskDelay+0x60>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <vTaskDelay+0x30>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60bb      	str	r3, [r7, #8]
}
 800ac90:	bf00      	nop
 800ac92:	e7fe      	b.n	800ac92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac94:	f000 f87a 	bl	800ad8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac98:	2100      	movs	r1, #0
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fcde 	bl	800b65c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aca0:	f000 f882 	bl	800ada8 <xTaskResumeAll>
 800aca4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d107      	bne.n	800acbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <vTaskDelay+0x64>)
 800acae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acbc:	bf00      	nop
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	200006e8 	.word	0x200006e8
 800acc8:	e000ed04 	.word	0xe000ed04

0800accc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08a      	sub	sp, #40	; 0x28
 800acd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800acda:	463a      	mov	r2, r7
 800acdc:	1d39      	adds	r1, r7, #4
 800acde:	f107 0308 	add.w	r3, r7, #8
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7f5 fc20 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	9202      	str	r2, [sp, #8]
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	2300      	movs	r3, #0
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	2300      	movs	r3, #0
 800acf8:	460a      	mov	r2, r1
 800acfa:	491e      	ldr	r1, [pc, #120]	; (800ad74 <vTaskStartScheduler+0xa8>)
 800acfc:	481e      	ldr	r0, [pc, #120]	; (800ad78 <vTaskStartScheduler+0xac>)
 800acfe:	f7ff fe13 	bl	800a928 <xTaskCreateStatic>
 800ad02:	4603      	mov	r3, r0
 800ad04:	4a1d      	ldr	r2, [pc, #116]	; (800ad7c <vTaskStartScheduler+0xb0>)
 800ad06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad08:	4b1c      	ldr	r3, [pc, #112]	; (800ad7c <vTaskStartScheduler+0xb0>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad10:	2301      	movs	r3, #1
 800ad12:	617b      	str	r3, [r7, #20]
 800ad14:	e001      	b.n	800ad1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d116      	bne.n	800ad4e <vTaskStartScheduler+0x82>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	613b      	str	r3, [r7, #16]
}
 800ad32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad34:	4b12      	ldr	r3, [pc, #72]	; (800ad80 <vTaskStartScheduler+0xb4>)
 800ad36:	f04f 32ff 	mov.w	r2, #4294967295
 800ad3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad3c:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <vTaskStartScheduler+0xb8>)
 800ad3e:	2201      	movs	r2, #1
 800ad40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad42:	4b11      	ldr	r3, [pc, #68]	; (800ad88 <vTaskStartScheduler+0xbc>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad48:	f000 fd7a 	bl	800b840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad4c:	e00e      	b.n	800ad6c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad54:	d10a      	bne.n	800ad6c <vTaskStartScheduler+0xa0>
	__asm volatile
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	60fb      	str	r3, [r7, #12]
}
 800ad68:	bf00      	nop
 800ad6a:	e7fe      	b.n	800ad6a <vTaskStartScheduler+0x9e>
}
 800ad6c:	bf00      	nop
 800ad6e:	3718      	adds	r7, #24
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	0800c914 	.word	0x0800c914
 800ad78:	0800b365 	.word	0x0800b365
 800ad7c:	200006e4 	.word	0x200006e4
 800ad80:	200006e0 	.word	0x200006e0
 800ad84:	200006cc 	.word	0x200006cc
 800ad88:	200006c4 	.word	0x200006c4

0800ad8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad90:	4b04      	ldr	r3, [pc, #16]	; (800ada4 <vTaskSuspendAll+0x18>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3301      	adds	r3, #1
 800ad96:	4a03      	ldr	r2, [pc, #12]	; (800ada4 <vTaskSuspendAll+0x18>)
 800ad98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad9a:	bf00      	nop
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	200006e8 	.word	0x200006e8

0800ada8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800adb6:	4b41      	ldr	r3, [pc, #260]	; (800aebc <xTaskResumeAll+0x114>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <xTaskResumeAll+0x2c>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	603b      	str	r3, [r7, #0]
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800add4:	f000 fdd6 	bl	800b984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800add8:	4b38      	ldr	r3, [pc, #224]	; (800aebc <xTaskResumeAll+0x114>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3b01      	subs	r3, #1
 800adde:	4a37      	ldr	r2, [pc, #220]	; (800aebc <xTaskResumeAll+0x114>)
 800ade0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade2:	4b36      	ldr	r3, [pc, #216]	; (800aebc <xTaskResumeAll+0x114>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d161      	bne.n	800aeae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adea:	4b35      	ldr	r3, [pc, #212]	; (800aec0 <xTaskResumeAll+0x118>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d05d      	beq.n	800aeae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adf2:	e02e      	b.n	800ae52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adf4:	4b33      	ldr	r3, [pc, #204]	; (800aec4 <xTaskResumeAll+0x11c>)
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	3318      	adds	r3, #24
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7ff f823 	bl	8009e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff f81e 	bl	8009e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	2201      	movs	r2, #1
 800ae16:	409a      	lsls	r2, r3
 800ae18:	4b2b      	ldr	r3, [pc, #172]	; (800aec8 <xTaskResumeAll+0x120>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	4a2a      	ldr	r2, [pc, #168]	; (800aec8 <xTaskResumeAll+0x120>)
 800ae20:	6013      	str	r3, [r2, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4a27      	ldr	r2, [pc, #156]	; (800aecc <xTaskResumeAll+0x124>)
 800ae30:	441a      	add	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	3304      	adds	r3, #4
 800ae36:	4619      	mov	r1, r3
 800ae38:	4610      	mov	r0, r2
 800ae3a:	f7fe ffaa 	bl	8009d92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae42:	4b23      	ldr	r3, [pc, #140]	; (800aed0 <xTaskResumeAll+0x128>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d302      	bcc.n	800ae52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ae4c:	4b21      	ldr	r3, [pc, #132]	; (800aed4 <xTaskResumeAll+0x12c>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae52:	4b1c      	ldr	r3, [pc, #112]	; (800aec4 <xTaskResumeAll+0x11c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1cc      	bne.n	800adf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae60:	f000 fb38 	bl	800b4d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae64:	4b1c      	ldr	r3, [pc, #112]	; (800aed8 <xTaskResumeAll+0x130>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d010      	beq.n	800ae92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae70:	f000 f836 	bl	800aee0 <xTaskIncrementTick>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d002      	beq.n	800ae80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ae7a:	4b16      	ldr	r3, [pc, #88]	; (800aed4 <xTaskResumeAll+0x12c>)
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1f1      	bne.n	800ae70 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ae8c:	4b12      	ldr	r3, [pc, #72]	; (800aed8 <xTaskResumeAll+0x130>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae92:	4b10      	ldr	r3, [pc, #64]	; (800aed4 <xTaskResumeAll+0x12c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d009      	beq.n	800aeae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae9e:	4b0f      	ldr	r3, [pc, #60]	; (800aedc <xTaskResumeAll+0x134>)
 800aea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aeae:	f000 fd99 	bl	800b9e4 <vPortExitCritical>

	return xAlreadyYielded;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	200006e8 	.word	0x200006e8
 800aec0:	200006c0 	.word	0x200006c0
 800aec4:	20000680 	.word	0x20000680
 800aec8:	200006c8 	.word	0x200006c8
 800aecc:	200005c4 	.word	0x200005c4
 800aed0:	200005c0 	.word	0x200005c0
 800aed4:	200006d4 	.word	0x200006d4
 800aed8:	200006d0 	.word	0x200006d0
 800aedc:	e000ed04 	.word	0xe000ed04

0800aee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeea:	4b4e      	ldr	r3, [pc, #312]	; (800b024 <xTaskIncrementTick+0x144>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f040 808e 	bne.w	800b010 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aef4:	4b4c      	ldr	r3, [pc, #304]	; (800b028 <xTaskIncrementTick+0x148>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3301      	adds	r3, #1
 800aefa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aefc:	4a4a      	ldr	r2, [pc, #296]	; (800b028 <xTaskIncrementTick+0x148>)
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d120      	bne.n	800af4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af08:	4b48      	ldr	r3, [pc, #288]	; (800b02c <xTaskIncrementTick+0x14c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00a      	beq.n	800af28 <xTaskIncrementTick+0x48>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	603b      	str	r3, [r7, #0]
}
 800af24:	bf00      	nop
 800af26:	e7fe      	b.n	800af26 <xTaskIncrementTick+0x46>
 800af28:	4b40      	ldr	r3, [pc, #256]	; (800b02c <xTaskIncrementTick+0x14c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	4b40      	ldr	r3, [pc, #256]	; (800b030 <xTaskIncrementTick+0x150>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a3e      	ldr	r2, [pc, #248]	; (800b02c <xTaskIncrementTick+0x14c>)
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	4a3e      	ldr	r2, [pc, #248]	; (800b030 <xTaskIncrementTick+0x150>)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6013      	str	r3, [r2, #0]
 800af3c:	4b3d      	ldr	r3, [pc, #244]	; (800b034 <xTaskIncrementTick+0x154>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3301      	adds	r3, #1
 800af42:	4a3c      	ldr	r2, [pc, #240]	; (800b034 <xTaskIncrementTick+0x154>)
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	f000 fac5 	bl	800b4d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af4a:	4b3b      	ldr	r3, [pc, #236]	; (800b038 <xTaskIncrementTick+0x158>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	429a      	cmp	r2, r3
 800af52:	d348      	bcc.n	800afe6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af54:	4b35      	ldr	r3, [pc, #212]	; (800b02c <xTaskIncrementTick+0x14c>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d104      	bne.n	800af68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af5e:	4b36      	ldr	r3, [pc, #216]	; (800b038 <xTaskIncrementTick+0x158>)
 800af60:	f04f 32ff 	mov.w	r2, #4294967295
 800af64:	601a      	str	r2, [r3, #0]
					break;
 800af66:	e03e      	b.n	800afe6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af68:	4b30      	ldr	r3, [pc, #192]	; (800b02c <xTaskIncrementTick+0x14c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d203      	bcs.n	800af88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af80:	4a2d      	ldr	r2, [pc, #180]	; (800b038 <xTaskIncrementTick+0x158>)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af86:	e02e      	b.n	800afe6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	3304      	adds	r3, #4
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fe ff5d 	bl	8009e4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af96:	2b00      	cmp	r3, #0
 800af98:	d004      	beq.n	800afa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	3318      	adds	r3, #24
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe ff54 	bl	8009e4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa8:	2201      	movs	r2, #1
 800afaa:	409a      	lsls	r2, r3
 800afac:	4b23      	ldr	r3, [pc, #140]	; (800b03c <xTaskIncrementTick+0x15c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	4a22      	ldr	r2, [pc, #136]	; (800b03c <xTaskIncrementTick+0x15c>)
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afba:	4613      	mov	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4a1f      	ldr	r2, [pc, #124]	; (800b040 <xTaskIncrementTick+0x160>)
 800afc4:	441a      	add	r2, r3
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	3304      	adds	r3, #4
 800afca:	4619      	mov	r1, r3
 800afcc:	4610      	mov	r0, r2
 800afce:	f7fe fee0 	bl	8009d92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd6:	4b1b      	ldr	r3, [pc, #108]	; (800b044 <xTaskIncrementTick+0x164>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	429a      	cmp	r2, r3
 800afde:	d3b9      	bcc.n	800af54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800afe0:	2301      	movs	r3, #1
 800afe2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afe4:	e7b6      	b.n	800af54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afe6:	4b17      	ldr	r3, [pc, #92]	; (800b044 <xTaskIncrementTick+0x164>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afec:	4914      	ldr	r1, [pc, #80]	; (800b040 <xTaskIncrementTick+0x160>)
 800afee:	4613      	mov	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	440b      	add	r3, r1
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d901      	bls.n	800b002 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800affe:	2301      	movs	r3, #1
 800b000:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b002:	4b11      	ldr	r3, [pc, #68]	; (800b048 <xTaskIncrementTick+0x168>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d007      	beq.n	800b01a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b00a:	2301      	movs	r3, #1
 800b00c:	617b      	str	r3, [r7, #20]
 800b00e:	e004      	b.n	800b01a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b010:	4b0e      	ldr	r3, [pc, #56]	; (800b04c <xTaskIncrementTick+0x16c>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3301      	adds	r3, #1
 800b016:	4a0d      	ldr	r2, [pc, #52]	; (800b04c <xTaskIncrementTick+0x16c>)
 800b018:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b01a:	697b      	ldr	r3, [r7, #20]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	200006e8 	.word	0x200006e8
 800b028:	200006c4 	.word	0x200006c4
 800b02c:	20000678 	.word	0x20000678
 800b030:	2000067c 	.word	0x2000067c
 800b034:	200006d8 	.word	0x200006d8
 800b038:	200006e0 	.word	0x200006e0
 800b03c:	200006c8 	.word	0x200006c8
 800b040:	200005c4 	.word	0x200005c4
 800b044:	200005c0 	.word	0x200005c0
 800b048:	200006d4 	.word	0x200006d4
 800b04c:	200006d0 	.word	0x200006d0

0800b050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b056:	4b39      	ldr	r3, [pc, #228]	; (800b13c <vTaskSwitchContext+0xec>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b05e:	4b38      	ldr	r3, [pc, #224]	; (800b140 <vTaskSwitchContext+0xf0>)
 800b060:	2201      	movs	r2, #1
 800b062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b064:	e066      	b.n	800b134 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800b066:	4b36      	ldr	r3, [pc, #216]	; (800b140 <vTaskSwitchContext+0xf0>)
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b06c:	4b35      	ldr	r3, [pc, #212]	; (800b144 <vTaskSwitchContext+0xf4>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b072:	61fb      	str	r3, [r7, #28]
 800b074:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b078:	61bb      	str	r3, [r7, #24]
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	69ba      	ldr	r2, [r7, #24]
 800b080:	429a      	cmp	r2, r3
 800b082:	d111      	bne.n	800b0a8 <vTaskSwitchContext+0x58>
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	3304      	adds	r3, #4
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d10b      	bne.n	800b0a8 <vTaskSwitchContext+0x58>
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	3308      	adds	r3, #8
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d105      	bne.n	800b0a8 <vTaskSwitchContext+0x58>
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	330c      	adds	r3, #12
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	69ba      	ldr	r2, [r7, #24]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d008      	beq.n	800b0ba <vTaskSwitchContext+0x6a>
 800b0a8:	4b26      	ldr	r3, [pc, #152]	; (800b144 <vTaskSwitchContext+0xf4>)
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	4b25      	ldr	r3, [pc, #148]	; (800b144 <vTaskSwitchContext+0xf4>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3334      	adds	r3, #52	; 0x34
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	f7f5 fa24 	bl	8000502 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ba:	4b23      	ldr	r3, [pc, #140]	; (800b148 <vTaskSwitchContext+0xf8>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	fab3 f383 	clz	r3, r3
 800b0c6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b0c8:	7afb      	ldrb	r3, [r7, #11]
 800b0ca:	f1c3 031f 	rsb	r3, r3, #31
 800b0ce:	617b      	str	r3, [r7, #20]
 800b0d0:	491e      	ldr	r1, [pc, #120]	; (800b14c <vTaskSwitchContext+0xfc>)
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	440b      	add	r3, r1
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <vTaskSwitchContext+0xaa>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	607b      	str	r3, [r7, #4]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <vTaskSwitchContext+0xa8>
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4a11      	ldr	r2, [pc, #68]	; (800b14c <vTaskSwitchContext+0xfc>)
 800b106:	4413      	add	r3, r2
 800b108:	613b      	str	r3, [r7, #16]
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	605a      	str	r2, [r3, #4]
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	3308      	adds	r3, #8
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d104      	bne.n	800b12a <vTaskSwitchContext+0xda>
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	605a      	str	r2, [r3, #4]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	4a04      	ldr	r2, [pc, #16]	; (800b144 <vTaskSwitchContext+0xf4>)
 800b132:	6013      	str	r3, [r2, #0]
}
 800b134:	bf00      	nop
 800b136:	3720      	adds	r7, #32
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	200006e8 	.word	0x200006e8
 800b140:	200006d4 	.word	0x200006d4
 800b144:	200005c0 	.word	0x200005c0
 800b148:	200006c8 	.word	0x200006c8
 800b14c:	200005c4 	.word	0x200005c4

0800b150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10a      	bne.n	800b176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	60fb      	str	r3, [r7, #12]
}
 800b172:	bf00      	nop
 800b174:	e7fe      	b.n	800b174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b176:	4b07      	ldr	r3, [pc, #28]	; (800b194 <vTaskPlaceOnEventList+0x44>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	3318      	adds	r3, #24
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7fe fe2b 	bl	8009dda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b184:	2101      	movs	r1, #1
 800b186:	6838      	ldr	r0, [r7, #0]
 800b188:	f000 fa68 	bl	800b65c <prvAddCurrentTaskToDelayedList>
}
 800b18c:	bf00      	nop
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	200005c0 	.word	0x200005c0

0800b198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	60fb      	str	r3, [r7, #12]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	3318      	adds	r3, #24
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fe fe3f 	bl	8009e4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ce:	4b1d      	ldr	r3, [pc, #116]	; (800b244 <xTaskRemoveFromEventList+0xac>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d11c      	bne.n	800b210 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fe fe36 	bl	8009e4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	409a      	lsls	r2, r3
 800b1e8:	4b17      	ldr	r3, [pc, #92]	; (800b248 <xTaskRemoveFromEventList+0xb0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	4a16      	ldr	r2, [pc, #88]	; (800b248 <xTaskRemoveFromEventList+0xb0>)
 800b1f0:	6013      	str	r3, [r2, #0]
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4a13      	ldr	r2, [pc, #76]	; (800b24c <xTaskRemoveFromEventList+0xb4>)
 800b200:	441a      	add	r2, r3
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	3304      	adds	r3, #4
 800b206:	4619      	mov	r1, r3
 800b208:	4610      	mov	r0, r2
 800b20a:	f7fe fdc2 	bl	8009d92 <vListInsertEnd>
 800b20e:	e005      	b.n	800b21c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	3318      	adds	r3, #24
 800b214:	4619      	mov	r1, r3
 800b216:	480e      	ldr	r0, [pc, #56]	; (800b250 <xTaskRemoveFromEventList+0xb8>)
 800b218:	f7fe fdbb 	bl	8009d92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b220:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <xTaskRemoveFromEventList+0xbc>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	429a      	cmp	r2, r3
 800b228:	d905      	bls.n	800b236 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b22a:	2301      	movs	r3, #1
 800b22c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b22e:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <xTaskRemoveFromEventList+0xc0>)
 800b230:	2201      	movs	r2, #1
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	e001      	b.n	800b23a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b236:	2300      	movs	r3, #0
 800b238:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b23a:	697b      	ldr	r3, [r7, #20]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	200006e8 	.word	0x200006e8
 800b248:	200006c8 	.word	0x200006c8
 800b24c:	200005c4 	.word	0x200005c4
 800b250:	20000680 	.word	0x20000680
 800b254:	200005c0 	.word	0x200005c0
 800b258:	200006d4 	.word	0x200006d4

0800b25c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b264:	4b06      	ldr	r3, [pc, #24]	; (800b280 <vTaskInternalSetTimeOutState+0x24>)
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b26c:	4b05      	ldr	r3, [pc, #20]	; (800b284 <vTaskInternalSetTimeOutState+0x28>)
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	605a      	str	r2, [r3, #4]
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	200006d8 	.word	0x200006d8
 800b284:	200006c4 	.word	0x200006c4

0800b288 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b088      	sub	sp, #32
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10a      	bne.n	800b2ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	613b      	str	r3, [r7, #16]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10a      	bne.n	800b2ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	60fb      	str	r3, [r7, #12]
}
 800b2c6:	bf00      	nop
 800b2c8:	e7fe      	b.n	800b2c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b2ca:	f000 fb5b 	bl	800b984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2ce:	4b1d      	ldr	r3, [pc, #116]	; (800b344 <xTaskCheckForTimeOut+0xbc>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e6:	d102      	bne.n	800b2ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	61fb      	str	r3, [r7, #28]
 800b2ec:	e023      	b.n	800b336 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	4b15      	ldr	r3, [pc, #84]	; (800b348 <xTaskCheckForTimeOut+0xc0>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d007      	beq.n	800b30a <xTaskCheckForTimeOut+0x82>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	429a      	cmp	r2, r3
 800b302:	d302      	bcc.n	800b30a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b304:	2301      	movs	r3, #1
 800b306:	61fb      	str	r3, [r7, #28]
 800b308:	e015      	b.n	800b336 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	429a      	cmp	r2, r3
 800b312:	d20b      	bcs.n	800b32c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	1ad2      	subs	r2, r2, r3
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7ff ff9b 	bl	800b25c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b326:	2300      	movs	r3, #0
 800b328:	61fb      	str	r3, [r7, #28]
 800b32a:	e004      	b.n	800b336 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b332:	2301      	movs	r3, #1
 800b334:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b336:	f000 fb55 	bl	800b9e4 <vPortExitCritical>

	return xReturn;
 800b33a:	69fb      	ldr	r3, [r7, #28]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3720      	adds	r7, #32
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	200006c4 	.word	0x200006c4
 800b348:	200006d8 	.word	0x200006d8

0800b34c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b34c:	b480      	push	{r7}
 800b34e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b350:	4b03      	ldr	r3, [pc, #12]	; (800b360 <vTaskMissedYield+0x14>)
 800b352:	2201      	movs	r2, #1
 800b354:	601a      	str	r2, [r3, #0]
}
 800b356:	bf00      	nop
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	200006d4 	.word	0x200006d4

0800b364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b36c:	f000 f854 	bl	800b418 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b370:	4b07      	ldr	r3, [pc, #28]	; (800b390 <prvIdleTask+0x2c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d907      	bls.n	800b388 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b378:	4b06      	ldr	r3, [pc, #24]	; (800b394 <prvIdleTask+0x30>)
 800b37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b388:	f7f5 f8b4 	bl	80004f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b38c:	e7ee      	b.n	800b36c <prvIdleTask+0x8>
 800b38e:	bf00      	nop
 800b390:	200005c4 	.word	0x200005c4
 800b394:	e000ed04 	.word	0xe000ed04

0800b398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b39e:	2300      	movs	r3, #0
 800b3a0:	607b      	str	r3, [r7, #4]
 800b3a2:	e00c      	b.n	800b3be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4a12      	ldr	r2, [pc, #72]	; (800b3f8 <prvInitialiseTaskLists+0x60>)
 800b3b0:	4413      	add	r3, r2
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe fcc0 	bl	8009d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	607b      	str	r3, [r7, #4]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b06      	cmp	r3, #6
 800b3c2:	d9ef      	bls.n	800b3a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3c4:	480d      	ldr	r0, [pc, #52]	; (800b3fc <prvInitialiseTaskLists+0x64>)
 800b3c6:	f7fe fcb7 	bl	8009d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3ca:	480d      	ldr	r0, [pc, #52]	; (800b400 <prvInitialiseTaskLists+0x68>)
 800b3cc:	f7fe fcb4 	bl	8009d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3d0:	480c      	ldr	r0, [pc, #48]	; (800b404 <prvInitialiseTaskLists+0x6c>)
 800b3d2:	f7fe fcb1 	bl	8009d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3d6:	480c      	ldr	r0, [pc, #48]	; (800b408 <prvInitialiseTaskLists+0x70>)
 800b3d8:	f7fe fcae 	bl	8009d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3dc:	480b      	ldr	r0, [pc, #44]	; (800b40c <prvInitialiseTaskLists+0x74>)
 800b3de:	f7fe fcab 	bl	8009d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3e2:	4b0b      	ldr	r3, [pc, #44]	; (800b410 <prvInitialiseTaskLists+0x78>)
 800b3e4:	4a05      	ldr	r2, [pc, #20]	; (800b3fc <prvInitialiseTaskLists+0x64>)
 800b3e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <prvInitialiseTaskLists+0x7c>)
 800b3ea:	4a05      	ldr	r2, [pc, #20]	; (800b400 <prvInitialiseTaskLists+0x68>)
 800b3ec:	601a      	str	r2, [r3, #0]
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	200005c4 	.word	0x200005c4
 800b3fc:	20000650 	.word	0x20000650
 800b400:	20000664 	.word	0x20000664
 800b404:	20000680 	.word	0x20000680
 800b408:	20000694 	.word	0x20000694
 800b40c:	200006ac 	.word	0x200006ac
 800b410:	20000678 	.word	0x20000678
 800b414:	2000067c 	.word	0x2000067c

0800b418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b41e:	e019      	b.n	800b454 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b420:	f000 fab0 	bl	800b984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b424:	4b10      	ldr	r3, [pc, #64]	; (800b468 <prvCheckTasksWaitingTermination+0x50>)
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3304      	adds	r3, #4
 800b430:	4618      	mov	r0, r3
 800b432:	f7fe fd0b 	bl	8009e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b436:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <prvCheckTasksWaitingTermination+0x54>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	4a0b      	ldr	r2, [pc, #44]	; (800b46c <prvCheckTasksWaitingTermination+0x54>)
 800b43e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b440:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <prvCheckTasksWaitingTermination+0x58>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3b01      	subs	r3, #1
 800b446:	4a0a      	ldr	r2, [pc, #40]	; (800b470 <prvCheckTasksWaitingTermination+0x58>)
 800b448:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b44a:	f000 facb 	bl	800b9e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f810 	bl	800b474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <prvCheckTasksWaitingTermination+0x58>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1e1      	bne.n	800b420 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20000694 	.word	0x20000694
 800b46c:	200006c0 	.word	0x200006c0
 800b470:	200006a8 	.word	0x200006a8

0800b474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b482:	2b00      	cmp	r3, #0
 800b484:	d108      	bne.n	800b498 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 fc6c 	bl	800bd68 <vPortFree>
				vPortFree( pxTCB );
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 fc69 	bl	800bd68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b496:	e018      	b.n	800b4ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d103      	bne.n	800b4aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fc60 	bl	800bd68 <vPortFree>
	}
 800b4a8:	e00f      	b.n	800b4ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d00a      	beq.n	800b4ca <prvDeleteTCB+0x56>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	60fb      	str	r3, [r7, #12]
}
 800b4c6:	bf00      	nop
 800b4c8:	e7fe      	b.n	800b4c8 <prvDeleteTCB+0x54>
	}
 800b4ca:	bf00      	nop
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
	...

0800b4d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4da:	4b0c      	ldr	r3, [pc, #48]	; (800b50c <prvResetNextTaskUnblockTime+0x38>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d104      	bne.n	800b4ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4e4:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <prvResetNextTaskUnblockTime+0x3c>)
 800b4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4ec:	e008      	b.n	800b500 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4ee:	4b07      	ldr	r3, [pc, #28]	; (800b50c <prvResetNextTaskUnblockTime+0x38>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	4a04      	ldr	r2, [pc, #16]	; (800b510 <prvResetNextTaskUnblockTime+0x3c>)
 800b4fe:	6013      	str	r3, [r2, #0]
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	20000678 	.word	0x20000678
 800b510:	200006e0 	.word	0x200006e0

0800b514 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b51a:	4b0b      	ldr	r3, [pc, #44]	; (800b548 <xTaskGetSchedulerState+0x34>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d102      	bne.n	800b528 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b522:	2301      	movs	r3, #1
 800b524:	607b      	str	r3, [r7, #4]
 800b526:	e008      	b.n	800b53a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b528:	4b08      	ldr	r3, [pc, #32]	; (800b54c <xTaskGetSchedulerState+0x38>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d102      	bne.n	800b536 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b530:	2302      	movs	r3, #2
 800b532:	607b      	str	r3, [r7, #4]
 800b534:	e001      	b.n	800b53a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b536:	2300      	movs	r3, #0
 800b538:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b53a:	687b      	ldr	r3, [r7, #4]
	}
 800b53c:	4618      	mov	r0, r3
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	200006cc 	.word	0x200006cc
 800b54c:	200006e8 	.word	0x200006e8

0800b550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b55c:	2300      	movs	r3, #0
 800b55e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d06e      	beq.n	800b644 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b566:	4b3a      	ldr	r3, [pc, #232]	; (800b650 <xTaskPriorityDisinherit+0x100>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d00a      	beq.n	800b586 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	60fb      	str	r3, [r7, #12]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10a      	bne.n	800b5a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	60bb      	str	r3, [r7, #8]
}
 800b5a0:	bf00      	nop
 800b5a2:	e7fe      	b.n	800b5a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5a8:	1e5a      	subs	r2, r3, #1
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d044      	beq.n	800b644 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d140      	bne.n	800b644 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe fc40 	bl	8009e4c <uxListRemove>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d115      	bne.n	800b5fe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d6:	491f      	ldr	r1, [pc, #124]	; (800b654 <xTaskPriorityDisinherit+0x104>)
 800b5d8:	4613      	mov	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	440b      	add	r3, r1
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <xTaskPriorityDisinherit+0xae>
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f2:	43da      	mvns	r2, r3
 800b5f4:	4b18      	ldr	r3, [pc, #96]	; (800b658 <xTaskPriorityDisinherit+0x108>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	4a17      	ldr	r2, [pc, #92]	; (800b658 <xTaskPriorityDisinherit+0x108>)
 800b5fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60a:	f1c3 0207 	rsb	r2, r3, #7
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b616:	2201      	movs	r2, #1
 800b618:	409a      	lsls	r2, r3
 800b61a:	4b0f      	ldr	r3, [pc, #60]	; (800b658 <xTaskPriorityDisinherit+0x108>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4313      	orrs	r3, r2
 800b620:	4a0d      	ldr	r2, [pc, #52]	; (800b658 <xTaskPriorityDisinherit+0x108>)
 800b622:	6013      	str	r3, [r2, #0]
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b628:	4613      	mov	r3, r2
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4413      	add	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4a08      	ldr	r2, [pc, #32]	; (800b654 <xTaskPriorityDisinherit+0x104>)
 800b632:	441a      	add	r2, r3
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	3304      	adds	r3, #4
 800b638:	4619      	mov	r1, r3
 800b63a:	4610      	mov	r0, r2
 800b63c:	f7fe fba9 	bl	8009d92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b640:	2301      	movs	r3, #1
 800b642:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b644:	697b      	ldr	r3, [r7, #20]
	}
 800b646:	4618      	mov	r0, r3
 800b648:	3718      	adds	r7, #24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	200005c0 	.word	0x200005c0
 800b654:	200005c4 	.word	0x200005c4
 800b658:	200006c8 	.word	0x200006c8

0800b65c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b666:	4b29      	ldr	r3, [pc, #164]	; (800b70c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b66c:	4b28      	ldr	r3, [pc, #160]	; (800b710 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	3304      	adds	r3, #4
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe fbea 	bl	8009e4c <uxListRemove>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10b      	bne.n	800b696 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b67e:	4b24      	ldr	r3, [pc, #144]	; (800b710 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b684:	2201      	movs	r2, #1
 800b686:	fa02 f303 	lsl.w	r3, r2, r3
 800b68a:	43da      	mvns	r2, r3
 800b68c:	4b21      	ldr	r3, [pc, #132]	; (800b714 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4013      	ands	r3, r2
 800b692:	4a20      	ldr	r2, [pc, #128]	; (800b714 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b694:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69c:	d10a      	bne.n	800b6b4 <prvAddCurrentTaskToDelayedList+0x58>
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d007      	beq.n	800b6b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6a4:	4b1a      	ldr	r3, [pc, #104]	; (800b710 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	481a      	ldr	r0, [pc, #104]	; (800b718 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b6ae:	f7fe fb70 	bl	8009d92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6b2:	e026      	b.n	800b702 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6bc:	4b14      	ldr	r3, [pc, #80]	; (800b710 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d209      	bcs.n	800b6e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6cc:	4b13      	ldr	r3, [pc, #76]	; (800b71c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	4b0f      	ldr	r3, [pc, #60]	; (800b710 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f7fe fb7e 	bl	8009dda <vListInsert>
}
 800b6de:	e010      	b.n	800b702 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6e0:	4b0f      	ldr	r3, [pc, #60]	; (800b720 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	f7fe fb74 	bl	8009dda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6f2:	4b0c      	ldr	r3, [pc, #48]	; (800b724 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d202      	bcs.n	800b702 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b6fc:	4a09      	ldr	r2, [pc, #36]	; (800b724 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	6013      	str	r3, [r2, #0]
}
 800b702:	bf00      	nop
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	200006c4 	.word	0x200006c4
 800b710:	200005c0 	.word	0x200005c0
 800b714:	200006c8 	.word	0x200006c8
 800b718:	200006ac 	.word	0x200006ac
 800b71c:	2000067c 	.word	0x2000067c
 800b720:	20000678 	.word	0x20000678
 800b724:	200006e0 	.word	0x200006e0

0800b728 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3b04      	subs	r3, #4
 800b738:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3b04      	subs	r3, #4
 800b746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f023 0201 	bic.w	r2, r3, #1
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3b04      	subs	r3, #4
 800b756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b758:	4a0c      	ldr	r2, [pc, #48]	; (800b78c <pxPortInitialiseStack+0x64>)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3b14      	subs	r3, #20
 800b762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3b04      	subs	r3, #4
 800b76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f06f 0202 	mvn.w	r2, #2
 800b776:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3b20      	subs	r3, #32
 800b77c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b77e:	68fb      	ldr	r3, [r7, #12]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3714      	adds	r7, #20
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr
 800b78c:	0800b791 	.word	0x0800b791

0800b790 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b79a:	4b12      	ldr	r3, [pc, #72]	; (800b7e4 <prvTaskExitError+0x54>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a2:	d00a      	beq.n	800b7ba <prvTaskExitError+0x2a>
	__asm volatile
 800b7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	60fb      	str	r3, [r7, #12]
}
 800b7b6:	bf00      	nop
 800b7b8:	e7fe      	b.n	800b7b8 <prvTaskExitError+0x28>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	60bb      	str	r3, [r7, #8]
}
 800b7cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b7ce:	bf00      	nop
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d0fc      	beq.n	800b7d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b7d6:	bf00      	nop
 800b7d8:	bf00      	nop
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	2000002c 	.word	0x2000002c
	...

0800b7f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b7f0:	4b07      	ldr	r3, [pc, #28]	; (800b810 <pxCurrentTCBConst2>)
 800b7f2:	6819      	ldr	r1, [r3, #0]
 800b7f4:	6808      	ldr	r0, [r1, #0]
 800b7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fa:	f380 8809 	msr	PSP, r0
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f04f 0000 	mov.w	r0, #0
 800b806:	f380 8811 	msr	BASEPRI, r0
 800b80a:	4770      	bx	lr
 800b80c:	f3af 8000 	nop.w

0800b810 <pxCurrentTCBConst2>:
 800b810:	200005c0 	.word	0x200005c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop

0800b818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b818:	4808      	ldr	r0, [pc, #32]	; (800b83c <prvPortStartFirstTask+0x24>)
 800b81a:	6800      	ldr	r0, [r0, #0]
 800b81c:	6800      	ldr	r0, [r0, #0]
 800b81e:	f380 8808 	msr	MSP, r0
 800b822:	f04f 0000 	mov.w	r0, #0
 800b826:	f380 8814 	msr	CONTROL, r0
 800b82a:	b662      	cpsie	i
 800b82c:	b661      	cpsie	f
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	df00      	svc	0
 800b838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b83a:	bf00      	nop
 800b83c:	e000ed08 	.word	0xe000ed08

0800b840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b846:	4b46      	ldr	r3, [pc, #280]	; (800b960 <xPortStartScheduler+0x120>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a46      	ldr	r2, [pc, #280]	; (800b964 <xPortStartScheduler+0x124>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d10a      	bne.n	800b866 <xPortStartScheduler+0x26>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	613b      	str	r3, [r7, #16]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b866:	4b3e      	ldr	r3, [pc, #248]	; (800b960 <xPortStartScheduler+0x120>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a3f      	ldr	r2, [pc, #252]	; (800b968 <xPortStartScheduler+0x128>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d10a      	bne.n	800b886 <xPortStartScheduler+0x46>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	60fb      	str	r3, [r7, #12]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b886:	4b39      	ldr	r3, [pc, #228]	; (800b96c <xPortStartScheduler+0x12c>)
 800b888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	22ff      	movs	r2, #255	; 0xff
 800b896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8a0:	78fb      	ldrb	r3, [r7, #3]
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b31      	ldr	r3, [pc, #196]	; (800b970 <xPortStartScheduler+0x130>)
 800b8ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8ae:	4b31      	ldr	r3, [pc, #196]	; (800b974 <xPortStartScheduler+0x134>)
 800b8b0:	2207      	movs	r2, #7
 800b8b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8b4:	e009      	b.n	800b8ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b8b6:	4b2f      	ldr	r3, [pc, #188]	; (800b974 <xPortStartScheduler+0x134>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	4a2d      	ldr	r2, [pc, #180]	; (800b974 <xPortStartScheduler+0x134>)
 800b8be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8d2:	2b80      	cmp	r3, #128	; 0x80
 800b8d4:	d0ef      	beq.n	800b8b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8d6:	4b27      	ldr	r3, [pc, #156]	; (800b974 <xPortStartScheduler+0x134>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f1c3 0307 	rsb	r3, r3, #7
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d00a      	beq.n	800b8f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	60bb      	str	r3, [r7, #8]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b8f8:	4b1e      	ldr	r3, [pc, #120]	; (800b974 <xPortStartScheduler+0x134>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	4a1d      	ldr	r2, [pc, #116]	; (800b974 <xPortStartScheduler+0x134>)
 800b900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b902:	4b1c      	ldr	r3, [pc, #112]	; (800b974 <xPortStartScheduler+0x134>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b90a:	4a1a      	ldr	r2, [pc, #104]	; (800b974 <xPortStartScheduler+0x134>)
 800b90c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	b2da      	uxtb	r2, r3
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b916:	4b18      	ldr	r3, [pc, #96]	; (800b978 <xPortStartScheduler+0x138>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <xPortStartScheduler+0x138>)
 800b91c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b922:	4b15      	ldr	r3, [pc, #84]	; (800b978 <xPortStartScheduler+0x138>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a14      	ldr	r2, [pc, #80]	; (800b978 <xPortStartScheduler+0x138>)
 800b928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b92c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b92e:	f000 f8dd 	bl	800baec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b932:	4b12      	ldr	r3, [pc, #72]	; (800b97c <xPortStartScheduler+0x13c>)
 800b934:	2200      	movs	r2, #0
 800b936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b938:	f000 f8fc 	bl	800bb34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b93c:	4b10      	ldr	r3, [pc, #64]	; (800b980 <xPortStartScheduler+0x140>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a0f      	ldr	r2, [pc, #60]	; (800b980 <xPortStartScheduler+0x140>)
 800b942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b948:	f7ff ff66 	bl	800b818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b94c:	f7ff fb80 	bl	800b050 <vTaskSwitchContext>
	prvTaskExitError();
 800b950:	f7ff ff1e 	bl	800b790 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3718      	adds	r7, #24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	e000ed00 	.word	0xe000ed00
 800b964:	410fc271 	.word	0x410fc271
 800b968:	410fc270 	.word	0x410fc270
 800b96c:	e000e400 	.word	0xe000e400
 800b970:	200006ec 	.word	0x200006ec
 800b974:	200006f0 	.word	0x200006f0
 800b978:	e000ed20 	.word	0xe000ed20
 800b97c:	2000002c 	.word	0x2000002c
 800b980:	e000ef34 	.word	0xe000ef34

0800b984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	607b      	str	r3, [r7, #4]
}
 800b99c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b99e:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <vPortEnterCritical+0x58>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	4a0d      	ldr	r2, [pc, #52]	; (800b9dc <vPortEnterCritical+0x58>)
 800b9a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9a8:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <vPortEnterCritical+0x58>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d10f      	bne.n	800b9d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9b0:	4b0b      	ldr	r3, [pc, #44]	; (800b9e0 <vPortEnterCritical+0x5c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00a      	beq.n	800b9d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	603b      	str	r3, [r7, #0]
}
 800b9cc:	bf00      	nop
 800b9ce:	e7fe      	b.n	800b9ce <vPortEnterCritical+0x4a>
	}
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	2000002c 	.word	0x2000002c
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9ea:	4b12      	ldr	r3, [pc, #72]	; (800ba34 <vPortExitCritical+0x50>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <vPortExitCritical+0x24>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	607b      	str	r3, [r7, #4]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba08:	4b0a      	ldr	r3, [pc, #40]	; (800ba34 <vPortExitCritical+0x50>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	4a09      	ldr	r2, [pc, #36]	; (800ba34 <vPortExitCritical+0x50>)
 800ba10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba12:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <vPortExitCritical+0x50>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d105      	bne.n	800ba26 <vPortExitCritical+0x42>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	f383 8811 	msr	BASEPRI, r3
}
 800ba24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba26:	bf00      	nop
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	2000002c 	.word	0x2000002c
	...

0800ba40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba40:	f3ef 8009 	mrs	r0, PSP
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <pxCurrentTCBConst>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	f01e 0f10 	tst.w	lr, #16
 800ba50:	bf08      	it	eq
 800ba52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5a:	6010      	str	r0, [r2, #0]
 800ba5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba64:	f380 8811 	msr	BASEPRI, r0
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f7ff faee 	bl	800b050 <vTaskSwitchContext>
 800ba74:	f04f 0000 	mov.w	r0, #0
 800ba78:	f380 8811 	msr	BASEPRI, r0
 800ba7c:	bc09      	pop	{r0, r3}
 800ba7e:	6819      	ldr	r1, [r3, #0]
 800ba80:	6808      	ldr	r0, [r1, #0]
 800ba82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba86:	f01e 0f10 	tst.w	lr, #16
 800ba8a:	bf08      	it	eq
 800ba8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba90:	f380 8809 	msr	PSP, r0
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	f3af 8000 	nop.w

0800baa0 <pxCurrentTCBConst>:
 800baa0:	200005c0 	.word	0x200005c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop

0800baa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	607b      	str	r3, [r7, #4]
}
 800bac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bac2:	f7ff fa0d 	bl	800aee0 <xTaskIncrementTick>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bacc:	4b06      	ldr	r3, [pc, #24]	; (800bae8 <SysTick_Handler+0x40>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	f383 8811 	msr	BASEPRI, r3
}
 800bade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	e000ed04 	.word	0xe000ed04

0800baec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800baec:	b480      	push	{r7}
 800baee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800baf0:	4b0b      	ldr	r3, [pc, #44]	; (800bb20 <vPortSetupTimerInterrupt+0x34>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800baf6:	4b0b      	ldr	r3, [pc, #44]	; (800bb24 <vPortSetupTimerInterrupt+0x38>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bafc:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <vPortSetupTimerInterrupt+0x3c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a0a      	ldr	r2, [pc, #40]	; (800bb2c <vPortSetupTimerInterrupt+0x40>)
 800bb02:	fba2 2303 	umull	r2, r3, r2, r3
 800bb06:	099b      	lsrs	r3, r3, #6
 800bb08:	4a09      	ldr	r2, [pc, #36]	; (800bb30 <vPortSetupTimerInterrupt+0x44>)
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb0e:	4b04      	ldr	r3, [pc, #16]	; (800bb20 <vPortSetupTimerInterrupt+0x34>)
 800bb10:	2207      	movs	r2, #7
 800bb12:	601a      	str	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	e000e010 	.word	0xe000e010
 800bb24:	e000e018 	.word	0xe000e018
 800bb28:	20000000 	.word	0x20000000
 800bb2c:	10624dd3 	.word	0x10624dd3
 800bb30:	e000e014 	.word	0xe000e014

0800bb34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bb44 <vPortEnableVFP+0x10>
 800bb38:	6801      	ldr	r1, [r0, #0]
 800bb3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bb3e:	6001      	str	r1, [r0, #0]
 800bb40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb42:	bf00      	nop
 800bb44:	e000ed88 	.word	0xe000ed88

0800bb48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb4e:	f3ef 8305 	mrs	r3, IPSR
 800bb52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b0f      	cmp	r3, #15
 800bb58:	d914      	bls.n	800bb84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb5a:	4a17      	ldr	r2, [pc, #92]	; (800bbb8 <vPortValidateInterruptPriority+0x70>)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb64:	4b15      	ldr	r3, [pc, #84]	; (800bbbc <vPortValidateInterruptPriority+0x74>)
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	7afa      	ldrb	r2, [r7, #11]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d20a      	bcs.n	800bb84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	607b      	str	r3, [r7, #4]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb84:	4b0e      	ldr	r3, [pc, #56]	; (800bbc0 <vPortValidateInterruptPriority+0x78>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bb8c:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <vPortValidateInterruptPriority+0x7c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d90a      	bls.n	800bbaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	603b      	str	r3, [r7, #0]
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <vPortValidateInterruptPriority+0x60>
	}
 800bbaa:	bf00      	nop
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	e000e3f0 	.word	0xe000e3f0
 800bbbc:	200006ec 	.word	0x200006ec
 800bbc0:	e000ed0c 	.word	0xe000ed0c
 800bbc4:	200006f0 	.word	0x200006f0

0800bbc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b08a      	sub	sp, #40	; 0x28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bbd4:	f7ff f8da 	bl	800ad8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bbd8:	4b5d      	ldr	r3, [pc, #372]	; (800bd50 <pvPortMalloc+0x188>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bbe0:	f000 f924 	bl	800be2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bbe4:	4b5b      	ldr	r3, [pc, #364]	; (800bd54 <pvPortMalloc+0x18c>)
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4013      	ands	r3, r2
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f040 8093 	bne.w	800bd18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d01d      	beq.n	800bc34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bbf8:	2208      	movs	r2, #8
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f003 0307 	and.w	r3, r3, #7
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d014      	beq.n	800bc34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f023 0307 	bic.w	r3, r3, #7
 800bc10:	3308      	adds	r3, #8
 800bc12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f003 0307 	and.w	r3, r3, #7
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00a      	beq.n	800bc34 <pvPortMalloc+0x6c>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	617b      	str	r3, [r7, #20]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d06e      	beq.n	800bd18 <pvPortMalloc+0x150>
 800bc3a:	4b47      	ldr	r3, [pc, #284]	; (800bd58 <pvPortMalloc+0x190>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d869      	bhi.n	800bd18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc44:	4b45      	ldr	r3, [pc, #276]	; (800bd5c <pvPortMalloc+0x194>)
 800bc46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc48:	4b44      	ldr	r3, [pc, #272]	; (800bd5c <pvPortMalloc+0x194>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc4e:	e004      	b.n	800bc5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d903      	bls.n	800bc6c <pvPortMalloc+0xa4>
 800bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1f1      	bne.n	800bc50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc6c:	4b38      	ldr	r3, [pc, #224]	; (800bd50 <pvPortMalloc+0x188>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d050      	beq.n	800bd18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2208      	movs	r2, #8
 800bc7c:	4413      	add	r3, r2
 800bc7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	1ad2      	subs	r2, r2, r3
 800bc90:	2308      	movs	r3, #8
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d91f      	bls.n	800bcd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	f003 0307 	and.w	r3, r3, #7
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <pvPortMalloc+0xf8>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	613b      	str	r3, [r7, #16]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	685a      	ldr	r2, [r3, #4]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	1ad2      	subs	r2, r2, r3
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcd2:	69b8      	ldr	r0, [r7, #24]
 800bcd4:	f000 f90c 	bl	800bef0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bcd8:	4b1f      	ldr	r3, [pc, #124]	; (800bd58 <pvPortMalloc+0x190>)
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	4a1d      	ldr	r2, [pc, #116]	; (800bd58 <pvPortMalloc+0x190>)
 800bce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bce6:	4b1c      	ldr	r3, [pc, #112]	; (800bd58 <pvPortMalloc+0x190>)
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	4b1d      	ldr	r3, [pc, #116]	; (800bd60 <pvPortMalloc+0x198>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d203      	bcs.n	800bcfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bcf2:	4b19      	ldr	r3, [pc, #100]	; (800bd58 <pvPortMalloc+0x190>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a1a      	ldr	r2, [pc, #104]	; (800bd60 <pvPortMalloc+0x198>)
 800bcf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	4b15      	ldr	r3, [pc, #84]	; (800bd54 <pvPortMalloc+0x18c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	431a      	orrs	r2, r3
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd0e:	4b15      	ldr	r3, [pc, #84]	; (800bd64 <pvPortMalloc+0x19c>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3301      	adds	r3, #1
 800bd14:	4a13      	ldr	r2, [pc, #76]	; (800bd64 <pvPortMalloc+0x19c>)
 800bd16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd18:	f7ff f846 	bl	800ada8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800bd22:	f7f4 fbf9 	bl	8000518 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	f003 0307 	and.w	r3, r3, #7
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00a      	beq.n	800bd46 <pvPortMalloc+0x17e>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	60fb      	str	r3, [r7, #12]
}
 800bd42:	bf00      	nop
 800bd44:	e7fe      	b.n	800bd44 <pvPortMalloc+0x17c>
	return pvReturn;
 800bd46:	69fb      	ldr	r3, [r7, #28]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3728      	adds	r7, #40	; 0x28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	200086fc 	.word	0x200086fc
 800bd54:	20008710 	.word	0x20008710
 800bd58:	20008700 	.word	0x20008700
 800bd5c:	200086f4 	.word	0x200086f4
 800bd60:	20008704 	.word	0x20008704
 800bd64:	20008708 	.word	0x20008708

0800bd68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d04d      	beq.n	800be16 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd7a:	2308      	movs	r3, #8
 800bd7c:	425b      	negs	r3, r3
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	4413      	add	r3, r2
 800bd82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	4b24      	ldr	r3, [pc, #144]	; (800be20 <vPortFree+0xb8>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4013      	ands	r3, r2
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10a      	bne.n	800bdac <vPortFree+0x44>
	__asm volatile
 800bd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9a:	f383 8811 	msr	BASEPRI, r3
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	60fb      	str	r3, [r7, #12]
}
 800bda8:	bf00      	nop
 800bdaa:	e7fe      	b.n	800bdaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00a      	beq.n	800bdca <vPortFree+0x62>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	60bb      	str	r3, [r7, #8]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	4b14      	ldr	r3, [pc, #80]	; (800be20 <vPortFree+0xb8>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d01e      	beq.n	800be16 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d11a      	bne.n	800be16 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	4b0e      	ldr	r3, [pc, #56]	; (800be20 <vPortFree+0xb8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	43db      	mvns	r3, r3
 800bdea:	401a      	ands	r2, r3
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bdf0:	f7fe ffcc 	bl	800ad8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <vPortFree+0xbc>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	4a09      	ldr	r2, [pc, #36]	; (800be24 <vPortFree+0xbc>)
 800be00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be02:	6938      	ldr	r0, [r7, #16]
 800be04:	f000 f874 	bl	800bef0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be08:	4b07      	ldr	r3, [pc, #28]	; (800be28 <vPortFree+0xc0>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3301      	adds	r3, #1
 800be0e:	4a06      	ldr	r2, [pc, #24]	; (800be28 <vPortFree+0xc0>)
 800be10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be12:	f7fe ffc9 	bl	800ada8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be16:	bf00      	nop
 800be18:	3718      	adds	r7, #24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20008710 	.word	0x20008710
 800be24:	20008700 	.word	0x20008700
 800be28:	2000870c 	.word	0x2000870c

0800be2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be38:	4b27      	ldr	r3, [pc, #156]	; (800bed8 <prvHeapInit+0xac>)
 800be3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f003 0307 	and.w	r3, r3, #7
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00c      	beq.n	800be60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3307      	adds	r3, #7
 800be4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f023 0307 	bic.w	r3, r3, #7
 800be52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	4a1f      	ldr	r2, [pc, #124]	; (800bed8 <prvHeapInit+0xac>)
 800be5c:	4413      	add	r3, r2
 800be5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be64:	4a1d      	ldr	r2, [pc, #116]	; (800bedc <prvHeapInit+0xb0>)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be6a:	4b1c      	ldr	r3, [pc, #112]	; (800bedc <prvHeapInit+0xb0>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	4413      	add	r3, r2
 800be76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be78:	2208      	movs	r2, #8
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1a9b      	subs	r3, r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f023 0307 	bic.w	r3, r3, #7
 800be86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4a15      	ldr	r2, [pc, #84]	; (800bee0 <prvHeapInit+0xb4>)
 800be8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be8e:	4b14      	ldr	r3, [pc, #80]	; (800bee0 <prvHeapInit+0xb4>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2200      	movs	r2, #0
 800be94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be96:	4b12      	ldr	r3, [pc, #72]	; (800bee0 <prvHeapInit+0xb4>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2200      	movs	r2, #0
 800be9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800beac:	4b0c      	ldr	r3, [pc, #48]	; (800bee0 <prvHeapInit+0xb4>)
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	4a0a      	ldr	r2, [pc, #40]	; (800bee4 <prvHeapInit+0xb8>)
 800beba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	4a09      	ldr	r2, [pc, #36]	; (800bee8 <prvHeapInit+0xbc>)
 800bec2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bec4:	4b09      	ldr	r3, [pc, #36]	; (800beec <prvHeapInit+0xc0>)
 800bec6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800beca:	601a      	str	r2, [r3, #0]
}
 800becc:	bf00      	nop
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	200006f4 	.word	0x200006f4
 800bedc:	200086f4 	.word	0x200086f4
 800bee0:	200086fc 	.word	0x200086fc
 800bee4:	20008704 	.word	0x20008704
 800bee8:	20008700 	.word	0x20008700
 800beec:	20008710 	.word	0x20008710

0800bef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bef8:	4b28      	ldr	r3, [pc, #160]	; (800bf9c <prvInsertBlockIntoFreeList+0xac>)
 800befa:	60fb      	str	r3, [r7, #12]
 800befc:	e002      	b.n	800bf04 <prvInsertBlockIntoFreeList+0x14>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d8f7      	bhi.n	800befe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	4413      	add	r3, r2
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d108      	bne.n	800bf32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	441a      	add	r2, r3
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	441a      	add	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d118      	bne.n	800bf78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <prvInsertBlockIntoFreeList+0xb0>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d00d      	beq.n	800bf6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	441a      	add	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	601a      	str	r2, [r3, #0]
 800bf6c:	e008      	b.n	800bf80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf6e:	4b0c      	ldr	r3, [pc, #48]	; (800bfa0 <prvInsertBlockIntoFreeList+0xb0>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	e003      	b.n	800bf80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d002      	beq.n	800bf8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf8e:	bf00      	nop
 800bf90:	3714      	adds	r7, #20
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	200086f4 	.word	0x200086f4
 800bfa0:	200086fc 	.word	0x200086fc

0800bfa4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	490e      	ldr	r1, [pc, #56]	; (800bfe4 <MX_USB_HOST_Init+0x40>)
 800bfac:	480e      	ldr	r0, [pc, #56]	; (800bfe8 <MX_USB_HOST_Init+0x44>)
 800bfae:	f7fb fed1 	bl	8007d54 <USBH_Init>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bfb8:	f7f4 ff24 	bl	8000e04 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800bfbc:	490b      	ldr	r1, [pc, #44]	; (800bfec <MX_USB_HOST_Init+0x48>)
 800bfbe:	480a      	ldr	r0, [pc, #40]	; (800bfe8 <MX_USB_HOST_Init+0x44>)
 800bfc0:	f7fb ff7e 	bl	8007ec0 <USBH_RegisterClass>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d001      	beq.n	800bfce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bfca:	f7f4 ff1b 	bl	8000e04 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800bfce:	4806      	ldr	r0, [pc, #24]	; (800bfe8 <MX_USB_HOST_Init+0x44>)
 800bfd0:	f7fc f802 	bl	8007fd8 <USBH_Start>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bfda:	f7f4 ff13 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bfde:	bf00      	nop
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0800bff1 	.word	0x0800bff1
 800bfe8:	20008714 	.word	0x20008714
 800bfec:	2000000c 	.word	0x2000000c

0800bff0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	3b01      	subs	r3, #1
 800c000:	2b04      	cmp	r3, #4
 800c002:	d819      	bhi.n	800c038 <USBH_UserProcess+0x48>
 800c004:	a201      	add	r2, pc, #4	; (adr r2, 800c00c <USBH_UserProcess+0x1c>)
 800c006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00a:	bf00      	nop
 800c00c:	0800c039 	.word	0x0800c039
 800c010:	0800c029 	.word	0x0800c029
 800c014:	0800c039 	.word	0x0800c039
 800c018:	0800c031 	.word	0x0800c031
 800c01c:	0800c021 	.word	0x0800c021
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c020:	4b09      	ldr	r3, [pc, #36]	; (800c048 <USBH_UserProcess+0x58>)
 800c022:	2203      	movs	r2, #3
 800c024:	701a      	strb	r2, [r3, #0]
  break;
 800c026:	e008      	b.n	800c03a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c028:	4b07      	ldr	r3, [pc, #28]	; (800c048 <USBH_UserProcess+0x58>)
 800c02a:	2202      	movs	r2, #2
 800c02c:	701a      	strb	r2, [r3, #0]
  break;
 800c02e:	e004      	b.n	800c03a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c030:	4b05      	ldr	r3, [pc, #20]	; (800c048 <USBH_UserProcess+0x58>)
 800c032:	2201      	movs	r2, #1
 800c034:	701a      	strb	r2, [r3, #0]
  break;
 800c036:	e000      	b.n	800c03a <USBH_UserProcess+0x4a>

  default:
  break;
 800c038:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c03a:	bf00      	nop
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	20008af8 	.word	0x20008af8

0800c04c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08a      	sub	sp, #40	; 0x28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c054:	f107 0314 	add.w	r3, r7, #20
 800c058:	2200      	movs	r2, #0
 800c05a:	601a      	str	r2, [r3, #0]
 800c05c:	605a      	str	r2, [r3, #4]
 800c05e:	609a      	str	r2, [r3, #8]
 800c060:	60da      	str	r2, [r3, #12]
 800c062:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a24      	ldr	r2, [pc, #144]	; (800c0fc <HAL_HCD_MspInit+0xb0>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d141      	bne.n	800c0f2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c06e:	2300      	movs	r3, #0
 800c070:	613b      	str	r3, [r7, #16]
 800c072:	4b23      	ldr	r3, [pc, #140]	; (800c100 <HAL_HCD_MspInit+0xb4>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	4a22      	ldr	r2, [pc, #136]	; (800c100 <HAL_HCD_MspInit+0xb4>)
 800c078:	f043 0302 	orr.w	r3, r3, #2
 800c07c:	6313      	str	r3, [r2, #48]	; 0x30
 800c07e:	4b20      	ldr	r3, [pc, #128]	; (800c100 <HAL_HCD_MspInit+0xb4>)
 800c080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c082:	f003 0302 	and.w	r3, r3, #2
 800c086:	613b      	str	r3, [r7, #16]
 800c088:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800c08a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800c08e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c090:	2302      	movs	r3, #2
 800c092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c094:	2300      	movs	r3, #0
 800c096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c098:	2300      	movs	r3, #0
 800c09a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800c09c:	230c      	movs	r3, #12
 800c09e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0a0:	f107 0314 	add.w	r3, r7, #20
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	4817      	ldr	r0, [pc, #92]	; (800c104 <HAL_HCD_MspInit+0xb8>)
 800c0a8:	f7f5 fe8c 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800c0ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800c0ba:	f107 0314 	add.w	r3, r7, #20
 800c0be:	4619      	mov	r1, r3
 800c0c0:	4810      	ldr	r0, [pc, #64]	; (800c104 <HAL_HCD_MspInit+0xb8>)
 800c0c2:	f7f5 fe7f 	bl	8001dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60fb      	str	r3, [r7, #12]
 800c0ca:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <HAL_HCD_MspInit+0xb4>)
 800c0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ce:	4a0c      	ldr	r2, [pc, #48]	; (800c100 <HAL_HCD_MspInit+0xb4>)
 800c0d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0d4:	6313      	str	r3, [r2, #48]	; 0x30
 800c0d6:	4b0a      	ldr	r3, [pc, #40]	; (800c100 <HAL_HCD_MspInit+0xb4>)
 800c0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	2105      	movs	r1, #5
 800c0e6:	204d      	movs	r0, #77	; 0x4d
 800c0e8:	f7f5 fc3a 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c0ec:	204d      	movs	r0, #77	; 0x4d
 800c0ee:	f7f5 fc53 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c0f2:	bf00      	nop
 800c0f4:	3728      	adds	r7, #40	; 0x28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	40040000 	.word	0x40040000
 800c100:	40023800 	.word	0x40023800
 800c104:	40020400 	.word	0x40020400

0800c108 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c116:	4618      	mov	r0, r3
 800c118:	f7fc fc15 	bl	8008946 <USBH_LL_IncTimer>
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c132:	4618      	mov	r0, r3
 800c134:	f7fc fc59 	bl	80089ea <USBH_LL_Connect>
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fc fc6e 	bl	8008a30 <USBH_LL_Disconnect>
}
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	460b      	mov	r3, r1
 800c166:	70fb      	strb	r3, [r7, #3]
 800c168:	4613      	mov	r3, r2
 800c16a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c172:	4618      	mov	r0, r3
 800c174:	f7fc fca3 	bl	8008abe <USBH_LL_NotifyURBChange>
#endif
}
 800c178:	bf00      	nop
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fc fc03 	bl	800899a <USBH_LL_PortEnabled>
}
 800c194:	bf00      	nop
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fc fc0f 	bl	80089ce <USBH_LL_PortDisabled>
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d132      	bne.n	800c230 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800c1ca:	4a1c      	ldr	r2, [pc, #112]	; (800c23c <USBH_LL_Init+0x84>)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4a19      	ldr	r2, [pc, #100]	; (800c23c <USBH_LL_Init+0x84>)
 800c1d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c1da:	4b18      	ldr	r3, [pc, #96]	; (800c23c <USBH_LL_Init+0x84>)
 800c1dc:	4a18      	ldr	r2, [pc, #96]	; (800c240 <USBH_LL_Init+0x88>)
 800c1de:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800c1e0:	4b16      	ldr	r3, [pc, #88]	; (800c23c <USBH_LL_Init+0x84>)
 800c1e2:	220c      	movs	r2, #12
 800c1e4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800c1e6:	4b15      	ldr	r3, [pc, #84]	; (800c23c <USBH_LL_Init+0x84>)
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c1ec:	4b13      	ldr	r3, [pc, #76]	; (800c23c <USBH_LL_Init+0x84>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c1f2:	4b12      	ldr	r3, [pc, #72]	; (800c23c <USBH_LL_Init+0x84>)
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c1f8:	4b10      	ldr	r3, [pc, #64]	; (800c23c <USBH_LL_Init+0x84>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c1fe:	4b0f      	ldr	r3, [pc, #60]	; (800c23c <USBH_LL_Init+0x84>)
 800c200:	2200      	movs	r2, #0
 800c202:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c204:	4b0d      	ldr	r3, [pc, #52]	; (800c23c <USBH_LL_Init+0x84>)
 800c206:	2200      	movs	r2, #0
 800c208:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c20a:	4b0c      	ldr	r3, [pc, #48]	; (800c23c <USBH_LL_Init+0x84>)
 800c20c:	2200      	movs	r2, #0
 800c20e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800c210:	480a      	ldr	r0, [pc, #40]	; (800c23c <USBH_LL_Init+0x84>)
 800c212:	f7f5 ffce 	bl	80021b2 <HAL_HCD_Init>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800c21c:	f7f4 fdf2 	bl	8000e04 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800c220:	4806      	ldr	r0, [pc, #24]	; (800c23c <USBH_LL_Init+0x84>)
 800c222:	f7f6 fbb2 	bl	800298a <HAL_HCD_GetCurrentFrame>
 800c226:	4603      	mov	r3, r0
 800c228:	4619      	mov	r1, r3
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7fc fb7c 	bl	8008928 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20008afc 	.word	0x20008afc
 800c240:	40040000 	.word	0x40040000

0800c244 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7f6 fb1f 	bl	800289e <HAL_HCD_Start>
 800c260:	4603      	mov	r3, r0
 800c262:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	4618      	mov	r0, r3
 800c268:	f000 f95c 	bl	800c524 <USBH_Get_USB_Status>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c270:	7bbb      	ldrb	r3, [r7, #14]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c290:	4618      	mov	r0, r3
 800c292:	f7f6 fb27 	bl	80028e4 <HAL_HCD_Stop>
 800c296:	4603      	mov	r3, r0
 800c298:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 f941 	bl	800c524 <USBH_Get_USB_Status>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7f6 fb6f 	bl	80029a6 <HAL_HCD_GetCurrentSpeed>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d00c      	beq.n	800c2e8 <USBH_LL_GetSpeed+0x38>
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d80d      	bhi.n	800c2ee <USBH_LL_GetSpeed+0x3e>
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <USBH_LL_GetSpeed+0x2c>
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d003      	beq.n	800c2e2 <USBH_LL_GetSpeed+0x32>
 800c2da:	e008      	b.n	800c2ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	73fb      	strb	r3, [r7, #15]
    break;
 800c2e0:	e008      	b.n	800c2f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c2e6:	e005      	b.n	800c2f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ec:	e002      	b.n	800c2f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2f2:	bf00      	nop
  }
  return  speed;
 800c2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b084      	sub	sp, #16
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c314:	4618      	mov	r0, r3
 800c316:	f7f6 fb02 	bl	800291e <HAL_HCD_ResetPort>
 800c31a:	4603      	mov	r3, r0
 800c31c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
 800c320:	4618      	mov	r0, r3
 800c322:	f000 f8ff 	bl	800c524 <USBH_Get_USB_Status>
 800c326:	4603      	mov	r3, r0
 800c328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c346:	78fa      	ldrb	r2, [r7, #3]
 800c348:	4611      	mov	r1, r2
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7f6 fb09 	bl	8002962 <HAL_HCD_HC_GetXferCount>
 800c350:	4603      	mov	r3, r0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c35a:	b590      	push	{r4, r7, lr}
 800c35c:	b089      	sub	sp, #36	; 0x24
 800c35e:	af04      	add	r7, sp, #16
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	4608      	mov	r0, r1
 800c364:	4611      	mov	r1, r2
 800c366:	461a      	mov	r2, r3
 800c368:	4603      	mov	r3, r0
 800c36a:	70fb      	strb	r3, [r7, #3]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70bb      	strb	r3, [r7, #2]
 800c370:	4613      	mov	r3, r2
 800c372:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c382:	787c      	ldrb	r4, [r7, #1]
 800c384:	78ba      	ldrb	r2, [r7, #2]
 800c386:	78f9      	ldrb	r1, [r7, #3]
 800c388:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c38a:	9302      	str	r3, [sp, #8]
 800c38c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c390:	9301      	str	r3, [sp, #4]
 800c392:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	4623      	mov	r3, r4
 800c39a:	f7f5 ff6c 	bl	8002276 <HAL_HCD_HC_Init>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 f8bd 	bl	800c524 <USBH_Get_USB_Status>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd90      	pop	{r4, r7, pc}

0800c3b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3d2:	78fa      	ldrb	r2, [r7, #3]
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7f5 ffdc 	bl	8002394 <HAL_HCD_HC_Halt>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 f89e 	bl	800c524 <USBH_Get_USB_Status>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c3f6:	b590      	push	{r4, r7, lr}
 800c3f8:	b089      	sub	sp, #36	; 0x24
 800c3fa:	af04      	add	r7, sp, #16
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	4608      	mov	r0, r1
 800c400:	4611      	mov	r1, r2
 800c402:	461a      	mov	r2, r3
 800c404:	4603      	mov	r3, r0
 800c406:	70fb      	strb	r3, [r7, #3]
 800c408:	460b      	mov	r3, r1
 800c40a:	70bb      	strb	r3, [r7, #2]
 800c40c:	4613      	mov	r3, r2
 800c40e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c41e:	787c      	ldrb	r4, [r7, #1]
 800c420:	78ba      	ldrb	r2, [r7, #2]
 800c422:	78f9      	ldrb	r1, [r7, #3]
 800c424:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c428:	9303      	str	r3, [sp, #12]
 800c42a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c42c:	9302      	str	r3, [sp, #8]
 800c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	4623      	mov	r3, r4
 800c43a:	f7f5 ffcf 	bl	80023dc <HAL_HCD_HC_SubmitRequest>
 800c43e:	4603      	mov	r3, r0
 800c440:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c442:	7bfb      	ldrb	r3, [r7, #15]
 800c444:	4618      	mov	r0, r3
 800c446:	f000 f86d 	bl	800c524 <USBH_Get_USB_Status>
 800c44a:	4603      	mov	r3, r0
 800c44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	bd90      	pop	{r4, r7, pc}

0800c458 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c46a:	78fa      	ldrb	r2, [r7, #3]
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f7f6 fa63 	bl	800293a <HAL_HCD_HC_GetURBState>
 800c474:	4603      	mov	r3, r0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b082      	sub	sp, #8
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	460b      	mov	r3, r1
 800c488:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c490:	2b00      	cmp	r3, #0
 800c492:	d103      	bne.n	800c49c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800c494:	78fb      	ldrb	r3, [r7, #3]
 800c496:	4618      	mov	r0, r3
 800c498:	f000 f870 	bl	800c57c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c49c:	20c8      	movs	r0, #200	; 0xc8
 800c49e:	f7f5 f983 	bl	80017a8 <HAL_Delay>
  return USBH_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c4c4:	78fb      	ldrb	r3, [r7, #3]
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	212c      	movs	r1, #44	; 0x2c
 800c4ca:	fb01 f303 	mul.w	r3, r1, r3
 800c4ce:	4413      	add	r3, r2
 800c4d0:	333b      	adds	r3, #59	; 0x3b
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d009      	beq.n	800c4ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c4d8:	78fb      	ldrb	r3, [r7, #3]
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	212c      	movs	r1, #44	; 0x2c
 800c4de:	fb01 f303 	mul.w	r3, r1, r3
 800c4e2:	4413      	add	r3, r2
 800c4e4:	3354      	adds	r3, #84	; 0x54
 800c4e6:	78ba      	ldrb	r2, [r7, #2]
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	e008      	b.n	800c4fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c4ec:	78fb      	ldrb	r3, [r7, #3]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	212c      	movs	r1, #44	; 0x2c
 800c4f2:	fb01 f303 	mul.w	r3, r1, r3
 800c4f6:	4413      	add	r3, r2
 800c4f8:	3355      	adds	r3, #85	; 0x55
 800c4fa:	78ba      	ldrb	r2, [r7, #2]
 800c4fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3714      	adds	r7, #20
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7f5 f947 	bl	80017a8 <HAL_Delay>
}
 800c51a:	bf00      	nop
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
	...

0800c524 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c52e:	2300      	movs	r3, #0
 800c530:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c532:	79fb      	ldrb	r3, [r7, #7]
 800c534:	2b03      	cmp	r3, #3
 800c536:	d817      	bhi.n	800c568 <USBH_Get_USB_Status+0x44>
 800c538:	a201      	add	r2, pc, #4	; (adr r2, 800c540 <USBH_Get_USB_Status+0x1c>)
 800c53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53e:	bf00      	nop
 800c540:	0800c551 	.word	0x0800c551
 800c544:	0800c557 	.word	0x0800c557
 800c548:	0800c55d 	.word	0x0800c55d
 800c54c:	0800c563 	.word	0x0800c563
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
    break;
 800c554:	e00b      	b.n	800c56e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c556:	2302      	movs	r3, #2
 800c558:	73fb      	strb	r3, [r7, #15]
    break;
 800c55a:	e008      	b.n	800c56e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c55c:	2301      	movs	r3, #1
 800c55e:	73fb      	strb	r3, [r7, #15]
    break;
 800c560:	e005      	b.n	800c56e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c562:	2302      	movs	r3, #2
 800c564:	73fb      	strb	r3, [r7, #15]
    break;
 800c566:	e002      	b.n	800c56e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c568:	2302      	movs	r3, #2
 800c56a:	73fb      	strb	r3, [r7, #15]
    break;
 800c56c:	bf00      	nop
  }
  return usb_status;
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d102      	bne.n	800c596 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c590:	2301      	movs	r3, #1
 800c592:	73fb      	strb	r3, [r7, #15]
 800c594:	e001      	b.n	800c59a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c596:	2300      	movs	r3, #0
 800c598:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
 800c59c:	461a      	mov	r2, r3
 800c59e:	2110      	movs	r1, #16
 800c5a0:	4803      	ldr	r0, [pc, #12]	; (800c5b0 <MX_DriverVbusHS+0x34>)
 800c5a2:	f7f5 fdd3 	bl	800214c <HAL_GPIO_WritePin>
}
 800c5a6:	bf00      	nop
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	40020800 	.word	0x40020800

0800c5b4 <__errno>:
 800c5b4:	4b01      	ldr	r3, [pc, #4]	; (800c5bc <__errno+0x8>)
 800c5b6:	6818      	ldr	r0, [r3, #0]
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	20000030 	.word	0x20000030

0800c5c0 <__libc_init_array>:
 800c5c0:	b570      	push	{r4, r5, r6, lr}
 800c5c2:	4d0d      	ldr	r5, [pc, #52]	; (800c5f8 <__libc_init_array+0x38>)
 800c5c4:	4c0d      	ldr	r4, [pc, #52]	; (800c5fc <__libc_init_array+0x3c>)
 800c5c6:	1b64      	subs	r4, r4, r5
 800c5c8:	10a4      	asrs	r4, r4, #2
 800c5ca:	2600      	movs	r6, #0
 800c5cc:	42a6      	cmp	r6, r4
 800c5ce:	d109      	bne.n	800c5e4 <__libc_init_array+0x24>
 800c5d0:	4d0b      	ldr	r5, [pc, #44]	; (800c600 <__libc_init_array+0x40>)
 800c5d2:	4c0c      	ldr	r4, [pc, #48]	; (800c604 <__libc_init_array+0x44>)
 800c5d4:	f000 f93c 	bl	800c850 <_init>
 800c5d8:	1b64      	subs	r4, r4, r5
 800c5da:	10a4      	asrs	r4, r4, #2
 800c5dc:	2600      	movs	r6, #0
 800c5de:	42a6      	cmp	r6, r4
 800c5e0:	d105      	bne.n	800c5ee <__libc_init_array+0x2e>
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5e8:	4798      	blx	r3
 800c5ea:	3601      	adds	r6, #1
 800c5ec:	e7ee      	b.n	800c5cc <__libc_init_array+0xc>
 800c5ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5f2:	4798      	blx	r3
 800c5f4:	3601      	adds	r6, #1
 800c5f6:	e7f2      	b.n	800c5de <__libc_init_array+0x1e>
 800c5f8:	0800c93c 	.word	0x0800c93c
 800c5fc:	0800c93c 	.word	0x0800c93c
 800c600:	0800c93c 	.word	0x0800c93c
 800c604:	0800c940 	.word	0x0800c940

0800c608 <malloc>:
 800c608:	4b02      	ldr	r3, [pc, #8]	; (800c614 <malloc+0xc>)
 800c60a:	4601      	mov	r1, r0
 800c60c:	6818      	ldr	r0, [r3, #0]
 800c60e:	f000 b88d 	b.w	800c72c <_malloc_r>
 800c612:	bf00      	nop
 800c614:	20000030 	.word	0x20000030

0800c618 <free>:
 800c618:	4b02      	ldr	r3, [pc, #8]	; (800c624 <free+0xc>)
 800c61a:	4601      	mov	r1, r0
 800c61c:	6818      	ldr	r0, [r3, #0]
 800c61e:	f000 b819 	b.w	800c654 <_free_r>
 800c622:	bf00      	nop
 800c624:	20000030 	.word	0x20000030

0800c628 <memcpy>:
 800c628:	440a      	add	r2, r1
 800c62a:	4291      	cmp	r1, r2
 800c62c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c630:	d100      	bne.n	800c634 <memcpy+0xc>
 800c632:	4770      	bx	lr
 800c634:	b510      	push	{r4, lr}
 800c636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c63e:	4291      	cmp	r1, r2
 800c640:	d1f9      	bne.n	800c636 <memcpy+0xe>
 800c642:	bd10      	pop	{r4, pc}

0800c644 <memset>:
 800c644:	4402      	add	r2, r0
 800c646:	4603      	mov	r3, r0
 800c648:	4293      	cmp	r3, r2
 800c64a:	d100      	bne.n	800c64e <memset+0xa>
 800c64c:	4770      	bx	lr
 800c64e:	f803 1b01 	strb.w	r1, [r3], #1
 800c652:	e7f9      	b.n	800c648 <memset+0x4>

0800c654 <_free_r>:
 800c654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c656:	2900      	cmp	r1, #0
 800c658:	d044      	beq.n	800c6e4 <_free_r+0x90>
 800c65a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c65e:	9001      	str	r0, [sp, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	f1a1 0404 	sub.w	r4, r1, #4
 800c666:	bfb8      	it	lt
 800c668:	18e4      	addlt	r4, r4, r3
 800c66a:	f000 f8e3 	bl	800c834 <__malloc_lock>
 800c66e:	4a1e      	ldr	r2, [pc, #120]	; (800c6e8 <_free_r+0x94>)
 800c670:	9801      	ldr	r0, [sp, #4]
 800c672:	6813      	ldr	r3, [r2, #0]
 800c674:	b933      	cbnz	r3, 800c684 <_free_r+0x30>
 800c676:	6063      	str	r3, [r4, #4]
 800c678:	6014      	str	r4, [r2, #0]
 800c67a:	b003      	add	sp, #12
 800c67c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c680:	f000 b8de 	b.w	800c840 <__malloc_unlock>
 800c684:	42a3      	cmp	r3, r4
 800c686:	d908      	bls.n	800c69a <_free_r+0x46>
 800c688:	6825      	ldr	r5, [r4, #0]
 800c68a:	1961      	adds	r1, r4, r5
 800c68c:	428b      	cmp	r3, r1
 800c68e:	bf01      	itttt	eq
 800c690:	6819      	ldreq	r1, [r3, #0]
 800c692:	685b      	ldreq	r3, [r3, #4]
 800c694:	1949      	addeq	r1, r1, r5
 800c696:	6021      	streq	r1, [r4, #0]
 800c698:	e7ed      	b.n	800c676 <_free_r+0x22>
 800c69a:	461a      	mov	r2, r3
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	b10b      	cbz	r3, 800c6a4 <_free_r+0x50>
 800c6a0:	42a3      	cmp	r3, r4
 800c6a2:	d9fa      	bls.n	800c69a <_free_r+0x46>
 800c6a4:	6811      	ldr	r1, [r2, #0]
 800c6a6:	1855      	adds	r5, r2, r1
 800c6a8:	42a5      	cmp	r5, r4
 800c6aa:	d10b      	bne.n	800c6c4 <_free_r+0x70>
 800c6ac:	6824      	ldr	r4, [r4, #0]
 800c6ae:	4421      	add	r1, r4
 800c6b0:	1854      	adds	r4, r2, r1
 800c6b2:	42a3      	cmp	r3, r4
 800c6b4:	6011      	str	r1, [r2, #0]
 800c6b6:	d1e0      	bne.n	800c67a <_free_r+0x26>
 800c6b8:	681c      	ldr	r4, [r3, #0]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	6053      	str	r3, [r2, #4]
 800c6be:	4421      	add	r1, r4
 800c6c0:	6011      	str	r1, [r2, #0]
 800c6c2:	e7da      	b.n	800c67a <_free_r+0x26>
 800c6c4:	d902      	bls.n	800c6cc <_free_r+0x78>
 800c6c6:	230c      	movs	r3, #12
 800c6c8:	6003      	str	r3, [r0, #0]
 800c6ca:	e7d6      	b.n	800c67a <_free_r+0x26>
 800c6cc:	6825      	ldr	r5, [r4, #0]
 800c6ce:	1961      	adds	r1, r4, r5
 800c6d0:	428b      	cmp	r3, r1
 800c6d2:	bf04      	itt	eq
 800c6d4:	6819      	ldreq	r1, [r3, #0]
 800c6d6:	685b      	ldreq	r3, [r3, #4]
 800c6d8:	6063      	str	r3, [r4, #4]
 800c6da:	bf04      	itt	eq
 800c6dc:	1949      	addeq	r1, r1, r5
 800c6de:	6021      	streq	r1, [r4, #0]
 800c6e0:	6054      	str	r4, [r2, #4]
 800c6e2:	e7ca      	b.n	800c67a <_free_r+0x26>
 800c6e4:	b003      	add	sp, #12
 800c6e6:	bd30      	pop	{r4, r5, pc}
 800c6e8:	20008e00 	.word	0x20008e00

0800c6ec <sbrk_aligned>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	4e0e      	ldr	r6, [pc, #56]	; (800c728 <sbrk_aligned+0x3c>)
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	6831      	ldr	r1, [r6, #0]
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	b911      	cbnz	r1, 800c6fe <sbrk_aligned+0x12>
 800c6f8:	f000 f88c 	bl	800c814 <_sbrk_r>
 800c6fc:	6030      	str	r0, [r6, #0]
 800c6fe:	4621      	mov	r1, r4
 800c700:	4628      	mov	r0, r5
 800c702:	f000 f887 	bl	800c814 <_sbrk_r>
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	d00a      	beq.n	800c720 <sbrk_aligned+0x34>
 800c70a:	1cc4      	adds	r4, r0, #3
 800c70c:	f024 0403 	bic.w	r4, r4, #3
 800c710:	42a0      	cmp	r0, r4
 800c712:	d007      	beq.n	800c724 <sbrk_aligned+0x38>
 800c714:	1a21      	subs	r1, r4, r0
 800c716:	4628      	mov	r0, r5
 800c718:	f000 f87c 	bl	800c814 <_sbrk_r>
 800c71c:	3001      	adds	r0, #1
 800c71e:	d101      	bne.n	800c724 <sbrk_aligned+0x38>
 800c720:	f04f 34ff 	mov.w	r4, #4294967295
 800c724:	4620      	mov	r0, r4
 800c726:	bd70      	pop	{r4, r5, r6, pc}
 800c728:	20008e04 	.word	0x20008e04

0800c72c <_malloc_r>:
 800c72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c730:	1ccd      	adds	r5, r1, #3
 800c732:	f025 0503 	bic.w	r5, r5, #3
 800c736:	3508      	adds	r5, #8
 800c738:	2d0c      	cmp	r5, #12
 800c73a:	bf38      	it	cc
 800c73c:	250c      	movcc	r5, #12
 800c73e:	2d00      	cmp	r5, #0
 800c740:	4607      	mov	r7, r0
 800c742:	db01      	blt.n	800c748 <_malloc_r+0x1c>
 800c744:	42a9      	cmp	r1, r5
 800c746:	d905      	bls.n	800c754 <_malloc_r+0x28>
 800c748:	230c      	movs	r3, #12
 800c74a:	603b      	str	r3, [r7, #0]
 800c74c:	2600      	movs	r6, #0
 800c74e:	4630      	mov	r0, r6
 800c750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c754:	4e2e      	ldr	r6, [pc, #184]	; (800c810 <_malloc_r+0xe4>)
 800c756:	f000 f86d 	bl	800c834 <__malloc_lock>
 800c75a:	6833      	ldr	r3, [r6, #0]
 800c75c:	461c      	mov	r4, r3
 800c75e:	bb34      	cbnz	r4, 800c7ae <_malloc_r+0x82>
 800c760:	4629      	mov	r1, r5
 800c762:	4638      	mov	r0, r7
 800c764:	f7ff ffc2 	bl	800c6ec <sbrk_aligned>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	4604      	mov	r4, r0
 800c76c:	d14d      	bne.n	800c80a <_malloc_r+0xde>
 800c76e:	6834      	ldr	r4, [r6, #0]
 800c770:	4626      	mov	r6, r4
 800c772:	2e00      	cmp	r6, #0
 800c774:	d140      	bne.n	800c7f8 <_malloc_r+0xcc>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	4631      	mov	r1, r6
 800c77a:	4638      	mov	r0, r7
 800c77c:	eb04 0803 	add.w	r8, r4, r3
 800c780:	f000 f848 	bl	800c814 <_sbrk_r>
 800c784:	4580      	cmp	r8, r0
 800c786:	d13a      	bne.n	800c7fe <_malloc_r+0xd2>
 800c788:	6821      	ldr	r1, [r4, #0]
 800c78a:	3503      	adds	r5, #3
 800c78c:	1a6d      	subs	r5, r5, r1
 800c78e:	f025 0503 	bic.w	r5, r5, #3
 800c792:	3508      	adds	r5, #8
 800c794:	2d0c      	cmp	r5, #12
 800c796:	bf38      	it	cc
 800c798:	250c      	movcc	r5, #12
 800c79a:	4629      	mov	r1, r5
 800c79c:	4638      	mov	r0, r7
 800c79e:	f7ff ffa5 	bl	800c6ec <sbrk_aligned>
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	d02b      	beq.n	800c7fe <_malloc_r+0xd2>
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	442b      	add	r3, r5
 800c7aa:	6023      	str	r3, [r4, #0]
 800c7ac:	e00e      	b.n	800c7cc <_malloc_r+0xa0>
 800c7ae:	6822      	ldr	r2, [r4, #0]
 800c7b0:	1b52      	subs	r2, r2, r5
 800c7b2:	d41e      	bmi.n	800c7f2 <_malloc_r+0xc6>
 800c7b4:	2a0b      	cmp	r2, #11
 800c7b6:	d916      	bls.n	800c7e6 <_malloc_r+0xba>
 800c7b8:	1961      	adds	r1, r4, r5
 800c7ba:	42a3      	cmp	r3, r4
 800c7bc:	6025      	str	r5, [r4, #0]
 800c7be:	bf18      	it	ne
 800c7c0:	6059      	strne	r1, [r3, #4]
 800c7c2:	6863      	ldr	r3, [r4, #4]
 800c7c4:	bf08      	it	eq
 800c7c6:	6031      	streq	r1, [r6, #0]
 800c7c8:	5162      	str	r2, [r4, r5]
 800c7ca:	604b      	str	r3, [r1, #4]
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f104 060b 	add.w	r6, r4, #11
 800c7d2:	f000 f835 	bl	800c840 <__malloc_unlock>
 800c7d6:	f026 0607 	bic.w	r6, r6, #7
 800c7da:	1d23      	adds	r3, r4, #4
 800c7dc:	1af2      	subs	r2, r6, r3
 800c7de:	d0b6      	beq.n	800c74e <_malloc_r+0x22>
 800c7e0:	1b9b      	subs	r3, r3, r6
 800c7e2:	50a3      	str	r3, [r4, r2]
 800c7e4:	e7b3      	b.n	800c74e <_malloc_r+0x22>
 800c7e6:	6862      	ldr	r2, [r4, #4]
 800c7e8:	42a3      	cmp	r3, r4
 800c7ea:	bf0c      	ite	eq
 800c7ec:	6032      	streq	r2, [r6, #0]
 800c7ee:	605a      	strne	r2, [r3, #4]
 800c7f0:	e7ec      	b.n	800c7cc <_malloc_r+0xa0>
 800c7f2:	4623      	mov	r3, r4
 800c7f4:	6864      	ldr	r4, [r4, #4]
 800c7f6:	e7b2      	b.n	800c75e <_malloc_r+0x32>
 800c7f8:	4634      	mov	r4, r6
 800c7fa:	6876      	ldr	r6, [r6, #4]
 800c7fc:	e7b9      	b.n	800c772 <_malloc_r+0x46>
 800c7fe:	230c      	movs	r3, #12
 800c800:	603b      	str	r3, [r7, #0]
 800c802:	4638      	mov	r0, r7
 800c804:	f000 f81c 	bl	800c840 <__malloc_unlock>
 800c808:	e7a1      	b.n	800c74e <_malloc_r+0x22>
 800c80a:	6025      	str	r5, [r4, #0]
 800c80c:	e7de      	b.n	800c7cc <_malloc_r+0xa0>
 800c80e:	bf00      	nop
 800c810:	20008e00 	.word	0x20008e00

0800c814 <_sbrk_r>:
 800c814:	b538      	push	{r3, r4, r5, lr}
 800c816:	4d06      	ldr	r5, [pc, #24]	; (800c830 <_sbrk_r+0x1c>)
 800c818:	2300      	movs	r3, #0
 800c81a:	4604      	mov	r4, r0
 800c81c:	4608      	mov	r0, r1
 800c81e:	602b      	str	r3, [r5, #0]
 800c820:	f7f4 ff0e 	bl	8001640 <_sbrk>
 800c824:	1c43      	adds	r3, r0, #1
 800c826:	d102      	bne.n	800c82e <_sbrk_r+0x1a>
 800c828:	682b      	ldr	r3, [r5, #0]
 800c82a:	b103      	cbz	r3, 800c82e <_sbrk_r+0x1a>
 800c82c:	6023      	str	r3, [r4, #0]
 800c82e:	bd38      	pop	{r3, r4, r5, pc}
 800c830:	20008e08 	.word	0x20008e08

0800c834 <__malloc_lock>:
 800c834:	4801      	ldr	r0, [pc, #4]	; (800c83c <__malloc_lock+0x8>)
 800c836:	f000 b809 	b.w	800c84c <__retarget_lock_acquire_recursive>
 800c83a:	bf00      	nop
 800c83c:	20008e0c 	.word	0x20008e0c

0800c840 <__malloc_unlock>:
 800c840:	4801      	ldr	r0, [pc, #4]	; (800c848 <__malloc_unlock+0x8>)
 800c842:	f000 b804 	b.w	800c84e <__retarget_lock_release_recursive>
 800c846:	bf00      	nop
 800c848:	20008e0c 	.word	0x20008e0c

0800c84c <__retarget_lock_acquire_recursive>:
 800c84c:	4770      	bx	lr

0800c84e <__retarget_lock_release_recursive>:
 800c84e:	4770      	bx	lr

0800c850 <_init>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	bf00      	nop
 800c854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c856:	bc08      	pop	{r3}
 800c858:	469e      	mov	lr, r3
 800c85a:	4770      	bx	lr

0800c85c <_fini>:
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85e:	bf00      	nop
 800c860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c862:	bc08      	pop	{r3}
 800c864:	469e      	mov	lr, r3
 800c866:	4770      	bx	lr
