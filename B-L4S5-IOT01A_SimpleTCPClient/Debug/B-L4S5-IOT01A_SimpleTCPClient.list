
B-L4S5-IOT01A_SimpleTCPClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae78  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  0800b038  0800b038  0001b038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7d4  0800b7d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7d4  0800b7d4  0001b7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7dc  0800b7dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7dc  0800b7dc  0001b7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7e0  0800b7e0  0001b7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b7e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f00  20000070  0800b854  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f70  0800b854  00020f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000207b7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a7c  00000000  00000000  00040857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  000442d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  00045e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f6ed  00000000  00000000  00047810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fae7  00000000  00000000  00076efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001205e4  00000000  00000000  000969e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6fc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081a8  00000000  00000000  001b7018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b020 	.word	0x0800b020

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	0800b020 	.word	0x0800b020

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80005bc:	4b57      	ldr	r3, [pc, #348]	; (800071c <SPI_WIFI_MspInit+0x168>)
 80005be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c0:	4a56      	ldr	r2, [pc, #344]	; (800071c <SPI_WIFI_MspInit+0x168>)
 80005c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c6:	6593      	str	r3, [r2, #88]	; 0x58
 80005c8:	4b54      	ldr	r3, [pc, #336]	; (800071c <SPI_WIFI_MspInit+0x168>)
 80005ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005d0:	61bb      	str	r3, [r7, #24]
 80005d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	4b51      	ldr	r3, [pc, #324]	; (800071c <SPI_WIFI_MspInit+0x168>)
 80005d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d8:	4a50      	ldr	r2, [pc, #320]	; (800071c <SPI_WIFI_MspInit+0x168>)
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e0:	4b4e      	ldr	r3, [pc, #312]	; (800071c <SPI_WIFI_MspInit+0x168>)
 80005e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	4b4b      	ldr	r3, [pc, #300]	; (800071c <SPI_WIFI_MspInit+0x168>)
 80005ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f0:	4a4a      	ldr	r2, [pc, #296]	; (800071c <SPI_WIFI_MspInit+0x168>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f8:	4b48      	ldr	r3, [pc, #288]	; (800071c <SPI_WIFI_MspInit+0x168>)
 80005fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000604:	4b45      	ldr	r3, [pc, #276]	; (800071c <SPI_WIFI_MspInit+0x168>)
 8000606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000608:	4a44      	ldr	r2, [pc, #272]	; (800071c <SPI_WIFI_MspInit+0x168>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000610:	4b42      	ldr	r3, [pc, #264]	; (800071c <SPI_WIFI_MspInit+0x168>)
 8000612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000614:	f003 0310 	and.w	r3, r3, #16
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	483f      	ldr	r0, [pc, #252]	; (8000720 <SPI_WIFI_MspInit+0x16c>)
 8000624:	f004 fa94 	bl	8004b50 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8000628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	4619      	mov	r1, r3
 8000640:	4837      	ldr	r0, [pc, #220]	; (8000720 <SPI_WIFI_MspInit+0x16c>)
 8000642:	f003 ffe9 	bl	8004618 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8000646:	2302      	movs	r3, #2
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800064a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	4831      	ldr	r0, [pc, #196]	; (8000724 <SPI_WIFI_MspInit+0x170>)
 8000660:	f003 ffda 	bl	8004618 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8000664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4828      	ldr	r0, [pc, #160]	; (8000724 <SPI_WIFI_MspInit+0x170>)
 8000682:	f003 ffc9 	bl	8004618 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8000686:	2201      	movs	r2, #1
 8000688:	2101      	movs	r1, #1
 800068a:	4826      	ldr	r0, [pc, #152]	; (8000724 <SPI_WIFI_MspInit+0x170>)
 800068c:	f004 fa60 	bl	8004b50 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8000690:	2301      	movs	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	481f      	ldr	r0, [pc, #124]	; (8000724 <SPI_WIFI_MspInit+0x170>)
 80006a8:	f003 ffb6 	bl	8004618 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80006ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80006ba:	2301      	movs	r3, #1
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80006be:	2306      	movs	r3, #6
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <SPI_WIFI_MspInit+0x174>)
 80006ca:	f003 ffa5 	bl	8004618 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80006dc:	2301      	movs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80006e0:	2306      	movs	r3, #6
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <SPI_WIFI_MspInit+0x174>)
 80006ec:	f003 ff94 	bl	8004618 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80006f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80006fe:	2301      	movs	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8000702:	2306      	movs	r3, #6
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4806      	ldr	r0, [pc, #24]	; (8000728 <SPI_WIFI_MspInit+0x174>)
 800070e:	f003 ff83 	bl	8004618 <HAL_GPIO_Init>
}
 8000712:	bf00      	nop
 8000714:	3730      	adds	r7, #48	; 0x30
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	48000400 	.word	0x48000400
 8000724:	48001000 	.word	0x48001000
 8000728:	48000800 	.word	0x48000800

0800072c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d145      	bne.n	80007cc <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 8000742:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <SPI_WIFI_Init+0xb8>)
 8000744:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8000746:	4826      	ldr	r0, [pc, #152]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 8000748:	f7ff ff34 	bl	80005b4 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 800074e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000752:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 800075c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000760:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 8000778:	2210      	movs	r2, #16
 800077a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <SPI_WIFI_Init+0xb4>)
 8000796:	f006 fd3d 	bl	8007214 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	e018      	b.n	80007d8 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2007      	movs	r0, #7
 80007ac:	f003 fd91 	bl	80042d2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80007b0:	2007      	movs	r0, #7
 80007b2:	f003 fdaa 	bl	800430a <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2033      	movs	r0, #51	; 0x33
 80007bc:	f003 fd89 	bl	80042d2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80007c0:	2033      	movs	r0, #51	; 0x33
 80007c2:	f003 fda2 	bl	800430a <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80007c6:	200a      	movs	r0, #10
 80007c8:	f000 f9fe 	bl	8000bc8 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 80007cc:	f000 f80c 	bl	80007e8 <SPI_WIFI_ResetModule>
 80007d0:	4603      	mov	r3, r0
 80007d2:	73fb      	strb	r3, [r7, #15]

  return rc;
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	40003c00 	.word	0x40003c00

080007e8 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80007ee:	f002 fd7d 	bl	80032ec <HAL_GetTick>
 80007f2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fe:	4830      	ldr	r0, [pc, #192]	; (80008c0 <SPI_WIFI_ResetModule+0xd8>)
 8000800:	f004 f9a6 	bl	8004b50 <HAL_GPIO_WritePin>
 8000804:	200a      	movs	r0, #10
 8000806:	f002 fd7d 	bl	8003304 <HAL_Delay>
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	482b      	ldr	r0, [pc, #172]	; (80008c0 <SPI_WIFI_ResetModule+0xd8>)
 8000812:	f004 f99d 	bl	8004b50 <HAL_GPIO_WritePin>
 8000816:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081a:	f002 fd73 	bl	8003304 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800081e:	2200      	movs	r2, #0
 8000820:	2101      	movs	r1, #1
 8000822:	4827      	ldr	r0, [pc, #156]	; (80008c0 <SPI_WIFI_ResetModule+0xd8>)
 8000824:	f004 f994 	bl	8004b50 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8000828:	200f      	movs	r0, #15
 800082a:	f000 f9cd 	bl	8000bc8 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800082e:	e020      	b.n	8000872 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	463a      	mov	r2, r7
 8000834:	18d1      	adds	r1, r2, r3
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	2201      	movs	r2, #1
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <SPI_WIFI_ResetModule+0xdc>)
 800083e:	f006 fdb4 	bl	80073aa <HAL_SPI_Receive>
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	3302      	adds	r3, #2
 800084a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800084c:	f002 fd4e 	bl	80032ec <HAL_GetTick>
 8000850:	4602      	mov	r2, r0
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800085a:	d202      	bcs.n	8000862 <SPI_WIFI_ResetModule+0x7a>
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d007      	beq.n	8000872 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8000862:	2201      	movs	r2, #1
 8000864:	2101      	movs	r1, #1
 8000866:	4816      	ldr	r0, [pc, #88]	; (80008c0 <SPI_WIFI_ResetModule+0xd8>)
 8000868:	f004 f972 	bl	8004b50 <HAL_GPIO_WritePin>
      return -1;
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	e021      	b.n	80008b6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8000872:	2102      	movs	r1, #2
 8000874:	4812      	ldr	r0, [pc, #72]	; (80008c0 <SPI_WIFI_ResetModule+0xd8>)
 8000876:	f004 f953 	bl	8004b20 <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	d0d7      	beq.n	8000830 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	480e      	ldr	r0, [pc, #56]	; (80008c0 <SPI_WIFI_ResetModule+0xd8>)
 8000886:	f004 f963 	bl	8004b50 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800088a:	783b      	ldrb	r3, [r7, #0]
 800088c:	2b15      	cmp	r3, #21
 800088e:	d10e      	bne.n	80008ae <SPI_WIFI_ResetModule+0xc6>
 8000890:	787b      	ldrb	r3, [r7, #1]
 8000892:	2b15      	cmp	r3, #21
 8000894:	d10b      	bne.n	80008ae <SPI_WIFI_ResetModule+0xc6>
 8000896:	78bb      	ldrb	r3, [r7, #2]
 8000898:	2b0d      	cmp	r3, #13
 800089a:	d108      	bne.n	80008ae <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800089c:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800089e:	2b0a      	cmp	r3, #10
 80008a0:	d105      	bne.n	80008ae <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80008a2:	793b      	ldrb	r3, [r7, #4]
 80008a4:	2b3e      	cmp	r3, #62	; 0x3e
 80008a6:	d102      	bne.n	80008ae <SPI_WIFI_ResetModule+0xc6>
 80008a8:	797b      	ldrb	r3, [r7, #5]
 80008aa:	2b20      	cmp	r3, #32
 80008ac:	d002      	beq.n	80008b4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	e000      	b.n	80008b6 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	48001000 	.word	0x48001000
 80008c4:	2000008c 	.word	0x2000008c

080008c8 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <SPI_WIFI_DeInit+0x10>)
 80008ce:	f006 fd44 	bl	800735a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000008c 	.word	0x2000008c

080008dc <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80008e4:	f002 fd02 	bl	80032ec <HAL_GetTick>
 80008e8:	4603      	mov	r3, r0
 80008ea:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 80008ec:	e00a      	b.n	8000904 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80008ee:	f002 fcfd 	bl	80032ec <HAL_GetTick>
 80008f2:	4602      	mov	r2, r0
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	1ad2      	subs	r2, r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d902      	bls.n	8000904 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e007      	b.n	8000914 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8000904:	2102      	movs	r1, #2
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <wait_cmddata_rdy_high+0x40>)
 8000908:	f004 f90a 	bl	8004b20 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	2b01      	cmp	r3, #1
 8000910:	d1ed      	bne.n	80008ee <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	48001000 	.word	0x48001000

08000920 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8000928:	f002 fce0 	bl	80032ec <HAL_GetTick>
 800092c:	4603      	mov	r3, r0
 800092e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8000930:	e00a      	b.n	8000948 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8000932:	f002 fcdb 	bl	80032ec <HAL_GetTick>
 8000936:	4602      	mov	r2, r0
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	1ad2      	subs	r2, r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	d902      	bls.n	8000948 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e004      	b.n	8000952 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <wait_cmddata_rdy_rising_event+0x3c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d0f0      	beq.n	8000932 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8000950:	2300      	movs	r3, #0
#endif
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000f8 	.word	0x200000f8

08000960 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8000968:	f002 fcc0 	bl	80032ec <HAL_GetTick>
 800096c:	4603      	mov	r3, r0
 800096e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8000970:	e00a      	b.n	8000988 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8000972:	f002 fcbb 	bl	80032ec <HAL_GetTick>
 8000976:	4602      	mov	r2, r0
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	1ad2      	subs	r2, r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	429a      	cmp	r2, r3
 8000980:	d902      	bls.n	8000988 <wait_spi_rx_event+0x28>
    {
      return -1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	e004      	b.n	8000992 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <wait_spi_rx_event+0x3c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d0f0      	beq.n	8000972 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8000990:	2300      	movs	r3, #0
#endif
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000f0 	.word	0x200000f0

080009a0 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80009a8:	f002 fca0 	bl	80032ec <HAL_GetTick>
 80009ac:	4603      	mov	r3, r0
 80009ae:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 80009b0:	e00a      	b.n	80009c8 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80009b2:	f002 fc9b 	bl	80032ec <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	1ad2      	subs	r2, r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d902      	bls.n	80009c8 <wait_spi_tx_event+0x28>
    {
      return -1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e004      	b.n	80009d2 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <wait_spi_tx_event+0x3c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d0f0      	beq.n	80009b2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80009d0:	2300      	movs	r3, #0
#endif
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000f4 	.word	0x200000f4

080009e0 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 80009f2:	2201      	movs	r2, #1
 80009f4:	2101      	movs	r1, #1
 80009f6:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <SPI_WIFI_ReceiveData+0xe8>)
 80009f8:	f004 f8aa 	bl	8004b50 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f8e3 	bl	8000bc8 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff8b 	bl	8000920 <wait_cmddata_rdy_rising_event>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	da02      	bge.n	8000a16 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8000a10:	f06f 0302 	mvn.w	r3, #2
 8000a14:	e054      	b.n	8000ac0 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8000a16:	2200      	movs	r2, #0
 8000a18:	2101      	movs	r1, #1
 8000a1a:	482b      	ldr	r0, [pc, #172]	; (8000ac8 <SPI_WIFI_ReceiveData+0xe8>)
 8000a1c:	f004 f898 	bl	8004b50 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8000a20:	200f      	movs	r0, #15
 8000a22:	f000 f8d1 	bl	8000bc8 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8000a26:	e03d      	b.n	8000aa4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8000a28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000a2c:	897b      	ldrh	r3, [r7, #10]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	db02      	blt.n	8000a38 <SPI_WIFI_ReceiveData+0x58>
 8000a32:	897b      	ldrh	r3, [r7, #10]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d13c      	bne.n	8000ab2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <SPI_WIFI_ReceiveData+0xec>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	4822      	ldr	r0, [pc, #136]	; (8000ad0 <SPI_WIFI_ReceiveData+0xf0>)
 8000a48:	f007 f880 	bl	8007b4c <HAL_SPI_Receive_IT>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d007      	beq.n	8000a62 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8000a52:	2201      	movs	r2, #1
 8000a54:	2101      	movs	r1, #1
 8000a56:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <SPI_WIFI_ReceiveData+0xe8>)
 8000a58:	f004 f87a 	bl	8004b50 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	e02e      	b.n	8000ac0 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff7b 	bl	8000960 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8000a6a:	7d3a      	ldrb	r2, [r7, #20]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	7d7a      	ldrb	r2, [r7, #21]
 8000a76:	701a      	strb	r2, [r3, #0]
      length += 2;
 8000a78:	8afb      	ldrh	r3, [r7, #22]
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3302      	adds	r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8000a86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a8a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000a8e:	db09      	blt.n	8000aa4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8000a90:	2201      	movs	r2, #1
 8000a92:	2101      	movs	r1, #1
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <SPI_WIFI_ReceiveData+0xe8>)
 8000a96:	f004 f85b 	bl	8004b50 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8000a9a:	f7ff fea5 	bl	80007e8 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8000a9e:	f06f 0303 	mvn.w	r3, #3
 8000aa2:	e00d      	b.n	8000ac0 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <SPI_WIFI_ReceiveData+0xe8>)
 8000aa8:	f004 f83a 	bl	8004b20 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d0ba      	beq.n	8000a28 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <SPI_WIFI_ReceiveData+0xe8>)
 8000ab8:	f004 f84a 	bl	8004b50 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8000abc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	48001000 	.word	0x48001000
 8000acc:	200000f0 	.word	0x200000f0
 8000ad0:	2000008c 	.word	0x2000008c

08000ad4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	460b      	mov	r3, r1
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout)<0)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fef9 	bl	80008dc <wait_cmddata_rdy_high>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	da02      	bge.n	8000af6 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
 8000af4:	e04f      	b.n	8000b96 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <SPI_WIFI_SendData+0xcc>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	4828      	ldr	r0, [pc, #160]	; (8000ba4 <SPI_WIFI_SendData+0xd0>)
 8000b02:	f004 f825 	bl	8004b50 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8000b06:	200f      	movs	r0, #15
 8000b08:	f000 f85e 	bl	8000bc8 <SPI_WIFI_DelayUs>
  if (len > 1)
 8000b0c:	897b      	ldrh	r3, [r7, #10]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d919      	bls.n	8000b46 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <SPI_WIFI_SendData+0xd4>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8000b18:	897b      	ldrh	r3, [r7, #10]
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68f9      	ldr	r1, [r7, #12]
 8000b22:	4822      	ldr	r0, [pc, #136]	; (8000bac <SPI_WIFI_SendData+0xd8>)
 8000b24:	f006 ff84 	bl	8007a30 <HAL_SPI_Transmit_IT>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2101      	movs	r1, #1
 8000b32:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <SPI_WIFI_SendData+0xd0>)
 8000b34:	f004 f80c 	bl	8004b50 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	e02b      	b.n	8000b96 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff2d 	bl	80009a0 <wait_spi_tx_event>
  }

  if ( len & 1)
 8000b46:	897b      	ldrh	r3, [r7, #10]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d020      	beq.n	8000b92 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8000b50:	897b      	ldrh	r3, [r7, #10]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <SPI_WIFI_SendData+0xd4>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <SPI_WIFI_SendData+0xd8>)
 8000b70:	f006 ff5e 	bl	8007a30 <HAL_SPI_Transmit_IT>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d007      	beq.n	8000b8a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <SPI_WIFI_SendData+0xd0>)
 8000b80:	f003 ffe6 	bl	8004b50 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	e005      	b.n	8000b96 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff07 	bl	80009a0 <wait_spi_tx_event>
    
  }
  return len;
 8000b92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000f8 	.word	0x200000f8
 8000ba4:	48001000 	.word	0x48001000
 8000ba8:	200000f4 	.word	0x200000f4
 8000bac:	2000008c 	.word	0x2000008c

08000bb0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f002 fba3 	bl	8003304 <HAL_Delay>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <SPI_WIFI_DelayUs+0x94>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d122      	bne.n	8000c26 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <SPI_WIFI_DelayUs+0x98>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <SPI_WIFI_DelayUs+0x9c>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	099b      	lsrs	r3, r3, #6
 8000bec:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8000bf6:	f002 fb79 	bl	80032ec <HAL_GetTick>
 8000bfa:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8000bfc:	e002      	b.n	8000c04 <SPI_WIFI_DelayUs+0x3c>
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f9      	bne.n	8000bfe <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8000c0a:	f002 fb6f 	bl	80032ec <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <SPI_WIFI_DelayUs+0x94>)
 8000c16:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <SPI_WIFI_DelayUs+0x94>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <SPI_WIFI_DelayUs+0x5e>
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <SPI_WIFI_DelayUs+0x94>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <SPI_WIFI_DelayUs+0x98>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <SPI_WIFI_DelayUs+0xa0>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	0c9a      	lsrs	r2, r3, #18
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <SPI_WIFI_DelayUs+0x94>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8000c46:	e002      	b.n	8000c4e <SPI_WIFI_DelayUs+0x86>
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f9      	bne.n	8000c48 <SPI_WIFI_DelayUs+0x80>
  return;
 8000c54:	bf00      	nop
}
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200000fc 	.word	0x200000fc
 8000c60:	20000000 	.word	0x20000000
 8000c64:	10624dd3 	.word	0x10624dd3
 8000c68:	431bde83 	.word	0x431bde83

08000c6c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_SPI_RxCpltCallback+0x24>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <HAL_SPI_RxCpltCallback+0x24>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200000f0 	.word	0x200000f0

08000c94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_SPI_TxCpltCallback+0x24>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_SPI_TxCpltCallback+0x24>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200000f4 	.word	0x200000f4

08000cbc <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SPI_WIFI_ISR+0x1c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d102      	bne.n	8000cce <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <SPI_WIFI_ISR+0x1c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
   }
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	200000f8 	.word	0x200000f8

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b5b0      	push	{r4, r5, r7, lr}
 8000cde:	b090      	sub	sp, #64	; 0x40
 8000ce0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	char pcRouterSSID[] = "Your-Router-SSID";
 8000ce2:	4b89      	ldr	r3, [pc, #548]	; (8000f08 <main+0x22c>)
 8000ce4:	f107 041c 	add.w	r4, r7, #28
 8000ce8:	461d      	mov	r5, r3
 8000cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cee:	682b      	ldr	r3, [r5, #0]
 8000cf0:	7023      	strb	r3, [r4, #0]
	char pcRouterPWR[] = "Your-Router-Password";
 8000cf2:	4b86      	ldr	r3, [pc, #536]	; (8000f0c <main+0x230>)
 8000cf4:	1d3c      	adds	r4, r7, #4
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d00:	6020      	str	r0, [r4, #0]
 8000d02:	3404      	adds	r4, #4
 8000d04:	7021      	strb	r1, [r4, #0]
	WIFI_Ecn_t	enRoutreEncryptiontype = WIFI_ECN_WPA2_PSK; // set your Router encryption
 8000d06:	2303      	movs	r3, #3
 8000d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	// change to your IP router
	pu8RemoteIpv4[0] = 192;
 8000d0c:	4b80      	ldr	r3, [pc, #512]	; (8000f10 <main+0x234>)
 8000d0e:	22c0      	movs	r2, #192	; 0xc0
 8000d10:	701a      	strb	r2, [r3, #0]
	pu8RemoteIpv4[1] = 168;
 8000d12:	4b7f      	ldr	r3, [pc, #508]	; (8000f10 <main+0x234>)
 8000d14:	22a8      	movs	r2, #168	; 0xa8
 8000d16:	705a      	strb	r2, [r3, #1]
	pu8RemoteIpv4[2] = 1;
 8000d18:	4b7d      	ldr	r3, [pc, #500]	; (8000f10 <main+0x234>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	709a      	strb	r2, [r3, #2]
	pu8RemoteIpv4[3] = 100;
 8000d1e:	4b7c      	ldr	r3, [pc, #496]	; (8000f10 <main+0x234>)
 8000d20:	2264      	movs	r2, #100	; 0x64
 8000d22:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f002 fa7a 	bl	800321c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d28:	f000 f930 	bl	8000f8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d2c:	f000 f990 	bl	8001050 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d30:	f000 fcc2 	bl	80016b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d34:	f000 f9c0 	bl	80010b8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000d38:	f000 fa22 	bl	8001180 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000d3c:	f000 fa58 	bl	80011f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d40:	f000 fa96 	bl	8001270 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000d44:	f000 fad4 	bl	80012f0 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000d48:	f000 fb3e 	bl	80013c8 <MX_SPI1_Init>
  MX_UART4_Init();
 8000d4c:	f000 fb7a 	bl	8001444 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000d50:	f000 fbc4 	bl	80014dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d54:	f000 fc0e 	bl	8001574 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d58:	f000 fc5a 	bl	8001610 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000d5c:	f000 fca4 	bl	80016a8 <MX_USB_OTG_FS_USB_Init>
  MX_RNG_Init();
 8000d60:	f000 fb1c 	bl	800139c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  // Init Wifi module
  printf("***  Init WIFI  ***\n");
 8000d64:	486b      	ldr	r0, [pc, #428]	; (8000f14 <main+0x238>)
 8000d66:	f008 ff05 	bl	8009b74 <puts>
  if(WIFI_Init() == WIFI_STATUS_OK)
 8000d6a:	f008 fcf3 	bl	8009754 <WIFI_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f040 80ab 	bne.w	8000ecc <main+0x1f0>
  {
	  printf("Init WIFI: Success\n");
 8000d76:	4868      	ldr	r0, [pc, #416]	; (8000f18 <main+0x23c>)
 8000d78:	f008 fefc 	bl	8009b74 <puts>
	  printf("************************ WiFi Module Infos ************************\n");
 8000d7c:	4867      	ldr	r0, [pc, #412]	; (8000f1c <main+0x240>)
 8000d7e:	f008 fef9 	bl	8009b74 <puts>
	  // get module name
	  if(WIFI_GetModuleName(pcWifiModuleName) == WIFI_STATUS_OK)
 8000d82:	4867      	ldr	r0, [pc, #412]	; (8000f20 <main+0x244>)
 8000d84:	f008 fe0c 	bl	80099a0 <WIFI_GetModuleName>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d104      	bne.n	8000d98 <main+0xbc>
	  {
		  printf("Wifi Module Name: %s\n",pcWifiModuleName);
 8000d8e:	4964      	ldr	r1, [pc, #400]	; (8000f20 <main+0x244>)
 8000d90:	4864      	ldr	r0, [pc, #400]	; (8000f24 <main+0x248>)
 8000d92:	f008 fe69 	bl	8009a68 <iprintf>
 8000d96:	e002      	b.n	8000d9e <main+0xc2>
	  }
	  else
	  {
		  printf("couldn't get Wifi module name\n");
 8000d98:	4863      	ldr	r0, [pc, #396]	; (8000f28 <main+0x24c>)
 8000d9a:	f008 feeb 	bl	8009b74 <puts>
	  }
	  // get module ID
	  if(WIFI_GetModuleID(pcWifiModuleId) == WIFI_STATUS_OK)
 8000d9e:	4863      	ldr	r0, [pc, #396]	; (8000f2c <main+0x250>)
 8000da0:	f008 fdea 	bl	8009978 <WIFI_GetModuleID>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d104      	bne.n	8000db4 <main+0xd8>
	  {
		  printf("Wifi Module ID: %s\n",pcWifiModuleId);
 8000daa:	4960      	ldr	r1, [pc, #384]	; (8000f2c <main+0x250>)
 8000dac:	4860      	ldr	r0, [pc, #384]	; (8000f30 <main+0x254>)
 8000dae:	f008 fe5b 	bl	8009a68 <iprintf>
 8000db2:	e002      	b.n	8000dba <main+0xde>
	  }
	  else
	  {
		  printf("couldn't get Wifi module ID\n");
 8000db4:	485f      	ldr	r0, [pc, #380]	; (8000f34 <main+0x258>)
 8000db6:	f008 fedd 	bl	8009b74 <puts>
	  }
	  // get module Firmware revision
	  if(WIFI_GetModuleFwRevision(pcWifiModuleFwRev) == WIFI_STATUS_OK)
 8000dba:	485f      	ldr	r0, [pc, #380]	; (8000f38 <main+0x25c>)
 8000dbc:	f008 fdc8 	bl	8009950 <WIFI_GetModuleFwRevision>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <main+0xf4>
	  {
		  printf("Wifi Module Firmware revision: %s\n",pcWifiModuleFwRev);
 8000dc6:	495c      	ldr	r1, [pc, #368]	; (8000f38 <main+0x25c>)
 8000dc8:	485c      	ldr	r0, [pc, #368]	; (8000f3c <main+0x260>)
 8000dca:	f008 fe4d 	bl	8009a68 <iprintf>
 8000dce:	e002      	b.n	8000dd6 <main+0xfa>
	  }
	  else
	  {
		  printf("couldn't get Wifi module Firmware revision\n");
 8000dd0:	485b      	ldr	r0, [pc, #364]	; (8000f40 <main+0x264>)
 8000dd2:	f008 fecf 	bl	8009b74 <puts>
	  }
	  // get module Mac@
	  if(WIFI_GetMAC_Address(pu8WifiModuleMacAddress) == WIFI_STATUS_OK)
 8000dd6:	485b      	ldr	r0, [pc, #364]	; (8000f44 <main+0x268>)
 8000dd8:	f008 fd0a 	bl	80097f0 <WIFI_GetMAC_Address>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d11a      	bne.n	8000e18 <main+0x13c>
	  {
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n",
				  pu8WifiModuleMacAddress[0],pu8WifiModuleMacAddress[1],
 8000de2:	4b58      	ldr	r3, [pc, #352]	; (8000f44 <main+0x268>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n",
 8000de6:	4618      	mov	r0, r3
				  pu8WifiModuleMacAddress[0],pu8WifiModuleMacAddress[1],
 8000de8:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <main+0x268>)
 8000dea:	785b      	ldrb	r3, [r3, #1]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n",
 8000dec:	461c      	mov	r4, r3
				  pu8WifiModuleMacAddress[2],pu8WifiModuleMacAddress[3],
 8000dee:	4b55      	ldr	r3, [pc, #340]	; (8000f44 <main+0x268>)
 8000df0:	789b      	ldrb	r3, [r3, #2]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n",
 8000df2:	461d      	mov	r5, r3
				  pu8WifiModuleMacAddress[2],pu8WifiModuleMacAddress[3],
 8000df4:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <main+0x268>)
 8000df6:	78db      	ldrb	r3, [r3, #3]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n",
 8000df8:	461a      	mov	r2, r3
				  pu8WifiModuleMacAddress[4],pu8WifiModuleMacAddress[5]);
 8000dfa:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <main+0x268>)
 8000dfc:	791b      	ldrb	r3, [r3, #4]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n",
 8000dfe:	4619      	mov	r1, r3
				  pu8WifiModuleMacAddress[4],pu8WifiModuleMacAddress[5]);
 8000e00:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <main+0x268>)
 8000e02:	795b      	ldrb	r3, [r3, #5]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n",
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	9101      	str	r1, [sp, #4]
 8000e08:	9200      	str	r2, [sp, #0]
 8000e0a:	462b      	mov	r3, r5
 8000e0c:	4622      	mov	r2, r4
 8000e0e:	4601      	mov	r1, r0
 8000e10:	484d      	ldr	r0, [pc, #308]	; (8000f48 <main+0x26c>)
 8000e12:	f008 fe29 	bl	8009a68 <iprintf>
 8000e16:	e002      	b.n	8000e1e <main+0x142>
	  }
	  else
	  {
		  printf("couldn't get Wifi module MAC address\n");
 8000e18:	484c      	ldr	r0, [pc, #304]	; (8000f4c <main+0x270>)
 8000e1a:	f008 feab 	bl	8009b74 <puts>
	  }
	  printf("*******************************************************************\n");
 8000e1e:	484c      	ldr	r0, [pc, #304]	; (8000f50 <main+0x274>)
 8000e20:	f008 fea8 	bl	8009b74 <puts>

	  // Connect to router
	  if(WIFI_Connect(pcRouterSSID, pcRouterPWR, enRoutreEncryptiontype) == WIFI_STATUS_OK)
 8000e24:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000e28:	1d39      	adds	r1, r7, #4
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f008 fcbc 	bl	80097ac <WIFI_Connect>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d144      	bne.n	8000ec4 <main+0x1e8>
	  {
		  printf("Successfully connected to routers %s\n", pcRouterSSID);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4844      	ldr	r0, [pc, #272]	; (8000f54 <main+0x278>)
 8000e42:	f008 fe11 	bl	8009a68 <iprintf>
		  // get ip address
		  if(WIFI_GetIP_Address(pu8LocalIpv4) == WIFI_STATUS_OK)
 8000e46:	4844      	ldr	r0, [pc, #272]	; (8000f58 <main+0x27c>)
 8000e48:	f008 fce8 	bl	800981c <WIFI_GetIP_Address>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10f      	bne.n	8000e72 <main+0x196>
		  {
			  printf("Device IPv4: %u-%u-%u-%u\n",
					  pu8LocalIpv4[0],pu8LocalIpv4[1],
 8000e52:	4b41      	ldr	r3, [pc, #260]	; (8000f58 <main+0x27c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
			  printf("Device IPv4: %u-%u-%u-%u\n",
 8000e56:	4619      	mov	r1, r3
					  pu8LocalIpv4[0],pu8LocalIpv4[1],
 8000e58:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <main+0x27c>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
			  printf("Device IPv4: %u-%u-%u-%u\n",
 8000e5c:	461a      	mov	r2, r3
					  pu8LocalIpv4[2],pu8LocalIpv4[3]);
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <main+0x27c>)
 8000e60:	789b      	ldrb	r3, [r3, #2]
			  printf("Device IPv4: %u-%u-%u-%u\n",
 8000e62:	4618      	mov	r0, r3
					  pu8LocalIpv4[2],pu8LocalIpv4[3]);
 8000e64:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <main+0x27c>)
 8000e66:	78db      	ldrb	r3, [r3, #3]
			  printf("Device IPv4: %u-%u-%u-%u\n",
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	483b      	ldr	r0, [pc, #236]	; (8000f5c <main+0x280>)
 8000e6e:	f008 fdfb 	bl	8009a68 <iprintf>
		  }

		  // Open TCP client
		  if(WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", pu8RemoteIpv4, 48569, 0) == WIFI_STATUS_OK)
 8000e72:	2300      	movs	r3, #0
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	f64b 53b9 	movw	r3, #48569	; 0xbdb9
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <main+0x234>)
 8000e7e:	4a38      	ldr	r2, [pc, #224]	; (8000f60 <main+0x284>)
 8000e80:	2100      	movs	r1, #0
 8000e82:	2000      	movs	r0, #0
 8000e84:	f008 fce6 	bl	8009854 <WIFI_OpenClientConnection>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d116      	bne.n	8000ebc <main+0x1e0>
		  {
			  // send msg to server
			  printf("successfully TCP client created\n");
 8000e8e:	4835      	ldr	r0, [pc, #212]	; (8000f64 <main+0x288>)
 8000e90:	f008 fe70 	bl	8009b74 <puts>
			  if(WIFI_SendData(0,"Hello from STM", 14, NULL, 1000) == WIFI_STATUS_OK)
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	220e      	movs	r2, #14
 8000e9e:	4932      	ldr	r1, [pc, #200]	; (8000f68 <main+0x28c>)
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f008 fd11 	bl	80098c8 <WIFI_SendData>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d103      	bne.n	8000eb4 <main+0x1d8>
			  {
				  printf("successfully Send welcome message to TCP server\n");
 8000eac:	482f      	ldr	r0, [pc, #188]	; (8000f6c <main+0x290>)
 8000eae:	f008 fe61 	bl	8009b74 <puts>
 8000eb2:	e00e      	b.n	8000ed2 <main+0x1f6>
			  }
			  else
			  {
				  printf("failed to send welcome msg to TCP server\n");
 8000eb4:	482e      	ldr	r0, [pc, #184]	; (8000f70 <main+0x294>)
 8000eb6:	f008 fe5d 	bl	8009b74 <puts>
 8000eba:	e00a      	b.n	8000ed2 <main+0x1f6>
			  }
		  }
		  else
		  {
			  printf("couldn't create TCP client\n");
 8000ebc:	482d      	ldr	r0, [pc, #180]	; (8000f74 <main+0x298>)
 8000ebe:	f008 fe59 	bl	8009b74 <puts>
 8000ec2:	e006      	b.n	8000ed2 <main+0x1f6>
		  }

	  }
	  else
	  {
		  printf("couldn't connect to router\n");
 8000ec4:	482c      	ldr	r0, [pc, #176]	; (8000f78 <main+0x29c>)
 8000ec6:	f008 fe55 	bl	8009b74 <puts>
 8000eca:	e002      	b.n	8000ed2 <main+0x1f6>
	  }
  }
  else
  {
	  printf("Init WIFI: Failed\n");
 8000ecc:	482b      	ldr	r0, [pc, #172]	; (8000f7c <main+0x2a0>)
 8000ece:	f008 fe51 	bl	8009b74 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(WIFI_ReceiveData(0, pu8RxData, sizeof(pu8RxData), &iReceivedDataLength, 5000) == WIFI_STATUS_OK)
 8000ed2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <main+0x2a4>)
 8000eda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ede:	4929      	ldr	r1, [pc, #164]	; (8000f84 <main+0x2a8>)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f008 fd13 	bl	800990c <WIFI_ReceiveData>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f2      	bne.n	8000ed2 <main+0x1f6>
	  {
		  if(iReceivedDataLength>0)
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <main+0x2a4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	ddee      	ble.n	8000ed2 <main+0x1f6>
		  {
			  //with'/0' set the new message end, in case the new message length is lower than the old message
			  pu8RxData[iReceivedDataLength] = '\0';
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <main+0x2a4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <main+0x2a8>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	54d1      	strb	r1, [r2, r3]
			  printf("received message from server = %s\n", pu8RxData);
 8000efe:	4921      	ldr	r1, [pc, #132]	; (8000f84 <main+0x2a8>)
 8000f00:	4821      	ldr	r0, [pc, #132]	; (8000f88 <main+0x2ac>)
 8000f02:	f008 fdb1 	bl	8009a68 <iprintf>
	  if(WIFI_ReceiveData(0, pu8RxData, sizeof(pu8RxData), &iReceivedDataLength, 5000) == WIFI_STATUS_OK)
 8000f06:	e7e4      	b.n	8000ed2 <main+0x1f6>
 8000f08:	0800b34c 	.word	0x0800b34c
 8000f0c:	0800b360 	.word	0x0800b360
 8000f10:	20000688 	.word	0x20000688
 8000f14:	0800b038 	.word	0x0800b038
 8000f18:	0800b04c 	.word	0x0800b04c
 8000f1c:	0800b060 	.word	0x0800b060
 8000f20:	20000550 	.word	0x20000550
 8000f24:	0800b0a4 	.word	0x0800b0a4
 8000f28:	0800b0bc 	.word	0x0800b0bc
 8000f2c:	200005b4 	.word	0x200005b4
 8000f30:	0800b0dc 	.word	0x0800b0dc
 8000f34:	0800b0f0 	.word	0x0800b0f0
 8000f38:	20000618 	.word	0x20000618
 8000f3c:	0800b10c 	.word	0x0800b10c
 8000f40:	0800b130 	.word	0x0800b130
 8000f44:	2000067c 	.word	0x2000067c
 8000f48:	0800b15c 	.word	0x0800b15c
 8000f4c:	0800b194 	.word	0x0800b194
 8000f50:	0800b1bc 	.word	0x0800b1bc
 8000f54:	0800b200 	.word	0x0800b200
 8000f58:	20000684 	.word	0x20000684
 8000f5c:	0800b228 	.word	0x0800b228
 8000f60:	0800b244 	.word	0x0800b244
 8000f64:	0800b250 	.word	0x0800b250
 8000f68:	0800b270 	.word	0x0800b270
 8000f6c:	0800b280 	.word	0x0800b280
 8000f70:	0800b2b0 	.word	0x0800b2b0
 8000f74:	0800b2dc 	.word	0x0800b2dc
 8000f78:	0800b2f8 	.word	0x0800b2f8
 8000f7c:	0800b314 	.word	0x0800b314
 8000f80:	20000880 	.word	0x20000880
 8000f84:	2000068c 	.word	0x2000068c
 8000f88:	0800b328 	.word	0x0800b328

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b096      	sub	sp, #88	; 0x58
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2244      	movs	r2, #68	; 0x44
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f008 fd5c 	bl	8009a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f004 fc2a 	bl	8005808 <HAL_PWREx_ControlVoltageScaling>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000fba:	f000 fd17 	bl	80019ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fbe:	f004 fbf3 	bl	80057a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <SystemClock_Config+0xc0>)
 8000fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc8:	4a20      	ldr	r2, [pc, #128]	; (800104c <SystemClock_Config+0xc0>)
 8000fca:	f023 0318 	bic.w	r3, r3, #24
 8000fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fd2:	2314      	movs	r3, #20
 8000fd4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fe2:	2360      	movs	r3, #96	; 0x60
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fea:	2301      	movs	r3, #1
 8000fec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ff2:	233c      	movs	r3, #60	; 0x3c
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4618      	mov	r0, r3
 8001008:	f004 fca2 	bl	8005950 <HAL_RCC_OscConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001012:	f000 fceb 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001016:	230f      	movs	r3, #15
 8001018:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101a:	2303      	movs	r3, #3
 800101c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	2105      	movs	r1, #5
 800102e:	4618      	mov	r0, r3
 8001030:	f005 f8a8 	bl	8006184 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800103a:	f000 fcd7 	bl	80019ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800103e:	f005 fe8f 	bl	8006d60 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001042:	bf00      	nop
 8001044:	3758      	adds	r7, #88	; 0x58
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0a6      	sub	sp, #152	; 0x98
 8001054:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2294      	movs	r2, #148	; 0x94
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f008 fcfb 	bl	8009a58 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG
 8001062:	f44f 238c 	mov.w	r3, #286720	; 0x46000
 8001066:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001068:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800106c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001070:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001074:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001076:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800107a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800107e:	2301      	movs	r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001086:	2318      	movs	r3, #24
 8001088:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001096:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800109a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 fb2e 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 80010aa:	f000 fc9f 	bl	80019ec <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3798      	adds	r7, #152	; 0x98
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <MX_ADC1_Init+0xbc>)
 80010d0:	4a29      	ldr	r2, [pc, #164]	; (8001178 <MX_ADC1_Init+0xc0>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <MX_ADC1_Init+0xbc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_ADC1_Init+0xbc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <MX_ADC1_Init+0xbc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_ADC1_Init+0xbc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_ADC1_Init+0xbc>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <MX_ADC1_Init+0xbc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_ADC1_Init+0xbc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_ADC1_Init+0xbc>)
 8001100:	2201      	movs	r2, #1
 8001102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <MX_ADC1_Init+0xbc>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_ADC1_Init+0xbc>)
 800110e:	2200      	movs	r2, #0
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_ADC1_Init+0xbc>)
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_ADC1_Init+0xbc>)
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_ADC1_Init+0xbc>)
 8001122:	2200      	movs	r2, #0
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_ADC1_Init+0xbc>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_ADC1_Init+0xbc>)
 8001130:	f002 faac 	bl	800368c <HAL_ADC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800113a:	f000 fc57 	bl	80019ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_ADC1_Init+0xc4>)
 8001140:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001142:	2306      	movs	r3, #6
 8001144:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800114a:	237f      	movs	r3, #127	; 0x7f
 800114c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800114e:	2304      	movs	r3, #4
 8001150:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_ADC1_Init+0xbc>)
 800115c:	f002 fbe2 	bl	8003924 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001166:	f000 fc41 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000100 	.word	0x20000100
 8001178:	50040000 	.word	0x50040000
 800117c:	04300002 	.word	0x04300002

08001180 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 8001186:	4a19      	ldr	r2, [pc, #100]	; (80011ec <MX_DFSDM1_Init+0x6c>)
 8001188:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 800118c:	2201      	movs	r2, #1
 800118e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 8001198:	2202      	movs	r2, #2
 800119a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 80011b6:	2204      	movs	r2, #4
 80011b8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_DFSDM1_Init+0x68>)
 80011d4:	f003 f8b4 	bl	8004340 <HAL_DFSDM_ChannelInit>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80011de:	f000 fc05 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000168 	.word	0x20000168
 80011ec:	40016040 	.word	0x40016040

080011f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_I2C1_Init+0x74>)
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <MX_I2C1_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_I2C1_Init+0x74>)
 80011fc:	4a1b      	ldr	r2, [pc, #108]	; (800126c <MX_I2C1_Init+0x7c>)
 80011fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_I2C1_Init+0x74>)
 8001208:	2201      	movs	r2, #1
 800120a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122a:	480e      	ldr	r0, [pc, #56]	; (8001264 <MX_I2C1_Init+0x74>)
 800122c:	f003 fcc0 	bl	8004bb0 <HAL_I2C_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001236:	f000 fbd9 	bl	80019ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <MX_I2C1_Init+0x74>)
 800123e:	f003 fd46 	bl	8004cce <HAL_I2CEx_ConfigAnalogFilter>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001248:	f000 fbd0 	bl	80019ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_I2C1_Init+0x74>)
 8001250:	f003 fd88 	bl	8004d64 <HAL_I2CEx_ConfigDigitalFilter>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800125a:	f000 fbc7 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001a0 	.word	0x200001a0
 8001268:	40005400 	.word	0x40005400
 800126c:	307075b1 	.word	0x307075b1

08001270 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <MX_I2C2_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_I2C2_Init+0x74>)
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_I2C2_Init+0x7c>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_I2C2_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C2_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012ac:	f003 fc80 	bl	8004bb0 <HAL_I2C_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012b6:	f000 fb99 	bl	80019ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012be:	f003 fd06 	bl	8004cce <HAL_I2CEx_ConfigAnalogFilter>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012c8:	f000 fb90 	bl	80019ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012d0:	f003 fd48 	bl	8004d64 <HAL_I2CEx_ConfigDigitalFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 fb87 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001f4 	.word	0x200001f4
 80012e8:	40005800 	.word	0x40005800
 80012ec:	307075b1 	.word	0x307075b1

080012f0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001306:	4a24      	ldr	r2, [pc, #144]	; (8001398 <MX_OCTOSPI1_Init+0xa8>)
 8001308:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 800130c:	2201      	movs	r2, #1
 800130e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800131c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001320:	2220      	movs	r2, #32
 8001322:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001326:	2201      	movs	r2, #1
 8001328:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001338:	2201      	movs	r2, #1
 800133a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 800134a:	2200      	movs	r2, #0
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001350:	2208      	movs	r2, #8
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001354:	480f      	ldr	r0, [pc, #60]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 8001356:	f003 fd51 	bl	8004dfc <HAL_OSPI_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001360:	f000 fb44 	bl	80019ec <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800136c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001370:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	f241 3288 	movw	r2, #5000	; 0x1388
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <MX_OCTOSPI1_Init+0xa4>)
 800137c:	f003 fdf8 	bl	8004f70 <HAL_OSPIM_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001386:	f000 fb31 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000248 	.word	0x20000248
 8001398:	a0001000 	.word	0xa0001000

0800139c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MX_RNG_Init+0x24>)
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <MX_RNG_Init+0x28>)
 80013a4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_RNG_Init+0x24>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_RNG_Init+0x24>)
 80013ae:	f005 fecf 	bl	8007150 <HAL_RNG_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80013b8:	f000 fb18 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000298 	.word	0x20000298
 80013c4:	50060800 	.word	0x50060800

080013c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_SPI1_Init+0x74>)
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <MX_SPI1_Init+0x78>)
 80013d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_SPI1_Init+0x74>)
 80013d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_SPI1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_SPI1_Init+0x74>)
 80013e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_SPI1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_SPI1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_SPI1_Init+0x74>)
 80013f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_SPI1_Init+0x74>)
 80013fe:	2208      	movs	r2, #8
 8001400:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_SPI1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_SPI1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_SPI1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_SPI1_Init+0x74>)
 8001416:	2207      	movs	r2, #7
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_SPI1_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_SPI1_Init+0x74>)
 8001422:	2208      	movs	r2, #8
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_SPI1_Init+0x74>)
 8001428:	f005 fef4 	bl	8007214 <HAL_SPI_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001432:	f000 fadb 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002ac 	.word	0x200002ac
 8001440:	40013000 	.word	0x40013000

08001444 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_UART4_Init+0x90>)
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <MX_UART4_Init+0x94>)
 800144c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_UART4_Init+0x90>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_UART4_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_UART4_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_UART4_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_UART4_Init+0x90>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_UART4_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_UART4_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_UART4_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_UART4_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_UART4_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_UART4_Init+0x90>)
 800148e:	f007 f9f2 	bl	8008876 <HAL_UART_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001498:	f000 faa8 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_UART4_Init+0x90>)
 80014a0:	f008 f88e 	bl	80095c0 <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80014aa:	f000 fa9f 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <MX_UART4_Init+0x90>)
 80014b2:	f008 f8c3 	bl	800963c <HAL_UARTEx_SetRxFifoThreshold>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f000 fa96 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_UART4_Init+0x90>)
 80014c2:	f008 f844 	bl	800954e <HAL_UARTEx_DisableFifoMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 fa8e 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000310 	.word	0x20000310
 80014d8:	40004c00 	.word	0x40004c00

080014dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014e2:	4a23      	ldr	r2, [pc, #140]	; (8001570 <MX_USART1_UART_Init+0x94>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_USART1_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_USART1_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_USART1_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001526:	f007 f9a6 	bl	8008876 <HAL_UART_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001530:	f000 fa5c 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_USART1_UART_Init+0x90>)
 8001538:	f008 f842 	bl	80095c0 <HAL_UARTEx_SetTxFifoThreshold>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001542:	f000 fa53 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001546:	2100      	movs	r1, #0
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <MX_USART1_UART_Init+0x90>)
 800154a:	f008 f877 	bl	800963c <HAL_UARTEx_SetRxFifoThreshold>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 fa4a 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_USART1_UART_Init+0x90>)
 800155a:	f007 fff8 	bl	800954e <HAL_UARTEx_DisableFifoMode>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001564:	f000 fa42 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200003a0 	.word	0x200003a0
 8001570:	40013800 	.word	0x40013800

08001574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <MX_USART2_UART_Init+0x94>)
 800157a:	4a24      	ldr	r2, [pc, #144]	; (800160c <MX_USART2_UART_Init+0x98>)
 800157c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <MX_USART2_UART_Init+0x94>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_USART2_UART_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_USART2_UART_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_USART2_UART_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_USART2_UART_Init+0x94>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_USART2_UART_Init+0x94>)
 80015a0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015a4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_USART2_UART_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_USART2_UART_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_USART2_UART_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_USART2_UART_Init+0x94>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015be:	4812      	ldr	r0, [pc, #72]	; (8001608 <MX_USART2_UART_Init+0x94>)
 80015c0:	f007 f959 	bl	8008876 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80015ca:	f000 fa0f 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_USART2_UART_Init+0x94>)
 80015d2:	f007 fff5 	bl	80095c0 <HAL_UARTEx_SetTxFifoThreshold>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80015dc:	f000 fa06 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	4809      	ldr	r0, [pc, #36]	; (8001608 <MX_USART2_UART_Init+0x94>)
 80015e4:	f008 f82a 	bl	800963c <HAL_UARTEx_SetRxFifoThreshold>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80015ee:	f000 f9fd 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART2_UART_Init+0x94>)
 80015f4:	f007 ffab 	bl	800954e <HAL_UARTEx_DisableFifoMode>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80015fe:	f000 f9f5 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000430 	.word	0x20000430
 800160c:	40004400 	.word	0x40004400

08001610 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 8001616:	4a23      	ldr	r2, [pc, #140]	; (80016a4 <MX_USART3_UART_Init+0x94>)
 8001618:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001658:	4811      	ldr	r0, [pc, #68]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 800165a:	f007 f90c 	bl	8008876 <HAL_UART_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001664:	f000 f9c2 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 800166c:	f007 ffa8 	bl	80095c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001676:	f000 f9b9 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167a:	2100      	movs	r1, #0
 800167c:	4808      	ldr	r0, [pc, #32]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 800167e:	f007 ffdd 	bl	800963c <HAL_UARTEx_SetRxFifoThreshold>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001688:	f000 f9b0 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_USART3_UART_Init+0x90>)
 800168e:	f007 ff5e 	bl	800954e <HAL_UARTEx_DisableFifoMode>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001698:	f000 f9a8 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200004c0 	.word	0x200004c0
 80016a4:	40004800 	.word	0x40004800

080016a8 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	; 0x30
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b9e      	ldr	r3, [pc, #632]	; (8001948 <MX_GPIO_Init+0x290>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a9d      	ldr	r2, [pc, #628]	; (8001948 <MX_GPIO_Init+0x290>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b9b      	ldr	r3, [pc, #620]	; (8001948 <MX_GPIO_Init+0x290>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	4b98      	ldr	r3, [pc, #608]	; (8001948 <MX_GPIO_Init+0x290>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a97      	ldr	r2, [pc, #604]	; (8001948 <MX_GPIO_Init+0x290>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b95      	ldr	r3, [pc, #596]	; (8001948 <MX_GPIO_Init+0x290>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016fe:	4b92      	ldr	r3, [pc, #584]	; (8001948 <MX_GPIO_Init+0x290>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a91      	ldr	r2, [pc, #580]	; (8001948 <MX_GPIO_Init+0x290>)
 8001704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b8f      	ldr	r3, [pc, #572]	; (8001948 <MX_GPIO_Init+0x290>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b8c      	ldr	r3, [pc, #560]	; (8001948 <MX_GPIO_Init+0x290>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a8b      	ldr	r2, [pc, #556]	; (8001948 <MX_GPIO_Init+0x290>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b89      	ldr	r3, [pc, #548]	; (8001948 <MX_GPIO_Init+0x290>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b86      	ldr	r3, [pc, #536]	; (8001948 <MX_GPIO_Init+0x290>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	4a85      	ldr	r2, [pc, #532]	; (8001948 <MX_GPIO_Init+0x290>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173a:	4b83      	ldr	r3, [pc, #524]	; (8001948 <MX_GPIO_Init+0x290>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	4b80      	ldr	r3, [pc, #512]	; (8001948 <MX_GPIO_Init+0x290>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	4a7f      	ldr	r2, [pc, #508]	; (8001948 <MX_GPIO_Init+0x290>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <MX_GPIO_Init+0x290>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST25DV04K_RF_DISABLE_GPIO_Port, ST25DV04K_RF_DISABLE_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2104      	movs	r1, #4
 8001762:	487a      	ldr	r0, [pc, #488]	; (800194c <MX_GPIO_Init+0x294>)
 8001764:	f003 f9f4 	bl	8004b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001768:	2200      	movs	r2, #0
 800176a:	f248 111c 	movw	r1, #33052	; 0x811c
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f003 f9ed 	bl	8004b50 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8001776:	2200      	movs	r2, #0
 8001778:	f24d 0134 	movw	r1, #53300	; 0xd034
 800177c:	4874      	ldr	r0, [pc, #464]	; (8001950 <MX_GPIO_Init+0x298>)
 800177e:	f003 f9e7 	bl	8004b50 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	f242 0183 	movw	r1, #8323	; 0x2083
 8001788:	4872      	ldr	r0, [pc, #456]	; (8001954 <MX_GPIO_Init+0x29c>)
 800178a:	f003 f9e1 	bl	8004b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001794:	4870      	ldr	r0, [pc, #448]	; (8001958 <MX_GPIO_Init+0x2a0>)
 8001796:	f003 f9db 	bl	8004b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST25DV04K_RF_DISABLE_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin;
 800179a:	2304      	movs	r3, #4
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ST25DV04K_RF_DISABLE_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	4866      	ldr	r0, [pc, #408]	; (800194c <MX_GPIO_Init+0x294>)
 80017b2:	f002 ff31 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin;
 80017b6:	2378      	movs	r3, #120	; 0x78
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	4860      	ldr	r0, [pc, #384]	; (800194c <MX_GPIO_Init+0x294>)
 80017cc:	f002 ff24 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80017d0:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	485c      	ldr	r0, [pc, #368]	; (8001958 <MX_GPIO_Init+0x2a0>)
 80017e8:	f002 ff16 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80017ec:	f248 131c 	movw	r3, #33052	; 0x811c
 80017f0:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f002 ff06 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800180c:	2301      	movs	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001810:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	484b      	ldr	r0, [pc, #300]	; (8001950 <MX_GPIO_Init+0x298>)
 8001822:	f002 fef9 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001826:	2302      	movs	r3, #2
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001836:	2302      	movs	r3, #2
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4843      	ldr	r0, [pc, #268]	; (8001950 <MX_GPIO_Init+0x298>)
 8001842:	f002 fee9 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin LED2_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8001846:	f24d 0334 	movw	r3, #53300	; 0xd034
 800184a:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	483c      	ldr	r0, [pc, #240]	; (8001950 <MX_GPIO_Init+0x298>)
 8001860:	f002 feda 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001864:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001868:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	4836      	ldr	r0, [pc, #216]	; (8001954 <MX_GPIO_Init+0x29c>)
 800187c:	f002 fecc 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001880:	f242 0383 	movw	r3, #8323	; 0x2083
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	482e      	ldr	r0, [pc, #184]	; (8001954 <MX_GPIO_Init+0x29c>)
 800189a:	f002 febd 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800189e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	4828      	ldr	r0, [pc, #160]	; (8001958 <MX_GPIO_Init+0x2a0>)
 80018b8:	f002 feae 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80018bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f002 fea0 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80018d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018ea:	230a      	movs	r3, #10
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f8:	f002 fe8e 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80018fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800190e:	2306      	movs	r3, #6
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	480f      	ldr	r0, [pc, #60]	; (8001958 <MX_GPIO_Init+0x2a0>)
 800191a:	f002 fe7d 	bl	8004618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2017      	movs	r0, #23
 8001924:	f002 fcd5 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001928:	2017      	movs	r0, #23
 800192a:	f002 fcee 	bl	800430a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2028      	movs	r0, #40	; 0x28
 8001934:	f002 fccd 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001938:	2028      	movs	r0, #40	; 0x28
 800193a:	f002 fce6 	bl	800430a <HAL_NVIC_EnableIRQ>

}
 800193e:	bf00      	nop
 8001940:	3730      	adds	r7, #48	; 0x30
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	48001000 	.word	0x48001000
 8001950:	48000400 	.word	0x48000400
 8001954:	48000c00 	.word	0x48000c00
 8001958:	48000800 	.word	0x48000800

0800195c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d102      	bne.n	8001972 <HAL_GPIO_EXTI_Callback+0x16>
  {
	case (GPIO_PIN_1):
	{
		SPI_WIFI_ISR();
 800196c:	f7ff f9a6 	bl	8000cbc <SPI_WIFI_ISR>
		break;
 8001970:	e000      	b.n	8001974 <HAL_GPIO_EXTI_Callback+0x18>
	}

    default:
    {
      break;
 8001972:	bf00      	nop
    }
  }
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <SPI3_IRQHandler>:

// SPI3 Interruption request handler for the Wifi module (send/receive AT cmd via SPI)
void SPI3_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <SPI3_IRQHandler+0x10>)
 8001982:	f006 fa43 	bl	8007e0c <HAL_SPI_IRQHandler>
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000008c 	.word	0x2000008c

08001990 <__io_putchar>:


PUTCHAR_PROTOTYPE
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000))
 8001998:	bf00      	nop
 800199a:	1d39      	adds	r1, r7, #4
 800199c:	f247 5330 	movw	r3, #30000	; 0x7530
 80019a0:	2201      	movs	r2, #1
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <__io_putchar+0x28>)
 80019a4:	f006 ffb7 	bl	8008916 <HAL_UART_Transmit>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f5      	bne.n	800199a <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 80019ae:	687b      	ldr	r3, [r7, #4]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200003a0 	.word	0x200003a0

080019bc <__io_getchar>:
GETCHAR_PROTOTYPE
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 30000))
 80019c6:	bf00      	nop
 80019c8:	1df9      	adds	r1, r7, #7
 80019ca:	f247 5330 	movw	r3, #30000	; 0x7530
 80019ce:	2201      	movs	r2, #1
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <__io_getchar+0x2c>)
 80019d2:	f007 f837 	bl	8008a44 <HAL_UART_Receive>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f5      	bne.n	80019c8 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 80019dc:	79fb      	ldrb	r3, [r7, #7]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200003a0 	.word	0x200003a0

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <Error_Handler+0x8>
	...

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_MspInit+0x44>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6613      	str	r3, [r2, #96]	; 0x60
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_MspInit+0x44>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_MspInit+0x44>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_MspInit+0x44>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <HAL_ADC_MspInit+0x74>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d123      	bne.n	8001aaa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_ADC_MspInit+0x78>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_ADC_MspInit+0x78>)
 8001a68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_ADC_MspInit+0x78>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_ADC_MspInit+0x78>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_ADC_MspInit+0x78>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_ADC_MspInit+0x78>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001a92:	233f      	movs	r3, #63	; 0x3f
 8001a94:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a96:	230b      	movs	r3, #11
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <HAL_ADC_MspInit+0x7c>)
 8001aa6:	f002 fdb7 	bl	8004618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	50040000 	.word	0x50040000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	48000800 	.word	0x48000800

08001ac0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0ae      	sub	sp, #184	; 0xb8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2294      	movs	r2, #148	; 0x94
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f007 ffb9 	bl	8009a58 <memset>
  if(DFSDM1_Init == 0)
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d142      	bne.n	8001b74 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 fdfe 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001b0a:	f7ff ff6f 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b18:	6613      	str	r3, [r2, #96]	; 0x60
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001b3e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b58:	2306      	movs	r3, #6
 8001b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4807      	ldr	r0, [pc, #28]	; (8001b84 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001b66:	f002 fd57 	bl	8004618 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a02      	ldr	r2, [pc, #8]	; (8001b7c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b72:	6013      	str	r3, [r2, #0]
  }

}
 8001b74:	bf00      	nop
 8001b76:	37b8      	adds	r7, #184	; 0xb8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000884 	.word	0x20000884
 8001b80:	40021000 	.word	0x40021000
 8001b84:	48001000 	.word	0x48001000

08001b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0b0      	sub	sp, #192	; 0xc0
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	2294      	movs	r2, #148	; 0x94
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f007 ff55 	bl	8009a58 <memset>
  if(hi2c->Instance==I2C1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a42      	ldr	r2, [pc, #264]	; (8001cbc <HAL_I2C_MspInit+0x134>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d13c      	bne.n	8001c32 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bb8:	2340      	movs	r3, #64	; 0x40
 8001bba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 fd9b 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bd0:	f7ff ff0c 	bl	80019ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	4a39      	ldr	r2, [pc, #228]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf4:	2312      	movs	r3, #18
 8001bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c06:	2304      	movs	r3, #4
 8001c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c10:	4619      	mov	r1, r3
 8001c12:	482c      	ldr	r0, [pc, #176]	; (8001cc4 <HAL_I2C_MspInit+0x13c>)
 8001c14:	f002 fd00 	bl	8004618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c22:	6593      	str	r3, [r2, #88]	; 0x58
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c30:	e040      	b.n	8001cb4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_I2C_MspInit+0x140>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d13b      	bne.n	8001cb4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fd59 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001c54:	f7ff feca 	bl	80019ec <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001c70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c78:	2312      	movs	r3, #18
 8001c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c94:	4619      	mov	r1, r3
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <HAL_I2C_MspInit+0x13c>)
 8001c98:	f002 fcbe 	bl	8004618 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001ca2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_I2C_MspInit+0x138>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	37c0      	adds	r7, #192	; 0xc0
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40005400 	.word	0x40005400
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	40005800 	.word	0x40005800

08001ccc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b0b0      	sub	sp, #192	; 0xc0
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	2294      	movs	r2, #148	; 0x94
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f007 feb3 	bl	8009a58 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <HAL_OSPI_MspInit+0xcc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d149      	bne.n	8001d90 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d00:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d08:	f107 0318 	add.w	r3, r7, #24
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 fcf7 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001d18:	f7ff fe68 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_OSPI_MspInit+0xd0>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <HAL_OSPI_MspInit+0xd0>)
 8001d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_OSPI_MspInit+0xd0>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_OSPI_MspInit+0xd0>)
 8001d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_OSPI_MspInit+0xd0>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6513      	str	r3, [r2, #80]	; 0x50
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_OSPI_MspInit+0xd0>)
 8001d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_OSPI_MspInit+0xd0>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_OSPI_MspInit+0xd0>)
 8001d52:	f043 0310 	orr.w	r3, r3, #16
 8001d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_OSPI_MspInit+0xd0>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001d64:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001d7e:	230a      	movs	r3, #10
 8001d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_OSPI_MspInit+0xd4>)
 8001d8c:	f002 fc44 	bl	8004618 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	37c0      	adds	r7, #192	; 0xc0
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	a0001000 	.word	0xa0001000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	48001000 	.word	0x48001000

08001da4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_RNG_MspInit+0x38>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10b      	bne.n	8001dce <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_RNG_MspInit+0x3c>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_RNG_MspInit+0x3c>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_RNG_MspInit+0x3c>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	50060800 	.word	0x50060800
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <HAL_SPI_MspInit+0x7c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d128      	bne.n	8001e58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e10:	6613      	str	r3, [r2, #96]	; 0x60
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	4a10      	ldr	r2, [pc, #64]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001e36:	23e0      	movs	r3, #224	; 0xe0
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e46:	2305      	movs	r3, #5
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e54:	f002 fbe0 	bl	8004618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40013000 	.word	0x40013000
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_SPI_MspDeInit+0x30>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10a      	bne.n	8001e90 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_SPI_MspDeInit+0x34>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_SPI_MspDeInit+0x34>)
 8001e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e84:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin);
 8001e86:	21e0      	movs	r1, #224	; 0xe0
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8c:	f002 fd56 	bl	800493c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40013000 	.word	0x40013000
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0b4      	sub	sp, #208	; 0xd0
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ebc:	2294      	movs	r2, #148	; 0x94
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f007 fdc9 	bl	8009a58 <memset>
  if(huart->Instance==UART4)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a83      	ldr	r2, [pc, #524]	; (80020d8 <HAL_UART_MspInit+0x238>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d13c      	bne.n	8001f4a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 fc0f 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ee8:	f7ff fd80 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001eec:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001ef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b78      	ldr	r3, [pc, #480]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	4b75      	ldr	r3, [pc, #468]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f08:	4a74      	ldr	r2, [pc, #464]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f10:	4b72      	ldr	r3, [pc, #456]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	623b      	str	r3, [r7, #32]
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f34:	2308      	movs	r3, #8
 8001f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f44:	f002 fb68 	bl	8004618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f48:	e0c2      	b.n	80020d0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a64      	ldr	r2, [pc, #400]	; (80020e0 <HAL_UART_MspInit+0x240>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d13b      	bne.n	8001fcc <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fbcd 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001f6c:	f7ff fd3e 	bl	80019ec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f70:	4b5a      	ldr	r3, [pc, #360]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f74:	4a59      	ldr	r2, [pc, #356]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f7c:	4b57      	ldr	r3, [pc, #348]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f88:	4b54      	ldr	r3, [pc, #336]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	4a53      	ldr	r2, [pc, #332]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001f8e:	f043 0302 	orr.w	r3, r3, #2
 8001f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f94:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001fa0:	23c0      	movs	r3, #192	; 0xc0
 8001fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4847      	ldr	r0, [pc, #284]	; (80020e4 <HAL_UART_MspInit+0x244>)
 8001fc6:	f002 fb27 	bl	8004618 <HAL_GPIO_Init>
}
 8001fca:	e081      	b.n	80020d0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a45      	ldr	r2, [pc, #276]	; (80020e8 <HAL_UART_MspInit+0x248>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d13b      	bne.n	800204e <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 fb8c 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001fee:	f7ff fcfd 	bl	80019ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a39      	ldr	r2, [pc, #228]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffe:	4b37      	ldr	r3, [pc, #220]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <HAL_UART_MspInit+0x23c>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4a33      	ldr	r2, [pc, #204]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002016:	4b31      	ldr	r3, [pc, #196]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002022:	2378      	movs	r3, #120	; 0x78
 8002024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800203a:	2307      	movs	r3, #7
 800203c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002040:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002044:	4619      	mov	r1, r3
 8002046:	4829      	ldr	r0, [pc, #164]	; (80020ec <HAL_UART_MspInit+0x24c>)
 8002048:	f002 fae6 	bl	8004618 <HAL_GPIO_Init>
}
 800204c:	e040      	b.n	80020d0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <HAL_UART_MspInit+0x250>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d13b      	bne.n	80020d0 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002058:	2304      	movs	r3, #4
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800205c:	2300      	movs	r3, #0
 800205e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002064:	4618      	mov	r0, r3
 8002066:	f004 fb4b 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002070:	f7ff fcbc 	bl	80019ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_UART_MspInit+0x23c>)
 800207a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207e:	6593      	str	r3, [r2, #88]	; 0x58
 8002080:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <HAL_UART_MspInit+0x23c>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	4a12      	ldr	r2, [pc, #72]	; (80020dc <HAL_UART_MspInit+0x23c>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_UART_MspInit+0x23c>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80020a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020be:	2307      	movs	r3, #7
 80020c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020c8:	4619      	mov	r1, r3
 80020ca:	4808      	ldr	r0, [pc, #32]	; (80020ec <HAL_UART_MspInit+0x24c>)
 80020cc:	f002 faa4 	bl	8004618 <HAL_GPIO_Init>
}
 80020d0:	bf00      	nop
 80020d2:	37d0      	adds	r7, #208	; 0xd0
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40004c00 	.word	0x40004c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40013800 	.word	0x40013800
 80020e4:	48000400 	.word	0x48000400
 80020e8:	40004400 	.word	0x40004400
 80020ec:	48000c00 	.word	0x48000c00
 80020f0:	40004800 	.word	0x40004800

080020f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <NMI_Handler+0x4>

080020fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <HardFault_Handler+0x4>

08002100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <MemManage_Handler+0x4>

08002106 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <BusFault_Handler+0x4>

0800210c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <UsageFault_Handler+0x4>

08002112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002140:	f001 f8c0 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800214c:	2020      	movs	r0, #32
 800214e:	f002 fd17 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002152:	2040      	movs	r0, #64	; 0x40
 8002154:	f002 fd14 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002158:	2080      	movs	r0, #128	; 0x80
 800215a:	f002 fd11 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800215e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002162:	f002 fd0d 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}

0800216a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800216e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002172:	f002 fd05 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002176:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800217a:	f002 fd01 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800217e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002182:	f002 fcfd 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002186:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800218a:	f002 fcf9 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800218e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002192:	f002 fcf5 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002196:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800219a:	f002 fcf1 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80021a6:	2002      	movs	r0, #2
 80021a8:	f002 fcea 	bl	8004b80 <HAL_GPIO_EXTI_IRQHandler>
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
	return 1;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_kill>:

int _kill(int pid, int sig)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021ca:	f007 fbfd 	bl	80099c8 <__errno>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2216      	movs	r2, #22
 80021d2:	601a      	str	r2, [r3, #0]
	return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_exit>:

void _exit (int status)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ffe7 	bl	80021c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021f2:	e7fe      	b.n	80021f2 <_exit+0x12>

080021f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e00a      	b.n	800221c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002206:	f7ff fbd9 	bl	80019bc <__io_getchar>
 800220a:	4601      	mov	r1, r0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	60ba      	str	r2, [r7, #8]
 8002212:	b2ca      	uxtb	r2, r1
 8002214:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	dbf0      	blt.n	8002206 <_read+0x12>
	}

return len;
 8002224:	687b      	ldr	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e009      	b.n	8002254 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fba1 	bl	8001990 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	dbf1      	blt.n	8002240 <_write+0x12>
	}
	return len;
 800225c:	687b      	ldr	r3, [r7, #4]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_close>:

int _close(int file)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
	return -1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228e:	605a      	str	r2, [r3, #4]
	return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_isatty>:

int _isatty(int file)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
	return 1;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
	return 0;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <_sbrk+0x5c>)
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <_sbrk+0x60>)
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <_sbrk+0x64>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <_sbrk+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d207      	bcs.n	8002310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002300:	f007 fb62 	bl	80099c8 <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	220c      	movs	r2, #12
 8002308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	e009      	b.n	8002324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <_sbrk+0x64>)
 8002320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200a0000 	.word	0x200a0000
 8002330:	00000400 	.word	0x00000400
 8002334:	20000888 	.word	0x20000888
 8002338:	20000f70 	.word	0x20000f70

0800233c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <SystemInit+0x20>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <SystemInit+0x20>)
 8002348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800234c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <Reset_Handler>:
 8002360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002398 <LoopForever+0x2>
 8002364:	f7ff ffea 	bl	800233c <SystemInit>
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <LoopForever+0x6>)
 800236a:	490d      	ldr	r1, [pc, #52]	; (80023a0 <LoopForever+0xa>)
 800236c:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <LoopForever+0xe>)
 800236e:	2300      	movs	r3, #0
 8002370:	e002      	b.n	8002378 <LoopCopyDataInit>

08002372 <CopyDataInit>:
 8002372:	58d4      	ldr	r4, [r2, r3]
 8002374:	50c4      	str	r4, [r0, r3]
 8002376:	3304      	adds	r3, #4

08002378 <LoopCopyDataInit>:
 8002378:	18c4      	adds	r4, r0, r3
 800237a:	428c      	cmp	r4, r1
 800237c:	d3f9      	bcc.n	8002372 <CopyDataInit>
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <LoopForever+0x12>)
 8002380:	4c0a      	ldr	r4, [pc, #40]	; (80023ac <LoopForever+0x16>)
 8002382:	2300      	movs	r3, #0
 8002384:	e001      	b.n	800238a <LoopFillZerobss>

08002386 <FillZerobss>:
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	3204      	adds	r2, #4

0800238a <LoopFillZerobss>:
 800238a:	42a2      	cmp	r2, r4
 800238c:	d3fb      	bcc.n	8002386 <FillZerobss>
 800238e:	f007 fb21 	bl	80099d4 <__libc_init_array>
 8002392:	f7fe fca3 	bl	8000cdc <main>

08002396 <LoopForever>:
 8002396:	e7fe      	b.n	8002396 <LoopForever>
 8002398:	200a0000 	.word	0x200a0000
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000070 	.word	0x20000070
 80023a4:	0800b7e4 	.word	0x0800b7e4
 80023a8:	20000070 	.word	0x20000070
 80023ac:	20000f70 	.word	0x20000f70

080023b0 <ADC1_IRQHandler>:
 80023b0:	e7fe      	b.n	80023b0 <ADC1_IRQHandler>

080023b2 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	2b2f      	cmp	r3, #47	; 0x2f
 80023c0:	d906      	bls.n	80023d0 <Hex2Num+0x1e>
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	2b39      	cmp	r3, #57	; 0x39
 80023c6:	d803      	bhi.n	80023d0 <Hex2Num+0x1e>
        return a - '0';
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	3b30      	subs	r3, #48	; 0x30
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e014      	b.n	80023fa <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	2b60      	cmp	r3, #96	; 0x60
 80023d4:	d906      	bls.n	80023e4 <Hex2Num+0x32>
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b66      	cmp	r3, #102	; 0x66
 80023da:	d803      	bhi.n	80023e4 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	3b57      	subs	r3, #87	; 0x57
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e00a      	b.n	80023fa <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b40      	cmp	r3, #64	; 0x40
 80023e8:	d906      	bls.n	80023f8 <Hex2Num+0x46>
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	2b46      	cmp	r3, #70	; 0x46
 80023ee:	d803      	bhi.n	80023f8 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	3b37      	subs	r3, #55	; 0x37
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e000      	b.n	80023fa <Hex2Num+0x48>
    }

    return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8002418:	e012      	b.n	8002440 <ParseHexNumber+0x3a>
        sum <<= 4;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ffc4 	bl	80023b2 <Hex2Num>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
        ptr++;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	607b      	str	r3, [r7, #4]
        i++;
 800243a:	7afb      	ldrb	r3, [r7, #11]
 800243c:	3301      	adds	r3, #1
 800243e:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b2f      	cmp	r3, #47	; 0x2f
 8002446:	d903      	bls.n	8002450 <ParseHexNumber+0x4a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b39      	cmp	r3, #57	; 0x39
 800244e:	d9e4      	bls.n	800241a <ParseHexNumber+0x14>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b60      	cmp	r3, #96	; 0x60
 8002456:	d903      	bls.n	8002460 <ParseHexNumber+0x5a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b66      	cmp	r3, #102	; 0x66
 800245e:	d9dc      	bls.n	800241a <ParseHexNumber+0x14>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d903      	bls.n	8002470 <ParseHexNumber+0x6a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b46      	cmp	r3, #70	; 0x46
 800246e:	d9d4      	bls.n	800241a <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <ParseHexNumber+0x76>
        *cnt = i;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	7afa      	ldrb	r2, [r7, #11]
 800247a:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800247c:	68fb      	ldr	r3, [r7, #12]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	2300      	movs	r3, #0
 8002496:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b2d      	cmp	r3, #45	; 0x2d
 80024a2:	d119      	bne.n	80024d8 <ParseNumber+0x52>
        minus = 1;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3301      	adds	r3, #1
 80024ac:	607b      	str	r3, [r7, #4]
        i++;
 80024ae:	7bbb      	ldrb	r3, [r7, #14]
 80024b0:	3301      	adds	r3, #1
 80024b2:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80024b4:	e010      	b.n	80024d8 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	3b30      	subs	r3, #48	; 0x30
 80024c8:	4413      	add	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
        ptr++;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3301      	adds	r3, #1
 80024d0:	607b      	str	r3, [r7, #4]
        i++;
 80024d2:	7bbb      	ldrb	r3, [r7, #14]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b2f      	cmp	r3, #47	; 0x2f
 80024de:	d903      	bls.n	80024e8 <ParseNumber+0x62>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b39      	cmp	r3, #57	; 0x39
 80024e6:	d9e6      	bls.n	80024b6 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <ParseNumber+0x6e>
        *cnt = i;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	7bba      	ldrb	r2, [r7, #14]
 80024f2:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <ParseNumber+0x7a>
        return 0 - sum;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	425b      	negs	r3, r3
 80024fe:	e000      	b.n	8002502 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8002500:	68bb      	ldr	r3, [r7, #8]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800251c:	e019      	b.n	8002552 <ParseMAC+0x44>
    hexcnt = 1;
 800251e:	2301      	movs	r3, #1
 8002520:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b3a      	cmp	r3, #58	; 0x3a
 8002528:	d00e      	beq.n	8002548 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 800252a:	f107 030e 	add.w	r3, r7, #14
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff68 	bl	8002406 <ParseHexNumber>
 8002536:	4601      	mov	r1, r0
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	73fa      	strb	r2, [r7, #15]
 800253e:	461a      	mov	r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8002548:	7bbb      	ldrb	r3, [r7, #14]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1e1      	bne.n	800251e <ParseMAC+0x10>
  }
}
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8002572:	e019      	b.n	80025a8 <ParseIP+0x44>
    hexcnt = 1;
 8002574:	2301      	movs	r3, #1
 8002576:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b2e      	cmp	r3, #46	; 0x2e
 800257e:	d00e      	beq.n	800259e <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8002580:	f107 030e 	add.w	r3, r7, #14
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ff7d 	bl	8002486 <ParseNumber>
 800258c:	4601      	mov	r1, r0
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	73fa      	strb	r2, [r7, #15]
 8002594:	461a      	mov	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	4413      	add	r3, r2
 800259a:	b2ca      	uxtb	r2, r1
 800259c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800259e:	7bbb      	ldrb	r3, [r7, #14]
 80025a0:	461a      	mov	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e1      	bne.n	8002574 <ParseIP+0x10>
  }
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	3302      	adds	r3, #2
 80025ce:	4934      	ldr	r1, [pc, #208]	; (80026a0 <AT_ParseInfo+0xe4>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f007 fb21 	bl	8009c18 <strtok>
 80025d6:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80025d8:	e05a      	b.n	8002690 <AT_ParseInfo+0xd4>
    switch (num++) {
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	72fa      	strb	r2, [r7, #11]
 80025e0:	2b06      	cmp	r3, #6
 80025e2:	d84f      	bhi.n	8002684 <AT_ParseInfo+0xc8>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <AT_ParseInfo+0x30>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	08002609 	.word	0x08002609
 80025f0:	08002617 	.word	0x08002617
 80025f4:	08002627 	.word	0x08002627
 80025f8:	08002637 	.word	0x08002637
 80025fc:	08002647 	.word	0x08002647
 8002600:	08002657 	.word	0x08002657
 8002604:	0800266b 	.word	0x0800266b
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	4618      	mov	r0, r3
 8002610:	f007 fad8 	bl	8009bc4 <strncpy>
      break;
 8002614:	e037      	b.n	8002686 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3320      	adds	r3, #32
 800261a:	2218      	movs	r2, #24
 800261c:	68f9      	ldr	r1, [r7, #12]
 800261e:	4618      	mov	r0, r3
 8002620:	f007 fad0 	bl	8009bc4 <strncpy>
      break;
 8002624:	e02f      	b.n	8002686 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3338      	adds	r3, #56	; 0x38
 800262a:	2210      	movs	r2, #16
 800262c:	68f9      	ldr	r1, [r7, #12]
 800262e:	4618      	mov	r0, r3
 8002630:	f007 fac8 	bl	8009bc4 <strncpy>
      break;
 8002634:	e027      	b.n	8002686 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3348      	adds	r3, #72	; 0x48
 800263a:	2210      	movs	r2, #16
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	4618      	mov	r0, r3
 8002640:	f007 fac0 	bl	8009bc4 <strncpy>
      break;
 8002644:	e01f      	b.n	8002686 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3358      	adds	r3, #88	; 0x58
 800264a:	2210      	movs	r2, #16
 800264c:	68f9      	ldr	r1, [r7, #12]
 800264e:	4618      	mov	r0, r3
 8002650:	f007 fab8 	bl	8009bc4 <strncpy>
      break;
 8002654:	e017      	b.n	8002686 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8002656:	2100      	movs	r1, #0
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff ff14 	bl	8002486 <ParseNumber>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8002668:	e00d      	b.n	8002686 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800266a:	490e      	ldr	r1, [pc, #56]	; (80026a4 <AT_ParseInfo+0xe8>)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f007 fad3 	bl	8009c18 <strtok>
 8002672:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3368      	adds	r3, #104	; 0x68
 8002678:	2220      	movs	r2, #32
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	4618      	mov	r0, r3
 800267e:	f007 faa1 	bl	8009bc4 <strncpy>
      break;
 8002682:	e000      	b.n	8002686 <AT_ParseInfo+0xca>

    default: break;
 8002684:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8002686:	4906      	ldr	r1, [pc, #24]	; (80026a0 <AT_ParseInfo+0xe4>)
 8002688:	2000      	movs	r0, #0
 800268a:	f007 fac5 	bl	8009c18 <strtok>
 800268e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1a1      	bne.n	80025da <AT_ParseInfo+0x1e>
  }
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	0800b3a8 	.word	0x0800b3a8
 80026a4:	0800b3ac 	.word	0x0800b3ac

080026a8 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3302      	adds	r3, #2
 80026ba:	4952      	ldr	r1, [pc, #328]	; (8002804 <AT_ParseConnSettings+0x15c>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f007 faab 	bl	8009c18 <strtok>
 80026c2:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80026c4:	e095      	b.n	80027f2 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	73fa      	strb	r2, [r7, #15]
 80026cc:	2b0b      	cmp	r3, #11
 80026ce:	d87f      	bhi.n	80027d0 <AT_ParseConnSettings+0x128>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <AT_ParseConnSettings+0x30>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	08002709 	.word	0x08002709
 80026dc:	08002717 	.word	0x08002717
 80026e0:	08002727 	.word	0x08002727
 80026e4:	0800273b 	.word	0x0800273b
 80026e8:	0800274f 	.word	0x0800274f
 80026ec:	08002763 	.word	0x08002763
 80026f0:	08002771 	.word	0x08002771
 80026f4:	0800277f 	.word	0x0800277f
 80026f8:	0800278d 	.word	0x0800278d
 80026fc:	0800279b 	.word	0x0800279b
 8002700:	080027a9 	.word	0x080027a9
 8002704:	080027bd 	.word	0x080027bd
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2221      	movs	r2, #33	; 0x21
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f007 fa58 	bl	8009bc4 <strncpy>
      break;
 8002714:	e05d      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3321      	adds	r3, #33	; 0x21
 800271a:	2221      	movs	r2, #33	; 0x21
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	4618      	mov	r0, r3
 8002720:	f007 fa50 	bl	8009bc4 <strncpy>
      break;
 8002724:	e055      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8002726:	2100      	movs	r1, #0
 8002728:	68b8      	ldr	r0, [r7, #8]
 800272a:	f7ff feac 	bl	8002486 <ParseNumber>
 800272e:	4603      	mov	r3, r0
 8002730:	b2da      	uxtb	r2, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8002738:	e04b      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800273a:	2100      	movs	r1, #0
 800273c:	68b8      	ldr	r0, [r7, #8]
 800273e:	f7ff fea2 	bl	8002486 <ParseNumber>
 8002742:	4603      	mov	r3, r0
 8002744:	b2da      	uxtb	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800274c:	e041      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800274e:	2100      	movs	r1, #0
 8002750:	68b8      	ldr	r0, [r7, #8]
 8002752:	f7ff fe98 	bl	8002486 <ParseNumber>
 8002756:	4603      	mov	r3, r0
 8002758:	b2da      	uxtb	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8002760:	e037      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	3348      	adds	r3, #72	; 0x48
 8002766:	4619      	mov	r1, r3
 8002768:	68b8      	ldr	r0, [r7, #8]
 800276a:	f7ff fefb 	bl	8002564 <ParseIP>
      break;
 800276e:	e030      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	334c      	adds	r3, #76	; 0x4c
 8002774:	4619      	mov	r1, r3
 8002776:	68b8      	ldr	r0, [r7, #8]
 8002778:	f7ff fef4 	bl	8002564 <ParseIP>
      break;
 800277c:	e029      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	3350      	adds	r3, #80	; 0x50
 8002782:	4619      	mov	r1, r3
 8002784:	68b8      	ldr	r0, [r7, #8]
 8002786:	f7ff feed 	bl	8002564 <ParseIP>
      break;
 800278a:	e022      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3354      	adds	r3, #84	; 0x54
 8002790:	4619      	mov	r1, r3
 8002792:	68b8      	ldr	r0, [r7, #8]
 8002794:	f7ff fee6 	bl	8002564 <ParseIP>
      break;
 8002798:	e01b      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3358      	adds	r3, #88	; 0x58
 800279e:	4619      	mov	r1, r3
 80027a0:	68b8      	ldr	r0, [r7, #8]
 80027a2:	f7ff fedf 	bl	8002564 <ParseIP>
      break;
 80027a6:	e014      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80027a8:	2100      	movs	r1, #0
 80027aa:	68b8      	ldr	r0, [r7, #8]
 80027ac:	f7ff fe6b 	bl	8002486 <ParseNumber>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 80027ba:	e00a      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80027bc:	2100      	movs	r1, #0
 80027be:	68b8      	ldr	r0, [r7, #8]
 80027c0:	f7ff fe61 	bl	8002486 <ParseNumber>
 80027c4:	4603      	mov	r3, r0
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80027ce:	e000      	b.n	80027d2 <AT_ParseConnSettings+0x12a>

    default:
      break;
 80027d0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80027d2:	490c      	ldr	r1, [pc, #48]	; (8002804 <AT_ParseConnSettings+0x15c>)
 80027d4:	2000      	movs	r0, #0
 80027d6:	f007 fa1f 	bl	8009c18 <strtok>
 80027da:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <AT_ParseConnSettings+0x14a>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b2c      	cmp	r3, #44	; 0x2c
 80027ea:	d102      	bne.n	80027f2 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	3301      	adds	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f af66 	bne.w	80026c6 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	0800b3a8 	.word	0x0800b3a8

08002808 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3302      	adds	r3, #2
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b31      	cmp	r3, #49	; 0x31
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	701a      	strb	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800284e:	68b8      	ldr	r0, [r7, #8]
 8002850:	f7fd fcd6 	bl	8000200 <strlen>
 8002854:	4603      	mov	r3, r0
 8002856:	b299      	uxth	r1, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800285e:	461a      	mov	r2, r3
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	47a0      	blx	r4
 8002864:	4603      	mov	r3, r0
 8002866:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	dd3e      	ble.n	80028ec <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800287a:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
 8002882:	4603      	mov	r3, r0
 8002884:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8002886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800288a:	2b00      	cmp	r3, #0
 800288c:	dd27      	ble.n	80028de <AT_ExecuteCommand+0xaa>
 800288e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002892:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002896:	dc22      	bgt.n	80028de <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8002898:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800289c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80028a0:	d105      	bne.n	80028ae <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 80028a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 80028ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 80028ba:	490f      	ldr	r1, [pc, #60]	; (80028f8 <AT_ExecuteCommand+0xc4>)
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f007 f994 	bl	8009bea <strstr>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <AT_ExecuteCommand+0x98>
      {
        return ES_WIFI_STATUS_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e010      	b.n	80028ee <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80028cc:	490b      	ldr	r1, [pc, #44]	; (80028fc <AT_ExecuteCommand+0xc8>)
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f007 f98b 	bl	8009bea <strstr>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <AT_ExecuteCommand+0xaa>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80028da:	2305      	movs	r3, #5
 80028dc:	e007      	b.n	80028ee <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80028de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028e2:	f113 0f04 	cmn.w	r3, #4
 80028e6:	d101      	bne.n	80028ec <AT_ExecuteCommand+0xb8>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 80028e8:	2306      	movs	r3, #6
 80028ea:	e000      	b.n	80028ee <AT_ExecuteCommand+0xba>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80028ec:	2304      	movs	r3, #4
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd90      	pop	{r4, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	0800b3bc 	.word	0x0800b3bc
 80028fc:	0800b3c8 	.word	0x0800b3c8

08002900 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 800291a:	68b8      	ldr	r0, [r7, #8]
 800291c:	f7fd fc70 	bl	8000200 <strlen>
 8002920:	4603      	mov	r3, r0
 8002922:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8002924:	8a7b      	ldrh	r3, [r7, #18]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <AT_RequestSendData+0x32>
 800292e:	2302      	movs	r3, #2
 8002930:	e053      	b.n	80029da <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800293e:	8a79      	ldrh	r1, [r7, #18]
 8002940:	68b8      	ldr	r0, [r7, #8]
 8002942:	4798      	blx	r3
 8002944:	4603      	mov	r3, r0
 8002946:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8002948:	8a3a      	ldrh	r2, [r7, #16]
 800294a:	8a7b      	ldrh	r3, [r7, #18]
 800294c:	429a      	cmp	r2, r3
 800294e:	d143      	bne.n	80029d8 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800295c:	8879      	ldrh	r1, [r7, #2]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
 8002962:	4603      	mov	r3, r0
 8002964:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8002966:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	429a      	cmp	r2, r3
 800296e:	d131      	bne.n	80029d4 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800297c:	2100      	movs	r1, #0
 800297e:	6a38      	ldr	r0, [r7, #32]
 8002980:	4798      	blx	r3
 8002982:	4603      	mov	r3, r0
 8002984:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8002986:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	dd19      	ble.n	80029c2 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800298e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002992:	6a3a      	ldr	r2, [r7, #32]
 8002994:	4413      	add	r3, r2
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800299a:	4912      	ldr	r1, [pc, #72]	; (80029e4 <AT_RequestSendData+0xe4>)
 800299c:	6a38      	ldr	r0, [r7, #32]
 800299e:	f007 f924 	bl	8009bea <strstr>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <AT_RequestSendData+0xac>
        {
          return ES_WIFI_STATUS_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e016      	b.n	80029da <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80029ac:	490e      	ldr	r1, [pc, #56]	; (80029e8 <AT_RequestSendData+0xe8>)
 80029ae:	6a38      	ldr	r0, [r7, #32]
 80029b0:	f007 f91b 	bl	8009bea <strstr>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <AT_RequestSendData+0xbe>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80029ba:	2305      	movs	r3, #5
 80029bc:	e00d      	b.n	80029da <AT_RequestSendData+0xda>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 80029be:	2302      	movs	r3, #2
 80029c0:	e00b      	b.n	80029da <AT_RequestSendData+0xda>
        }
      }
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80029c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029c6:	f113 0f04 	cmn.w	r3, #4
 80029ca:	d101      	bne.n	80029d0 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80029cc:	2306      	movs	r3, #6
 80029ce:	e004      	b.n	80029da <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80029d0:	2302      	movs	r3, #2
 80029d2:	e002      	b.n	80029da <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80029d4:	2302      	movs	r3, #2
 80029d6:	e000      	b.n	80029da <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80029d8:	2304      	movs	r3, #4
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	0800b3bc 	.word	0x0800b3bc
 80029e8:	0800b3c8 	.word	0x0800b3c8

080029ec <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a00:	613b      	str	r3, [r7, #16]

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8002a08:	68b8      	ldr	r0, [r7, #8]
 8002a0a:	f7fd fbf9 	bl	8000200 <strlen>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b299      	uxth	r1, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68b8      	ldr	r0, [r7, #8]
 8002a1c:	47a0      	blx	r4
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	dd6f      	ble.n	8002b04 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8002a30:	2100      	movs	r1, #0
 8002a32:	6938      	ldr	r0, [r7, #16]
 8002a34:	4798      	blx	r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	617b      	str	r3, [r7, #20]
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f113 0f04 	cmn.w	r3, #4
 8002a40:	d101      	bne.n	8002a46 <AT_RequestReceiveData+0x5a>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
 8002a42:	2306      	movs	r3, #6
 8002a44:	e05f      	b.n	8002b06 <AT_RequestReceiveData+0x11a>
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b0d      	cmp	r3, #13
 8002a4c:	d104      	bne.n	8002a58 <AT_RequestReceiveData+0x6c>
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	3301      	adds	r3, #1
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b0a      	cmp	r3, #10
 8002a56:	d001      	beq.n	8002a5c <AT_RequestReceiveData+0x70>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e054      	b.n	8002b06 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3b02      	subs	r3, #2
 8002a60:	617b      	str	r3, [r7, #20]
    p+=2;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3302      	adds	r3, #2
 8002a66:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b07      	cmp	r3, #7
 8002a6c:	d94a      	bls.n	8002b04 <AT_RequestReceiveData+0x118>
    {
     while(len && (p[len-1]==0x15)) len--;
 8002a6e:	e002      	b.n	8002a76 <AT_RequestReceiveData+0x8a>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d006      	beq.n	8002a8a <AT_RequestReceiveData+0x9e>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b15      	cmp	r3, #21
 8002a88:	d0f2      	beq.n	8002a70 <AT_RequestReceiveData+0x84>
     p[len] = '\0';
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3b08      	subs	r3, #8
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	491c      	ldr	r1, [pc, #112]	; (8002b10 <AT_RequestReceiveData+0x124>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f007 f8a3 	bl	8009bea <strstr>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <AT_RequestReceiveData+0xec>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b08      	subs	r3, #8
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d202      	bcs.n	8002ac6 <AT_RequestReceiveData+0xda>
       {
         *ReadData = Reqlen;
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	6939      	ldr	r1, [r7, #16]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f006 ffb4 	bl	8009a3c <memcpy>
       return ES_WIFI_STATUS_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e016      	b.n	8002b06 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3b04      	subs	r3, #4
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	490c      	ldr	r1, [pc, #48]	; (8002b14 <AT_RequestReceiveData+0x128>)
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f006 ff99 	bl	8009a1c <memcmp>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <AT_RequestReceiveData+0x10e>
     {
       *ReadData = 0;
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	2200      	movs	r2, #0
 8002af4:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002af6:	2305      	movs	r3, #5
 8002af8:	e005      	b.n	8002b06 <AT_RequestReceiveData+0x11a>
     }

     *ReadData = 0;
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	2200      	movs	r2, #0
 8002afe:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002b00:	2305      	movs	r3, #5
 8002b02:	e000      	b.n	8002b06 <AT_RequestReceiveData+0x11a>
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8002b04:	2304      	movs	r3, #4
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd90      	pop	{r4, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	0800b3bc 	.word	0x0800b3bc
 8002b14:	0800b3d0 	.word	0x0800b3d0

08002b18 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002b20:	2302      	movs	r3, #2
 8002b22:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2a:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002b34:	2000      	movs	r0, #0
 8002b36:	4798      	blx	r3
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d113      	bne.n	8002b66 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b44:	461a      	mov	r2, r3
 8002b46:	490a      	ldr	r1, [pc, #40]	; (8002b70 <ES_WIFI_Init+0x58>)
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fe73 	bl	8002834 <AT_ExecuteCommand>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fd2b 	bl	80025bc <AT_ParseInfo>
    }
  }
  return ret;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	0800b3d8 	.word	0x0800b3d8

08002b74 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <ES_WIFI_RegisterBusIO+0x2c>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <ES_WIFI_RegisterBusIO+0x2c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <ES_WIFI_RegisterBusIO+0x2c>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <ES_WIFI_RegisterBusIO+0x2c>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e014      	b.n	8002bce <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <ES_WIFI_Connect+0x1a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <ES_WIFI_Connect+0x20>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	75fb      	strb	r3, [r7, #23]
 8002bfa:	e062      	b.n	8002cc2 <ES_WIFI_Connect+0xe6>
  }
  else
  {
    LOCK_WIFI();

    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4931      	ldr	r1, [pc, #196]	; (8002ccc <ES_WIFI_Connect+0xf0>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f006 ffbc 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fe0a 	bl	8002834 <AT_ExecuteCommand>
 8002c20:	4603      	mov	r3, r0
 8002c22:	75fb      	strb	r3, [r7, #23]
    if(ret == ES_WIFI_STATUS_OK)
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d14b      	bne.n	8002cc2 <ES_WIFI_Connect+0xe6>
    {
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4927      	ldr	r1, [pc, #156]	; (8002cd0 <ES_WIFI_Connect+0xf4>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f006 ffa5 	bl	8009b84 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c46:	461a      	mov	r2, r3
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff fdf3 	bl	8002834 <AT_ExecuteCommand>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d134      	bne.n	8002cc2 <ES_WIFI_Connect+0xe6>
      {
        Obj->Security = SecType;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	491a      	ldr	r1, [pc, #104]	; (8002cd4 <ES_WIFI_Connect+0xf8>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f006 ff8a 	bl	8009b84 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff fdd8 	bl	8002834 <AT_ExecuteCommand>
 8002c84:	4603      	mov	r3, r0
 8002c86:	75fb      	strb	r3, [r7, #23]

        if(ret == ES_WIFI_STATUS_OK)
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d119      	bne.n	8002cc2 <ES_WIFI_Connect+0xe6>
        {
          sprintf((char*)Obj->CmdData,"C0\r");
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c94:	4910      	ldr	r1, [pc, #64]	; (8002cd8 <ES_WIFI_Connect+0xfc>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f006 ff74 	bl	8009b84 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff fdc2 	bl	8002834 <AT_ExecuteCommand>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	75fb      	strb	r3, [r7, #23]
          if(ret == ES_WIFI_STATUS_OK)
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <ES_WIFI_Connect+0xe6>
          {
            Obj->NetSettings.IsConnected = 1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
      }
    }

    UNLOCK_WIFI();
  }
  return ret;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	0800b3f0 	.word	0x0800b3f0
 8002cd0:	0800b3f8 	.word	0x0800b3f8
 8002cd4:	0800b400 	.word	0x0800b400
 8002cd8:	0800b408 	.word	0x0800b408

08002cdc <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cea:	4911      	ldr	r1, [pc, #68]	; (8002d30 <ES_WIFI_IsConnected+0x54>)
 8002cec:	4618      	mov	r0, r3
 8002cee:	f006 ff49 	bl	8009b84 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff fd97 	bl	8002834 <AT_ExecuteCommand>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d108      	bne.n	8002d22 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	33d2      	adds	r3, #210	; 0xd2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f7ff fd73 	bl	8002808 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	0800b40c 	.word	0x0800b40c

08002d34 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d42:	4910      	ldr	r1, [pc, #64]	; (8002d84 <ES_WIFI_GetNetworkSettings+0x50>)
 8002d44:	4618      	mov	r0, r3
 8002d46:	f006 ff1d 	bl	8009b84 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d56:	461a      	mov	r2, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff fd6b 	bl	8002834 <AT_ExecuteCommand>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d108      	bne.n	8002d7a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	338d      	adds	r3, #141	; 0x8d
 8002d72:	4619      	mov	r1, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f7ff fc97 	bl	80026a8 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	0800b414 	.word	0x0800b414

08002d88 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d98:	4912      	ldr	r1, [pc, #72]	; (8002de4 <ES_WIFI_GetMACAddress+0x5c>)
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f006 fef2 	bl	8009b84 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002dac:	461a      	mov	r2, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fd40 	bl	8002834 <AT_ExecuteCommand>
 8002db4:	4603      	mov	r3, r0
 8002db6:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <ES_WIFI_GetMACAddress+0x60>)
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f006 ff25 	bl	8009c18 <strtok>
 8002dce:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	68b8      	ldr	r0, [r7, #8]
 8002dd4:	f7ff fb9b 	bl	800250e <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	0800b464 	.word	0x0800b464
 8002de8:	0800b468 	.word	0x0800b468

08002dec <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <ES_WIFI_StartClientConnection+0x1e>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d105      	bne.n	8002e16 <ES_WIFI_StartClientConnection+0x2a>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	889b      	ldrh	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <ES_WIFI_StartClientConnection+0x2a>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0dd      	b.n	8002fd2 <ES_WIFI_StartClientConnection+0x1e6>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	789b      	ldrb	r3, [r3, #2]
 8002e20:	461a      	mov	r2, r3
 8002e22:	496e      	ldr	r1, [pc, #440]	; (8002fdc <ES_WIFI_StartClientConnection+0x1f0>)
 8002e24:	f006 feae 	bl	8009b84 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e34:	461a      	mov	r2, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fcfc 	bl	8002834 <AT_ExecuteCommand>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d114      	bne.n	8002e70 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4963      	ldr	r1, [pc, #396]	; (8002fe0 <ES_WIFI_StartClientConnection+0x1f4>)
 8002e54:	f006 fe96 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e64:	461a      	mov	r2, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fce4 	bl	8002834 <AT_ExecuteCommand>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d114      	bne.n	8002ea0 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	88db      	ldrh	r3, [r3, #6]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4958      	ldr	r1, [pc, #352]	; (8002fe4 <ES_WIFI_StartClientConnection+0x1f8>)
 8002e84:	f006 fe7e 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e94:	461a      	mov	r2, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff fccc 	bl	8002834 <AT_ExecuteCommand>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11c      	bne.n	8002ee0 <ES_WIFI_StartClientConnection+0xf4>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <ES_WIFI_StartClientConnection+0xca>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d114      	bne.n	8002ee0 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	889b      	ldrh	r3, [r3, #4]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4949      	ldr	r1, [pc, #292]	; (8002fe8 <ES_WIFI_StartClientConnection+0x1fc>)
 8002ec4:	f006 fe5e 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff fcac 	bl	8002834 <AT_ExecuteCommand>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d128      	bne.n	8002f38 <ES_WIFI_StartClientConnection+0x14c>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <ES_WIFI_StartClientConnection+0x10a>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d120      	bne.n	8002f38 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	7a1b      	ldrb	r3, [r3, #8]
 8002f00:	4619      	mov	r1, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7a5b      	ldrb	r3, [r3, #9]
 8002f06:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	7a9b      	ldrb	r3, [r3, #10]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002f0c:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	7adb      	ldrb	r3, [r3, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	9200      	str	r2, [sp, #0]
 8002f16:	4623      	mov	r3, r4
 8002f18:	460a      	mov	r2, r1
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <ES_WIFI_StartClientConnection+0x200>)
 8002f1c:	f006 fe32 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fc80 	bl	8002834 <AT_ExecuteCommand>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <ES_WIFI_StartClientConnection+0x184>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d114      	bne.n	8002f70 <ES_WIFI_StartClientConnection+0x184>
  {
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4927      	ldr	r1, [pc, #156]	; (8002ff0 <ES_WIFI_StartClientConnection+0x204>)
 8002f54:	f006 fe16 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f64:	461a      	mov	r2, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff fc64 	bl	8002834 <AT_ExecuteCommand>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <ES_WIFI_StartClientConnection+0x1b8>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d112      	bne.n	8002fa4 <ES_WIFI_StartClientConnection+0x1b8>
  {
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f84:	491b      	ldr	r1, [pc, #108]	; (8002ff4 <ES_WIFI_StartClientConnection+0x208>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f006 fdfc 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fc4a 	bl	8002834 <AT_ExecuteCommand>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	73fb      	strb	r3, [r7, #15]
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d112      	bne.n	8002fd0 <ES_WIFI_StartClientConnection+0x1e4>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fb0:	4911      	ldr	r1, [pc, #68]	; (8002ff8 <ES_WIFI_StartClientConnection+0x20c>)
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f006 fde6 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fc34 	bl	8002834 <AT_ExecuteCommand>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	0800b4cc 	.word	0x0800b4cc
 8002fe0:	0800b4d4 	.word	0x0800b4d4
 8002fe4:	0800b4dc 	.word	0x0800b4dc
 8002fe8:	0800b4e4 	.word	0x0800b4e4
 8002fec:	0800b4ec 	.word	0x0800b4ec
 8002ff0:	0800b4fc 	.word	0x0800b4fc
 8002ff4:	0800b504 	.word	0x0800b504
 8002ff8:	0800b50c 	.word	0x0800b50c

08002ffc <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	461a      	mov	r2, r3
 8003008:	460b      	mov	r3, r1
 800300a:	72fb      	strb	r3, [r7, #11]
 800300c:	4613      	mov	r3, r2
 800300e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8003010:	2302      	movs	r3, #2
 8003012:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800301a:	2301      	movs	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e001      	b.n	8003024 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8003024:	893b      	ldrh	r3, [r7, #8]
 8003026:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800302a:	d302      	bcc.n	8003032 <ES_WIFI_SendData+0x36>
 800302c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8003030:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	893a      	ldrh	r2, [r7, #8]
 8003036:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800303e:	7afa      	ldrb	r2, [r7, #11]
 8003040:	492d      	ldr	r1, [pc, #180]	; (80030f8 <ES_WIFI_SendData+0xfc>)
 8003042:	4618      	mov	r0, r3
 8003044:	f006 fd9e 	bl	8009b84 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003054:	461a      	mov	r2, r3
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff fbec 	bl	8002834 <AT_ExecuteCommand>
 800305c:	4603      	mov	r3, r0
 800305e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d13c      	bne.n	80030e0 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4923      	ldr	r1, [pc, #140]	; (80030fc <ES_WIFI_SendData+0x100>)
 8003070:	4618      	mov	r0, r3
 8003072:	f006 fd87 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003082:	461a      	mov	r2, r3
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f7ff fbd5 	bl	8002834 <AT_ExecuteCommand>
 800308a:	4603      	mov	r3, r0
 800308c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d125      	bne.n	80030e0 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800309a:	893a      	ldrh	r2, [r7, #8]
 800309c:	4918      	ldr	r1, [pc, #96]	; (8003100 <ES_WIFI_SendData+0x104>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f006 fd70 	bl	8009b84 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030b0:	893a      	ldrh	r2, [r7, #8]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff fc21 	bl	8002900 <AT_RequestSendData>
 80030be:	4603      	mov	r3, r0
 80030c0:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <ES_WIFI_SendData+0xe4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030ce:	490d      	ldr	r1, [pc, #52]	; (8003104 <ES_WIFI_SendData+0x108>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f006 fd8a 	bl	8009bea <strstr>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <ES_WIFI_SendData+0xe4>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 80030dc:	2302      	movs	r3, #2
 80030de:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d102      	bne.n	80030ec <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2200      	movs	r2, #0
 80030ea:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	0800b4cc 	.word	0x0800b4cc
 80030fc:	0800b5b0 	.word	0x0800b5b0
 8003100:	0800b5b8 	.word	0x0800b5b8
 8003104:	0800b5c4 	.word	0x0800b5c4

08003108 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	461a      	mov	r2, r3
 8003114:	460b      	mov	r3, r1
 8003116:	72fb      	strb	r3, [r7, #11]
 8003118:	4613      	mov	r3, r2
 800311a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800311c:	2302      	movs	r3, #2
 800311e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8003126:	2301      	movs	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	e001      	b.n	8003130 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003136:	d862      	bhi.n	80031fe <ES_WIFI_ReceiveData+0xf6>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800313e:	7afa      	ldrb	r2, [r7, #11]
 8003140:	4931      	ldr	r1, [pc, #196]	; (8003208 <ES_WIFI_ReceiveData+0x100>)
 8003142:	4618      	mov	r0, r3
 8003144:	f006 fd1e 	bl	8009b84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003154:	461a      	mov	r2, r3
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff fb6c 	bl	8002834 <AT_ExecuteCommand>
 800315c:	4603      	mov	r3, r0
 800315e:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d146      	bne.n	80031f4 <ES_WIFI_ReceiveData+0xec>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800316c:	893a      	ldrh	r2, [r7, #8]
 800316e:	4927      	ldr	r1, [pc, #156]	; (800320c <ES_WIFI_ReceiveData+0x104>)
 8003170:	4618      	mov	r0, r3
 8003172:	f006 fd07 	bl	8009b84 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003182:	461a      	mov	r2, r3
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff fb55 	bl	8002834 <AT_ExecuteCommand>
 800318a:	4603      	mov	r3, r0
 800318c:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d12b      	bne.n	80031ec <ES_WIFI_ReceiveData+0xe4>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	491c      	ldr	r1, [pc, #112]	; (8003210 <ES_WIFI_ReceiveData+0x108>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f006 fcf0 	bl	8009b84 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031b0:	461a      	mov	r2, r3
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff fb3e 	bl	8002834 <AT_ExecuteCommand>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11d      	bne.n	80031fe <ES_WIFI_ReceiveData+0xf6>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031c8:	4912      	ldr	r1, [pc, #72]	; (8003214 <ES_WIFI_ReceiveData+0x10c>)
 80031ca:	4618      	mov	r0, r3
 80031cc:	f006 fcda 	bl	8009b84 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80031d6:	893a      	ldrh	r2, [r7, #8]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff fc03 	bl	80029ec <AT_RequestReceiveData>
 80031e6:	4603      	mov	r3, r0
 80031e8:	74fb      	strb	r3, [r7, #19]
 80031ea:	e008      	b.n	80031fe <ES_WIFI_ReceiveData+0xf6>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
        *Receivedlen = 0;
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2200      	movs	r2, #0
 80031f0:	801a      	strh	r2, [r3, #0]
 80031f2:	e004      	b.n	80031fe <ES_WIFI_ReceiveData+0xf6>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
      issue15++;
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <ES_WIFI_ReceiveData+0x110>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <ES_WIFI_ReceiveData+0x110>)
 80031fc:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	0800b4cc 	.word	0x0800b4cc
 800320c:	0800b5cc 	.word	0x0800b5cc
 8003210:	0800b5d4 	.word	0x0800b5d4
 8003214:	0800b5dc 	.word	0x0800b5dc
 8003218:	2000088c 	.word	0x2000088c

0800321c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003226:	2003      	movs	r0, #3
 8003228:	f001 f848 	bl	80042bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800322c:	2000      	movs	r0, #0
 800322e:	f000 f80d 	bl	800324c <HAL_InitTick>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	71fb      	strb	r3, [r7, #7]
 800323c:	e001      	b.n	8003242 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800323e:	f7fe fbdb 	bl	80019f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003242:	79fb      	ldrb	r3, [r7, #7]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_InitTick+0x6c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d023      	beq.n	80032a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_InitTick+0x70>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_InitTick+0x6c>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f001 f855 	bl	8004326 <HAL_SYSTICK_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	d809      	bhi.n	800329c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003288:	2200      	movs	r2, #0
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f001 f81f 	bl	80042d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HAL_InitTick+0x74>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e007      	b.n	80032ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e004      	b.n	80032ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	e001      	b.n	80032ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000008 	.word	0x20000008
 80032bc:	20000000 	.word	0x20000000
 80032c0:	20000004 	.word	0x20000004

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000008 	.word	0x20000008
 80032e8:	20000890 	.word	0x20000890

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000890 	.word	0x20000890

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d005      	beq.n	800332a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_Delay+0x44>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800332a:	bf00      	nop
 800332c:	f7ff ffde 	bl	80032ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f7      	bhi.n	800332c <HAL_Delay+0x28>
  {
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000008 	.word	0x20000008

0800334c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	609a      	str	r2, [r3, #8]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3360      	adds	r3, #96	; 0x60
 80033c6:	461a      	mov	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <LL_ADC_SetOffset+0x44>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80033ec:	bf00      	nop
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	03fff000 	.word	0x03fff000

080033fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3360      	adds	r3, #96	; 0x60
 800340a:	461a      	mov	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3360      	adds	r3, #96	; 0x60
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	431a      	orrs	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	615a      	str	r2, [r3, #20]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3330      	adds	r3, #48	; 0x30
 8003494:	461a      	mov	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	4413      	add	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	211f      	movs	r1, #31
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0e9b      	lsrs	r3, r3, #26
 80034bc:	f003 011f 	and.w	r1, r3, #31
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	431a      	orrs	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3314      	adds	r3, #20
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	0e5b      	lsrs	r3, r3, #25
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	4413      	add	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	0d1b      	lsrs	r3, r3, #20
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2107      	movs	r1, #7
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	401a      	ands	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	0d1b      	lsrs	r3, r3, #20
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	431a      	orrs	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0318 	and.w	r3, r3, #24
 8003556:	4908      	ldr	r1, [pc, #32]	; (8003578 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003558:	40d9      	lsrs	r1, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	400b      	ands	r3, r1
 800355e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003562:	431a      	orrs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	0007ffff 	.word	0x0007ffff

0800357c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800358c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6093      	str	r3, [r2, #8]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b4:	d101      	bne.n	80035ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80035d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003604:	d101      	bne.n	800360a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <LL_ADC_IsEnabled+0x18>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <LL_ADC_IsEnabled+0x1a>
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b04      	cmp	r3, #4
 8003650:	d101      	bne.n	8003656 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d101      	bne.n	800367c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e12f      	b.n	8003906 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fe f9c3 	bl	8001a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff67 	bl	80035a0 <LL_ADC_IsDeepPowerDownEnabled>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff ff4d 	bl	800357c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff82 	bl	80035f0 <LL_ADC_IsInternalRegulatorEnabled>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d115      	bne.n	800371e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ff66 	bl	80035c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036fc:	4b84      	ldr	r3, [pc, #528]	; (8003910 <HAL_ADC_Init+0x284>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	4a84      	ldr	r2, [pc, #528]	; (8003914 <HAL_ADC_Init+0x288>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	099b      	lsrs	r3, r3, #6
 800370a:	3301      	adds	r3, #1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003710:	e002      	b.n	8003718 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3b01      	subs	r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f9      	bne.n	8003712 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff ff64 	bl	80035f0 <LL_ADC_IsInternalRegulatorEnabled>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	f043 0210 	orr.w	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff ff75 	bl	800363e <LL_ADC_REG_IsConversionOngoing>
 8003754:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 80c8 	bne.w	80038f4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 80c4 	bne.w	80038f4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003774:	f043 0202 	orr.w	r2, r3, #2
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff49 	bl	8003618 <LL_ADC_IsEnabled>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10b      	bne.n	80037a4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800378c:	4862      	ldr	r0, [pc, #392]	; (8003918 <HAL_ADC_Init+0x28c>)
 800378e:	f7ff ff43 	bl	8003618 <LL_ADC_IsEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4619      	mov	r1, r3
 800379e:	485f      	ldr	r0, [pc, #380]	; (800391c <HAL_ADC_Init+0x290>)
 80037a0:	f7ff fdd4 	bl	800334c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	7e5b      	ldrb	r3, [r3, #25]
 80037a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80037b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80037ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d106      	bne.n	80037e0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	3b01      	subs	r3, #1
 80037d8:	045b      	lsls	r3, r3, #17
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d009      	beq.n	80037fc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_ADC_Init+0x294>)
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	69b9      	ldr	r1, [r7, #24]
 800380c:	430b      	orrs	r3, r1
 800380e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff12 	bl	800363e <LL_ADC_REG_IsConversionOngoing>
 800381a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff1f 	bl	8003664 <LL_ADC_INJ_IsConversionOngoing>
 8003826:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d140      	bne.n	80038b0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d13d      	bne.n	80038b0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7e1b      	ldrb	r3, [r3, #24]
 800383c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800383e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003846:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003856:	f023 0306 	bic.w	r3, r3, #6
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	69b9      	ldr	r1, [r7, #24]
 8003860:	430b      	orrs	r3, r1
 8003862:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800386a:	2b01      	cmp	r3, #1
 800386c:	d118      	bne.n	80038a0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003884:	4311      	orrs	r1, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003890:	430a      	orrs	r2, r1
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	e007      	b.n	80038b0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d10c      	bne.n	80038d2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f023 010f 	bic.w	r1, r3, #15
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	1e5a      	subs	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
 80038d0:	e007      	b.n	80038e2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 020f 	bic.w	r2, r2, #15
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	f023 0303 	bic.w	r3, r3, #3
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	659a      	str	r2, [r3, #88]	; 0x58
 80038f2:	e007      	b.n	8003904 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	f043 0210 	orr.w	r2, r3, #16
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003904:	7ffb      	ldrb	r3, [r7, #31]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000000 	.word	0x20000000
 8003914:	053e2d63 	.word	0x053e2d63
 8003918:	50040000 	.word	0x50040000
 800391c:	50040300 	.word	0x50040300
 8003920:	fff0c007 	.word	0xfff0c007

08003924 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b0b6      	sub	sp, #216	; 0xd8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x22>
 8003942:	2302      	movs	r3, #2
 8003944:	e3d5      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x7ce>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fe73 	bl	800363e <LL_ADC_REG_IsConversionOngoing>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 83ba 	bne.w	80040d4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b05      	cmp	r3, #5
 8003966:	d824      	bhi.n	80039b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	3b02      	subs	r3, #2
 800396e:	2b03      	cmp	r3, #3
 8003970:	d81b      	bhi.n	80039aa <HAL_ADC_ConfigChannel+0x86>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <HAL_ADC_ConfigChannel+0x54>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	08003989 	.word	0x08003989
 800397c:	08003991 	.word	0x08003991
 8003980:	08003999 	.word	0x08003999
 8003984:	080039a1 	.word	0x080039a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	220c      	movs	r2, #12
 800398c:	605a      	str	r2, [r3, #4]
          break;
 800398e:	e011      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2212      	movs	r2, #18
 8003994:	605a      	str	r2, [r3, #4]
          break;
 8003996:	e00d      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2218      	movs	r2, #24
 800399c:	605a      	str	r2, [r3, #4]
          break;
 800399e:	e009      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a6:	605a      	str	r2, [r3, #4]
          break;
 80039a8:	e004      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2206      	movs	r2, #6
 80039ae:	605a      	str	r2, [r3, #4]
          break;
 80039b0:	e000      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80039b2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	f7ff fd5f 	bl	8003484 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fe37 	bl	800363e <LL_ADC_REG_IsConversionOngoing>
 80039d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fe43 	bl	8003664 <LL_ADC_INJ_IsConversionOngoing>
 80039de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 81c1 	bne.w	8003d6e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 81bc 	bne.w	8003d6e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039fe:	d10f      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f7ff fd66 	bl	80034dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fd20 	bl	800345e <LL_ADC_SetSamplingTimeCommonConfig>
 8003a1e:	e00e      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f7ff fd55 	bl	80034dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2100      	movs	r1, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fd10 	bl	800345e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	08db      	lsrs	r3, r3, #3
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d00a      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6919      	ldr	r1, [r3, #16]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a70:	f7ff fca0 	bl	80033b4 <LL_ADC_SetOffset>
 8003a74:	e17b      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fcbd 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x17e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fcb2 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	0e9b      	lsrs	r3, r3, #26
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	e01e      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x1bc>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fca7 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e004      	b.n	8003ade <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x1d4>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	0e9b      	lsrs	r3, r3, #26
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	e018      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x206>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	e004      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003b20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d106      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fc76 	bl	8003428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fc5a 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x244>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2101      	movs	r1, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fc4f 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	f003 021f 	and.w	r2, r3, #31
 8003b66:	e01e      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x282>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fc44 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003b96:	2320      	movs	r3, #32
 8003b98:	e004      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x29a>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	0e9b      	lsrs	r3, r3, #26
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	e018      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x2cc>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003be2:	2320      	movs	r3, #32
 8003be4:	e004      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d106      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fc13 	bl	8003428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2102      	movs	r1, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fbf7 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x30a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fbec 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003c24:	4603      	mov	r3, r0
 8003c26:	0e9b      	lsrs	r3, r3, #26
 8003c28:	f003 021f 	and.w	r2, r3, #31
 8003c2c:	e01e      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x348>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fbe1 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e004      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x360>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0e9b      	lsrs	r3, r3, #26
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	e016      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x38e>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003c96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e004      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d106      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fbb2 	bl	8003428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2103      	movs	r1, #3
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fb96 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x3cc>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2103      	movs	r1, #3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fb8b 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	0e9b      	lsrs	r3, r3, #26
 8003cea:	f003 021f 	and.w	r2, r3, #31
 8003cee:	e017      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x3fc>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2103      	movs	r1, #3
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fb80 	bl	80033fc <LL_ADC_GetOffsetChannel>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d0a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003d12:	2320      	movs	r3, #32
 8003d14:	e003      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x414>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	0e9b      	lsrs	r3, r3, #26
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	e011      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x438>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	e003      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d106      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2103      	movs	r1, #3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fb5d 	bl	8003428 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fc50 	bl	8003618 <LL_ADC_IsEnabled>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 8140 	bne.w	8004000 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6819      	ldr	r1, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f7ff fbd1 	bl	8003534 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4a8f      	ldr	r2, [pc, #572]	; (8003fd4 <HAL_ADC_ConfigChannel+0x6b0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	f040 8131 	bne.w	8004000 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x4a2>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0e9b      	lsrs	r3, r3, #26
 8003db4:	3301      	adds	r3, #1
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	bf94      	ite	ls
 8003dbe:	2301      	movls	r3, #1
 8003dc0:	2300      	movhi	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e019      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x4d6>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003dd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dd6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003dde:	2320      	movs	r3, #32
 8003de0:	e003      	b.n	8003dea <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de4:	fab3 f383 	clz	r3, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2b09      	cmp	r3, #9
 8003df2:	bf94      	ite	ls
 8003df4:	2301      	movls	r3, #1
 8003df6:	2300      	movhi	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d079      	beq.n	8003ef2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d107      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x4f6>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	0e9b      	lsrs	r3, r3, #26
 8003e10:	3301      	adds	r3, #1
 8003e12:	069b      	lsls	r3, r3, #26
 8003e14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e18:	e015      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x522>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003e32:	2320      	movs	r3, #32
 8003e34:	e003      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	069b      	lsls	r3, r3, #26
 8003e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x542>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0e9b      	lsrs	r3, r3, #26
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2101      	movs	r1, #1
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	e017      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x572>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	e003      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	ea42 0103 	orr.w	r1, r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x598>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	0e9b      	lsrs	r3, r3, #26
 8003eac:	3301      	adds	r3, #1
 8003eae:	f003 021f 	and.w	r2, r3, #31
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	051b      	lsls	r3, r3, #20
 8003eba:	e018      	b.n	8003eee <HAL_ADC_ConfigChannel+0x5ca>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	e003      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f003 021f 	and.w	r2, r3, #31
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	e081      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d107      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x5ea>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0e9b      	lsrs	r3, r3, #26
 8003f04:	3301      	adds	r3, #1
 8003f06:	069b      	lsls	r3, r3, #26
 8003f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f0c:	e015      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x616>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003f26:	2320      	movs	r3, #32
 8003f28:	e003      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	fab3 f383 	clz	r3, r3
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	3301      	adds	r3, #1
 8003f34:	069b      	lsls	r3, r3, #26
 8003f36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x636>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	0e9b      	lsrs	r3, r3, #26
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f303 	lsl.w	r3, r1, r3
 8003f58:	e017      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x666>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	61fb      	str	r3, [r7, #28]
  return result;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003f72:	2320      	movs	r3, #32
 8003f74:	e003      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	ea42 0103 	orr.w	r1, r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x692>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	0e9b      	lsrs	r3, r3, #26
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f003 021f 	and.w	r2, r3, #31
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	3b1e      	subs	r3, #30
 8003fae:	051b      	lsls	r3, r3, #20
 8003fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	e01e      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x6d0>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	613b      	str	r3, [r7, #16]
  return result;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e006      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x6bc>
 8003fd2:	bf00      	nop
 8003fd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f003 021f 	and.w	r2, r3, #31
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	3b1e      	subs	r3, #30
 8003fee:	051b      	lsls	r3, r3, #20
 8003ff0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	6892      	ldr	r2, [r2, #8]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7ff fa6e 	bl	80034dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <HAL_ADC_ConfigChannel+0x7d8>)
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d06c      	beq.n	80040e6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800400c:	483c      	ldr	r0, [pc, #240]	; (8004100 <HAL_ADC_ConfigChannel+0x7dc>)
 800400e:	f7ff f9c3 	bl	8003398 <LL_ADC_GetCommonPathInternalCh>
 8004012:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a3a      	ldr	r2, [pc, #232]	; (8004104 <HAL_ADC_ConfigChannel+0x7e0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d127      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d121      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a35      	ldr	r2, [pc, #212]	; (8004108 <HAL_ADC_ConfigChannel+0x7e4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d157      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800403a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800403e:	4619      	mov	r1, r3
 8004040:	482f      	ldr	r0, [pc, #188]	; (8004100 <HAL_ADC_ConfigChannel+0x7dc>)
 8004042:	f7ff f996 	bl	8003372 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004046:	4b31      	ldr	r3, [pc, #196]	; (800410c <HAL_ADC_ConfigChannel+0x7e8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	099b      	lsrs	r3, r3, #6
 800404c:	4a30      	ldr	r2, [pc, #192]	; (8004110 <HAL_ADC_ConfigChannel+0x7ec>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004060:	e002      	b.n	8004068 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3b01      	subs	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f9      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800406e:	e03a      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a27      	ldr	r2, [pc, #156]	; (8004114 <HAL_ADC_ConfigChannel+0x7f0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d113      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x77e>
 800407a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800407e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10d      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <HAL_ADC_ConfigChannel+0x7e4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d12a      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004098:	4619      	mov	r1, r3
 800409a:	4819      	ldr	r0, [pc, #100]	; (8004100 <HAL_ADC_ConfigChannel+0x7dc>)
 800409c:	f7ff f969 	bl	8003372 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040a0:	e021      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_ADC_ConfigChannel+0x7f4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d11c      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d116      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_ADC_ConfigChannel+0x7e4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d111      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ca:	4619      	mov	r1, r3
 80040cc:	480c      	ldr	r0, [pc, #48]	; (8004100 <HAL_ADC_ConfigChannel+0x7dc>)
 80040ce:	f7ff f950 	bl	8003372 <LL_ADC_SetCommonPathInternalCh>
 80040d2:	e008      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80040ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	37d8      	adds	r7, #216	; 0xd8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	80080000 	.word	0x80080000
 8004100:	50040300 	.word	0x50040300
 8004104:	c7520000 	.word	0xc7520000
 8004108:	50040000 	.word	0x50040000
 800410c:	20000000 	.word	0x20000000
 8004110:	053e2d63 	.word	0x053e2d63
 8004114:	cb840000 	.word	0xcb840000
 8004118:	80000001 	.word	0x80000001

0800411c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004138:	4013      	ands	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800414e:	4a04      	ldr	r2, [pc, #16]	; (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	60d3      	str	r3, [r2, #12]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <__NVIC_GetPriorityGrouping+0x18>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 0307 	and.w	r3, r3, #7
}
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	2b00      	cmp	r3, #0
 8004190:	db0b      	blt.n	80041aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	4907      	ldr	r1, [pc, #28]	; (80041b8 <__NVIC_EnableIRQ+0x38>)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2001      	movs	r0, #1
 80041a2:	fa00 f202 	lsl.w	r2, r0, r2
 80041a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e100 	.word	0xe000e100

080041bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db0a      	blt.n	80041e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	490c      	ldr	r1, [pc, #48]	; (8004208 <__NVIC_SetPriority+0x4c>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	440b      	add	r3, r1
 80041e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e4:	e00a      	b.n	80041fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4908      	ldr	r1, [pc, #32]	; (800420c <__NVIC_SetPriority+0x50>)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3b04      	subs	r3, #4
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	440b      	add	r3, r1
 80041fa:	761a      	strb	r2, [r3, #24]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000e100 	.word	0xe000e100
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f1c3 0307 	rsb	r3, r3, #7
 800422a:	2b04      	cmp	r3, #4
 800422c:	bf28      	it	cs
 800422e:	2304      	movcs	r3, #4
 8004230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3304      	adds	r3, #4
 8004236:	2b06      	cmp	r3, #6
 8004238:	d902      	bls.n	8004240 <NVIC_EncodePriority+0x30>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3b03      	subs	r3, #3
 800423e:	e000      	b.n	8004242 <NVIC_EncodePriority+0x32>
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	f04f 32ff 	mov.w	r2, #4294967295
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	401a      	ands	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004258:	f04f 31ff 	mov.w	r1, #4294967295
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	43d9      	mvns	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004268:	4313      	orrs	r3, r2
         );
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004288:	d301      	bcc.n	800428e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800428a:	2301      	movs	r3, #1
 800428c:	e00f      	b.n	80042ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <SysTick_Config+0x40>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004296:	210f      	movs	r1, #15
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	f7ff ff8e 	bl	80041bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <SysTick_Config+0x40>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <SysTick_Config+0x40>)
 80042a8:	2207      	movs	r2, #7
 80042aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	e000e010 	.word	0xe000e010

080042bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff ff29 	bl	800411c <__NVIC_SetPriorityGrouping>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042e4:	f7ff ff3e 	bl	8004164 <__NVIC_GetPriorityGrouping>
 80042e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff ff8e 	bl	8004210 <NVIC_EncodePriority>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff5d 	bl	80041bc <__NVIC_SetPriority>
}
 8004302:	bf00      	nop
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff31 	bl	8004180 <__NVIC_EnableIRQ>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ffa2 	bl	8004278 <SysTick_Config>
 8004334:	4603      	mov	r3, r0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0ac      	b.n	80044ac <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f8b2 	bl	80044c0 <DFSDM_GetChannelFromInstance>
 800435c:	4603      	mov	r3, r0
 800435e:	4a55      	ldr	r2, [pc, #340]	; (80044b4 <HAL_DFSDM_ChannelInit+0x174>)
 8004360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e09f      	b.n	80044ac <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fd fba7 	bl	8001ac0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004372:	4b51      	ldr	r3, [pc, #324]	; (80044b8 <HAL_DFSDM_ChannelInit+0x178>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3301      	adds	r3, #1
 8004378:	4a4f      	ldr	r2, [pc, #316]	; (80044b8 <HAL_DFSDM_ChannelInit+0x178>)
 800437a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800437c:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <HAL_DFSDM_ChannelInit+0x178>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d125      	bne.n	80043d0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004384:	4b4d      	ldr	r3, [pc, #308]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a4c      	ldr	r2, [pc, #304]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 800438a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800438e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004390:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4948      	ldr	r1, [pc, #288]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a46      	ldr	r2, [pc, #280]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 80043a4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80043a8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	791b      	ldrb	r3, [r3, #4]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d108      	bne.n	80043c4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80043b2:	4b42      	ldr	r3, [pc, #264]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	493f      	ldr	r1, [pc, #252]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80043c4:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a3c      	ldr	r2, [pc, #240]	; (80044bc <HAL_DFSDM_ChannelInit+0x17c>)
 80043ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043ce:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80043de:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6819      	ldr	r1, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80043ee:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80043f4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 020f 	bic.w	r2, r2, #15
 800440c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004434:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6899      	ldr	r1, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	3b01      	subs	r3, #1
 8004446:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f002 0207 	and.w	r2, r2, #7
 8004460:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800448c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f810 	bl	80044c0 <DFSDM_GetChannelFromInstance>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4904      	ldr	r1, [pc, #16]	; (80044b4 <HAL_DFSDM_ChannelInit+0x174>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000898 	.word	0x20000898
 80044b8:	20000894 	.word	0x20000894
 80044bc:	40016000 	.word	0x40016000

080044c0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a1c      	ldr	r2, [pc, #112]	; (800453c <DFSDM_GetChannelFromInstance+0x7c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d102      	bne.n	80044d6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e02b      	b.n	800452e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a19      	ldr	r2, [pc, #100]	; (8004540 <DFSDM_GetChannelFromInstance+0x80>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d102      	bne.n	80044e4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80044de:	2301      	movs	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e024      	b.n	800452e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a17      	ldr	r2, [pc, #92]	; (8004544 <DFSDM_GetChannelFromInstance+0x84>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d102      	bne.n	80044f2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80044ec:	2302      	movs	r3, #2
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e01d      	b.n	800452e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a14      	ldr	r2, [pc, #80]	; (8004548 <DFSDM_GetChannelFromInstance+0x88>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d102      	bne.n	8004500 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80044fa:	2304      	movs	r3, #4
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e016      	b.n	800452e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a12      	ldr	r2, [pc, #72]	; (800454c <DFSDM_GetChannelFromInstance+0x8c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d102      	bne.n	800450e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004508:	2305      	movs	r3, #5
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e00f      	b.n	800452e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a0f      	ldr	r2, [pc, #60]	; (8004550 <DFSDM_GetChannelFromInstance+0x90>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d102      	bne.n	800451c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004516:	2306      	movs	r3, #6
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e008      	b.n	800452e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a0d      	ldr	r2, [pc, #52]	; (8004554 <DFSDM_GetChannelFromInstance+0x94>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d102      	bne.n	800452a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004524:	2307      	movs	r3, #7
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e001      	b.n	800452e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800452a:	2303      	movs	r3, #3
 800452c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800452e:	68fb      	ldr	r3, [r7, #12]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40016000 	.word	0x40016000
 8004540:	40016020 	.word	0x40016020
 8004544:	40016040 	.word	0x40016040
 8004548:	40016080 	.word	0x40016080
 800454c:	400160a0 	.word	0x400160a0
 8004550:	400160c0 	.word	0x400160c0
 8004554:	400160e0 	.word	0x400160e0

08004558 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d005      	beq.n	800457c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2204      	movs	r2, #4
 8004574:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	e047      	b.n	800460c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 020e 	bic.w	r2, r2, #14
 800458a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	f003 021c 	and.w	r2, r3, #28
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f202 	lsl.w	r2, r1, r2
 80045be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045ea:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4798      	blx	r3
    }
  }
  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004626:	e166      	b.n	80048f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2101      	movs	r1, #1
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8158 	beq.w	80048f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d005      	beq.n	8004658 <HAL_GPIO_Init+0x40>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d130      	bne.n	80046ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	2203      	movs	r2, #3
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800468e:	2201      	movs	r2, #1
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0201 	and.w	r2, r3, #1
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d017      	beq.n	80046f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	2203      	movs	r2, #3
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d123      	bne.n	800474a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	08da      	lsrs	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3208      	adds	r2, #8
 800470a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	220f      	movs	r2, #15
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	08da      	lsrs	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3208      	adds	r2, #8
 8004744:	6939      	ldr	r1, [r7, #16]
 8004746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	2203      	movs	r2, #3
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0203 	and.w	r2, r3, #3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80b2 	beq.w	80048f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800478c:	4b61      	ldr	r3, [pc, #388]	; (8004914 <HAL_GPIO_Init+0x2fc>)
 800478e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004790:	4a60      	ldr	r2, [pc, #384]	; (8004914 <HAL_GPIO_Init+0x2fc>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6613      	str	r3, [r2, #96]	; 0x60
 8004798:	4b5e      	ldr	r3, [pc, #376]	; (8004914 <HAL_GPIO_Init+0x2fc>)
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047a4:	4a5c      	ldr	r2, [pc, #368]	; (8004918 <HAL_GPIO_Init+0x300>)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	3302      	adds	r3, #2
 80047ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	220f      	movs	r2, #15
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047ce:	d02b      	beq.n	8004828 <HAL_GPIO_Init+0x210>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a52      	ldr	r2, [pc, #328]	; (800491c <HAL_GPIO_Init+0x304>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d025      	beq.n	8004824 <HAL_GPIO_Init+0x20c>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a51      	ldr	r2, [pc, #324]	; (8004920 <HAL_GPIO_Init+0x308>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d01f      	beq.n	8004820 <HAL_GPIO_Init+0x208>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a50      	ldr	r2, [pc, #320]	; (8004924 <HAL_GPIO_Init+0x30c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d019      	beq.n	800481c <HAL_GPIO_Init+0x204>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a4f      	ldr	r2, [pc, #316]	; (8004928 <HAL_GPIO_Init+0x310>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d013      	beq.n	8004818 <HAL_GPIO_Init+0x200>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a4e      	ldr	r2, [pc, #312]	; (800492c <HAL_GPIO_Init+0x314>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00d      	beq.n	8004814 <HAL_GPIO_Init+0x1fc>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a4d      	ldr	r2, [pc, #308]	; (8004930 <HAL_GPIO_Init+0x318>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <HAL_GPIO_Init+0x1f8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a4c      	ldr	r2, [pc, #304]	; (8004934 <HAL_GPIO_Init+0x31c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d101      	bne.n	800480c <HAL_GPIO_Init+0x1f4>
 8004808:	2307      	movs	r3, #7
 800480a:	e00e      	b.n	800482a <HAL_GPIO_Init+0x212>
 800480c:	2308      	movs	r3, #8
 800480e:	e00c      	b.n	800482a <HAL_GPIO_Init+0x212>
 8004810:	2306      	movs	r3, #6
 8004812:	e00a      	b.n	800482a <HAL_GPIO_Init+0x212>
 8004814:	2305      	movs	r3, #5
 8004816:	e008      	b.n	800482a <HAL_GPIO_Init+0x212>
 8004818:	2304      	movs	r3, #4
 800481a:	e006      	b.n	800482a <HAL_GPIO_Init+0x212>
 800481c:	2303      	movs	r3, #3
 800481e:	e004      	b.n	800482a <HAL_GPIO_Init+0x212>
 8004820:	2302      	movs	r3, #2
 8004822:	e002      	b.n	800482a <HAL_GPIO_Init+0x212>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_GPIO_Init+0x212>
 8004828:	2300      	movs	r3, #0
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	f002 0203 	and.w	r2, r2, #3
 8004830:	0092      	lsls	r2, r2, #2
 8004832:	4093      	lsls	r3, r2
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800483a:	4937      	ldr	r1, [pc, #220]	; (8004918 <HAL_GPIO_Init+0x300>)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	3302      	adds	r3, #2
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004848:	4b3b      	ldr	r3, [pc, #236]	; (8004938 <HAL_GPIO_Init+0x320>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	43db      	mvns	r3, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800486c:	4a32      	ldr	r2, [pc, #200]	; (8004938 <HAL_GPIO_Init+0x320>)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004872:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_GPIO_Init+0x320>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	43db      	mvns	r3, r3
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4013      	ands	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004896:	4a28      	ldr	r2, [pc, #160]	; (8004938 <HAL_GPIO_Init+0x320>)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800489c:	4b26      	ldr	r3, [pc, #152]	; (8004938 <HAL_GPIO_Init+0x320>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_GPIO_Init+0x320>)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <HAL_GPIO_Init+0x320>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048ea:	4a13      	ldr	r2, [pc, #76]	; (8004938 <HAL_GPIO_Init+0x320>)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	3301      	adds	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	f47f ae91 	bne.w	8004628 <HAL_GPIO_Init+0x10>
  }
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40021000 	.word	0x40021000
 8004918:	40010000 	.word	0x40010000
 800491c:	48000400 	.word	0x48000400
 8004920:	48000800 	.word	0x48000800
 8004924:	48000c00 	.word	0x48000c00
 8004928:	48001000 	.word	0x48001000
 800492c:	48001400 	.word	0x48001400
 8004930:	48001800 	.word	0x48001800
 8004934:	48001c00 	.word	0x48001c00
 8004938:	40010400 	.word	0x40010400

0800493c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800494a:	e0c9      	b.n	8004ae0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800494c:	2201      	movs	r2, #1
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	4013      	ands	r3, r2
 8004958:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80bc 	beq.w	8004ada <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004962:	4a66      	ldr	r2, [pc, #408]	; (8004afc <HAL_GPIO_DeInit+0x1c0>)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	3302      	adds	r3, #2
 800496a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	220f      	movs	r2, #15
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800498a:	d02b      	beq.n	80049e4 <HAL_GPIO_DeInit+0xa8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a5c      	ldr	r2, [pc, #368]	; (8004b00 <HAL_GPIO_DeInit+0x1c4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d025      	beq.n	80049e0 <HAL_GPIO_DeInit+0xa4>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a5b      	ldr	r2, [pc, #364]	; (8004b04 <HAL_GPIO_DeInit+0x1c8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d01f      	beq.n	80049dc <HAL_GPIO_DeInit+0xa0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a5a      	ldr	r2, [pc, #360]	; (8004b08 <HAL_GPIO_DeInit+0x1cc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d019      	beq.n	80049d8 <HAL_GPIO_DeInit+0x9c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a59      	ldr	r2, [pc, #356]	; (8004b0c <HAL_GPIO_DeInit+0x1d0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d013      	beq.n	80049d4 <HAL_GPIO_DeInit+0x98>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a58      	ldr	r2, [pc, #352]	; (8004b10 <HAL_GPIO_DeInit+0x1d4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00d      	beq.n	80049d0 <HAL_GPIO_DeInit+0x94>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a57      	ldr	r2, [pc, #348]	; (8004b14 <HAL_GPIO_DeInit+0x1d8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <HAL_GPIO_DeInit+0x90>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a56      	ldr	r2, [pc, #344]	; (8004b18 <HAL_GPIO_DeInit+0x1dc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <HAL_GPIO_DeInit+0x8c>
 80049c4:	2307      	movs	r3, #7
 80049c6:	e00e      	b.n	80049e6 <HAL_GPIO_DeInit+0xaa>
 80049c8:	2308      	movs	r3, #8
 80049ca:	e00c      	b.n	80049e6 <HAL_GPIO_DeInit+0xaa>
 80049cc:	2306      	movs	r3, #6
 80049ce:	e00a      	b.n	80049e6 <HAL_GPIO_DeInit+0xaa>
 80049d0:	2305      	movs	r3, #5
 80049d2:	e008      	b.n	80049e6 <HAL_GPIO_DeInit+0xaa>
 80049d4:	2304      	movs	r3, #4
 80049d6:	e006      	b.n	80049e6 <HAL_GPIO_DeInit+0xaa>
 80049d8:	2303      	movs	r3, #3
 80049da:	e004      	b.n	80049e6 <HAL_GPIO_DeInit+0xaa>
 80049dc:	2302      	movs	r3, #2
 80049de:	e002      	b.n	80049e6 <HAL_GPIO_DeInit+0xaa>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_GPIO_DeInit+0xaa>
 80049e4:	2300      	movs	r3, #0
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	f002 0203 	and.w	r2, r2, #3
 80049ec:	0092      	lsls	r2, r2, #2
 80049ee:	4093      	lsls	r3, r2
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d132      	bne.n	8004a5c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80049f6:	4b49      	ldr	r3, [pc, #292]	; (8004b1c <HAL_GPIO_DeInit+0x1e0>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	4947      	ldr	r1, [pc, #284]	; (8004b1c <HAL_GPIO_DeInit+0x1e0>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004a04:	4b45      	ldr	r3, [pc, #276]	; (8004b1c <HAL_GPIO_DeInit+0x1e0>)
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	4943      	ldr	r1, [pc, #268]	; (8004b1c <HAL_GPIO_DeInit+0x1e0>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004a12:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <HAL_GPIO_DeInit+0x1e0>)
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	4940      	ldr	r1, [pc, #256]	; (8004b1c <HAL_GPIO_DeInit+0x1e0>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004a20:	4b3e      	ldr	r3, [pc, #248]	; (8004b1c <HAL_GPIO_DeInit+0x1e0>)
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	493c      	ldr	r1, [pc, #240]	; (8004b1c <HAL_GPIO_DeInit+0x1e0>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	220f      	movs	r2, #15
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a3e:	4a2f      	ldr	r2, [pc, #188]	; (8004afc <HAL_GPIO_DeInit+0x1c0>)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	43da      	mvns	r2, r3
 8004a4e:	482b      	ldr	r0, [pc, #172]	; (8004afc <HAL_GPIO_DeInit+0x1c0>)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	400a      	ands	r2, r1
 8004a56:	3302      	adds	r3, #2
 8004a58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	2103      	movs	r1, #3
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	08da      	lsrs	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3208      	adds	r2, #8
 8004a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	220f      	movs	r2, #15
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	08d2      	lsrs	r2, r2, #3
 8004a90:	4019      	ands	r1, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3208      	adds	r2, #8
 8004a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	2103      	movs	r1, #3
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	401a      	ands	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	43db      	mvns	r3, r3
 8004abe:	401a      	ands	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	2103      	movs	r1, #3
 8004ace:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	401a      	ands	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3301      	adds	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f47f af2f 	bne.w	800494c <HAL_GPIO_DeInit+0x10>
  }
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40010000 	.word	0x40010000
 8004b00:	48000400 	.word	0x48000400
 8004b04:	48000800 	.word	0x48000800
 8004b08:	48000c00 	.word	0x48000c00
 8004b0c:	48001000 	.word	0x48001000
 8004b10:	48001400 	.word	0x48001400
 8004b14:	48001800 	.word	0x48001800
 8004b18:	48001c00 	.word	0x48001c00
 8004b1c:	40010400 	.word	0x40010400

08004b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	887b      	ldrh	r3, [r7, #2]
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
 8004b3c:	e001      	b.n	8004b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	807b      	strh	r3, [r7, #2]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b60:	787b      	ldrb	r3, [r7, #1]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b66:	887a      	ldrh	r2, [r7, #2]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b6c:	e002      	b.n	8004b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b6e:	887a      	ldrh	r2, [r7, #2]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d006      	beq.n	8004ba4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b96:	4a05      	ldr	r2, [pc, #20]	; (8004bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fc fedc 	bl	800195c <HAL_GPIO_EXTI_Callback>
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40010400 	.word	0x40010400

08004bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e081      	b.n	8004cc6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc ffd6 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	; 0x24
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c26:	609a      	str	r2, [r3, #8]
 8004c28:	e006      	b.n	8004c38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d104      	bne.n	8004c4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69d9      	ldr	r1, [r3, #28]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1a      	ldr	r2, [r3, #32]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d138      	bne.n	8004d56 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e032      	b.n	8004d58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2224      	movs	r2, #36	; 0x24
 8004cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d20:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6819      	ldr	r1, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e000      	b.n	8004d58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
  }
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d139      	bne.n	8004dee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e033      	b.n	8004df0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	; 0x24
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004db6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0201 	orr.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004e08:	f7fe fa70 	bl	80032ec <HAL_GetTick>
 8004e0c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
 8004e18:	e092      	b.n	8004f40 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 808b 	bne.w	8004f40 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fc ff4e 	bl	8001ccc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004e30:	f241 3188 	movw	r1, #5000	; 0x1388
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f88b 	bl	8004f50 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	4b42      	ldr	r3, [pc, #264]	; (8004f4c <HAL_OSPI_Init+0x150>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68d1      	ldr	r1, [r2, #12]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6912      	ldr	r2, [r2, #16]
 8004e4c:	3a01      	subs	r2, #1
 8004e4e:	0412      	lsls	r2, r2, #16
 8004e50:	4311      	orrs	r1, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6952      	ldr	r2, [r2, #20]
 8004e56:	3a01      	subs	r2, #1
 8004e58:	0212      	lsls	r2, r2, #8
 8004e5a:	4311      	orrs	r1, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e60:	4311      	orrs	r1, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	69d2      	ldr	r2, [r2, #28]
 8004e66:	4311      	orrs	r1, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	0412      	lsls	r2, r2, #16
 8004e7a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	021a      	lsls	r2, r3, #8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2120      	movs	r1, #32
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb98 	bl	80055d8 <OSPI_WaitFlagStateUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d146      	bne.n	8004f40 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	1e5a      	subs	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ee8:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d107      	bne.n	8004f28 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0202 	orr.w	r2, r2, #2
 8004f26:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f30:	d103      	bne.n	8004f3a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	645a      	str	r2, [r3, #68]	; 0x44
 8004f38:	e002      	b.n	8004f40 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	f8e0f8f4 	.word	0xf8e0f8f4

08004f50 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b092      	sub	sp, #72	; 0x48
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <HAL_OSPIM_Config+0x40>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d105      	bne.n	8004f9e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004f9c:	e004      	b.n	8004fa8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004fae:	e01f      	b.n	8004ff0 <HAL_OSPIM_Config+0x80>
 8004fb0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8004fb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004fb8:	3301      	adds	r3, #1
 8004fba:	b2d8      	uxtb	r0, r3
 8004fbc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004fc0:	f107 0114 	add.w	r1, r7, #20
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f000 fb3a 	bl	8005648 <OSPIM_GetConfig>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004fe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004fea:	3301      	adds	r3, #1
 8004fec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004ff0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d9dd      	bls.n	8004fb4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004ff8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f040 82de 	bne.w	80055be <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005002:	4bc6      	ldr	r3, [pc, #792]	; (800531c <HAL_OSPIM_Config+0x3ac>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800500e:	4bc3      	ldr	r3, [pc, #780]	; (800531c <HAL_OSPIM_Config+0x3ac>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4ac2      	ldr	r2, [pc, #776]	; (800531c <HAL_OSPIM_Config+0x3ac>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800501a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005026:	4bbe      	ldr	r3, [pc, #760]	; (8005320 <HAL_OSPIM_Config+0x3b0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005032:	4bbb      	ldr	r3, [pc, #748]	; (8005320 <HAL_OSPIM_Config+0x3b0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4aba      	ldr	r2, [pc, #744]	; (8005320 <HAL_OSPIM_Config+0x3b0>)
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800503e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005042:	f043 0302 	orr.w	r3, r3, #2
 8005046:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800504a:	49b6      	ldr	r1, [pc, #728]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 800504c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	3348      	adds	r3, #72	; 0x48
 8005058:	443b      	add	r3, r7
 800505a:	3b2c      	subs	r3, #44	; 0x2c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3b01      	subs	r3, #1
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	48af      	ldr	r0, [pc, #700]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 8005068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	3348      	adds	r3, #72	; 0x48
 8005074:	443b      	add	r3, r7
 8005076:	3b2c      	subs	r3, #44	; 0x2c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3b01      	subs	r3, #1
 800507c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4403      	add	r3, r0
 8005084:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8005086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	3348      	adds	r3, #72	; 0x48
 8005092:	443b      	add	r3, r7
 8005094:	3b34      	subs	r3, #52	; 0x34
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80a1 	beq.w	80051e0 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800509e:	49a1      	ldr	r1, [pc, #644]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 80050a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	3348      	adds	r3, #72	; 0x48
 80050ac:	443b      	add	r3, r7
 80050ae:	3b34      	subs	r3, #52	; 0x34
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	489a      	ldr	r0, [pc, #616]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 80050bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	3348      	adds	r3, #72	; 0x48
 80050c8:	443b      	add	r3, r7
 80050ca:	3b34      	subs	r3, #52	; 0x34
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	f021 0201 	bic.w	r2, r1, #1
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4403      	add	r3, r0
 80050d8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80050da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	3348      	adds	r3, #72	; 0x48
 80050e6:	443b      	add	r3, r7
 80050e8:	3b30      	subs	r3, #48	; 0x30
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01d      	beq.n	800512c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80050f0:	498c      	ldr	r1, [pc, #560]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 80050f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	3348      	adds	r3, #72	; 0x48
 80050fe:	443b      	add	r3, r7
 8005100:	3b30      	subs	r3, #48	; 0x30
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3b01      	subs	r3, #1
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	4885      	ldr	r0, [pc, #532]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 800510e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	3348      	adds	r3, #72	; 0x48
 800511a:	443b      	add	r3, r7
 800511c:	3b30      	subs	r3, #48	; 0x30
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3b01      	subs	r3, #1
 8005122:	f021 0210 	bic.w	r2, r1, #16
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4403      	add	r3, r0
 800512a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800512c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	3348      	adds	r3, #72	; 0x48
 8005138:	443b      	add	r3, r7
 800513a:	3b28      	subs	r3, #40	; 0x28
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d021      	beq.n	8005186 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005142:	4978      	ldr	r1, [pc, #480]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 8005144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	3348      	adds	r3, #72	; 0x48
 8005150:	443b      	add	r3, r7
 8005152:	3b28      	subs	r3, #40	; 0x28
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3b01      	subs	r3, #1
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	4870      	ldr	r0, [pc, #448]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 8005164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	3348      	adds	r3, #72	; 0x48
 8005170:	443b      	add	r3, r7
 8005172:	3b28      	subs	r3, #40	; 0x28
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3b01      	subs	r3, #1
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4403      	add	r3, r0
 8005184:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	3348      	adds	r3, #72	; 0x48
 8005192:	443b      	add	r3, r7
 8005194:	3b24      	subs	r3, #36	; 0x24
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d021      	beq.n	80051e0 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800519c:	4961      	ldr	r1, [pc, #388]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 800519e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	3348      	adds	r3, #72	; 0x48
 80051aa:	443b      	add	r3, r7
 80051ac:	3b24      	subs	r3, #36	; 0x24
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	4859      	ldr	r0, [pc, #356]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 80051be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	3348      	adds	r3, #72	; 0x48
 80051ca:	443b      	add	r3, r7
 80051cc:	3b24      	subs	r3, #36	; 0x24
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4403      	add	r3, r0
 80051de:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	3348      	adds	r3, #72	; 0x48
 80051f2:	443b      	add	r3, r7
 80051f4:	3b34      	subs	r3, #52	; 0x34
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4299      	cmp	r1, r3
 80051fa:	d038      	beq.n	800526e <HAL_OSPIM_Config+0x2fe>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	3348      	adds	r3, #72	; 0x48
 800520e:	443b      	add	r3, r7
 8005210:	3b30      	subs	r3, #48	; 0x30
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4299      	cmp	r1, r3
 8005216:	d02a      	beq.n	800526e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6899      	ldr	r1, [r3, #8]
 800521c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	3348      	adds	r3, #72	; 0x48
 800522a:	443b      	add	r3, r7
 800522c:	3b2c      	subs	r3, #44	; 0x2c
 800522e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005230:	4299      	cmp	r1, r3
 8005232:	d01c      	beq.n	800526e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	3348      	adds	r3, #72	; 0x48
 8005246:	443b      	add	r3, r7
 8005248:	3b28      	subs	r3, #40	; 0x28
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4299      	cmp	r1, r3
 800524e:	d00e      	beq.n	800526e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6919      	ldr	r1, [r3, #16]
 8005254:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	3348      	adds	r3, #72	; 0x48
 8005262:	443b      	add	r3, r7
 8005264:	3b24      	subs	r3, #36	; 0x24
 8005266:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005268:	4299      	cmp	r1, r3
 800526a:	f040 80d3 	bne.w	8005414 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800526e:	492d      	ldr	r1, [pc, #180]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 8005270:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	3348      	adds	r3, #72	; 0x48
 800527e:	443b      	add	r3, r7
 8005280:	3b34      	subs	r3, #52	; 0x34
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3b01      	subs	r3, #1
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	6859      	ldr	r1, [r3, #4]
 800528c:	4825      	ldr	r0, [pc, #148]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 800528e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	3348      	adds	r3, #72	; 0x48
 800529c:	443b      	add	r3, r7
 800529e:	3b34      	subs	r3, #52	; 0x34
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	f021 0201 	bic.w	r2, r1, #1
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4403      	add	r3, r0
 80052ac:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80052ae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	3348      	adds	r3, #72	; 0x48
 80052bc:	443b      	add	r3, r7
 80052be:	3b30      	subs	r3, #48	; 0x30
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01f      	beq.n	8005306 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80052c6:	4917      	ldr	r1, [pc, #92]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 80052c8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	3348      	adds	r3, #72	; 0x48
 80052d6:	443b      	add	r3, r7
 80052d8:	3b30      	subs	r3, #48	; 0x30
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3b01      	subs	r3, #1
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	6859      	ldr	r1, [r3, #4]
 80052e4:	480f      	ldr	r0, [pc, #60]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 80052e6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	3348      	adds	r3, #72	; 0x48
 80052f4:	443b      	add	r3, r7
 80052f6:	3b30      	subs	r3, #48	; 0x30
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	f021 0210 	bic.w	r2, r1, #16
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4403      	add	r3, r0
 8005304:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8005306:	4907      	ldr	r1, [pc, #28]	; (8005324 <HAL_OSPIM_Config+0x3b4>)
 8005308:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	3348      	adds	r3, #72	; 0x48
 8005316:	443b      	add	r3, r7
 8005318:	3b2c      	subs	r3, #44	; 0x2c
 800531a:	e005      	b.n	8005328 <HAL_OSPIM_Config+0x3b8>
 800531c:	a0001000 	.word	0xa0001000
 8005320:	a0001400 	.word	0xa0001400
 8005324:	50061c00 	.word	0x50061c00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3b01      	subs	r3, #1
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	48a6      	ldr	r0, [pc, #664]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 8005334:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	3348      	adds	r3, #72	; 0x48
 8005342:	443b      	add	r3, r7
 8005344:	3b2c      	subs	r3, #44	; 0x2c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4403      	add	r3, r0
 8005352:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005354:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	3348      	adds	r3, #72	; 0x48
 8005362:	443b      	add	r3, r7
 8005364:	3b28      	subs	r3, #40	; 0x28
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d023      	beq.n	80053b4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800536c:	4997      	ldr	r1, [pc, #604]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 800536e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	3348      	adds	r3, #72	; 0x48
 800537c:	443b      	add	r3, r7
 800537e:	3b28      	subs	r3, #40	; 0x28
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3b01      	subs	r3, #1
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	6859      	ldr	r1, [r3, #4]
 800538e:	488f      	ldr	r0, [pc, #572]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 8005390:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	3348      	adds	r3, #72	; 0x48
 800539e:	443b      	add	r3, r7
 80053a0:	3b28      	subs	r3, #40	; 0x28
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4403      	add	r3, r0
 80053b2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80053b4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	3348      	adds	r3, #72	; 0x48
 80053c2:	443b      	add	r3, r7
 80053c4:	3b24      	subs	r3, #36	; 0x24
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d023      	beq.n	8005414 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80053cc:	497f      	ldr	r1, [pc, #508]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 80053ce:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	3348      	adds	r3, #72	; 0x48
 80053dc:	443b      	add	r3, r7
 80053de:	3b24      	subs	r3, #36	; 0x24
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	6859      	ldr	r1, [r3, #4]
 80053ee:	4877      	ldr	r0, [pc, #476]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 80053f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	3348      	adds	r3, #72	; 0x48
 80053fe:	443b      	add	r3, r7
 8005400:	3b24      	subs	r3, #36	; 0x24
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3b01      	subs	r3, #1
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4403      	add	r3, r0
 8005412:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005414:	4a6d      	ldr	r2, [pc, #436]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	3b01      	subs	r3, #1
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005428:	025b      	lsls	r3, r3, #9
 800542a:	431a      	orrs	r2, r3
 800542c:	4967      	ldr	r1, [pc, #412]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	3b01      	subs	r3, #1
 8005434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800543e:	4a63      	ldr	r2, [pc, #396]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3b01      	subs	r3, #1
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f023 0203 	bic.w	r2, r3, #3
 8005450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	431a      	orrs	r2, r3
 8005456:	495d      	ldr	r1, [pc, #372]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3b01      	subs	r3, #1
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d014      	beq.n	800549a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005470:	4a56      	ldr	r2, [pc, #344]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	3b01      	subs	r3, #1
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005484:	015b      	lsls	r3, r3, #5
 8005486:	431a      	orrs	r2, r3
 8005488:	4950      	ldr	r1, [pc, #320]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	3b01      	subs	r3, #1
 8005490:	f042 0210 	orr.w	r2, r2, #16
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d019      	beq.n	80054da <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80054a6:	4a49      	ldr	r2, [pc, #292]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80054bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054be:	049b      	lsls	r3, r3, #18
 80054c0:	431a      	orrs	r2, r3
 80054c2:	4942      	ldr	r1, [pc, #264]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	e01c      	b.n	8005514 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d018      	beq.n	8005514 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80054e2:	4a3a      	ldr	r2, [pc, #232]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80054f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fa:	069b      	lsls	r3, r3, #26
 80054fc:	431a      	orrs	r2, r3
 80054fe:	4933      	ldr	r1, [pc, #204]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	3b01      	subs	r3, #1
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d019      	beq.n	8005554 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005520:	4a2a      	ldr	r2, [pc, #168]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	3b01      	subs	r3, #1
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005538:	049b      	lsls	r3, r3, #18
 800553a:	431a      	orrs	r2, r3
 800553c:	4923      	ldr	r1, [pc, #140]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	3b01      	subs	r3, #1
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e01c      	b.n	800558e <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d018      	beq.n	800558e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800555c:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	3b01      	subs	r3, #1
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005574:	069b      	lsls	r3, r3, #26
 8005576:	431a      	orrs	r2, r3
 8005578:	4914      	ldr	r1, [pc, #80]	; (80055cc <HAL_OSPIM_Config+0x65c>)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	3b01      	subs	r3, #1
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800558e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800559a:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <HAL_OSPIM_Config+0x660>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a0c      	ldr	r2, [pc, #48]	; (80055d0 <HAL_OSPIM_Config+0x660>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80055a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <HAL_OSPIM_Config+0x664>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a07      	ldr	r2, [pc, #28]	; (80055d4 <HAL_OSPIM_Config+0x664>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80055be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3748      	adds	r7, #72	; 0x48
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	50061c00 	.word	0x50061c00
 80055d0:	a0001000 	.word	0xa0001000
 80055d4:	a0001400 	.word	0xa0001400

080055d8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80055e8:	e01a      	b.n	8005620 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d016      	beq.n	8005620 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fd fe7b 	bl	80032ec <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005614:	f043 0201 	orr.w	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e00e      	b.n	800563e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6a1a      	ldr	r2, [r3, #32]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	bf14      	ite	ne
 800562e:	2301      	movne	r3, #1
 8005630:	2300      	moveq	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	429a      	cmp	r2, r3
 800563a:	d1d6      	bne.n	80055ea <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <OSPIM_GetConfig+0x26>
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d802      	bhi.n	800566e <OSPIM_GetConfig+0x26>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d102      	bne.n	8005674 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	75fb      	strb	r3, [r7, #23]
 8005672:	e08e      	b.n	8005792 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2200      	movs	r2, #0
 800567e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2200      	movs	r2, #0
 800568a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d101      	bne.n	800569c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005698:	4b41      	ldr	r3, [pc, #260]	; (80057a0 <OSPIM_GetConfig+0x158>)
 800569a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e074      	b.n	800578c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80056a2:	4a40      	ldr	r2, [pc, #256]	; (80057a4 <OSPIM_GetConfig+0x15c>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4053      	eors	r3, r2
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4053      	eors	r3, r2
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4053      	eors	r3, r2
 80056fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005702:	2b00      	cmp	r3, #0
 8005704:	d103      	bne.n	800570e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d018      	beq.n	800574a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4053      	eors	r3, r2
 800571e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d111      	bne.n	800574a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3301      	adds	r3, #1
 8005734:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	60da      	str	r2, [r3, #12]
 800573c:	e005      	b.n	800574a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d018      	beq.n	8005786 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4053      	eors	r3, r2
 800575a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d111      	bne.n	8005786 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	611a      	str	r2, [r3, #16]
 8005778:	e005      	b.n	8005786 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3301      	adds	r3, #1
 800577e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3301      	adds	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d987      	bls.n	80056a2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	04040222 	.word	0x04040222
 80057a4:	50061c00 	.word	0x50061c00

080057a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b6:	6013      	str	r3, [r2, #0]
}
 80057b8:	bf00      	nop
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40007000 	.word	0x40007000

080057c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <HAL_PWREx_GetVoltageRange+0x3c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d8:	d102      	bne.n	80057e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80057da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057de:	e00b      	b.n	80057f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <HAL_PWREx_GetVoltageRange+0x3c>)
 80057e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ee:	d102      	bne.n	80057f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80057f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f4:	e000      	b.n	80057f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80057f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40007000 	.word	0x40007000

08005808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d141      	bne.n	800589a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005816:	4b4b      	ldr	r3, [pc, #300]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005822:	d131      	bne.n	8005888 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005824:	4b47      	ldr	r3, [pc, #284]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800582a:	4a46      	ldr	r2, [pc, #280]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005834:	4b43      	ldr	r3, [pc, #268]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800583c:	4a41      	ldr	r2, [pc, #260]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005842:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005844:	4b40      	ldr	r3, [pc, #256]	; (8005948 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2232      	movs	r2, #50	; 0x32
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	4a3f      	ldr	r2, [pc, #252]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	0c9b      	lsrs	r3, r3, #18
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800585a:	e002      	b.n	8005862 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3b01      	subs	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005862:	4b38      	ldr	r3, [pc, #224]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586e:	d102      	bne.n	8005876 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f2      	bne.n	800585c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005876:	4b33      	ldr	r3, [pc, #204]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005882:	d158      	bne.n	8005936 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e057      	b.n	8005938 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005888:	4b2e      	ldr	r3, [pc, #184]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800588e:	4a2d      	ldr	r2, [pc, #180]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005898:	e04d      	b.n	8005936 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a0:	d141      	bne.n	8005926 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058a2:	4b28      	ldr	r3, [pc, #160]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ae:	d131      	bne.n	8005914 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058b0:	4b24      	ldr	r3, [pc, #144]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b6:	4a23      	ldr	r2, [pc, #140]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058c0:	4b20      	ldr	r3, [pc, #128]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058c8:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80058d0:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2232      	movs	r2, #50	; 0x32
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
 80058da:	4a1c      	ldr	r2, [pc, #112]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	0c9b      	lsrs	r3, r3, #18
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058e6:	e002      	b.n	80058ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ee:	4b15      	ldr	r3, [pc, #84]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fa:	d102      	bne.n	8005902 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f2      	bne.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005902:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590e:	d112      	bne.n	8005936 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e011      	b.n	8005938 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591a:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800591c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005920:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005924:	e007      	b.n	8005936 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005926:	4b07      	ldr	r3, [pc, #28]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800592e:	4a05      	ldr	r2, [pc, #20]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005934:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40007000 	.word	0x40007000
 8005948:	20000000 	.word	0x20000000
 800594c:	431bde83 	.word	0x431bde83

08005950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	f000 bc08 	b.w	8006174 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005964:	4b96      	ldr	r3, [pc, #600]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 030c 	and.w	r3, r3, #12
 800596c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800596e:	4b94      	ldr	r3, [pc, #592]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80e4 	beq.w	8005b4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <HAL_RCC_OscConfig+0x4c>
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	f040 808b 	bne.w	8005aaa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2b01      	cmp	r3, #1
 8005998:	f040 8087 	bne.w	8005aaa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800599c:	4b88      	ldr	r3, [pc, #544]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_OscConfig+0x64>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e3df      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	4b81      	ldr	r3, [pc, #516]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <HAL_RCC_OscConfig+0x7e>
 80059c4:	4b7e      	ldr	r3, [pc, #504]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059cc:	e005      	b.n	80059da <HAL_RCC_OscConfig+0x8a>
 80059ce:	4b7c      	ldr	r3, [pc, #496]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 80059d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059da:	4293      	cmp	r3, r2
 80059dc:	d223      	bcs.n	8005a26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fdcc 	bl	8006580 <RCC_SetFlashLatencyFromMSIRange>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e3c0      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059f2:	4b73      	ldr	r3, [pc, #460]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a72      	ldr	r2, [pc, #456]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 80059f8:	f043 0308 	orr.w	r3, r3, #8
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	4b70      	ldr	r3, [pc, #448]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	496d      	ldr	r1, [pc, #436]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a10:	4b6b      	ldr	r3, [pc, #428]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	4968      	ldr	r1, [pc, #416]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	604b      	str	r3, [r1, #4]
 8005a24:	e025      	b.n	8005a72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a26:	4b66      	ldr	r3, [pc, #408]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a65      	ldr	r2, [pc, #404]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a2c:	f043 0308 	orr.w	r3, r3, #8
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	4b63      	ldr	r3, [pc, #396]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	4960      	ldr	r1, [pc, #384]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a44:	4b5e      	ldr	r3, [pc, #376]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	495b      	ldr	r1, [pc, #364]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fd8c 	bl	8006580 <RCC_SetFlashLatencyFromMSIRange>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e380      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a72:	f000 fcc1 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 8005a76:	4602      	mov	r2, r0
 8005a78:	4b51      	ldr	r3, [pc, #324]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	4950      	ldr	r1, [pc, #320]	; (8005bc4 <HAL_RCC_OscConfig+0x274>)
 8005a84:	5ccb      	ldrb	r3, [r1, r3]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8e:	4a4e      	ldr	r2, [pc, #312]	; (8005bc8 <HAL_RCC_OscConfig+0x278>)
 8005a90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a92:	4b4e      	ldr	r3, [pc, #312]	; (8005bcc <HAL_RCC_OscConfig+0x27c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fd fbd8 	bl	800324c <HAL_InitTick>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d052      	beq.n	8005b4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	e364      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d032      	beq.n	8005b18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ab2:	4b43      	ldr	r3, [pc, #268]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a42      	ldr	r2, [pc, #264]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005abe:	f7fd fc15 	bl	80032ec <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ac6:	f7fd fc11 	bl	80032ec <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e34d      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ad8:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ae4:	4b36      	ldr	r3, [pc, #216]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a35      	ldr	r2, [pc, #212]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005aea:	f043 0308 	orr.w	r3, r3, #8
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	4b33      	ldr	r3, [pc, #204]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	4930      	ldr	r1, [pc, #192]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b02:	4b2f      	ldr	r3, [pc, #188]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	492b      	ldr	r1, [pc, #172]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	604b      	str	r3, [r1, #4]
 8005b16:	e01a      	b.n	8005b4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b18:	4b29      	ldr	r3, [pc, #164]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a28      	ldr	r2, [pc, #160]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005b1e:	f023 0301 	bic.w	r3, r3, #1
 8005b22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b24:	f7fd fbe2 	bl	80032ec <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b2c:	f7fd fbde 	bl	80032ec <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e31a      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b3e:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x1dc>
 8005b4a:	e000      	b.n	8005b4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d073      	beq.n	8005c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d005      	beq.n	8005b6c <HAL_RCC_OscConfig+0x21c>
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b0c      	cmp	r3, #12
 8005b64:	d10e      	bne.n	8005b84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d10b      	bne.n	8005b84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b6c:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d063      	beq.n	8005c40 <HAL_RCC_OscConfig+0x2f0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d15f      	bne.n	8005c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e2f7      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d106      	bne.n	8005b9c <HAL_RCC_OscConfig+0x24c>
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e025      	b.n	8005be8 <HAL_RCC_OscConfig+0x298>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ba4:	d114      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x280>
 8005ba6:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a05      	ldr	r2, [pc, #20]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	4b03      	ldr	r3, [pc, #12]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a02      	ldr	r2, [pc, #8]	; (8005bc0 <HAL_RCC_OscConfig+0x270>)
 8005bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e013      	b.n	8005be8 <HAL_RCC_OscConfig+0x298>
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	0800b61c 	.word	0x0800b61c
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	20000004 	.word	0x20000004
 8005bd0:	4ba0      	ldr	r3, [pc, #640]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a9f      	ldr	r2, [pc, #636]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	4b9d      	ldr	r3, [pc, #628]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a9c      	ldr	r2, [pc, #624]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d013      	beq.n	8005c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf0:	f7fd fb7c 	bl	80032ec <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf8:	f7fd fb78 	bl	80032ec <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b64      	cmp	r3, #100	; 0x64
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e2b4      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c0a:	4b92      	ldr	r3, [pc, #584]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x2a8>
 8005c16:	e014      	b.n	8005c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c18:	f7fd fb68 	bl	80032ec <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c20:	f7fd fb64 	bl	80032ec <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b64      	cmp	r3, #100	; 0x64
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e2a0      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c32:	4b88      	ldr	r3, [pc, #544]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0x2d0>
 8005c3e:	e000      	b.n	8005c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d060      	beq.n	8005d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_OscConfig+0x310>
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b0c      	cmp	r3, #12
 8005c58:	d119      	bne.n	8005c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d116      	bne.n	8005c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c60:	4b7c      	ldr	r3, [pc, #496]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_OscConfig+0x328>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e27d      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c78:	4b76      	ldr	r3, [pc, #472]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	4973      	ldr	r1, [pc, #460]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c8c:	e040      	b.n	8005d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d023      	beq.n	8005cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c96:	4b6f      	ldr	r3, [pc, #444]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6e      	ldr	r2, [pc, #440]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca2:	f7fd fb23 	bl	80032ec <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005caa:	f7fd fb1f 	bl	80032ec <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e25b      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cbc:	4b65      	ldr	r3, [pc, #404]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc8:	4b62      	ldr	r3, [pc, #392]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	061b      	lsls	r3, r3, #24
 8005cd6:	495f      	ldr	r1, [pc, #380]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	604b      	str	r3, [r1, #4]
 8005cdc:	e018      	b.n	8005d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cde:	4b5d      	ldr	r3, [pc, #372]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a5c      	ldr	r2, [pc, #368]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fd faff 	bl	80032ec <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf2:	f7fd fafb 	bl	80032ec <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e237      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d04:	4b53      	ldr	r3, [pc, #332]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f0      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d03c      	beq.n	8005d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01c      	beq.n	8005d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d24:	4b4b      	ldr	r3, [pc, #300]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d2a:	4a4a      	ldr	r2, [pc, #296]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7fd fada 	bl	80032ec <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d3c:	f7fd fad6 	bl	80032ec <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e212      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d4e:	4b41      	ldr	r3, [pc, #260]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0ef      	beq.n	8005d3c <HAL_RCC_OscConfig+0x3ec>
 8005d5c:	e01b      	b.n	8005d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d5e:	4b3d      	ldr	r3, [pc, #244]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d64:	4a3b      	ldr	r2, [pc, #236]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6e:	f7fd fabd 	bl	80032ec <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d76:	f7fd fab9 	bl	80032ec <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e1f5      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d88:	4b32      	ldr	r3, [pc, #200]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1ef      	bne.n	8005d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80a6 	beq.w	8005ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005da4:	2300      	movs	r3, #0
 8005da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005da8:	4b2a      	ldr	r3, [pc, #168]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10d      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005db4:	4b27      	ldr	r3, [pc, #156]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db8:	4a26      	ldr	r2, [pc, #152]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8005dc0:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd0:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <HAL_RCC_OscConfig+0x508>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d118      	bne.n	8005e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ddc:	4b1e      	ldr	r3, [pc, #120]	; (8005e58 <HAL_RCC_OscConfig+0x508>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <HAL_RCC_OscConfig+0x508>)
 8005de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005de8:	f7fd fa80 	bl	80032ec <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df0:	f7fd fa7c 	bl	80032ec <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e1b8      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <HAL_RCC_OscConfig+0x508>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d108      	bne.n	8005e28 <HAL_RCC_OscConfig+0x4d8>
 8005e16:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1c:	4a0d      	ldr	r2, [pc, #52]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e26:	e029      	b.n	8005e7c <HAL_RCC_OscConfig+0x52c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	d115      	bne.n	8005e5c <HAL_RCC_OscConfig+0x50c>
 8005e30:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	4a07      	ldr	r2, [pc, #28]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005e38:	f043 0304 	orr.w	r3, r3, #4
 8005e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e40:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	4a03      	ldr	r2, [pc, #12]	; (8005e54 <HAL_RCC_OscConfig+0x504>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e50:	e014      	b.n	8005e7c <HAL_RCC_OscConfig+0x52c>
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40007000 	.word	0x40007000
 8005e5c:	4b9d      	ldr	r3, [pc, #628]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e62:	4a9c      	ldr	r2, [pc, #624]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e6c:	4b99      	ldr	r3, [pc, #612]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	4a98      	ldr	r2, [pc, #608]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005e74:	f023 0304 	bic.w	r3, r3, #4
 8005e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d016      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fd fa32 	bl	80032ec <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8c:	f7fd fa2e 	bl	80032ec <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e168      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ea2:	4b8c      	ldr	r3, [pc, #560]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0ed      	beq.n	8005e8c <HAL_RCC_OscConfig+0x53c>
 8005eb0:	e015      	b.n	8005ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb2:	f7fd fa1b 	bl	80032ec <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005eb8:	e00a      	b.n	8005ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eba:	f7fd fa17 	bl	80032ec <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e151      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ed0:	4b80      	ldr	r3, [pc, #512]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1ed      	bne.n	8005eba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ede:	7ffb      	ldrb	r3, [r7, #31]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d105      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ee4:	4b7b      	ldr	r3, [pc, #492]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee8:	4a7a      	ldr	r2, [pc, #488]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d03c      	beq.n	8005f76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01c      	beq.n	8005f3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f04:	4b73      	ldr	r3, [pc, #460]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f0a:	4a72      	ldr	r2, [pc, #456]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f14:	f7fd f9ea 	bl	80032ec <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f1c:	f7fd f9e6 	bl	80032ec <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e122      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f2e:	4b69      	ldr	r3, [pc, #420]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0ef      	beq.n	8005f1c <HAL_RCC_OscConfig+0x5cc>
 8005f3c:	e01b      	b.n	8005f76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f3e:	4b65      	ldr	r3, [pc, #404]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f44:	4a63      	ldr	r2, [pc, #396]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4e:	f7fd f9cd 	bl	80032ec <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f56:	f7fd f9c9 	bl	80032ec <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e105      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f68:	4b5a      	ldr	r3, [pc, #360]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1ef      	bne.n	8005f56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80f9 	beq.w	8006172 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	f040 80cf 	bne.w	8006128 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f8a:	4b52      	ldr	r3, [pc, #328]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f003 0203 	and.w	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d12c      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d123      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d113      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d109      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d071      	beq.n	80060dc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b0c      	cmp	r3, #12
 8005ffc:	d068      	beq.n	80060d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ffe:	4b35      	ldr	r3, [pc, #212]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d105      	bne.n	8006016 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800600a:	4b32      	ldr	r3, [pc, #200]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0ac      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800601a:	4b2e      	ldr	r3, [pc, #184]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2d      	ldr	r2, [pc, #180]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8006020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006024:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006026:	f7fd f961 	bl	80032ec <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602e:	f7fd f95d 	bl	80032ec <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e099      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006040:	4b24      	ldr	r3, [pc, #144]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f0      	bne.n	800602e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800604c:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	4b21      	ldr	r3, [pc, #132]	; (80060d8 <HAL_RCC_OscConfig+0x788>)
 8006052:	4013      	ands	r3, r2
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800605c:	3a01      	subs	r2, #1
 800605e:	0112      	lsls	r2, r2, #4
 8006060:	4311      	orrs	r1, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006066:	0212      	lsls	r2, r2, #8
 8006068:	4311      	orrs	r1, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800606e:	0852      	lsrs	r2, r2, #1
 8006070:	3a01      	subs	r2, #1
 8006072:	0552      	lsls	r2, r2, #21
 8006074:	4311      	orrs	r1, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800607a:	0852      	lsrs	r2, r2, #1
 800607c:	3a01      	subs	r2, #1
 800607e:	0652      	lsls	r2, r2, #25
 8006080:	4311      	orrs	r1, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006086:	06d2      	lsls	r2, r2, #27
 8006088:	430a      	orrs	r2, r1
 800608a:	4912      	ldr	r1, [pc, #72]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 800608c:	4313      	orrs	r3, r2
 800608e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006090:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 8006096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800609a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4a0c      	ldr	r2, [pc, #48]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 80060a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060a8:	f7fd f920 	bl	80032ec <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b0:	f7fd f91c 	bl	80032ec <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e058      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060c2:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <HAL_RCC_OscConfig+0x784>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f0      	beq.n	80060b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060ce:	e050      	b.n	8006172 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e04f      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
 80060d4:	40021000 	.word	0x40021000
 80060d8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060dc:	4b27      	ldr	r3, [pc, #156]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d144      	bne.n	8006172 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060e8:	4b24      	ldr	r3, [pc, #144]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a23      	ldr	r2, [pc, #140]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 80060ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060f4:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4a20      	ldr	r2, [pc, #128]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 80060fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006100:	f7fd f8f4 	bl	80032ec <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006108:	f7fd f8f0 	bl	80032ec <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e02c      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800611a:	4b18      	ldr	r3, [pc, #96]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x7b8>
 8006126:	e024      	b.n	8006172 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b0c      	cmp	r3, #12
 800612c:	d01f      	beq.n	800616e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a12      	ldr	r2, [pc, #72]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 8006134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613a:	f7fd f8d7 	bl	80032ec <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006142:	f7fd f8d3 	bl	80032ec <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e00f      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006154:	4b09      	ldr	r3, [pc, #36]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f0      	bne.n	8006142 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	4905      	ldr	r1, [pc, #20]	; (800617c <HAL_RCC_OscConfig+0x82c>)
 8006166:	4b06      	ldr	r3, [pc, #24]	; (8006180 <HAL_RCC_OscConfig+0x830>)
 8006168:	4013      	ands	r3, r2
 800616a:	60cb      	str	r3, [r1, #12]
 800616c:	e001      	b.n	8006172 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40021000 	.word	0x40021000
 8006180:	feeefffc 	.word	0xfeeefffc

08006184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e11d      	b.n	80063d8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800619c:	4b90      	ldr	r3, [pc, #576]	; (80063e0 <HAL_RCC_ClockConfig+0x25c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d910      	bls.n	80061cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061aa:	4b8d      	ldr	r3, [pc, #564]	; (80063e0 <HAL_RCC_ClockConfig+0x25c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f023 020f 	bic.w	r2, r3, #15
 80061b2:	498b      	ldr	r1, [pc, #556]	; (80063e0 <HAL_RCC_ClockConfig+0x25c>)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ba:	4b89      	ldr	r3, [pc, #548]	; (80063e0 <HAL_RCC_ClockConfig+0x25c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d001      	beq.n	80061cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e105      	b.n	80063d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d010      	beq.n	80061fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	4b81      	ldr	r3, [pc, #516]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d908      	bls.n	80061fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e8:	4b7e      	ldr	r3, [pc, #504]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	497b      	ldr	r1, [pc, #492]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d079      	beq.n	80062fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d11e      	bne.n	800624c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800620e:	4b75      	ldr	r3, [pc, #468]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e0dc      	b.n	80063d8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800621e:	f000 fa09 	bl	8006634 <RCC_GetSysClockFreqFromPLLSource>
 8006222:	4603      	mov	r3, r0
 8006224:	4a70      	ldr	r2, [pc, #448]	; (80063e8 <HAL_RCC_ClockConfig+0x264>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d946      	bls.n	80062b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800622a:	4b6e      	ldr	r3, [pc, #440]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d140      	bne.n	80062b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006236:	4b6b      	ldr	r3, [pc, #428]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800623e:	4a69      	ldr	r2, [pc, #420]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006244:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006246:	2380      	movs	r3, #128	; 0x80
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	e035      	b.n	80062b8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d107      	bne.n	8006264 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006254:	4b63      	ldr	r3, [pc, #396]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d115      	bne.n	800628c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0b9      	b.n	80063d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d107      	bne.n	800627c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800626c:	4b5d      	ldr	r3, [pc, #372]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0ad      	b.n	80063d8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800627c:	4b59      	ldr	r3, [pc, #356]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0a5      	b.n	80063d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800628c:	f000 f8b4 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 8006290:	4603      	mov	r3, r0
 8006292:	4a55      	ldr	r2, [pc, #340]	; (80063e8 <HAL_RCC_ClockConfig+0x264>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d90f      	bls.n	80062b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006298:	4b52      	ldr	r3, [pc, #328]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062a4:	4b4f      	ldr	r3, [pc, #316]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ac:	4a4d      	ldr	r2, [pc, #308]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80062ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062b8:	4b4a      	ldr	r3, [pc, #296]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f023 0203 	bic.w	r2, r3, #3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4947      	ldr	r1, [pc, #284]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ca:	f7fd f80f 	bl	80032ec <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d0:	e00a      	b.n	80062e8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d2:	f7fd f80b 	bl	80032ec <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e077      	b.n	80063d8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e8:	4b3e      	ldr	r3, [pc, #248]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 020c 	and.w	r2, r3, #12
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d1eb      	bne.n	80062d2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d105      	bne.n	800630c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006300:	4b38      	ldr	r3, [pc, #224]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	4a37      	ldr	r2, [pc, #220]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800630a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d010      	beq.n	800633a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	4b31      	ldr	r3, [pc, #196]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006324:	429a      	cmp	r2, r3
 8006326:	d208      	bcs.n	800633a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006328:	4b2e      	ldr	r3, [pc, #184]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	492b      	ldr	r1, [pc, #172]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006336:	4313      	orrs	r3, r2
 8006338:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800633a:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <HAL_RCC_ClockConfig+0x25c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d210      	bcs.n	800636a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006348:	4b25      	ldr	r3, [pc, #148]	; (80063e0 <HAL_RCC_ClockConfig+0x25c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f023 020f 	bic.w	r2, r3, #15
 8006350:	4923      	ldr	r1, [pc, #140]	; (80063e0 <HAL_RCC_ClockConfig+0x25c>)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006358:	4b21      	ldr	r3, [pc, #132]	; (80063e0 <HAL_RCC_ClockConfig+0x25c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d001      	beq.n	800636a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e036      	b.n	80063d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006376:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4918      	ldr	r1, [pc, #96]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006384:	4313      	orrs	r3, r2
 8006386:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006394:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4910      	ldr	r1, [pc, #64]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063a8:	f000 f826 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 80063ac:	4602      	mov	r2, r0
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <HAL_RCC_ClockConfig+0x260>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	490c      	ldr	r1, [pc, #48]	; (80063ec <HAL_RCC_ClockConfig+0x268>)
 80063ba:	5ccb      	ldrb	r3, [r1, r3]
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
 80063c4:	4a0a      	ldr	r2, [pc, #40]	; (80063f0 <HAL_RCC_ClockConfig+0x26c>)
 80063c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <HAL_RCC_ClockConfig+0x270>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fc ff3d 	bl	800324c <HAL_InitTick>
 80063d2:	4603      	mov	r3, r0
 80063d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40022000 	.word	0x40022000
 80063e4:	40021000 	.word	0x40021000
 80063e8:	04c4b400 	.word	0x04c4b400
 80063ec:	0800b61c 	.word	0x0800b61c
 80063f0:	20000000 	.word	0x20000000
 80063f4:	20000004 	.word	0x20000004

080063f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b089      	sub	sp, #36	; 0x24
 80063fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	2300      	movs	r3, #0
 8006404:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006406:	4b3e      	ldr	r3, [pc, #248]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 030c 	and.w	r3, r3, #12
 800640e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006410:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0x34>
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b0c      	cmp	r3, #12
 8006424:	d121      	bne.n	800646a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d11e      	bne.n	800646a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800642c:	4b34      	ldr	r3, [pc, #208]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d107      	bne.n	8006448 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006438:	4b31      	ldr	r3, [pc, #196]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 800643a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e005      	b.n	8006454 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006448:	4b2d      	ldr	r3, [pc, #180]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006454:	4a2b      	ldr	r2, [pc, #172]	; (8006504 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10d      	bne.n	8006480 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006468:	e00a      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b04      	cmp	r3, #4
 800646e:	d102      	bne.n	8006476 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006470:	4b25      	ldr	r3, [pc, #148]	; (8006508 <HAL_RCC_GetSysClockFreq+0x110>)
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	e004      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b08      	cmp	r3, #8
 800647a:	d101      	bne.n	8006480 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800647c:	4b23      	ldr	r3, [pc, #140]	; (800650c <HAL_RCC_GetSysClockFreq+0x114>)
 800647e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d134      	bne.n	80064f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006486:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d003      	beq.n	800649e <HAL_RCC_GetSysClockFreq+0xa6>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d003      	beq.n	80064a4 <HAL_RCC_GetSysClockFreq+0xac>
 800649c:	e005      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800649e:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <HAL_RCC_GetSysClockFreq+0x110>)
 80064a0:	617b      	str	r3, [r7, #20]
      break;
 80064a2:	e005      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064a4:	4b19      	ldr	r3, [pc, #100]	; (800650c <HAL_RCC_GetSysClockFreq+0x114>)
 80064a6:	617b      	str	r3, [r7, #20]
      break;
 80064a8:	e002      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	617b      	str	r3, [r7, #20]
      break;
 80064ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064b0:	4b13      	ldr	r3, [pc, #76]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	091b      	lsrs	r3, r3, #4
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	3301      	adds	r3, #1
 80064bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064be:	4b10      	ldr	r3, [pc, #64]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	fb03 f202 	mul.w	r2, r3, r2
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	0e5b      	lsrs	r3, r3, #25
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	3301      	adds	r3, #1
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064f0:	69bb      	ldr	r3, [r7, #24]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3724      	adds	r7, #36	; 0x24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40021000 	.word	0x40021000
 8006504:	0800b634 	.word	0x0800b634
 8006508:	00f42400 	.word	0x00f42400
 800650c:	007a1200 	.word	0x007a1200

08006510 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006514:	4b03      	ldr	r3, [pc, #12]	; (8006524 <HAL_RCC_GetHCLKFreq+0x14>)
 8006516:	681b      	ldr	r3, [r3, #0]
}
 8006518:	4618      	mov	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000000 	.word	0x20000000

08006528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800652c:	f7ff fff0 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8006530:	4602      	mov	r2, r0
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	4904      	ldr	r1, [pc, #16]	; (8006550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800653e:	5ccb      	ldrb	r3, [r1, r3]
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40021000 	.word	0x40021000
 8006550:	0800b62c 	.word	0x0800b62c

08006554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006558:	f7ff ffda 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 800655c:	4602      	mov	r2, r0
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	0adb      	lsrs	r3, r3, #11
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	4904      	ldr	r1, [pc, #16]	; (800657c <HAL_RCC_GetPCLK2Freq+0x28>)
 800656a:	5ccb      	ldrb	r3, [r1, r3]
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40021000 	.word	0x40021000
 800657c:	0800b62c 	.word	0x0800b62c

08006580 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006588:	2300      	movs	r3, #0
 800658a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800658c:	4b27      	ldr	r3, [pc, #156]	; (800662c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800658e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006598:	f7ff f916 	bl	80057c8 <HAL_PWREx_GetVoltageRange>
 800659c:	6178      	str	r0, [r7, #20]
 800659e:	e014      	b.n	80065ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065a0:	4b22      	ldr	r3, [pc, #136]	; (800662c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	4a21      	ldr	r2, [pc, #132]	; (800662c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065aa:	6593      	str	r3, [r2, #88]	; 0x58
 80065ac:	4b1f      	ldr	r3, [pc, #124]	; (800662c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065b8:	f7ff f906 	bl	80057c8 <HAL_PWREx_GetVoltageRange>
 80065bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80065be:	4b1b      	ldr	r3, [pc, #108]	; (800662c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c2:	4a1a      	ldr	r2, [pc, #104]	; (800662c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d0:	d10b      	bne.n	80065ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b80      	cmp	r3, #128	; 0x80
 80065d6:	d913      	bls.n	8006600 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2ba0      	cmp	r3, #160	; 0xa0
 80065dc:	d902      	bls.n	80065e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065de:	2302      	movs	r3, #2
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	e00d      	b.n	8006600 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065e4:	2301      	movs	r3, #1
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	e00a      	b.n	8006600 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b7f      	cmp	r3, #127	; 0x7f
 80065ee:	d902      	bls.n	80065f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80065f0:	2302      	movs	r3, #2
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	e004      	b.n	8006600 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b70      	cmp	r3, #112	; 0x70
 80065fa:	d101      	bne.n	8006600 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065fc:	2301      	movs	r3, #1
 80065fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f023 020f 	bic.w	r2, r3, #15
 8006608:	4909      	ldr	r1, [pc, #36]	; (8006630 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	429a      	cmp	r2, r3
 800661c:	d001      	beq.n	8006622 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40021000 	.word	0x40021000
 8006630:	40022000 	.word	0x40022000

08006634 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800663a:	4b2d      	ldr	r3, [pc, #180]	; (80066f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b03      	cmp	r3, #3
 8006648:	d00b      	beq.n	8006662 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d825      	bhi.n	800669c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d008      	beq.n	8006668 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d11f      	bne.n	800669c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800665c:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800665e:	613b      	str	r3, [r7, #16]
    break;
 8006660:	e01f      	b.n	80066a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006662:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006664:	613b      	str	r3, [r7, #16]
    break;
 8006666:	e01c      	b.n	80066a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006668:	4b21      	ldr	r3, [pc, #132]	; (80066f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d107      	bne.n	8006684 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006674:	4b1e      	ldr	r3, [pc, #120]	; (80066f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800667a:	0a1b      	lsrs	r3, r3, #8
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e005      	b.n	8006690 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006684:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	091b      	lsrs	r3, r3, #4
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006690:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006698:	613b      	str	r3, [r7, #16]
    break;
 800669a:	e002      	b.n	80066a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]
    break;
 80066a0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066a2:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	091b      	lsrs	r3, r3, #4
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	3301      	adds	r3, #1
 80066ae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	0a1b      	lsrs	r3, r3, #8
 80066b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	fb03 f202 	mul.w	r2, r3, r2
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066c8:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	0e5b      	lsrs	r3, r3, #25
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	3301      	adds	r3, #1
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80066e2:	683b      	ldr	r3, [r7, #0]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	40021000 	.word	0x40021000
 80066f4:	00f42400 	.word	0x00f42400
 80066f8:	007a1200 	.word	0x007a1200
 80066fc:	0800b634 	.word	0x0800b634

08006700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006708:	2300      	movs	r3, #0
 800670a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800670c:	2300      	movs	r3, #0
 800670e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006718:	2b00      	cmp	r3, #0
 800671a:	d040      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d02a      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006724:	2b80      	cmp	r3, #128	; 0x80
 8006726:	d825      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006728:	2b60      	cmp	r3, #96	; 0x60
 800672a:	d026      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800672c:	2b60      	cmp	r3, #96	; 0x60
 800672e:	d821      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	d006      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006734:	2b40      	cmp	r3, #64	; 0x40
 8006736:	d81d      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800673c:	2b20      	cmp	r3, #32
 800673e:	d010      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006740:	e018      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006742:	4b89      	ldr	r3, [pc, #548]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	4a88      	ldr	r2, [pc, #544]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800674e:	e015      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3304      	adds	r3, #4
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fb12 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006760:	e00c      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3320      	adds	r3, #32
 8006766:	2100      	movs	r1, #0
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fbfd 	bl	8006f68 <RCCEx_PLLSAI2_Config>
 800676e:	4603      	mov	r3, r0
 8006770:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006772:	e003      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	74fb      	strb	r3, [r7, #19]
      break;
 8006778:	e000      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800677a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800677c:	7cfb      	ldrb	r3, [r7, #19]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10b      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006782:	4b79      	ldr	r3, [pc, #484]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006784:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006788:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006790:	4975      	ldr	r1, [pc, #468]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006798:	e001      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	7cfb      	ldrb	r3, [r7, #19]
 800679c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d047      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b2:	d030      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b8:	d82a      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80067ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067be:	d02a      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80067c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c4:	d824      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80067c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ca:	d008      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80067cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d0:	d81e      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xec>
 80067d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067da:	d010      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80067dc:	e018      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067de:	4b62      	ldr	r3, [pc, #392]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	4a61      	ldr	r2, [pc, #388]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067ea:	e015      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3304      	adds	r3, #4
 80067f0:	2100      	movs	r1, #0
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fac4 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067fc:	e00c      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3320      	adds	r3, #32
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fbaf 	bl	8006f68 <RCCEx_PLLSAI2_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800680e:	e003      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	74fb      	strb	r3, [r7, #19]
      break;
 8006814:	e000      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006818:	7cfb      	ldrb	r3, [r7, #19]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800681e:	4b52      	ldr	r3, [pc, #328]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006820:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682c:	494e      	ldr	r1, [pc, #312]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006834:	e001      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006836:	7cfb      	ldrb	r3, [r7, #19]
 8006838:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 809f 	beq.w	8006986 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006848:	2300      	movs	r3, #0
 800684a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800684c:	4b46      	ldr	r3, [pc, #280]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800684e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800685c:	2300      	movs	r3, #0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006862:	4b41      	ldr	r3, [pc, #260]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	4a40      	ldr	r2, [pc, #256]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800686c:	6593      	str	r3, [r2, #88]	; 0x58
 800686e:	4b3e      	ldr	r3, [pc, #248]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006876:	60bb      	str	r3, [r7, #8]
 8006878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800687a:	2301      	movs	r3, #1
 800687c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800687e:	4b3b      	ldr	r3, [pc, #236]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a3a      	ldr	r2, [pc, #232]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800688a:	f7fc fd2f 	bl	80032ec <HAL_GetTick>
 800688e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006890:	e009      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006892:	f7fc fd2b 	bl	80032ec <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d902      	bls.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	74fb      	strb	r3, [r7, #19]
        break;
 80068a4:	e005      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068a6:	4b31      	ldr	r3, [pc, #196]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0ef      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80068b2:	7cfb      	ldrb	r3, [r7, #19]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d15b      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068b8:	4b2b      	ldr	r3, [pc, #172]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01f      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d019      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068d6:	4b24      	ldr	r3, [pc, #144]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068e2:	4b21      	ldr	r3, [pc, #132]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e8:	4a1f      	ldr	r2, [pc, #124]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f8:	4a1b      	ldr	r2, [pc, #108]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006902:	4a19      	ldr	r2, [pc, #100]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d016      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006914:	f7fc fcea 	bl	80032ec <HAL_GetTick>
 8006918:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800691a:	e00b      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691c:	f7fc fce6 	bl	80032ec <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	f241 3288 	movw	r2, #5000	; 0x1388
 800692a:	4293      	cmp	r3, r2
 800692c:	d902      	bls.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	74fb      	strb	r3, [r7, #19]
            break;
 8006932:	e006      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0ec      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006942:	7cfb      	ldrb	r3, [r7, #19]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10c      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006948:	4b07      	ldr	r3, [pc, #28]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006958:	4903      	ldr	r1, [pc, #12]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006960:	e008      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006962:	7cfb      	ldrb	r3, [r7, #19]
 8006964:	74bb      	strb	r3, [r7, #18]
 8006966:	e005      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006968:	40021000 	.word	0x40021000
 800696c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006974:	7c7b      	ldrb	r3, [r7, #17]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d105      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800697a:	4ba0      	ldr	r3, [pc, #640]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697e:	4a9f      	ldr	r2, [pc, #636]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006984:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006992:	4b9a      	ldr	r3, [pc, #616]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006998:	f023 0203 	bic.w	r2, r3, #3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	4996      	ldr	r1, [pc, #600]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069b4:	4b91      	ldr	r3, [pc, #580]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ba:	f023 020c 	bic.w	r2, r3, #12
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	498e      	ldr	r1, [pc, #568]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069d6:	4b89      	ldr	r3, [pc, #548]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e4:	4985      	ldr	r1, [pc, #532]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069f8:	4b80      	ldr	r3, [pc, #512]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a06:	497d      	ldr	r1, [pc, #500]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0310 	and.w	r3, r3, #16
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a1a:	4b78      	ldr	r3, [pc, #480]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a28:	4974      	ldr	r1, [pc, #464]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a3c:	4b6f      	ldr	r3, [pc, #444]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4a:	496c      	ldr	r1, [pc, #432]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a5e:	4b67      	ldr	r3, [pc, #412]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a6c:	4963      	ldr	r1, [pc, #396]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a80:	4b5e      	ldr	r3, [pc, #376]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8e:	495b      	ldr	r1, [pc, #364]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006aa2:	4b56      	ldr	r3, [pc, #344]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab0:	4952      	ldr	r1, [pc, #328]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ac4:	4b4d      	ldr	r3, [pc, #308]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	494a      	ldr	r1, [pc, #296]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ae6:	4b45      	ldr	r3, [pc, #276]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af4:	4941      	ldr	r1, [pc, #260]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b08:	4b3c      	ldr	r3, [pc, #240]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b0e:	f023 0203 	bic.w	r2, r3, #3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b16:	4939      	ldr	r1, [pc, #228]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d028      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b2a:	4b34      	ldr	r3, [pc, #208]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b38:	4930      	ldr	r1, [pc, #192]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b48:	d106      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b4a:	4b2c      	ldr	r3, [pc, #176]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	4a2b      	ldr	r2, [pc, #172]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b54:	60d3      	str	r3, [r2, #12]
 8006b56:	e011      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3304      	adds	r3, #4
 8006b66:	2101      	movs	r1, #1
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 f909 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b72:	7cfb      	ldrb	r3, [r7, #19]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006b78:	7cfb      	ldrb	r3, [r7, #19]
 8006b7a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d04d      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b90:	d108      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006b92:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b98:	4a18      	ldr	r2, [pc, #96]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006ba2:	e012      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006ba4:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006baa:	4a14      	ldr	r2, [pc, #80]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006bb4:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bc2:	490e      	ldr	r1, [pc, #56]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd2:	d106      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bde:	60d3      	str	r3, [r2, #12]
 8006be0:	e020      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bea:	d109      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006bec:	4b03      	ldr	r3, [pc, #12]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a02      	ldr	r2, [pc, #8]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf6:	60d3      	str	r3, [r2, #12]
 8006bf8:	e014      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006bfa:	bf00      	nop
 8006bfc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c08:	d10c      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	2101      	movs	r1, #1
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 f8b5 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c1a:	7cfb      	ldrb	r3, [r7, #19]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006c20:	7cfb      	ldrb	r3, [r7, #19]
 8006c22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d028      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c30:	4b4a      	ldr	r3, [pc, #296]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c3e:	4947      	ldr	r1, [pc, #284]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c4e:	d106      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c50:	4b42      	ldr	r3, [pc, #264]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	4a41      	ldr	r2, [pc, #260]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c5a:	60d3      	str	r3, [r2, #12]
 8006c5c:	e011      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c66:	d10c      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 f886 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c78:	7cfb      	ldrb	r3, [r7, #19]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006c7e:	7cfb      	ldrb	r3, [r7, #19]
 8006c80:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01e      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c8e:	4b33      	ldr	r3, [pc, #204]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c9e:	492f      	ldr	r1, [pc, #188]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cb0:	d10c      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 f861 	bl	8006d80 <RCCEx_PLLSAI1_Config>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cc2:	7cfb      	ldrb	r3, [r7, #19]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006cc8:	7cfb      	ldrb	r3, [r7, #19]
 8006cca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cd8:	4b20      	ldr	r3, [pc, #128]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cde:	f023 0204 	bic.w	r2, r3, #4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce8:	491c      	ldr	r1, [pc, #112]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006cfc:	4b17      	ldr	r3, [pc, #92]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d02:	f023 0218 	bic.w	r2, r3, #24
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	4913      	ldr	r1, [pc, #76]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d017      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006d20:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d30:	490a      	ldr	r1, [pc, #40]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d42:	d105      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d50:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40021000 	.word	0x40021000

08006d60 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a04      	ldr	r2, [pc, #16]	; (8006d7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d6a:	f043 0304 	orr.w	r3, r3, #4
 8006d6e:	6013      	str	r3, [r2, #0]
}
 8006d70:	bf00      	nop
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40021000 	.word	0x40021000

08006d80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d8e:	4b72      	ldr	r3, [pc, #456]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00e      	beq.n	8006db8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d9a:	4b6f      	ldr	r3, [pc, #444]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f003 0203 	and.w	r2, r3, #3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d103      	bne.n	8006db2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
       ||
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d142      	bne.n	8006e38 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	73fb      	strb	r3, [r7, #15]
 8006db6:	e03f      	b.n	8006e38 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d018      	beq.n	8006df2 <RCCEx_PLLSAI1_Config+0x72>
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d825      	bhi.n	8006e10 <RCCEx_PLLSAI1_Config+0x90>
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d002      	beq.n	8006dce <RCCEx_PLLSAI1_Config+0x4e>
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d009      	beq.n	8006de0 <RCCEx_PLLSAI1_Config+0x60>
 8006dcc:	e020      	b.n	8006e10 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006dce:	4b62      	ldr	r3, [pc, #392]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d11d      	bne.n	8006e16 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dde:	e01a      	b.n	8006e16 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006de0:	4b5d      	ldr	r3, [pc, #372]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d116      	bne.n	8006e1a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006df0:	e013      	b.n	8006e1a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006df2:	4b59      	ldr	r3, [pc, #356]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10f      	bne.n	8006e1e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006dfe:	4b56      	ldr	r3, [pc, #344]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d109      	bne.n	8006e1e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e0e:	e006      	b.n	8006e1e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
      break;
 8006e14:	e004      	b.n	8006e20 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006e16:	bf00      	nop
 8006e18:	e002      	b.n	8006e20 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006e1a:	bf00      	nop
 8006e1c:	e000      	b.n	8006e20 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006e1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d108      	bne.n	8006e38 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006e26:	4b4c      	ldr	r3, [pc, #304]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f023 0203 	bic.w	r2, r3, #3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4949      	ldr	r1, [pc, #292]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 8086 	bne.w	8006f4c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e40:	4b45      	ldr	r3, [pc, #276]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a44      	ldr	r2, [pc, #272]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e4c:	f7fc fa4e 	bl	80032ec <HAL_GetTick>
 8006e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e52:	e009      	b.n	8006e68 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e54:	f7fc fa4a 	bl	80032ec <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d902      	bls.n	8006e68 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	73fb      	strb	r3, [r7, #15]
        break;
 8006e66:	e005      	b.n	8006e74 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e68:	4b3b      	ldr	r3, [pc, #236]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1ef      	bne.n	8006e54 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d168      	bne.n	8006f4c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d113      	bne.n	8006ea8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e80:	4b35      	ldr	r3, [pc, #212]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	4b35      	ldr	r3, [pc, #212]	; (8006f5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6892      	ldr	r2, [r2, #8]
 8006e8c:	0211      	lsls	r1, r2, #8
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	68d2      	ldr	r2, [r2, #12]
 8006e92:	06d2      	lsls	r2, r2, #27
 8006e94:	4311      	orrs	r1, r2
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6852      	ldr	r2, [r2, #4]
 8006e9a:	3a01      	subs	r2, #1
 8006e9c:	0112      	lsls	r2, r2, #4
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	492d      	ldr	r1, [pc, #180]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	610b      	str	r3, [r1, #16]
 8006ea6:	e02d      	b.n	8006f04 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d115      	bne.n	8006eda <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006eae:	4b2a      	ldr	r3, [pc, #168]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	4b2b      	ldr	r3, [pc, #172]	; (8006f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6892      	ldr	r2, [r2, #8]
 8006eba:	0211      	lsls	r1, r2, #8
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6912      	ldr	r2, [r2, #16]
 8006ec0:	0852      	lsrs	r2, r2, #1
 8006ec2:	3a01      	subs	r2, #1
 8006ec4:	0552      	lsls	r2, r2, #21
 8006ec6:	4311      	orrs	r1, r2
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	6852      	ldr	r2, [r2, #4]
 8006ecc:	3a01      	subs	r2, #1
 8006ece:	0112      	lsls	r2, r2, #4
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	4921      	ldr	r1, [pc, #132]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	610b      	str	r3, [r1, #16]
 8006ed8:	e014      	b.n	8006f04 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006eda:	4b1f      	ldr	r3, [pc, #124]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	4b21      	ldr	r3, [pc, #132]	; (8006f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6892      	ldr	r2, [r2, #8]
 8006ee6:	0211      	lsls	r1, r2, #8
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6952      	ldr	r2, [r2, #20]
 8006eec:	0852      	lsrs	r2, r2, #1
 8006eee:	3a01      	subs	r2, #1
 8006ef0:	0652      	lsls	r2, r2, #25
 8006ef2:	4311      	orrs	r1, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6852      	ldr	r2, [r2, #4]
 8006ef8:	3a01      	subs	r2, #1
 8006efa:	0112      	lsls	r2, r2, #4
 8006efc:	430a      	orrs	r2, r1
 8006efe:	4916      	ldr	r1, [pc, #88]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006f04:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a13      	ldr	r2, [pc, #76]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f10:	f7fc f9ec 	bl	80032ec <HAL_GetTick>
 8006f14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f16:	e009      	b.n	8006f2c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f18:	f7fc f9e8 	bl	80032ec <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d902      	bls.n	8006f2c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	73fb      	strb	r3, [r7, #15]
          break;
 8006f2a:	e005      	b.n	8006f38 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0ef      	beq.n	8006f18 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f40:	691a      	ldr	r2, [r3, #16]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	4904      	ldr	r1, [pc, #16]	; (8006f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	07ff800f 	.word	0x07ff800f
 8006f60:	ff9f800f 	.word	0xff9f800f
 8006f64:	f9ff800f 	.word	0xf9ff800f

08006f68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f76:	4b72      	ldr	r3, [pc, #456]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00e      	beq.n	8006fa0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f82:	4b6f      	ldr	r3, [pc, #444]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 0203 	and.w	r2, r3, #3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d103      	bne.n	8006f9a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
       ||
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d142      	bne.n	8007020 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	73fb      	strb	r3, [r7, #15]
 8006f9e:	e03f      	b.n	8007020 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d018      	beq.n	8006fda <RCCEx_PLLSAI2_Config+0x72>
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d825      	bhi.n	8006ff8 <RCCEx_PLLSAI2_Config+0x90>
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d002      	beq.n	8006fb6 <RCCEx_PLLSAI2_Config+0x4e>
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d009      	beq.n	8006fc8 <RCCEx_PLLSAI2_Config+0x60>
 8006fb4:	e020      	b.n	8006ff8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006fb6:	4b62      	ldr	r3, [pc, #392]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d11d      	bne.n	8006ffe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fc6:	e01a      	b.n	8006ffe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fc8:	4b5d      	ldr	r3, [pc, #372]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d116      	bne.n	8007002 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fd8:	e013      	b.n	8007002 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fda:	4b59      	ldr	r3, [pc, #356]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10f      	bne.n	8007006 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006fe6:	4b56      	ldr	r3, [pc, #344]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d109      	bne.n	8007006 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ff6:	e006      	b.n	8007006 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffc:	e004      	b.n	8007008 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ffe:	bf00      	nop
 8007000:	e002      	b.n	8007008 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007002:	bf00      	nop
 8007004:	e000      	b.n	8007008 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007006:	bf00      	nop
    }

    if(status == HAL_OK)
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d108      	bne.n	8007020 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800700e:	4b4c      	ldr	r3, [pc, #304]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f023 0203 	bic.w	r2, r3, #3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4949      	ldr	r1, [pc, #292]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 800701c:	4313      	orrs	r3, r2
 800701e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 8086 	bne.w	8007134 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007028:	4b45      	ldr	r3, [pc, #276]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a44      	ldr	r2, [pc, #272]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 800702e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007034:	f7fc f95a 	bl	80032ec <HAL_GetTick>
 8007038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800703a:	e009      	b.n	8007050 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800703c:	f7fc f956 	bl	80032ec <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d902      	bls.n	8007050 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	73fb      	strb	r3, [r7, #15]
        break;
 800704e:	e005      	b.n	800705c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007050:	4b3b      	ldr	r3, [pc, #236]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1ef      	bne.n	800703c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d168      	bne.n	8007134 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d113      	bne.n	8007090 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007068:	4b35      	ldr	r3, [pc, #212]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 800706a:	695a      	ldr	r2, [r3, #20]
 800706c:	4b35      	ldr	r3, [pc, #212]	; (8007144 <RCCEx_PLLSAI2_Config+0x1dc>)
 800706e:	4013      	ands	r3, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6892      	ldr	r2, [r2, #8]
 8007074:	0211      	lsls	r1, r2, #8
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	68d2      	ldr	r2, [r2, #12]
 800707a:	06d2      	lsls	r2, r2, #27
 800707c:	4311      	orrs	r1, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6852      	ldr	r2, [r2, #4]
 8007082:	3a01      	subs	r2, #1
 8007084:	0112      	lsls	r2, r2, #4
 8007086:	430a      	orrs	r2, r1
 8007088:	492d      	ldr	r1, [pc, #180]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 800708a:	4313      	orrs	r3, r2
 800708c:	614b      	str	r3, [r1, #20]
 800708e:	e02d      	b.n	80070ec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d115      	bne.n	80070c2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007096:	4b2a      	ldr	r3, [pc, #168]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007098:	695a      	ldr	r2, [r3, #20]
 800709a:	4b2b      	ldr	r3, [pc, #172]	; (8007148 <RCCEx_PLLSAI2_Config+0x1e0>)
 800709c:	4013      	ands	r3, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6892      	ldr	r2, [r2, #8]
 80070a2:	0211      	lsls	r1, r2, #8
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6912      	ldr	r2, [r2, #16]
 80070a8:	0852      	lsrs	r2, r2, #1
 80070aa:	3a01      	subs	r2, #1
 80070ac:	0552      	lsls	r2, r2, #21
 80070ae:	4311      	orrs	r1, r2
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6852      	ldr	r2, [r2, #4]
 80070b4:	3a01      	subs	r2, #1
 80070b6:	0112      	lsls	r2, r2, #4
 80070b8:	430a      	orrs	r2, r1
 80070ba:	4921      	ldr	r1, [pc, #132]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	614b      	str	r3, [r1, #20]
 80070c0:	e014      	b.n	80070ec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070c2:	4b1f      	ldr	r3, [pc, #124]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070c4:	695a      	ldr	r2, [r3, #20]
 80070c6:	4b21      	ldr	r3, [pc, #132]	; (800714c <RCCEx_PLLSAI2_Config+0x1e4>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6892      	ldr	r2, [r2, #8]
 80070ce:	0211      	lsls	r1, r2, #8
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6952      	ldr	r2, [r2, #20]
 80070d4:	0852      	lsrs	r2, r2, #1
 80070d6:	3a01      	subs	r2, #1
 80070d8:	0652      	lsls	r2, r2, #25
 80070da:	4311      	orrs	r1, r2
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6852      	ldr	r2, [r2, #4]
 80070e0:	3a01      	subs	r2, #1
 80070e2:	0112      	lsls	r2, r2, #4
 80070e4:	430a      	orrs	r2, r1
 80070e6:	4916      	ldr	r1, [pc, #88]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80070ec:	4b14      	ldr	r3, [pc, #80]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a13      	ldr	r2, [pc, #76]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f8:	f7fc f8f8 	bl	80032ec <HAL_GetTick>
 80070fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070fe:	e009      	b.n	8007114 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007100:	f7fc f8f4 	bl	80032ec <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d902      	bls.n	8007114 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	73fb      	strb	r3, [r7, #15]
          break;
 8007112:	e005      	b.n	8007120 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007114:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0ef      	beq.n	8007100 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007128:	695a      	ldr	r2, [r3, #20]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	4904      	ldr	r1, [pc, #16]	; (8007140 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007130:	4313      	orrs	r3, r2
 8007132:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40021000 	.word	0x40021000
 8007144:	07ff800f 	.word	0x07ff800f
 8007148:	ff9f800f 	.word	0xff9f800f
 800714c:	f9ff800f 	.word	0xf9ff800f

08007150 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e054      	b.n	800720c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	7a5b      	ldrb	r3, [r3, #9]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d105      	bne.n	8007178 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fa fe16 	bl	8001da4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	725a      	strb	r2, [r3, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f023 0120 	bic.w	r1, r3, #32
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	601a      	str	r2, [r3, #0]
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0204 	orr.w	r2, r2, #4
 80071a2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d104      	bne.n	80071bc <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2204      	movs	r2, #4
 80071b6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e027      	b.n	800720c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80071bc:	f7fc f896 	bl	80032ec <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80071c2:	e015      	b.n	80071f0 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80071c4:	f7fc f892 	bl	80032ec <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d90e      	bls.n	80071f0 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d107      	bne.n	80071f0 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2204      	movs	r2, #4
 80071e4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e00d      	b.n	800720c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d0e2      	beq.n	80071c4 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e095      	b.n	8007352 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	2b00      	cmp	r3, #0
 800722c:	d108      	bne.n	8007240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007236:	d009      	beq.n	800724c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	61da      	str	r2, [r3, #28]
 800723e:	e005      	b.n	800724c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fa fdbc 	bl	8001de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007282:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800728c:	d902      	bls.n	8007294 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	e002      	b.n	800729a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007298:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80072a2:	d007      	beq.n	80072b4 <HAL_SPI_Init+0xa0>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072ac:	d002      	beq.n	80072b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f6:	ea42 0103 	orr.w	r1, r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	f003 0204 	and.w	r2, r3, #4
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007322:	f003 0308 	and.w	r3, r3, #8
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007330:	ea42 0103 	orr.w	r1, r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e01a      	b.n	80073a2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007382:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7fa fd6f 	bl	8001e68 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b088      	sub	sp, #32
 80073ae:	af02      	add	r7, sp, #8
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073c6:	d112      	bne.n	80073ee <HAL_SPI_Receive+0x44>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10e      	bne.n	80073ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2204      	movs	r2, #4
 80073d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4613      	mov	r3, r2
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f910 	bl	800760a <HAL_SPI_TransmitReceive>
 80073ea:	4603      	mov	r3, r0
 80073ec:	e109      	b.n	8007602 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_SPI_Receive+0x52>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e102      	b.n	8007602 <HAL_SPI_Receive+0x258>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007404:	f7fb ff72 	bl	80032ec <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b01      	cmp	r3, #1
 8007414:	d002      	beq.n	800741c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007416:	2302      	movs	r3, #2
 8007418:	75fb      	strb	r3, [r7, #23]
    goto error;
 800741a:	e0e9      	b.n	80075f0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_SPI_Receive+0x7e>
 8007422:	88fb      	ldrh	r3, [r7, #6]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d102      	bne.n	800742e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800742c:	e0e0      	b.n	80075f0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2204      	movs	r2, #4
 8007432:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	88fa      	ldrh	r2, [r7, #6]
 8007446:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	88fa      	ldrh	r2, [r7, #6]
 800744e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007478:	d908      	bls.n	800748c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	e007      	b.n	800749c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800749a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a4:	d10f      	bne.n	80074c6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d007      	beq.n	80074e4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074ec:	d867      	bhi.n	80075be <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80074ee:	e030      	b.n	8007552 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d117      	bne.n	800752e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f103 020c 	add.w	r2, r3, #12
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	7812      	ldrb	r2, [r2, #0]
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800752c:	e011      	b.n	8007552 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800752e:	f7fb fedd 	bl	80032ec <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d803      	bhi.n	8007546 <HAL_SPI_Receive+0x19c>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007544:	d102      	bne.n	800754c <HAL_SPI_Receive+0x1a2>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007550:	e04e      	b.n	80075f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1c8      	bne.n	80074f0 <HAL_SPI_Receive+0x146>
 800755e:	e034      	b.n	80075ca <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b01      	cmp	r3, #1
 800756c:	d115      	bne.n	800759a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	b292      	uxth	r2, r2
 800757a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	1c9a      	adds	r2, r3, #2
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007598:	e011      	b.n	80075be <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800759a:	f7fb fea7 	bl	80032ec <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d803      	bhi.n	80075b2 <HAL_SPI_Receive+0x208>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b0:	d102      	bne.n	80075b8 <HAL_SPI_Receive+0x20e>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075bc:	e018      	b.n	80075f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1ca      	bne.n	8007560 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 f802 	bl	80085d8 <SPI_EndRxTransaction>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2220      	movs	r2, #32
 80075de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
 80075ec:	e000      	b.n	80075f0 <HAL_SPI_Receive+0x246>
  }

error :
 80075ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007600:	7dfb      	ldrb	r3, [r7, #23]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b08a      	sub	sp, #40	; 0x28
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
 8007616:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007618:	2301      	movs	r3, #1
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_SPI_TransmitReceive+0x26>
 800762c:	2302      	movs	r3, #2
 800762e:	e1fb      	b.n	8007a28 <HAL_SPI_TransmitReceive+0x41e>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007638:	f7fb fe58 	bl	80032ec <HAL_GetTick>
 800763c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007644:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007650:	887b      	ldrh	r3, [r7, #2]
 8007652:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007654:	7efb      	ldrb	r3, [r7, #27]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d00e      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x6e>
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007660:	d106      	bne.n	8007670 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <HAL_SPI_TransmitReceive+0x66>
 800766a:	7efb      	ldrb	r3, [r7, #27]
 800766c:	2b04      	cmp	r3, #4
 800766e:	d003      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007670:	2302      	movs	r3, #2
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007676:	e1cd      	b.n	8007a14 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <HAL_SPI_TransmitReceive+0x80>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_SPI_TransmitReceive+0x80>
 8007684:	887b      	ldrh	r3, [r7, #2]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d103      	bne.n	8007692 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007690:	e1c0      	b.n	8007a14 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b04      	cmp	r3, #4
 800769c:	d003      	beq.n	80076a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2205      	movs	r2, #5
 80076a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	887a      	ldrh	r2, [r7, #2]
 80076b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	887a      	ldrh	r2, [r7, #2]
 80076be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	887a      	ldrh	r2, [r7, #2]
 80076cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	887a      	ldrh	r2, [r7, #2]
 80076d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076e8:	d802      	bhi.n	80076f0 <HAL_SPI_TransmitReceive+0xe6>
 80076ea:	8a3b      	ldrh	r3, [r7, #16]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d908      	bls.n	8007702 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076fe:	605a      	str	r2, [r3, #4]
 8007700:	e007      	b.n	8007712 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007710:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771c:	2b40      	cmp	r3, #64	; 0x40
 800771e:	d007      	beq.n	8007730 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800772e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007738:	d97c      	bls.n	8007834 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_SPI_TransmitReceive+0x13e>
 8007742:	8a7b      	ldrh	r3, [r7, #18]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d169      	bne.n	800781c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774c:	881a      	ldrh	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	1c9a      	adds	r2, r3, #2
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800776c:	e056      	b.n	800781c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b02      	cmp	r3, #2
 800777a:	d11b      	bne.n	80077b4 <HAL_SPI_TransmitReceive+0x1aa>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d016      	beq.n	80077b4 <HAL_SPI_TransmitReceive+0x1aa>
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	2b01      	cmp	r3, #1
 800778a:	d113      	bne.n	80077b4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	881a      	ldrh	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	1c9a      	adds	r2, r3, #2
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d11c      	bne.n	80077fc <HAL_SPI_TransmitReceive+0x1f2>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d016      	beq.n	80077fc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d8:	b292      	uxth	r2, r2
 80077da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e0:	1c9a      	adds	r2, r3, #2
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077f8:	2301      	movs	r3, #1
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077fc:	f7fb fd76 	bl	80032ec <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007808:	429a      	cmp	r2, r3
 800780a:	d807      	bhi.n	800781c <HAL_SPI_TransmitReceive+0x212>
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d003      	beq.n	800781c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800781a:	e0fb      	b.n	8007a14 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1a3      	bne.n	800776e <HAL_SPI_TransmitReceive+0x164>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d19d      	bne.n	800776e <HAL_SPI_TransmitReceive+0x164>
 8007832:	e0df      	b.n	80079f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x23a>
 800783c:	8a7b      	ldrh	r3, [r7, #18]
 800783e:	2b01      	cmp	r3, #1
 8007840:	f040 80cb 	bne.w	80079da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b01      	cmp	r3, #1
 800784c:	d912      	bls.n	8007874 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	881a      	ldrh	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	1c9a      	adds	r2, r3, #2
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b02      	subs	r3, #2
 800786c:	b29a      	uxth	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007872:	e0b2      	b.n	80079da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	330c      	adds	r3, #12
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789a:	e09e      	b.n	80079da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d134      	bne.n	8007914 <HAL_SPI_TransmitReceive+0x30a>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d02f      	beq.n	8007914 <HAL_SPI_TransmitReceive+0x30a>
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d12c      	bne.n	8007914 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d912      	bls.n	80078ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	881a      	ldrh	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	1c9a      	adds	r2, r3, #2
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b02      	subs	r3, #2
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078e8:	e012      	b.n	8007910 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	7812      	ldrb	r2, [r2, #0]
 80078f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b01      	cmp	r3, #1
 8007920:	d148      	bne.n	80079b4 <HAL_SPI_TransmitReceive+0x3aa>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d042      	beq.n	80079b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007934:	b29b      	uxth	r3, r3
 8007936:	2b01      	cmp	r3, #1
 8007938:	d923      	bls.n	8007982 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	b292      	uxth	r2, r2
 8007946:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794c:	1c9a      	adds	r2, r3, #2
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b02      	subs	r3, #2
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800796a:	b29b      	uxth	r3, r3
 800796c:	2b01      	cmp	r3, #1
 800796e:	d81f      	bhi.n	80079b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800797e:	605a      	str	r2, [r3, #4]
 8007980:	e016      	b.n	80079b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f103 020c 	add.w	r2, r3, #12
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079b0:	2301      	movs	r3, #1
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079b4:	f7fb fc9a 	bl	80032ec <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d803      	bhi.n	80079cc <HAL_SPI_TransmitReceive+0x3c2>
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ca:	d102      	bne.n	80079d2 <HAL_SPI_TransmitReceive+0x3c8>
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d103      	bne.n	80079da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80079d8:	e01c      	b.n	8007a14 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f af5b 	bne.w	800789c <HAL_SPI_TransmitReceive+0x292>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f47f af54 	bne.w	800789c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 fe45 	bl	8008688 <SPI_EndRxTxTransaction>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d006      	beq.n	8007a12 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	661a      	str	r2, [r3, #96]	; 0x60
 8007a10:	e000      	b.n	8007a14 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007a12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3728      	adds	r7, #40	; 0x28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_SPI_Transmit_IT+0x20>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e072      	b.n	8007b36 <HAL_SPI_Transmit_IT+0x106>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <HAL_SPI_Transmit_IT+0x34>
 8007a5e:	88fb      	ldrh	r3, [r7, #6]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a68:	e060      	b.n	8007b2c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d002      	beq.n	8007a7c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8007a76:	2302      	movs	r3, #2
 8007a78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a7a:	e057      	b.n	8007b2c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2203      	movs	r2, #3
 8007a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ac0:	d903      	bls.n	8007aca <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <HAL_SPI_Transmit_IT+0x114>)
 8007ac6:	651a      	str	r2, [r3, #80]	; 0x50
 8007ac8:	e002      	b.n	8007ad0 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4a1e      	ldr	r2, [pc, #120]	; (8007b48 <HAL_SPI_Transmit_IT+0x118>)
 8007ace:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad8:	d10f      	bne.n	8007afa <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007af8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007b08:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d008      	beq.n	8007b2a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	e000      	b.n	8007b2c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8007b2a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	08008357 	.word	0x08008357
 8007b48:	08008311 	.word	0x08008311

08007b4c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d110      	bne.n	8007b88 <HAL_SPI_Receive_IT+0x3c>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b6e:	d10b      	bne.n	8007b88 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2204      	movs	r2, #4
 8007b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 f894 	bl	8007cac <HAL_SPI_TransmitReceive_IT>
 8007b84:	4603      	mov	r3, r0
 8007b86:	e089      	b.n	8007c9c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d101      	bne.n	8007b96 <HAL_SPI_Receive_IT+0x4a>
 8007b92:	2302      	movs	r3, #2
 8007b94:	e082      	b.n	8007c9c <HAL_SPI_Receive_IT+0x150>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d002      	beq.n	8007bb0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007baa:	2302      	movs	r3, #2
 8007bac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bae:	e070      	b.n	8007c92 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <HAL_SPI_Receive_IT+0x70>
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bc0:	e067      	b.n	8007c92 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	88fa      	ldrh	r2, [r7, #6]
 8007bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	88fa      	ldrh	r2, [r7, #6]
 8007be2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c06:	d90b      	bls.n	8007c20 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c16:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4a22      	ldr	r2, [pc, #136]	; (8007ca4 <HAL_SPI_Receive_IT+0x158>)
 8007c1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8007c1e:	e00a      	b.n	8007c36 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c2e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a1d      	ldr	r2, [pc, #116]	; (8007ca8 <HAL_SPI_Receive_IT+0x15c>)
 8007c34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3e:	d10f      	bne.n	8007c60 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c5e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007c6e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d008      	beq.n	8007c90 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e000      	b.n	8007c92 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8007c90:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	080082c5 	.word	0x080082c5
 8007ca8:	08008275 	.word	0x08008275

08007cac <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_SPI_TransmitReceive_IT+0x20>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e091      	b.n	8007df0 <HAL_SPI_TransmitReceive_IT+0x144>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cda:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ce2:	7dbb      	ldrb	r3, [r7, #22]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d00d      	beq.n	8007d04 <HAL_SPI_TransmitReceive_IT+0x58>
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cee:	d106      	bne.n	8007cfe <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <HAL_SPI_TransmitReceive_IT+0x52>
 8007cf8:	7dbb      	ldrb	r3, [r7, #22]
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d002      	beq.n	8007d04 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d02:	e070      	b.n	8007de6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007d10:	887b      	ldrh	r3, [r7, #2]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d1a:	e064      	b.n	8007de6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	d003      	beq.n	8007d30 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2205      	movs	r2, #5
 8007d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	887a      	ldrh	r2, [r7, #2]
 8007d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	887a      	ldrh	r2, [r7, #2]
 8007d46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	887a      	ldrh	r2, [r7, #2]
 8007d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	887a      	ldrh	r2, [r7, #2]
 8007d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d66:	d906      	bls.n	8007d76 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4a24      	ldr	r2, [pc, #144]	; (8007dfc <HAL_SPI_TransmitReceive_IT+0x150>)
 8007d6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4a23      	ldr	r2, [pc, #140]	; (8007e00 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007d72:	651a      	str	r2, [r3, #80]	; 0x50
 8007d74:	e005      	b.n	8007d82 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4a22      	ldr	r2, [pc, #136]	; (8007e04 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007d7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4a22      	ldr	r2, [pc, #136]	; (8007e08 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007d80:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d8a:	d802      	bhi.n	8007d92 <HAL_SPI_TransmitReceive_IT+0xe6>
 8007d8c:	887b      	ldrh	r3, [r7, #2]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d908      	bls.n	8007da4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	e007      	b.n	8007db4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007db2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007dc2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d008      	beq.n	8007de4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	e000      	b.n	8007de6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007de4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	080081af 	.word	0x080081af
 8007e00:	08008215 	.word	0x08008215
 8007e04:	0800805f 	.word	0x0800805f
 8007e08:	0800811d 	.word	0x0800811d

08007e0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	099b      	lsrs	r3, r3, #6
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10f      	bne.n	8007e50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	099b      	lsrs	r3, r3, #6
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
    return;
 8007e4e:	e0d7      	b.n	8008000 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <HAL_SPI_IRQHandler+0x66>
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	09db      	lsrs	r3, r3, #7
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
    return;
 8007e70:	e0c6      	b.n	8008000 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	095b      	lsrs	r3, r3, #5
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10c      	bne.n	8007e98 <HAL_SPI_IRQHandler+0x8c>
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	099b      	lsrs	r3, r3, #6
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 80b4 	beq.w	8008000 <HAL_SPI_IRQHandler+0x1f4>
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80ad 	beq.w	8008000 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	099b      	lsrs	r3, r3, #6
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d023      	beq.n	8007efa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d011      	beq.n	8007ee2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec2:	f043 0204 	orr.w	r2, r3, #4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	e00b      	b.n	8007efa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	613b      	str	r3, [r7, #16]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	613b      	str	r3, [r7, #16]
 8007ef6:	693b      	ldr	r3, [r7, #16]
        return;
 8007ef8:	e082      	b.n	8008000 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d014      	beq.n	8007f30 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0a:	f043 0201 	orr.w	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	0a1b      	lsrs	r3, r3, #8
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00c      	beq.n	8007f56 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f40:	f043 0208 	orr.w	r2, r3, #8
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60bb      	str	r3, [r7, #8]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	60bb      	str	r3, [r7, #8]
 8007f54:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d04f      	beq.n	8007ffe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f6c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <HAL_SPI_IRQHandler+0x17e>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d034      	beq.n	8007ff4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f022 0203 	bic.w	r2, r2, #3
 8007f98:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d011      	beq.n	8007fc6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa6:	4a18      	ldr	r2, [pc, #96]	; (8008008 <HAL_SPI_IRQHandler+0x1fc>)
 8007fa8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fc fad2 	bl	8004558 <HAL_DMA_Abort_IT>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d005      	beq.n	8007fc6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d016      	beq.n	8007ffc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd2:	4a0d      	ldr	r2, [pc, #52]	; (8008008 <HAL_SPI_IRQHandler+0x1fc>)
 8007fd4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fc fabc 	bl	8004558 <HAL_DMA_Abort_IT>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007ff2:	e003      	b.n	8007ffc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f813 	bl	8008020 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ffa:	e000      	b.n	8007ffe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007ffc:	bf00      	nop
    return;
 8007ffe:	bf00      	nop
  }
}
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	08008035 	.word	0x08008035

0800800c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008040:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff ffe5 	bl	8008020 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800806c:	b29b      	uxth	r3, r3
 800806e:	2b01      	cmp	r3, #1
 8008070:	d923      	bls.n	80080ba <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	b292      	uxth	r2, r2
 800807e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	1c9a      	adds	r2, r3, #2
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b02      	subs	r3, #2
 8008094:	b29a      	uxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d11f      	bne.n	80080e8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080b6:	605a      	str	r2, [r3, #4]
 80080b8:	e016      	b.n	80080e8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f103 020c 	add.w	r2, r3, #12
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	7812      	ldrb	r2, [r2, #0]
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10f      	bne.n	8008114 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008102:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fb00 	bl	8008714 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008114:	bf00      	nop
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b01      	cmp	r3, #1
 800812c:	d912      	bls.n	8008154 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	881a      	ldrh	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	1c9a      	adds	r2, r3, #2
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b02      	subs	r3, #2
 800814c:	b29a      	uxth	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008152:	e012      	b.n	800817a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	330c      	adds	r3, #12
 800815e:	7812      	ldrb	r2, [r2, #0]
 8008160:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008170:	b29b      	uxth	r3, r3
 8008172:	3b01      	subs	r3, #1
 8008174:	b29a      	uxth	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817e:	b29b      	uxth	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d110      	bne.n	80081a6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008192:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fab7 	bl	8008714 <SPI_CloseRxTx_ISR>
    }
  }
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68da      	ldr	r2, [r3, #12]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	b292      	uxth	r2, r2
 80081c2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	1c9a      	adds	r2, r3, #2
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10f      	bne.n	800820c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008200:	b29b      	uxth	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa84 	bl	8008714 <SPI_CloseRxTx_ISR>
    }
  }
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	881a      	ldrh	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	1c9a      	adds	r2, r3, #2
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008236:	b29b      	uxth	r3, r3
 8008238:	3b01      	subs	r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d110      	bne.n	800826c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008258:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa54 	bl	8008714 <SPI_CloseRxTx_ISR>
    }
  }
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f103 020c 	add.w	r2, r3, #12
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008288:	7812      	ldrb	r2, [r2, #0]
 800828a:	b2d2      	uxtb	r2, r2
 800828c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa6e 	bl	8008798 <SPI_CloseRx_ISR>
  }
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	b292      	uxth	r2, r2
 80082d8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	1c9a      	adds	r2, r3, #2
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d102      	bne.n	8008308 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa48 	bl	8008798 <SPI_CloseRx_ISR>
  }
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	330c      	adds	r3, #12
 8008322:	7812      	ldrb	r2, [r2, #0]
 8008324:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fa55 	bl	80087f8 <SPI_CloseTx_ISR>
  }
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008362:	881a      	ldrh	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	1c9a      	adds	r2, r3, #2
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008378:	b29b      	uxth	r3, r3
 800837a:	3b01      	subs	r3, #1
 800837c:	b29a      	uxth	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fa33 	bl	80087f8 <SPI_CloseTx_ISR>
  }
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	4613      	mov	r3, r2
 80083aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083ac:	f7fa ff9e 	bl	80032ec <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	1a9b      	subs	r3, r3, r2
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	4413      	add	r3, r2
 80083ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083bc:	f7fa ff96 	bl	80032ec <HAL_GetTick>
 80083c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083c2:	4b39      	ldr	r3, [pc, #228]	; (80084a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	015b      	lsls	r3, r3, #5
 80083c8:	0d1b      	lsrs	r3, r3, #20
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	fb02 f303 	mul.w	r3, r2, r3
 80083d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083d2:	e054      	b.n	800847e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	d050      	beq.n	800847e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083dc:	f7fa ff86 	bl	80032ec <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d902      	bls.n	80083f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d13d      	bne.n	800846e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800840a:	d111      	bne.n	8008430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008414:	d004      	beq.n	8008420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800841e:	d107      	bne.n	8008430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800842e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008438:	d10f      	bne.n	800845a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e017      	b.n	800849e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	3b01      	subs	r3, #1
 800847c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4013      	ands	r3, r2
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	429a      	cmp	r2, r3
 800848c:	bf0c      	ite	eq
 800848e:	2301      	moveq	r3, #1
 8008490:	2300      	movne	r3, #0
 8008492:	b2db      	uxtb	r3, r3
 8008494:	461a      	mov	r2, r3
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	429a      	cmp	r2, r3
 800849a:	d19b      	bne.n	80083d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3720      	adds	r7, #32
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000000 	.word	0x20000000

080084ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08a      	sub	sp, #40	; 0x28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
 80084b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084be:	f7fa ff15 	bl	80032ec <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	1a9b      	subs	r3, r3, r2
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	4413      	add	r3, r2
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80084ce:	f7fa ff0d 	bl	80032ec <HAL_GetTick>
 80084d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084dc:	4b3d      	ldr	r3, [pc, #244]	; (80085d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	00da      	lsls	r2, r3, #3
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	0d1b      	lsrs	r3, r3, #20
 80084ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ee:	fb02 f303 	mul.w	r3, r2, r3
 80084f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80084f4:	e060      	b.n	80085b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084fc:	d107      	bne.n	800850e <SPI_WaitFifoStateUntilTimeout+0x62>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800850c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008514:	d050      	beq.n	80085b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008516:	f7fa fee9 	bl	80032ec <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008522:	429a      	cmp	r2, r3
 8008524:	d902      	bls.n	800852c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	2b00      	cmp	r3, #0
 800852a:	d13d      	bne.n	80085a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800853a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008544:	d111      	bne.n	800856a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800854e:	d004      	beq.n	800855a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008558:	d107      	bne.n	800856a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008568:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008572:	d10f      	bne.n	8008594 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008592:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e010      	b.n	80085ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	4013      	ands	r3, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d196      	bne.n	80084f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3728      	adds	r7, #40	; 0x28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20000000 	.word	0x20000000

080085d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af02      	add	r7, sp, #8
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ec:	d111      	bne.n	8008612 <SPI_EndRxTransaction+0x3a>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085f6:	d004      	beq.n	8008602 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008600:	d107      	bne.n	8008612 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008610:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2200      	movs	r2, #0
 800861a:	2180      	movs	r1, #128	; 0x80
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7ff febd 	bl	800839c <SPI_WaitFlagStateUntilTimeout>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d007      	beq.n	8008638 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800862c:	f043 0220 	orr.w	r2, r3, #32
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e023      	b.n	8008680 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008640:	d11d      	bne.n	800867e <SPI_EndRxTransaction+0xa6>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800864a:	d004      	beq.n	8008656 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008654:	d113      	bne.n	800867e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2200      	movs	r2, #0
 800865e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff ff22 	bl	80084ac <SPI_WaitFifoStateUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008672:	f043 0220 	orr.w	r2, r3, #32
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e000      	b.n	8008680 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af02      	add	r7, sp, #8
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2200      	movs	r2, #0
 800869c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff ff03 	bl	80084ac <SPI_WaitFifoStateUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b0:	f043 0220 	orr.w	r2, r3, #32
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e027      	b.n	800870c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	2180      	movs	r1, #128	; 0x80
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff fe68 	bl	800839c <SPI_WaitFlagStateUntilTimeout>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d007      	beq.n	80086e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d6:	f043 0220 	orr.w	r2, r3, #32
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e014      	b.n	800870c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f7ff fedc 	bl	80084ac <SPI_WaitFifoStateUntilTimeout>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086fe:	f043 0220 	orr.w	r2, r3, #32
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e000      	b.n	800870c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800871c:	f7fa fde6 	bl	80032ec <HAL_GetTick>
 8008720:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0220 	bic.w	r2, r2, #32
 8008730:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	2164      	movs	r1, #100	; 0x64
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff ffa6 	bl	8008688 <SPI_EndRxTxTransaction>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008746:	f043 0220 	orr.w	r2, r3, #32
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008752:	2b00      	cmp	r3, #0
 8008754:	d115      	bne.n	8008782 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b04      	cmp	r3, #4
 8008760:	d107      	bne.n	8008772 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7f8 fa7e 	bl	8000c6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008770:	e00e      	b.n	8008790 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff fc46 	bl	800800c <HAL_SPI_TxRxCpltCallback>
}
 8008780:	e006      	b.n	8008790 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fc48 	bl	8008020 <HAL_SPI_ErrorCallback>
}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80087ae:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80087b0:	f7fa fd9c 	bl	80032ec <HAL_GetTick>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	2164      	movs	r1, #100	; 0x64
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff ff0c 	bl	80085d8 <SPI_EndRxTransaction>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ca:	f043 0220 	orr.w	r2, r3, #32
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d103      	bne.n	80087ea <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7f8 fa42 	bl	8000c6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80087e8:	e002      	b.n	80087f0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7ff fc18 	bl	8008020 <HAL_SPI_ErrorCallback>
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008800:	f7fa fd74 	bl	80032ec <HAL_GetTick>
 8008804:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008814:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	2164      	movs	r1, #100	; 0x64
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff ff34 	bl	8008688 <SPI_EndRxTxTransaction>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800882a:	f043 0220 	orr.w	r2, r3, #32
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10a      	bne.n	8008850 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800883a:	2300      	movs	r3, #0
 800883c:	60bb      	str	r3, [r7, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	60bb      	str	r3, [r7, #8]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	60bb      	str	r3, [r7, #8]
 800884e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff fbdd 	bl	8008020 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008866:	e002      	b.n	800886e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7f8 fa13 	bl	8000c94 <HAL_SPI_TxCpltCallback>
}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e042      	b.n	800890e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800888e:	2b00      	cmp	r3, #0
 8008890:	d106      	bne.n	80088a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7f9 fb00 	bl	8001ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2224      	movs	r2, #36	; 0x24
 80088a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0201 	bic.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f997 	bl	8008bec <UART_SetConfig>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e022      	b.n	800890e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fc87 	bl	80091e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0201 	orr.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fd0e 	bl	8009328 <UART_CheckIdleState>
 800890c:	4603      	mov	r3, r0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b08a      	sub	sp, #40	; 0x28
 800891a:	af02      	add	r7, sp, #8
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	603b      	str	r3, [r7, #0]
 8008922:	4613      	mov	r3, r2
 8008924:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800892c:	2b20      	cmp	r3, #32
 800892e:	f040 8084 	bne.w	8008a3a <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <HAL_UART_Transmit+0x28>
 8008938:	88fb      	ldrh	r3, [r7, #6]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e07c      	b.n	8008a3c <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008948:	2b01      	cmp	r3, #1
 800894a:	d101      	bne.n	8008950 <HAL_UART_Transmit+0x3a>
 800894c:	2302      	movs	r3, #2
 800894e:	e075      	b.n	8008a3c <HAL_UART_Transmit+0x126>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2221      	movs	r2, #33	; 0x21
 8008964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008968:	f7fa fcc0 	bl	80032ec <HAL_GetTick>
 800896c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	88fa      	ldrh	r2, [r7, #6]
 8008972:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	88fa      	ldrh	r2, [r7, #6]
 800897a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008986:	d108      	bne.n	800899a <HAL_UART_Transmit+0x84>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008990:	2300      	movs	r3, #0
 8008992:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	61bb      	str	r3, [r7, #24]
 8008998:	e003      	b.n	80089a2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80089aa:	e02d      	b.n	8008a08 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2200      	movs	r2, #0
 80089b4:	2180      	movs	r1, #128	; 0x80
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fd01 	bl	80093be <UART_WaitOnFlagUntilTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e03a      	b.n	8008a3c <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10b      	bne.n	80089e4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	881a      	ldrh	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089d8:	b292      	uxth	r2, r2
 80089da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	3302      	adds	r3, #2
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	e008      	b.n	80089f6 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	b292      	uxth	r2, r2
 80089ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	3301      	adds	r3, #1
 80089f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	3b01      	subs	r3, #1
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1cb      	bne.n	80089ac <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2140      	movs	r1, #64	; 0x40
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fccd 	bl	80093be <UART_WaitOnFlagUntilTimeout>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e006      	b.n	8008a3c <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2220      	movs	r2, #32
 8008a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e000      	b.n	8008a3c <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008a3a:	2302      	movs	r3, #2
  }
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3720      	adds	r7, #32
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08a      	sub	sp, #40	; 0x28
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	4613      	mov	r3, r2
 8008a52:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a5a:	2b20      	cmp	r3, #32
 8008a5c:	f040 80c1 	bne.w	8008be2 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <HAL_UART_Receive+0x28>
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e0b9      	b.n	8008be4 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d101      	bne.n	8008a7e <HAL_UART_Receive+0x3a>
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	e0b2      	b.n	8008be4 <HAL_UART_Receive+0x1a0>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2222      	movs	r2, #34	; 0x22
 8008a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a9c:	f7fa fc26 	bl	80032ec <HAL_GetTick>
 8008aa0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	88fa      	ldrh	r2, [r7, #6]
 8008aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aba:	d10e      	bne.n	8008ada <HAL_UART_Receive+0x96>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d105      	bne.n	8008ad0 <HAL_UART_Receive+0x8c>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008aca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ace:	e02d      	b.n	8008b2c <HAL_UART_Receive+0xe8>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	22ff      	movs	r2, #255	; 0xff
 8008ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ad8:	e028      	b.n	8008b2c <HAL_UART_Receive+0xe8>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10d      	bne.n	8008afe <HAL_UART_Receive+0xba>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <HAL_UART_Receive+0xb0>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	22ff      	movs	r2, #255	; 0xff
 8008aee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008af2:	e01b      	b.n	8008b2c <HAL_UART_Receive+0xe8>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	227f      	movs	r2, #127	; 0x7f
 8008af8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008afc:	e016      	b.n	8008b2c <HAL_UART_Receive+0xe8>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b06:	d10d      	bne.n	8008b24 <HAL_UART_Receive+0xe0>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <HAL_UART_Receive+0xd6>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	227f      	movs	r2, #127	; 0x7f
 8008b14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b18:	e008      	b.n	8008b2c <HAL_UART_Receive+0xe8>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	223f      	movs	r2, #63	; 0x3f
 8008b1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b22:	e003      	b.n	8008b2c <HAL_UART_Receive+0xe8>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b32:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3c:	d108      	bne.n	8008b50 <HAL_UART_Receive+0x10c>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d104      	bne.n	8008b50 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	e003      	b.n	8008b58 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b54:	2300      	movs	r3, #0
 8008b56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008b60:	e033      	b.n	8008bca <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2120      	movs	r1, #32
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fc26 	bl	80093be <UART_WaitOnFlagUntilTimeout>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e033      	b.n	8008be4 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10c      	bne.n	8008b9c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	8a7b      	ldrh	r3, [r7, #18]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	3302      	adds	r3, #2
 8008b98:	61bb      	str	r3, [r7, #24]
 8008b9a:	e00d      	b.n	8008bb8 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	8a7b      	ldrh	r3, [r7, #18]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	4013      	ands	r3, r2
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1c5      	bne.n	8008b62 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	e000      	b.n	8008be4 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8008be2:	2302      	movs	r3, #2
  }
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3720      	adds	r7, #32
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bf0:	b08c      	sub	sp, #48	; 0x30
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	431a      	orrs	r2, r3
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	4baa      	ldr	r3, [pc, #680]	; (8008ec4 <UART_SetConfig+0x2d8>)
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	6812      	ldr	r2, [r2, #0]
 8008c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c24:	430b      	orrs	r3, r1
 8008c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a9f      	ldr	r2, [pc, #636]	; (8008ec8 <UART_SetConfig+0x2dc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d004      	beq.n	8008c58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c54:	4313      	orrs	r3, r2
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	6812      	ldr	r2, [r2, #0]
 8008c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	f023 010f 	bic.w	r1, r3, #15
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a90      	ldr	r2, [pc, #576]	; (8008ecc <UART_SetConfig+0x2e0>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d125      	bne.n	8008cdc <UART_SetConfig+0xf0>
 8008c90:	4b8f      	ldr	r3, [pc, #572]	; (8008ed0 <UART_SetConfig+0x2e4>)
 8008c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d81a      	bhi.n	8008cd4 <UART_SetConfig+0xe8>
 8008c9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <UART_SetConfig+0xb8>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008cb5 	.word	0x08008cb5
 8008ca8:	08008cc5 	.word	0x08008cc5
 8008cac:	08008cbd 	.word	0x08008cbd
 8008cb0:	08008ccd 	.word	0x08008ccd
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cba:	e116      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cc2:	e112      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008cc4:	2304      	movs	r3, #4
 8008cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cca:	e10e      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008ccc:	2308      	movs	r3, #8
 8008cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cd2:	e10a      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008cd4:	2310      	movs	r3, #16
 8008cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cda:	e106      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a7c      	ldr	r2, [pc, #496]	; (8008ed4 <UART_SetConfig+0x2e8>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d138      	bne.n	8008d58 <UART_SetConfig+0x16c>
 8008ce6:	4b7a      	ldr	r3, [pc, #488]	; (8008ed0 <UART_SetConfig+0x2e4>)
 8008ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cec:	f003 030c 	and.w	r3, r3, #12
 8008cf0:	2b0c      	cmp	r3, #12
 8008cf2:	d82d      	bhi.n	8008d50 <UART_SetConfig+0x164>
 8008cf4:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <UART_SetConfig+0x110>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d31 	.word	0x08008d31
 8008d00:	08008d51 	.word	0x08008d51
 8008d04:	08008d51 	.word	0x08008d51
 8008d08:	08008d51 	.word	0x08008d51
 8008d0c:	08008d41 	.word	0x08008d41
 8008d10:	08008d51 	.word	0x08008d51
 8008d14:	08008d51 	.word	0x08008d51
 8008d18:	08008d51 	.word	0x08008d51
 8008d1c:	08008d39 	.word	0x08008d39
 8008d20:	08008d51 	.word	0x08008d51
 8008d24:	08008d51 	.word	0x08008d51
 8008d28:	08008d51 	.word	0x08008d51
 8008d2c:	08008d49 	.word	0x08008d49
 8008d30:	2300      	movs	r3, #0
 8008d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d36:	e0d8      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d3e:	e0d4      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008d40:	2304      	movs	r3, #4
 8008d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d46:	e0d0      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008d48:	2308      	movs	r3, #8
 8008d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4e:	e0cc      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008d50:	2310      	movs	r3, #16
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d56:	e0c8      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a5e      	ldr	r2, [pc, #376]	; (8008ed8 <UART_SetConfig+0x2ec>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d125      	bne.n	8008dae <UART_SetConfig+0x1c2>
 8008d62:	4b5b      	ldr	r3, [pc, #364]	; (8008ed0 <UART_SetConfig+0x2e4>)
 8008d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d6c:	2b30      	cmp	r3, #48	; 0x30
 8008d6e:	d016      	beq.n	8008d9e <UART_SetConfig+0x1b2>
 8008d70:	2b30      	cmp	r3, #48	; 0x30
 8008d72:	d818      	bhi.n	8008da6 <UART_SetConfig+0x1ba>
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	d00a      	beq.n	8008d8e <UART_SetConfig+0x1a2>
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d814      	bhi.n	8008da6 <UART_SetConfig+0x1ba>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <UART_SetConfig+0x19a>
 8008d80:	2b10      	cmp	r3, #16
 8008d82:	d008      	beq.n	8008d96 <UART_SetConfig+0x1aa>
 8008d84:	e00f      	b.n	8008da6 <UART_SetConfig+0x1ba>
 8008d86:	2300      	movs	r3, #0
 8008d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d8c:	e0ad      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d94:	e0a9      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008d96:	2304      	movs	r3, #4
 8008d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d9c:	e0a5      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008d9e:	2308      	movs	r3, #8
 8008da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da4:	e0a1      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008da6:	2310      	movs	r3, #16
 8008da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dac:	e09d      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a4a      	ldr	r2, [pc, #296]	; (8008edc <UART_SetConfig+0x2f0>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d125      	bne.n	8008e04 <UART_SetConfig+0x218>
 8008db8:	4b45      	ldr	r3, [pc, #276]	; (8008ed0 <UART_SetConfig+0x2e4>)
 8008dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8008dc4:	d016      	beq.n	8008df4 <UART_SetConfig+0x208>
 8008dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8008dc8:	d818      	bhi.n	8008dfc <UART_SetConfig+0x210>
 8008dca:	2b80      	cmp	r3, #128	; 0x80
 8008dcc:	d00a      	beq.n	8008de4 <UART_SetConfig+0x1f8>
 8008dce:	2b80      	cmp	r3, #128	; 0x80
 8008dd0:	d814      	bhi.n	8008dfc <UART_SetConfig+0x210>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <UART_SetConfig+0x1f0>
 8008dd6:	2b40      	cmp	r3, #64	; 0x40
 8008dd8:	d008      	beq.n	8008dec <UART_SetConfig+0x200>
 8008dda:	e00f      	b.n	8008dfc <UART_SetConfig+0x210>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008de2:	e082      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008de4:	2302      	movs	r3, #2
 8008de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dea:	e07e      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008dec:	2304      	movs	r3, #4
 8008dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008df2:	e07a      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008df4:	2308      	movs	r3, #8
 8008df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dfa:	e076      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e02:	e072      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a35      	ldr	r2, [pc, #212]	; (8008ee0 <UART_SetConfig+0x2f4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d12a      	bne.n	8008e64 <UART_SetConfig+0x278>
 8008e0e:	4b30      	ldr	r3, [pc, #192]	; (8008ed0 <UART_SetConfig+0x2e4>)
 8008e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e1c:	d01a      	beq.n	8008e54 <UART_SetConfig+0x268>
 8008e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e22:	d81b      	bhi.n	8008e5c <UART_SetConfig+0x270>
 8008e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e28:	d00c      	beq.n	8008e44 <UART_SetConfig+0x258>
 8008e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e2e:	d815      	bhi.n	8008e5c <UART_SetConfig+0x270>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <UART_SetConfig+0x250>
 8008e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e38:	d008      	beq.n	8008e4c <UART_SetConfig+0x260>
 8008e3a:	e00f      	b.n	8008e5c <UART_SetConfig+0x270>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e42:	e052      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008e44:	2302      	movs	r3, #2
 8008e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e4a:	e04e      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e52:	e04a      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008e54:	2308      	movs	r3, #8
 8008e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e5a:	e046      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008e5c:	2310      	movs	r3, #16
 8008e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e62:	e042      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a17      	ldr	r2, [pc, #92]	; (8008ec8 <UART_SetConfig+0x2dc>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d13a      	bne.n	8008ee4 <UART_SetConfig+0x2f8>
 8008e6e:	4b18      	ldr	r3, [pc, #96]	; (8008ed0 <UART_SetConfig+0x2e4>)
 8008e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e7c:	d01a      	beq.n	8008eb4 <UART_SetConfig+0x2c8>
 8008e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e82:	d81b      	bhi.n	8008ebc <UART_SetConfig+0x2d0>
 8008e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e88:	d00c      	beq.n	8008ea4 <UART_SetConfig+0x2b8>
 8008e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e8e:	d815      	bhi.n	8008ebc <UART_SetConfig+0x2d0>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d003      	beq.n	8008e9c <UART_SetConfig+0x2b0>
 8008e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e98:	d008      	beq.n	8008eac <UART_SetConfig+0x2c0>
 8008e9a:	e00f      	b.n	8008ebc <UART_SetConfig+0x2d0>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ea2:	e022      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eaa:	e01e      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008eac:	2304      	movs	r3, #4
 8008eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eb2:	e01a      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008eb4:	2308      	movs	r3, #8
 8008eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eba:	e016      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ec2:	e012      	b.n	8008eea <UART_SetConfig+0x2fe>
 8008ec4:	cfff69f3 	.word	0xcfff69f3
 8008ec8:	40008000 	.word	0x40008000
 8008ecc:	40013800 	.word	0x40013800
 8008ed0:	40021000 	.word	0x40021000
 8008ed4:	40004400 	.word	0x40004400
 8008ed8:	40004800 	.word	0x40004800
 8008edc:	40004c00 	.word	0x40004c00
 8008ee0:	40005000 	.word	0x40005000
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4aae      	ldr	r2, [pc, #696]	; (80091a8 <UART_SetConfig+0x5bc>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	f040 8097 	bne.w	8009024 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008efa:	2b08      	cmp	r3, #8
 8008efc:	d823      	bhi.n	8008f46 <UART_SetConfig+0x35a>
 8008efe:	a201      	add	r2, pc, #4	; (adr r2, 8008f04 <UART_SetConfig+0x318>)
 8008f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f04:	08008f29 	.word	0x08008f29
 8008f08:	08008f47 	.word	0x08008f47
 8008f0c:	08008f31 	.word	0x08008f31
 8008f10:	08008f47 	.word	0x08008f47
 8008f14:	08008f37 	.word	0x08008f37
 8008f18:	08008f47 	.word	0x08008f47
 8008f1c:	08008f47 	.word	0x08008f47
 8008f20:	08008f47 	.word	0x08008f47
 8008f24:	08008f3f 	.word	0x08008f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f28:	f7fd fafe 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8008f2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f2e:	e010      	b.n	8008f52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f30:	4b9e      	ldr	r3, [pc, #632]	; (80091ac <UART_SetConfig+0x5c0>)
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f34:	e00d      	b.n	8008f52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f36:	f7fd fa5f 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 8008f3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f3c:	e009      	b.n	8008f52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f44:	e005      	b.n	8008f52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 8130 	beq.w	80091ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	4a94      	ldr	r2, [pc, #592]	; (80091b0 <UART_SetConfig+0x5c4>)
 8008f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f64:	461a      	mov	r2, r3
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	4613      	mov	r3, r2
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4413      	add	r3, r2
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d305      	bcc.n	8008f8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d903      	bls.n	8008f92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f90:	e113      	b.n	80091ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	2200      	movs	r2, #0
 8008f96:	60bb      	str	r3, [r7, #8]
 8008f98:	60fa      	str	r2, [r7, #12]
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	4a84      	ldr	r2, [pc, #528]	; (80091b0 <UART_SetConfig+0x5c4>)
 8008fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	603b      	str	r3, [r7, #0]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fb4:	f7f7 f97c 	bl	80002b0 <__aeabi_uldivmod>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	f04f 0200 	mov.w	r2, #0
 8008fc4:	f04f 0300 	mov.w	r3, #0
 8008fc8:	020b      	lsls	r3, r1, #8
 8008fca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fce:	0202      	lsls	r2, r0, #8
 8008fd0:	6979      	ldr	r1, [r7, #20]
 8008fd2:	6849      	ldr	r1, [r1, #4]
 8008fd4:	0849      	lsrs	r1, r1, #1
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	4605      	mov	r5, r0
 8008fdc:	eb12 0804 	adds.w	r8, r2, r4
 8008fe0:	eb43 0905 	adc.w	r9, r3, r5
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	469a      	mov	sl, r3
 8008fec:	4693      	mov	fp, r2
 8008fee:	4652      	mov	r2, sl
 8008ff0:	465b      	mov	r3, fp
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	f7f7 f95b 	bl	80002b0 <__aeabi_uldivmod>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4613      	mov	r3, r2
 8009000:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009008:	d308      	bcc.n	800901c <UART_SetConfig+0x430>
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009010:	d204      	bcs.n	800901c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6a3a      	ldr	r2, [r7, #32]
 8009018:	60da      	str	r2, [r3, #12]
 800901a:	e0ce      	b.n	80091ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009022:	e0ca      	b.n	80091ba <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800902c:	d166      	bne.n	80090fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800902e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009032:	2b08      	cmp	r3, #8
 8009034:	d827      	bhi.n	8009086 <UART_SetConfig+0x49a>
 8009036:	a201      	add	r2, pc, #4	; (adr r2, 800903c <UART_SetConfig+0x450>)
 8009038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903c:	08009061 	.word	0x08009061
 8009040:	08009069 	.word	0x08009069
 8009044:	08009071 	.word	0x08009071
 8009048:	08009087 	.word	0x08009087
 800904c:	08009077 	.word	0x08009077
 8009050:	08009087 	.word	0x08009087
 8009054:	08009087 	.word	0x08009087
 8009058:	08009087 	.word	0x08009087
 800905c:	0800907f 	.word	0x0800907f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009060:	f7fd fa62 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8009064:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009066:	e014      	b.n	8009092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009068:	f7fd fa74 	bl	8006554 <HAL_RCC_GetPCLK2Freq>
 800906c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800906e:	e010      	b.n	8009092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009070:	4b4e      	ldr	r3, [pc, #312]	; (80091ac <UART_SetConfig+0x5c0>)
 8009072:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009074:	e00d      	b.n	8009092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009076:	f7fd f9bf 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 800907a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800907c:	e009      	b.n	8009092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800907e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009084:	e005      	b.n	8009092 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009086:	2300      	movs	r3, #0
 8009088:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8090 	beq.w	80091ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	4a44      	ldr	r2, [pc, #272]	; (80091b0 <UART_SetConfig+0x5c4>)
 80090a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090a4:	461a      	mov	r2, r3
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090ac:	005a      	lsls	r2, r3, #1
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	085b      	lsrs	r3, r3, #1
 80090b4:	441a      	add	r2, r3
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80090be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	2b0f      	cmp	r3, #15
 80090c4:	d916      	bls.n	80090f4 <UART_SetConfig+0x508>
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090cc:	d212      	bcs.n	80090f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f023 030f 	bic.w	r3, r3, #15
 80090d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	085b      	lsrs	r3, r3, #1
 80090dc:	b29b      	uxth	r3, r3
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	8bfb      	ldrh	r3, [r7, #30]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	8bfa      	ldrh	r2, [r7, #30]
 80090f0:	60da      	str	r2, [r3, #12]
 80090f2:	e062      	b.n	80091ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090fa:	e05e      	b.n	80091ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009100:	2b08      	cmp	r3, #8
 8009102:	d828      	bhi.n	8009156 <UART_SetConfig+0x56a>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <UART_SetConfig+0x520>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	08009131 	.word	0x08009131
 8009110:	08009139 	.word	0x08009139
 8009114:	08009141 	.word	0x08009141
 8009118:	08009157 	.word	0x08009157
 800911c:	08009147 	.word	0x08009147
 8009120:	08009157 	.word	0x08009157
 8009124:	08009157 	.word	0x08009157
 8009128:	08009157 	.word	0x08009157
 800912c:	0800914f 	.word	0x0800914f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009130:	f7fd f9fa 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8009134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009136:	e014      	b.n	8009162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009138:	f7fd fa0c 	bl	8006554 <HAL_RCC_GetPCLK2Freq>
 800913c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800913e:	e010      	b.n	8009162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009140:	4b1a      	ldr	r3, [pc, #104]	; (80091ac <UART_SetConfig+0x5c0>)
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009144:	e00d      	b.n	8009162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009146:	f7fd f957 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 800914a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800914c:	e009      	b.n	8009162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800914e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009154:	e005      	b.n	8009162 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009156:	2300      	movs	r3, #0
 8009158:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009160:	bf00      	nop
    }

    if (pclk != 0U)
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	2b00      	cmp	r3, #0
 8009166:	d028      	beq.n	80091ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	4a10      	ldr	r2, [pc, #64]	; (80091b0 <UART_SetConfig+0x5c4>)
 800916e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009172:	461a      	mov	r2, r3
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	fbb3 f2f2 	udiv	r2, r3, r2
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	441a      	add	r2, r3
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	fbb2 f3f3 	udiv	r3, r2, r3
 800918a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	2b0f      	cmp	r3, #15
 8009190:	d910      	bls.n	80091b4 <UART_SetConfig+0x5c8>
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009198:	d20c      	bcs.n	80091b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	b29a      	uxth	r2, r3
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60da      	str	r2, [r3, #12]
 80091a4:	e009      	b.n	80091ba <UART_SetConfig+0x5ce>
 80091a6:	bf00      	nop
 80091a8:	40008000 	.word	0x40008000
 80091ac:	00f42400 	.word	0x00f42400
 80091b0:	0800b664 	.word	0x0800b664
      }
      else
      {
        ret = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2201      	movs	r2, #1
 80091be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2200      	movs	r2, #0
 80091ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2200      	movs	r2, #0
 80091d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80091d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3730      	adds	r7, #48	; 0x30
 80091de:	46bd      	mov	sp, r7
 80091e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080091e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	f003 0308 	and.w	r3, r3, #8
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	430a      	orrs	r2, r1
 8009272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009278:	f003 0310 	and.w	r3, r3, #16
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01a      	beq.n	80092fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e2:	d10a      	bne.n	80092fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	430a      	orrs	r2, r1
 800931a:	605a      	str	r2, [r3, #4]
  }
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af02      	add	r7, sp, #8
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009338:	f7f9 ffd8 	bl	80032ec <HAL_GetTick>
 800933c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b08      	cmp	r3, #8
 800934a:	d10e      	bne.n	800936a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800934c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f82f 	bl	80093be <UART_WaitOnFlagUntilTimeout>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e025      	b.n	80093b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0304 	and.w	r3, r3, #4
 8009374:	2b04      	cmp	r3, #4
 8009376:	d10e      	bne.n	8009396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f819 	bl	80093be <UART_WaitOnFlagUntilTimeout>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e00f      	b.n	80093b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b09c      	sub	sp, #112	; 0x70
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	603b      	str	r3, [r7, #0]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ce:	e0a9      	b.n	8009524 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d6:	f000 80a5 	beq.w	8009524 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093da:	f7f9 ff87 	bl	80032ec <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d302      	bcc.n	80093f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80093ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d140      	bne.n	8009472 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093f8:	e853 3f00 	ldrex	r3, [r3]
 80093fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009404:	667b      	str	r3, [r7, #100]	; 0x64
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800940e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009410:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009416:	e841 2300 	strex	r3, r2, [r1]
 800941a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800941c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1e6      	bne.n	80093f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3308      	adds	r3, #8
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	f023 0301 	bic.w	r3, r3, #1
 8009438:	663b      	str	r3, [r7, #96]	; 0x60
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3308      	adds	r3, #8
 8009440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009442:	64ba      	str	r2, [r7, #72]	; 0x48
 8009444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e5      	bne.n	8009422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2220      	movs	r2, #32
 800945a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2220      	movs	r2, #32
 8009462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e069      	b.n	8009546 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b00      	cmp	r3, #0
 800947e:	d051      	beq.n	8009524 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800948a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800948e:	d149      	bne.n	8009524 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009498:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	e853 3f00 	ldrex	r3, [r3]
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	461a      	mov	r2, r3
 80094b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b8:	637b      	str	r3, [r7, #52]	; 0x34
 80094ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094c0:	e841 2300 	strex	r3, r2, [r1]
 80094c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e6      	bne.n	800949a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3308      	adds	r3, #8
 80094d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	613b      	str	r3, [r7, #16]
   return(result);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f023 0301 	bic.w	r3, r3, #1
 80094e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3308      	adds	r3, #8
 80094ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094ec:	623a      	str	r2, [r7, #32]
 80094ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	69f9      	ldr	r1, [r7, #28]
 80094f2:	6a3a      	ldr	r2, [r7, #32]
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e5      	bne.n	80094cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2220      	movs	r2, #32
 8009504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2220      	movs	r2, #32
 800950c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2220      	movs	r2, #32
 8009514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e010      	b.n	8009546 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	69da      	ldr	r2, [r3, #28]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	4013      	ands	r3, r2
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	429a      	cmp	r2, r3
 8009532:	bf0c      	ite	eq
 8009534:	2301      	moveq	r3, #1
 8009536:	2300      	movne	r3, #0
 8009538:	b2db      	uxtb	r3, r3
 800953a:	461a      	mov	r2, r3
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	429a      	cmp	r2, r3
 8009540:	f43f af46 	beq.w	80093d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3770      	adds	r7, #112	; 0x70
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800955c:	2b01      	cmp	r3, #1
 800955e:	d101      	bne.n	8009564 <HAL_UARTEx_DisableFifoMode+0x16>
 8009560:	2302      	movs	r3, #2
 8009562:	e027      	b.n	80095b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2224      	movs	r2, #36	; 0x24
 8009570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0201 	bic.w	r2, r2, #1
 800958a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009592:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d101      	bne.n	80095d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095d4:	2302      	movs	r3, #2
 80095d6:	e02d      	b.n	8009634 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2224      	movs	r2, #36	; 0x24
 80095e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0201 	bic.w	r2, r2, #1
 80095fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	430a      	orrs	r2, r1
 8009612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f84f 	bl	80096b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2220      	movs	r2, #32
 8009626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009650:	2302      	movs	r3, #2
 8009652:	e02d      	b.n	80096b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2224      	movs	r2, #36	; 0x24
 8009660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f022 0201 	bic.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f811 	bl	80096b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d108      	bne.n	80096da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096d8:	e031      	b.n	800973e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096da:	2308      	movs	r3, #8
 80096dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096de:	2308      	movs	r3, #8
 80096e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	0e5b      	lsrs	r3, r3, #25
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	f003 0307 	and.w	r3, r3, #7
 80096f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	0f5b      	lsrs	r3, r3, #29
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f003 0307 	and.w	r3, r3, #7
 8009700:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	7b3a      	ldrb	r2, [r7, #12]
 8009706:	4911      	ldr	r1, [pc, #68]	; (800974c <UARTEx_SetNbDataToProcess+0x94>)
 8009708:	5c8a      	ldrb	r2, [r1, r2]
 800970a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800970e:	7b3a      	ldrb	r2, [r7, #12]
 8009710:	490f      	ldr	r1, [pc, #60]	; (8009750 <UARTEx_SetNbDataToProcess+0x98>)
 8009712:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009714:	fb93 f3f2 	sdiv	r3, r3, r2
 8009718:	b29a      	uxth	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009720:	7bfb      	ldrb	r3, [r7, #15]
 8009722:	7b7a      	ldrb	r2, [r7, #13]
 8009724:	4909      	ldr	r1, [pc, #36]	; (800974c <UARTEx_SetNbDataToProcess+0x94>)
 8009726:	5c8a      	ldrb	r2, [r1, r2]
 8009728:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800972c:	7b7a      	ldrb	r2, [r7, #13]
 800972e:	4908      	ldr	r1, [pc, #32]	; (8009750 <UARTEx_SetNbDataToProcess+0x98>)
 8009730:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009732:	fb93 f3f2 	sdiv	r3, r3, r2
 8009736:	b29a      	uxth	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800973e:	bf00      	nop
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	0800b67c 	.word	0x0800b67c
 8009750:	0800b684 	.word	0x0800b684

08009754 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800975e:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <WIFI_Init+0x40>)
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	4b0d      	ldr	r3, [pc, #52]	; (8009798 <WIFI_Init+0x44>)
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	4b0d      	ldr	r3, [pc, #52]	; (800979c <WIFI_Init+0x48>)
 8009768:	4a0d      	ldr	r2, [pc, #52]	; (80097a0 <WIFI_Init+0x4c>)
 800976a:	490e      	ldr	r1, [pc, #56]	; (80097a4 <WIFI_Init+0x50>)
 800976c:	480e      	ldr	r0, [pc, #56]	; (80097a8 <WIFI_Init+0x54>)
 800976e:	f7f9 fa01 	bl	8002b74 <ES_WIFI_RegisterBusIO>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d107      	bne.n	8009788 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009778:	480b      	ldr	r0, [pc, #44]	; (80097a8 <WIFI_Init+0x54>)
 800977a:	f7f9 f9cd 	bl	8002b18 <ES_WIFI_Init>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8009788:	79fb      	ldrb	r3, [r7, #7]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	080009e1 	.word	0x080009e1
 8009798:	08000ad5 	.word	0x08000ad5
 800979c:	08000bb1 	.word	0x08000bb1
 80097a0:	080008c9 	.word	0x080008c9
 80097a4:	0800072d 	.word	0x0800072d
 80097a8:	200008b8 	.word	0x200008b8

080097ac <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	4613      	mov	r3, r2
 80097b8:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80097be:	79fb      	ldrb	r3, [r7, #7]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	68f9      	ldr	r1, [r7, #12]
 80097c4:	4809      	ldr	r0, [pc, #36]	; (80097ec <WIFI_Connect+0x40>)
 80097c6:	f7f9 fa09 	bl	8002bdc <ES_WIFI_Connect>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d107      	bne.n	80097e0 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80097d0:	4806      	ldr	r0, [pc, #24]	; (80097ec <WIFI_Connect+0x40>)
 80097d2:	f7f9 faaf 	bl	8002d34 <ES_WIFI_GetNetworkSettings>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	200008b8 	.word	0x200008b8

080097f0 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	4806      	ldr	r0, [pc, #24]	; (8009818 <WIFI_GetMAC_Address+0x28>)
 8009800:	f7f9 fac2 	bl	8002d88 <ES_WIFI_GetMACAddress>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800980e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	200008b8 	.word	0x200008b8

0800981c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8009828:	4809      	ldr	r0, [pc, #36]	; (8009850 <WIFI_GetIP_Address+0x34>)
 800982a:	f7f9 fa57 	bl	8002cdc <ES_WIFI_IsConnected>
 800982e:	4603      	mov	r3, r0
 8009830:	2b01      	cmp	r3, #1
 8009832:	d107      	bne.n	8009844 <WIFI_GetIP_Address+0x28>
 8009834:	4b06      	ldr	r3, [pc, #24]	; (8009850 <WIFI_GetIP_Address+0x34>)
 8009836:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800983a:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8009844:	7bfb      	ldrb	r3, [r7, #15]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	200008b8 	.word	0x200008b8

08009854 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08a      	sub	sp, #40	; 0x28
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	607a      	str	r2, [r7, #4]
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	460b      	mov	r3, r1
 8009862:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	b2db      	uxtb	r3, r3
 800986e:	74bb      	strb	r3, [r7, #18]
  conn.RemotePort = port;
 8009870:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009872:	82bb      	strh	r3, [r7, #20]
  conn.LocalPort = local_port;
 8009874:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009876:	82fb      	strh	r3, [r7, #22]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	2b00      	cmp	r3, #0
 800987c:	bf14      	ite	ne
 800987e:	2301      	movne	r3, #1
 8009880:	2300      	moveq	r3, #0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[1] = ipaddr[1];
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	767b      	strb	r3, [r7, #25]
  conn.RemoteIP[2] = ipaddr[2];
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	789b      	ldrb	r3, [r3, #2]
 8009896:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[3] = ipaddr[3];
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	78db      	ldrb	r3, [r3, #3]
 800989c:	76fb      	strb	r3, [r7, #27]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800989e:	f107 0310 	add.w	r3, r7, #16
 80098a2:	4619      	mov	r1, r3
 80098a4:	4807      	ldr	r0, [pc, #28]	; (80098c4 <WIFI_OpenClientConnection+0x70>)
 80098a6:	f7f9 faa1 	bl	8002dec <ES_WIFI_StartClientConnection>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 80098b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3728      	adds	r7, #40	; 0x28
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200008b8 	.word	0x200008b8

080098c8 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]
 80098d6:	4613      	mov	r3, r2
 80098d8:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80098de:	89ba      	ldrh	r2, [r7, #12]
 80098e0:	7bf9      	ldrb	r1, [r7, #15]
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	4613      	mov	r3, r2
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4806      	ldr	r0, [pc, #24]	; (8009908 <WIFI_SendData+0x40>)
 80098f0:	f7f9 fb84 	bl	8002ffc <ES_WIFI_SendData>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	200008b8 	.word	0x200008b8

0800990c <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af02      	add	r7, sp, #8
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607b      	str	r3, [r7, #4]
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]
 800991a:	4613      	mov	r3, r2
 800991c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8009922:	89ba      	ldrh	r2, [r7, #12]
 8009924:	7bf9      	ldrb	r1, [r7, #15]
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	4613      	mov	r3, r2
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	4806      	ldr	r0, [pc, #24]	; (800994c <WIFI_ReceiveData+0x40>)
 8009934:	f7f9 fbe8 	bl	8003108 <ES_WIFI_ReceiveData>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8009942:	7dfb      	ldrb	r3, [r7, #23]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	200008b8 	.word	0x200008b8

08009950 <WIFI_GetModuleFwRevision>:
  * @brief  Return Module firmware revision
  * @param  rev : revision string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleFwRevision(char *rev)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.FW_Rev != NULL)
  {
    strncpy(rev, (char *)EsWifiObj.FW_Rev, ES_WIFI_FW_REV_SIZE);
 800995c:	2218      	movs	r2, #24
 800995e:	4905      	ldr	r1, [pc, #20]	; (8009974 <WIFI_GetModuleFwRevision+0x24>)
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f92f 	bl	8009bc4 <strncpy>
    ret = WIFI_STATUS_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800996a:	7bfb      	ldrb	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	200008d8 	.word	0x200008d8

08009978 <WIFI_GetModuleID>:
  * @brief  Return Module ID
  * @param  Info : Module ID string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleID(char *Id)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_ID != NULL)
  {
    strncpy(Id, (char *)EsWifiObj.Product_ID, ES_WIFI_PRODUCT_ID_SIZE);
 8009984:	2220      	movs	r2, #32
 8009986:	4905      	ldr	r1, [pc, #20]	; (800999c <WIFI_GetModuleID+0x24>)
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f91b 	bl	8009bc4 <strncpy>
    ret = WIFI_STATUS_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8009992:	7bfb      	ldrb	r3, [r7, #15]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	200008b8 	.word	0x200008b8

080099a0 <WIFI_GetModuleName>:
  * @brief  Return Module Name
  * @param  Info : Module Name string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleName(char *ModuleName)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_Name != NULL)
  {
    strncpy(ModuleName, (char *)EsWifiObj.Product_Name, ES_WIFI_PRODUCT_NAME_SIZE);
 80099ac:	2220      	movs	r2, #32
 80099ae:	4905      	ldr	r1, [pc, #20]	; (80099c4 <WIFI_GetModuleName+0x24>)
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f907 	bl	8009bc4 <strncpy>
    ret = WIFI_STATUS_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000920 	.word	0x20000920

080099c8 <__errno>:
 80099c8:	4b01      	ldr	r3, [pc, #4]	; (80099d0 <__errno+0x8>)
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	2000000c 	.word	0x2000000c

080099d4 <__libc_init_array>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4d0d      	ldr	r5, [pc, #52]	; (8009a0c <__libc_init_array+0x38>)
 80099d8:	4c0d      	ldr	r4, [pc, #52]	; (8009a10 <__libc_init_array+0x3c>)
 80099da:	1b64      	subs	r4, r4, r5
 80099dc:	10a4      	asrs	r4, r4, #2
 80099de:	2600      	movs	r6, #0
 80099e0:	42a6      	cmp	r6, r4
 80099e2:	d109      	bne.n	80099f8 <__libc_init_array+0x24>
 80099e4:	4d0b      	ldr	r5, [pc, #44]	; (8009a14 <__libc_init_array+0x40>)
 80099e6:	4c0c      	ldr	r4, [pc, #48]	; (8009a18 <__libc_init_array+0x44>)
 80099e8:	f001 fb1a 	bl	800b020 <_init>
 80099ec:	1b64      	subs	r4, r4, r5
 80099ee:	10a4      	asrs	r4, r4, #2
 80099f0:	2600      	movs	r6, #0
 80099f2:	42a6      	cmp	r6, r4
 80099f4:	d105      	bne.n	8009a02 <__libc_init_array+0x2e>
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fc:	4798      	blx	r3
 80099fe:	3601      	adds	r6, #1
 8009a00:	e7ee      	b.n	80099e0 <__libc_init_array+0xc>
 8009a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a06:	4798      	blx	r3
 8009a08:	3601      	adds	r6, #1
 8009a0a:	e7f2      	b.n	80099f2 <__libc_init_array+0x1e>
 8009a0c:	0800b7dc 	.word	0x0800b7dc
 8009a10:	0800b7dc 	.word	0x0800b7dc
 8009a14:	0800b7dc 	.word	0x0800b7dc
 8009a18:	0800b7e0 	.word	0x0800b7e0

08009a1c <memcmp>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	3901      	subs	r1, #1
 8009a20:	4402      	add	r2, r0
 8009a22:	4290      	cmp	r0, r2
 8009a24:	d101      	bne.n	8009a2a <memcmp+0xe>
 8009a26:	2000      	movs	r0, #0
 8009a28:	e005      	b.n	8009a36 <memcmp+0x1a>
 8009a2a:	7803      	ldrb	r3, [r0, #0]
 8009a2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d001      	beq.n	8009a38 <memcmp+0x1c>
 8009a34:	1b18      	subs	r0, r3, r4
 8009a36:	bd10      	pop	{r4, pc}
 8009a38:	3001      	adds	r0, #1
 8009a3a:	e7f2      	b.n	8009a22 <memcmp+0x6>

08009a3c <memcpy>:
 8009a3c:	440a      	add	r2, r1
 8009a3e:	4291      	cmp	r1, r2
 8009a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a44:	d100      	bne.n	8009a48 <memcpy+0xc>
 8009a46:	4770      	bx	lr
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a52:	4291      	cmp	r1, r2
 8009a54:	d1f9      	bne.n	8009a4a <memcpy+0xe>
 8009a56:	bd10      	pop	{r4, pc}

08009a58 <memset>:
 8009a58:	4402      	add	r2, r0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d100      	bne.n	8009a62 <memset+0xa>
 8009a60:	4770      	bx	lr
 8009a62:	f803 1b01 	strb.w	r1, [r3], #1
 8009a66:	e7f9      	b.n	8009a5c <memset+0x4>

08009a68 <iprintf>:
 8009a68:	b40f      	push	{r0, r1, r2, r3}
 8009a6a:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <iprintf+0x2c>)
 8009a6c:	b513      	push	{r0, r1, r4, lr}
 8009a6e:	681c      	ldr	r4, [r3, #0]
 8009a70:	b124      	cbz	r4, 8009a7c <iprintf+0x14>
 8009a72:	69a3      	ldr	r3, [r4, #24]
 8009a74:	b913      	cbnz	r3, 8009a7c <iprintf+0x14>
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 fb22 	bl	800a0c0 <__sinit>
 8009a7c:	ab05      	add	r3, sp, #20
 8009a7e:	9a04      	ldr	r2, [sp, #16]
 8009a80:	68a1      	ldr	r1, [r4, #8]
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 fea1 	bl	800a7cc <_vfiprintf_r>
 8009a8a:	b002      	add	sp, #8
 8009a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a90:	b004      	add	sp, #16
 8009a92:	4770      	bx	lr
 8009a94:	2000000c 	.word	0x2000000c

08009a98 <_puts_r>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	460e      	mov	r6, r1
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	b118      	cbz	r0, 8009aa8 <_puts_r+0x10>
 8009aa0:	6983      	ldr	r3, [r0, #24]
 8009aa2:	b90b      	cbnz	r3, 8009aa8 <_puts_r+0x10>
 8009aa4:	f000 fb0c 	bl	800a0c0 <__sinit>
 8009aa8:	69ab      	ldr	r3, [r5, #24]
 8009aaa:	68ac      	ldr	r4, [r5, #8]
 8009aac:	b913      	cbnz	r3, 8009ab4 <_puts_r+0x1c>
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f000 fb06 	bl	800a0c0 <__sinit>
 8009ab4:	4b2c      	ldr	r3, [pc, #176]	; (8009b68 <_puts_r+0xd0>)
 8009ab6:	429c      	cmp	r4, r3
 8009ab8:	d120      	bne.n	8009afc <_puts_r+0x64>
 8009aba:	686c      	ldr	r4, [r5, #4]
 8009abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009abe:	07db      	lsls	r3, r3, #31
 8009ac0:	d405      	bmi.n	8009ace <_puts_r+0x36>
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	0598      	lsls	r0, r3, #22
 8009ac6:	d402      	bmi.n	8009ace <_puts_r+0x36>
 8009ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aca:	f000 fba9 	bl	800a220 <__retarget_lock_acquire_recursive>
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	0719      	lsls	r1, r3, #28
 8009ad2:	d51d      	bpl.n	8009b10 <_puts_r+0x78>
 8009ad4:	6923      	ldr	r3, [r4, #16]
 8009ad6:	b1db      	cbz	r3, 8009b10 <_puts_r+0x78>
 8009ad8:	3e01      	subs	r6, #1
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	60a3      	str	r3, [r4, #8]
 8009ae4:	bb39      	cbnz	r1, 8009b36 <_puts_r+0x9e>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da38      	bge.n	8009b5c <_puts_r+0xc4>
 8009aea:	4622      	mov	r2, r4
 8009aec:	210a      	movs	r1, #10
 8009aee:	4628      	mov	r0, r5
 8009af0:	f000 f8ee 	bl	8009cd0 <__swbuf_r>
 8009af4:	3001      	adds	r0, #1
 8009af6:	d011      	beq.n	8009b1c <_puts_r+0x84>
 8009af8:	250a      	movs	r5, #10
 8009afa:	e011      	b.n	8009b20 <_puts_r+0x88>
 8009afc:	4b1b      	ldr	r3, [pc, #108]	; (8009b6c <_puts_r+0xd4>)
 8009afe:	429c      	cmp	r4, r3
 8009b00:	d101      	bne.n	8009b06 <_puts_r+0x6e>
 8009b02:	68ac      	ldr	r4, [r5, #8]
 8009b04:	e7da      	b.n	8009abc <_puts_r+0x24>
 8009b06:	4b1a      	ldr	r3, [pc, #104]	; (8009b70 <_puts_r+0xd8>)
 8009b08:	429c      	cmp	r4, r3
 8009b0a:	bf08      	it	eq
 8009b0c:	68ec      	ldreq	r4, [r5, #12]
 8009b0e:	e7d5      	b.n	8009abc <_puts_r+0x24>
 8009b10:	4621      	mov	r1, r4
 8009b12:	4628      	mov	r0, r5
 8009b14:	f000 f92e 	bl	8009d74 <__swsetup_r>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d0dd      	beq.n	8009ad8 <_puts_r+0x40>
 8009b1c:	f04f 35ff 	mov.w	r5, #4294967295
 8009b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b22:	07da      	lsls	r2, r3, #31
 8009b24:	d405      	bmi.n	8009b32 <_puts_r+0x9a>
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	059b      	lsls	r3, r3, #22
 8009b2a:	d402      	bmi.n	8009b32 <_puts_r+0x9a>
 8009b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b2e:	f000 fb78 	bl	800a222 <__retarget_lock_release_recursive>
 8009b32:	4628      	mov	r0, r5
 8009b34:	bd70      	pop	{r4, r5, r6, pc}
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	da04      	bge.n	8009b44 <_puts_r+0xac>
 8009b3a:	69a2      	ldr	r2, [r4, #24]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	dc06      	bgt.n	8009b4e <_puts_r+0xb6>
 8009b40:	290a      	cmp	r1, #10
 8009b42:	d004      	beq.n	8009b4e <_puts_r+0xb6>
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	6022      	str	r2, [r4, #0]
 8009b4a:	7019      	strb	r1, [r3, #0]
 8009b4c:	e7c5      	b.n	8009ada <_puts_r+0x42>
 8009b4e:	4622      	mov	r2, r4
 8009b50:	4628      	mov	r0, r5
 8009b52:	f000 f8bd 	bl	8009cd0 <__swbuf_r>
 8009b56:	3001      	adds	r0, #1
 8009b58:	d1bf      	bne.n	8009ada <_puts_r+0x42>
 8009b5a:	e7df      	b.n	8009b1c <_puts_r+0x84>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	250a      	movs	r5, #10
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	6022      	str	r2, [r4, #0]
 8009b64:	701d      	strb	r5, [r3, #0]
 8009b66:	e7db      	b.n	8009b20 <_puts_r+0x88>
 8009b68:	0800b760 	.word	0x0800b760
 8009b6c:	0800b780 	.word	0x0800b780
 8009b70:	0800b740 	.word	0x0800b740

08009b74 <puts>:
 8009b74:	4b02      	ldr	r3, [pc, #8]	; (8009b80 <puts+0xc>)
 8009b76:	4601      	mov	r1, r0
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	f7ff bf8d 	b.w	8009a98 <_puts_r>
 8009b7e:	bf00      	nop
 8009b80:	2000000c 	.word	0x2000000c

08009b84 <siprintf>:
 8009b84:	b40e      	push	{r1, r2, r3}
 8009b86:	b500      	push	{lr}
 8009b88:	b09c      	sub	sp, #112	; 0x70
 8009b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b8c:	9002      	str	r0, [sp, #8]
 8009b8e:	9006      	str	r0, [sp, #24]
 8009b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b94:	4809      	ldr	r0, [pc, #36]	; (8009bbc <siprintf+0x38>)
 8009b96:	9107      	str	r1, [sp, #28]
 8009b98:	9104      	str	r1, [sp, #16]
 8009b9a:	4909      	ldr	r1, [pc, #36]	; (8009bc0 <siprintf+0x3c>)
 8009b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba0:	9105      	str	r1, [sp, #20]
 8009ba2:	6800      	ldr	r0, [r0, #0]
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	a902      	add	r1, sp, #8
 8009ba8:	f000 fce6 	bl	800a578 <_svfiprintf_r>
 8009bac:	9b02      	ldr	r3, [sp, #8]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	701a      	strb	r2, [r3, #0]
 8009bb2:	b01c      	add	sp, #112	; 0x70
 8009bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bb8:	b003      	add	sp, #12
 8009bba:	4770      	bx	lr
 8009bbc:	2000000c 	.word	0x2000000c
 8009bc0:	ffff0208 	.word	0xffff0208

08009bc4 <strncpy>:
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	3901      	subs	r1, #1
 8009bc8:	4603      	mov	r3, r0
 8009bca:	b132      	cbz	r2, 8009bda <strncpy+0x16>
 8009bcc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009bd0:	f803 4b01 	strb.w	r4, [r3], #1
 8009bd4:	3a01      	subs	r2, #1
 8009bd6:	2c00      	cmp	r4, #0
 8009bd8:	d1f7      	bne.n	8009bca <strncpy+0x6>
 8009bda:	441a      	add	r2, r3
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d100      	bne.n	8009be4 <strncpy+0x20>
 8009be2:	bd10      	pop	{r4, pc}
 8009be4:	f803 1b01 	strb.w	r1, [r3], #1
 8009be8:	e7f9      	b.n	8009bde <strncpy+0x1a>

08009bea <strstr>:
 8009bea:	780a      	ldrb	r2, [r1, #0]
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	b96a      	cbnz	r2, 8009c0c <strstr+0x22>
 8009bf0:	bd70      	pop	{r4, r5, r6, pc}
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d109      	bne.n	8009c0a <strstr+0x20>
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0f6      	beq.n	8009bf0 <strstr+0x6>
 8009c02:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c06:	429e      	cmp	r6, r3
 8009c08:	d0f7      	beq.n	8009bfa <strstr+0x10>
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	7803      	ldrb	r3, [r0, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1ef      	bne.n	8009bf2 <strstr+0x8>
 8009c12:	4618      	mov	r0, r3
 8009c14:	e7ec      	b.n	8009bf0 <strstr+0x6>
	...

08009c18 <strtok>:
 8009c18:	4b16      	ldr	r3, [pc, #88]	; (8009c74 <strtok+0x5c>)
 8009c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c1c:	681e      	ldr	r6, [r3, #0]
 8009c1e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009c20:	4605      	mov	r5, r0
 8009c22:	b9fc      	cbnz	r4, 8009c64 <strtok+0x4c>
 8009c24:	2050      	movs	r0, #80	; 0x50
 8009c26:	9101      	str	r1, [sp, #4]
 8009c28:	f000 fb62 	bl	800a2f0 <malloc>
 8009c2c:	9901      	ldr	r1, [sp, #4]
 8009c2e:	65b0      	str	r0, [r6, #88]	; 0x58
 8009c30:	4602      	mov	r2, r0
 8009c32:	b920      	cbnz	r0, 8009c3e <strtok+0x26>
 8009c34:	4b10      	ldr	r3, [pc, #64]	; (8009c78 <strtok+0x60>)
 8009c36:	4811      	ldr	r0, [pc, #68]	; (8009c7c <strtok+0x64>)
 8009c38:	2157      	movs	r1, #87	; 0x57
 8009c3a:	f000 f909 	bl	8009e50 <__assert_func>
 8009c3e:	e9c0 4400 	strd	r4, r4, [r0]
 8009c42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009c46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009c4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009c4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009c52:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009c56:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009c5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009c5e:	6184      	str	r4, [r0, #24]
 8009c60:	7704      	strb	r4, [r0, #28]
 8009c62:	6244      	str	r4, [r0, #36]	; 0x24
 8009c64:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009c66:	2301      	movs	r3, #1
 8009c68:	4628      	mov	r0, r5
 8009c6a:	b002      	add	sp, #8
 8009c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c70:	f000 b806 	b.w	8009c80 <__strtok_r>
 8009c74:	2000000c 	.word	0x2000000c
 8009c78:	0800b690 	.word	0x0800b690
 8009c7c:	0800b6a7 	.word	0x0800b6a7

08009c80 <__strtok_r>:
 8009c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c82:	b908      	cbnz	r0, 8009c88 <__strtok_r+0x8>
 8009c84:	6810      	ldr	r0, [r2, #0]
 8009c86:	b188      	cbz	r0, 8009cac <__strtok_r+0x2c>
 8009c88:	4604      	mov	r4, r0
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c90:	460f      	mov	r7, r1
 8009c92:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c96:	b91e      	cbnz	r6, 8009ca0 <__strtok_r+0x20>
 8009c98:	b965      	cbnz	r5, 8009cb4 <__strtok_r+0x34>
 8009c9a:	6015      	str	r5, [r2, #0]
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	e005      	b.n	8009cac <__strtok_r+0x2c>
 8009ca0:	42b5      	cmp	r5, r6
 8009ca2:	d1f6      	bne.n	8009c92 <__strtok_r+0x12>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1f0      	bne.n	8009c8a <__strtok_r+0xa>
 8009ca8:	6014      	str	r4, [r2, #0]
 8009caa:	7003      	strb	r3, [r0, #0]
 8009cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cae:	461c      	mov	r4, r3
 8009cb0:	e00c      	b.n	8009ccc <__strtok_r+0x4c>
 8009cb2:	b915      	cbnz	r5, 8009cba <__strtok_r+0x3a>
 8009cb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cb8:	460e      	mov	r6, r1
 8009cba:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009cbe:	42ab      	cmp	r3, r5
 8009cc0:	d1f7      	bne.n	8009cb2 <__strtok_r+0x32>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0f3      	beq.n	8009cae <__strtok_r+0x2e>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009ccc:	6014      	str	r4, [r2, #0]
 8009cce:	e7ed      	b.n	8009cac <__strtok_r+0x2c>

08009cd0 <__swbuf_r>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	460e      	mov	r6, r1
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	b118      	cbz	r0, 8009ce2 <__swbuf_r+0x12>
 8009cda:	6983      	ldr	r3, [r0, #24]
 8009cdc:	b90b      	cbnz	r3, 8009ce2 <__swbuf_r+0x12>
 8009cde:	f000 f9ef 	bl	800a0c0 <__sinit>
 8009ce2:	4b21      	ldr	r3, [pc, #132]	; (8009d68 <__swbuf_r+0x98>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d12b      	bne.n	8009d40 <__swbuf_r+0x70>
 8009ce8:	686c      	ldr	r4, [r5, #4]
 8009cea:	69a3      	ldr	r3, [r4, #24]
 8009cec:	60a3      	str	r3, [r4, #8]
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	071a      	lsls	r2, r3, #28
 8009cf2:	d52f      	bpl.n	8009d54 <__swbuf_r+0x84>
 8009cf4:	6923      	ldr	r3, [r4, #16]
 8009cf6:	b36b      	cbz	r3, 8009d54 <__swbuf_r+0x84>
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	6820      	ldr	r0, [r4, #0]
 8009cfc:	1ac0      	subs	r0, r0, r3
 8009cfe:	6963      	ldr	r3, [r4, #20]
 8009d00:	b2f6      	uxtb	r6, r6
 8009d02:	4283      	cmp	r3, r0
 8009d04:	4637      	mov	r7, r6
 8009d06:	dc04      	bgt.n	8009d12 <__swbuf_r+0x42>
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f000 f944 	bl	8009f98 <_fflush_r>
 8009d10:	bb30      	cbnz	r0, 8009d60 <__swbuf_r+0x90>
 8009d12:	68a3      	ldr	r3, [r4, #8]
 8009d14:	3b01      	subs	r3, #1
 8009d16:	60a3      	str	r3, [r4, #8]
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	6022      	str	r2, [r4, #0]
 8009d1e:	701e      	strb	r6, [r3, #0]
 8009d20:	6963      	ldr	r3, [r4, #20]
 8009d22:	3001      	adds	r0, #1
 8009d24:	4283      	cmp	r3, r0
 8009d26:	d004      	beq.n	8009d32 <__swbuf_r+0x62>
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	07db      	lsls	r3, r3, #31
 8009d2c:	d506      	bpl.n	8009d3c <__swbuf_r+0x6c>
 8009d2e:	2e0a      	cmp	r6, #10
 8009d30:	d104      	bne.n	8009d3c <__swbuf_r+0x6c>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f000 f92f 	bl	8009f98 <_fflush_r>
 8009d3a:	b988      	cbnz	r0, 8009d60 <__swbuf_r+0x90>
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <__swbuf_r+0x9c>)
 8009d42:	429c      	cmp	r4, r3
 8009d44:	d101      	bne.n	8009d4a <__swbuf_r+0x7a>
 8009d46:	68ac      	ldr	r4, [r5, #8]
 8009d48:	e7cf      	b.n	8009cea <__swbuf_r+0x1a>
 8009d4a:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <__swbuf_r+0xa0>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	bf08      	it	eq
 8009d50:	68ec      	ldreq	r4, [r5, #12]
 8009d52:	e7ca      	b.n	8009cea <__swbuf_r+0x1a>
 8009d54:	4621      	mov	r1, r4
 8009d56:	4628      	mov	r0, r5
 8009d58:	f000 f80c 	bl	8009d74 <__swsetup_r>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d0cb      	beq.n	8009cf8 <__swbuf_r+0x28>
 8009d60:	f04f 37ff 	mov.w	r7, #4294967295
 8009d64:	e7ea      	b.n	8009d3c <__swbuf_r+0x6c>
 8009d66:	bf00      	nop
 8009d68:	0800b760 	.word	0x0800b760
 8009d6c:	0800b780 	.word	0x0800b780
 8009d70:	0800b740 	.word	0x0800b740

08009d74 <__swsetup_r>:
 8009d74:	4b32      	ldr	r3, [pc, #200]	; (8009e40 <__swsetup_r+0xcc>)
 8009d76:	b570      	push	{r4, r5, r6, lr}
 8009d78:	681d      	ldr	r5, [r3, #0]
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	b125      	cbz	r5, 8009d8a <__swsetup_r+0x16>
 8009d80:	69ab      	ldr	r3, [r5, #24]
 8009d82:	b913      	cbnz	r3, 8009d8a <__swsetup_r+0x16>
 8009d84:	4628      	mov	r0, r5
 8009d86:	f000 f99b 	bl	800a0c0 <__sinit>
 8009d8a:	4b2e      	ldr	r3, [pc, #184]	; (8009e44 <__swsetup_r+0xd0>)
 8009d8c:	429c      	cmp	r4, r3
 8009d8e:	d10f      	bne.n	8009db0 <__swsetup_r+0x3c>
 8009d90:	686c      	ldr	r4, [r5, #4]
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d98:	0719      	lsls	r1, r3, #28
 8009d9a:	d42c      	bmi.n	8009df6 <__swsetup_r+0x82>
 8009d9c:	06dd      	lsls	r5, r3, #27
 8009d9e:	d411      	bmi.n	8009dc4 <__swsetup_r+0x50>
 8009da0:	2309      	movs	r3, #9
 8009da2:	6033      	str	r3, [r6, #0]
 8009da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dae:	e03e      	b.n	8009e2e <__swsetup_r+0xba>
 8009db0:	4b25      	ldr	r3, [pc, #148]	; (8009e48 <__swsetup_r+0xd4>)
 8009db2:	429c      	cmp	r4, r3
 8009db4:	d101      	bne.n	8009dba <__swsetup_r+0x46>
 8009db6:	68ac      	ldr	r4, [r5, #8]
 8009db8:	e7eb      	b.n	8009d92 <__swsetup_r+0x1e>
 8009dba:	4b24      	ldr	r3, [pc, #144]	; (8009e4c <__swsetup_r+0xd8>)
 8009dbc:	429c      	cmp	r4, r3
 8009dbe:	bf08      	it	eq
 8009dc0:	68ec      	ldreq	r4, [r5, #12]
 8009dc2:	e7e6      	b.n	8009d92 <__swsetup_r+0x1e>
 8009dc4:	0758      	lsls	r0, r3, #29
 8009dc6:	d512      	bpl.n	8009dee <__swsetup_r+0x7a>
 8009dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dca:	b141      	cbz	r1, 8009dde <__swsetup_r+0x6a>
 8009dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd0:	4299      	cmp	r1, r3
 8009dd2:	d002      	beq.n	8009dda <__swsetup_r+0x66>
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f000 fa93 	bl	800a300 <_free_r>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	2300      	movs	r3, #0
 8009de8:	6063      	str	r3, [r4, #4]
 8009dea:	6923      	ldr	r3, [r4, #16]
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	f043 0308 	orr.w	r3, r3, #8
 8009df4:	81a3      	strh	r3, [r4, #12]
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	b94b      	cbnz	r3, 8009e0e <__swsetup_r+0x9a>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e04:	d003      	beq.n	8009e0e <__swsetup_r+0x9a>
 8009e06:	4621      	mov	r1, r4
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f000 fa31 	bl	800a270 <__smakebuf_r>
 8009e0e:	89a0      	ldrh	r0, [r4, #12]
 8009e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e14:	f010 0301 	ands.w	r3, r0, #1
 8009e18:	d00a      	beq.n	8009e30 <__swsetup_r+0xbc>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60a3      	str	r3, [r4, #8]
 8009e1e:	6963      	ldr	r3, [r4, #20]
 8009e20:	425b      	negs	r3, r3
 8009e22:	61a3      	str	r3, [r4, #24]
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	b943      	cbnz	r3, 8009e3a <__swsetup_r+0xc6>
 8009e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e2c:	d1ba      	bne.n	8009da4 <__swsetup_r+0x30>
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	0781      	lsls	r1, r0, #30
 8009e32:	bf58      	it	pl
 8009e34:	6963      	ldrpl	r3, [r4, #20]
 8009e36:	60a3      	str	r3, [r4, #8]
 8009e38:	e7f4      	b.n	8009e24 <__swsetup_r+0xb0>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	e7f7      	b.n	8009e2e <__swsetup_r+0xba>
 8009e3e:	bf00      	nop
 8009e40:	2000000c 	.word	0x2000000c
 8009e44:	0800b760 	.word	0x0800b760
 8009e48:	0800b780 	.word	0x0800b780
 8009e4c:	0800b740 	.word	0x0800b740

08009e50 <__assert_func>:
 8009e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e52:	4614      	mov	r4, r2
 8009e54:	461a      	mov	r2, r3
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <__assert_func+0x2c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	68d8      	ldr	r0, [r3, #12]
 8009e5e:	b14c      	cbz	r4, 8009e74 <__assert_func+0x24>
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <__assert_func+0x30>)
 8009e62:	9100      	str	r1, [sp, #0]
 8009e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e68:	4906      	ldr	r1, [pc, #24]	; (8009e84 <__assert_func+0x34>)
 8009e6a:	462b      	mov	r3, r5
 8009e6c:	f000 f9a6 	bl	800a1bc <fiprintf>
 8009e70:	f000 ffd6 	bl	800ae20 <abort>
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <__assert_func+0x38>)
 8009e76:	461c      	mov	r4, r3
 8009e78:	e7f3      	b.n	8009e62 <__assert_func+0x12>
 8009e7a:	bf00      	nop
 8009e7c:	2000000c 	.word	0x2000000c
 8009e80:	0800b704 	.word	0x0800b704
 8009e84:	0800b711 	.word	0x0800b711
 8009e88:	0800b73f 	.word	0x0800b73f

08009e8c <__sflush_r>:
 8009e8c:	898a      	ldrh	r2, [r1, #12]
 8009e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e92:	4605      	mov	r5, r0
 8009e94:	0710      	lsls	r0, r2, #28
 8009e96:	460c      	mov	r4, r1
 8009e98:	d458      	bmi.n	8009f4c <__sflush_r+0xc0>
 8009e9a:	684b      	ldr	r3, [r1, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dc05      	bgt.n	8009eac <__sflush_r+0x20>
 8009ea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	dc02      	bgt.n	8009eac <__sflush_r+0x20>
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eae:	2e00      	cmp	r6, #0
 8009eb0:	d0f9      	beq.n	8009ea6 <__sflush_r+0x1a>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009eb8:	682f      	ldr	r7, [r5, #0]
 8009eba:	602b      	str	r3, [r5, #0]
 8009ebc:	d032      	beq.n	8009f24 <__sflush_r+0x98>
 8009ebe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	075a      	lsls	r2, r3, #29
 8009ec4:	d505      	bpl.n	8009ed2 <__sflush_r+0x46>
 8009ec6:	6863      	ldr	r3, [r4, #4]
 8009ec8:	1ac0      	subs	r0, r0, r3
 8009eca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ecc:	b10b      	cbz	r3, 8009ed2 <__sflush_r+0x46>
 8009ece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ed0:	1ac0      	subs	r0, r0, r3
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ed8:	6a21      	ldr	r1, [r4, #32]
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b0      	blx	r6
 8009ede:	1c43      	adds	r3, r0, #1
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	d106      	bne.n	8009ef2 <__sflush_r+0x66>
 8009ee4:	6829      	ldr	r1, [r5, #0]
 8009ee6:	291d      	cmp	r1, #29
 8009ee8:	d82c      	bhi.n	8009f44 <__sflush_r+0xb8>
 8009eea:	4a2a      	ldr	r2, [pc, #168]	; (8009f94 <__sflush_r+0x108>)
 8009eec:	40ca      	lsrs	r2, r1
 8009eee:	07d6      	lsls	r6, r2, #31
 8009ef0:	d528      	bpl.n	8009f44 <__sflush_r+0xb8>
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	6062      	str	r2, [r4, #4]
 8009ef6:	04d9      	lsls	r1, r3, #19
 8009ef8:	6922      	ldr	r2, [r4, #16]
 8009efa:	6022      	str	r2, [r4, #0]
 8009efc:	d504      	bpl.n	8009f08 <__sflush_r+0x7c>
 8009efe:	1c42      	adds	r2, r0, #1
 8009f00:	d101      	bne.n	8009f06 <__sflush_r+0x7a>
 8009f02:	682b      	ldr	r3, [r5, #0]
 8009f04:	b903      	cbnz	r3, 8009f08 <__sflush_r+0x7c>
 8009f06:	6560      	str	r0, [r4, #84]	; 0x54
 8009f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f0a:	602f      	str	r7, [r5, #0]
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d0ca      	beq.n	8009ea6 <__sflush_r+0x1a>
 8009f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f14:	4299      	cmp	r1, r3
 8009f16:	d002      	beq.n	8009f1e <__sflush_r+0x92>
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f000 f9f1 	bl	800a300 <_free_r>
 8009f1e:	2000      	movs	r0, #0
 8009f20:	6360      	str	r0, [r4, #52]	; 0x34
 8009f22:	e7c1      	b.n	8009ea8 <__sflush_r+0x1c>
 8009f24:	6a21      	ldr	r1, [r4, #32]
 8009f26:	2301      	movs	r3, #1
 8009f28:	4628      	mov	r0, r5
 8009f2a:	47b0      	blx	r6
 8009f2c:	1c41      	adds	r1, r0, #1
 8009f2e:	d1c7      	bne.n	8009ec0 <__sflush_r+0x34>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0c4      	beq.n	8009ec0 <__sflush_r+0x34>
 8009f36:	2b1d      	cmp	r3, #29
 8009f38:	d001      	beq.n	8009f3e <__sflush_r+0xb2>
 8009f3a:	2b16      	cmp	r3, #22
 8009f3c:	d101      	bne.n	8009f42 <__sflush_r+0xb6>
 8009f3e:	602f      	str	r7, [r5, #0]
 8009f40:	e7b1      	b.n	8009ea6 <__sflush_r+0x1a>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	e7ad      	b.n	8009ea8 <__sflush_r+0x1c>
 8009f4c:	690f      	ldr	r7, [r1, #16]
 8009f4e:	2f00      	cmp	r7, #0
 8009f50:	d0a9      	beq.n	8009ea6 <__sflush_r+0x1a>
 8009f52:	0793      	lsls	r3, r2, #30
 8009f54:	680e      	ldr	r6, [r1, #0]
 8009f56:	bf08      	it	eq
 8009f58:	694b      	ldreq	r3, [r1, #20]
 8009f5a:	600f      	str	r7, [r1, #0]
 8009f5c:	bf18      	it	ne
 8009f5e:	2300      	movne	r3, #0
 8009f60:	eba6 0807 	sub.w	r8, r6, r7
 8009f64:	608b      	str	r3, [r1, #8]
 8009f66:	f1b8 0f00 	cmp.w	r8, #0
 8009f6a:	dd9c      	ble.n	8009ea6 <__sflush_r+0x1a>
 8009f6c:	6a21      	ldr	r1, [r4, #32]
 8009f6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f70:	4643      	mov	r3, r8
 8009f72:	463a      	mov	r2, r7
 8009f74:	4628      	mov	r0, r5
 8009f76:	47b0      	blx	r6
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	dc06      	bgt.n	8009f8a <__sflush_r+0xfe>
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295
 8009f88:	e78e      	b.n	8009ea8 <__sflush_r+0x1c>
 8009f8a:	4407      	add	r7, r0
 8009f8c:	eba8 0800 	sub.w	r8, r8, r0
 8009f90:	e7e9      	b.n	8009f66 <__sflush_r+0xda>
 8009f92:	bf00      	nop
 8009f94:	20400001 	.word	0x20400001

08009f98 <_fflush_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	690b      	ldr	r3, [r1, #16]
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	b913      	cbnz	r3, 8009fa8 <_fflush_r+0x10>
 8009fa2:	2500      	movs	r5, #0
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	b118      	cbz	r0, 8009fb2 <_fflush_r+0x1a>
 8009faa:	6983      	ldr	r3, [r0, #24]
 8009fac:	b90b      	cbnz	r3, 8009fb2 <_fflush_r+0x1a>
 8009fae:	f000 f887 	bl	800a0c0 <__sinit>
 8009fb2:	4b14      	ldr	r3, [pc, #80]	; (800a004 <_fflush_r+0x6c>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	d11b      	bne.n	8009ff0 <_fflush_r+0x58>
 8009fb8:	686c      	ldr	r4, [r5, #4]
 8009fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0ef      	beq.n	8009fa2 <_fflush_r+0xa>
 8009fc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fc4:	07d0      	lsls	r0, r2, #31
 8009fc6:	d404      	bmi.n	8009fd2 <_fflush_r+0x3a>
 8009fc8:	0599      	lsls	r1, r3, #22
 8009fca:	d402      	bmi.n	8009fd2 <_fflush_r+0x3a>
 8009fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fce:	f000 f927 	bl	800a220 <__retarget_lock_acquire_recursive>
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	f7ff ff59 	bl	8009e8c <__sflush_r>
 8009fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fdc:	07da      	lsls	r2, r3, #31
 8009fde:	4605      	mov	r5, r0
 8009fe0:	d4e0      	bmi.n	8009fa4 <_fflush_r+0xc>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	059b      	lsls	r3, r3, #22
 8009fe6:	d4dd      	bmi.n	8009fa4 <_fflush_r+0xc>
 8009fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fea:	f000 f91a 	bl	800a222 <__retarget_lock_release_recursive>
 8009fee:	e7d9      	b.n	8009fa4 <_fflush_r+0xc>
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <_fflush_r+0x70>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d101      	bne.n	8009ffa <_fflush_r+0x62>
 8009ff6:	68ac      	ldr	r4, [r5, #8]
 8009ff8:	e7df      	b.n	8009fba <_fflush_r+0x22>
 8009ffa:	4b04      	ldr	r3, [pc, #16]	; (800a00c <_fflush_r+0x74>)
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	bf08      	it	eq
 800a000:	68ec      	ldreq	r4, [r5, #12]
 800a002:	e7da      	b.n	8009fba <_fflush_r+0x22>
 800a004:	0800b760 	.word	0x0800b760
 800a008:	0800b780 	.word	0x0800b780
 800a00c:	0800b740 	.word	0x0800b740

0800a010 <std>:
 800a010:	2300      	movs	r3, #0
 800a012:	b510      	push	{r4, lr}
 800a014:	4604      	mov	r4, r0
 800a016:	e9c0 3300 	strd	r3, r3, [r0]
 800a01a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a01e:	6083      	str	r3, [r0, #8]
 800a020:	8181      	strh	r1, [r0, #12]
 800a022:	6643      	str	r3, [r0, #100]	; 0x64
 800a024:	81c2      	strh	r2, [r0, #14]
 800a026:	6183      	str	r3, [r0, #24]
 800a028:	4619      	mov	r1, r3
 800a02a:	2208      	movs	r2, #8
 800a02c:	305c      	adds	r0, #92	; 0x5c
 800a02e:	f7ff fd13 	bl	8009a58 <memset>
 800a032:	4b05      	ldr	r3, [pc, #20]	; (800a048 <std+0x38>)
 800a034:	6263      	str	r3, [r4, #36]	; 0x24
 800a036:	4b05      	ldr	r3, [pc, #20]	; (800a04c <std+0x3c>)
 800a038:	62a3      	str	r3, [r4, #40]	; 0x28
 800a03a:	4b05      	ldr	r3, [pc, #20]	; (800a050 <std+0x40>)
 800a03c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a03e:	4b05      	ldr	r3, [pc, #20]	; (800a054 <std+0x44>)
 800a040:	6224      	str	r4, [r4, #32]
 800a042:	6323      	str	r3, [r4, #48]	; 0x30
 800a044:	bd10      	pop	{r4, pc}
 800a046:	bf00      	nop
 800a048:	0800ad75 	.word	0x0800ad75
 800a04c:	0800ad97 	.word	0x0800ad97
 800a050:	0800adcf 	.word	0x0800adcf
 800a054:	0800adf3 	.word	0x0800adf3

0800a058 <_cleanup_r>:
 800a058:	4901      	ldr	r1, [pc, #4]	; (800a060 <_cleanup_r+0x8>)
 800a05a:	f000 b8c1 	b.w	800a1e0 <_fwalk_reent>
 800a05e:	bf00      	nop
 800a060:	08009f99 	.word	0x08009f99

0800a064 <__sfmoreglue>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	2268      	movs	r2, #104	; 0x68
 800a068:	1e4d      	subs	r5, r1, #1
 800a06a:	4355      	muls	r5, r2
 800a06c:	460e      	mov	r6, r1
 800a06e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a072:	f000 f9b1 	bl	800a3d8 <_malloc_r>
 800a076:	4604      	mov	r4, r0
 800a078:	b140      	cbz	r0, 800a08c <__sfmoreglue+0x28>
 800a07a:	2100      	movs	r1, #0
 800a07c:	e9c0 1600 	strd	r1, r6, [r0]
 800a080:	300c      	adds	r0, #12
 800a082:	60a0      	str	r0, [r4, #8]
 800a084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a088:	f7ff fce6 	bl	8009a58 <memset>
 800a08c:	4620      	mov	r0, r4
 800a08e:	bd70      	pop	{r4, r5, r6, pc}

0800a090 <__sfp_lock_acquire>:
 800a090:	4801      	ldr	r0, [pc, #4]	; (800a098 <__sfp_lock_acquire+0x8>)
 800a092:	f000 b8c5 	b.w	800a220 <__retarget_lock_acquire_recursive>
 800a096:	bf00      	nop
 800a098:	20000f61 	.word	0x20000f61

0800a09c <__sfp_lock_release>:
 800a09c:	4801      	ldr	r0, [pc, #4]	; (800a0a4 <__sfp_lock_release+0x8>)
 800a09e:	f000 b8c0 	b.w	800a222 <__retarget_lock_release_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	20000f61 	.word	0x20000f61

0800a0a8 <__sinit_lock_acquire>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	; (800a0b0 <__sinit_lock_acquire+0x8>)
 800a0aa:	f000 b8b9 	b.w	800a220 <__retarget_lock_acquire_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	20000f62 	.word	0x20000f62

0800a0b4 <__sinit_lock_release>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	; (800a0bc <__sinit_lock_release+0x8>)
 800a0b6:	f000 b8b4 	b.w	800a222 <__retarget_lock_release_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	20000f62 	.word	0x20000f62

0800a0c0 <__sinit>:
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	f7ff fff0 	bl	800a0a8 <__sinit_lock_acquire>
 800a0c8:	69a3      	ldr	r3, [r4, #24]
 800a0ca:	b11b      	cbz	r3, 800a0d4 <__sinit+0x14>
 800a0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d0:	f7ff bff0 	b.w	800a0b4 <__sinit_lock_release>
 800a0d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0d8:	6523      	str	r3, [r4, #80]	; 0x50
 800a0da:	4b13      	ldr	r3, [pc, #76]	; (800a128 <__sinit+0x68>)
 800a0dc:	4a13      	ldr	r2, [pc, #76]	; (800a12c <__sinit+0x6c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0e2:	42a3      	cmp	r3, r4
 800a0e4:	bf04      	itt	eq
 800a0e6:	2301      	moveq	r3, #1
 800a0e8:	61a3      	streq	r3, [r4, #24]
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f000 f820 	bl	800a130 <__sfp>
 800a0f0:	6060      	str	r0, [r4, #4]
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f000 f81c 	bl	800a130 <__sfp>
 800a0f8:	60a0      	str	r0, [r4, #8]
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f000 f818 	bl	800a130 <__sfp>
 800a100:	2200      	movs	r2, #0
 800a102:	60e0      	str	r0, [r4, #12]
 800a104:	2104      	movs	r1, #4
 800a106:	6860      	ldr	r0, [r4, #4]
 800a108:	f7ff ff82 	bl	800a010 <std>
 800a10c:	68a0      	ldr	r0, [r4, #8]
 800a10e:	2201      	movs	r2, #1
 800a110:	2109      	movs	r1, #9
 800a112:	f7ff ff7d 	bl	800a010 <std>
 800a116:	68e0      	ldr	r0, [r4, #12]
 800a118:	2202      	movs	r2, #2
 800a11a:	2112      	movs	r1, #18
 800a11c:	f7ff ff78 	bl	800a010 <std>
 800a120:	2301      	movs	r3, #1
 800a122:	61a3      	str	r3, [r4, #24]
 800a124:	e7d2      	b.n	800a0cc <__sinit+0xc>
 800a126:	bf00      	nop
 800a128:	0800b68c 	.word	0x0800b68c
 800a12c:	0800a059 	.word	0x0800a059

0800a130 <__sfp>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	4607      	mov	r7, r0
 800a134:	f7ff ffac 	bl	800a090 <__sfp_lock_acquire>
 800a138:	4b1e      	ldr	r3, [pc, #120]	; (800a1b4 <__sfp+0x84>)
 800a13a:	681e      	ldr	r6, [r3, #0]
 800a13c:	69b3      	ldr	r3, [r6, #24]
 800a13e:	b913      	cbnz	r3, 800a146 <__sfp+0x16>
 800a140:	4630      	mov	r0, r6
 800a142:	f7ff ffbd 	bl	800a0c0 <__sinit>
 800a146:	3648      	adds	r6, #72	; 0x48
 800a148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	d503      	bpl.n	800a158 <__sfp+0x28>
 800a150:	6833      	ldr	r3, [r6, #0]
 800a152:	b30b      	cbz	r3, 800a198 <__sfp+0x68>
 800a154:	6836      	ldr	r6, [r6, #0]
 800a156:	e7f7      	b.n	800a148 <__sfp+0x18>
 800a158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a15c:	b9d5      	cbnz	r5, 800a194 <__sfp+0x64>
 800a15e:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <__sfp+0x88>)
 800a160:	60e3      	str	r3, [r4, #12]
 800a162:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a166:	6665      	str	r5, [r4, #100]	; 0x64
 800a168:	f000 f859 	bl	800a21e <__retarget_lock_init_recursive>
 800a16c:	f7ff ff96 	bl	800a09c <__sfp_lock_release>
 800a170:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a174:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a178:	6025      	str	r5, [r4, #0]
 800a17a:	61a5      	str	r5, [r4, #24]
 800a17c:	2208      	movs	r2, #8
 800a17e:	4629      	mov	r1, r5
 800a180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a184:	f7ff fc68 	bl	8009a58 <memset>
 800a188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a18c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a190:	4620      	mov	r0, r4
 800a192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a194:	3468      	adds	r4, #104	; 0x68
 800a196:	e7d9      	b.n	800a14c <__sfp+0x1c>
 800a198:	2104      	movs	r1, #4
 800a19a:	4638      	mov	r0, r7
 800a19c:	f7ff ff62 	bl	800a064 <__sfmoreglue>
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	6030      	str	r0, [r6, #0]
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d1d5      	bne.n	800a154 <__sfp+0x24>
 800a1a8:	f7ff ff78 	bl	800a09c <__sfp_lock_release>
 800a1ac:	230c      	movs	r3, #12
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	e7ee      	b.n	800a190 <__sfp+0x60>
 800a1b2:	bf00      	nop
 800a1b4:	0800b68c 	.word	0x0800b68c
 800a1b8:	ffff0001 	.word	0xffff0001

0800a1bc <fiprintf>:
 800a1bc:	b40e      	push	{r1, r2, r3}
 800a1be:	b503      	push	{r0, r1, lr}
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	ab03      	add	r3, sp, #12
 800a1c4:	4805      	ldr	r0, [pc, #20]	; (800a1dc <fiprintf+0x20>)
 800a1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ca:	6800      	ldr	r0, [r0, #0]
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	f000 fafd 	bl	800a7cc <_vfiprintf_r>
 800a1d2:	b002      	add	sp, #8
 800a1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d8:	b003      	add	sp, #12
 800a1da:	4770      	bx	lr
 800a1dc:	2000000c 	.word	0x2000000c

0800a1e0 <_fwalk_reent>:
 800a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	4688      	mov	r8, r1
 800a1e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1ec:	2700      	movs	r7, #0
 800a1ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1f2:	f1b9 0901 	subs.w	r9, r9, #1
 800a1f6:	d505      	bpl.n	800a204 <_fwalk_reent+0x24>
 800a1f8:	6824      	ldr	r4, [r4, #0]
 800a1fa:	2c00      	cmp	r4, #0
 800a1fc:	d1f7      	bne.n	800a1ee <_fwalk_reent+0xe>
 800a1fe:	4638      	mov	r0, r7
 800a200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a204:	89ab      	ldrh	r3, [r5, #12]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d907      	bls.n	800a21a <_fwalk_reent+0x3a>
 800a20a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a20e:	3301      	adds	r3, #1
 800a210:	d003      	beq.n	800a21a <_fwalk_reent+0x3a>
 800a212:	4629      	mov	r1, r5
 800a214:	4630      	mov	r0, r6
 800a216:	47c0      	blx	r8
 800a218:	4307      	orrs	r7, r0
 800a21a:	3568      	adds	r5, #104	; 0x68
 800a21c:	e7e9      	b.n	800a1f2 <_fwalk_reent+0x12>

0800a21e <__retarget_lock_init_recursive>:
 800a21e:	4770      	bx	lr

0800a220 <__retarget_lock_acquire_recursive>:
 800a220:	4770      	bx	lr

0800a222 <__retarget_lock_release_recursive>:
 800a222:	4770      	bx	lr

0800a224 <__swhatbuf_r>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	460e      	mov	r6, r1
 800a228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22c:	2900      	cmp	r1, #0
 800a22e:	b096      	sub	sp, #88	; 0x58
 800a230:	4614      	mov	r4, r2
 800a232:	461d      	mov	r5, r3
 800a234:	da08      	bge.n	800a248 <__swhatbuf_r+0x24>
 800a236:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	602a      	str	r2, [r5, #0]
 800a23e:	061a      	lsls	r2, r3, #24
 800a240:	d410      	bmi.n	800a264 <__swhatbuf_r+0x40>
 800a242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a246:	e00e      	b.n	800a266 <__swhatbuf_r+0x42>
 800a248:	466a      	mov	r2, sp
 800a24a:	f000 fe01 	bl	800ae50 <_fstat_r>
 800a24e:	2800      	cmp	r0, #0
 800a250:	dbf1      	blt.n	800a236 <__swhatbuf_r+0x12>
 800a252:	9a01      	ldr	r2, [sp, #4]
 800a254:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a258:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a25c:	425a      	negs	r2, r3
 800a25e:	415a      	adcs	r2, r3
 800a260:	602a      	str	r2, [r5, #0]
 800a262:	e7ee      	b.n	800a242 <__swhatbuf_r+0x1e>
 800a264:	2340      	movs	r3, #64	; 0x40
 800a266:	2000      	movs	r0, #0
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	b016      	add	sp, #88	; 0x58
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a270 <__smakebuf_r>:
 800a270:	898b      	ldrh	r3, [r1, #12]
 800a272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a274:	079d      	lsls	r5, r3, #30
 800a276:	4606      	mov	r6, r0
 800a278:	460c      	mov	r4, r1
 800a27a:	d507      	bpl.n	800a28c <__smakebuf_r+0x1c>
 800a27c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	6123      	str	r3, [r4, #16]
 800a284:	2301      	movs	r3, #1
 800a286:	6163      	str	r3, [r4, #20]
 800a288:	b002      	add	sp, #8
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	ab01      	add	r3, sp, #4
 800a28e:	466a      	mov	r2, sp
 800a290:	f7ff ffc8 	bl	800a224 <__swhatbuf_r>
 800a294:	9900      	ldr	r1, [sp, #0]
 800a296:	4605      	mov	r5, r0
 800a298:	4630      	mov	r0, r6
 800a29a:	f000 f89d 	bl	800a3d8 <_malloc_r>
 800a29e:	b948      	cbnz	r0, 800a2b4 <__smakebuf_r+0x44>
 800a2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a4:	059a      	lsls	r2, r3, #22
 800a2a6:	d4ef      	bmi.n	800a288 <__smakebuf_r+0x18>
 800a2a8:	f023 0303 	bic.w	r3, r3, #3
 800a2ac:	f043 0302 	orr.w	r3, r3, #2
 800a2b0:	81a3      	strh	r3, [r4, #12]
 800a2b2:	e7e3      	b.n	800a27c <__smakebuf_r+0xc>
 800a2b4:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <__smakebuf_r+0x7c>)
 800a2b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	6020      	str	r0, [r4, #0]
 800a2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c0:	81a3      	strh	r3, [r4, #12]
 800a2c2:	9b00      	ldr	r3, [sp, #0]
 800a2c4:	6163      	str	r3, [r4, #20]
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	6120      	str	r0, [r4, #16]
 800a2ca:	b15b      	cbz	r3, 800a2e4 <__smakebuf_r+0x74>
 800a2cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 fdcf 	bl	800ae74 <_isatty_r>
 800a2d6:	b128      	cbz	r0, 800a2e4 <__smakebuf_r+0x74>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	f023 0303 	bic.w	r3, r3, #3
 800a2de:	f043 0301 	orr.w	r3, r3, #1
 800a2e2:	81a3      	strh	r3, [r4, #12]
 800a2e4:	89a0      	ldrh	r0, [r4, #12]
 800a2e6:	4305      	orrs	r5, r0
 800a2e8:	81a5      	strh	r5, [r4, #12]
 800a2ea:	e7cd      	b.n	800a288 <__smakebuf_r+0x18>
 800a2ec:	0800a059 	.word	0x0800a059

0800a2f0 <malloc>:
 800a2f0:	4b02      	ldr	r3, [pc, #8]	; (800a2fc <malloc+0xc>)
 800a2f2:	4601      	mov	r1, r0
 800a2f4:	6818      	ldr	r0, [r3, #0]
 800a2f6:	f000 b86f 	b.w	800a3d8 <_malloc_r>
 800a2fa:	bf00      	nop
 800a2fc:	2000000c 	.word	0x2000000c

0800a300 <_free_r>:
 800a300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a302:	2900      	cmp	r1, #0
 800a304:	d044      	beq.n	800a390 <_free_r+0x90>
 800a306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a30a:	9001      	str	r0, [sp, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f1a1 0404 	sub.w	r4, r1, #4
 800a312:	bfb8      	it	lt
 800a314:	18e4      	addlt	r4, r4, r3
 800a316:	f000 fde9 	bl	800aeec <__malloc_lock>
 800a31a:	4a1e      	ldr	r2, [pc, #120]	; (800a394 <_free_r+0x94>)
 800a31c:	9801      	ldr	r0, [sp, #4]
 800a31e:	6813      	ldr	r3, [r2, #0]
 800a320:	b933      	cbnz	r3, 800a330 <_free_r+0x30>
 800a322:	6063      	str	r3, [r4, #4]
 800a324:	6014      	str	r4, [r2, #0]
 800a326:	b003      	add	sp, #12
 800a328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a32c:	f000 bde4 	b.w	800aef8 <__malloc_unlock>
 800a330:	42a3      	cmp	r3, r4
 800a332:	d908      	bls.n	800a346 <_free_r+0x46>
 800a334:	6825      	ldr	r5, [r4, #0]
 800a336:	1961      	adds	r1, r4, r5
 800a338:	428b      	cmp	r3, r1
 800a33a:	bf01      	itttt	eq
 800a33c:	6819      	ldreq	r1, [r3, #0]
 800a33e:	685b      	ldreq	r3, [r3, #4]
 800a340:	1949      	addeq	r1, r1, r5
 800a342:	6021      	streq	r1, [r4, #0]
 800a344:	e7ed      	b.n	800a322 <_free_r+0x22>
 800a346:	461a      	mov	r2, r3
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	b10b      	cbz	r3, 800a350 <_free_r+0x50>
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	d9fa      	bls.n	800a346 <_free_r+0x46>
 800a350:	6811      	ldr	r1, [r2, #0]
 800a352:	1855      	adds	r5, r2, r1
 800a354:	42a5      	cmp	r5, r4
 800a356:	d10b      	bne.n	800a370 <_free_r+0x70>
 800a358:	6824      	ldr	r4, [r4, #0]
 800a35a:	4421      	add	r1, r4
 800a35c:	1854      	adds	r4, r2, r1
 800a35e:	42a3      	cmp	r3, r4
 800a360:	6011      	str	r1, [r2, #0]
 800a362:	d1e0      	bne.n	800a326 <_free_r+0x26>
 800a364:	681c      	ldr	r4, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	6053      	str	r3, [r2, #4]
 800a36a:	4421      	add	r1, r4
 800a36c:	6011      	str	r1, [r2, #0]
 800a36e:	e7da      	b.n	800a326 <_free_r+0x26>
 800a370:	d902      	bls.n	800a378 <_free_r+0x78>
 800a372:	230c      	movs	r3, #12
 800a374:	6003      	str	r3, [r0, #0]
 800a376:	e7d6      	b.n	800a326 <_free_r+0x26>
 800a378:	6825      	ldr	r5, [r4, #0]
 800a37a:	1961      	adds	r1, r4, r5
 800a37c:	428b      	cmp	r3, r1
 800a37e:	bf04      	itt	eq
 800a380:	6819      	ldreq	r1, [r3, #0]
 800a382:	685b      	ldreq	r3, [r3, #4]
 800a384:	6063      	str	r3, [r4, #4]
 800a386:	bf04      	itt	eq
 800a388:	1949      	addeq	r1, r1, r5
 800a38a:	6021      	streq	r1, [r4, #0]
 800a38c:	6054      	str	r4, [r2, #4]
 800a38e:	e7ca      	b.n	800a326 <_free_r+0x26>
 800a390:	b003      	add	sp, #12
 800a392:	bd30      	pop	{r4, r5, pc}
 800a394:	20000f64 	.word	0x20000f64

0800a398 <sbrk_aligned>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	4e0e      	ldr	r6, [pc, #56]	; (800a3d4 <sbrk_aligned+0x3c>)
 800a39c:	460c      	mov	r4, r1
 800a39e:	6831      	ldr	r1, [r6, #0]
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	b911      	cbnz	r1, 800a3aa <sbrk_aligned+0x12>
 800a3a4:	f000 fcd6 	bl	800ad54 <_sbrk_r>
 800a3a8:	6030      	str	r0, [r6, #0]
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 fcd1 	bl	800ad54 <_sbrk_r>
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	d00a      	beq.n	800a3cc <sbrk_aligned+0x34>
 800a3b6:	1cc4      	adds	r4, r0, #3
 800a3b8:	f024 0403 	bic.w	r4, r4, #3
 800a3bc:	42a0      	cmp	r0, r4
 800a3be:	d007      	beq.n	800a3d0 <sbrk_aligned+0x38>
 800a3c0:	1a21      	subs	r1, r4, r0
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 fcc6 	bl	800ad54 <_sbrk_r>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	d101      	bne.n	800a3d0 <sbrk_aligned+0x38>
 800a3cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	20000f68 	.word	0x20000f68

0800a3d8 <_malloc_r>:
 800a3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3dc:	1ccd      	adds	r5, r1, #3
 800a3de:	f025 0503 	bic.w	r5, r5, #3
 800a3e2:	3508      	adds	r5, #8
 800a3e4:	2d0c      	cmp	r5, #12
 800a3e6:	bf38      	it	cc
 800a3e8:	250c      	movcc	r5, #12
 800a3ea:	2d00      	cmp	r5, #0
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	db01      	blt.n	800a3f4 <_malloc_r+0x1c>
 800a3f0:	42a9      	cmp	r1, r5
 800a3f2:	d905      	bls.n	800a400 <_malloc_r+0x28>
 800a3f4:	230c      	movs	r3, #12
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	2600      	movs	r6, #0
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a400:	4e2e      	ldr	r6, [pc, #184]	; (800a4bc <_malloc_r+0xe4>)
 800a402:	f000 fd73 	bl	800aeec <__malloc_lock>
 800a406:	6833      	ldr	r3, [r6, #0]
 800a408:	461c      	mov	r4, r3
 800a40a:	bb34      	cbnz	r4, 800a45a <_malloc_r+0x82>
 800a40c:	4629      	mov	r1, r5
 800a40e:	4638      	mov	r0, r7
 800a410:	f7ff ffc2 	bl	800a398 <sbrk_aligned>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	4604      	mov	r4, r0
 800a418:	d14d      	bne.n	800a4b6 <_malloc_r+0xde>
 800a41a:	6834      	ldr	r4, [r6, #0]
 800a41c:	4626      	mov	r6, r4
 800a41e:	2e00      	cmp	r6, #0
 800a420:	d140      	bne.n	800a4a4 <_malloc_r+0xcc>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	4631      	mov	r1, r6
 800a426:	4638      	mov	r0, r7
 800a428:	eb04 0803 	add.w	r8, r4, r3
 800a42c:	f000 fc92 	bl	800ad54 <_sbrk_r>
 800a430:	4580      	cmp	r8, r0
 800a432:	d13a      	bne.n	800a4aa <_malloc_r+0xd2>
 800a434:	6821      	ldr	r1, [r4, #0]
 800a436:	3503      	adds	r5, #3
 800a438:	1a6d      	subs	r5, r5, r1
 800a43a:	f025 0503 	bic.w	r5, r5, #3
 800a43e:	3508      	adds	r5, #8
 800a440:	2d0c      	cmp	r5, #12
 800a442:	bf38      	it	cc
 800a444:	250c      	movcc	r5, #12
 800a446:	4629      	mov	r1, r5
 800a448:	4638      	mov	r0, r7
 800a44a:	f7ff ffa5 	bl	800a398 <sbrk_aligned>
 800a44e:	3001      	adds	r0, #1
 800a450:	d02b      	beq.n	800a4aa <_malloc_r+0xd2>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	442b      	add	r3, r5
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	e00e      	b.n	800a478 <_malloc_r+0xa0>
 800a45a:	6822      	ldr	r2, [r4, #0]
 800a45c:	1b52      	subs	r2, r2, r5
 800a45e:	d41e      	bmi.n	800a49e <_malloc_r+0xc6>
 800a460:	2a0b      	cmp	r2, #11
 800a462:	d916      	bls.n	800a492 <_malloc_r+0xba>
 800a464:	1961      	adds	r1, r4, r5
 800a466:	42a3      	cmp	r3, r4
 800a468:	6025      	str	r5, [r4, #0]
 800a46a:	bf18      	it	ne
 800a46c:	6059      	strne	r1, [r3, #4]
 800a46e:	6863      	ldr	r3, [r4, #4]
 800a470:	bf08      	it	eq
 800a472:	6031      	streq	r1, [r6, #0]
 800a474:	5162      	str	r2, [r4, r5]
 800a476:	604b      	str	r3, [r1, #4]
 800a478:	4638      	mov	r0, r7
 800a47a:	f104 060b 	add.w	r6, r4, #11
 800a47e:	f000 fd3b 	bl	800aef8 <__malloc_unlock>
 800a482:	f026 0607 	bic.w	r6, r6, #7
 800a486:	1d23      	adds	r3, r4, #4
 800a488:	1af2      	subs	r2, r6, r3
 800a48a:	d0b6      	beq.n	800a3fa <_malloc_r+0x22>
 800a48c:	1b9b      	subs	r3, r3, r6
 800a48e:	50a3      	str	r3, [r4, r2]
 800a490:	e7b3      	b.n	800a3fa <_malloc_r+0x22>
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	42a3      	cmp	r3, r4
 800a496:	bf0c      	ite	eq
 800a498:	6032      	streq	r2, [r6, #0]
 800a49a:	605a      	strne	r2, [r3, #4]
 800a49c:	e7ec      	b.n	800a478 <_malloc_r+0xa0>
 800a49e:	4623      	mov	r3, r4
 800a4a0:	6864      	ldr	r4, [r4, #4]
 800a4a2:	e7b2      	b.n	800a40a <_malloc_r+0x32>
 800a4a4:	4634      	mov	r4, r6
 800a4a6:	6876      	ldr	r6, [r6, #4]
 800a4a8:	e7b9      	b.n	800a41e <_malloc_r+0x46>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	603b      	str	r3, [r7, #0]
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	f000 fd22 	bl	800aef8 <__malloc_unlock>
 800a4b4:	e7a1      	b.n	800a3fa <_malloc_r+0x22>
 800a4b6:	6025      	str	r5, [r4, #0]
 800a4b8:	e7de      	b.n	800a478 <_malloc_r+0xa0>
 800a4ba:	bf00      	nop
 800a4bc:	20000f64 	.word	0x20000f64

0800a4c0 <__ssputs_r>:
 800a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	688e      	ldr	r6, [r1, #8]
 800a4c6:	429e      	cmp	r6, r3
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	4690      	mov	r8, r2
 800a4ce:	461f      	mov	r7, r3
 800a4d0:	d838      	bhi.n	800a544 <__ssputs_r+0x84>
 800a4d2:	898a      	ldrh	r2, [r1, #12]
 800a4d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4d8:	d032      	beq.n	800a540 <__ssputs_r+0x80>
 800a4da:	6825      	ldr	r5, [r4, #0]
 800a4dc:	6909      	ldr	r1, [r1, #16]
 800a4de:	eba5 0901 	sub.w	r9, r5, r1
 800a4e2:	6965      	ldr	r5, [r4, #20]
 800a4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	444b      	add	r3, r9
 800a4f0:	106d      	asrs	r5, r5, #1
 800a4f2:	429d      	cmp	r5, r3
 800a4f4:	bf38      	it	cc
 800a4f6:	461d      	movcc	r5, r3
 800a4f8:	0553      	lsls	r3, r2, #21
 800a4fa:	d531      	bpl.n	800a560 <__ssputs_r+0xa0>
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	f7ff ff6b 	bl	800a3d8 <_malloc_r>
 800a502:	4606      	mov	r6, r0
 800a504:	b950      	cbnz	r0, 800a51c <__ssputs_r+0x5c>
 800a506:	230c      	movs	r3, #12
 800a508:	f8ca 3000 	str.w	r3, [sl]
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51c:	6921      	ldr	r1, [r4, #16]
 800a51e:	464a      	mov	r2, r9
 800a520:	f7ff fa8c 	bl	8009a3c <memcpy>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	6126      	str	r6, [r4, #16]
 800a532:	6165      	str	r5, [r4, #20]
 800a534:	444e      	add	r6, r9
 800a536:	eba5 0509 	sub.w	r5, r5, r9
 800a53a:	6026      	str	r6, [r4, #0]
 800a53c:	60a5      	str	r5, [r4, #8]
 800a53e:	463e      	mov	r6, r7
 800a540:	42be      	cmp	r6, r7
 800a542:	d900      	bls.n	800a546 <__ssputs_r+0x86>
 800a544:	463e      	mov	r6, r7
 800a546:	6820      	ldr	r0, [r4, #0]
 800a548:	4632      	mov	r2, r6
 800a54a:	4641      	mov	r1, r8
 800a54c:	f000 fcb4 	bl	800aeb8 <memmove>
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	1b9b      	subs	r3, r3, r6
 800a554:	60a3      	str	r3, [r4, #8]
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	4433      	add	r3, r6
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	2000      	movs	r0, #0
 800a55e:	e7db      	b.n	800a518 <__ssputs_r+0x58>
 800a560:	462a      	mov	r2, r5
 800a562:	f000 fccf 	bl	800af04 <_realloc_r>
 800a566:	4606      	mov	r6, r0
 800a568:	2800      	cmp	r0, #0
 800a56a:	d1e1      	bne.n	800a530 <__ssputs_r+0x70>
 800a56c:	6921      	ldr	r1, [r4, #16]
 800a56e:	4650      	mov	r0, sl
 800a570:	f7ff fec6 	bl	800a300 <_free_r>
 800a574:	e7c7      	b.n	800a506 <__ssputs_r+0x46>
	...

0800a578 <_svfiprintf_r>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	4698      	mov	r8, r3
 800a57e:	898b      	ldrh	r3, [r1, #12]
 800a580:	061b      	lsls	r3, r3, #24
 800a582:	b09d      	sub	sp, #116	; 0x74
 800a584:	4607      	mov	r7, r0
 800a586:	460d      	mov	r5, r1
 800a588:	4614      	mov	r4, r2
 800a58a:	d50e      	bpl.n	800a5aa <_svfiprintf_r+0x32>
 800a58c:	690b      	ldr	r3, [r1, #16]
 800a58e:	b963      	cbnz	r3, 800a5aa <_svfiprintf_r+0x32>
 800a590:	2140      	movs	r1, #64	; 0x40
 800a592:	f7ff ff21 	bl	800a3d8 <_malloc_r>
 800a596:	6028      	str	r0, [r5, #0]
 800a598:	6128      	str	r0, [r5, #16]
 800a59a:	b920      	cbnz	r0, 800a5a6 <_svfiprintf_r+0x2e>
 800a59c:	230c      	movs	r3, #12
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a4:	e0d1      	b.n	800a74a <_svfiprintf_r+0x1d2>
 800a5a6:	2340      	movs	r3, #64	; 0x40
 800a5a8:	616b      	str	r3, [r5, #20]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ae:	2320      	movs	r3, #32
 800a5b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5b8:	2330      	movs	r3, #48	; 0x30
 800a5ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a764 <_svfiprintf_r+0x1ec>
 800a5be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5c2:	f04f 0901 	mov.w	r9, #1
 800a5c6:	4623      	mov	r3, r4
 800a5c8:	469a      	mov	sl, r3
 800a5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ce:	b10a      	cbz	r2, 800a5d4 <_svfiprintf_r+0x5c>
 800a5d0:	2a25      	cmp	r2, #37	; 0x25
 800a5d2:	d1f9      	bne.n	800a5c8 <_svfiprintf_r+0x50>
 800a5d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5d8:	d00b      	beq.n	800a5f2 <_svfiprintf_r+0x7a>
 800a5da:	465b      	mov	r3, fp
 800a5dc:	4622      	mov	r2, r4
 800a5de:	4629      	mov	r1, r5
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	f7ff ff6d 	bl	800a4c0 <__ssputs_r>
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	f000 80aa 	beq.w	800a740 <_svfiprintf_r+0x1c8>
 800a5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ee:	445a      	add	r2, fp
 800a5f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 80a2 	beq.w	800a740 <_svfiprintf_r+0x1c8>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a606:	f10a 0a01 	add.w	sl, sl, #1
 800a60a:	9304      	str	r3, [sp, #16]
 800a60c:	9307      	str	r3, [sp, #28]
 800a60e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a612:	931a      	str	r3, [sp, #104]	; 0x68
 800a614:	4654      	mov	r4, sl
 800a616:	2205      	movs	r2, #5
 800a618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a61c:	4851      	ldr	r0, [pc, #324]	; (800a764 <_svfiprintf_r+0x1ec>)
 800a61e:	f7f5 fdf7 	bl	8000210 <memchr>
 800a622:	9a04      	ldr	r2, [sp, #16]
 800a624:	b9d8      	cbnz	r0, 800a65e <_svfiprintf_r+0xe6>
 800a626:	06d0      	lsls	r0, r2, #27
 800a628:	bf44      	itt	mi
 800a62a:	2320      	movmi	r3, #32
 800a62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a630:	0711      	lsls	r1, r2, #28
 800a632:	bf44      	itt	mi
 800a634:	232b      	movmi	r3, #43	; 0x2b
 800a636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a63a:	f89a 3000 	ldrb.w	r3, [sl]
 800a63e:	2b2a      	cmp	r3, #42	; 0x2a
 800a640:	d015      	beq.n	800a66e <_svfiprintf_r+0xf6>
 800a642:	9a07      	ldr	r2, [sp, #28]
 800a644:	4654      	mov	r4, sl
 800a646:	2000      	movs	r0, #0
 800a648:	f04f 0c0a 	mov.w	ip, #10
 800a64c:	4621      	mov	r1, r4
 800a64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a652:	3b30      	subs	r3, #48	; 0x30
 800a654:	2b09      	cmp	r3, #9
 800a656:	d94e      	bls.n	800a6f6 <_svfiprintf_r+0x17e>
 800a658:	b1b0      	cbz	r0, 800a688 <_svfiprintf_r+0x110>
 800a65a:	9207      	str	r2, [sp, #28]
 800a65c:	e014      	b.n	800a688 <_svfiprintf_r+0x110>
 800a65e:	eba0 0308 	sub.w	r3, r0, r8
 800a662:	fa09 f303 	lsl.w	r3, r9, r3
 800a666:	4313      	orrs	r3, r2
 800a668:	9304      	str	r3, [sp, #16]
 800a66a:	46a2      	mov	sl, r4
 800a66c:	e7d2      	b.n	800a614 <_svfiprintf_r+0x9c>
 800a66e:	9b03      	ldr	r3, [sp, #12]
 800a670:	1d19      	adds	r1, r3, #4
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	9103      	str	r1, [sp, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	bfbb      	ittet	lt
 800a67a:	425b      	neglt	r3, r3
 800a67c:	f042 0202 	orrlt.w	r2, r2, #2
 800a680:	9307      	strge	r3, [sp, #28]
 800a682:	9307      	strlt	r3, [sp, #28]
 800a684:	bfb8      	it	lt
 800a686:	9204      	strlt	r2, [sp, #16]
 800a688:	7823      	ldrb	r3, [r4, #0]
 800a68a:	2b2e      	cmp	r3, #46	; 0x2e
 800a68c:	d10c      	bne.n	800a6a8 <_svfiprintf_r+0x130>
 800a68e:	7863      	ldrb	r3, [r4, #1]
 800a690:	2b2a      	cmp	r3, #42	; 0x2a
 800a692:	d135      	bne.n	800a700 <_svfiprintf_r+0x188>
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	9203      	str	r2, [sp, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bfb8      	it	lt
 800a6a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6a4:	3402      	adds	r4, #2
 800a6a6:	9305      	str	r3, [sp, #20]
 800a6a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a774 <_svfiprintf_r+0x1fc>
 800a6ac:	7821      	ldrb	r1, [r4, #0]
 800a6ae:	2203      	movs	r2, #3
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	f7f5 fdad 	bl	8000210 <memchr>
 800a6b6:	b140      	cbz	r0, 800a6ca <_svfiprintf_r+0x152>
 800a6b8:	2340      	movs	r3, #64	; 0x40
 800a6ba:	eba0 000a 	sub.w	r0, r0, sl
 800a6be:	fa03 f000 	lsl.w	r0, r3, r0
 800a6c2:	9b04      	ldr	r3, [sp, #16]
 800a6c4:	4303      	orrs	r3, r0
 800a6c6:	3401      	adds	r4, #1
 800a6c8:	9304      	str	r3, [sp, #16]
 800a6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ce:	4826      	ldr	r0, [pc, #152]	; (800a768 <_svfiprintf_r+0x1f0>)
 800a6d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6d4:	2206      	movs	r2, #6
 800a6d6:	f7f5 fd9b 	bl	8000210 <memchr>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d038      	beq.n	800a750 <_svfiprintf_r+0x1d8>
 800a6de:	4b23      	ldr	r3, [pc, #140]	; (800a76c <_svfiprintf_r+0x1f4>)
 800a6e0:	bb1b      	cbnz	r3, 800a72a <_svfiprintf_r+0x1b2>
 800a6e2:	9b03      	ldr	r3, [sp, #12]
 800a6e4:	3307      	adds	r3, #7
 800a6e6:	f023 0307 	bic.w	r3, r3, #7
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	9303      	str	r3, [sp, #12]
 800a6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f0:	4433      	add	r3, r6
 800a6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f4:	e767      	b.n	800a5c6 <_svfiprintf_r+0x4e>
 800a6f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	e7a5      	b.n	800a64c <_svfiprintf_r+0xd4>
 800a700:	2300      	movs	r3, #0
 800a702:	3401      	adds	r4, #1
 800a704:	9305      	str	r3, [sp, #20]
 800a706:	4619      	mov	r1, r3
 800a708:	f04f 0c0a 	mov.w	ip, #10
 800a70c:	4620      	mov	r0, r4
 800a70e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a712:	3a30      	subs	r2, #48	; 0x30
 800a714:	2a09      	cmp	r2, #9
 800a716:	d903      	bls.n	800a720 <_svfiprintf_r+0x1a8>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0c5      	beq.n	800a6a8 <_svfiprintf_r+0x130>
 800a71c:	9105      	str	r1, [sp, #20]
 800a71e:	e7c3      	b.n	800a6a8 <_svfiprintf_r+0x130>
 800a720:	fb0c 2101 	mla	r1, ip, r1, r2
 800a724:	4604      	mov	r4, r0
 800a726:	2301      	movs	r3, #1
 800a728:	e7f0      	b.n	800a70c <_svfiprintf_r+0x194>
 800a72a:	ab03      	add	r3, sp, #12
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	462a      	mov	r2, r5
 800a730:	4b0f      	ldr	r3, [pc, #60]	; (800a770 <_svfiprintf_r+0x1f8>)
 800a732:	a904      	add	r1, sp, #16
 800a734:	4638      	mov	r0, r7
 800a736:	f3af 8000 	nop.w
 800a73a:	1c42      	adds	r2, r0, #1
 800a73c:	4606      	mov	r6, r0
 800a73e:	d1d6      	bne.n	800a6ee <_svfiprintf_r+0x176>
 800a740:	89ab      	ldrh	r3, [r5, #12]
 800a742:	065b      	lsls	r3, r3, #25
 800a744:	f53f af2c 	bmi.w	800a5a0 <_svfiprintf_r+0x28>
 800a748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a74a:	b01d      	add	sp, #116	; 0x74
 800a74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a750:	ab03      	add	r3, sp, #12
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	462a      	mov	r2, r5
 800a756:	4b06      	ldr	r3, [pc, #24]	; (800a770 <_svfiprintf_r+0x1f8>)
 800a758:	a904      	add	r1, sp, #16
 800a75a:	4638      	mov	r0, r7
 800a75c:	f000 f9d4 	bl	800ab08 <_printf_i>
 800a760:	e7eb      	b.n	800a73a <_svfiprintf_r+0x1c2>
 800a762:	bf00      	nop
 800a764:	0800b7a0 	.word	0x0800b7a0
 800a768:	0800b7aa 	.word	0x0800b7aa
 800a76c:	00000000 	.word	0x00000000
 800a770:	0800a4c1 	.word	0x0800a4c1
 800a774:	0800b7a6 	.word	0x0800b7a6

0800a778 <__sfputc_r>:
 800a778:	6893      	ldr	r3, [r2, #8]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	b410      	push	{r4}
 800a780:	6093      	str	r3, [r2, #8]
 800a782:	da08      	bge.n	800a796 <__sfputc_r+0x1e>
 800a784:	6994      	ldr	r4, [r2, #24]
 800a786:	42a3      	cmp	r3, r4
 800a788:	db01      	blt.n	800a78e <__sfputc_r+0x16>
 800a78a:	290a      	cmp	r1, #10
 800a78c:	d103      	bne.n	800a796 <__sfputc_r+0x1e>
 800a78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a792:	f7ff ba9d 	b.w	8009cd0 <__swbuf_r>
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	1c58      	adds	r0, r3, #1
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	7019      	strb	r1, [r3, #0]
 800a79e:	4608      	mov	r0, r1
 800a7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <__sfputs_r>:
 800a7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	18d5      	adds	r5, r2, r3
 800a7b0:	42ac      	cmp	r4, r5
 800a7b2:	d101      	bne.n	800a7b8 <__sfputs_r+0x12>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e007      	b.n	800a7c8 <__sfputs_r+0x22>
 800a7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7bc:	463a      	mov	r2, r7
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7ff ffda 	bl	800a778 <__sfputc_r>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d1f3      	bne.n	800a7b0 <__sfputs_r+0xa>
 800a7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7cc <_vfiprintf_r>:
 800a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	b09d      	sub	sp, #116	; 0x74
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	4606      	mov	r6, r0
 800a7da:	b118      	cbz	r0, 800a7e4 <_vfiprintf_r+0x18>
 800a7dc:	6983      	ldr	r3, [r0, #24]
 800a7de:	b90b      	cbnz	r3, 800a7e4 <_vfiprintf_r+0x18>
 800a7e0:	f7ff fc6e 	bl	800a0c0 <__sinit>
 800a7e4:	4b89      	ldr	r3, [pc, #548]	; (800aa0c <_vfiprintf_r+0x240>)
 800a7e6:	429d      	cmp	r5, r3
 800a7e8:	d11b      	bne.n	800a822 <_vfiprintf_r+0x56>
 800a7ea:	6875      	ldr	r5, [r6, #4]
 800a7ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ee:	07d9      	lsls	r1, r3, #31
 800a7f0:	d405      	bmi.n	800a7fe <_vfiprintf_r+0x32>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	059a      	lsls	r2, r3, #22
 800a7f6:	d402      	bmi.n	800a7fe <_vfiprintf_r+0x32>
 800a7f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7fa:	f7ff fd11 	bl	800a220 <__retarget_lock_acquire_recursive>
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	071b      	lsls	r3, r3, #28
 800a802:	d501      	bpl.n	800a808 <_vfiprintf_r+0x3c>
 800a804:	692b      	ldr	r3, [r5, #16]
 800a806:	b9eb      	cbnz	r3, 800a844 <_vfiprintf_r+0x78>
 800a808:	4629      	mov	r1, r5
 800a80a:	4630      	mov	r0, r6
 800a80c:	f7ff fab2 	bl	8009d74 <__swsetup_r>
 800a810:	b1c0      	cbz	r0, 800a844 <_vfiprintf_r+0x78>
 800a812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a814:	07dc      	lsls	r4, r3, #31
 800a816:	d50e      	bpl.n	800a836 <_vfiprintf_r+0x6a>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	b01d      	add	sp, #116	; 0x74
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	4b7b      	ldr	r3, [pc, #492]	; (800aa10 <_vfiprintf_r+0x244>)
 800a824:	429d      	cmp	r5, r3
 800a826:	d101      	bne.n	800a82c <_vfiprintf_r+0x60>
 800a828:	68b5      	ldr	r5, [r6, #8]
 800a82a:	e7df      	b.n	800a7ec <_vfiprintf_r+0x20>
 800a82c:	4b79      	ldr	r3, [pc, #484]	; (800aa14 <_vfiprintf_r+0x248>)
 800a82e:	429d      	cmp	r5, r3
 800a830:	bf08      	it	eq
 800a832:	68f5      	ldreq	r5, [r6, #12]
 800a834:	e7da      	b.n	800a7ec <_vfiprintf_r+0x20>
 800a836:	89ab      	ldrh	r3, [r5, #12]
 800a838:	0598      	lsls	r0, r3, #22
 800a83a:	d4ed      	bmi.n	800a818 <_vfiprintf_r+0x4c>
 800a83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a83e:	f7ff fcf0 	bl	800a222 <__retarget_lock_release_recursive>
 800a842:	e7e9      	b.n	800a818 <_vfiprintf_r+0x4c>
 800a844:	2300      	movs	r3, #0
 800a846:	9309      	str	r3, [sp, #36]	; 0x24
 800a848:	2320      	movs	r3, #32
 800a84a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a84e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a852:	2330      	movs	r3, #48	; 0x30
 800a854:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa18 <_vfiprintf_r+0x24c>
 800a858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a85c:	f04f 0901 	mov.w	r9, #1
 800a860:	4623      	mov	r3, r4
 800a862:	469a      	mov	sl, r3
 800a864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a868:	b10a      	cbz	r2, 800a86e <_vfiprintf_r+0xa2>
 800a86a:	2a25      	cmp	r2, #37	; 0x25
 800a86c:	d1f9      	bne.n	800a862 <_vfiprintf_r+0x96>
 800a86e:	ebba 0b04 	subs.w	fp, sl, r4
 800a872:	d00b      	beq.n	800a88c <_vfiprintf_r+0xc0>
 800a874:	465b      	mov	r3, fp
 800a876:	4622      	mov	r2, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7ff ff93 	bl	800a7a6 <__sfputs_r>
 800a880:	3001      	adds	r0, #1
 800a882:	f000 80aa 	beq.w	800a9da <_vfiprintf_r+0x20e>
 800a886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a888:	445a      	add	r2, fp
 800a88a:	9209      	str	r2, [sp, #36]	; 0x24
 800a88c:	f89a 3000 	ldrb.w	r3, [sl]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 80a2 	beq.w	800a9da <_vfiprintf_r+0x20e>
 800a896:	2300      	movs	r3, #0
 800a898:	f04f 32ff 	mov.w	r2, #4294967295
 800a89c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8a0:	f10a 0a01 	add.w	sl, sl, #1
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ae:	4654      	mov	r4, sl
 800a8b0:	2205      	movs	r2, #5
 800a8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b6:	4858      	ldr	r0, [pc, #352]	; (800aa18 <_vfiprintf_r+0x24c>)
 800a8b8:	f7f5 fcaa 	bl	8000210 <memchr>
 800a8bc:	9a04      	ldr	r2, [sp, #16]
 800a8be:	b9d8      	cbnz	r0, 800a8f8 <_vfiprintf_r+0x12c>
 800a8c0:	06d1      	lsls	r1, r2, #27
 800a8c2:	bf44      	itt	mi
 800a8c4:	2320      	movmi	r3, #32
 800a8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ca:	0713      	lsls	r3, r2, #28
 800a8cc:	bf44      	itt	mi
 800a8ce:	232b      	movmi	r3, #43	; 0x2b
 800a8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8da:	d015      	beq.n	800a908 <_vfiprintf_r+0x13c>
 800a8dc:	9a07      	ldr	r2, [sp, #28]
 800a8de:	4654      	mov	r4, sl
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	f04f 0c0a 	mov.w	ip, #10
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ec:	3b30      	subs	r3, #48	; 0x30
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d94e      	bls.n	800a990 <_vfiprintf_r+0x1c4>
 800a8f2:	b1b0      	cbz	r0, 800a922 <_vfiprintf_r+0x156>
 800a8f4:	9207      	str	r2, [sp, #28]
 800a8f6:	e014      	b.n	800a922 <_vfiprintf_r+0x156>
 800a8f8:	eba0 0308 	sub.w	r3, r0, r8
 800a8fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a900:	4313      	orrs	r3, r2
 800a902:	9304      	str	r3, [sp, #16]
 800a904:	46a2      	mov	sl, r4
 800a906:	e7d2      	b.n	800a8ae <_vfiprintf_r+0xe2>
 800a908:	9b03      	ldr	r3, [sp, #12]
 800a90a:	1d19      	adds	r1, r3, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	9103      	str	r1, [sp, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	bfbb      	ittet	lt
 800a914:	425b      	neglt	r3, r3
 800a916:	f042 0202 	orrlt.w	r2, r2, #2
 800a91a:	9307      	strge	r3, [sp, #28]
 800a91c:	9307      	strlt	r3, [sp, #28]
 800a91e:	bfb8      	it	lt
 800a920:	9204      	strlt	r2, [sp, #16]
 800a922:	7823      	ldrb	r3, [r4, #0]
 800a924:	2b2e      	cmp	r3, #46	; 0x2e
 800a926:	d10c      	bne.n	800a942 <_vfiprintf_r+0x176>
 800a928:	7863      	ldrb	r3, [r4, #1]
 800a92a:	2b2a      	cmp	r3, #42	; 0x2a
 800a92c:	d135      	bne.n	800a99a <_vfiprintf_r+0x1ce>
 800a92e:	9b03      	ldr	r3, [sp, #12]
 800a930:	1d1a      	adds	r2, r3, #4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	9203      	str	r2, [sp, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	bfb8      	it	lt
 800a93a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a93e:	3402      	adds	r4, #2
 800a940:	9305      	str	r3, [sp, #20]
 800a942:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa28 <_vfiprintf_r+0x25c>
 800a946:	7821      	ldrb	r1, [r4, #0]
 800a948:	2203      	movs	r2, #3
 800a94a:	4650      	mov	r0, sl
 800a94c:	f7f5 fc60 	bl	8000210 <memchr>
 800a950:	b140      	cbz	r0, 800a964 <_vfiprintf_r+0x198>
 800a952:	2340      	movs	r3, #64	; 0x40
 800a954:	eba0 000a 	sub.w	r0, r0, sl
 800a958:	fa03 f000 	lsl.w	r0, r3, r0
 800a95c:	9b04      	ldr	r3, [sp, #16]
 800a95e:	4303      	orrs	r3, r0
 800a960:	3401      	adds	r4, #1
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a968:	482c      	ldr	r0, [pc, #176]	; (800aa1c <_vfiprintf_r+0x250>)
 800a96a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a96e:	2206      	movs	r2, #6
 800a970:	f7f5 fc4e 	bl	8000210 <memchr>
 800a974:	2800      	cmp	r0, #0
 800a976:	d03f      	beq.n	800a9f8 <_vfiprintf_r+0x22c>
 800a978:	4b29      	ldr	r3, [pc, #164]	; (800aa20 <_vfiprintf_r+0x254>)
 800a97a:	bb1b      	cbnz	r3, 800a9c4 <_vfiprintf_r+0x1f8>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	3307      	adds	r3, #7
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	3308      	adds	r3, #8
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98a:	443b      	add	r3, r7
 800a98c:	9309      	str	r3, [sp, #36]	; 0x24
 800a98e:	e767      	b.n	800a860 <_vfiprintf_r+0x94>
 800a990:	fb0c 3202 	mla	r2, ip, r2, r3
 800a994:	460c      	mov	r4, r1
 800a996:	2001      	movs	r0, #1
 800a998:	e7a5      	b.n	800a8e6 <_vfiprintf_r+0x11a>
 800a99a:	2300      	movs	r3, #0
 800a99c:	3401      	adds	r4, #1
 800a99e:	9305      	str	r3, [sp, #20]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f04f 0c0a 	mov.w	ip, #10
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ac:	3a30      	subs	r2, #48	; 0x30
 800a9ae:	2a09      	cmp	r2, #9
 800a9b0:	d903      	bls.n	800a9ba <_vfiprintf_r+0x1ee>
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0c5      	beq.n	800a942 <_vfiprintf_r+0x176>
 800a9b6:	9105      	str	r1, [sp, #20]
 800a9b8:	e7c3      	b.n	800a942 <_vfiprintf_r+0x176>
 800a9ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9be:	4604      	mov	r4, r0
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e7f0      	b.n	800a9a6 <_vfiprintf_r+0x1da>
 800a9c4:	ab03      	add	r3, sp, #12
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4b16      	ldr	r3, [pc, #88]	; (800aa24 <_vfiprintf_r+0x258>)
 800a9cc:	a904      	add	r1, sp, #16
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f3af 8000 	nop.w
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	1c78      	adds	r0, r7, #1
 800a9d8:	d1d6      	bne.n	800a988 <_vfiprintf_r+0x1bc>
 800a9da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9dc:	07d9      	lsls	r1, r3, #31
 800a9de:	d405      	bmi.n	800a9ec <_vfiprintf_r+0x220>
 800a9e0:	89ab      	ldrh	r3, [r5, #12]
 800a9e2:	059a      	lsls	r2, r3, #22
 800a9e4:	d402      	bmi.n	800a9ec <_vfiprintf_r+0x220>
 800a9e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9e8:	f7ff fc1b 	bl	800a222 <__retarget_lock_release_recursive>
 800a9ec:	89ab      	ldrh	r3, [r5, #12]
 800a9ee:	065b      	lsls	r3, r3, #25
 800a9f0:	f53f af12 	bmi.w	800a818 <_vfiprintf_r+0x4c>
 800a9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9f6:	e711      	b.n	800a81c <_vfiprintf_r+0x50>
 800a9f8:	ab03      	add	r3, sp, #12
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <_vfiprintf_r+0x258>)
 800aa00:	a904      	add	r1, sp, #16
 800aa02:	4630      	mov	r0, r6
 800aa04:	f000 f880 	bl	800ab08 <_printf_i>
 800aa08:	e7e4      	b.n	800a9d4 <_vfiprintf_r+0x208>
 800aa0a:	bf00      	nop
 800aa0c:	0800b760 	.word	0x0800b760
 800aa10:	0800b780 	.word	0x0800b780
 800aa14:	0800b740 	.word	0x0800b740
 800aa18:	0800b7a0 	.word	0x0800b7a0
 800aa1c:	0800b7aa 	.word	0x0800b7aa
 800aa20:	00000000 	.word	0x00000000
 800aa24:	0800a7a7 	.word	0x0800a7a7
 800aa28:	0800b7a6 	.word	0x0800b7a6

0800aa2c <_printf_common>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	4616      	mov	r6, r2
 800aa32:	4699      	mov	r9, r3
 800aa34:	688a      	ldr	r2, [r1, #8]
 800aa36:	690b      	ldr	r3, [r1, #16]
 800aa38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	bfb8      	it	lt
 800aa40:	4613      	movlt	r3, r2
 800aa42:	6033      	str	r3, [r6, #0]
 800aa44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa48:	4607      	mov	r7, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	b10a      	cbz	r2, 800aa52 <_printf_common+0x26>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	6033      	str	r3, [r6, #0]
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	0699      	lsls	r1, r3, #26
 800aa56:	bf42      	ittt	mi
 800aa58:	6833      	ldrmi	r3, [r6, #0]
 800aa5a:	3302      	addmi	r3, #2
 800aa5c:	6033      	strmi	r3, [r6, #0]
 800aa5e:	6825      	ldr	r5, [r4, #0]
 800aa60:	f015 0506 	ands.w	r5, r5, #6
 800aa64:	d106      	bne.n	800aa74 <_printf_common+0x48>
 800aa66:	f104 0a19 	add.w	sl, r4, #25
 800aa6a:	68e3      	ldr	r3, [r4, #12]
 800aa6c:	6832      	ldr	r2, [r6, #0]
 800aa6e:	1a9b      	subs	r3, r3, r2
 800aa70:	42ab      	cmp	r3, r5
 800aa72:	dc26      	bgt.n	800aac2 <_printf_common+0x96>
 800aa74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa78:	1e13      	subs	r3, r2, #0
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	bf18      	it	ne
 800aa7e:	2301      	movne	r3, #1
 800aa80:	0692      	lsls	r2, r2, #26
 800aa82:	d42b      	bmi.n	800aadc <_printf_common+0xb0>
 800aa84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa88:	4649      	mov	r1, r9
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	47c0      	blx	r8
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d01e      	beq.n	800aad0 <_printf_common+0xa4>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	68e5      	ldr	r5, [r4, #12]
 800aa96:	6832      	ldr	r2, [r6, #0]
 800aa98:	f003 0306 	and.w	r3, r3, #6
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	bf08      	it	eq
 800aaa0:	1aad      	subeq	r5, r5, r2
 800aaa2:	68a3      	ldr	r3, [r4, #8]
 800aaa4:	6922      	ldr	r2, [r4, #16]
 800aaa6:	bf0c      	ite	eq
 800aaa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaac:	2500      	movne	r5, #0
 800aaae:	4293      	cmp	r3, r2
 800aab0:	bfc4      	itt	gt
 800aab2:	1a9b      	subgt	r3, r3, r2
 800aab4:	18ed      	addgt	r5, r5, r3
 800aab6:	2600      	movs	r6, #0
 800aab8:	341a      	adds	r4, #26
 800aaba:	42b5      	cmp	r5, r6
 800aabc:	d11a      	bne.n	800aaf4 <_printf_common+0xc8>
 800aabe:	2000      	movs	r0, #0
 800aac0:	e008      	b.n	800aad4 <_printf_common+0xa8>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4652      	mov	r2, sl
 800aac6:	4649      	mov	r1, r9
 800aac8:	4638      	mov	r0, r7
 800aaca:	47c0      	blx	r8
 800aacc:	3001      	adds	r0, #1
 800aace:	d103      	bne.n	800aad8 <_printf_common+0xac>
 800aad0:	f04f 30ff 	mov.w	r0, #4294967295
 800aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad8:	3501      	adds	r5, #1
 800aada:	e7c6      	b.n	800aa6a <_printf_common+0x3e>
 800aadc:	18e1      	adds	r1, r4, r3
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	2030      	movs	r0, #48	; 0x30
 800aae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aae6:	4422      	add	r2, r4
 800aae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	e7c7      	b.n	800aa84 <_printf_common+0x58>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4638      	mov	r0, r7
 800aafc:	47c0      	blx	r8
 800aafe:	3001      	adds	r0, #1
 800ab00:	d0e6      	beq.n	800aad0 <_printf_common+0xa4>
 800ab02:	3601      	adds	r6, #1
 800ab04:	e7d9      	b.n	800aaba <_printf_common+0x8e>
	...

0800ab08 <_printf_i>:
 800ab08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	7e0f      	ldrb	r7, [r1, #24]
 800ab0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab10:	2f78      	cmp	r7, #120	; 0x78
 800ab12:	4691      	mov	r9, r2
 800ab14:	4680      	mov	r8, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	469a      	mov	sl, r3
 800ab1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab1e:	d807      	bhi.n	800ab30 <_printf_i+0x28>
 800ab20:	2f62      	cmp	r7, #98	; 0x62
 800ab22:	d80a      	bhi.n	800ab3a <_printf_i+0x32>
 800ab24:	2f00      	cmp	r7, #0
 800ab26:	f000 80d8 	beq.w	800acda <_printf_i+0x1d2>
 800ab2a:	2f58      	cmp	r7, #88	; 0x58
 800ab2c:	f000 80a3 	beq.w	800ac76 <_printf_i+0x16e>
 800ab30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab38:	e03a      	b.n	800abb0 <_printf_i+0xa8>
 800ab3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab3e:	2b15      	cmp	r3, #21
 800ab40:	d8f6      	bhi.n	800ab30 <_printf_i+0x28>
 800ab42:	a101      	add	r1, pc, #4	; (adr r1, 800ab48 <_printf_i+0x40>)
 800ab44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab48:	0800aba1 	.word	0x0800aba1
 800ab4c:	0800abb5 	.word	0x0800abb5
 800ab50:	0800ab31 	.word	0x0800ab31
 800ab54:	0800ab31 	.word	0x0800ab31
 800ab58:	0800ab31 	.word	0x0800ab31
 800ab5c:	0800ab31 	.word	0x0800ab31
 800ab60:	0800abb5 	.word	0x0800abb5
 800ab64:	0800ab31 	.word	0x0800ab31
 800ab68:	0800ab31 	.word	0x0800ab31
 800ab6c:	0800ab31 	.word	0x0800ab31
 800ab70:	0800ab31 	.word	0x0800ab31
 800ab74:	0800acc1 	.word	0x0800acc1
 800ab78:	0800abe5 	.word	0x0800abe5
 800ab7c:	0800aca3 	.word	0x0800aca3
 800ab80:	0800ab31 	.word	0x0800ab31
 800ab84:	0800ab31 	.word	0x0800ab31
 800ab88:	0800ace3 	.word	0x0800ace3
 800ab8c:	0800ab31 	.word	0x0800ab31
 800ab90:	0800abe5 	.word	0x0800abe5
 800ab94:	0800ab31 	.word	0x0800ab31
 800ab98:	0800ab31 	.word	0x0800ab31
 800ab9c:	0800acab 	.word	0x0800acab
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	1d1a      	adds	r2, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	602a      	str	r2, [r5, #0]
 800aba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abb0:	2301      	movs	r3, #1
 800abb2:	e0a3      	b.n	800acfc <_printf_i+0x1f4>
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	6829      	ldr	r1, [r5, #0]
 800abb8:	0606      	lsls	r6, r0, #24
 800abba:	f101 0304 	add.w	r3, r1, #4
 800abbe:	d50a      	bpl.n	800abd6 <_printf_i+0xce>
 800abc0:	680e      	ldr	r6, [r1, #0]
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	2e00      	cmp	r6, #0
 800abc6:	da03      	bge.n	800abd0 <_printf_i+0xc8>
 800abc8:	232d      	movs	r3, #45	; 0x2d
 800abca:	4276      	negs	r6, r6
 800abcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd0:	485e      	ldr	r0, [pc, #376]	; (800ad4c <_printf_i+0x244>)
 800abd2:	230a      	movs	r3, #10
 800abd4:	e019      	b.n	800ac0a <_printf_i+0x102>
 800abd6:	680e      	ldr	r6, [r1, #0]
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abde:	bf18      	it	ne
 800abe0:	b236      	sxthne	r6, r6
 800abe2:	e7ef      	b.n	800abc4 <_printf_i+0xbc>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	6820      	ldr	r0, [r4, #0]
 800abe8:	1d19      	adds	r1, r3, #4
 800abea:	6029      	str	r1, [r5, #0]
 800abec:	0601      	lsls	r1, r0, #24
 800abee:	d501      	bpl.n	800abf4 <_printf_i+0xec>
 800abf0:	681e      	ldr	r6, [r3, #0]
 800abf2:	e002      	b.n	800abfa <_printf_i+0xf2>
 800abf4:	0646      	lsls	r6, r0, #25
 800abf6:	d5fb      	bpl.n	800abf0 <_printf_i+0xe8>
 800abf8:	881e      	ldrh	r6, [r3, #0]
 800abfa:	4854      	ldr	r0, [pc, #336]	; (800ad4c <_printf_i+0x244>)
 800abfc:	2f6f      	cmp	r7, #111	; 0x6f
 800abfe:	bf0c      	ite	eq
 800ac00:	2308      	moveq	r3, #8
 800ac02:	230a      	movne	r3, #10
 800ac04:	2100      	movs	r1, #0
 800ac06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac0a:	6865      	ldr	r5, [r4, #4]
 800ac0c:	60a5      	str	r5, [r4, #8]
 800ac0e:	2d00      	cmp	r5, #0
 800ac10:	bfa2      	ittt	ge
 800ac12:	6821      	ldrge	r1, [r4, #0]
 800ac14:	f021 0104 	bicge.w	r1, r1, #4
 800ac18:	6021      	strge	r1, [r4, #0]
 800ac1a:	b90e      	cbnz	r6, 800ac20 <_printf_i+0x118>
 800ac1c:	2d00      	cmp	r5, #0
 800ac1e:	d04d      	beq.n	800acbc <_printf_i+0x1b4>
 800ac20:	4615      	mov	r5, r2
 800ac22:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac26:	fb03 6711 	mls	r7, r3, r1, r6
 800ac2a:	5dc7      	ldrb	r7, [r0, r7]
 800ac2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac30:	4637      	mov	r7, r6
 800ac32:	42bb      	cmp	r3, r7
 800ac34:	460e      	mov	r6, r1
 800ac36:	d9f4      	bls.n	800ac22 <_printf_i+0x11a>
 800ac38:	2b08      	cmp	r3, #8
 800ac3a:	d10b      	bne.n	800ac54 <_printf_i+0x14c>
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	07de      	lsls	r6, r3, #31
 800ac40:	d508      	bpl.n	800ac54 <_printf_i+0x14c>
 800ac42:	6923      	ldr	r3, [r4, #16]
 800ac44:	6861      	ldr	r1, [r4, #4]
 800ac46:	4299      	cmp	r1, r3
 800ac48:	bfde      	ittt	le
 800ac4a:	2330      	movle	r3, #48	; 0x30
 800ac4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac54:	1b52      	subs	r2, r2, r5
 800ac56:	6122      	str	r2, [r4, #16]
 800ac58:	f8cd a000 	str.w	sl, [sp]
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	aa03      	add	r2, sp, #12
 800ac60:	4621      	mov	r1, r4
 800ac62:	4640      	mov	r0, r8
 800ac64:	f7ff fee2 	bl	800aa2c <_printf_common>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d14c      	bne.n	800ad06 <_printf_i+0x1fe>
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	b004      	add	sp, #16
 800ac72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac76:	4835      	ldr	r0, [pc, #212]	; (800ad4c <_printf_i+0x244>)
 800ac78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac7c:	6829      	ldr	r1, [r5, #0]
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac84:	6029      	str	r1, [r5, #0]
 800ac86:	061d      	lsls	r5, r3, #24
 800ac88:	d514      	bpl.n	800acb4 <_printf_i+0x1ac>
 800ac8a:	07df      	lsls	r7, r3, #31
 800ac8c:	bf44      	itt	mi
 800ac8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac92:	6023      	strmi	r3, [r4, #0]
 800ac94:	b91e      	cbnz	r6, 800ac9e <_printf_i+0x196>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	f023 0320 	bic.w	r3, r3, #32
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	2310      	movs	r3, #16
 800aca0:	e7b0      	b.n	800ac04 <_printf_i+0xfc>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	f043 0320 	orr.w	r3, r3, #32
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	2378      	movs	r3, #120	; 0x78
 800acac:	4828      	ldr	r0, [pc, #160]	; (800ad50 <_printf_i+0x248>)
 800acae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acb2:	e7e3      	b.n	800ac7c <_printf_i+0x174>
 800acb4:	0659      	lsls	r1, r3, #25
 800acb6:	bf48      	it	mi
 800acb8:	b2b6      	uxthmi	r6, r6
 800acba:	e7e6      	b.n	800ac8a <_printf_i+0x182>
 800acbc:	4615      	mov	r5, r2
 800acbe:	e7bb      	b.n	800ac38 <_printf_i+0x130>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	6826      	ldr	r6, [r4, #0]
 800acc4:	6961      	ldr	r1, [r4, #20]
 800acc6:	1d18      	adds	r0, r3, #4
 800acc8:	6028      	str	r0, [r5, #0]
 800acca:	0635      	lsls	r5, r6, #24
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	d501      	bpl.n	800acd4 <_printf_i+0x1cc>
 800acd0:	6019      	str	r1, [r3, #0]
 800acd2:	e002      	b.n	800acda <_printf_i+0x1d2>
 800acd4:	0670      	lsls	r0, r6, #25
 800acd6:	d5fb      	bpl.n	800acd0 <_printf_i+0x1c8>
 800acd8:	8019      	strh	r1, [r3, #0]
 800acda:	2300      	movs	r3, #0
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	4615      	mov	r5, r2
 800ace0:	e7ba      	b.n	800ac58 <_printf_i+0x150>
 800ace2:	682b      	ldr	r3, [r5, #0]
 800ace4:	1d1a      	adds	r2, r3, #4
 800ace6:	602a      	str	r2, [r5, #0]
 800ace8:	681d      	ldr	r5, [r3, #0]
 800acea:	6862      	ldr	r2, [r4, #4]
 800acec:	2100      	movs	r1, #0
 800acee:	4628      	mov	r0, r5
 800acf0:	f7f5 fa8e 	bl	8000210 <memchr>
 800acf4:	b108      	cbz	r0, 800acfa <_printf_i+0x1f2>
 800acf6:	1b40      	subs	r0, r0, r5
 800acf8:	6060      	str	r0, [r4, #4]
 800acfa:	6863      	ldr	r3, [r4, #4]
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	2300      	movs	r3, #0
 800ad00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad04:	e7a8      	b.n	800ac58 <_printf_i+0x150>
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	47d0      	blx	sl
 800ad10:	3001      	adds	r0, #1
 800ad12:	d0ab      	beq.n	800ac6c <_printf_i+0x164>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	079b      	lsls	r3, r3, #30
 800ad18:	d413      	bmi.n	800ad42 <_printf_i+0x23a>
 800ad1a:	68e0      	ldr	r0, [r4, #12]
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	4298      	cmp	r0, r3
 800ad20:	bfb8      	it	lt
 800ad22:	4618      	movlt	r0, r3
 800ad24:	e7a4      	b.n	800ac70 <_printf_i+0x168>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4632      	mov	r2, r6
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	47d0      	blx	sl
 800ad30:	3001      	adds	r0, #1
 800ad32:	d09b      	beq.n	800ac6c <_printf_i+0x164>
 800ad34:	3501      	adds	r5, #1
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	9903      	ldr	r1, [sp, #12]
 800ad3a:	1a5b      	subs	r3, r3, r1
 800ad3c:	42ab      	cmp	r3, r5
 800ad3e:	dcf2      	bgt.n	800ad26 <_printf_i+0x21e>
 800ad40:	e7eb      	b.n	800ad1a <_printf_i+0x212>
 800ad42:	2500      	movs	r5, #0
 800ad44:	f104 0619 	add.w	r6, r4, #25
 800ad48:	e7f5      	b.n	800ad36 <_printf_i+0x22e>
 800ad4a:	bf00      	nop
 800ad4c:	0800b7b1 	.word	0x0800b7b1
 800ad50:	0800b7c2 	.word	0x0800b7c2

0800ad54 <_sbrk_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4d06      	ldr	r5, [pc, #24]	; (800ad70 <_sbrk_r+0x1c>)
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	602b      	str	r3, [r5, #0]
 800ad60:	f7f7 fab6 	bl	80022d0 <_sbrk>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d102      	bne.n	800ad6e <_sbrk_r+0x1a>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	b103      	cbz	r3, 800ad6e <_sbrk_r+0x1a>
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	bd38      	pop	{r3, r4, r5, pc}
 800ad70:	20000f6c 	.word	0x20000f6c

0800ad74 <__sread>:
 800ad74:	b510      	push	{r4, lr}
 800ad76:	460c      	mov	r4, r1
 800ad78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7c:	f000 f8f2 	bl	800af64 <_read_r>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	bfab      	itete	ge
 800ad84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad86:	89a3      	ldrhlt	r3, [r4, #12]
 800ad88:	181b      	addge	r3, r3, r0
 800ad8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad8e:	bfac      	ite	ge
 800ad90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad92:	81a3      	strhlt	r3, [r4, #12]
 800ad94:	bd10      	pop	{r4, pc}

0800ad96 <__swrite>:
 800ad96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9a:	461f      	mov	r7, r3
 800ad9c:	898b      	ldrh	r3, [r1, #12]
 800ad9e:	05db      	lsls	r3, r3, #23
 800ada0:	4605      	mov	r5, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	4616      	mov	r6, r2
 800ada6:	d505      	bpl.n	800adb4 <__swrite+0x1e>
 800ada8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adac:	2302      	movs	r3, #2
 800adae:	2200      	movs	r2, #0
 800adb0:	f000 f870 	bl	800ae94 <_lseek_r>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adbe:	81a3      	strh	r3, [r4, #12]
 800adc0:	4632      	mov	r2, r6
 800adc2:	463b      	mov	r3, r7
 800adc4:	4628      	mov	r0, r5
 800adc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adca:	f000 b817 	b.w	800adfc <_write_r>

0800adce <__sseek>:
 800adce:	b510      	push	{r4, lr}
 800add0:	460c      	mov	r4, r1
 800add2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add6:	f000 f85d 	bl	800ae94 <_lseek_r>
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	bf15      	itete	ne
 800ade0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ade2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ade6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adea:	81a3      	strheq	r3, [r4, #12]
 800adec:	bf18      	it	ne
 800adee:	81a3      	strhne	r3, [r4, #12]
 800adf0:	bd10      	pop	{r4, pc}

0800adf2 <__sclose>:
 800adf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf6:	f000 b81b 	b.w	800ae30 <_close_r>
	...

0800adfc <_write_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d07      	ldr	r5, [pc, #28]	; (800ae1c <_write_r+0x20>)
 800ae00:	4604      	mov	r4, r0
 800ae02:	4608      	mov	r0, r1
 800ae04:	4611      	mov	r1, r2
 800ae06:	2200      	movs	r2, #0
 800ae08:	602a      	str	r2, [r5, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f7f7 fa0f 	bl	800222e <_write>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_write_r+0x1e>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_write_r+0x1e>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20000f6c 	.word	0x20000f6c

0800ae20 <abort>:
 800ae20:	b508      	push	{r3, lr}
 800ae22:	2006      	movs	r0, #6
 800ae24:	f000 f8d8 	bl	800afd8 <raise>
 800ae28:	2001      	movs	r0, #1
 800ae2a:	f7f7 f9d9 	bl	80021e0 <_exit>
	...

0800ae30 <_close_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	4d06      	ldr	r5, [pc, #24]	; (800ae4c <_close_r+0x1c>)
 800ae34:	2300      	movs	r3, #0
 800ae36:	4604      	mov	r4, r0
 800ae38:	4608      	mov	r0, r1
 800ae3a:	602b      	str	r3, [r5, #0]
 800ae3c:	f7f7 fa13 	bl	8002266 <_close>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d102      	bne.n	800ae4a <_close_r+0x1a>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	b103      	cbz	r3, 800ae4a <_close_r+0x1a>
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	20000f6c 	.word	0x20000f6c

0800ae50 <_fstat_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	4d07      	ldr	r5, [pc, #28]	; (800ae70 <_fstat_r+0x20>)
 800ae54:	2300      	movs	r3, #0
 800ae56:	4604      	mov	r4, r0
 800ae58:	4608      	mov	r0, r1
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	602b      	str	r3, [r5, #0]
 800ae5e:	f7f7 fa0e 	bl	800227e <_fstat>
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	d102      	bne.n	800ae6c <_fstat_r+0x1c>
 800ae66:	682b      	ldr	r3, [r5, #0]
 800ae68:	b103      	cbz	r3, 800ae6c <_fstat_r+0x1c>
 800ae6a:	6023      	str	r3, [r4, #0]
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000f6c 	.word	0x20000f6c

0800ae74 <_isatty_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4d06      	ldr	r5, [pc, #24]	; (800ae90 <_isatty_r+0x1c>)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	602b      	str	r3, [r5, #0]
 800ae80:	f7f7 fa0d 	bl	800229e <_isatty>
 800ae84:	1c43      	adds	r3, r0, #1
 800ae86:	d102      	bne.n	800ae8e <_isatty_r+0x1a>
 800ae88:	682b      	ldr	r3, [r5, #0]
 800ae8a:	b103      	cbz	r3, 800ae8e <_isatty_r+0x1a>
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	20000f6c 	.word	0x20000f6c

0800ae94 <_lseek_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d07      	ldr	r5, [pc, #28]	; (800aeb4 <_lseek_r+0x20>)
 800ae98:	4604      	mov	r4, r0
 800ae9a:	4608      	mov	r0, r1
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	2200      	movs	r2, #0
 800aea0:	602a      	str	r2, [r5, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	f7f7 fa06 	bl	80022b4 <_lseek>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_lseek_r+0x1e>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_lseek_r+0x1e>
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	20000f6c 	.word	0x20000f6c

0800aeb8 <memmove>:
 800aeb8:	4288      	cmp	r0, r1
 800aeba:	b510      	push	{r4, lr}
 800aebc:	eb01 0402 	add.w	r4, r1, r2
 800aec0:	d902      	bls.n	800aec8 <memmove+0x10>
 800aec2:	4284      	cmp	r4, r0
 800aec4:	4623      	mov	r3, r4
 800aec6:	d807      	bhi.n	800aed8 <memmove+0x20>
 800aec8:	1e43      	subs	r3, r0, #1
 800aeca:	42a1      	cmp	r1, r4
 800aecc:	d008      	beq.n	800aee0 <memmove+0x28>
 800aece:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aed6:	e7f8      	b.n	800aeca <memmove+0x12>
 800aed8:	4402      	add	r2, r0
 800aeda:	4601      	mov	r1, r0
 800aedc:	428a      	cmp	r2, r1
 800aede:	d100      	bne.n	800aee2 <memmove+0x2a>
 800aee0:	bd10      	pop	{r4, pc}
 800aee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aeea:	e7f7      	b.n	800aedc <memmove+0x24>

0800aeec <__malloc_lock>:
 800aeec:	4801      	ldr	r0, [pc, #4]	; (800aef4 <__malloc_lock+0x8>)
 800aeee:	f7ff b997 	b.w	800a220 <__retarget_lock_acquire_recursive>
 800aef2:	bf00      	nop
 800aef4:	20000f60 	.word	0x20000f60

0800aef8 <__malloc_unlock>:
 800aef8:	4801      	ldr	r0, [pc, #4]	; (800af00 <__malloc_unlock+0x8>)
 800aefa:	f7ff b992 	b.w	800a222 <__retarget_lock_release_recursive>
 800aefe:	bf00      	nop
 800af00:	20000f60 	.word	0x20000f60

0800af04 <_realloc_r>:
 800af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af08:	4680      	mov	r8, r0
 800af0a:	4614      	mov	r4, r2
 800af0c:	460e      	mov	r6, r1
 800af0e:	b921      	cbnz	r1, 800af1a <_realloc_r+0x16>
 800af10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af14:	4611      	mov	r1, r2
 800af16:	f7ff ba5f 	b.w	800a3d8 <_malloc_r>
 800af1a:	b92a      	cbnz	r2, 800af28 <_realloc_r+0x24>
 800af1c:	f7ff f9f0 	bl	800a300 <_free_r>
 800af20:	4625      	mov	r5, r4
 800af22:	4628      	mov	r0, r5
 800af24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af28:	f000 f872 	bl	800b010 <_malloc_usable_size_r>
 800af2c:	4284      	cmp	r4, r0
 800af2e:	4607      	mov	r7, r0
 800af30:	d802      	bhi.n	800af38 <_realloc_r+0x34>
 800af32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af36:	d812      	bhi.n	800af5e <_realloc_r+0x5a>
 800af38:	4621      	mov	r1, r4
 800af3a:	4640      	mov	r0, r8
 800af3c:	f7ff fa4c 	bl	800a3d8 <_malloc_r>
 800af40:	4605      	mov	r5, r0
 800af42:	2800      	cmp	r0, #0
 800af44:	d0ed      	beq.n	800af22 <_realloc_r+0x1e>
 800af46:	42bc      	cmp	r4, r7
 800af48:	4622      	mov	r2, r4
 800af4a:	4631      	mov	r1, r6
 800af4c:	bf28      	it	cs
 800af4e:	463a      	movcs	r2, r7
 800af50:	f7fe fd74 	bl	8009a3c <memcpy>
 800af54:	4631      	mov	r1, r6
 800af56:	4640      	mov	r0, r8
 800af58:	f7ff f9d2 	bl	800a300 <_free_r>
 800af5c:	e7e1      	b.n	800af22 <_realloc_r+0x1e>
 800af5e:	4635      	mov	r5, r6
 800af60:	e7df      	b.n	800af22 <_realloc_r+0x1e>
	...

0800af64 <_read_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d07      	ldr	r5, [pc, #28]	; (800af84 <_read_r+0x20>)
 800af68:	4604      	mov	r4, r0
 800af6a:	4608      	mov	r0, r1
 800af6c:	4611      	mov	r1, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	602a      	str	r2, [r5, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	f7f7 f93e 	bl	80021f4 <_read>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_read_r+0x1e>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_read_r+0x1e>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	20000f6c 	.word	0x20000f6c

0800af88 <_raise_r>:
 800af88:	291f      	cmp	r1, #31
 800af8a:	b538      	push	{r3, r4, r5, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	460d      	mov	r5, r1
 800af90:	d904      	bls.n	800af9c <_raise_r+0x14>
 800af92:	2316      	movs	r3, #22
 800af94:	6003      	str	r3, [r0, #0]
 800af96:	f04f 30ff 	mov.w	r0, #4294967295
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af9e:	b112      	cbz	r2, 800afa6 <_raise_r+0x1e>
 800afa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afa4:	b94b      	cbnz	r3, 800afba <_raise_r+0x32>
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f830 	bl	800b00c <_getpid_r>
 800afac:	462a      	mov	r2, r5
 800afae:	4601      	mov	r1, r0
 800afb0:	4620      	mov	r0, r4
 800afb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afb6:	f000 b817 	b.w	800afe8 <_kill_r>
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d00a      	beq.n	800afd4 <_raise_r+0x4c>
 800afbe:	1c59      	adds	r1, r3, #1
 800afc0:	d103      	bne.n	800afca <_raise_r+0x42>
 800afc2:	2316      	movs	r3, #22
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	2001      	movs	r0, #1
 800afc8:	e7e7      	b.n	800af9a <_raise_r+0x12>
 800afca:	2400      	movs	r4, #0
 800afcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afd0:	4628      	mov	r0, r5
 800afd2:	4798      	blx	r3
 800afd4:	2000      	movs	r0, #0
 800afd6:	e7e0      	b.n	800af9a <_raise_r+0x12>

0800afd8 <raise>:
 800afd8:	4b02      	ldr	r3, [pc, #8]	; (800afe4 <raise+0xc>)
 800afda:	4601      	mov	r1, r0
 800afdc:	6818      	ldr	r0, [r3, #0]
 800afde:	f7ff bfd3 	b.w	800af88 <_raise_r>
 800afe2:	bf00      	nop
 800afe4:	2000000c 	.word	0x2000000c

0800afe8 <_kill_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	; (800b008 <_kill_r+0x20>)
 800afec:	2300      	movs	r3, #0
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	4611      	mov	r1, r2
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f7f7 f8e3 	bl	80021c0 <_kill>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d102      	bne.n	800b004 <_kill_r+0x1c>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	b103      	cbz	r3, 800b004 <_kill_r+0x1c>
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	bf00      	nop
 800b008:	20000f6c 	.word	0x20000f6c

0800b00c <_getpid_r>:
 800b00c:	f7f7 b8d0 	b.w	80021b0 <_getpid>

0800b010 <_malloc_usable_size_r>:
 800b010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b014:	1f18      	subs	r0, r3, #4
 800b016:	2b00      	cmp	r3, #0
 800b018:	bfbc      	itt	lt
 800b01a:	580b      	ldrlt	r3, [r1, r0]
 800b01c:	18c0      	addlt	r0, r0, r3
 800b01e:	4770      	bx	lr

0800b020 <_init>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	bf00      	nop
 800b024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b026:	bc08      	pop	{r3}
 800b028:	469e      	mov	lr, r3
 800b02a:	4770      	bx	lr

0800b02c <_fini>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	bf00      	nop
 800b030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b032:	bc08      	pop	{r3}
 800b034:	469e      	mov	lr, r3
 800b036:	4770      	bx	lr
