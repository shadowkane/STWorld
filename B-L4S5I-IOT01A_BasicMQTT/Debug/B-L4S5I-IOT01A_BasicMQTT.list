
B-L4S5I-IOT01A_BasicMQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ecc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001338  08013090  08013090  00023090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143c8  080143c8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080143c8  080143c8  000243c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143d0  080143d0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080143d0  080143d0  000243d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080143d4  080143d4  000243d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080143d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001540  200001f0  080145c8  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001730  080145c8  00031730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028412  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005263  00000000  00000000  00058632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002020  00000000  00000000  0005d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb0  00000000  00000000  0005f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030ea6  00000000  00000000  00061768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ef0  00000000  00000000  0009260e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123311  00000000  00000000  000ba4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dd80f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f40  00000000  00000000  001dd860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013074 	.word	0x08013074

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	08013074 	.word	0x08013074

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <TimerCountdownMS>:
#include "main.h"
#include "paho_timer.h"  


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  timer->init_tick = HAL_GetTick();
 8001052:	f004 fb9f 	bl	8005794 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	601a      	str	r2, [r3, #0]
  timer->timeout_ms = timeout_ms;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	605a      	str	r2, [r3, #4]
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  TimerCountdownMS(timer, timeout * 1000);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	4619      	mov	r1, r3
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffe1 	bl	8001048 <TimerCountdownMS>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <TimerLeftMS>:


int TimerLeftMS(Timer* timer)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  uint32_t cur_tick = HAL_GetTick();  // The HAL tick period is 1 millisecond.
 800109a:	f004 fb7b 	bl	8005794 <HAL_GetTick>
 800109e:	60b8      	str	r0, [r7, #8]
  if (cur_tick < timer->init_tick)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d20a      	bcs.n	80010c0 <TimerLeftMS+0x32>
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", timer->init_tick, cur_tick);
    timer->timeout_ms -= 0xFFFFFFFF - timer->init_tick;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]
    timer->init_tick = 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
  }
  ret = timer->timeout_ms - (cur_tick - timer->init_tick);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6819      	ldr	r1, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1acb      	subs	r3, r1, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]

  return (ret >= 0) ? ret : 0;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <TimerIsExpired>:


char TimerIsExpired(Timer* timer)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  return (TimerLeftMS(timer) > 0) ? 0 : 1;
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffd1 	bl	800108e <TimerLeftMS>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bfd4      	ite	le
 80010f2:	2301      	movle	r3, #1
 80010f4:	2300      	movgt	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <TimerInit>:


void TimerInit(Timer* timer)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  timer->init_tick = 0;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
  timer->timeout_ms = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <net_sock_create_wifi>:
int net_sock_destroy_tcp_wifi(net_sockhnd_t sockhnd);

/* Functions Definition ------------------------------------------------------*/

int net_sock_create_wifi(net_hnd_t nethnd, net_sockhnd_t * sockhnd, net_proto_t proto)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	4613      	mov	r3, r2
 800112c:	71fb      	strb	r3, [r7, #7]
  int rc = NET_ERR;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	61fb      	str	r3, [r7, #28]
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	61bb      	str	r3, [r7, #24]
  net_sock_ctxt_t *sock = NULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 800113c:	2034      	movs	r0, #52	; 0x34
 800113e:	f00d f95d 	bl	800e3fc <malloc>
 8001142:	4603      	mov	r3, r0
 8001144:	617b      	str	r3, [r7, #20]
  if (sock == NULL)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10b      	bne.n	8001164 <net_sock_create_wifi+0x44>
  {
    msg_error("net_sock_create allocation failed.\n");
 800114c:	2259      	movs	r2, #89	; 0x59
 800114e:	492b      	ldr	r1, [pc, #172]	; (80011fc <net_sock_create_wifi+0xdc>)
 8001150:	482b      	ldr	r0, [pc, #172]	; (8001200 <net_sock_create_wifi+0xe0>)
 8001152:	f00e f8e3 	bl	800f31c <iprintf>
 8001156:	482b      	ldr	r0, [pc, #172]	; (8001204 <net_sock_create_wifi+0xe4>)
 8001158:	f00e f97c 	bl	800f454 <puts>
    rc = NET_ERR;
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	e046      	b.n	80011f2 <net_sock_create_wifi+0xd2>
  }
  else
  {
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 8001164:	2234      	movs	r2, #52	; 0x34
 8001166:	2100      	movs	r1, #0
 8001168:	6978      	ldr	r0, [r7, #20]
 800116a:	f00d f975 	bl	800e458 <memset>
    sock->net = ctxt;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]
    sock->next = ctxt->sock_list;
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	605a      	str	r2, [r3, #4]
    sock->methods.open      = (net_sock_open_wifi);
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <net_sock_create_wifi+0xe8>)
 8001180:	609a      	str	r2, [r3, #8]
    switch(proto)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d002      	beq.n	800118e <net_sock_create_wifi+0x6e>
 8001188:	2b03      	cmp	r3, #3
 800118a:	d007      	beq.n	800119c <net_sock_create_wifi+0x7c>
 800118c:	e00d      	b.n	80011aa <net_sock_create_wifi+0x8a>
    {
      case NET_PROTO_TCP:
        sock->methods.recv      = (net_sock_recv_tcp_wifi);
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <net_sock_create_wifi+0xec>)
 8001192:	60da      	str	r2, [r3, #12]
        sock->methods.send      = (net_sock_send_tcp_wifi);
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <net_sock_create_wifi+0xf0>)
 8001198:	615a      	str	r2, [r3, #20]
        break;
 800119a:	e00c      	b.n	80011b6 <net_sock_create_wifi+0x96>
      case NET_PROTO_UDP:
        sock->methods.recvfrom  = (net_sock_recvfrom_udp_wifi);
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <net_sock_create_wifi+0xf4>)
 80011a0:	611a      	str	r2, [r3, #16]
        sock->methods.sendto    = (net_sock_sendto_udp_wifi);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <net_sock_create_wifi+0xf8>)
 80011a6:	619a      	str	r2, [r3, #24]
        break;
 80011a8:	e005      	b.n	80011b6 <net_sock_create_wifi+0x96>
      default:
        free(sock);
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f00d f92e 	bl	800e40c <free>
        return NET_PARAM;
 80011b0:	f06f 0301 	mvn.w	r3, #1
 80011b4:	e01e      	b.n	80011f4 <net_sock_create_wifi+0xd4>
    }
    sock->methods.close     = (net_sock_close_tcp_wifi);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	4a18      	ldr	r2, [pc, #96]	; (800121c <net_sock_create_wifi+0xfc>)
 80011ba:	61da      	str	r2, [r3, #28]
    sock->methods.destroy   = (net_sock_destroy_tcp_wifi);
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <net_sock_create_wifi+0x100>)
 80011c0:	621a      	str	r2, [r3, #32]
    sock->proto             = proto;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sock->blocking          = NET_DEFAULT_BLOCKING;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011d8:	84da      	strh	r2, [r3, #38]	; 0x26
    sock->write_timeout     = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011e0:	851a      	strh	r2, [r3, #40]	; 0x28
    ctxt->sock_list         = sock; /* Insert at the head of the list */
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	605a      	str	r2, [r3, #4]
    *sockhnd = (net_sockhnd_t) sock;
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]

    rc = NET_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  }
  
  return rc;
 80011f2:	69fb      	ldr	r3, [r7, #28]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08013d8c 	.word	0x08013d8c
 8001200:	08013090 	.word	0x08013090
 8001204:	080130a0 	.word	0x080130a0
 8001208:	08001225 	.word	0x08001225
 800120c:	0800138d 	.word	0x0800138d
 8001210:	080016b5 	.word	0x080016b5
 8001214:	08001501 	.word	0x08001501
 8001218:	0800178d 	.word	0x0800178d
 800121c:	080018b1 	.word	0x080018b1
 8001220:	080018f9 	.word	0x080018f9

08001224 <net_sock_open_wifi>:


int net_sock_open_wifi(net_sockhnd_t sockhnd, const char * hostname, int remoteport, int localport)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b08f      	sub	sp, #60	; 0x3c
 8001228:	af02      	add	r7, sp, #8
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  int rc = NET_ERR;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	61fb      	str	r3, [r7, #28]
  uint8_t ip_addr[4] = { 0, 0, 0, 0 };
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  WIFI_Protocol_t proto;
  
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f04f 32ff 	mov.w	r2, #4294967295
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Find a free underlying socket on the network interface. */
  bool underlying_socket_busy[WIFI_MAX_CONNECTIONS];
  memset(underlying_socket_busy, 0, sizeof(underlying_socket_busy));
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2204      	movs	r2, #4
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00d f901 	bl	800e458 <memset>
  
  net_sock_ctxt_t * cur = sock->net->sock_list;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  do 
  {
    if ( ((cur->proto == NET_PROTO_TCP) || (cur->proto == NET_PROTO_UDP) )&& ((int) cur->underlying_sock_ctxt >= 0) )
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001264:	2b01      	cmp	r3, #1
 8001266:	d004      	beq.n	8001272 <net_sock_open_wifi+0x4e>
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800126e:	2b03      	cmp	r3, #3
 8001270:	d10a      	bne.n	8001288 <net_sock_open_wifi+0x64>
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	2b00      	cmp	r3, #0
 8001278:	db06      	blt.n	8001288 <net_sock_open_wifi+0x64>
    {
      underlying_socket_busy[(int) cur->underlying_sock_ctxt] = true;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	3330      	adds	r3, #48	; 0x30
 8001280:	443b      	add	r3, r7
 8001282:	2201      	movs	r2, #1
 8001284:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }
    cur = cur->next;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (cur != NULL);
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e4      	bne.n	800125e <net_sock_open_wifi+0x3a>
  
  for (int i = 0; i < WIFI_MAX_CONNECTIONS; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
 8001298:	e010      	b.n	80012bc <net_sock_open_wifi+0x98>
  {
    if (underlying_socket_busy[i] == false)
 800129a:	f107 0214 	add.w	r2, r7, #20
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	f083 0301 	eor.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <net_sock_open_wifi+0x92>
    {
      sock->underlying_sock_ctxt = (net_sockhnd_t) i;
 80012ae:	6a3a      	ldr	r2, [r7, #32]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
      break;
 80012b4:	e005      	b.n	80012c2 <net_sock_open_wifi+0x9e>
  for (int i = 0; i < WIFI_MAX_CONNECTIONS; i++)
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	3301      	adds	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	ddeb      	ble.n	800129a <net_sock_open_wifi+0x76>
  }
  
  /* Free socket found */
  if (sock->underlying_sock_ctxt >= 0)
  {
    switch(sock->proto)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d002      	beq.n	80012d2 <net_sock_open_wifi+0xae>
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d01b      	beq.n	8001308 <net_sock_open_wifi+0xe4>
 80012d0:	e023      	b.n	800131a <net_sock_open_wifi+0xf6>
    {
      case NET_PROTO_TCP:
        if (localport != 0)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <net_sock_open_wifi+0xbc>
        { /* TCP local port setting is not implemented */
          rc = NET_PARAM;
 80012d8:	f06f 0301 	mvn.w	r3, #1
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          {
            proto = WIFI_TCP_PROTOCOL;
            rc = NET_OK;
          }
        }
        break;
 80012de:	e01c      	b.n	800131a <net_sock_open_wifi+0xf6>
          if (WIFI_GetHostAddress((char *)hostname, ip_addr) != WIFI_STATUS_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4619      	mov	r1, r3
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f00b f9dc 	bl	800c6a4 <WIFI_GetHostAddress>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <net_sock_open_wifi+0xd8>
            msg_info("The address of %s could not be resolved.\n", hostname);
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	4820      	ldr	r0, [pc, #128]	; (8001378 <net_sock_open_wifi+0x154>)
 80012f6:	f00e f811 	bl	800f31c <iprintf>
        break;
 80012fa:	e00e      	b.n	800131a <net_sock_open_wifi+0xf6>
            proto = WIFI_TCP_PROTOCOL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            rc = NET_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001306:	e008      	b.n	800131a <net_sock_open_wifi+0xf6>
      case NET_PROTO_UDP:
        /* Record the local port binding. */
        sock->localport = localport;
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	631a      	str	r2, [r3, #48]	; 0x30
        proto = WIFI_UDP_PROTOCOL;
 800130e:	2301      	movs	r3, #1
 8001310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        rc = NET_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001318:	bf00      	nop
      default:
        ;
    }
        
    /* The Wifi "client connection" must be opened even in UDP mode. Otherwise the incoming traffic may be lost. */  
    if (rc == NET_OK)
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	2b00      	cmp	r3, #0
 800131e:	d126      	bne.n	800136e <net_sock_open_wifi+0x14a>
    {
      if( WIFI_STATUS_OK != WIFI_OpenClientConnection((uint32_t) sock->underlying_sock_ctxt,
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	461c      	mov	r4, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	b29b      	uxth	r3, r3
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	b292      	uxth	r2, r2
 800132e:	f107 0018 	add.w	r0, r7, #24
 8001332:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001336:	9201      	str	r2, [sp, #4]
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4603      	mov	r3, r0
 800133c:	4a0f      	ldr	r2, [pc, #60]	; (800137c <net_sock_open_wifi+0x158>)
 800133e:	4620      	mov	r0, r4
 8001340:	f00b f9c8 	bl	800c6d4 <WIFI_OpenClientConnection>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d011      	beq.n	800136e <net_sock_open_wifi+0x14a>
            proto, "", ip_addr, remoteport, localport) )
      {
        msg_error("Failed opening the underlying Wifi socket %d.\n", (int) sock->underlying_sock_ctxt);
 800134a:	22c9      	movs	r2, #201	; 0xc9
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <net_sock_open_wifi+0x15c>)
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <net_sock_open_wifi+0x160>)
 8001350:	f00d ffe4 	bl	800f31c <iprintf>
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	4619      	mov	r1, r3
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <net_sock_open_wifi+0x164>)
 800135c:	f00d ffde 	bl	800f31c <iprintf>
        sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f04f 32ff 	mov.w	r2, #4294967295
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
        rc = NET_ERR;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  {
    msg_error("Could not find a free socket on the specified network interface.\n");
    rc = NET_PARAM;
  }
  
  return rc;
 800136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001370:	4618      	mov	r0, r3
 8001372:	3734      	adds	r7, #52	; 0x34
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	080130c4 	.word	0x080130c4
 800137c:	080130f0 	.word	0x080130f0
 8001380:	08013da4 	.word	0x08013da4
 8001384:	08013090 	.word	0x08013090
 8001388:	080130f4 	.word	0x080130f4

0800138c <net_sock_recv_tcp_wifi>:


int net_sock_recv_tcp_wifi(net_sockhnd_t sockhnd, uint8_t * buf, size_t len)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  int rc = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
  WIFI_Status_t status = WIFI_STATUS_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	61fb      	str	r3, [r7, #28]
  uint16_t read = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	82fb      	strh	r3, [r7, #22]
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80013b0:	bf28      	it	cs
 80013b2:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
 80013b6:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint8_t * tmp_buf = buf;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t start_time = HAL_GetTick();
 80013bc:	f004 f9ea 	bl	8005794 <HAL_GetTick>
 80013c0:	61b8      	str	r0, [r7, #24]
    
  /* Read the received payload by chunks of WIFI_PAYLOAD_SIZE bytes because of
   * a constraint of WIFI_ReceiveData(). */
  do
  {
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00f      	beq.n	80013ec <net_sock_recv_tcp_wifi+0x60>
 80013cc:	f004 f9e2 	bl	8005794 <HAL_GetTick>
 80013d0:	4601      	mov	r1, r0
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80013d6:	461a      	mov	r2, r3
 80013d8:	69b8      	ldr	r0, [r7, #24]
 80013da:	f000 fd1d 	bl	8001e18 <net_timeout_left_ms>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dc03      	bgt.n	80013ec <net_sock_recv_tcp_wifi+0x60>
    {
      rc = NET_TIMEOUT;
 80013e4:	f06f 0302 	mvn.w	r3, #2
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80013ea:	e072      	b.n	80014d2 <net_sock_recv_tcp_wifi+0x146>
    }
    
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	b2d8      	uxtb	r0, r3
                             (sock->blocking == true) ? sock->read_timeout : NET_DEFAULT_NOBLOCKING_READ_TIMEOUT);
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <net_sock_recv_tcp_wifi+0x78>
                             (sock->blocking == true) ? sock->read_timeout : NET_DEFAULT_NOBLOCKING_READ_TIMEOUT);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 8001400:	4619      	mov	r1, r3
 8001402:	e000      	b.n	8001406 <net_sock_recv_tcp_wifi+0x7a>
 8001404:	2101      	movs	r1, #1
 8001406:	f107 0316 	add.w	r3, r7, #22
 800140a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800140c:	9100      	str	r1, [sp, #0]
 800140e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001410:	f00b f9fe 	bl	800c810 <WIFI_ReceiveData>
 8001414:	4603      	mov	r3, r0
 8001416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msg_debug("Read %d/%d.\n", read, tmp_len);
    if (status != WIFI_STATUS_OK)
 800141a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01c      	beq.n	800145c <net_sock_recv_tcp_wifi+0xd0>
    {
      msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 8001422:	22f2      	movs	r2, #242	; 0xf2
 8001424:	4931      	ldr	r1, [pc, #196]	; (80014ec <net_sock_recv_tcp_wifi+0x160>)
 8001426:	4832      	ldr	r0, [pc, #200]	; (80014f0 <net_sock_recv_tcp_wifi+0x164>)
 8001428:	f00d ff78 	bl	800f31c <iprintf>
 800142c:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	4618      	mov	r0, r3
 8001436:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001438:	8afa      	ldrh	r2, [r7, #22]
 800143a:	9200      	str	r2, [sp, #0]
 800143c:	4602      	mov	r2, r0
 800143e:	482d      	ldr	r0, [pc, #180]	; (80014f4 <net_sock_recv_tcp_wifi+0x168>)
 8001440:	f00d ff6c 	bl	800f31c <iprintf>
             status, (int) sock->underlying_sock_ctxt, tmp_len, read);
      msg_error("The port is likely to have been closed by the server.\n")
 8001444:	22f4      	movs	r2, #244	; 0xf4
 8001446:	4929      	ldr	r1, [pc, #164]	; (80014ec <net_sock_recv_tcp_wifi+0x160>)
 8001448:	4829      	ldr	r0, [pc, #164]	; (80014f0 <net_sock_recv_tcp_wifi+0x164>)
 800144a:	f00d ff67 	bl	800f31c <iprintf>
 800144e:	482a      	ldr	r0, [pc, #168]	; (80014f8 <net_sock_recv_tcp_wifi+0x16c>)
 8001450:	f00e f800 	bl	800f454 <puts>
      rc = NET_EOF;
 8001454:	f06f 0303 	mvn.w	r3, #3
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;  
 800145a:	e03a      	b.n	80014d2 <net_sock_recv_tcp_wifi+0x146>
    }
    else
    {
      if (read > tmp_len)
 800145c:	8afb      	ldrh	r3, [r7, #22]
 800145e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001460:	429a      	cmp	r2, r3
 8001462:	d20f      	bcs.n	8001484 <net_sock_recv_tcp_wifi+0xf8>
      {
        msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 8001464:	22fc      	movs	r2, #252	; 0xfc
 8001466:	4921      	ldr	r1, [pc, #132]	; (80014ec <net_sock_recv_tcp_wifi+0x160>)
 8001468:	4821      	ldr	r0, [pc, #132]	; (80014f0 <net_sock_recv_tcp_wifi+0x164>)
 800146a:	f00d ff57 	bl	800f31c <iprintf>
 800146e:	8afb      	ldrh	r3, [r7, #22]
 8001470:	4619      	mov	r1, r3
 8001472:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001474:	461a      	mov	r2, r3
 8001476:	4821      	ldr	r0, [pc, #132]	; (80014fc <net_sock_recv_tcp_wifi+0x170>)
 8001478:	f00d ff50 	bl	800f31c <iprintf>
        rc = NET_ERR;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001482:	e026      	b.n	80014d2 <net_sock_recv_tcp_wifi+0x146>
      }
      tmp_buf += read;
 8001484:	8afb      	ldrh	r3, [r7, #22]
 8001486:	461a      	mov	r2, r3
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	4413      	add	r3, r2
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4293      	cmp	r3, r2
 800149a:	d00c      	beq.n	80014b6 <net_sock_recv_tcp_wifi+0x12a>
 800149c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80014ac:	bf28      	it	cs
 80014ae:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	e000      	b.n	80014b8 <net_sock_recv_tcp_wifi+0x12c>
 80014b6:	2300      	movs	r3, #0
 80014b8:	857b      	strh	r3, [r7, #42]	; 0x2a
    }
    
  } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 80014ba:	8afb      	ldrh	r3, [r7, #22]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d108      	bne.n	80014d2 <net_sock_recv_tcp_wifi+0x146>
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <net_sock_recv_tcp_wifi+0x146>
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f43f af78 	beq.w	80013c2 <net_sock_recv_tcp_wifi+0x36>
    
  return (rc < 0) ? rc : tmp_buf - buf;
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db03      	blt.n	80014e0 <net_sock_recv_tcp_wifi+0x154>
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	e000      	b.n	80014e2 <net_sock_recv_tcp_wifi+0x156>
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3730      	adds	r7, #48	; 0x30
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	08013db8 	.word	0x08013db8
 80014f0:	08013090 	.word	0x08013090
 80014f4:	08013124 	.word	0x08013124
 80014f8:	08013180 	.word	0x08013180
 80014fc:	080131b8 	.word	0x080131b8

08001500 <net_sock_recvfrom_udp_wifi>:


int net_sock_recvfrom_udp_wifi(net_sockhnd_t sockhnd, uint8_t * const buf, size_t len, net_ipaddr_t * remoteaddress, int * remoteport)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b091      	sub	sp, #68	; 0x44
 8001504:	af04      	add	r7, sp, #16
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  int rc = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  WIFI_Status_t status = WIFI_STATUS_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	61fb      	str	r3, [r7, #28]
  uint16_t read = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	82fb      	strh	r3, [r7, #22]
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001526:	bf28      	it	cs
 8001528:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
 800152c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint8_t * tmp_buf = buf;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t start_time = HAL_GetTick();
 8001532:	f004 f92f 	bl	8005794 <HAL_GetTick>
 8001536:	61b8      	str	r0, [r7, #24]
  /* Note: The remote address and the remote port are unknown until a packet is received. */
  { /* Read the received payload by chunks of WIFI_PAYLOAD_SIZE bytes because of
     * a constraint of WIFI_ReceiveData(). */
    do
    {
      uint16_t port = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	82bb      	strh	r3, [r7, #20]
      uint8_t ip[4] = { 0, 0, 0, 0 };
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00f      	beq.n	800156a <net_sock_recvfrom_udp_wifi+0x6a>
 800154a:	f004 f923 	bl	8005794 <HAL_GetTick>
 800154e:	4601      	mov	r1, r0
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001554:	461a      	mov	r2, r3
 8001556:	69b8      	ldr	r0, [r7, #24]
 8001558:	f000 fc5e 	bl	8001e18 <net_timeout_left_ms>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	dc03      	bgt.n	800156a <net_sock_recvfrom_udp_wifi+0x6a>
      {
        rc = NET_TIMEOUT;
 8001562:	f06f 0302 	mvn.w	r3, #2
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001568:	e08e      	b.n	8001688 <net_sock_recvfrom_udp_wifi+0x188>
      }
      
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	b2d8      	uxtb	r0, r3
                               (sock->blocking == true) ? sock->read_timeout : NET_DEFAULT_NOBLOCKING_READ_TIMEOUT, ip , &port);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <net_sock_recvfrom_udp_wifi+0x82>
                               (sock->blocking == true) ? sock->read_timeout : NET_DEFAULT_NOBLOCKING_READ_TIMEOUT, ip , &port);
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 800157e:	461c      	mov	r4, r3
 8001580:	e000      	b.n	8001584 <net_sock_recvfrom_udp_wifi+0x84>
 8001582:	2401      	movs	r4, #1
 8001584:	f107 0116 	add.w	r1, r7, #22
 8001588:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	9400      	str	r4, [sp, #0]
 8001598:	460b      	mov	r3, r1
 800159a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800159c:	f00b f95a 	bl	800c854 <WIFI_ReceiveDataFrom>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      msg_debug("Read %d/%d.\n", read, tmp_len);
      if (status != WIFI_STATUS_OK)
 80015a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d01e      	beq.n	80015ec <net_sock_recvfrom_udp_wifi+0xec>
      {
        msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 80015ae:	f44f 7293 	mov.w	r2, #294	; 0x126
 80015b2:	493b      	ldr	r1, [pc, #236]	; (80016a0 <net_sock_recvfrom_udp_wifi+0x1a0>)
 80015b4:	483b      	ldr	r0, [pc, #236]	; (80016a4 <net_sock_recvfrom_udp_wifi+0x1a4>)
 80015b6:	f00d feb1 	bl	800f31c <iprintf>
 80015ba:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	4618      	mov	r0, r3
 80015c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015c6:	8afa      	ldrh	r2, [r7, #22]
 80015c8:	9200      	str	r2, [sp, #0]
 80015ca:	4602      	mov	r2, r0
 80015cc:	4836      	ldr	r0, [pc, #216]	; (80016a8 <net_sock_recvfrom_udp_wifi+0x1a8>)
 80015ce:	f00d fea5 	bl	800f31c <iprintf>
               status, (int) sock->underlying_sock_ctxt, tmp_len, read);
        msg_error("The port is likely to have been closed by the server.\n")
 80015d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80015d6:	4932      	ldr	r1, [pc, #200]	; (80016a0 <net_sock_recvfrom_udp_wifi+0x1a0>)
 80015d8:	4832      	ldr	r0, [pc, #200]	; (80016a4 <net_sock_recvfrom_udp_wifi+0x1a4>)
 80015da:	f00d fe9f 	bl	800f31c <iprintf>
 80015de:	4833      	ldr	r0, [pc, #204]	; (80016ac <net_sock_recvfrom_udp_wifi+0x1ac>)
 80015e0:	f00d ff38 	bl	800f454 <puts>
        rc = NET_EOF;
 80015e4:	f06f 0303 	mvn.w	r3, #3
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;  
 80015ea:	e04d      	b.n	8001688 <net_sock_recvfrom_udp_wifi+0x188>
      }
      else
      {
        if (read > tmp_len)
 80015ec:	8afb      	ldrh	r3, [r7, #22]
 80015ee:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d210      	bcs.n	8001616 <net_sock_recvfrom_udp_wifi+0x116>
        {
          msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 80015f4:	f44f 7298 	mov.w	r2, #304	; 0x130
 80015f8:	4929      	ldr	r1, [pc, #164]	; (80016a0 <net_sock_recvfrom_udp_wifi+0x1a0>)
 80015fa:	482a      	ldr	r0, [pc, #168]	; (80016a4 <net_sock_recvfrom_udp_wifi+0x1a4>)
 80015fc:	f00d fe8e 	bl	800f31c <iprintf>
 8001600:	8afb      	ldrh	r3, [r7, #22]
 8001602:	4619      	mov	r1, r3
 8001604:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001606:	461a      	mov	r2, r3
 8001608:	4829      	ldr	r0, [pc, #164]	; (80016b0 <net_sock_recvfrom_udp_wifi+0x1b0>)
 800160a:	f00d fe87 	bl	800f31c <iprintf>
          rc = NET_ERR;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8001614:	e038      	b.n	8001688 <net_sock_recvfrom_udp_wifi+0x188>
        }
        tmp_buf += read;
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	461a      	mov	r2, r3
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	4413      	add	r3, r2
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 8001620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	461a      	mov	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4293      	cmp	r3, r2
 800162c:	d00c      	beq.n	8001648 <net_sock_recvfrom_udp_wifi+0x148>
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	461a      	mov	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800163e:	bf28      	it	cs
 8001640:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
 8001644:	b29b      	uxth	r3, r3
 8001646:	e000      	b.n	800164a <net_sock_recvfrom_udp_wifi+0x14a>
 8001648:	2300      	movs	r3, #0
 800164a:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
      
      remoteaddress->ipv = NET_IP_V4;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	2210      	movs	r2, #16
 8001658:	21ff      	movs	r1, #255	; 0xff
 800165a:	4618      	mov	r0, r3
 800165c:	f00c fefc 	bl	800e458 <memset>
      memcpy(&remoteaddress->ip[12], ip, 4);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	330d      	adds	r3, #13
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	601a      	str	r2, [r3, #0]
      *remoteport = port;
 8001668:	8abb      	ldrh	r3, [r7, #20]
 800166a:	461a      	mov	r2, r3
 800166c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166e:	601a      	str	r2, [r3, #0]
    } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 8001670:	8afb      	ldrh	r3, [r7, #22]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d108      	bne.n	8001688 <net_sock_recvfrom_udp_wifi+0x188>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <net_sock_recvfrom_udp_wifi+0x188>
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	2b00      	cmp	r3, #0
 8001684:	f43f af58 	beq.w	8001538 <net_sock_recvfrom_udp_wifi+0x38>
  }
  
  return (rc < 0) ? rc : tmp_buf - buf;
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	2b00      	cmp	r3, #0
 800168c:	db03      	blt.n	8001696 <net_sock_recvfrom_udp_wifi+0x196>
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	e000      	b.n	8001698 <net_sock_recvfrom_udp_wifi+0x198>
 8001696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001698:	4618      	mov	r0, r3
 800169a:	3734      	adds	r7, #52	; 0x34
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	08013dd0 	.word	0x08013dd0
 80016a4:	08013090 	.word	0x08013090
 80016a8:	08013124 	.word	0x08013124
 80016ac:	08013180 	.word	0x08013180
 80016b0:	080131b8 	.word	0x080131b8

080016b4 <net_sock_send_tcp_wifi>:


int net_sock_send_tcp_wifi( net_sockhnd_t sockhnd, const uint8_t * buf, size_t len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  int rc = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  WIFI_Status_t status = WIFI_STATUS_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	61fb      	str	r3, [r7, #28]
  uint16_t sent = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	82fb      	strh	r3, [r7, #22]
  uint32_t start_time = HAL_GetTick();
 80016d2:	f004 f85f 	bl	8005794 <HAL_GetTick>
 80016d6:	61b8      	str	r0, [r7, #24]
  
  do
  {
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00f      	beq.n	8001702 <net_sock_send_tcp_wifi+0x4e>
 80016e2:	f004 f857 	bl	8005794 <HAL_GetTick>
 80016e6:	4601      	mov	r1, r0
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ec:	461a      	mov	r2, r3
 80016ee:	69b8      	ldr	r0, [r7, #24]
 80016f0:	f000 fb92 	bl	8001e18 <net_timeout_left_ms>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dc03      	bgt.n	8001702 <net_sock_send_tcp_wifi+0x4e>
    {
      rc = NET_TIMEOUT;
 80016fa:	f06f 0302 	mvn.w	r3, #2
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001700:	e033      	b.n	800176a <net_sock_send_tcp_wifi+0xb6>
    }
    
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	b2d8      	uxtb	r0, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	b29a      	uxth	r2, r3
                          (sock->blocking == true) ? sock->write_timeout : NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT );
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <net_sock_send_tcp_wifi+0x6a>
                          (sock->blocking == true) ? sock->write_timeout : NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT );
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 800171a:	4619      	mov	r1, r3
 800171c:	e000      	b.n	8001720 <net_sock_send_tcp_wifi+0x6c>
 800171e:	2101      	movs	r1, #1
 8001720:	f107 0316 	add.w	r3, r7, #22
 8001724:	9100      	str	r1, [sp, #0]
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	f00b f82a 	bl	800c780 <WIFI_SendData>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status !=  WIFI_STATUS_OK)
 8001732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00c      	beq.n	8001754 <net_sock_send_tcp_wifi+0xa0>
    {
      rc = NET_ERR;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
      msg_error("Send failed.\n");
 8001740:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8001744:	490e      	ldr	r1, [pc, #56]	; (8001780 <net_sock_send_tcp_wifi+0xcc>)
 8001746:	480f      	ldr	r0, [pc, #60]	; (8001784 <net_sock_send_tcp_wifi+0xd0>)
 8001748:	f00d fde8 	bl	800f31c <iprintf>
 800174c:	480e      	ldr	r0, [pc, #56]	; (8001788 <net_sock_send_tcp_wifi+0xd4>)
 800174e:	f00d fe81 	bl	800f454 <puts>
      break;
 8001752:	e00a      	b.n	800176a <net_sock_send_tcp_wifi+0xb6>
    }
    msg_debug("send %d/%d.\n", sent, len);
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 8001754:	8afb      	ldrh	r3, [r7, #22]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d107      	bne.n	800176a <net_sock_send_tcp_wifi+0xb6>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <net_sock_send_tcp_wifi+0xb6>
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0b6      	beq.n	80016d8 <net_sock_send_tcp_wifi+0x24>
  
  return (rc < 0) ? rc : sent;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	2b00      	cmp	r3, #0
 800176e:	db01      	blt.n	8001774 <net_sock_send_tcp_wifi+0xc0>
 8001770:	8afb      	ldrh	r3, [r7, #22]
 8001772:	e000      	b.n	8001776 <net_sock_send_tcp_wifi+0xc2>
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001776:	4618      	mov	r0, r3
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	08013dec 	.word	0x08013dec
 8001784:	08013090 	.word	0x08013090
 8001788:	08013200 	.word	0x08013200

0800178c <net_sock_sendto_udp_wifi>:


int net_sock_sendto_udp_wifi(net_sockhnd_t sockhnd, const uint8_t * buf, size_t len, net_ipaddr_t * remoteaddress, int remoteport)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b091      	sub	sp, #68	; 0x44
 8001790:	af04      	add	r7, sp, #16
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  int rc = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  WIFI_Status_t status = WIFI_STATUS_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	623b      	str	r3, [r7, #32]
  uint16_t sent = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	833b      	strh	r3, [r7, #24]
  uint32_t start_time = HAL_GetTick();
 80017ac:	f003 fff2 	bl	8005794 <HAL_GetTick>
 80017b0:	61f8      	str	r0, [r7, #28]
  uint8_t ip_addr[4] = { 0, 0, 0, 0 };
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  int16_t port = remoteport;
 80017b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b8:	837b      	strh	r3, [r7, #26]
  
  if (remoteaddress->ipv != NET_IP_V4)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <net_sock_sendto_udp_wifi+0x3c>
  {
    return NET_PARAM;
 80017c2:	f06f 0301 	mvn.w	r3, #1
 80017c6:	e068      	b.n	800189a <net_sock_sendto_udp_wifi+0x10e>
  }
  for (int i = 0; i < 4; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80017cc:	e00d      	b.n	80017ea <net_sock_sendto_udp_wifi+0x5e>
  {
    ip_addr[i] = remoteaddress->ip[12+i];
 80017ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d0:	330c      	adds	r3, #12
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	7859      	ldrb	r1, [r3, #1]
 80017d8:	f107 0214 	add.w	r2, r7, #20
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	4413      	add	r3, r2
 80017e0:	460a      	mov	r2, r1
 80017e2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++)
 80017e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e6:	3301      	adds	r3, #1
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	ddee      	ble.n	80017ce <net_sock_sendto_udp_wifi+0x42>
  }
  
  do
  {
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00f      	beq.n	800181a <net_sock_sendto_udp_wifi+0x8e>
 80017fa:	f003 ffcb 	bl	8005794 <HAL_GetTick>
 80017fe:	4601      	mov	r1, r0
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001804:	461a      	mov	r2, r3
 8001806:	69f8      	ldr	r0, [r7, #28]
 8001808:	f000 fb06 	bl	8001e18 <net_timeout_left_ms>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	dc03      	bgt.n	800181a <net_sock_sendto_udp_wifi+0x8e>
    {
      rc = NET_TIMEOUT;
 8001812:	f06f 0302 	mvn.w	r3, #2
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8001818:	e039      	b.n	800188e <net_sock_sendto_udp_wifi+0x102>
    }
    
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	b2d8      	uxtb	r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	b29a      	uxth	r2, r3
                          (sock->blocking == true) ? sock->write_timeout : NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT, ip_addr, port );
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <net_sock_sendto_udp_wifi+0xaa>
                          (sock->blocking == true) ? sock->write_timeout : NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT, ip_addr, port );
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8001832:	461c      	mov	r4, r3
 8001834:	e000      	b.n	8001838 <net_sock_sendto_udp_wifi+0xac>
 8001836:	2401      	movs	r4, #1
 8001838:	8b7b      	ldrh	r3, [r7, #26]
 800183a:	f107 0118 	add.w	r1, r7, #24
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	9400      	str	r4, [sp, #0]
 8001848:	460b      	mov	r3, r1
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	f00a ffba 	bl	800c7c4 <WIFI_SendDataTo>
 8001850:	4603      	mov	r3, r0
 8001852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status !=  WIFI_STATUS_OK)
 8001856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00c      	beq.n	8001878 <net_sock_sendto_udp_wifi+0xec>
    {
      rc = NET_ERR;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
      msg_error("Send failed.\n");
 8001864:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001868:	490e      	ldr	r1, [pc, #56]	; (80018a4 <net_sock_sendto_udp_wifi+0x118>)
 800186a:	480f      	ldr	r0, [pc, #60]	; (80018a8 <net_sock_sendto_udp_wifi+0x11c>)
 800186c:	f00d fd56 	bl	800f31c <iprintf>
 8001870:	480e      	ldr	r0, [pc, #56]	; (80018ac <net_sock_sendto_udp_wifi+0x120>)
 8001872:	f00d fdef 	bl	800f454 <puts>
      break;
 8001876:	e00a      	b.n	800188e <net_sock_sendto_udp_wifi+0x102>
    }
  
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 8001878:	8b3b      	ldrh	r3, [r7, #24]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d107      	bne.n	800188e <net_sock_sendto_udp_wifi+0x102>
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <net_sock_sendto_udp_wifi+0x102>
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0b0      	beq.n	80017f0 <net_sock_sendto_udp_wifi+0x64>
    
  return (rc < 0) ? rc : sent;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	2b00      	cmp	r3, #0
 8001892:	db01      	blt.n	8001898 <net_sock_sendto_udp_wifi+0x10c>
 8001894:	8b3b      	ldrh	r3, [r7, #24]
 8001896:	e000      	b.n	800189a <net_sock_sendto_udp_wifi+0x10e>
 8001898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800189a:	4618      	mov	r0, r3
 800189c:	3734      	adds	r7, #52	; 0x34
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08013e04 	.word	0x08013e04
 80018a8:	08013090 	.word	0x08013090
 80018ac:	08013200 	.word	0x08013200

080018b0 <net_sock_close_tcp_wifi>:


int net_sock_close_tcp_wifi(net_sockhnd_t sockhnd)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  int rc = NET_ERR;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
 80018bc:	617b      	str	r3, [r7, #20]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	613b      	str	r3, [r7, #16]
  WIFI_Status_t status = WIFI_CloseClientConnection((uint8_t) ((uint32_t)sock->underlying_sock_ctxt && 0xFF));
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf14      	ite	ne
 80018ca:	2301      	movne	r3, #1
 80018cc:	2300      	moveq	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f00a ff38 	bl	800c748 <WIFI_CloseClientConnection>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
  if (status == WIFI_STATUS_OK)
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d105      	bne.n	80018ee <net_sock_close_tcp_wifi+0x3e>
  {
    sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
    rc = NET_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  }
  return rc;
 80018ee:	697b      	ldr	r3, [r7, #20]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <net_sock_destroy_tcp_wifi>:


int net_sock_destroy_tcp_wifi(net_sockhnd_t sockhnd)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  int rc = NET_ERR;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	617b      	str	r3, [r7, #20]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]
  net_ctxt_t *ctxt = sock->net;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	60bb      	str	r3, [r7, #8]
    
  /* Find the parent in the linked list.
   * Unlink and free. 
   */
  if (sock == ctxt->sock_list)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	429a      	cmp	r2, r3
 8001918:	d106      	bne.n	8001928 <net_sock_destroy_tcp_wifi+0x30>
  {
    ctxt->sock_list = sock->next;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	605a      	str	r2, [r3, #4]
    rc = NET_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e015      	b.n	8001954 <net_sock_destroy_tcp_wifi+0x5c>
  }
  else
  {
    net_sock_ctxt_t *cur = ctxt->sock_list;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	613b      	str	r3, [r7, #16]
    do
    {
      if (cur->next == sock)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d106      	bne.n	8001946 <net_sock_destroy_tcp_wifi+0x4e>
      {
        cur->next = sock->next;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	605a      	str	r2, [r3, #4]
        rc = NET_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
        break;
 8001944:	e006      	b.n	8001954 <net_sock_destroy_tcp_wifi+0x5c>
      }
      cur = cur->next;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	613b      	str	r3, [r7, #16]
    } while(cur->next != NULL);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ec      	bne.n	800192e <net_sock_destroy_tcp_wifi+0x36>
  }
  if (rc == NET_OK)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <net_sock_destroy_tcp_wifi+0x68>
  {
    net_free(sock);
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f00c fd56 	bl	800e40c <free>
  }
  
  return rc;
 8001960:	697b      	ldr	r3, [r7, #20]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <net_if_init>:
int net_if_deinit(void * if_ctxt);
int net_if_reinit(void * if_ctxt);

/* Functions Definition ------------------------------------------------------*/
int net_if_init(void * if_ctxt)
{
 800196c:	b5b0      	push	{r4, r5, r7, lr}
 800196e:	b092      	sub	sp, #72	; 0x48
 8001970:	af04      	add	r7, sp, #16
 8001972:	6078      	str	r0, [r7, #4]

  char moduleinfo[WIFI_PRODUCT_INFO_SIZE];
  WIFI_Status_t wifiRes;
  uint8_t macAddress[6];
  int wifiConnectCounter = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
  
  /*  Wifi Module initialization */
  printf("Initializing the WiFi module\n");
 8001978:	4847      	ldr	r0, [pc, #284]	; (8001a98 <net_if_init+0x12c>)
 800197a:	f00d fd6b 	bl	800f454 <puts>
  
  wifiRes = WIFI_Init();
 800197e:	f00a fe11 	bl	800c5a4 <WIFI_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if ( WIFI_STATUS_OK != wifiRes )
 8001988:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <net_if_init+0x30>
  {
    printf("Failed to initialize WIFI module\n");
 8001990:	4842      	ldr	r0, [pc, #264]	; (8001a9c <net_if_init+0x130>)
 8001992:	f00d fd5f 	bl	800f454 <puts>
    return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e079      	b.n	8001a90 <net_if_init+0x124>
  }
    
  /* Retrieve the WiFi module mac address to confirm that it is detected and communicating. */
  WIFI_GetModuleName(moduleinfo);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00a ffa5 	bl	800c8f0 <WIFI_GetModuleName>
  printf("Module initialized successfully: %s",moduleinfo);
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	4619      	mov	r1, r3
 80019ac:	483c      	ldr	r0, [pc, #240]	; (8001aa0 <net_if_init+0x134>)
 80019ae:	f00d fcb5 	bl	800f31c <iprintf>
  
  WIFI_GetModuleID(moduleinfo);
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00a ff86 	bl	800c8c8 <WIFI_GetModuleID>
  printf(" %s",moduleinfo);
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4619      	mov	r1, r3
 80019c2:	4838      	ldr	r0, [pc, #224]	; (8001aa4 <net_if_init+0x138>)
 80019c4:	f00d fcaa 	bl	800f31c <iprintf>
  
  WIFI_GetModuleFwRevision(moduleinfo);
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00a ff67 	bl	800c8a0 <WIFI_GetModuleFwRevision>
  printf(" %s\n",moduleinfo);
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	4833      	ldr	r0, [pc, #204]	; (8001aa8 <net_if_init+0x13c>)
 80019da:	f00d fc9f 	bl	800f31c <iprintf>
  
  printf("Retrieving the WiFi module MAC address:");
 80019de:	4833      	ldr	r0, [pc, #204]	; (8001aac <net_if_init+0x140>)
 80019e0:	f00d fc9c 	bl	800f31c <iprintf>
  wifiRes = WIFI_GetMAC_Address( (uint8_t*)macAddress);
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00a fe29 	bl	800c640 <WIFI_GetMAC_Address>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if ( WIFI_STATUS_OK == wifiRes)
 80019f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d112      	bne.n	8001a22 <net_if_init+0xb6>
  {
    printf(" %02x:%02x:%02x:%02x:%02x:%02x\n",
         macAddress[0], macAddress[1], macAddress[2],
 80019fc:	7a3b      	ldrb	r3, [r7, #8]
    printf(" %02x:%02x:%02x:%02x:%02x:%02x\n",
 80019fe:	4618      	mov	r0, r3
         macAddress[0], macAddress[1], macAddress[2],
 8001a00:	7a7b      	ldrb	r3, [r7, #9]
    printf(" %02x:%02x:%02x:%02x:%02x:%02x\n",
 8001a02:	461c      	mov	r4, r3
         macAddress[0], macAddress[1], macAddress[2],
 8001a04:	7abb      	ldrb	r3, [r7, #10]
    printf(" %02x:%02x:%02x:%02x:%02x:%02x\n",
 8001a06:	461d      	mov	r5, r3
         macAddress[3], macAddress[4], macAddress[5]);
 8001a08:	7afb      	ldrb	r3, [r7, #11]
 8001a0a:	7b3a      	ldrb	r2, [r7, #12]
 8001a0c:	7b79      	ldrb	r1, [r7, #13]
    printf(" %02x:%02x:%02x:%02x:%02x:%02x\n",
 8001a0e:	9102      	str	r1, [sp, #8]
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	462b      	mov	r3, r5
 8001a16:	4622      	mov	r2, r4
 8001a18:	4601      	mov	r1, r0
 8001a1a:	4825      	ldr	r0, [pc, #148]	; (8001ab0 <net_if_init+0x144>)
 8001a1c:	f00d fc7e 	bl	800f31c <iprintf>
 8001a20:	e002      	b.n	8001a28 <net_if_init+0xbc>
  }
  else
  {
       printf("Failed to get MAC address\n");
 8001a22:	4824      	ldr	r0, [pc, #144]	; (8001ab4 <net_if_init+0x148>)
 8001a24:	f00d fd16 	bl	800f454 <puts>
  }
  /* Connect to the specified SSID. */

  printf("\n");
 8001a28:	200a      	movs	r0, #10
 8001a2a:	f00d fc8f 	bl	800f34c <putchar>
  do 
  {
    printf("\rConnecting to AP: %s  Attempt %d/%d ...",pcRouterSSID, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	3301      	adds	r3, #1
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
 8001a34:	2303      	movs	r3, #3
 8001a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a38:	491f      	ldr	r1, [pc, #124]	; (8001ab8 <net_if_init+0x14c>)
 8001a3a:	4820      	ldr	r0, [pc, #128]	; (8001abc <net_if_init+0x150>)
 8001a3c:	f00d fc6e 	bl	800f31c <iprintf>
    wifiRes = WIFI_Connect(pcRouterSSID, pcRouterPWR, (WIFI_Ecn_t)enRoutreEncryptiontype);
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <net_if_init+0x154>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	491f      	ldr	r1, [pc, #124]	; (8001ac4 <net_if_init+0x158>)
 8001a48:	481b      	ldr	r0, [pc, #108]	; (8001ab8 <net_if_init+0x14c>)
 8001a4a:	f00a fdd7 	bl	800c5fc <WIFI_Connect>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (wifiRes == WIFI_STATUS_OK) break;
 8001a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <net_if_init+0xf8>
  } 
  while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	dde5      	ble.n	8001a2e <net_if_init+0xc2>
 8001a62:	e000      	b.n	8001a66 <net_if_init+0xfa>
    if (wifiRes == WIFI_STATUS_OK) break;
 8001a64:	bf00      	nop
  
  if (wifiRes == WIFI_STATUS_OK)
 8001a66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d104      	bne.n	8001a78 <net_if_init+0x10c>
  {
    printf("\nConnected to AP %s\n",pcRouterSSID);
 8001a6e:	4912      	ldr	r1, [pc, #72]	; (8001ab8 <net_if_init+0x14c>)
 8001a70:	4815      	ldr	r0, [pc, #84]	; (8001ac8 <net_if_init+0x15c>)
 8001a72:	f00d fc53 	bl	800f31c <iprintf>
 8001a76:	e003      	b.n	8001a80 <net_if_init+0x114>
  }
  else
  {
    printf("\nFailed to connect to AP %s\n",pcRouterSSID);
 8001a78:	490f      	ldr	r1, [pc, #60]	; (8001ab8 <net_if_init+0x14c>)
 8001a7a:	4814      	ldr	r0, [pc, #80]	; (8001acc <net_if_init+0x160>)
 8001a7c:	f00d fc4e 	bl	800f31c <iprintf>
  }
  
  return (wifiRes == WIFI_STATUS_OK)?0:-1;
 8001a80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <net_if_init+0x120>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e001      	b.n	8001a90 <net_if_init+0x124>
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3738      	adds	r7, #56	; 0x38
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bdb0      	pop	{r4, r5, r7, pc}
 8001a98:	08013210 	.word	0x08013210
 8001a9c:	08013230 	.word	0x08013230
 8001aa0:	08013254 	.word	0x08013254
 8001aa4:	08013278 	.word	0x08013278
 8001aa8:	0801327c 	.word	0x0801327c
 8001aac:	08013284 	.word	0x08013284
 8001ab0:	080132ac 	.word	0x080132ac
 8001ab4:	080132cc 	.word	0x080132cc
 8001ab8:	200006bc 	.word	0x200006bc
 8001abc:	080132e8 	.word	0x080132e8
 8001ac0:	20000784 	.word	0x20000784
 8001ac4:	20000720 	.word	0x20000720
 8001ac8:	08013314 	.word	0x08013314
 8001acc:	0801332c 	.word	0x0801332c

08001ad0 <net_init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

int net_init(net_hnd_t * nethnd, net_if_t interface, net_if_init_t *f_netinit)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	72fb      	strb	r3, [r7, #11]
  int rc = NET_ERR;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	617b      	str	r3, [r7, #20]
  net_ctxt_t *ctxt = NULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]

  if (f_netinit == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <net_init+0x26>
  {
    rc = NET_PARAM;
 8001aee:	f06f 0301 	mvn.w	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e036      	b.n	8001b64 <net_init+0x94>
  }
  else
  {
    ctxt = net_malloc(sizeof(net_ctxt_t));
 8001af6:	2008      	movs	r0, #8
 8001af8:	f00c fc80 	bl	800e3fc <malloc>
 8001afc:	4603      	mov	r3, r0
 8001afe:	613b      	str	r3, [r7, #16]
    if (ctxt == NULL)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <net_init+0x4e>
    {
      msg_error("net_init: allocation failed.\n");
 8001b06:	2253      	movs	r2, #83	; 0x53
 8001b08:	491f      	ldr	r1, [pc, #124]	; (8001b88 <net_init+0xb8>)
 8001b0a:	4820      	ldr	r0, [pc, #128]	; (8001b8c <net_init+0xbc>)
 8001b0c:	f00d fc06 	bl	800f31c <iprintf>
 8001b10:	481f      	ldr	r0, [pc, #124]	; (8001b90 <net_init+0xc0>)
 8001b12:	f00d fc9f 	bl	800f454 <puts>
      rc = NET_ERR;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e022      	b.n	8001b64 <net_init+0x94>
    }
    else
    {
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8001b1e:	2208      	movs	r2, #8
 8001b20:	2100      	movs	r1, #0
 8001b22:	6938      	ldr	r0, [r7, #16]
 8001b24:	f00c fc98 	bl	800e458 <memset>
      switch(interface)
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d10b      	bne.n	8001b46 <net_init+0x76>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          ctxt->itf = interface;  // TODO: register a list of function pointers in function of the interface type. (to be provided by the caller?)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	7afa      	ldrb	r2, [r7, #11]
 8001b32:	701a      	strb	r2, [r3, #0]
          if(f_netinit(NULL) == 0)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2000      	movs	r0, #0
 8001b38:	4798      	blx	r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d110      	bne.n	8001b62 <net_init+0x92>
          {
            rc = NET_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
          }
          break;
 8001b44:	e00d      	b.n	8001b62 <net_init+0x92>
            rc = NET_OK;
          }
          break;
    #endif /* USE_LWIP */
        default:
          msg_error("net_init: interface type of %d not implemented.\n", interface);
 8001b46:	2277      	movs	r2, #119	; 0x77
 8001b48:	490f      	ldr	r1, [pc, #60]	; (8001b88 <net_init+0xb8>)
 8001b4a:	4810      	ldr	r0, [pc, #64]	; (8001b8c <net_init+0xbc>)
 8001b4c:	f00d fbe6 	bl	800f31c <iprintf>
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	4619      	mov	r1, r3
 8001b54:	480f      	ldr	r0, [pc, #60]	; (8001b94 <net_init+0xc4>)
 8001b56:	f00d fbe1 	bl	800f31c <iprintf>
          rc = NET_PARAM;
 8001b5a:	f06f 0301 	mvn.w	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e000      	b.n	8001b64 <net_init+0x94>
          break;
 8001b62:	bf00      	nop
      }
    }
  }

  if (rc == NET_OK)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d103      	bne.n	8001b72 <net_init+0xa2>
  {
    *nethnd = (net_hnd_t) ctxt;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e005      	b.n	8001b7e <net_init+0xae>
  }
  else
  {
    if (ctxt != NULL)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <net_init+0xae>
    {
      net_free(ctxt);
 8001b78:	6938      	ldr	r0, [r7, #16]
 8001b7a:	f00c fc47 	bl	800e40c <free>
    }
  }
  
  return rc;
 8001b7e:	697b      	ldr	r3, [r7, #20]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	08013e20 	.word	0x08013e20
 8001b8c:	080133a8 	.word	0x080133a8
 8001b90:	080133b8 	.word	0x080133b8
 8001b94:	080133d8 	.word	0x080133d8

08001b98 <net_get_ip_address>:
  return rc;
}


int net_get_ip_address(net_hnd_t nethnd, net_ipaddr_t * ipAddress)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
  int rc = NET_ERR;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	617b      	str	r3, [r7, #20]
  
  if (ipAddress == NULL)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <net_get_ip_address+0x22>
  {
    rc = NET_PARAM;
 8001bb2:	f06f 0301 	mvn.w	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e02f      	b.n	8001c1a <net_get_ip_address+0x82>
  }
  else
  {
    switch(ctxt->itf)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d11a      	bne.n	8001bf8 <net_get_ip_address+0x60>
#ifdef USE_WIFI
      case NET_IF_WLAN:
      {
        uint8_t addr[4];
        /* WIFI_GetIP_Address() returns IPv4 addresses in binary format, network byte order. */
        WIFI_Status_t ret = WIFI_GetIP_Address(addr);
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f00a fd50 	bl	800c66c <WIFI_GetIP_Address>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	73fb      	strb	r3, [r7, #15]
        if (ret == WIFI_STATUS_OK)
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d120      	bne.n	8001c18 <net_get_ip_address+0x80>
        {
          ipAddress->ipv = NET_IP_V4;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	2210      	movs	r2, #16
 8001be2:	21ff      	movs	r1, #255	; 0xff
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00c fc37 	bl	800e458 <memset>
          memcpy(&ipAddress->ip[12], addr, 4);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	330d      	adds	r3, #13
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	601a      	str	r2, [r3, #0]
          rc = NET_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
        }
        break;
 8001bf6:	e00f      	b.n	8001c18 <net_get_ip_address+0x80>
        }
        break;
      }
#endif /* USE_LWIP */
      default:
        msg_error("net_get_ip_address: interface type of %d not implemented.\n", ctxt->itf);
 8001bf8:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001bfc:	4909      	ldr	r1, [pc, #36]	; (8001c24 <net_get_ip_address+0x8c>)
 8001bfe:	480a      	ldr	r0, [pc, #40]	; (8001c28 <net_get_ip_address+0x90>)
 8001c00:	f00d fb8c 	bl	800f31c <iprintf>
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4808      	ldr	r0, [pc, #32]	; (8001c2c <net_get_ip_address+0x94>)
 8001c0c:	f00d fb86 	bl	800f31c <iprintf>
        rc = NET_PARAM;
 8001c10:	f06f 0301 	mvn.w	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e000      	b.n	8001c1a <net_get_ip_address+0x82>
        break;
 8001c18:	bf00      	nop
    }
  }
  
  return rc;
 8001c1a:	697b      	ldr	r3, [r7, #20]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	08013e2c 	.word	0x08013e2c
 8001c28:	080133a8 	.word	0x080133a8
 8001c2c:	08013474 	.word	0x08013474

08001c30 <net_sock_create>:
  return rc;
}


int net_sock_create(net_hnd_t nethnd, net_sockhnd_t * sockhnd, net_proto_t proto)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	71fb      	strb	r3, [r7, #7]
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	617b      	str	r3, [r7, #20]
  switch(proto)
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d001      	beq.n	8001c4c <net_sock_create+0x1c>
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d10b      	bne.n	8001c64 <net_sock_create+0x34>
  {
    case NET_PROTO_TCP:
    case NET_PROTO_UDP:
      switch(ctxt->itf)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d116      	bne.n	8001c82 <net_sock_create+0x52>
      {
#ifdef USE_WIFI
        case NET_IF_WLAN:
          return net_sock_create_wifi(nethnd, sockhnd, proto);
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff fa60 	bl	8001120 <net_sock_create_wifi>
 8001c60:	4603      	mov	r3, r0
 8001c62:	e011      	b.n	8001c88 <net_sock_create+0x58>
#ifdef USE_MBED_TLS
    case NET_PROTO_TLS:
      return net_sock_create_mbedtls(nethnd, sockhnd, proto);
#endif /* USE_MBED_TLS */
    default:
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
 8001c64:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8001c68:	4909      	ldr	r1, [pc, #36]	; (8001c90 <net_sock_create+0x60>)
 8001c6a:	480a      	ldr	r0, [pc, #40]	; (8001c94 <net_sock_create+0x64>)
 8001c6c:	f00d fb56 	bl	800f31c <iprintf>
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	4808      	ldr	r0, [pc, #32]	; (8001c98 <net_sock_create+0x68>)
 8001c78:	f00d fb50 	bl	800f31c <iprintf>
      return NET_PARAM;
 8001c7c:	f06f 0301 	mvn.w	r3, #1
 8001c80:	e002      	b.n	8001c88 <net_sock_create+0x58>
      break;
 8001c82:	bf00      	nop
  }
  return NET_PARAM;
 8001c84:	f06f 0301 	mvn.w	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	08013e40 	.word	0x08013e40
 8001c94:	080133a8 	.word	0x080133a8
 8001c98:	080134ec 	.word	0x080134ec

08001c9c <net_sock_open>:


int net_sock_open(net_sockhnd_t sockhnd, const char * hostname, int remoteport, int localport)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	617b      	str	r3, [r7, #20]
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	689c      	ldr	r4, [r3, #8]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	47a0      	blx	r4
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd90      	pop	{r4, r7, pc}
	...

08001cc8 <net_sock_setopt>:


int net_sock_setopt(net_sockhnd_t sockhnd, const char * optname, const uint8_t * optbuf, size_t optlen)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  int rc = NET_PARAM;
 8001cd6:	f06f 0301 	mvn.w	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	61bb      	str	r3, [r7, #24]
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <net_sock_setopt+0x28>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <net_sock_setopt+0x28>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <net_sock_setopt+0x2a>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	75fb      	strb	r3, [r7, #23]
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
#endif /* USE_MBED_TLS */
  
  if (strcmp(optname, "sock_blocking") == 0)
 8001cfc:	4928      	ldr	r1, [pc, #160]	; (8001da0 <net_sock_setopt+0xd8>)
 8001cfe:	68b8      	ldr	r0, [r7, #8]
 8001d00:	f7fe fa7e 	bl	8000200 <strcmp>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <net_sock_setopt+0x5a>
  {
    if (!has_opt_data)
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <net_sock_setopt+0x5a>
    {
      sock->blocking = true;
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      rc = NET_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    }
  }
  if (strcmp(optname, "sock_noblocking") == 0)
 8001d22:	4920      	ldr	r1, [pc, #128]	; (8001da4 <net_sock_setopt+0xdc>)
 8001d24:	68b8      	ldr	r0, [r7, #8]
 8001d26:	f7fe fa6b 	bl	8000200 <strcmp>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <net_sock_setopt+0x80>
  {
    if (!has_opt_data)
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <net_sock_setopt+0x80>
    {
      sock->blocking = false;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      rc = NET_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
    }
  }
  if (strcmp(optname, "sock_read_timeout") == 0)
 8001d48:	4917      	ldr	r1, [pc, #92]	; (8001da8 <net_sock_setopt+0xe0>)
 8001d4a:	68b8      	ldr	r0, [r7, #8]
 8001d4c:	f7fe fa58 	bl	8000200 <strcmp>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10b      	bne.n	8001d6e <net_sock_setopt+0xa6>
  {
    if (has_opt_data)
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <net_sock_setopt+0xa6>
    {
      sock->read_timeout = atoi((char const *)optbuf);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f00c fb1f 	bl	800e3a0 <atoi>
 8001d62:	4603      	mov	r3, r0
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	84da      	strh	r2, [r3, #38]	; 0x26
      rc = NET_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
    }
  }
  if (strcmp(optname, "sock_write_timeout") == 0)
 8001d6e:	490f      	ldr	r1, [pc, #60]	; (8001dac <net_sock_setopt+0xe4>)
 8001d70:	68b8      	ldr	r0, [r7, #8]
 8001d72:	f7fe fa45 	bl	8000200 <strcmp>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10b      	bne.n	8001d94 <net_sock_setopt+0xcc>
  {
    if (has_opt_data)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <net_sock_setopt+0xcc>
    {
      sock->write_timeout = atoi((char const *)optbuf);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f00c fb0c 	bl	800e3a0 <atoi>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      rc = NET_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    }
  }
  return rc;
 8001d94:	69fb      	ldr	r3, [r7, #28]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	08013524 	.word	0x08013524
 8001da4:	08013534 	.word	0x08013534
 8001da8:	08013544 	.word	0x08013544
 8001dac:	08013558 	.word	0x08013558

08001db0 <net_sock_recv>:


int net_sock_recv(net_sockhnd_t sockhnd, uint8_t * const buf, size_t len)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	617b      	str	r3, [r7, #20]
  return (sock->methods.recv != NULL) ? sock->methods.recv(sockhnd, buf, len) : NET_PARAM;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <net_sock_recv+0x28>
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	4798      	blx	r3
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	e001      	b.n	8001ddc <net_sock_recv+0x2c>
 8001dd8:	f06f 0301 	mvn.w	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <net_sock_send>:
  return (sock->methods.recvfrom != NULL) ? sock->methods.recvfrom(sockhnd, buf, len, remoteaddress, remoteport) : NET_PARAM;
}


int net_sock_send(net_sockhnd_t sockhnd, const uint8_t * buf, size_t len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	617b      	str	r3, [r7, #20]
  return (sock->methods.send != NULL) ? sock->methods.send(sockhnd, buf, len) : NET_PARAM;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <net_sock_send+0x28>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	4798      	blx	r3
 8001e08:	4603      	mov	r3, r0
 8001e0a:	e001      	b.n	8001e10 <net_sock_send+0x2c>
 8001e0c:	f06f 0301 	mvn.w	r3, #1
} 
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <net_timeout_left_ms>:
 * @param   In:   now       Current index.
 * @param   In:   timeout   Target index.
 * @retval  Number of units from now to target.
 */
int32_t net_timeout_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  int32_t ret = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  uint32_t wrap_end = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  if (now < init)
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d202      	bcs.n	8001e3a <net_timeout_left_ms+0x22>
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", init, now);
    wrap_end = UINT32_MAX - init;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	617b      	str	r3, [r7, #20]
  }
  ret = wrap_end - (now - init) + timeout;
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	441a      	add	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]

  return ret;
 8001e4a:	693b      	ldr	r3, [r7, #16]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d112      	bne.n	8001e92 <SPI_WIFI_Init+0x3a>
  {

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2007      	movs	r0, #7
 8001e72:	f004 fca6 	bl	80067c2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001e76:	2007      	movs	r0, #7
 8001e78:	f004 fcbf 	bl	80067fa <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2033      	movs	r0, #51	; 0x33
 8001e82:	f004 fc9e 	bl	80067c2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001e86:	2033      	movs	r0, #51	; 0x33
 8001e88:	f004 fcb7 	bl	80067fa <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001e8c:	200a      	movs	r0, #10
 8001e8e:	f000 f9fb 	bl	8002288 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8001e92:	f000 f809 	bl	8001ea8 <SPI_WIFI_ResetModule>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001eae:	f003 fc71 	bl	8005794 <HAL_GetTick>
 8001eb2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ebe:	4830      	ldr	r0, [pc, #192]	; (8001f80 <SPI_WIFI_ResetModule+0xd8>)
 8001ec0:	f005 f8cc 	bl	800705c <HAL_GPIO_WritePin>
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	f003 fc71 	bl	80057ac <HAL_Delay>
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed0:	482b      	ldr	r0, [pc, #172]	; (8001f80 <SPI_WIFI_ResetModule+0xd8>)
 8001ed2:	f005 f8c3 	bl	800705c <HAL_GPIO_WritePin>
 8001ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eda:	f003 fc67 	bl	80057ac <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4827      	ldr	r0, [pc, #156]	; (8001f80 <SPI_WIFI_ResetModule+0xd8>)
 8001ee4:	f005 f8ba 	bl	800705c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001ee8:	200f      	movs	r0, #15
 8001eea:	f000 f9cd 	bl	8002288 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001eee:	e020      	b.n	8001f32 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi3 , &Prompt[count], 1, 0xFFFF);
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	463a      	mov	r2, r7
 8001ef4:	18d1      	adds	r1, r2, r3
 8001ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efa:	2201      	movs	r2, #1
 8001efc:	4821      	ldr	r0, [pc, #132]	; (8001f84 <SPI_WIFI_ResetModule+0xdc>)
 8001efe:	f008 f97c 	bl	800a1fa <HAL_SPI_Receive>
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	3302      	adds	r3, #2
 8001f0a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001f0c:	f003 fc42 	bl	8005794 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1a:	d202      	bcs.n	8001f22 <SPI_WIFI_ResetModule+0x7a>
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001f22:	2201      	movs	r2, #1
 8001f24:	2101      	movs	r1, #1
 8001f26:	4816      	ldr	r0, [pc, #88]	; (8001f80 <SPI_WIFI_ResetModule+0xd8>)
 8001f28:	f005 f898 	bl	800705c <HAL_GPIO_WritePin>
      return -1;
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	e021      	b.n	8001f76 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001f32:	2102      	movs	r1, #2
 8001f34:	4812      	ldr	r0, [pc, #72]	; (8001f80 <SPI_WIFI_ResetModule+0xd8>)
 8001f36:	f005 f879 	bl	800702c <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d0d7      	beq.n	8001ef0 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8001f40:	2201      	movs	r2, #1
 8001f42:	2101      	movs	r1, #1
 8001f44:	480e      	ldr	r0, [pc, #56]	; (8001f80 <SPI_WIFI_ResetModule+0xd8>)
 8001f46:	f005 f889 	bl	800705c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001f4a:	783b      	ldrb	r3, [r7, #0]
 8001f4c:	2b15      	cmp	r3, #21
 8001f4e:	d10e      	bne.n	8001f6e <SPI_WIFI_ResetModule+0xc6>
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b15      	cmp	r3, #21
 8001f54:	d10b      	bne.n	8001f6e <SPI_WIFI_ResetModule+0xc6>
 8001f56:	78bb      	ldrb	r3, [r7, #2]
 8001f58:	2b0d      	cmp	r3, #13
 8001f5a:	d108      	bne.n	8001f6e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001f5e:	2b0a      	cmp	r3, #10
 8001f60:	d105      	bne.n	8001f6e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001f62:	793b      	ldrb	r3, [r7, #4]
 8001f64:	2b3e      	cmp	r3, #62	; 0x3e
 8001f66:	d102      	bne.n	8001f6e <SPI_WIFI_ResetModule+0xc6>
 8001f68:	797b      	ldrb	r3, [r7, #5]
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d002      	beq.n	8001f74 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	e000      	b.n	8001f76 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	48001000 	.word	0x48001000
 8001f84:	20000418 	.word	0x20000418

08001f88 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi3 );
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <SPI_WIFI_DeInit+0x10>)
 8001f8e:	f008 f90c 	bl	800a1aa <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000418 	.word	0x20000418

08001f9c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001fa4:	f003 fbf6 	bl	8005794 <HAL_GetTick>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001fac:	e00a      	b.n	8001fc4 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001fae:	f003 fbf1 	bl	8005794 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad2      	subs	r2, r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d902      	bls.n	8001fc4 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e007      	b.n	8001fd4 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <wait_cmddata_rdy_high+0x40>)
 8001fc8:	f005 f830 	bl	800702c <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d1ed      	bne.n	8001fae <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	48001000 	.word	0x48001000

08001fe0 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001fe8:	f003 fbd4 	bl	8005794 <HAL_GetTick>
 8001fec:	4603      	mov	r3, r0
 8001fee:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001ff0:	e00a      	b.n	8002008 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001ff2:	f003 fbcf 	bl	8005794 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad2      	subs	r2, r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d902      	bls.n	8002008 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	e004      	b.n	8002012 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <wait_cmddata_rdy_rising_event+0x3c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d0f0      	beq.n	8001ff2 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8002010:	2300      	movs	r3, #0
#endif
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000214 	.word	0x20000214

08002020 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002028:	f003 fbb4 	bl	8005794 <HAL_GetTick>
 800202c:	4603      	mov	r3, r0
 800202e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8002030:	e00a      	b.n	8002048 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002032:	f003 fbaf 	bl	8005794 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad2      	subs	r2, r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	d902      	bls.n	8002048 <wait_spi_rx_event+0x28>
    {
      return -1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e004      	b.n	8002052 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <wait_spi_rx_event+0x3c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d0f0      	beq.n	8002032 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002050:	2300      	movs	r3, #0
#endif
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000020c 	.word	0x2000020c

08002060 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002068:	f003 fb94 	bl	8005794 <HAL_GetTick>
 800206c:	4603      	mov	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8002070:	e00a      	b.n	8002088 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002072:	f003 fb8f 	bl	8005794 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad2      	subs	r2, r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	d902      	bls.n	8002088 <wait_spi_tx_event+0x28>
    {
      return -1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	e004      	b.n	8002092 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <wait_spi_tx_event+0x3c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d0f0      	beq.n	8002072 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002090:	2300      	movs	r3, #0
#endif
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000210 	.word	0x20000210

080020a0 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	460b      	mov	r3, r1
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 80020b2:	2201      	movs	r2, #1
 80020b4:	2101      	movs	r1, #1
 80020b6:	4834      	ldr	r0, [pc, #208]	; (8002188 <SPI_WIFI_ReceiveData+0xe8>)
 80020b8:	f004 ffd0 	bl	800705c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 f8e3 	bl	8002288 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff8b 	bl	8001fe0 <wait_cmddata_rdy_rising_event>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	da02      	bge.n	80020d6 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80020d0:	f06f 0302 	mvn.w	r3, #2
 80020d4:	e054      	b.n	8002180 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80020d6:	2200      	movs	r2, #0
 80020d8:	2101      	movs	r1, #1
 80020da:	482b      	ldr	r0, [pc, #172]	; (8002188 <SPI_WIFI_ReceiveData+0xe8>)
 80020dc:	f004 ffbe 	bl	800705c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80020e0:	200f      	movs	r0, #15
 80020e2:	f000 f8d1 	bl	8002288 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80020e6:	e03d      	b.n	8002164 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 80020e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80020ec:	897b      	ldrh	r3, [r7, #10]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	db02      	blt.n	80020f8 <SPI_WIFI_ReceiveData+0x58>
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d13c      	bne.n	8002172 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <SPI_WIFI_ReceiveData+0xec>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi3, tmp, 1) != HAL_OK) {
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	2201      	movs	r2, #1
 8002104:	4619      	mov	r1, r3
 8002106:	4822      	ldr	r0, [pc, #136]	; (8002190 <SPI_WIFI_ReceiveData+0xf0>)
 8002108:	f008 fc48 	bl	800a99c <HAL_SPI_Receive_IT>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8002112:	2201      	movs	r2, #1
 8002114:	2101      	movs	r1, #1
 8002116:	481c      	ldr	r0, [pc, #112]	; (8002188 <SPI_WIFI_ReceiveData+0xe8>)
 8002118:	f004 ffa0 	bl	800705c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	e02e      	b.n	8002180 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff7b 	bl	8002020 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800212a:	7d3a      	ldrb	r2, [r7, #20]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3301      	adds	r3, #1
 8002134:	7d7a      	ldrb	r2, [r7, #21]
 8002136:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002138:	8afb      	ldrh	r3, [r7, #22]
 800213a:	3302      	adds	r3, #2
 800213c:	b29b      	uxth	r3, r3
 800213e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3302      	adds	r3, #2
 8002144:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8002146:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800214a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800214e:	db09      	blt.n	8002164 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002150:	2201      	movs	r2, #1
 8002152:	2101      	movs	r1, #1
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <SPI_WIFI_ReceiveData+0xe8>)
 8002156:	f004 ff81 	bl	800705c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800215a:	f7ff fea5 	bl	8001ea8 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800215e:	f06f 0303 	mvn.w	r3, #3
 8002162:	e00d      	b.n	8002180 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002164:	2102      	movs	r1, #2
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <SPI_WIFI_ReceiveData+0xe8>)
 8002168:	f004 ff60 	bl	800702c <HAL_GPIO_ReadPin>
 800216c:	4603      	mov	r3, r0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d0ba      	beq.n	80020e8 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8002172:	2201      	movs	r2, #1
 8002174:	2101      	movs	r1, #1
 8002176:	4804      	ldr	r0, [pc, #16]	; (8002188 <SPI_WIFI_ReceiveData+0xe8>)
 8002178:	f004 ff70 	bl	800705c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800217c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	48001000 	.word	0x48001000
 800218c:	2000020c 	.word	0x2000020c
 8002190:	20000418 	.word	0x20000418

08002194 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	460b      	mov	r3, r1
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout)<0)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fef9 	bl	8001f9c <wait_cmddata_rdy_high>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da02      	bge.n	80021b6 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295
 80021b4:	e04f      	b.n	8002256 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <SPI_WIFI_SendData+0xcc>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80021bc:	2200      	movs	r2, #0
 80021be:	2101      	movs	r1, #1
 80021c0:	4828      	ldr	r0, [pc, #160]	; (8002264 <SPI_WIFI_SendData+0xd0>)
 80021c2:	f004 ff4b 	bl	800705c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80021c6:	200f      	movs	r0, #15
 80021c8:	f000 f85e 	bl	8002288 <SPI_WIFI_DelayUs>
  if (len > 1)
 80021cc:	897b      	ldrh	r3, [r7, #10]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d919      	bls.n	8002206 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80021d2:	4b25      	ldr	r3, [pc, #148]	; (8002268 <SPI_WIFI_SendData+0xd4>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, (uint8_t *)pdata , len/2) != HAL_OK)
 80021d8:	897b      	ldrh	r3, [r7, #10]
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	b29b      	uxth	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	4822      	ldr	r0, [pc, #136]	; (800226c <SPI_WIFI_SendData+0xd8>)
 80021e4:	f008 fb4c 	bl	800a880 <HAL_SPI_Transmit_IT>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80021ee:	2201      	movs	r2, #1
 80021f0:	2101      	movs	r1, #1
 80021f2:	481c      	ldr	r0, [pc, #112]	; (8002264 <SPI_WIFI_SendData+0xd0>)
 80021f4:	f004 ff32 	bl	800705c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
 80021fc:	e02b      	b.n	8002256 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff2d 	bl	8002060 <wait_spi_tx_event>
  }

  if ( len & 1)
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8002210:	897b      	ldrh	r3, [r7, #10]
 8002212:	3b01      	subs	r3, #1
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800221c:	230a      	movs	r3, #10
 800221e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <SPI_WIFI_SendData+0xd4>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, Padding, 1) != HAL_OK)
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	2201      	movs	r2, #1
 800222c:	4619      	mov	r1, r3
 800222e:	480f      	ldr	r0, [pc, #60]	; (800226c <SPI_WIFI_SendData+0xd8>)
 8002230:	f008 fb26 	bl	800a880 <HAL_SPI_Transmit_IT>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800223a:	2201      	movs	r2, #1
 800223c:	2101      	movs	r1, #1
 800223e:	4809      	ldr	r0, [pc, #36]	; (8002264 <SPI_WIFI_SendData+0xd0>)
 8002240:	f004 ff0c 	bl	800705c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	e005      	b.n	8002256 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff07 	bl	8002060 <wait_spi_tx_event>
    
  }
  return len;
 8002252:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000214 	.word	0x20000214
 8002264:	48001000 	.word	0x48001000
 8002268:	20000210 	.word	0x20000210
 800226c:	20000418 	.word	0x20000418

08002270 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f003 fa97 	bl	80057ac <HAL_Delay>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <SPI_WIFI_DelayUs+0x94>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d122      	bne.n	80022e6 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <SPI_WIFI_DelayUs+0x98>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <SPI_WIFI_DelayUs+0x9c>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	099b      	lsrs	r3, r3, #6
 80022ac:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80022b6:	f003 fa6d 	bl	8005794 <HAL_GetTick>
 80022ba:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80022bc:	e002      	b.n	80022c4 <SPI_WIFI_DelayUs+0x3c>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 80022ca:	f003 fa63 	bl	8005794 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	4a11      	ldr	r2, [pc, #68]	; (800231c <SPI_WIFI_DelayUs+0x94>)
 80022d6:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <SPI_WIFI_DelayUs+0x94>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <SPI_WIFI_DelayUs+0x5e>
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <SPI_WIFI_DelayUs+0x94>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <SPI_WIFI_DelayUs+0x98>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <SPI_WIFI_DelayUs+0xa0>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	0c9a      	lsrs	r2, r3, #18
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <SPI_WIFI_DelayUs+0x94>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002306:	e002      	b.n	800230e <SPI_WIFI_DelayUs+0x86>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3b01      	subs	r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f9      	bne.n	8002308 <SPI_WIFI_DelayUs+0x80>
  return;
 8002314:	bf00      	nop
}
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000218 	.word	0x20000218
 8002320:	20000000 	.word	0x20000000
 8002324:	10624dd3 	.word	0x10624dd3
 8002328:	431bde83 	.word	0x431bde83

0800232c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_SPI_RxCpltCallback+0x24>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <HAL_SPI_RxCpltCallback+0x24>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
  }
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2000020c 	.word	0x2000020c

08002354 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_SPI_TxCpltCallback+0x24>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_SPI_TxCpltCallback+0x24>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000210 	.word	0x20000210

0800237c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SPI_WIFI_ISR+0x1c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <SPI_WIFI_ISR+0x1c>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
   }
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	20000214 	.word	0x20000214

0800239c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800239c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023a0:	b0c4      	sub	sp, #272	; 0x110
 80023a2:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	// Global variable initialization
	char pcRouterSSID_tmp[] = "your SSID";
 80023a4:	4aa3      	ldr	r2, [pc, #652]	; (8002634 <main+0x298>)
 80023a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ac:	c303      	stmia	r3!, {r0, r1}
 80023ae:	801a      	strh	r2, [r3, #0]
	memcpy(pcRouterSSID, pcRouterSSID_tmp, sizeof(pcRouterSSID_tmp));
 80023b0:	4ba1      	ldr	r3, [pc, #644]	; (8002638 <main+0x29c>)
 80023b2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80023b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80023b8:	c303      	stmia	r3!, {r0, r1}
 80023ba:	801a      	strh	r2, [r3, #0]
	char pcRouterPWR_tmp[] = "your PASSWORD";
 80023bc:	4b9f      	ldr	r3, [pc, #636]	; (800263c <main+0x2a0>)
 80023be:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80023c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c4:	c407      	stmia	r4!, {r0, r1, r2}
 80023c6:	8023      	strh	r3, [r4, #0]
	memcpy(pcRouterPWR, pcRouterPWR_tmp, sizeof(pcRouterPWR_tmp));
 80023c8:	4b9d      	ldr	r3, [pc, #628]	; (8002640 <main+0x2a4>)
 80023ca:	461c      	mov	r4, r3
 80023cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023d2:	c407      	stmia	r4!, {r0, r1, r2}
 80023d4:	8023      	strh	r3, [r4, #0]
	enRoutreEncryptiontype = WIFI_ENCRYPTION_WPA2_PSK;
 80023d6:	4b9b      	ldr	r3, [pc, #620]	; (8002644 <main+0x2a8>)
 80023d8:	2203      	movs	r2, #3
 80023da:	701a      	strb	r2, [r3, #0]
	float fTemperature;
	char pcMsg[50];
	int iMsgSize;
	MQTTPacket_connectData xMqttOptions = MQTTPacket_connectData_initializer;
 80023dc:	4a9a      	ldr	r2, [pc, #616]	; (8002648 <main+0x2ac>)
 80023de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e2:	4611      	mov	r1, r2
 80023e4:	2258      	movs	r2, #88	; 0x58
 80023e6:	4618      	mov	r0, r3
 80023e8:	f00c f828 	bl	800e43c <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ec:	f003 f96a 	bl	80056c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023f0:	f000 f9ca 	bl	8002788 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80023f4:	f000 fa2a 	bl	800284c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f8:	f000 fd80 	bl	8002efc <MX_GPIO_Init>
  MX_ADC1_Init();
 80023fc:	f000 fa56 	bl	80028ac <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8002400:	f000 fab8 	bl	8002974 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8002404:	f000 faee 	bl	80029e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002408:	f000 fb2c 	bl	8002a64 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800240c:	f000 fb6a 	bl	8002ae4 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8002410:	f000 fbbe 	bl	8002b90 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002414:	f000 fbfa 	bl	8002c0c <MX_SPI3_Init>
  MX_UART4_Init();
 8002418:	f000 fc36 	bl	8002c88 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800241c:	f000 fc80 	bl	8002d20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002420:	f000 fcca 	bl	8002db8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002424:	f000 fd16 	bl	8002e54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8002428:	f000 fd60 	bl	8002eec <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  // Sensor Initialization
  if (BSP_TSENSOR_Init() != TSENSOR_OK)
 800242c:	f001 fe6a 	bl	8004104 <BSP_TSENSOR_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <main+0xa0>
    {
  	  printf("BSP_TSENSOR_Init() failed\n");
 8002436:	4885      	ldr	r0, [pc, #532]	; (800264c <main+0x2b0>)
 8002438:	f00d f80c 	bl	800f454 <puts>
    }

  // Wifi Initialization
  //printf("ssid:%s pwd:%s\n\r", pcRouterSSID, pcRouterPWR);
  printf("***  Init Network  ***\n");
 800243c:	4884      	ldr	r0, [pc, #528]	; (8002650 <main+0x2b4>)
 800243e:	f00d f809 	bl	800f454 <puts>
  if(net_init(&nethnd, NET_IF, (net_if_init)) == NET_OK)
 8002442:	4a84      	ldr	r2, [pc, #528]	; (8002654 <main+0x2b8>)
 8002444:	2101      	movs	r1, #1
 8002446:	4884      	ldr	r0, [pc, #528]	; (8002658 <main+0x2bc>)
 8002448:	f7ff fb42 	bl	8001ad0 <net_init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d174      	bne.n	800253c <main+0x1a0>
  {
	  printf("net_init: Success\n");
 8002452:	4882      	ldr	r0, [pc, #520]	; (800265c <main+0x2c0>)
 8002454:	f00c fffe 	bl	800f454 <puts>
	  if(net_get_ip_address(nethnd, &xLocalIpv4) == NET_OK)
 8002458:	4b7f      	ldr	r3, [pc, #508]	; (8002658 <main+0x2bc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4980      	ldr	r1, [pc, #512]	; (8002660 <main+0x2c4>)
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fb9a 	bl	8001b98 <net_get_ip_address>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d164      	bne.n	8002534 <main+0x198>
	  {
		  switch(xLocalIpv4.ipv)
 800246a:	4b7d      	ldr	r3, [pc, #500]	; (8002660 <main+0x2c4>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <main+0xdc>
 8002472:	2b01      	cmp	r3, #1
 8002474:	d011      	beq.n	800249a <main+0xfe>
 8002476:	e059      	b.n	800252c <main+0x190>
		  {
			  case NET_IP_V4:
				  printf("My IPv4=>%d.%d.%d.%d\r\n", xLocalIpv4.ip[12], xLocalIpv4.ip[13], xLocalIpv4.ip[14], xLocalIpv4.ip[15]);
 8002478:	4b79      	ldr	r3, [pc, #484]	; (8002660 <main+0x2c4>)
 800247a:	7b5b      	ldrb	r3, [r3, #13]
 800247c:	4619      	mov	r1, r3
 800247e:	4b78      	ldr	r3, [pc, #480]	; (8002660 <main+0x2c4>)
 8002480:	7b9b      	ldrb	r3, [r3, #14]
 8002482:	461a      	mov	r2, r3
 8002484:	4b76      	ldr	r3, [pc, #472]	; (8002660 <main+0x2c4>)
 8002486:	7bdb      	ldrb	r3, [r3, #15]
 8002488:	4618      	mov	r0, r3
 800248a:	4b75      	ldr	r3, [pc, #468]	; (8002660 <main+0x2c4>)
 800248c:	7c1b      	ldrb	r3, [r3, #16]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	4603      	mov	r3, r0
 8002492:	4874      	ldr	r0, [pc, #464]	; (8002664 <main+0x2c8>)
 8002494:	f00c ff42 	bl	800f31c <iprintf>
				  break;
 8002498:	e053      	b.n	8002542 <main+0x1a6>
			  case NET_IP_V6:
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 800249a:	4b71      	ldr	r3, [pc, #452]	; (8002660 <main+0x2c4>)
 800249c:	785b      	ldrb	r3, [r3, #1]
 800249e:	469c      	mov	ip, r3
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <main+0x2c4>)
 80024a2:	789b      	ldrb	r3, [r3, #2]
 80024a4:	469e      	mov	lr, r3
						  , xLocalIpv4.ip[2], xLocalIpv4.ip[3]\
 80024a6:	4b6e      	ldr	r3, [pc, #440]	; (8002660 <main+0x2c4>)
 80024a8:	78db      	ldrb	r3, [r3, #3]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024aa:	4698      	mov	r8, r3
						  , xLocalIpv4.ip[2], xLocalIpv4.ip[3]\
 80024ac:	4b6c      	ldr	r3, [pc, #432]	; (8002660 <main+0x2c4>)
 80024ae:	791b      	ldrb	r3, [r3, #4]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024b0:	4618      	mov	r0, r3
						  , xLocalIpv4.ip[4], xLocalIpv4.ip[5]\
 80024b2:	4b6b      	ldr	r3, [pc, #428]	; (8002660 <main+0x2c4>)
 80024b4:	795b      	ldrb	r3, [r3, #5]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024b6:	461c      	mov	r4, r3
						  , xLocalIpv4.ip[4], xLocalIpv4.ip[5]\
 80024b8:	4b69      	ldr	r3, [pc, #420]	; (8002660 <main+0x2c4>)
 80024ba:	799b      	ldrb	r3, [r3, #6]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024bc:	461d      	mov	r5, r3
						  , xLocalIpv4.ip[6], xLocalIpv4.ip[7]\
 80024be:	4b68      	ldr	r3, [pc, #416]	; (8002660 <main+0x2c4>)
 80024c0:	79db      	ldrb	r3, [r3, #7]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024c2:	461e      	mov	r6, r3
						  , xLocalIpv4.ip[6], xLocalIpv4.ip[7]\
 80024c4:	4b66      	ldr	r3, [pc, #408]	; (8002660 <main+0x2c4>)
 80024c6:	7a1b      	ldrb	r3, [r3, #8]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024c8:	617b      	str	r3, [r7, #20]
						  , xLocalIpv4.ip[8], xLocalIpv4.ip[9]\
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <main+0x2c4>)
 80024cc:	7a5b      	ldrb	r3, [r3, #9]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024ce:	613b      	str	r3, [r7, #16]
						  , xLocalIpv4.ip[8], xLocalIpv4.ip[9]\
 80024d0:	4b63      	ldr	r3, [pc, #396]	; (8002660 <main+0x2c4>)
 80024d2:	7a9b      	ldrb	r3, [r3, #10]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024d4:	60fb      	str	r3, [r7, #12]
						  , xLocalIpv4.ip[10], xLocalIpv4.ip[11]\
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <main+0x2c4>)
 80024d8:	7adb      	ldrb	r3, [r3, #11]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024da:	60bb      	str	r3, [r7, #8]
						  , xLocalIpv4.ip[10], xLocalIpv4.ip[11]\
 80024dc:	4b60      	ldr	r3, [pc, #384]	; (8002660 <main+0x2c4>)
 80024de:	7b1b      	ldrb	r3, [r3, #12]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024e0:	607b      	str	r3, [r7, #4]
						  , xLocalIpv4.ip[12], xLocalIpv4.ip[13]\
 80024e2:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <main+0x2c4>)
 80024e4:	7b5b      	ldrb	r3, [r3, #13]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024e6:	603b      	str	r3, [r7, #0]
						  , xLocalIpv4.ip[12], xLocalIpv4.ip[13]\
 80024e8:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <main+0x2c4>)
 80024ea:	7b9b      	ldrb	r3, [r3, #14]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024ec:	4619      	mov	r1, r3
						  , xLocalIpv4.ip[14], xLocalIpv4.ip[15]);
 80024ee:	4b5c      	ldr	r3, [pc, #368]	; (8002660 <main+0x2c4>)
 80024f0:	7bdb      	ldrb	r3, [r3, #15]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024f2:	461a      	mov	r2, r3
						  , xLocalIpv4.ip[14], xLocalIpv4.ip[15]);
 80024f4:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <main+0x2c4>)
 80024f6:	7c1b      	ldrb	r3, [r3, #16]
				  printf("My IPv6=>%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X.%02X%02X\r\n", xLocalIpv4.ip[0], xLocalIpv4.ip[1]\
 80024f8:	930c      	str	r3, [sp, #48]	; 0x30
 80024fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80024fc:	910a      	str	r1, [sp, #40]	; 0x28
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	9209      	str	r2, [sp, #36]	; 0x24
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	9208      	str	r2, [sp, #32]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	9207      	str	r2, [sp, #28]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	9206      	str	r2, [sp, #24]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	9205      	str	r2, [sp, #20]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	9304      	str	r3, [sp, #16]
 8002516:	9603      	str	r6, [sp, #12]
 8002518:	9502      	str	r5, [sp, #8]
 800251a:	9401      	str	r4, [sp, #4]
 800251c:	9000      	str	r0, [sp, #0]
 800251e:	4643      	mov	r3, r8
 8002520:	4672      	mov	r2, lr
 8002522:	4661      	mov	r1, ip
 8002524:	4850      	ldr	r0, [pc, #320]	; (8002668 <main+0x2cc>)
 8002526:	f00c fef9 	bl	800f31c <iprintf>
				  break;
 800252a:	e00a      	b.n	8002542 <main+0x1a6>
			  default:
				  printf("Undefined IP version\r\n");
 800252c:	484f      	ldr	r0, [pc, #316]	; (800266c <main+0x2d0>)
 800252e:	f00c ff91 	bl	800f454 <puts>
				  break;
 8002532:	e006      	b.n	8002542 <main+0x1a6>
		  }
	  }
	  else
	  {
		  printf("couldn't get IP address\r\n");
 8002534:	484e      	ldr	r0, [pc, #312]	; (8002670 <main+0x2d4>)
 8002536:	f00c ff8d 	bl	800f454 <puts>
 800253a:	e002      	b.n	8002542 <main+0x1a6>
	  }

  }
  else
  {
	  printf("net_init: Failed\n");
 800253c:	484d      	ldr	r0, [pc, #308]	; (8002674 <main+0x2d8>)
 800253e:	f00c ff89 	bl	800f454 <puts>
  }

  // create socket
  if(net_sock_create(nethnd, &xSockhnd, NET_PROTO_TCP) == NET_OK)
 8002542:	4b45      	ldr	r3, [pc, #276]	; (8002658 <main+0x2bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2201      	movs	r2, #1
 8002548:	494b      	ldr	r1, [pc, #300]	; (8002678 <main+0x2dc>)
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fb70 	bl	8001c30 <net_sock_create>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <main+0x1c2>
  {
	  printf("Socket successfully created\r\n");
 8002556:	4849      	ldr	r0, [pc, #292]	; (800267c <main+0x2e0>)
 8002558:	f00c ff7c 	bl	800f454 <puts>
 800255c:	e002      	b.n	8002564 <main+0x1c8>
  }
  else
  {
	  printf("Failed to create socket\r\n");
 800255e:	4848      	ldr	r0, [pc, #288]	; (8002680 <main+0x2e4>)
 8002560:	f00c ff78 	bl	800f454 <puts>
  }

  if(net_sock_open(xSockhnd, HOST_DNS, HOST_PORT, LOCAL_PORT) == NET_OK)
 8002564:	4b44      	ldr	r3, [pc, #272]	; (8002678 <main+0x2dc>)
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	2300      	movs	r3, #0
 800256a:	f240 725b 	movw	r2, #1883	; 0x75b
 800256e:	4945      	ldr	r1, [pc, #276]	; (8002684 <main+0x2e8>)
 8002570:	f7ff fb94 	bl	8001c9c <net_sock_open>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <main+0x1e6>
	{
	  printf("Connect to host successfully\r\n");
 800257a:	4843      	ldr	r0, [pc, #268]	; (8002688 <main+0x2ec>)
 800257c:	f00c ff6a 	bl	800f454 <puts>
 8002580:	e002      	b.n	8002588 <main+0x1ec>
	}
	else
	{
	  printf("Failed to connect to host\r\n");
 8002582:	4842      	ldr	r0, [pc, #264]	; (800268c <main+0x2f0>)
 8002584:	f00c ff66 	bl	800f454 <puts>
	}

  if(net_sock_setopt(xSockhnd, "sock_noblocking", NULL, 0) == NET_OK)
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <main+0x2dc>)
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	2300      	movs	r3, #0
 800258e:	2200      	movs	r2, #0
 8002590:	493f      	ldr	r1, [pc, #252]	; (8002690 <main+0x2f4>)
 8002592:	f7ff fb99 	bl	8001cc8 <net_sock_setopt>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <main+0x208>
	{
	  printf("Successfully set Socket option to non blocking\r\n");
 800259c:	483d      	ldr	r0, [pc, #244]	; (8002694 <main+0x2f8>)
 800259e:	f00c ff59 	bl	800f454 <puts>
 80025a2:	e002      	b.n	80025aa <main+0x20e>
	}
	else
	{
		printf("Failed to set Socket option to non blocking\r\n");
 80025a4:	483c      	ldr	r0, [pc, #240]	; (8002698 <main+0x2fc>)
 80025a6:	f00c ff55 	bl	800f454 <puts>
	}

  	  // Set MQTT client configuration
  xNetwork.my_socket = xSockhnd;
 80025aa:	4b33      	ldr	r3, [pc, #204]	; (8002678 <main+0x2dc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a3b      	ldr	r2, [pc, #236]	; (800269c <main+0x300>)
 80025b0:	6013      	str	r3, [r2, #0]
  xNetwork.mqttread = iMqttRead;
 80025b2:	4b3a      	ldr	r3, [pc, #232]	; (800269c <main+0x300>)
 80025b4:	4a3a      	ldr	r2, [pc, #232]	; (80026a0 <main+0x304>)
 80025b6:	605a      	str	r2, [r3, #4]
  xNetwork.mqttwrite = iMqttWrite;
 80025b8:	4b38      	ldr	r3, [pc, #224]	; (800269c <main+0x300>)
 80025ba:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <main+0x308>)
 80025bc:	609a      	str	r2, [r3, #8]

  MQTTClientInit(&xMqttClient, &xNetwork, MQTT_CMD_TIMEOUT, pucMqttWriteBuffer, MQTT_WRITE_BUFFER_SIZE, pucMqttReadBuffer, MQTT_READ_BUFFER_SIZE);
 80025be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c2:	9302      	str	r3, [sp, #8]
 80025c4:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <main+0x30c>)
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <main+0x310>)
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4931      	ldr	r1, [pc, #196]	; (800269c <main+0x300>)
 80025d6:	4836      	ldr	r0, [pc, #216]	; (80026b0 <main+0x314>)
 80025d8:	f00a fa18 	bl	800ca0c <MQTTClientInit>

  strcpy(xMqttOptions.clientID.cstring, "stm32MqttClientId\0");
 80025dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025de:	4a35      	ldr	r2, [pc, #212]	; (80026b4 <main+0x318>)
 80025e0:	461d      	mov	r5, r3
 80025e2:	4614      	mov	r4, r2
 80025e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e6:	6028      	str	r0, [r5, #0]
 80025e8:	6069      	str	r1, [r5, #4]
 80025ea:	60aa      	str	r2, [r5, #8]
 80025ec:	60eb      	str	r3, [r5, #12]
 80025ee:	8823      	ldrh	r3, [r4, #0]
 80025f0:	822b      	strh	r3, [r5, #16]
  //xMqttOptions.username.cstring = NULL;
  //xMqttOptions.password.cstring = NULL;

  if(MQTTConnect(&xMqttClient, &xMqttOptions) != MQSUCCESS)
 80025f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025f6:	4619      	mov	r1, r3
 80025f8:	482d      	ldr	r0, [pc, #180]	; (80026b0 <main+0x314>)
 80025fa:	f00a fe4b 	bl	800d294 <MQTTConnect>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <main+0x278>
  {
	  printf("Failed to connect to Broker\r\n");
 8002604:	482c      	ldr	r0, [pc, #176]	; (80026b8 <main+0x31c>)
 8002606:	f00c ff25 	bl	800f454 <puts>
	  while(1)
	  {
		  HAL_Delay(5000);
 800260a:	f241 3088 	movw	r0, #5000	; 0x1388
 800260e:	f003 f8cd 	bl	80057ac <HAL_Delay>
 8002612:	e7fa      	b.n	800260a <main+0x26e>
	  }
  }
  else
  {
	  printf("Successfully connected to Broker\r\n");
 8002614:	4829      	ldr	r0, [pc, #164]	; (80026bc <main+0x320>)
 8002616:	f00c ff1d 	bl	800f454 <puts>
  }

  // MQTT Subscription
  if(MQTTSubscribe(&xMqttClient, "stm32subtopic", QOS0, (vMqttMessageHandler)) != MQSUCCESS)
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <main+0x324>)
 800261c:	2200      	movs	r2, #0
 800261e:	4929      	ldr	r1, [pc, #164]	; (80026c4 <main+0x328>)
 8002620:	4823      	ldr	r0, [pc, #140]	; (80026b0 <main+0x314>)
 8002622:	f00a ff40 	bl	800d4a6 <MQTTSubscribe>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d04f      	beq.n	80026cc <main+0x330>
  {
	  printf("Failed to subscribe to topic stm32subtopic\r\n");
 800262c:	4826      	ldr	r0, [pc, #152]	; (80026c8 <main+0x32c>)
 800262e:	f00c ff11 	bl	800f454 <puts>
 8002632:	e04e      	b.n	80026d2 <main+0x336>
 8002634:	08013904 	.word	0x08013904
 8002638:	200006bc 	.word	0x200006bc
 800263c:	08013910 	.word	0x08013910
 8002640:	20000720 	.word	0x20000720
 8002644:	20000784 	.word	0x20000784
 8002648:	08013920 	.word	0x08013920
 800264c:	0801356c 	.word	0x0801356c
 8002650:	08013588 	.word	0x08013588
 8002654:	0800196d 	.word	0x0800196d
 8002658:	20000788 	.word	0x20000788
 800265c:	080135a0 	.word	0x080135a0
 8002660:	2000078c 	.word	0x2000078c
 8002664:	080135b4 	.word	0x080135b4
 8002668:	080135cc 	.word	0x080135cc
 800266c:	08013620 	.word	0x08013620
 8002670:	08013638 	.word	0x08013638
 8002674:	08013654 	.word	0x08013654
 8002678:	200007a0 	.word	0x200007a0
 800267c:	08013668 	.word	0x08013668
 8002680:	08013688 	.word	0x08013688
 8002684:	080136a4 	.word	0x080136a4
 8002688:	080136b8 	.word	0x080136b8
 800268c:	080136d8 	.word	0x080136d8
 8002690:	080136f4 	.word	0x080136f4
 8002694:	08013704 	.word	0x08013704
 8002698:	08013734 	.word	0x08013734
 800269c:	200007a4 	.word	0x200007a4
 80026a0:	080031b1 	.word	0x080031b1
 80026a4:	080031f1 	.word	0x080031f1
 80026a8:	20000818 	.word	0x20000818
 80026ac:	20000c00 	.word	0x20000c00
 80026b0:	200007b0 	.word	0x200007b0
 80026b4:	08013764 	.word	0x08013764
 80026b8:	08013778 	.word	0x08013778
 80026bc:	08013798 	.word	0x08013798
 80026c0:	08003231 	.word	0x08003231
 80026c4:	080137bc 	.word	0x080137bc
 80026c8:	080137cc 	.word	0x080137cc
  }
  else
  {
	  printf("Successfully subscribed to a topic stm32subtopic\r\n");
 80026cc:	4824      	ldr	r0, [pc, #144]	; (8002760 <main+0x3c4>)
 80026ce:	f00c fec1 	bl	800f454 <puts>
  }
  if(MQTTSubscribe(&xMqttClient, "stm32LedController", QOS0, (vMqttMessageHandler_Topic_LedController)) != MQSUCCESS)
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <main+0x3c8>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	4924      	ldr	r1, [pc, #144]	; (8002768 <main+0x3cc>)
 80026d8:	4824      	ldr	r0, [pc, #144]	; (800276c <main+0x3d0>)
 80026da:	f00a fee4 	bl	800d4a6 <MQTTSubscribe>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <main+0x350>
  {
	  printf("Failed to subscribe to topic stm32LedController\r\n");
 80026e4:	4822      	ldr	r0, [pc, #136]	; (8002770 <main+0x3d4>)
 80026e6:	f00c feb5 	bl	800f454 <puts>
 80026ea:	e002      	b.n	80026f2 <main+0x356>
  }
  else
  {
  	  printf("Successfully subscribed to a topic stm32LedController\r\n");
 80026ec:	4821      	ldr	r0, [pc, #132]	; (8002774 <main+0x3d8>)
 80026ee:	f00c feb1 	bl	800f454 <puts>
  }

  // set MQTT message configuration
  MQTTMessage xMqttMsg;
  memset(&xMqttMsg, 0, sizeof(MQTTMessage));
 80026f2:	f107 0318 	add.w	r3, r7, #24
 80026f6:	2210      	movs	r2, #16
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00b feac 	bl	800e458 <memset>
  xMqttMsg.qos = QOS0;
 8002700:	2300      	movs	r3, #0
 8002702:	763b      	strb	r3, [r7, #24]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fTemperature = BSP_TSENSOR_ReadTemp();
 8002704:	f001 fd1a 	bl	800413c <BSP_TSENSOR_ReadTemp>
 8002708:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
	  iMsgSize = sprintf(pcMsg, "Temperature = %.2f\n", fTemperature);
 800270c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002710:	f7fd ff42 	bl	8000598 <__aeabi_f2d>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800271c:	4916      	ldr	r1, [pc, #88]	; (8002778 <main+0x3dc>)
 800271e:	f00c feeb 	bl	800f4f8 <siprintf>
 8002722:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

	  xMqttMsg.payload = pcMsg;
 8002726:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800272a:	623b      	str	r3, [r7, #32]
	  xMqttMsg.payloadlen = iMsgSize;
 800272c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
	  if(MQTTPublish(&xMqttClient, "stm32pubtopic", &xMqttMsg) != MQSUCCESS)
 8002732:	f107 0318 	add.w	r3, r7, #24
 8002736:	461a      	mov	r2, r3
 8002738:	4910      	ldr	r1, [pc, #64]	; (800277c <main+0x3e0>)
 800273a:	480c      	ldr	r0, [pc, #48]	; (800276c <main+0x3d0>)
 800273c:	f00a fec9 	bl	800d4d2 <MQTTPublish>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <main+0x3b2>
	  {
		  printf("Failed to publish msg\r\n");
 8002746:	480e      	ldr	r0, [pc, #56]	; (8002780 <main+0x3e4>)
 8002748:	f00c fe84 	bl	800f454 <puts>
 800274c:	e002      	b.n	8002754 <main+0x3b8>
	  }
	  else
	  {
		  printf("Successfully published msg\r\n");
 800274e:	480d      	ldr	r0, [pc, #52]	; (8002784 <main+0x3e8>)
 8002750:	f00c fe80 	bl	800f454 <puts>
	  }
	  MQTTYield(&xMqttClient, 5000);
 8002754:	f241 3188 	movw	r1, #5000	; 0x1388
 8002758:	4804      	ldr	r0, [pc, #16]	; (800276c <main+0x3d0>)
 800275a:	f00a fcb9 	bl	800d0d0 <MQTTYield>
	  fTemperature = BSP_TSENSOR_ReadTemp();
 800275e:	e7d1      	b.n	8002704 <main+0x368>
 8002760:	080137f8 	.word	0x080137f8
 8002764:	0800328d 	.word	0x0800328d
 8002768:	0801382c 	.word	0x0801382c
 800276c:	200007b0 	.word	0x200007b0
 8002770:	08013840 	.word	0x08013840
 8002774:	08013874 	.word	0x08013874
 8002778:	080138ac 	.word	0x080138ac
 800277c:	080138c0 	.word	0x080138c0
 8002780:	080138d0 	.word	0x080138d0
 8002784:	080138e8 	.word	0x080138e8

08002788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b096      	sub	sp, #88	; 0x58
 800278c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	2244      	movs	r2, #68	; 0x44
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f00b fe5e 	bl	800e458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800279c:	463b      	mov	r3, r7
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80027aa:	2000      	movs	r0, #0
 80027ac:	f005 ffb6 	bl	800871c <HAL_PWREx_ControlVoltageScaling>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <SystemClock_Config+0x32>
  {
    Error_Handler();
 80027b6:	f000 fdf7 	bl	80033a8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80027ba:	f005 ff7f 	bl	80086bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <SystemClock_Config+0xc0>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	4a20      	ldr	r2, [pc, #128]	; (8002848 <SystemClock_Config+0xc0>)
 80027c6:	f023 0318 	bic.w	r3, r3, #24
 80027ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80027ce:	2314      	movs	r3, #20
 80027d0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027d2:	2301      	movs	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027d6:	2301      	movs	r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80027de:	2360      	movs	r3, #96	; 0x60
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027e2:	2302      	movs	r3, #2
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80027e6:	2301      	movs	r3, #1
 80027e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80027ee:	233c      	movs	r3, #60	; 0x3c
 80027f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027f2:	2302      	movs	r3, #2
 80027f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027f6:	2302      	movs	r3, #2
 80027f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027fa:	2302      	movs	r3, #2
 80027fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4618      	mov	r0, r3
 8002804:	f006 f82e 	bl	8008864 <HAL_RCC_OscConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800280e:	f000 fdcb 	bl	80033a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002812:	230f      	movs	r3, #15
 8002814:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002816:	2303      	movs	r3, #3
 8002818:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002826:	463b      	mov	r3, r7
 8002828:	2105      	movs	r1, #5
 800282a:	4618      	mov	r0, r3
 800282c:	f006 fc34 	bl	8009098 <HAL_RCC_ClockConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002836:	f000 fdb7 	bl	80033a8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800283a:	f007 fa1b 	bl	8009c74 <HAL_RCCEx_EnableMSIPLLMode>
}
 800283e:	bf00      	nop
 8002840:	3758      	adds	r7, #88	; 0x58
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0a6      	sub	sp, #152	; 0x98
 8002850:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	2294      	movs	r2, #148	; 0x94
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f00b fdfd 	bl	800e458 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800285e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002862:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002864:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800286c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002870:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002872:	2301      	movs	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002876:	2301      	movs	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800287a:	2318      	movs	r3, #24
 800287c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800287e:	2302      	movs	r3, #2
 8002880:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002882:	2302      	movs	r3, #2
 8002884:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002886:	2302      	movs	r3, #2
 8002888:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800288a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800288e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	4618      	mov	r0, r3
 8002894:	f006 febe 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800289e:	f000 fd83 	bl	80033a8 <Error_Handler>
  }
}
 80028a2:	bf00      	nop
 80028a4:	3798      	adds	r7, #152	; 0x98
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028b2:	463b      	mov	r3, r7
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
 80028c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80028c2:	4b29      	ldr	r3, [pc, #164]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028c4:	4a29      	ldr	r2, [pc, #164]	; (800296c <MX_ADC1_Init+0xc0>)
 80028c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028c8:	4b27      	ldr	r3, [pc, #156]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028da:	4b23      	ldr	r3, [pc, #140]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028e0:	4b21      	ldr	r3, [pc, #132]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028e2:	2204      	movs	r2, #4
 80028e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <MX_ADC1_Init+0xbc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <MX_ADC1_Init+0xbc>)
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_ADC1_Init+0xbc>)
 8002908:	2200      	movs	r2, #0
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_ADC1_Init+0xbc>)
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <MX_ADC1_Init+0xbc>)
 8002916:	2200      	movs	r2, #0
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <MX_ADC1_Init+0xbc>)
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002922:	4811      	ldr	r0, [pc, #68]	; (8002968 <MX_ADC1_Init+0xbc>)
 8002924:	f003 f906 	bl	8005b34 <HAL_ADC_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800292e:	f000 fd3b 	bl	80033a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <MX_ADC1_Init+0xc4>)
 8002934:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002936:	2306      	movs	r3, #6
 8002938:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800293e:	237f      	movs	r3, #127	; 0x7f
 8002940:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002942:	2304      	movs	r3, #4
 8002944:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800294a:	463b      	mov	r3, r7
 800294c:	4619      	mov	r1, r3
 800294e:	4806      	ldr	r0, [pc, #24]	; (8002968 <MX_ADC1_Init+0xbc>)
 8002950:	f003 fa3c 	bl	8005dcc <HAL_ADC_ConfigChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800295a:	f000 fd25 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000021c 	.word	0x2000021c
 800296c:	50040000 	.word	0x50040000
 8002970:	04300002 	.word	0x04300002

08002974 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <MX_DFSDM1_Init+0x68>)
 800297a:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <MX_DFSDM1_Init+0x6c>)
 800297c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <MX_DFSDM1_Init+0x68>)
 8002980:	2201      	movs	r2, #1
 8002982:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <MX_DFSDM1_Init+0x68>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <MX_DFSDM1_Init+0x68>)
 800298c:	2202      	movs	r2, #2
 800298e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_DFSDM1_Init+0x68>)
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_DFSDM1_Init+0x68>)
 8002998:	2200      	movs	r2, #0
 800299a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <MX_DFSDM1_Init+0x68>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <MX_DFSDM1_Init+0x68>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <MX_DFSDM1_Init+0x68>)
 80029aa:	2204      	movs	r2, #4
 80029ac:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <MX_DFSDM1_Init+0x68>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <MX_DFSDM1_Init+0x68>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <MX_DFSDM1_Init+0x68>)
 80029bc:	2200      	movs	r2, #0
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <MX_DFSDM1_Init+0x68>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_DFSDM1_Init+0x68>)
 80029c8:	f003 ff40 	bl	800684c <HAL_DFSDM_ChannelInit>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80029d2:	f000 fce9 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000284 	.word	0x20000284
 80029e0:	40016040 	.word	0x40016040

080029e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <MX_I2C1_Init+0x74>)
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <MX_I2C1_Init+0x78>)
 80029ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <MX_I2C1_Init+0x74>)
 80029f0:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <MX_I2C1_Init+0x7c>)
 80029f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <MX_I2C1_Init+0x74>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <MX_I2C1_Init+0x74>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <MX_I2C1_Init+0x74>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <MX_I2C1_Init+0x74>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <MX_I2C1_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_I2C1_Init+0x74>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <MX_I2C1_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a1e:	480e      	ldr	r0, [pc, #56]	; (8002a58 <MX_I2C1_Init+0x74>)
 8002a20:	f004 fb4c 	bl	80070bc <HAL_I2C_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a2a:	f000 fcbd 	bl	80033a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4809      	ldr	r0, [pc, #36]	; (8002a58 <MX_I2C1_Init+0x74>)
 8002a32:	f005 f8d5 	bl	8007be0 <HAL_I2CEx_ConfigAnalogFilter>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a3c:	f000 fcb4 	bl	80033a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a40:	2100      	movs	r1, #0
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_I2C1_Init+0x74>)
 8002a44:	f005 f917 	bl	8007c76 <HAL_I2CEx_ConfigDigitalFilter>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a4e:	f000 fcab 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200002bc 	.word	0x200002bc
 8002a5c:	40005400 	.word	0x40005400
 8002a60:	307075b1 	.word	0x307075b1

08002a64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a6a:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <MX_I2C2_Init+0x78>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a70:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <MX_I2C2_Init+0x7c>)
 8002a72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a9e:	480e      	ldr	r0, [pc, #56]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002aa0:	f004 fb0c 	bl	80070bc <HAL_I2C_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002aaa:	f000 fc7d 	bl	80033a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4809      	ldr	r0, [pc, #36]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002ab2:	f005 f895 	bl	8007be0 <HAL_I2CEx_ConfigAnalogFilter>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002abc:	f000 fc74 	bl	80033a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_I2C2_Init+0x74>)
 8002ac4:	f005 f8d7 	bl	8007c76 <HAL_I2CEx_ConfigDigitalFilter>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002ace:	f000 fc6b 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000310 	.word	0x20000310
 8002adc:	40005800 	.word	0x40005800
 8002ae0:	307075b1 	.word	0x307075b1

08002ae4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8002af8:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002afa:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <MX_OCTOSPI1_Init+0xa8>)
 8002afc:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b10:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b14:	2220      	movs	r2, #32
 8002b16:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8002b2a:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b44:	2208      	movs	r2, #8
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002b48:	480f      	ldr	r0, [pc, #60]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b4a:	f005 f8e1 	bl	8007d10 <HAL_OSPI_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8002b54:	f000 fc28 	bl	80033a8 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002b60:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002b64:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4806      	ldr	r0, [pc, #24]	; (8002b88 <MX_OCTOSPI1_Init+0xa4>)
 8002b70:	f005 f988 	bl	8007e84 <HAL_OSPIM_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8002b7a:	f000 fc15 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000364 	.word	0x20000364
 8002b8c:	a0001000 	.word	0xa0001000

08002b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002b96:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <MX_SPI1_Init+0x78>)
 8002b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002baa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002bae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bde:	2207      	movs	r2, #7
 8002be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bea:	2208      	movs	r2, #8
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bf0:	f007 fa38 	bl	800a064 <HAL_SPI_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bfa:	f000 fbd5 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200003b4 	.word	0x200003b4
 8002c08:	40013000 	.word	0x40013000

08002c0c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c12:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <MX_SPI3_Init+0x78>)
 8002c14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c26:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002c2a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c42:	2210      	movs	r2, #16
 8002c44:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c66:	2208      	movs	r2, #8
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c6a:	4805      	ldr	r0, [pc, #20]	; (8002c80 <MX_SPI3_Init+0x74>)
 8002c6c:	f007 f9fa 	bl	800a064 <HAL_SPI_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002c76:	f000 fb97 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000418 	.word	0x20000418
 8002c84:	40003c00 	.word	0x40003c00

08002c88 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c8c:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <MX_UART4_Init+0x90>)
 8002c8e:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <MX_UART4_Init+0x94>)
 8002c90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <MX_UART4_Init+0x90>)
 8002c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9a:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <MX_UART4_Init+0x90>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <MX_UART4_Init+0x90>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <MX_UART4_Init+0x90>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <MX_UART4_Init+0x90>)
 8002cae:	220c      	movs	r2, #12
 8002cb0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb2:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <MX_UART4_Init+0x90>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb8:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <MX_UART4_Init+0x90>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cbe:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <MX_UART4_Init+0x90>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <MX_UART4_Init+0x90>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <MX_UART4_Init+0x90>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002cd0:	4811      	ldr	r0, [pc, #68]	; (8002d18 <MX_UART4_Init+0x90>)
 8002cd2:	f008 fcf8 	bl	800b6c6 <HAL_UART_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002cdc:	f000 fb64 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	480d      	ldr	r0, [pc, #52]	; (8002d18 <MX_UART4_Init+0x90>)
 8002ce4:	f009 fb94 	bl	800c410 <HAL_UARTEx_SetTxFifoThreshold>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002cee:	f000 fb5b 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4808      	ldr	r0, [pc, #32]	; (8002d18 <MX_UART4_Init+0x90>)
 8002cf6:	f009 fbc9 	bl	800c48c <HAL_UARTEx_SetRxFifoThreshold>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002d00:	f000 fb52 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002d04:	4804      	ldr	r0, [pc, #16]	; (8002d18 <MX_UART4_Init+0x90>)
 8002d06:	f009 fb4a 	bl	800c39e <HAL_UARTEx_DisableFifoMode>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002d10:	f000 fb4a 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	2000047c 	.word	0x2000047c
 8002d1c:	40004c00 	.word	0x40004c00

08002d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d24:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d26:	4a23      	ldr	r2, [pc, #140]	; (8002db4 <MX_USART1_UART_Init+0x94>)
 8002d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d2a:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d32:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d44:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d46:	220c      	movs	r2, #12
 8002d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4a:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d68:	4811      	ldr	r0, [pc, #68]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d6a:	f008 fcac 	bl	800b6c6 <HAL_UART_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d74:	f000 fb18 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d78:	2100      	movs	r1, #0
 8002d7a:	480d      	ldr	r0, [pc, #52]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d7c:	f009 fb48 	bl	800c410 <HAL_UARTEx_SetTxFifoThreshold>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d86:	f000 fb0f 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4808      	ldr	r0, [pc, #32]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d8e:	f009 fb7d 	bl	800c48c <HAL_UARTEx_SetRxFifoThreshold>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d98:	f000 fb06 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d9c:	4804      	ldr	r0, [pc, #16]	; (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d9e:	f009 fafe 	bl	800c39e <HAL_UARTEx_DisableFifoMode>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002da8:	f000 fafe 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	2000050c 	.word	0x2000050c
 8002db4:	40013800 	.word	0x40013800

08002db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dbe:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <MX_USART2_UART_Init+0x98>)
 8002dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dde:	220c      	movs	r2, #12
 8002de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002de4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002de8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df0:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e02:	4812      	ldr	r0, [pc, #72]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002e04:	f008 fc5f 	bl	800b6c6 <HAL_UART_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002e0e:	f000 facb 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e12:	2100      	movs	r1, #0
 8002e14:	480d      	ldr	r0, [pc, #52]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002e16:	f009 fafb 	bl	800c410 <HAL_UARTEx_SetTxFifoThreshold>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002e20:	f000 fac2 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e24:	2100      	movs	r1, #0
 8002e26:	4809      	ldr	r0, [pc, #36]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002e28:	f009 fb30 	bl	800c48c <HAL_UARTEx_SetRxFifoThreshold>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002e32:	f000 fab9 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <MX_USART2_UART_Init+0x94>)
 8002e38:	f009 fab1 	bl	800c39e <HAL_UARTEx_DisableFifoMode>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002e42:	f000 fab1 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000059c 	.word	0x2000059c
 8002e50:	40004400 	.word	0x40004400

08002e54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e5a:	4a23      	ldr	r2, [pc, #140]	; (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e5e:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e66:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e72:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e8a:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e9c:	4811      	ldr	r0, [pc, #68]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002e9e:	f008 fc12 	bl	800b6c6 <HAL_UART_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002ea8:	f000 fa7e 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eac:	2100      	movs	r1, #0
 8002eae:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002eb0:	f009 faae 	bl	800c410 <HAL_UARTEx_SetTxFifoThreshold>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002eba:	f000 fa75 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4808      	ldr	r0, [pc, #32]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002ec2:	f009 fae3 	bl	800c48c <HAL_UARTEx_SetRxFifoThreshold>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ecc:	f000 fa6c 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ed0:	4804      	ldr	r0, [pc, #16]	; (8002ee4 <MX_USART3_UART_Init+0x90>)
 8002ed2:	f009 fa64 	bl	800c39e <HAL_UARTEx_DisableFifoMode>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002edc:	f000 fa64 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	2000062c 	.word	0x2000062c
 8002ee8:	40004800 	.word	0x40004800

08002eec <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	; 0x30
 8002f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
 8002f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f12:	4b9a      	ldr	r3, [pc, #616]	; (800317c <MX_GPIO_Init+0x280>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	4a99      	ldr	r2, [pc, #612]	; (800317c <MX_GPIO_Init+0x280>)
 8002f18:	f043 0310 	orr.w	r3, r3, #16
 8002f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f1e:	4b97      	ldr	r3, [pc, #604]	; (800317c <MX_GPIO_Init+0x280>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2a:	4b94      	ldr	r3, [pc, #592]	; (800317c <MX_GPIO_Init+0x280>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	4a93      	ldr	r2, [pc, #588]	; (800317c <MX_GPIO_Init+0x280>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f36:	4b91      	ldr	r3, [pc, #580]	; (800317c <MX_GPIO_Init+0x280>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f42:	4b8e      	ldr	r3, [pc, #568]	; (800317c <MX_GPIO_Init+0x280>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	4a8d      	ldr	r2, [pc, #564]	; (800317c <MX_GPIO_Init+0x280>)
 8002f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	; (800317c <MX_GPIO_Init+0x280>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <MX_GPIO_Init+0x280>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	4a87      	ldr	r2, [pc, #540]	; (800317c <MX_GPIO_Init+0x280>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f66:	4b85      	ldr	r3, [pc, #532]	; (800317c <MX_GPIO_Init+0x280>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f72:	4b82      	ldr	r3, [pc, #520]	; (800317c <MX_GPIO_Init+0x280>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	4a81      	ldr	r2, [pc, #516]	; (800317c <MX_GPIO_Init+0x280>)
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f7e:	4b7f      	ldr	r3, [pc, #508]	; (800317c <MX_GPIO_Init+0x280>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8a:	4b7c      	ldr	r3, [pc, #496]	; (800317c <MX_GPIO_Init+0x280>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	4a7b      	ldr	r2, [pc, #492]	; (800317c <MX_GPIO_Init+0x280>)
 8002f90:	f043 0308 	orr.w	r3, r3, #8
 8002f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f96:	4b79      	ldr	r3, [pc, #484]	; (800317c <MX_GPIO_Init+0x280>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f240 1105 	movw	r1, #261	; 0x105
 8002fa8:	4875      	ldr	r0, [pc, #468]	; (8003180 <MX_GPIO_Init+0x284>)
 8002faa:	f004 f857 	bl	800705c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f248 111c 	movw	r1, #33052	; 0x811c
 8002fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb8:	f004 f850 	bl	800705c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f24f 0134 	movw	r1, #61492	; 0xf034
 8002fc2:	4870      	ldr	r0, [pc, #448]	; (8003184 <MX_GPIO_Init+0x288>)
 8002fc4:	f004 f84a 	bl	800705c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f242 0183 	movw	r1, #8323	; 0x2083
 8002fce:	486e      	ldr	r0, [pc, #440]	; (8003188 <MX_GPIO_Init+0x28c>)
 8002fd0:	f004 f844 	bl	800705c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002fda:	486c      	ldr	r0, [pc, #432]	; (800318c <MX_GPIO_Init+0x290>)
 8002fdc:	f004 f83e 	bl	800705c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002fe0:	f240 1305 	movw	r3, #261	; 0x105
 8002fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ff2:	f107 031c 	add.w	r3, r7, #28
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4861      	ldr	r0, [pc, #388]	; (8003180 <MX_GPIO_Init+0x284>)
 8002ffa:	f003 fd93 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8002ffe:	237a      	movs	r3, #122	; 0x7a
 8003000:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003002:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	4619      	mov	r1, r3
 8003012:	485b      	ldr	r0, [pc, #364]	; (8003180 <MX_GPIO_Init+0x284>)
 8003014:	f003 fd86 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003018:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 800301c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800301e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003028:	f107 031c 	add.w	r3, r7, #28
 800302c:	4619      	mov	r1, r3
 800302e:	4857      	ldr	r0, [pc, #348]	; (800318c <MX_GPIO_Init+0x290>)
 8003030:	f003 fd78 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8003034:	f248 131c 	movw	r3, #33052	; 0x811c
 8003038:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303a:	2301      	movs	r3, #1
 800303c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003050:	f003 fd68 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003054:	2301      	movs	r3, #1
 8003056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003058:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800305c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003062:	f107 031c 	add.w	r3, r7, #28
 8003066:	4619      	mov	r1, r3
 8003068:	4846      	ldr	r0, [pc, #280]	; (8003184 <MX_GPIO_Init+0x288>)
 800306a:	f003 fd5b 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800306e:	2302      	movs	r3, #2
 8003070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003072:	2302      	movs	r3, #2
 8003074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	2300      	movs	r3, #0
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800307e:	2302      	movs	r3, #2
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	4619      	mov	r1, r3
 8003088:	483e      	ldr	r0, [pc, #248]	; (8003184 <MX_GPIO_Init+0x288>)
 800308a:	f003 fd4b 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800308e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8003092:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003094:	2301      	movs	r3, #1
 8003096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	4619      	mov	r1, r3
 80030a6:	4837      	ldr	r0, [pc, #220]	; (8003184 <MX_GPIO_Init+0x288>)
 80030a8:	f003 fd3c 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80030ac:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80030b0:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	4619      	mov	r1, r3
 80030c2:	4831      	ldr	r0, [pc, #196]	; (8003188 <MX_GPIO_Init+0x28c>)
 80030c4:	f003 fd2e 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80030c8:	f242 0383 	movw	r3, #8323	; 0x2083
 80030cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030da:	f107 031c 	add.w	r3, r7, #28
 80030de:	4619      	mov	r1, r3
 80030e0:	4829      	ldr	r0, [pc, #164]	; (8003188 <MX_GPIO_Init+0x28c>)
 80030e2:	f003 fd1f 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80030e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80030ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ec:	2301      	movs	r3, #1
 80030ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	4823      	ldr	r0, [pc, #140]	; (800318c <MX_GPIO_Init+0x290>)
 8003100:	f003 fd10 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4619      	mov	r1, r3
 8003118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311c:	f003 fd02 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003120:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312e:	2303      	movs	r3, #3
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003132:	230a      	movs	r3, #10
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 031c 	add.w	r3, r7, #28
 800313a:	4619      	mov	r1, r3
 800313c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003140:	f003 fcf0 	bl	8006b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003144:	2200      	movs	r2, #0
 8003146:	2100      	movs	r1, #0
 8003148:	2007      	movs	r0, #7
 800314a:	f003 fb3a 	bl	80067c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800314e:	2007      	movs	r0, #7
 8003150:	f003 fb53 	bl	80067fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003154:	2200      	movs	r2, #0
 8003156:	2100      	movs	r1, #0
 8003158:	2017      	movs	r0, #23
 800315a:	f003 fb32 	bl	80067c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800315e:	2017      	movs	r0, #23
 8003160:	f003 fb4b 	bl	80067fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	2028      	movs	r0, #40	; 0x28
 800316a:	f003 fb2a 	bl	80067c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800316e:	2028      	movs	r0, #40	; 0x28
 8003170:	f003 fb43 	bl	80067fa <HAL_NVIC_EnableIRQ>

}
 8003174:	bf00      	nop
 8003176:	3730      	adds	r7, #48	; 0x30
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	48001000 	.word	0x48001000
 8003184:	48000400 	.word	0x48000400
 8003188:	48000c00 	.word	0x48000c00
 800318c:	48000800 	.word	0x48000800

08003190 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d102      	bne.n	80031a6 <HAL_GPIO_EXTI_Callback+0x16>
  {
	case (GPIO_PIN_1):
	{
		SPI_WIFI_ISR();
 80031a0:	f7ff f8ec 	bl	800237c <SPI_WIFI_ISR>
		break;
 80031a4:	e000      	b.n	80031a8 <HAL_GPIO_EXTI_Callback+0x18>
	}

    default:
    {
      break;
 80031a6:	bf00      	nop
    }
  }
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <iMqttRead>:
int iMqttRead(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  int bytes;
  bytes = net_sock_recv((net_sockhnd_t) n->my_socket, buffer, len);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fdf2 	bl	8001db0 <net_sock_recv>
 80031cc:	6178      	str	r0, [r7, #20]
  if(bytes < 0)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da06      	bge.n	80031e2 <iMqttRead+0x32>
  {
    printf("net_sock_recv failed - %d\r\n", bytes);
 80031d4:	6979      	ldr	r1, [r7, #20]
 80031d6:	4805      	ldr	r0, [pc, #20]	; (80031ec <iMqttRead+0x3c>)
 80031d8:	f00c f8a0 	bl	800f31c <iprintf>
    bytes = -1;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	617b      	str	r3, [r7, #20]
  }

   return bytes;
 80031e2:	697b      	ldr	r3, [r7, #20]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	08013978 	.word	0x08013978

080031f0 <iMqttWrite>:

int iMqttWrite(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  int rc;
  rc = net_sock_send((net_sockhnd_t) n->my_socket, buffer, len);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fdec 	bl	8001de4 <net_sock_send>
 800320c:	6178      	str	r0, [r7, #20]
  if(rc < 0)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da06      	bge.n	8003222 <iMqttWrite+0x32>
  {
    printf("net_sock_send failed - %d\r\n", rc);
 8003214:	6979      	ldr	r1, [r7, #20]
 8003216:	4805      	ldr	r0, [pc, #20]	; (800322c <iMqttWrite+0x3c>)
 8003218:	f00c f880 	bl	800f31c <iprintf>
    rc = -1;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	617b      	str	r3, [r7, #20]
  }

  return rc;
 8003222:	697b      	ldr	r3, [r7, #20]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	08013994 	.word	0x08013994

08003230 <vMqttMessageHandler>:

void vMqttMessageHandler(MessageData* data)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	printf("vMqttMessageHandler\r\n");
 8003238:	4810      	ldr	r0, [pc, #64]	; (800327c <vMqttMessageHandler+0x4c>)
 800323a:	f00c f90b 	bl	800f454 <puts>
	//printf("Topic: %s |Received msg=> %.*s\r\n",data->topicName->lenstring.len, (char *)data->topicName->lenstring.data, (char *)data->message->payload);
	snprintf(pucMqttWriteBuffer, MIN(MQTT_WRITE_BUFFER_SIZE, data->message->payloadlen + 1),"%s", (char *)data->message->payload);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	3301      	adds	r3, #1
 8003246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800324a:	bf28      	it	cs
 800324c:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 8003250:	4619      	mov	r1, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a09      	ldr	r2, [pc, #36]	; (8003280 <vMqttMessageHandler+0x50>)
 800325a:	480a      	ldr	r0, [pc, #40]	; (8003284 <vMqttMessageHandler+0x54>)
 800325c:	f00c f918 	bl	800f490 <sniprintf>
	printf("Received message: topic: %.*s content: %s.\n", data->topicName->lenstring.len, data->topicName->lenstring.data, pucMqttWriteBuffer);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <vMqttMessageHandler+0x54>)
 800326e:	4806      	ldr	r0, [pc, #24]	; (8003288 <vMqttMessageHandler+0x58>)
 8003270:	f00c f854 	bl	800f31c <iprintf>
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	080139b0 	.word	0x080139b0
 8003280:	080139c8 	.word	0x080139c8
 8003284:	20000c00 	.word	0x20000c00
 8003288:	080139cc 	.word	0x080139cc

0800328c <vMqttMessageHandler_Topic_LedController>:

void vMqttMessageHandler_Topic_LedController(MessageData* data)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	printf("vMqttMessageHandler_Topic_LedController\r\n");
 8003294:	4823      	ldr	r0, [pc, #140]	; (8003324 <vMqttMessageHandler_Topic_LedController+0x98>)
 8003296:	f00c f8dd 	bl	800f454 <puts>

	snprintf(pucMqttWriteBuffer, MIN(MQTT_WRITE_BUFFER_SIZE, data->message->payloadlen + 1),"%s", (char *)data->message->payload);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a6:	bf28      	it	cs
 80032a8:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 80032ac:	4619      	mov	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <vMqttMessageHandler_Topic_LedController+0x9c>)
 80032b6:	481d      	ldr	r0, [pc, #116]	; (800332c <vMqttMessageHandler_Topic_LedController+0xa0>)
 80032b8:	f00c f8ea 	bl	800f490 <sniprintf>
	printf("Received message: topic: %.*s content: %s.\n", data->topicName->lenstring.len, data->topicName->lenstring.data, pucMqttWriteBuffer);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <vMqttMessageHandler_Topic_LedController+0xa0>)
 80032ca:	4819      	ldr	r0, [pc, #100]	; (8003330 <vMqttMessageHandler_Topic_LedController+0xa4>)
 80032cc:	f00c f826 	bl	800f31c <iprintf>

	if(strcmp(pucMqttWriteBuffer, "turn led on")==0)
 80032d0:	4918      	ldr	r1, [pc, #96]	; (8003334 <vMqttMessageHandler_Topic_LedController+0xa8>)
 80032d2:	4816      	ldr	r0, [pc, #88]	; (800332c <vMqttMessageHandler_Topic_LedController+0xa0>)
 80032d4:	f7fc ff94 	bl	8000200 <strcmp>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <vMqttMessageHandler_Topic_LedController+0x66>
	{
		printf("Turning led on\r\n");
 80032de:	4816      	ldr	r0, [pc, #88]	; (8003338 <vMqttMessageHandler_Topic_LedController+0xac>)
 80032e0:	f00c f8b8 	bl	800f454 <puts>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_PIN, GPIO_PIN_SET);
 80032e4:	2201      	movs	r2, #1
 80032e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032ea:	4814      	ldr	r0, [pc, #80]	; (800333c <vMqttMessageHandler_Topic_LedController+0xb0>)
 80032ec:	f003 feb6 	bl	800705c <HAL_GPIO_WritePin>
	else
	{
		printf("Received unknown command");
	}

}
 80032f0:	e013      	b.n	800331a <vMqttMessageHandler_Topic_LedController+0x8e>
	else if(strcmp(pucMqttWriteBuffer, "turn led off")==0)
 80032f2:	4913      	ldr	r1, [pc, #76]	; (8003340 <vMqttMessageHandler_Topic_LedController+0xb4>)
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <vMqttMessageHandler_Topic_LedController+0xa0>)
 80032f6:	f7fc ff83 	bl	8000200 <strcmp>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <vMqttMessageHandler_Topic_LedController+0x88>
		printf("Turning led off\r\n");
 8003300:	4810      	ldr	r0, [pc, #64]	; (8003344 <vMqttMessageHandler_Topic_LedController+0xb8>)
 8003302:	f00c f8a7 	bl	800f454 <puts>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_PIN, GPIO_PIN_RESET);
 8003306:	2200      	movs	r2, #0
 8003308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800330c:	480b      	ldr	r0, [pc, #44]	; (800333c <vMqttMessageHandler_Topic_LedController+0xb0>)
 800330e:	f003 fea5 	bl	800705c <HAL_GPIO_WritePin>
}
 8003312:	e002      	b.n	800331a <vMqttMessageHandler_Topic_LedController+0x8e>
		printf("Received unknown command");
 8003314:	480c      	ldr	r0, [pc, #48]	; (8003348 <vMqttMessageHandler_Topic_LedController+0xbc>)
 8003316:	f00c f801 	bl	800f31c <iprintf>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	080139f8 	.word	0x080139f8
 8003328:	080139c8 	.word	0x080139c8
 800332c:	20000c00 	.word	0x20000c00
 8003330:	080139cc 	.word	0x080139cc
 8003334:	08013a24 	.word	0x08013a24
 8003338:	08013a30 	.word	0x08013a30
 800333c:	48000400 	.word	0x48000400
 8003340:	08013a40 	.word	0x08013a40
 8003344:	08013a50 	.word	0x08013a50
 8003348:	08013a64 	.word	0x08013a64

0800334c <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000))
 8003354:	bf00      	nop
 8003356:	1d39      	adds	r1, r7, #4
 8003358:	f247 5330 	movw	r3, #30000	; 0x7530
 800335c:	2201      	movs	r2, #1
 800335e:	4805      	ldr	r0, [pc, #20]	; (8003374 <__io_putchar+0x28>)
 8003360:	f008 fa01 	bl	800b766 <HAL_UART_Transmit>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f5      	bne.n	8003356 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 800336a:	687b      	ldr	r3, [r7, #4]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	2000050c 	.word	0x2000050c

08003378 <__io_getchar>:
GETCHAR_PROTOTYPE
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 30000))
 8003382:	bf00      	nop
 8003384:	1df9      	adds	r1, r7, #7
 8003386:	f247 5330 	movw	r3, #30000	; 0x7530
 800338a:	2201      	movs	r2, #1
 800338c:	4805      	ldr	r0, [pc, #20]	; (80033a4 <__io_getchar+0x2c>)
 800338e:	f008 fa81 	bl	800b894 <HAL_UART_Receive>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f5      	bne.n	8003384 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8003398:	79fb      	ldrb	r3, [r7, #7]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	2000050c 	.word	0x2000050c

080033a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033ac:	b672      	cpsid	i
}
 80033ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <Error_Handler+0x8>
	...

080033b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_MspInit+0x44>)
 80033bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033be:	4a0e      	ldr	r2, [pc, #56]	; (80033f8 <HAL_MspInit+0x44>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6613      	str	r3, [r2, #96]	; 0x60
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_MspInit+0x44>)
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	607b      	str	r3, [r7, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_MspInit+0x44>)
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <HAL_MspInit+0x44>)
 80033d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033dc:	6593      	str	r3, [r2, #88]	; 0x58
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_MspInit+0x44>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000

080033fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	; 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a15      	ldr	r2, [pc, #84]	; (8003470 <HAL_ADC_MspInit+0x74>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d123      	bne.n	8003466 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_ADC_MspInit+0x78>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003422:	4a14      	ldr	r2, [pc, #80]	; (8003474 <HAL_ADC_MspInit+0x78>)
 8003424:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_ADC_MspInit+0x78>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <HAL_ADC_MspInit+0x78>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343a:	4a0e      	ldr	r2, [pc, #56]	; (8003474 <HAL_ADC_MspInit+0x78>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <HAL_ADC_MspInit+0x78>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800344e:	233f      	movs	r3, #63	; 0x3f
 8003450:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003452:	230b      	movs	r3, #11
 8003454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345a:	f107 0314 	add.w	r3, r7, #20
 800345e:	4619      	mov	r1, r3
 8003460:	4805      	ldr	r0, [pc, #20]	; (8003478 <HAL_ADC_MspInit+0x7c>)
 8003462:	f003 fb5f 	bl	8006b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003466:	bf00      	nop
 8003468:	3728      	adds	r7, #40	; 0x28
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	50040000 	.word	0x50040000
 8003474:	40021000 	.word	0x40021000
 8003478:	48000800 	.word	0x48000800

0800347c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b0ae      	sub	sp, #184	; 0xb8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003494:	f107 0310 	add.w	r3, r7, #16
 8003498:	2294      	movs	r2, #148	; 0x94
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f00a ffdb 	bl	800e458 <memset>
  if(DFSDM1_Init == 0)
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d142      	bne.n	8003530 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80034aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	4618      	mov	r0, r3
 80034bc:	f006 f8aa 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80034c6:	f7ff ff6f 	bl	80033a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80034ca:	4b1c      	ldr	r3, [pc, #112]	; (800353c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	4a1b      	ldr	r2, [pc, #108]	; (800353c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80034d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d4:	6613      	str	r3, [r2, #96]	; 0x60
 80034d6:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80034d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e6:	4a15      	ldr	r2, [pc, #84]	; (800353c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80034e8:	f043 0310 	orr.w	r3, r3, #16
 80034ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80034fa:	f44f 7320 	mov.w	r3, #640	; 0x280
 80034fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003514:	2306      	movs	r3, #6
 8003516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800351a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800351e:	4619      	mov	r1, r3
 8003520:	4807      	ldr	r0, [pc, #28]	; (8003540 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8003522:	f003 faff 	bl	8006b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003526:	4b04      	ldr	r3, [pc, #16]	; (8003538 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	4a02      	ldr	r2, [pc, #8]	; (8003538 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800352e:	6013      	str	r3, [r2, #0]
  }

}
 8003530:	bf00      	nop
 8003532:	37b8      	adds	r7, #184	; 0xb8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000fe8 	.word	0x20000fe8
 800353c:	40021000 	.word	0x40021000
 8003540:	48001000 	.word	0x48001000

08003544 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b0b0      	sub	sp, #192	; 0xc0
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800355c:	f107 0318 	add.w	r3, r7, #24
 8003560:	2294      	movs	r2, #148	; 0x94
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f00a ff77 	bl	800e458 <memset>
  if(hi2c->Instance==I2C1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a42      	ldr	r2, [pc, #264]	; (8003678 <HAL_I2C_MspInit+0x134>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d13c      	bne.n	80035ee <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003574:	2340      	movs	r3, #64	; 0x40
 8003576:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003578:	2300      	movs	r3, #0
 800357a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800357c:	f107 0318 	add.w	r3, r7, #24
 8003580:	4618      	mov	r0, r3
 8003582:	f006 f847 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800358c:	f7ff ff0c 	bl	80033a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003590:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_I2C_MspInit+0x138>)
 8003592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003594:	4a39      	ldr	r2, [pc, #228]	; (800367c <HAL_I2C_MspInit+0x138>)
 8003596:	f043 0302 	orr.w	r3, r3, #2
 800359a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800359c:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_I2C_MspInit+0x138>)
 800359e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80035a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035b0:	2312      	movs	r3, #18
 80035b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035bc:	2303      	movs	r3, #3
 80035be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035c2:	2304      	movs	r3, #4
 80035c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035cc:	4619      	mov	r1, r3
 80035ce:	482c      	ldr	r0, [pc, #176]	; (8003680 <HAL_I2C_MspInit+0x13c>)
 80035d0:	f003 faa8 	bl	8006b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <HAL_I2C_MspInit+0x138>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <HAL_I2C_MspInit+0x138>)
 80035da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035de:	6593      	str	r3, [r2, #88]	; 0x58
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <HAL_I2C_MspInit+0x138>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80035ec:	e040      	b.n	8003670 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a24      	ldr	r2, [pc, #144]	; (8003684 <HAL_I2C_MspInit+0x140>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d13b      	bne.n	8003670 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80035fc:	2300      	movs	r3, #0
 80035fe:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003600:	f107 0318 	add.w	r3, r7, #24
 8003604:	4618      	mov	r0, r3
 8003606:	f006 f805 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003610:	f7ff feca 	bl	80033a8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_I2C_MspInit+0x138>)
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	4a18      	ldr	r2, [pc, #96]	; (800367c <HAL_I2C_MspInit+0x138>)
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003620:	4b16      	ldr	r3, [pc, #88]	; (800367c <HAL_I2C_MspInit+0x138>)
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800362c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003634:	2312      	movs	r3, #18
 8003636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800363a:	2301      	movs	r3, #1
 800363c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003640:	2303      	movs	r3, #3
 8003642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003646:	2304      	movs	r3, #4
 8003648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003650:	4619      	mov	r1, r3
 8003652:	480b      	ldr	r0, [pc, #44]	; (8003680 <HAL_I2C_MspInit+0x13c>)
 8003654:	f003 fa66 	bl	8006b24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_I2C_MspInit+0x138>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <HAL_I2C_MspInit+0x138>)
 800365e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003662:	6593      	str	r3, [r2, #88]	; 0x58
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_I2C_MspInit+0x138>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
}
 8003670:	bf00      	nop
 8003672:	37c0      	adds	r7, #192	; 0xc0
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40005400 	.word	0x40005400
 800367c:	40021000 	.word	0x40021000
 8003680:	48000400 	.word	0x48000400
 8003684:	40005800 	.word	0x40005800

08003688 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <HAL_I2C_MspDeInit+0x68>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d110      	bne.n	80036bc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800369a:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <HAL_I2C_MspDeInit+0x6c>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <HAL_I2C_MspDeInit+0x6c>)
 80036a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036a4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80036a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036aa:	4813      	ldr	r0, [pc, #76]	; (80036f8 <HAL_I2C_MspDeInit+0x70>)
 80036ac:	f003 fbcc 	bl	8006e48 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 80036b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036b4:	4810      	ldr	r0, [pc, #64]	; (80036f8 <HAL_I2C_MspDeInit+0x70>)
 80036b6:	f003 fbc7 	bl	8006e48 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80036ba:	e014      	b.n	80036e6 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0e      	ldr	r2, [pc, #56]	; (80036fc <HAL_I2C_MspDeInit+0x74>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10f      	bne.n	80036e6 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_I2C_MspDeInit+0x6c>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <HAL_I2C_MspDeInit+0x6c>)
 80036cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036d0:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80036d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036d6:	4808      	ldr	r0, [pc, #32]	; (80036f8 <HAL_I2C_MspDeInit+0x70>)
 80036d8:	f003 fbb6 	bl	8006e48 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80036dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <HAL_I2C_MspDeInit+0x70>)
 80036e2:	f003 fbb1 	bl	8006e48 <HAL_GPIO_DeInit>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40005400 	.word	0x40005400
 80036f4:	40021000 	.word	0x40021000
 80036f8:	48000400 	.word	0x48000400
 80036fc:	40005800 	.word	0x40005800

08003700 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b0b0      	sub	sp, #192	; 0xc0
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003718:	f107 0318 	add.w	r3, r7, #24
 800371c:	2294      	movs	r2, #148	; 0x94
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f00a fe99 	bl	800e458 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a28      	ldr	r2, [pc, #160]	; (80037cc <HAL_OSPI_MspInit+0xcc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d149      	bne.n	80037c4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003734:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800373c:	f107 0318 	add.w	r3, r7, #24
 8003740:	4618      	mov	r0, r3
 8003742:	f005 ff67 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800374c:	f7ff fe2c 	bl	80033a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8003750:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <HAL_OSPI_MspInit+0xd0>)
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <HAL_OSPI_MspInit+0xd0>)
 8003756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800375c:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <HAL_OSPI_MspInit+0xd0>)
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_OSPI_MspInit+0xd0>)
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_OSPI_MspInit+0xd0>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6513      	str	r3, [r2, #80]	; 0x50
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_OSPI_MspInit+0xd0>)
 8003776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_OSPI_MspInit+0xd0>)
 8003782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003784:	4a12      	ldr	r2, [pc, #72]	; (80037d0 <HAL_OSPI_MspInit+0xd0>)
 8003786:	f043 0310 	orr.w	r3, r3, #16
 800378a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_OSPI_MspInit+0xd0>)
 800378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003798:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800379c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ac:	2303      	movs	r3, #3
 80037ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80037b2:	230a      	movs	r3, #10
 80037b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037bc:	4619      	mov	r1, r3
 80037be:	4805      	ldr	r0, [pc, #20]	; (80037d4 <HAL_OSPI_MspInit+0xd4>)
 80037c0:	f003 f9b0 	bl	8006b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80037c4:	bf00      	nop
 80037c6:	37c0      	adds	r7, #192	; 0xc0
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	a0001000 	.word	0xa0001000
 80037d0:	40021000 	.word	0x40021000
 80037d4:	48001000 	.word	0x48001000

080037d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	; 0x30
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 031c 	add.w	r3, r7, #28
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a33      	ldr	r2, [pc, #204]	; (80038c4 <HAL_SPI_MspInit+0xec>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d129      	bne.n	800384e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037fa:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 80037fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fe:	4a32      	ldr	r2, [pc, #200]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 8003800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003804:	6613      	str	r3, [r2, #96]	; 0x60
 8003806:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	4a2c      	ldr	r2, [pc, #176]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800381e:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800382a:	23e0      	movs	r3, #224	; 0xe0
 800382c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003836:	2303      	movs	r3, #3
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800383a:	2305      	movs	r3, #5
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383e:	f107 031c 	add.w	r3, r7, #28
 8003842:	4619      	mov	r1, r3
 8003844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003848:	f003 f96c 	bl	8006b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800384c:	e035      	b.n	80038ba <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_SPI_MspInit+0xf4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d130      	bne.n	80038ba <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	6593      	str	r3, [r2, #88]	; 0x58
 8003864:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <HAL_SPI_MspInit+0xf0>)
 800387e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003888:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800388c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	2303      	movs	r3, #3
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800389a:	2306      	movs	r3, #6
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389e:	f107 031c 	add.w	r3, r7, #28
 80038a2:	4619      	mov	r1, r3
 80038a4:	480a      	ldr	r0, [pc, #40]	; (80038d0 <HAL_SPI_MspInit+0xf8>)
 80038a6:	f003 f93d 	bl	8006b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	2033      	movs	r0, #51	; 0x33
 80038b0:	f002 ff87 	bl	80067c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80038b4:	2033      	movs	r0, #51	; 0x33
 80038b6:	f002 ffa0 	bl	80067fa <HAL_NVIC_EnableIRQ>
}
 80038ba:	bf00      	nop
 80038bc:	3730      	adds	r7, #48	; 0x30
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40013000 	.word	0x40013000
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40003c00 	.word	0x40003c00
 80038d0:	48000800 	.word	0x48000800

080038d4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a12      	ldr	r2, [pc, #72]	; (800392c <HAL_SPI_MspDeInit+0x58>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10b      	bne.n	80038fe <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_SPI_MspDeInit+0x5c>)
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <HAL_SPI_MspDeInit+0x5c>)
 80038ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f0:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin);
 80038f2:	21e0      	movs	r1, #224	; 0xe0
 80038f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f8:	f003 faa6 	bl	8006e48 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80038fc:	e012      	b.n	8003924 <HAL_SPI_MspDeInit+0x50>
  else if(hspi->Instance==SPI3)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <HAL_SPI_MspDeInit+0x60>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10d      	bne.n	8003924 <HAL_SPI_MspDeInit+0x50>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_SPI_MspDeInit+0x5c>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	4a08      	ldr	r2, [pc, #32]	; (8003930 <HAL_SPI_MspDeInit+0x5c>)
 800390e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003912:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003914:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003918:	4807      	ldr	r0, [pc, #28]	; (8003938 <HAL_SPI_MspDeInit+0x64>)
 800391a:	f003 fa95 	bl	8006e48 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 800391e:	2033      	movs	r0, #51	; 0x33
 8003920:	f002 ff79 	bl	8006816 <HAL_NVIC_DisableIRQ>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40013000 	.word	0x40013000
 8003930:	40021000 	.word	0x40021000
 8003934:	40003c00 	.word	0x40003c00
 8003938:	48000800 	.word	0x48000800

0800393c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b0b4      	sub	sp, #208	; 0xd0
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003944:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003958:	2294      	movs	r2, #148	; 0x94
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f00a fd7b 	bl	800e458 <memset>
  if(huart->Instance==UART4)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a83      	ldr	r2, [pc, #524]	; (8003b74 <HAL_UART_MspInit+0x238>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d13c      	bne.n	80039e6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800396c:	2308      	movs	r3, #8
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003970:	2300      	movs	r3, #0
 8003972:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003978:	4618      	mov	r0, r3
 800397a:	f005 fe4b 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003984:	f7ff fd10 	bl	80033a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003988:	4b7b      	ldr	r3, [pc, #492]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	4a7a      	ldr	r2, [pc, #488]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 800398e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003992:	6593      	str	r3, [r2, #88]	; 0x58
 8003994:	4b78      	ldr	r3, [pc, #480]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a0:	4b75      	ldr	r3, [pc, #468]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a4:	4a74      	ldr	r2, [pc, #464]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ac:	4b72      	ldr	r3, [pc, #456]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 80039ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80039b8:	2303      	movs	r3, #3
 80039ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039be:	2302      	movs	r3, #2
 80039c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ca:	2303      	movs	r3, #3
 80039cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039d0:	2308      	movs	r3, #8
 80039d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80039da:	4619      	mov	r1, r3
 80039dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039e0:	f003 f8a0 	bl	8006b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039e4:	e0c2      	b.n	8003b6c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a64      	ldr	r2, [pc, #400]	; (8003b7c <HAL_UART_MspInit+0x240>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d13b      	bne.n	8003a68 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039f0:	2301      	movs	r3, #1
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80039f4:	2300      	movs	r3, #0
 80039f6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039fc:	4618      	mov	r0, r3
 80039fe:	f005 fe09 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003a08:	f7ff fcce 	bl	80033a8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a0c:	4b5a      	ldr	r3, [pc, #360]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a10:	4a59      	ldr	r2, [pc, #356]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a16:	6613      	str	r3, [r2, #96]	; 0x60
 8003a18:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a24:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	4a53      	ldr	r2, [pc, #332]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003a2a:	f043 0302 	orr.w	r3, r3, #2
 8003a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a30:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003a3c:	23c0      	movs	r3, #192	; 0xc0
 8003a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a42:	2302      	movs	r3, #2
 8003a44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a54:	2307      	movs	r3, #7
 8003a56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4847      	ldr	r0, [pc, #284]	; (8003b80 <HAL_UART_MspInit+0x244>)
 8003a62:	f003 f85f 	bl	8006b24 <HAL_GPIO_Init>
}
 8003a66:	e081      	b.n	8003b6c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a45      	ldr	r2, [pc, #276]	; (8003b84 <HAL_UART_MspInit+0x248>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d13b      	bne.n	8003aea <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a72:	2302      	movs	r3, #2
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a76:	2300      	movs	r3, #0
 8003a78:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f005 fdc8 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_UART_MspInit+0x152>
      Error_Handler();
 8003a8a:	f7ff fc8d 	bl	80033a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a8e:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	4a39      	ldr	r2, [pc, #228]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a98:	6593      	str	r3, [r2, #88]	; 0x58
 8003a9a:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aa6:	4b34      	ldr	r3, [pc, #208]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aaa:	4a33      	ldr	r2, [pc, #204]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003aac:	f043 0308 	orr.w	r3, r3, #8
 8003ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab2:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003abe:	2378      	movs	r3, #120	; 0x78
 8003ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ad6:	2307      	movs	r3, #7
 8003ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003adc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4829      	ldr	r0, [pc, #164]	; (8003b88 <HAL_UART_MspInit+0x24c>)
 8003ae4:	f003 f81e 	bl	8006b24 <HAL_GPIO_Init>
}
 8003ae8:	e040      	b.n	8003b6c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <HAL_UART_MspInit+0x250>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d13b      	bne.n	8003b6c <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003af4:	2304      	movs	r3, #4
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003af8:	2300      	movs	r3, #0
 8003afa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b00:	4618      	mov	r0, r3
 8003b02:	f005 fd87 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8003b0c:	f7ff fc4c 	bl	80033a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2c:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003b2e:	f043 0308 	orr.w	r3, r3, #8
 8003b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b34:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <HAL_UART_MspInit+0x23c>)
 8003b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003b40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b54:	2303      	movs	r3, #3
 8003b56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b5a:	2307      	movs	r3, #7
 8003b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b60:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b64:	4619      	mov	r1, r3
 8003b66:	4808      	ldr	r0, [pc, #32]	; (8003b88 <HAL_UART_MspInit+0x24c>)
 8003b68:	f002 ffdc 	bl	8006b24 <HAL_GPIO_Init>
}
 8003b6c:	bf00      	nop
 8003b6e:	37d0      	adds	r7, #208	; 0xd0
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40004c00 	.word	0x40004c00
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40013800 	.word	0x40013800
 8003b80:	48000400 	.word	0x48000400
 8003b84:	40004400 	.word	0x40004400
 8003b88:	48000c00 	.word	0x48000c00
 8003b8c:	40004800 	.word	0x40004800

08003b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <NMI_Handler+0x4>

08003b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b9a:	e7fe      	b.n	8003b9a <HardFault_Handler+0x4>

08003b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <MemManage_Handler+0x4>

08003ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ba6:	e7fe      	b.n	8003ba6 <BusFault_Handler+0x4>

08003ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <UsageFault_Handler+0x4>

08003bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bdc:	f001 fdc6 	bl	800576c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8003be8:	2002      	movs	r0, #2
 8003bea:	f003 fa4f 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003bf6:	2020      	movs	r0, #32
 8003bf8:	f003 fa48 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003bfc:	2040      	movs	r0, #64	; 0x40
 8003bfe:	f003 fa45 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003c02:	2080      	movs	r0, #128	; 0x80
 8003c04:	f003 fa42 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003c08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c0c:	f003 fa3e 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8003c18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c1c:	f003 fa36 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003c20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c24:	f003 fa32 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8003c28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c2c:	f003 fa2e 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c34:	f003 fa2a 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003c38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c3c:	f003 fa26 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003c40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c44:	f003 fa22 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <SPI3_IRQHandler+0x10>)
 8003c52:	f007 f803 	bl	800ac5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000418 	.word	0x20000418

08003c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	return 1;
 8003c64:	2301      	movs	r3, #1
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_kill>:

int _kill(int pid, int sig)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c7a:	f00a fb95 	bl	800e3a8 <__errno>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2216      	movs	r2, #22
 8003c82:	601a      	str	r2, [r3, #0]
	return -1;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_exit>:

void _exit (int status)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c98:	f04f 31ff 	mov.w	r1, #4294967295
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ffe7 	bl	8003c70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ca2:	e7fe      	b.n	8003ca2 <_exit+0x12>

08003ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e00a      	b.n	8003ccc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cb6:	f7ff fb5f 	bl	8003378 <__io_getchar>
 8003cba:	4601      	mov	r1, r0
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	60ba      	str	r2, [r7, #8]
 8003cc2:	b2ca      	uxtb	r2, r1
 8003cc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	dbf0      	blt.n	8003cb6 <_read+0x12>
	}

return len;
 8003cd4:	687b      	ldr	r3, [r7, #4]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e009      	b.n	8003d04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	60ba      	str	r2, [r7, #8]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fb27 	bl	800334c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dbf1      	blt.n	8003cf0 <_write+0x12>
	}
	return len;
 8003d0c:	687b      	ldr	r3, [r7, #4]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_close>:

int _close(int file)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
	return -1;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d3e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_isatty>:

int _isatty(int file)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	return 1;
 8003d56:	2301      	movs	r3, #1
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d88:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <_sbrk+0x5c>)
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <_sbrk+0x60>)
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <_sbrk+0x64>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <_sbrk+0x64>)
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <_sbrk+0x68>)
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <_sbrk+0x64>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d207      	bcs.n	8003dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003db0:	f00a fafa 	bl	800e3a8 <__errno>
 8003db4:	4603      	mov	r3, r0
 8003db6:	220c      	movs	r2, #12
 8003db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	e009      	b.n	8003dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <_sbrk+0x64>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <_sbrk+0x64>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <_sbrk+0x64>)
 8003dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200a0000 	.word	0x200a0000
 8003de0:	00000400 	.word	0x00000400
 8003de4:	20000fec 	.word	0x20000fec
 8003de8:	20001730 	.word	0x20001730

08003dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <SystemInit+0x20>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <SystemInit+0x20>)
 8003df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e14:	f7ff ffea 	bl	8003dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e18:	480c      	ldr	r0, [pc, #48]	; (8003e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8003e1a:	490d      	ldr	r1, [pc, #52]	; (8003e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e1c:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <LoopForever+0xe>)
  movs r3, #0
 8003e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e20:	e002      	b.n	8003e28 <LoopCopyDataInit>

08003e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e26:	3304      	adds	r3, #4

08003e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e2c:	d3f9      	bcc.n	8003e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e30:	4c0a      	ldr	r4, [pc, #40]	; (8003e5c <LoopForever+0x16>)
  movs r3, #0
 8003e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e34:	e001      	b.n	8003e3a <LoopFillZerobss>

08003e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e38:	3204      	adds	r2, #4

08003e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e3c:	d3fb      	bcc.n	8003e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e3e:	f00a fab9 	bl	800e3b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e42:	f7fe faab 	bl	800239c <main>

08003e46 <LoopForever>:

LoopForever:
    b LoopForever
 8003e46:	e7fe      	b.n	8003e46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e48:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e50:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003e54:	080143d8 	.word	0x080143d8
  ldr r2, =_sbss
 8003e58:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003e5c:	20001730 	.word	0x20001730

08003e60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e60:	e7fe      	b.n	8003e60 <ADC1_IRQHandler>
	...

08003e64 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	4a26      	ldr	r2, [pc, #152]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003e72:	f043 0302 	orr.w	r3, r3, #2
 8003e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003e84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e88:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003e8a:	2312      	movs	r3, #18
 8003e8c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e92:	2303      	movs	r3, #3
 8003e94:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003e96:	2304      	movs	r3, #4
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	481b      	ldr	r0, [pc, #108]	; (8003f10 <I2Cx_MspInit+0xac>)
 8003ea2:	f002 fe3f 	bl	8006b24 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003ea6:	f107 0314 	add.w	r3, r7, #20
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4818      	ldr	r0, [pc, #96]	; (8003f10 <I2Cx_MspInit+0xac>)
 8003eae:	f002 fe39 	bl	8006b24 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	4a0f      	ldr	r2, [pc, #60]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003ed0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ed4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	4a0c      	ldr	r2, [pc, #48]	; (8003f0c <I2Cx_MspInit+0xa8>)
 8003edc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003ee0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	210f      	movs	r1, #15
 8003ee6:	2021      	movs	r0, #33	; 0x21
 8003ee8:	f002 fc6b 	bl	80067c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003eec:	2021      	movs	r0, #33	; 0x21
 8003eee:	f002 fc84 	bl	80067fa <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	210f      	movs	r1, #15
 8003ef6:	2022      	movs	r0, #34	; 0x22
 8003ef8:	f002 fc63 	bl	80067c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003efc:	2022      	movs	r0, #34	; 0x22
 8003efe:	f002 fc7c 	bl	80067fa <HAL_NVIC_EnableIRQ>
}
 8003f02:	bf00      	nop
 8003f04:	3728      	adds	r7, #40	; 0x28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	48000400 	.word	0x48000400

08003f14 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <I2Cx_Init+0x54>)
 8003f20:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <I2Cx_Init+0x58>)
 8003f26:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff89 	bl	8003e64 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f003 f8b2 	bl	80070bc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003f58:	2100      	movs	r1, #0
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f003 fe40 	bl	8007be0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40005800 	.word	0x40005800
 8003f6c:	00702681 	.word	0x00702681

08003f70 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af04      	add	r7, sp, #16
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	72fb      	strb	r3, [r7, #11]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	b299      	uxth	r1, r3
 8003f92:	88f8      	ldrh	r0, [r7, #6]
 8003f94:	893a      	ldrh	r2, [r7, #8]
 8003f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f9a:	9302      	str	r3, [sp, #8]
 8003f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f003 fa5a 	bl	8007460 <HAL_I2C_Mem_Read>
 8003fac:	4603      	mov	r3, r0
 8003fae:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f832 	bl	8004024 <I2Cx_Error>
  }
  return status;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b08a      	sub	sp, #40	; 0x28
 8003fce:	af04      	add	r7, sp, #16
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	4608      	mov	r0, r1
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4603      	mov	r3, r0
 8003fda:	72fb      	strb	r3, [r7, #11]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	813b      	strh	r3, [r7, #8]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003fe8:	7afb      	ldrb	r3, [r7, #11]
 8003fea:	b299      	uxth	r1, r3
 8003fec:	88f8      	ldrh	r0, [r7, #6]
 8003fee:	893a      	ldrh	r2, [r7, #8]
 8003ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff4:	9302      	str	r3, [sp, #8]
 8003ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	4603      	mov	r3, r0
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f003 f919 	bl	8007238 <HAL_I2C_Mem_Write>
 8004006:	4603      	mov	r3, r0
 8004008:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004010:	7afb      	ldrb	r3, [r7, #11]
 8004012:	4619      	mov	r1, r3
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f805 	bl	8004024 <I2Cx_Error>
  }
  return status;
 800401a:	7dfb      	ldrb	r3, [r7, #23]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f003 f8d2 	bl	80071da <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff ff6c 	bl	8003f14 <I2Cx_Init>
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8004048:	4802      	ldr	r0, [pc, #8]	; (8004054 <SENSOR_IO_Init+0x10>)
 800404a:	f7ff ff63 	bl	8003f14 <I2Cx_Init>
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000ff0 	.word	0x20000ff0

08004058 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af02      	add	r7, sp, #8
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
 8004062:	460b      	mov	r3, r1
 8004064:	71bb      	strb	r3, [r7, #6]
 8004066:	4613      	mov	r3, r2
 8004068:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800406a:	79bb      	ldrb	r3, [r7, #6]
 800406c:	b29a      	uxth	r2, r3
 800406e:	79f9      	ldrb	r1, [r7, #7]
 8004070:	2301      	movs	r3, #1
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	1d7b      	adds	r3, r7, #5
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2301      	movs	r3, #1
 800407a:	4803      	ldr	r0, [pc, #12]	; (8004088 <SENSOR_IO_Write+0x30>)
 800407c:	f7ff ffa5 	bl	8003fca <I2Cx_WriteMultiple>
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000ff0 	.word	0x20000ff0

0800408c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	4603      	mov	r3, r0
 8004094:	460a      	mov	r2, r1
 8004096:	71fb      	strb	r3, [r7, #7]
 8004098:	4613      	mov	r3, r2
 800409a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80040a0:	79bb      	ldrb	r3, [r7, #6]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	79f9      	ldrb	r1, [r7, #7]
 80040a6:	2301      	movs	r3, #1
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	f107 030f 	add.w	r3, r7, #15
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2301      	movs	r3, #1
 80040b2:	4804      	ldr	r0, [pc, #16]	; (80040c4 <SENSOR_IO_Read+0x38>)
 80040b4:	f7ff ff5c 	bl	8003f70 <I2Cx_ReadMultiple>

  return read_value;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000ff0 	.word	0x20000ff0

080040c8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	603a      	str	r2, [r7, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
 80040d6:	460b      	mov	r3, r1
 80040d8:	71bb      	strb	r3, [r7, #6]
 80040da:	4613      	mov	r3, r2
 80040dc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80040de:	79bb      	ldrb	r3, [r7, #6]
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	79f9      	ldrb	r1, [r7, #7]
 80040e4:	88bb      	ldrh	r3, [r7, #4]
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2301      	movs	r3, #1
 80040ee:	4804      	ldr	r0, [pc, #16]	; (8004100 <SENSOR_IO_ReadMultiple+0x38>)
 80040f0:	f7ff ff3e 	bl	8003f70 <I2Cx_ReadMultiple>
 80040f4:	4603      	mov	r3, r0
 80040f6:	b29b      	uxth	r3, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000ff0 	.word	0x20000ff0

08004104 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <BSP_TSENSOR_Init+0x30>)
 8004110:	4a09      	ldr	r2, [pc, #36]	; (8004138 <BSP_TSENSOR_Init+0x34>)
 8004112:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8004114:	f7ff ff96 	bl	8004044 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <BSP_TSENSOR_Init+0x30>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2100      	movs	r1, #0
 8004120:	20be      	movs	r0, #190	; 0xbe
 8004122:	4798      	blx	r3

  ret = TSENSOR_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8004128:	79fb      	ldrb	r3, [r7, #7]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20001044 	.word	0x20001044
 8004138:	20000004 	.word	0x20000004

0800413c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <BSP_TSENSOR_ReadTemp+0x18>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	20be      	movs	r0, #190	; 0xbe
 8004148:	4798      	blx	r3
 800414a:	eef0 7a40 	vmov.f32	s15, s0
}
 800414e:	eeb0 0a67 	vmov.f32	s0, s15
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20001044 	.word	0x20001044

08004158 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	2b2f      	cmp	r3, #47	; 0x2f
 8004166:	d906      	bls.n	8004176 <Hex2Num+0x1e>
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	2b39      	cmp	r3, #57	; 0x39
 800416c:	d803      	bhi.n	8004176 <Hex2Num+0x1e>
        return a - '0';
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	3b30      	subs	r3, #48	; 0x30
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e014      	b.n	80041a0 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	2b60      	cmp	r3, #96	; 0x60
 800417a:	d906      	bls.n	800418a <Hex2Num+0x32>
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	2b66      	cmp	r3, #102	; 0x66
 8004180:	d803      	bhi.n	800418a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	3b57      	subs	r3, #87	; 0x57
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e00a      	b.n	80041a0 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d906      	bls.n	800419e <Hex2Num+0x46>
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	2b46      	cmp	r3, #70	; 0x46
 8004194:	d803      	bhi.n	800419e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	3b37      	subs	r3, #55	; 0x37
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e000      	b.n	80041a0 <Hex2Num+0x48>
    }

    return 0;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80041be:	e012      	b.n	80041e6 <ParseHexNumber+0x3a>
        sum <<= 4;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff ffc4 	bl	8004158 <Hex2Num>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461a      	mov	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
        ptr++;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3301      	adds	r3, #1
 80041de:	607b      	str	r3, [r7, #4]
        i++;
 80041e0:	7afb      	ldrb	r3, [r7, #11]
 80041e2:	3301      	adds	r3, #1
 80041e4:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b2f      	cmp	r3, #47	; 0x2f
 80041ec:	d903      	bls.n	80041f6 <ParseHexNumber+0x4a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b39      	cmp	r3, #57	; 0x39
 80041f4:	d9e4      	bls.n	80041c0 <ParseHexNumber+0x14>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b60      	cmp	r3, #96	; 0x60
 80041fc:	d903      	bls.n	8004206 <ParseHexNumber+0x5a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b66      	cmp	r3, #102	; 0x66
 8004204:	d9dc      	bls.n	80041c0 <ParseHexNumber+0x14>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d903      	bls.n	8004216 <ParseHexNumber+0x6a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b46      	cmp	r3, #70	; 0x46
 8004214:	d9d4      	bls.n	80041c0 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <ParseHexNumber+0x76>
        *cnt = i;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	7afa      	ldrb	r2, [r7, #11]
 8004220:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	2300      	movs	r3, #0
 800423c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b2d      	cmp	r3, #45	; 0x2d
 8004248:	d119      	bne.n	800427e <ParseNumber+0x52>
        minus = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3301      	adds	r3, #1
 8004252:	607b      	str	r3, [r7, #4]
        i++;
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	3301      	adds	r3, #1
 8004258:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800425a:	e010      	b.n	800427e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	3b30      	subs	r3, #48	; 0x30
 800426e:	4413      	add	r3, r2
 8004270:	60bb      	str	r3, [r7, #8]
        ptr++;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3301      	adds	r3, #1
 8004276:	607b      	str	r3, [r7, #4]
        i++;
 8004278:	7bbb      	ldrb	r3, [r7, #14]
 800427a:	3301      	adds	r3, #1
 800427c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b2f      	cmp	r3, #47	; 0x2f
 8004284:	d903      	bls.n	800428e <ParseNumber+0x62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b39      	cmp	r3, #57	; 0x39
 800428c:	d9e6      	bls.n	800425c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <ParseNumber+0x6e>
        *cnt = i;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	7bba      	ldrb	r2, [r7, #14]
 8004298:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <ParseNumber+0x7a>
        return 0 - sum;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	425b      	negs	r3, r3
 80042a4:	e000      	b.n	80042a8 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80042a6:	68bb      	ldr	r3, [r7, #8]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80042c2:	e019      	b.n	80042f8 <ParseMAC+0x44>
    hexcnt = 1;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b3a      	cmp	r3, #58	; 0x3a
 80042ce:	d00e      	beq.n	80042ee <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80042d0:	f107 030e 	add.w	r3, r7, #14
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ff68 	bl	80041ac <ParseHexNumber>
 80042dc:	4601      	mov	r1, r0
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	73fa      	strb	r2, [r7, #15]
 80042e4:	461a      	mov	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	4413      	add	r3, r2
 80042ea:	b2ca      	uxtb	r2, r1
 80042ec:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 80042ee:	7bbb      	ldrb	r3, [r7, #14]
 80042f0:	461a      	mov	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e1      	bne.n	80042c4 <ParseMAC+0x10>
  }
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8004318:	e019      	b.n	800434e <ParseIP+0x44>
    hexcnt = 1;
 800431a:	2301      	movs	r3, #1
 800431c:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b2e      	cmp	r3, #46	; 0x2e
 8004324:	d00e      	beq.n	8004344 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8004326:	f107 030e 	add.w	r3, r7, #14
 800432a:	4619      	mov	r1, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ff7d 	bl	800422c <ParseNumber>
 8004332:	4601      	mov	r1, r0
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	73fa      	strb	r2, [r7, #15]
 800433a:	461a      	mov	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4413      	add	r3, r2
 8004340:	b2ca      	uxtb	r2, r1
 8004342:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8004344:	7bbb      	ldrb	r3, [r7, #14]
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e1      	bne.n	800431a <ParseIP+0x10>
  }
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	3302      	adds	r3, #2
 8004372:	4934      	ldr	r1, [pc, #208]	; (8004444 <AT_ParseInfo+0xe4>)
 8004374:	4618      	mov	r0, r3
 8004376:	f00b ff47 	bl	8010208 <strtok>
 800437a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800437c:	e05a      	b.n	8004434 <AT_ParseInfo+0xd4>
    switch (num++) {
 800437e:	7afb      	ldrb	r3, [r7, #11]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	72fa      	strb	r2, [r7, #11]
 8004384:	2b06      	cmp	r3, #6
 8004386:	d84f      	bhi.n	8004428 <AT_ParseInfo+0xc8>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <AT_ParseInfo+0x30>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043ad 	.word	0x080043ad
 8004394:	080043bb 	.word	0x080043bb
 8004398:	080043cb 	.word	0x080043cb
 800439c:	080043db 	.word	0x080043db
 80043a0:	080043eb 	.word	0x080043eb
 80043a4:	080043fb 	.word	0x080043fb
 80043a8:	0800440f 	.word	0x0800440f
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	68f9      	ldr	r1, [r7, #12]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f00b f8d4 	bl	800f560 <strncpy>
      break;
 80043b8:	e037      	b.n	800442a <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3320      	adds	r3, #32
 80043be:	2218      	movs	r2, #24
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f00b f8cc 	bl	800f560 <strncpy>
      break;
 80043c8:	e02f      	b.n	800442a <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3338      	adds	r3, #56	; 0x38
 80043ce:	2210      	movs	r2, #16
 80043d0:	68f9      	ldr	r1, [r7, #12]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f00b f8c4 	bl	800f560 <strncpy>
      break;
 80043d8:	e027      	b.n	800442a <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3348      	adds	r3, #72	; 0x48
 80043de:	2210      	movs	r2, #16
 80043e0:	68f9      	ldr	r1, [r7, #12]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f00b f8bc 	bl	800f560 <strncpy>
      break;
 80043e8:	e01f      	b.n	800442a <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3358      	adds	r3, #88	; 0x58
 80043ee:	2210      	movs	r2, #16
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f00b f8b4 	bl	800f560 <strncpy>
      break;
 80043f8:	e017      	b.n	800442a <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80043fa:	2100      	movs	r1, #0
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff ff15 	bl	800422c <ParseNumber>
 8004402:	4603      	mov	r3, r0
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 800440c:	e00d      	b.n	800442a <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800440e:	490e      	ldr	r1, [pc, #56]	; (8004448 <AT_ParseInfo+0xe8>)
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f00b fef9 	bl	8010208 <strtok>
 8004416:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3368      	adds	r3, #104	; 0x68
 800441c:	2220      	movs	r2, #32
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	4618      	mov	r0, r3
 8004422:	f00b f89d 	bl	800f560 <strncpy>
      break;
 8004426:	e000      	b.n	800442a <AT_ParseInfo+0xca>

    default: break;
 8004428:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800442a:	4906      	ldr	r1, [pc, #24]	; (8004444 <AT_ParseInfo+0xe4>)
 800442c:	2000      	movs	r0, #0
 800442e:	f00b feeb 	bl	8010208 <strtok>
 8004432:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1a1      	bne.n	800437e <AT_ParseInfo+0x1e>
  }
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	08013ab0 	.word	0x08013ab0
 8004448:	08013ab4 	.word	0x08013ab4

0800444c <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3302      	adds	r3, #2
 800445e:	4952      	ldr	r1, [pc, #328]	; (80045a8 <AT_ParseConnSettings+0x15c>)
 8004460:	4618      	mov	r0, r3
 8004462:	f00b fed1 	bl	8010208 <strtok>
 8004466:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8004468:	e095      	b.n	8004596 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	73fa      	strb	r2, [r7, #15]
 8004470:	2b0b      	cmp	r3, #11
 8004472:	d87f      	bhi.n	8004574 <AT_ParseConnSettings+0x128>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <AT_ParseConnSettings+0x30>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044ad 	.word	0x080044ad
 8004480:	080044bb 	.word	0x080044bb
 8004484:	080044cb 	.word	0x080044cb
 8004488:	080044df 	.word	0x080044df
 800448c:	080044f3 	.word	0x080044f3
 8004490:	08004507 	.word	0x08004507
 8004494:	08004515 	.word	0x08004515
 8004498:	08004523 	.word	0x08004523
 800449c:	08004531 	.word	0x08004531
 80044a0:	0800453f 	.word	0x0800453f
 80044a4:	0800454d 	.word	0x0800454d
 80044a8:	08004561 	.word	0x08004561
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2221      	movs	r2, #33	; 0x21
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f00b f854 	bl	800f560 <strncpy>
      break;
 80044b8:	e05d      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	3321      	adds	r3, #33	; 0x21
 80044be:	2221      	movs	r2, #33	; 0x21
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f00b f84c 	bl	800f560 <strncpy>
      break;
 80044c8:	e055      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80044ca:	2100      	movs	r1, #0
 80044cc:	68b8      	ldr	r0, [r7, #8]
 80044ce:	f7ff fead 	bl	800422c <ParseNumber>
 80044d2:	4603      	mov	r3, r0
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80044dc:	e04b      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80044de:	2100      	movs	r1, #0
 80044e0:	68b8      	ldr	r0, [r7, #8]
 80044e2:	f7ff fea3 	bl	800422c <ParseNumber>
 80044e6:	4603      	mov	r3, r0
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80044f0:	e041      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80044f2:	2100      	movs	r1, #0
 80044f4:	68b8      	ldr	r0, [r7, #8]
 80044f6:	f7ff fe99 	bl	800422c <ParseNumber>
 80044fa:	4603      	mov	r3, r0
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8004504:	e037      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	3348      	adds	r3, #72	; 0x48
 800450a:	4619      	mov	r1, r3
 800450c:	68b8      	ldr	r0, [r7, #8]
 800450e:	f7ff fefc 	bl	800430a <ParseIP>
      break;
 8004512:	e030      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	334c      	adds	r3, #76	; 0x4c
 8004518:	4619      	mov	r1, r3
 800451a:	68b8      	ldr	r0, [r7, #8]
 800451c:	f7ff fef5 	bl	800430a <ParseIP>
      break;
 8004520:	e029      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	3350      	adds	r3, #80	; 0x50
 8004526:	4619      	mov	r1, r3
 8004528:	68b8      	ldr	r0, [r7, #8]
 800452a:	f7ff feee 	bl	800430a <ParseIP>
      break;
 800452e:	e022      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	3354      	adds	r3, #84	; 0x54
 8004534:	4619      	mov	r1, r3
 8004536:	68b8      	ldr	r0, [r7, #8]
 8004538:	f7ff fee7 	bl	800430a <ParseIP>
      break;
 800453c:	e01b      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	3358      	adds	r3, #88	; 0x58
 8004542:	4619      	mov	r1, r3
 8004544:	68b8      	ldr	r0, [r7, #8]
 8004546:	f7ff fee0 	bl	800430a <ParseIP>
      break;
 800454a:	e014      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800454c:	2100      	movs	r1, #0
 800454e:	68b8      	ldr	r0, [r7, #8]
 8004550:	f7ff fe6c 	bl	800422c <ParseNumber>
 8004554:	4603      	mov	r3, r0
 8004556:	b2da      	uxtb	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800455e:	e00a      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8004560:	2100      	movs	r1, #0
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7ff fe62 	bl	800422c <ParseNumber>
 8004568:	4603      	mov	r3, r0
 800456a:	b2da      	uxtb	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8004572:	e000      	b.n	8004576 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8004574:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8004576:	490c      	ldr	r1, [pc, #48]	; (80045a8 <AT_ParseConnSettings+0x15c>)
 8004578:	2000      	movs	r0, #0
 800457a:	f00b fe45 	bl	8010208 <strtok>
 800457e:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <AT_ParseConnSettings+0x14a>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3b01      	subs	r3, #1
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b2c      	cmp	r3, #44	; 0x2c
 800458e:	d102      	bne.n	8004596 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	3301      	adds	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f af66 	bne.w	800446a <AT_ParseConnSettings+0x1e>
    }
  }
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	08013ab0 	.word	0x08013ab0

080045ac <AT_ParseTransportSettings>:
  * @param  TransportSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseTransportSettings(char *pdata, ES_WIFI_Transport_t *TransportSettings)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3302      	adds	r3, #2
 80045be:	4949      	ldr	r1, [pc, #292]	; (80046e4 <AT_ParseTransportSettings+0x138>)
 80045c0:	4618      	mov	r0, r3
 80045c2:	f00b fe21 	bl	8010208 <strtok>
 80045c6:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80045c8:	e083      	b.n	80046d2 <AT_ParseTransportSettings+0x126>
    switch (num++) {
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	73fa      	strb	r2, [r7, #15]
 80045d0:	2b09      	cmp	r3, #9
 80045d2:	d86d      	bhi.n	80046b0 <AT_ParseTransportSettings+0x104>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <AT_ParseTransportSettings+0x30>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	08004605 	.word	0x08004605
 80045e0:	08004617 	.word	0x08004617
 80045e4:	08004625 	.word	0x08004625
 80045e8:	08004637 	.word	0x08004637
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004657 	.word	0x08004657
 80045f4:	08004669 	.word	0x08004669
 80045f8:	0800467b 	.word	0x0800467b
 80045fc:	0800468d 	.word	0x0800468d
 8004600:	0800469f 	.word	0x0800469f
    case 0:
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 8004604:	2100      	movs	r1, #0
 8004606:	68b8      	ldr	r0, [r7, #8]
 8004608:	f7ff fe10 	bl	800422c <ParseNumber>
 800460c:	4603      	mov	r3, r0
 800460e:	b2da      	uxtb	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	701a      	strb	r2, [r3, #0]
      break;
 8004614:	e04d      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    case 1:
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	4619      	mov	r1, r3
 800461c:	68b8      	ldr	r0, [r7, #8]
 800461e:	f7ff fe74 	bl	800430a <ParseIP>
      break;
 8004622:	e046      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    case 2:
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 8004624:	2100      	movs	r1, #0
 8004626:	68b8      	ldr	r0, [r7, #8]
 8004628:	f7ff fe00 	bl	800422c <ParseNumber>
 800462c:	4603      	mov	r3, r0
 800462e:	b29a      	uxth	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	80da      	strh	r2, [r3, #6]
      break;
 8004634:	e03d      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    case 3:
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	4619      	mov	r1, r3
 800463c:	68b8      	ldr	r0, [r7, #8]
 800463e:	f7ff fe64 	bl	800430a <ParseIP>
      break;
 8004642:	e036      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    case 4:
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 8004644:	2100      	movs	r1, #0
 8004646:	68b8      	ldr	r0, [r7, #8]
 8004648:	f7ff fdf0 	bl	800422c <ParseNumber>
 800464c:	4603      	mov	r3, r0
 800464e:	b29a      	uxth	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	819a      	strh	r2, [r3, #12]
      break;
 8004654:	e02d      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    case 5:
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8004656:	2100      	movs	r1, #0
 8004658:	68b8      	ldr	r0, [r7, #8]
 800465a:	f7ff fde7 	bl	800422c <ParseNumber>
 800465e:	4603      	mov	r3, r0
 8004660:	b2da      	uxtb	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	739a      	strb	r2, [r3, #14]
      break;
 8004666:	e024      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    case 6:
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 8004668:	2100      	movs	r1, #0
 800466a:	68b8      	ldr	r0, [r7, #8]
 800466c:	f7ff fdde 	bl	800422c <ParseNumber>
 8004670:	4603      	mov	r3, r0
 8004672:	b2da      	uxtb	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	73da      	strb	r2, [r3, #15]
      break;
 8004678:	e01b      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    case 7:
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 800467a:	2100      	movs	r1, #0
 800467c:	68b8      	ldr	r0, [r7, #8]
 800467e:	f7ff fdd5 	bl	800422c <ParseNumber>
 8004682:	4603      	mov	r3, r0
 8004684:	b2da      	uxtb	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	741a      	strb	r2, [r3, #16]
      break;
 800468a:	e012      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    case 8:
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 800468c:	2100      	movs	r1, #0
 800468e:	68b8      	ldr	r0, [r7, #8]
 8004690:	f7ff fdcc 	bl	800422c <ParseNumber>
 8004694:	4603      	mov	r3, r0
 8004696:	b2da      	uxtb	r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	745a      	strb	r2, [r3, #17]
      break;
 800469c:	e009      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    case 9:
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 800469e:	2100      	movs	r1, #0
 80046a0:	68b8      	ldr	r0, [r7, #8]
 80046a2:	f7ff fdc3 	bl	800422c <ParseNumber>
 80046a6:	4603      	mov	r3, r0
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	749a      	strb	r2, [r3, #18]
      break;
 80046ae:	e000      	b.n	80046b2 <AT_ParseTransportSettings+0x106>

    default:
      break;
 80046b0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80046b2:	490c      	ldr	r1, [pc, #48]	; (80046e4 <AT_ParseTransportSettings+0x138>)
 80046b4:	2000      	movs	r0, #0
 80046b6:	f00b fda7 	bl	8010208 <strtok>
 80046ba:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <AT_ParseTransportSettings+0x126>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b2c      	cmp	r3, #44	; 0x2c
 80046ca:	d102      	bne.n	80046d2 <AT_ParseTransportSettings+0x126>
    { /* Ignore empty fields */
      num++;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	3301      	adds	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f47f af78 	bne.w	80045ca <AT_ParseTransportSettings+0x1e>
    }
  }
}
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	08013ab0 	.word	0x08013ab0

080046e8 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3302      	adds	r3, #2
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b31      	cmp	r3, #49	; 0x31
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	701a      	strb	r2, [r3, #0]
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f7fb fd70 	bl	8000214 <strlen>
 8004734:	4603      	mov	r3, r0
 8004736:	b299      	uxth	r1, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800473e:	461a      	mov	r2, r3
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	47a0      	blx	r4
 8004744:	4603      	mov	r3, r0
 8004746:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	dd3e      	ble.n	80047cc <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800475a:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
 8004762:	4603      	mov	r3, r0
 8004764:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8004766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800476a:	2b00      	cmp	r3, #0
 800476c:	dd27      	ble.n	80047be <AT_ExecuteCommand+0xaa>
 800476e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004772:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8004776:	dc22      	bgt.n	80047be <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8004778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800477c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8004780:	d105      	bne.n	800478e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8004782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29b      	uxth	r3, r3
 800478c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800478e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 800479a:	490f      	ldr	r1, [pc, #60]	; (80047d8 <AT_ExecuteCommand+0xc4>)
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f00a fef2 	bl	800f586 <strstr>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <AT_ExecuteCommand+0x98>
      {
        return ES_WIFI_STATUS_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e010      	b.n	80047ce <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80047ac:	490b      	ldr	r1, [pc, #44]	; (80047dc <AT_ExecuteCommand+0xc8>)
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f00a fee9 	bl	800f586 <strstr>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <AT_ExecuteCommand+0xaa>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80047ba:	2305      	movs	r3, #5
 80047bc:	e007      	b.n	80047ce <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80047be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80047c2:	f113 0f04 	cmn.w	r3, #4
 80047c6:	d101      	bne.n	80047cc <AT_ExecuteCommand+0xb8>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 80047c8:	2306      	movs	r3, #6
 80047ca:	e000      	b.n	80047ce <AT_ExecuteCommand+0xba>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80047cc:	2304      	movs	r3, #4
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}
 80047d6:	bf00      	nop
 80047d8:	08013ac4 	.word	0x08013ac4
 80047dc:	08013ad0 	.word	0x08013ad0

080047e0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 80047fa:	68b8      	ldr	r0, [r7, #8]
 80047fc:	f7fb fd0a 	bl	8000214 <strlen>
 8004800:	4603      	mov	r3, r0
 8004802:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8004804:	8a7b      	ldrh	r3, [r7, #18]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <AT_RequestSendData+0x32>
 800480e:	2302      	movs	r3, #2
 8004810:	e053      	b.n	80048ba <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800481e:	8a79      	ldrh	r1, [r7, #18]
 8004820:	68b8      	ldr	r0, [r7, #8]
 8004822:	4798      	blx	r3
 8004824:	4603      	mov	r3, r0
 8004826:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8004828:	8a3a      	ldrh	r2, [r7, #16]
 800482a:	8a7b      	ldrh	r3, [r7, #18]
 800482c:	429a      	cmp	r2, r3
 800482e:	d143      	bne.n	80048b8 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800483c:	8879      	ldrh	r1, [r7, #2]
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	4798      	blx	r3
 8004842:	4603      	mov	r3, r0
 8004844:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8004846:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800484a:	887b      	ldrh	r3, [r7, #2]
 800484c:	429a      	cmp	r2, r3
 800484e:	d131      	bne.n	80048b4 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800485c:	2100      	movs	r1, #0
 800485e:	6a38      	ldr	r0, [r7, #32]
 8004860:	4798      	blx	r3
 8004862:	4603      	mov	r3, r0
 8004864:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8004866:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800486a:	2b00      	cmp	r3, #0
 800486c:	dd19      	ble.n	80048a2 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800486e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004872:	6a3a      	ldr	r2, [r7, #32]
 8004874:	4413      	add	r3, r2
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800487a:	4912      	ldr	r1, [pc, #72]	; (80048c4 <AT_RequestSendData+0xe4>)
 800487c:	6a38      	ldr	r0, [r7, #32]
 800487e:	f00a fe82 	bl	800f586 <strstr>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <AT_RequestSendData+0xac>
        {
          return ES_WIFI_STATUS_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e016      	b.n	80048ba <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800488c:	490e      	ldr	r1, [pc, #56]	; (80048c8 <AT_RequestSendData+0xe8>)
 800488e:	6a38      	ldr	r0, [r7, #32]
 8004890:	f00a fe79 	bl	800f586 <strstr>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <AT_RequestSendData+0xbe>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800489a:	2305      	movs	r3, #5
 800489c:	e00d      	b.n	80048ba <AT_RequestSendData+0xda>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 800489e:	2302      	movs	r3, #2
 80048a0:	e00b      	b.n	80048ba <AT_RequestSendData+0xda>
        }
      }
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80048a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048a6:	f113 0f04 	cmn.w	r3, #4
 80048aa:	d101      	bne.n	80048b0 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80048ac:	2306      	movs	r3, #6
 80048ae:	e004      	b.n	80048ba <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80048b0:	2302      	movs	r3, #2
 80048b2:	e002      	b.n	80048ba <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80048b4:	2302      	movs	r3, #2
 80048b6:	e000      	b.n	80048ba <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80048b8:	2304      	movs	r3, #4
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	08013ac4 	.word	0x08013ac4
 80048c8:	08013ad0 	.word	0x08013ad0

080048cc <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80048e0:	613b      	str	r3, [r7, #16]

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80048e8:	68b8      	ldr	r0, [r7, #8]
 80048ea:	f7fb fc93 	bl	8000214 <strlen>
 80048ee:	4603      	mov	r3, r0
 80048f0:	b299      	uxth	r1, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80048f8:	461a      	mov	r2, r3
 80048fa:	68b8      	ldr	r0, [r7, #8]
 80048fc:	47a0      	blx	r4
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	dd6f      	ble.n	80049e4 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8004910:	2100      	movs	r1, #0
 8004912:	6938      	ldr	r0, [r7, #16]
 8004914:	4798      	blx	r3
 8004916:	4603      	mov	r3, r0
 8004918:	617b      	str	r3, [r7, #20]
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f113 0f04 	cmn.w	r3, #4
 8004920:	d101      	bne.n	8004926 <AT_RequestReceiveData+0x5a>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
 8004922:	2306      	movs	r3, #6
 8004924:	e05f      	b.n	80049e6 <AT_RequestReceiveData+0x11a>
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b0d      	cmp	r3, #13
 800492c:	d104      	bne.n	8004938 <AT_RequestReceiveData+0x6c>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	3301      	adds	r3, #1
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b0a      	cmp	r3, #10
 8004936:	d001      	beq.n	800493c <AT_RequestReceiveData+0x70>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8004938:	2304      	movs	r3, #4
 800493a:	e054      	b.n	80049e6 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	3b02      	subs	r3, #2
 8004940:	617b      	str	r3, [r7, #20]
    p+=2;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	3302      	adds	r3, #2
 8004946:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b07      	cmp	r3, #7
 800494c:	d94a      	bls.n	80049e4 <AT_RequestReceiveData+0x118>
    {
     while(len && (p[len-1]==0x15)) len--;
 800494e:	e002      	b.n	8004956 <AT_RequestReceiveData+0x8a>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	3b01      	subs	r3, #1
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d006      	beq.n	800496a <AT_RequestReceiveData+0x9e>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3b01      	subs	r3, #1
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4413      	add	r3, r2
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b15      	cmp	r3, #21
 8004968:	d0f2      	beq.n	8004950 <AT_RequestReceiveData+0x84>
     p[len] = '\0';
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3b08      	subs	r3, #8
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4413      	add	r3, r2
 800497c:	491c      	ldr	r1, [pc, #112]	; (80049f0 <AT_RequestReceiveData+0x124>)
 800497e:	4618      	mov	r0, r3
 8004980:	f00a fe01 	bl	800f586 <strstr>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d016      	beq.n	80049b8 <AT_RequestReceiveData+0xec>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b08      	subs	r3, #8
 8004990:	b29a      	uxth	r2, r3
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	887a      	ldrh	r2, [r7, #2]
 800499c:	429a      	cmp	r2, r3
 800499e:	d202      	bcs.n	80049a6 <AT_RequestReceiveData+0xda>
       {
         *ReadData = Reqlen;
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	887a      	ldrh	r2, [r7, #2]
 80049a4:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	6939      	ldr	r1, [r7, #16]
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f009 fd44 	bl	800e43c <memcpy>
       return ES_WIFI_STATUS_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e016      	b.n	80049e6 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	3b04      	subs	r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4413      	add	r3, r2
 80049c0:	2204      	movs	r2, #4
 80049c2:	490c      	ldr	r1, [pc, #48]	; (80049f4 <AT_RequestReceiveData+0x128>)
 80049c4:	4618      	mov	r0, r3
 80049c6:	f009 fd29 	bl	800e41c <memcmp>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <AT_RequestReceiveData+0x10e>
     {
       *ReadData = 0;
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	2200      	movs	r2, #0
 80049d4:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80049d6:	2305      	movs	r3, #5
 80049d8:	e005      	b.n	80049e6 <AT_RequestReceiveData+0x11a>
     }

     *ReadData = 0;
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	2200      	movs	r2, #0
 80049de:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80049e0:	2305      	movs	r3, #5
 80049e2:	e000      	b.n	80049e6 <AT_RequestReceiveData+0x11a>
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80049e4:	2304      	movs	r3, #4
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd90      	pop	{r4, r7, pc}
 80049ee:	bf00      	nop
 80049f0:	08013ac4 	.word	0x08013ac4
 80049f4:	08013ad8 	.word	0x08013ad8

080049f8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004a00:	2302      	movs	r3, #2
 8004a02:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a0a:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004a14:	2000      	movs	r0, #0
 8004a16:	4798      	blx	r3
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d113      	bne.n	8004a46 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a24:	461a      	mov	r2, r3
 8004a26:	490a      	ldr	r1, [pc, #40]	; (8004a50 <ES_WIFI_Init+0x58>)
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fe73 	bl	8004714 <AT_ExecuteCommand>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff fc8d 	bl	8004360 <AT_ParseInfo>
    }
  }
  return ret;
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	08013ae0 	.word	0x08013ae0

08004a54 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <ES_WIFI_RegisterBusIO+0x2c>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <ES_WIFI_RegisterBusIO+0x2c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <ES_WIFI_RegisterBusIO+0x2c>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <ES_WIFI_RegisterBusIO+0x2c>
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8004a80:	2302      	movs	r3, #2
 8004a82:	e014      	b.n	8004aae <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <ES_WIFI_Connect+0x1a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <ES_WIFI_Connect+0x20>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	75fb      	strb	r3, [r7, #23]
 8004ada:	e062      	b.n	8004ba2 <ES_WIFI_Connect+0xe6>
  }
  else
  {
    LOCK_WIFI();

    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	4931      	ldr	r1, [pc, #196]	; (8004bac <ES_WIFI_Connect+0xf0>)
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f00a fd06 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004af8:	461a      	mov	r2, r3
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff fe0a 	bl	8004714 <AT_ExecuteCommand>
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]
    if(ret == ES_WIFI_STATUS_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d14b      	bne.n	8004ba2 <ES_WIFI_Connect+0xe6>
    {
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4927      	ldr	r1, [pc, #156]	; (8004bb0 <ES_WIFI_Connect+0xf4>)
 8004b14:	4618      	mov	r0, r3
 8004b16:	f00a fcef 	bl	800f4f8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b26:	461a      	mov	r2, r3
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f7ff fdf3 	bl	8004714 <AT_ExecuteCommand>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d134      	bne.n	8004ba2 <ES_WIFI_Connect+0xe6>
      {
        Obj->Security = SecType;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	491a      	ldr	r1, [pc, #104]	; (8004bb4 <ES_WIFI_Connect+0xf8>)
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f00a fcd4 	bl	800f4f8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff fdd8 	bl	8004714 <AT_ExecuteCommand>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]

        if(ret == ES_WIFI_STATUS_OK)
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d119      	bne.n	8004ba2 <ES_WIFI_Connect+0xe6>
        {
          sprintf((char*)Obj->CmdData,"C0\r");
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b74:	4910      	ldr	r1, [pc, #64]	; (8004bb8 <ES_WIFI_Connect+0xfc>)
 8004b76:	4618      	mov	r0, r3
 8004b78:	f00a fcbe 	bl	800f4f8 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b88:	461a      	mov	r2, r3
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fdc2 	bl	8004714 <AT_ExecuteCommand>
 8004b90:	4603      	mov	r3, r0
 8004b92:	75fb      	strb	r3, [r7, #23]
          if(ret == ES_WIFI_STATUS_OK)
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <ES_WIFI_Connect+0xe6>
          {
            Obj->NetSettings.IsConnected = 1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
      }
    }

    UNLOCK_WIFI();
  }
  return ret;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	08013af8 	.word	0x08013af8
 8004bb0:	08013b00 	.word	0x08013b00
 8004bb4:	08013b08 	.word	0x08013b08
 8004bb8:	08013b10 	.word	0x08013b10

08004bbc <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004bca:	4911      	ldr	r1, [pc, #68]	; (8004c10 <ES_WIFI_IsConnected+0x54>)
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f00a fc93 	bl	800f4f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004bde:	461a      	mov	r2, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fd97 	bl	8004714 <AT_ExecuteCommand>
 8004be6:	4603      	mov	r3, r0
 8004be8:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d108      	bne.n	8004c02 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	33d2      	adds	r3, #210	; 0xd2
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f7ff fd73 	bl	80046e8 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	08013b14 	.word	0x08013b14

08004c14 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c22:	4910      	ldr	r1, [pc, #64]	; (8004c64 <ES_WIFI_GetNetworkSettings+0x50>)
 8004c24:	4618      	mov	r0, r3
 8004c26:	f00a fc67 	bl	800f4f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c36:	461a      	mov	r2, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff fd6b 	bl	8004714 <AT_ExecuteCommand>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	338d      	adds	r3, #141	; 0x8d
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f7ff fbf9 	bl	800444c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	08013b1c 	.word	0x08013b1c

08004c68 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c78:	4912      	ldr	r1, [pc, #72]	; (8004cc4 <ES_WIFI_GetMACAddress+0x5c>)
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f00a fc3c 	bl	800f4f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff fd40 	bl	8004714 <AT_ExecuteCommand>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10c      	bne.n	8004cb8 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	4908      	ldr	r1, [pc, #32]	; (8004cc8 <ES_WIFI_GetMACAddress+0x60>)
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f00b faad 	bl	8010208 <strtok>
 8004cae:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	68b8      	ldr	r0, [r7, #8]
 8004cb4:	f7ff fafe 	bl	80042b4 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08013b6c 	.word	0x08013b6c
 8004cc8:	08013b70 	.word	0x08013b70

08004ccc <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	4912      	ldr	r1, [pc, #72]	; (8004d2c <ES_WIFI_DNS_LookUp+0x60>)
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f00a fc08 	bl	800f4f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff fd0c 	bl	8004714 <AT_ExecuteCommand>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]

  if(ret == ES_WIFI_STATUS_OK)
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10c      	bne.n	8004d20 <ES_WIFI_DNS_LookUp+0x54>
  {
    ptr = strtok((char *)Obj->CmdData + 2, "\r");
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	4908      	ldr	r1, [pc, #32]	; (8004d30 <ES_WIFI_DNS_LookUp+0x64>)
 8004d10:	4618      	mov	r0, r3
 8004d12:	f00b fa79 	bl	8010208 <strtok>
 8004d16:	6138      	str	r0, [r7, #16]
    ParseIP(ptr, ipaddress);
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	6938      	ldr	r0, [r7, #16]
 8004d1c:	f7ff faf5 	bl	800430a <ParseIP>
  }
  UNLOCK_WIFI();
  return ret;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	08013bcc 	.word	0x08013bcc
 8004d30:	08013ab4 	.word	0x08013ab4

08004d34 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <ES_WIFI_StartClientConnection+0x1e>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d105      	bne.n	8004d5e <ES_WIFI_StartClientConnection+0x2a>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	889b      	ldrh	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <ES_WIFI_StartClientConnection+0x2a>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e0dd      	b.n	8004f1a <ES_WIFI_StartClientConnection+0x1e6>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	789b      	ldrb	r3, [r3, #2]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	496e      	ldr	r1, [pc, #440]	; (8004f24 <ES_WIFI_StartClientConnection+0x1f0>)
 8004d6c:	f00a fbc4 	bl	800f4f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fcc8 	bl	8004714 <AT_ExecuteCommand>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d114      	bne.n	8004db8 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4963      	ldr	r1, [pc, #396]	; (8004f28 <ES_WIFI_StartClientConnection+0x1f4>)
 8004d9c:	f00a fbac 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004dac:	461a      	mov	r2, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fcb0 	bl	8004714 <AT_ExecuteCommand>
 8004db4:	4603      	mov	r3, r0
 8004db6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d114      	bne.n	8004de8 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	88db      	ldrh	r3, [r3, #6]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4958      	ldr	r1, [pc, #352]	; (8004f2c <ES_WIFI_StartClientConnection+0x1f8>)
 8004dcc:	f00a fb94 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff fc98 	bl	8004714 <AT_ExecuteCommand>
 8004de4:	4603      	mov	r3, r0
 8004de6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d11c      	bne.n	8004e28 <ES_WIFI_StartClientConnection+0xf4>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <ES_WIFI_StartClientConnection+0xca>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d114      	bne.n	8004e28 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	889b      	ldrh	r3, [r3, #4]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4949      	ldr	r1, [pc, #292]	; (8004f30 <ES_WIFI_StartClientConnection+0x1fc>)
 8004e0c:	f00a fb74 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fc78 	bl	8004714 <AT_ExecuteCommand>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d128      	bne.n	8004e80 <ES_WIFI_StartClientConnection+0x14c>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <ES_WIFI_StartClientConnection+0x10a>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d120      	bne.n	8004e80 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	7a1b      	ldrb	r3, [r3, #8]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	7a5b      	ldrb	r3, [r3, #9]
 8004e4e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	7a9b      	ldrb	r3, [r3, #10]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8004e54:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	7adb      	ldrb	r3, [r3, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	9200      	str	r2, [sp, #0]
 8004e5e:	4623      	mov	r3, r4
 8004e60:	460a      	mov	r2, r1
 8004e62:	4934      	ldr	r1, [pc, #208]	; (8004f34 <ES_WIFI_StartClientConnection+0x200>)
 8004e64:	f00a fb48 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e74:	461a      	mov	r2, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff fc4c 	bl	8004714 <AT_ExecuteCommand>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d118      	bne.n	8004eb8 <ES_WIFI_StartClientConnection+0x184>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d114      	bne.n	8004eb8 <ES_WIFI_StartClientConnection+0x184>
  {
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4927      	ldr	r1, [pc, #156]	; (8004f38 <ES_WIFI_StartClientConnection+0x204>)
 8004e9c:	f00a fb2c 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004eac:	461a      	mov	r2, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff fc30 	bl	8004714 <AT_ExecuteCommand>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d116      	bne.n	8004eec <ES_WIFI_StartClientConnection+0x1b8>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d112      	bne.n	8004eec <ES_WIFI_StartClientConnection+0x1b8>
  {
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ecc:	491b      	ldr	r1, [pc, #108]	; (8004f3c <ES_WIFI_StartClientConnection+0x208>)
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f00a fb12 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff fc16 	bl	8004714 <AT_ExecuteCommand>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d112      	bne.n	8004f18 <ES_WIFI_StartClientConnection+0x1e4>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ef8:	4911      	ldr	r1, [pc, #68]	; (8004f40 <ES_WIFI_StartClientConnection+0x20c>)
 8004efa:	4618      	mov	r0, r3
 8004efc:	f00a fafc 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff fc00 	bl	8004714 <AT_ExecuteCommand>
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd90      	pop	{r4, r7, pc}
 8004f22:	bf00      	nop
 8004f24:	08013bd4 	.word	0x08013bd4
 8004f28:	08013bdc 	.word	0x08013bdc
 8004f2c:	08013be4 	.word	0x08013be4
 8004f30:	08013bec 	.word	0x08013bec
 8004f34:	08013bf4 	.word	0x08013bf4
 8004f38:	08013c04 	.word	0x08013c04
 8004f3c:	08013c0c 	.word	0x08013c0c
 8004f40:	08013c14 	.word	0x08013c14

08004f44 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	789b      	ldrb	r3, [r3, #2]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4915      	ldr	r1, [pc, #84]	; (8004fb0 <ES_WIFI_StopClientConnection+0x6c>)
 8004f5c:	f00a facc 	bl	800f4f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fbd0 	bl	8004714 <AT_ExecuteCommand>
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d112      	bne.n	8004fa4 <ES_WIFI_StopClientConnection+0x60>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f84:	490b      	ldr	r1, [pc, #44]	; (8004fb4 <ES_WIFI_StopClientConnection+0x70>)
 8004f86:	4618      	mov	r0, r3
 8004f88:	f00a fab6 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fbba 	bl	8004714 <AT_ExecuteCommand>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	73fb      	strb	r3, [r7, #15]
  }
  UNLOCK_WIFI();
  return ret;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	08013bd4 	.word	0x08013bd4
 8004fb4:	08013c1c 	.word	0x08013c1c

08004fb8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	72fb      	strb	r3, [r7, #11]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e001      	b.n	8004fe0 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8004fe0:	893b      	ldrh	r3, [r7, #8]
 8004fe2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004fe6:	d302      	bcc.n	8004fee <ES_WIFI_SendData+0x36>
 8004fe8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8004fec:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	893a      	ldrh	r2, [r7, #8]
 8004ff2:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ffa:	7afa      	ldrb	r2, [r7, #11]
 8004ffc:	492d      	ldr	r1, [pc, #180]	; (80050b4 <ES_WIFI_SendData+0xfc>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f00a fa7a 	bl	800f4f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005010:	461a      	mov	r2, r3
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff fb7e 	bl	8004714 <AT_ExecuteCommand>
 8005018:	4603      	mov	r3, r0
 800501a:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d13c      	bne.n	800509c <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4923      	ldr	r1, [pc, #140]	; (80050b8 <ES_WIFI_SendData+0x100>)
 800502c:	4618      	mov	r0, r3
 800502e:	f00a fa63 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800503e:	461a      	mov	r2, r3
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff fb67 	bl	8004714 <AT_ExecuteCommand>
 8005046:	4603      	mov	r3, r0
 8005048:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800504a:	7cfb      	ldrb	r3, [r7, #19]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d125      	bne.n	800509c <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005056:	893a      	ldrh	r2, [r7, #8]
 8005058:	4918      	ldr	r1, [pc, #96]	; (80050bc <ES_WIFI_SendData+0x104>)
 800505a:	4618      	mov	r0, r3
 800505c:	f00a fa4c 	bl	800f4f8 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800506c:	893a      	ldrh	r2, [r7, #8]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff fbb3 	bl	80047e0 <AT_RequestSendData>
 800507a:	4603      	mov	r3, r0
 800507c:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800507e:	7cfb      	ldrb	r3, [r7, #19]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10b      	bne.n	800509c <ES_WIFI_SendData+0xe4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800508a:	490d      	ldr	r1, [pc, #52]	; (80050c0 <ES_WIFI_SendData+0x108>)
 800508c:	4618      	mov	r0, r3
 800508e:	f00a fa7a 	bl	800f586 <strstr>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <ES_WIFI_SendData+0xe4>
        {
          DEBUGMSG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 8005098:	2302      	movs	r3, #2
 800509a:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUGMSG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d102      	bne.n	80050a8 <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2200      	movs	r2, #0
 80050a6:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80050a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	08013bd4 	.word	0x08013bd4
 80050b8:	08013cb8 	.word	0x08013cb8
 80050bc:	08013cc0 	.word	0x08013cc0
 80050c0:	08013ccc 	.word	0x08013ccc

080050c4 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b08b      	sub	sp, #44	; 0x2c
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	461a      	mov	r2, r3
 80050d0:	460b      	mov	r3, r1
 80050d2:	72fb      	strb	r3, [r7, #11]
 80050d4:	4613      	mov	r3, r2
 80050d6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80050d8:	2302      	movs	r3, #2
 80050da:	76fb      	strb	r3, [r7, #27]

  if (Timeout == 0)
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <ES_WIFI_SendDataTo+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80050e2:	2301      	movs	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e001      	b.n	80050ec <ES_WIFI_SendDataTo+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ea:	61fb      	str	r3, [r7, #28]
  }

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80050f2:	7afa      	ldrb	r2, [r7, #11]
 80050f4:	4964      	ldr	r1, [pc, #400]	; (8005288 <ES_WIFI_SendDataTo+0x1c4>)
 80050f6:	4618      	mov	r0, r3
 80050f8:	f00a f9fe 	bl	800f4f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005108:	461a      	mov	r2, r3
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff fb02 	bl	8004714 <AT_ExecuteCommand>
 8005110:	4603      	mov	r3, r0
 8005112:	76fb      	strb	r3, [r7, #27]

  if (ret == ES_WIFI_STATUS_OK)
 8005114:	7efb      	ldrb	r3, [r7, #27]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d114      	bne.n	8005144 <ES_WIFI_SendDataTo+0x80>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005120:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 8005124:	4959      	ldr	r1, [pc, #356]	; (800528c <ES_WIFI_SendDataTo+0x1c8>)
 8005126:	4618      	mov	r0, r3
 8005128:	f00a f9e6 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005138:	461a      	mov	r2, r3
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff faea 	bl	8004714 <AT_ExecuteCommand>
 8005140:	4603      	mov	r3, r0
 8005142:	76fb      	strb	r3, [r7, #27]
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 8005144:	7efb      	ldrb	r3, [r7, #27]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d113      	bne.n	8005172 <ES_WIFI_SendDataTo+0xae>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005150:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005152:	494f      	ldr	r1, [pc, #316]	; (8005290 <ES_WIFI_SendDataTo+0x1cc>)
 8005154:	4618      	mov	r0, r3
 8005156:	f00a f9cf 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005166:	461a      	mov	r2, r3
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff fad3 	bl	8004714 <AT_ExecuteCommand>
 800516e:	4603      	mov	r3, r0
 8005170:	76fb      	strb	r3, [r7, #27]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8005172:	7efb      	ldrb	r3, [r7, #27]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d123      	bne.n	80051c0 <ES_WIFI_SendDataTo+0xfc>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	3301      	adds	r3, #1
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	461c      	mov	r4, r3
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	3302      	adds	r3, #2
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	3303      	adds	r3, #3
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	9200      	str	r2, [sp, #0]
 800519e:	4623      	mov	r3, r4
 80051a0:	460a      	mov	r2, r1
 80051a2:	493c      	ldr	r1, [pc, #240]	; (8005294 <ES_WIFI_SendDataTo+0x1d0>)
 80051a4:	f00a f9a8 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80051b4:	461a      	mov	r2, r3
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff faac 	bl	8004714 <AT_ExecuteCommand>
 80051bc:	4603      	mov	r3, r0
 80051be:	76fb      	strb	r3, [r7, #27]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80051c0:	7efb      	ldrb	r3, [r7, #27]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <ES_WIFI_SendDataTo+0x110>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 80051c6:	893b      	ldrh	r3, [r7, #8]
 80051c8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80051cc:	d302      	bcc.n	80051d4 <ES_WIFI_SendDataTo+0x110>
    {
      Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80051ce:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80051d2:	813b      	strh	r3, [r7, #8]
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
 80051d4:	7efb      	ldrb	r3, [r7, #27]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d113      	bne.n	8005202 <ES_WIFI_SendDataTo+0x13e>
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	492d      	ldr	r1, [pc, #180]	; (8005298 <ES_WIFI_SendDataTo+0x1d4>)
 80051e4:	4618      	mov	r0, r3
 80051e6:	f00a f987 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80051f6:	461a      	mov	r2, r3
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff fa8b 	bl	8004714 <AT_ExecuteCommand>
 80051fe:	4603      	mov	r3, r0
 8005200:	76fb      	strb	r3, [r7, #27]
  }

  if(ret == ES_WIFI_STATUS_OK)
 8005202:	7efb      	ldrb	r3, [r7, #27]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d116      	bne.n	8005236 <ES_WIFI_SendDataTo+0x172>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800520e:	893a      	ldrh	r2, [r7, #8]
 8005210:	4922      	ldr	r1, [pc, #136]	; (800529c <ES_WIFI_SendDataTo+0x1d8>)
 8005212:	4618      	mov	r0, r3
 8005214:	f00a f970 	bl	800f4f8 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005224:	893a      	ldrh	r2, [r7, #8]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fad7 	bl	80047e0 <AT_RequestSendData>
 8005232:	4603      	mov	r3, r0
 8005234:	76fb      	strb	r3, [r7, #27]
  }

  if(ret == ES_WIFI_STATUS_OK)
 8005236:	7efb      	ldrb	r3, [r7, #27]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d115      	bne.n	8005268 <ES_WIFI_SendDataTo+0x1a4>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005242:	4917      	ldr	r1, [pc, #92]	; (80052a0 <ES_WIFI_SendDataTo+0x1dc>)
 8005244:	4618      	mov	r0, r3
 8005246:	f00a f99e 	bl	800f586 <strstr>
 800524a:	6178      	str	r0, [r7, #20]
    if(ptr != NULL)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <ES_WIFI_SendDataTo+0x1a4>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	429a      	cmp	r2, r3
 800525c:	d202      	bcs.n	8005264 <ES_WIFI_SendDataTo+0x1a0>
      {
        ret = ES_WIFI_STATUS_ERROR;
 800525e:	2302      	movs	r3, #2
 8005260:	76fb      	strb	r3, [r7, #27]
 8005262:	e001      	b.n	8005268 <ES_WIFI_SendDataTo+0x1a4>
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 8005264:	2304      	movs	r3, #4
 8005266:	76fb      	strb	r3, [r7, #27]
      }
    }
  }

  if (ret == ES_WIFI_STATUS_OK)
 8005268:	7efb      	ldrb	r3, [r7, #27]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <ES_WIFI_SendDataTo+0x1b2>
  {
    *SentLen = Reqlen;
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	893a      	ldrh	r2, [r7, #8]
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	e002      	b.n	800527c <ES_WIFI_SendDataTo+0x1b8>
  }
  else
  {
    DEBUGMSG("Send error:\n%s\n", Obj->CmdData);
    *SentLen = 0;
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	2200      	movs	r2, #0
 800527a:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();
  return ret;
 800527c:	7efb      	ldrb	r3, [r7, #27]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3724      	adds	r7, #36	; 0x24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd90      	pop	{r4, r7, pc}
 8005286:	bf00      	nop
 8005288:	08013bd4 	.word	0x08013bd4
 800528c:	08013be4 	.word	0x08013be4
 8005290:	08013bec 	.word	0x08013bec
 8005294:	08013bf4 	.word	0x08013bf4
 8005298:	08013cb8 	.word	0x08013cb8
 800529c:	08013cc0 	.word	0x08013cc0
 80052a0:	08013ccc 	.word	0x08013ccc

080052a4 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	461a      	mov	r2, r3
 80052b0:	460b      	mov	r3, r1
 80052b2:	72fb      	strb	r3, [r7, #11]
 80052b4:	4613      	mov	r3, r2
 80052b6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80052b8:	2302      	movs	r3, #2
 80052ba:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80052c2:	2301      	movs	r3, #1
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	e001      	b.n	80052cc <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80052cc:	893b      	ldrh	r3, [r7, #8]
 80052ce:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80052d2:	d862      	bhi.n	800539a <ES_WIFI_ReceiveData+0xf6>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80052da:	7afa      	ldrb	r2, [r7, #11]
 80052dc:	4931      	ldr	r1, [pc, #196]	; (80053a4 <ES_WIFI_ReceiveData+0x100>)
 80052de:	4618      	mov	r0, r3
 80052e0:	f00a f90a 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80052f0:	461a      	mov	r2, r3
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff fa0e 	bl	8004714 <AT_ExecuteCommand>
 80052f8:	4603      	mov	r3, r0
 80052fa:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d146      	bne.n	8005390 <ES_WIFI_ReceiveData+0xec>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005308:	893a      	ldrh	r2, [r7, #8]
 800530a:	4927      	ldr	r1, [pc, #156]	; (80053a8 <ES_WIFI_ReceiveData+0x104>)
 800530c:	4618      	mov	r0, r3
 800530e:	f00a f8f3 	bl	800f4f8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800531e:	461a      	mov	r2, r3
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff f9f7 	bl	8004714 <AT_ExecuteCommand>
 8005326:	4603      	mov	r3, r0
 8005328:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800532a:	7cfb      	ldrb	r3, [r7, #19]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d12b      	bne.n	8005388 <ES_WIFI_ReceiveData+0xe4>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	491c      	ldr	r1, [pc, #112]	; (80053ac <ES_WIFI_ReceiveData+0x108>)
 800533a:	4618      	mov	r0, r3
 800533c:	f00a f8dc 	bl	800f4f8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800534c:	461a      	mov	r2, r3
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7ff f9e0 	bl	8004714 <AT_ExecuteCommand>
 8005354:	4603      	mov	r3, r0
 8005356:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11d      	bne.n	800539a <ES_WIFI_ReceiveData+0xf6>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005364:	4912      	ldr	r1, [pc, #72]	; (80053b0 <ES_WIFI_ReceiveData+0x10c>)
 8005366:	4618      	mov	r0, r3
 8005368:	f00a f8c6 	bl	800f4f8 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005372:	893a      	ldrh	r2, [r7, #8]
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff faa5 	bl	80048cc <AT_RequestReceiveData>
 8005382:	4603      	mov	r3, r0
 8005384:	74fb      	strb	r3, [r7, #19]
 8005386:	e008      	b.n	800539a <ES_WIFI_ReceiveData+0xf6>
        }
      }
      else
      {
        DEBUGMSG("setting requested len failed\n");
        *Receivedlen = 0;
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2200      	movs	r2, #0
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	e004      	b.n	800539a <ES_WIFI_ReceiveData+0xf6>
      }
    }
    else
    {
      DEBUGMSG("setting socket for read failed\n");
      issue15++;
 8005390:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <ES_WIFI_ReceiveData+0x110>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	4a07      	ldr	r2, [pc, #28]	; (80053b4 <ES_WIFI_ReceiveData+0x110>)
 8005398:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800539a:	7cfb      	ldrb	r3, [r7, #19]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	08013bd4 	.word	0x08013bd4
 80053a8:	08013cd4 	.word	0x08013cd4
 80053ac:	08013cdc 	.word	0x08013cdc
 80053b0:	08013ce4 	.word	0x08013ce4
 80053b4:	20001048 	.word	0x20001048

080053b8 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	461a      	mov	r2, r3
 80053c4:	460b      	mov	r3, r1
 80053c6:	72fb      	strb	r3, [r7, #11]
 80053c8:	4613      	mov	r3, r2
 80053ca:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  *Receivedlen = 0;
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	2200      	movs	r2, #0
 80053d6:	801a      	strh	r2, [r3, #0]


  if (Timeout == 0)
 80053d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d102      	bne.n	80053e4 <ES_WIFI_ReceiveDataFrom+0x2c>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80053de:	2301      	movs	r3, #1
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e2:	e001      	b.n	80053e8 <ES_WIFI_ReceiveDataFrom+0x30>
  }
  else
  {
    wkgTimeOut = Timeout;
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80053e8:	893b      	ldrh	r3, [r7, #8]
 80053ea:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80053ee:	d814      	bhi.n	800541a <ES_WIFI_ReceiveDataFrom+0x62>
  {
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80053f6:	7afa      	ldrb	r2, [r7, #11]
 80053f8:	4953      	ldr	r1, [pc, #332]	; (8005548 <ES_WIFI_ReceiveDataFrom+0x190>)
 80053fa:	4618      	mov	r0, r3
 80053fc:	f00a f87c 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800540c:	461a      	mov	r2, r3
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff f980 	bl	8004714 <AT_ExecuteCommand>
 8005414:	4603      	mov	r3, r0
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  if(ret == ES_WIFI_STATUS_OK)
 800541a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800541e:	2b00      	cmp	r3, #0
 8005420:	d114      	bne.n	800544c <ES_WIFI_ReceiveDataFrom+0x94>
  {
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005428:	893a      	ldrh	r2, [r7, #8]
 800542a:	4948      	ldr	r1, [pc, #288]	; (800554c <ES_WIFI_ReceiveDataFrom+0x194>)
 800542c:	4618      	mov	r0, r3
 800542e:	f00a f863 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800543e:	461a      	mov	r2, r3
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff f967 	bl	8004714 <AT_ExecuteCommand>
 8005446:	4603      	mov	r3, r0
 8005448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  else
  {
    DEBUGMSG("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 800544c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005450:	2b00      	cmp	r3, #0
 8005452:	d114      	bne.n	800547e <ES_WIFI_ReceiveDataFrom+0xc6>
  {
    sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800545a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545c:	493c      	ldr	r1, [pc, #240]	; (8005550 <ES_WIFI_ReceiveDataFrom+0x198>)
 800545e:	4618      	mov	r0, r3
 8005460:	f00a f84a 	bl	800f4f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005470:	461a      	mov	r2, r3
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff f94e 	bl	8004714 <AT_ExecuteCommand>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  else
  {
    DEBUGMSG("R1 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 800547e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005482:	2b00      	cmp	r3, #0
 8005484:	d114      	bne.n	80054b0 <ES_WIFI_ReceiveDataFrom+0xf8>
  {
    sprintf((char*)Obj->CmdData,"R0\r");
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800548c:	4931      	ldr	r1, [pc, #196]	; (8005554 <ES_WIFI_ReceiveDataFrom+0x19c>)
 800548e:	4618      	mov	r0, r3
 8005490:	f00a f832 	bl	800f4f8 <siprintf>
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800549a:	893a      	ldrh	r2, [r7, #8]
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	4613      	mov	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fa11 	bl	80048cc <AT_RequestReceiveData>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  else
  {
    DEBUGMSG("R2 failed.\n");
  }

  if (ret == ES_WIFI_STATUS_OK)
 80054b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d13a      	bne.n	800552e <ES_WIFI_ReceiveDataFrom+0x176>
  {
    if (*Receivedlen > Reqlen)
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	893a      	ldrh	r2, [r7, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d203      	bcs.n	80054ca <ES_WIFI_ReceiveDataFrom+0x112>
    {
      DEBUGMSG("AT_RequestReceiveData overflow\n.");
      ret = ES_WIFI_STATUS_ERROR;
 80054c2:	2302      	movs	r3, #2
 80054c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054c8:	e031      	b.n	800552e <ES_WIFI_ReceiveDataFrom+0x176>
    }
    else
    {
      if (*Receivedlen > 0)
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d02d      	beq.n	800552e <ES_WIFI_ReceiveDataFrom+0x176>
      {
        /* Get the peer addr */
        sprintf((char*)Obj->CmdData,"P?\r");
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054d8:	491f      	ldr	r1, [pc, #124]	; (8005558 <ES_WIFI_ReceiveDataFrom+0x1a0>)
 80054da:	4618      	mov	r0, r3
 80054dc:	f00a f80c 	bl	800f4f8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054ec:	461a      	mov	r2, r3
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff f910 	bl	8004714 <AT_ExecuteCommand>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (ret == ES_WIFI_STATUS_OK)
 80054fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d115      	bne.n	800552e <ES_WIFI_ReceiveDataFrom+0x176>
        {
          ES_WIFI_Transport_t TransportSettings;
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 8005502:	f107 0314 	add.w	r3, r7, #20
 8005506:	2214      	movs	r2, #20
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f008 ffa4 	bl	800e458 <memset>
          AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005516:	f107 0214 	add.w	r2, r7, #20
 800551a:	4611      	mov	r1, r2
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff f845 	bl	80045ac <AT_ParseTransportSettings>
 8005522:	69fa      	ldr	r2, [r7, #28]
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8005524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005526:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8005528:	8c3a      	ldrh	r2, [r7, #32]
 800552a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800552c:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
 800552e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <ES_WIFI_ReceiveDataFrom+0x184>
  {
    DEBUGMSG("Read error:\n%s\n", Obj->CmdData);
    *Receivedlen = 0;
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2200      	movs	r2, #0
 800553a:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800553c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005540:	4618      	mov	r0, r3
 8005542:	3730      	adds	r7, #48	; 0x30
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	08013bd4 	.word	0x08013bd4
 800554c:	08013cd4 	.word	0x08013cd4
 8005550:	08013cdc 	.word	0x08013cdc
 8005554:	08013ce4 	.word	0x08013ce4
 8005558:	08013c6c 	.word	0x08013c6c

0800555c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	6039      	str	r1, [r7, #0]
 8005566:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2120      	movs	r1, #32
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fd8c 	bl	800408c <SENSOR_IO_Read>
 8005574:	4603      	mov	r3, r0
 8005576:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	f043 0304 	orr.w	r3, r3, #4
 8005586:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800559e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	7bfa      	ldrb	r2, [r7, #15]
 80055a6:	2120      	movs	r1, #32
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fe fd55 	bl	8004058 <SENSOR_IO_Write>
}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b088      	sub	sp, #32
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	4603      	mov	r3, r0
 80055be:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	b2d8      	uxtb	r0, r3
 80055c4:	f107 0208 	add.w	r2, r7, #8
 80055c8:	2302      	movs	r3, #2
 80055ca:	21b2      	movs	r1, #178	; 0xb2
 80055cc:	f7fe fd7c 	bl	80040c8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2135      	movs	r1, #53	; 0x35
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fd58 	bl	800408c <SENSOR_IO_Read>
 80055dc:	4603      	mov	r3, r0
 80055de:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80055e0:	7ffb      	ldrb	r3, [r7, #31]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	b21b      	sxth	r3, r3
 80055e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ea:	b21a      	sxth	r2, r3
 80055ec:	7a3b      	ldrb	r3, [r7, #8]
 80055ee:	b21b      	sxth	r3, r3
 80055f0:	4313      	orrs	r3, r2
 80055f2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80055f4:	7ffb      	ldrb	r3, [r7, #31]
 80055f6:	019b      	lsls	r3, r3, #6
 80055f8:	b21b      	sxth	r3, r3
 80055fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fe:	b21a      	sxth	r2, r3
 8005600:	7a7b      	ldrb	r3, [r7, #9]
 8005602:	b21b      	sxth	r3, r3
 8005604:	4313      	orrs	r3, r2
 8005606:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8005608:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800560c:	10db      	asrs	r3, r3, #3
 800560e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8005610:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005614:	10db      	asrs	r3, r3, #3
 8005616:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	b2d8      	uxtb	r0, r3
 800561c:	f107 0208 	add.w	r2, r7, #8
 8005620:	2304      	movs	r3, #4
 8005622:	21bc      	movs	r1, #188	; 0xbc
 8005624:	f7fe fd50 	bl	80040c8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005628:	7a7b      	ldrb	r3, [r7, #9]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	b21a      	sxth	r2, r3
 800562e:	7a3b      	ldrb	r3, [r7, #8]
 8005630:	b21b      	sxth	r3, r3
 8005632:	4313      	orrs	r3, r2
 8005634:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8005636:	7afb      	ldrb	r3, [r7, #11]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	b21a      	sxth	r2, r3
 800563c:	7abb      	ldrb	r3, [r7, #10]
 800563e:	b21b      	sxth	r3, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	b2d8      	uxtb	r0, r3
 8005648:	f107 0208 	add.w	r2, r7, #8
 800564c:	2302      	movs	r3, #2
 800564e:	21aa      	movs	r1, #170	; 0xaa
 8005650:	f7fe fd3a 	bl	80040c8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005654:	7a7b      	ldrb	r3, [r7, #9]
 8005656:	021b      	lsls	r3, r3, #8
 8005658:	b21a      	sxth	r2, r3
 800565a:	7a3b      	ldrb	r3, [r7, #8]
 800565c:	b21b      	sxth	r3, r3
 800565e:	4313      	orrs	r3, r2
 8005660:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8005662:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005666:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005674:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005678:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005686:	ee67 6a27 	vmul.f32	s13, s14, s15
 800568a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800568e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800569c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056b0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	ee07 3a90 	vmov	s15, r3
}
 80056ba:	eeb0 0a67 	vmov.f32	s0, s15
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056ce:	2003      	movs	r0, #3
 80056d0:	f001 f86c 	bl	80067ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056d4:	2000      	movs	r0, #0
 80056d6:	f000 f80d 	bl	80056f4 <HAL_InitTick>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	71fb      	strb	r3, [r7, #7]
 80056e4:	e001      	b.n	80056ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80056e6:	f7fd fe65 	bl	80033b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056ea:	79fb      	ldrb	r3, [r7, #7]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005700:	4b17      	ldr	r3, [pc, #92]	; (8005760 <HAL_InitTick+0x6c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d023      	beq.n	8005750 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005708:	4b16      	ldr	r3, [pc, #88]	; (8005764 <HAL_InitTick+0x70>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b14      	ldr	r3, [pc, #80]	; (8005760 <HAL_InitTick+0x6c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	4619      	mov	r1, r3
 8005712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005716:	fbb3 f3f1 	udiv	r3, r3, r1
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	4618      	mov	r0, r3
 8005720:	f001 f887 	bl	8006832 <HAL_SYSTICK_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10f      	bne.n	800574a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b0f      	cmp	r3, #15
 800572e:	d809      	bhi.n	8005744 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005730:	2200      	movs	r2, #0
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	f001 f843 	bl	80067c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800573c:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <HAL_InitTick+0x74>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	e007      	b.n	8005754 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
 8005748:	e004      	b.n	8005754 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
 800574e:	e001      	b.n	8005754 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000018 	.word	0x20000018
 8005764:	20000000 	.word	0x20000000
 8005768:	20000014 	.word	0x20000014

0800576c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_IncTick+0x20>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <HAL_IncTick+0x24>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4413      	add	r3, r2
 800577c:	4a04      	ldr	r2, [pc, #16]	; (8005790 <HAL_IncTick+0x24>)
 800577e:	6013      	str	r3, [r2, #0]
}
 8005780:	bf00      	nop
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000018 	.word	0x20000018
 8005790:	2000104c 	.word	0x2000104c

08005794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return uwTick;
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <HAL_GetTick+0x14>)
 800579a:	681b      	ldr	r3, [r3, #0]
}
 800579c:	4618      	mov	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	2000104c 	.word	0x2000104c

080057ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057b4:	f7ff ffee 	bl	8005794 <HAL_GetTick>
 80057b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d005      	beq.n	80057d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <HAL_Delay+0x44>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057d2:	bf00      	nop
 80057d4:	f7ff ffde 	bl	8005794 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d8f7      	bhi.n	80057d4 <HAL_Delay+0x28>
  {
  }
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000018 	.word	0x20000018

080057f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	609a      	str	r2, [r3, #8]
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3360      	adds	r3, #96	; 0x60
 800586e:	461a      	mov	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <LL_ADC_SetOffset+0x44>)
 800587e:	4013      	ands	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	4313      	orrs	r3, r2
 800588c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	03fff000 	.word	0x03fff000

080058a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3360      	adds	r3, #96	; 0x60
 80058b2:	461a      	mov	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3360      	adds	r3, #96	; 0x60
 80058e0:	461a      	mov	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	615a      	str	r2, [r3, #20]
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3330      	adds	r3, #48	; 0x30
 800593c:	461a      	mov	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	f003 030c 	and.w	r3, r3, #12
 8005948:	4413      	add	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	211f      	movs	r1, #31
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	0e9b      	lsrs	r3, r3, #26
 8005964:	f003 011f 	and.w	r1, r3, #31
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	fa01 f303 	lsl.w	r3, r1, r3
 8005972:	431a      	orrs	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3314      	adds	r3, #20
 8005994:	461a      	mov	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	0e5b      	lsrs	r3, r3, #25
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	4413      	add	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	0d1b      	lsrs	r3, r3, #20
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	2107      	movs	r1, #7
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	43db      	mvns	r3, r3
 80059b8:	401a      	ands	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	0d1b      	lsrs	r3, r3, #20
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	431a      	orrs	r2, r3
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f4:	43db      	mvns	r3, r3
 80059f6:	401a      	ands	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f003 0318 	and.w	r3, r3, #24
 80059fe:	4908      	ldr	r1, [pc, #32]	; (8005a20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a00:	40d9      	lsrs	r1, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	400b      	ands	r3, r1
 8005a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	0007ffff 	.word	0x0007ffff

08005a24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005a34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6093      	str	r3, [r2, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5c:	d101      	bne.n	8005a62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aac:	d101      	bne.n	8005ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <LL_ADC_IsEnabled+0x18>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <LL_ADC_IsEnabled+0x1a>
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d101      	bne.n	8005afe <LL_ADC_REG_IsConversionOngoing+0x18>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d101      	bne.n	8005b24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e12f      	b.n	8005dae <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d109      	bne.n	8005b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fd fc4d 	bl	80033fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff ff67 	bl	8005a48 <LL_ADC_IsDeepPowerDownEnabled>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff ff4d 	bl	8005a24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff ff82 	bl	8005a98 <LL_ADC_IsInternalRegulatorEnabled>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d115      	bne.n	8005bc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff ff66 	bl	8005a70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ba4:	4b84      	ldr	r3, [pc, #528]	; (8005db8 <HAL_ADC_Init+0x284>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	099b      	lsrs	r3, r3, #6
 8005baa:	4a84      	ldr	r2, [pc, #528]	; (8005dbc <HAL_ADC_Init+0x288>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bb8:	e002      	b.n	8005bc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f9      	bne.n	8005bba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff ff64 	bl	8005a98 <LL_ADC_IsInternalRegulatorEnabled>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10d      	bne.n	8005bf2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	f043 0210 	orr.w	r2, r3, #16
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be6:	f043 0201 	orr.w	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff ff75 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 8005bfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f040 80c8 	bne.w	8005d9c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 80c4 	bne.w	8005d9c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c1c:	f043 0202 	orr.w	r2, r3, #2
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff ff49 	bl	8005ac0 <LL_ADC_IsEnabled>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c34:	4862      	ldr	r0, [pc, #392]	; (8005dc0 <HAL_ADC_Init+0x28c>)
 8005c36:	f7ff ff43 	bl	8005ac0 <LL_ADC_IsEnabled>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d105      	bne.n	8005c4c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4619      	mov	r1, r3
 8005c46:	485f      	ldr	r0, [pc, #380]	; (8005dc4 <HAL_ADC_Init+0x290>)
 8005c48:	f7ff fdd4 	bl	80057f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7e5b      	ldrb	r3, [r3, #25]
 8005c50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005c5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005c62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d106      	bne.n	8005c88 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	045b      	lsls	r3, r3, #17
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d009      	beq.n	8005ca4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	4b47      	ldr	r3, [pc, #284]	; (8005dc8 <HAL_ADC_Init+0x294>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	69b9      	ldr	r1, [r7, #24]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff ff12 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 8005cc2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff ff1f 	bl	8005b0c <LL_ADC_INJ_IsConversionOngoing>
 8005cce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d140      	bne.n	8005d58 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d13d      	bne.n	8005d58 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7e1b      	ldrb	r3, [r3, #24]
 8005ce4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ce6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfe:	f023 0306 	bic.w	r3, r3, #6
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d118      	bne.n	8005d48 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d20:	f023 0304 	bic.w	r3, r3, #4
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d2c:	4311      	orrs	r1, r2
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d32:	4311      	orrs	r1, r2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0201 	orr.w	r2, r2, #1
 8005d44:	611a      	str	r2, [r3, #16]
 8005d46:	e007      	b.n	8005d58 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0201 	bic.w	r2, r2, #1
 8005d56:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10c      	bne.n	8005d7a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d66:	f023 010f 	bic.w	r1, r3, #15
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	1e5a      	subs	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
 8005d78:	e007      	b.n	8005d8a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 020f 	bic.w	r2, r2, #15
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	f043 0201 	orr.w	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	659a      	str	r2, [r3, #88]	; 0x58
 8005d9a:	e007      	b.n	8005dac <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	f043 0210 	orr.w	r2, r3, #16
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005dac:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3720      	adds	r7, #32
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	053e2d63 	.word	0x053e2d63
 8005dc0:	50040000 	.word	0x50040000
 8005dc4:	50040300 	.word	0x50040300
 8005dc8:	fff0c007 	.word	0xfff0c007

08005dcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0b6      	sub	sp, #216	; 0xd8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_ADC_ConfigChannel+0x22>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e3d5      	b.n	800659a <HAL_ADC_ConfigChannel+0x7ce>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff fe73 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f040 83ba 	bne.w	800657c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b05      	cmp	r3, #5
 8005e0e:	d824      	bhi.n	8005e5a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	3b02      	subs	r3, #2
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d81b      	bhi.n	8005e52 <HAL_ADC_ConfigChannel+0x86>
 8005e1a:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <HAL_ADC_ConfigChannel+0x54>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e31 	.word	0x08005e31
 8005e24:	08005e39 	.word	0x08005e39
 8005e28:	08005e41 	.word	0x08005e41
 8005e2c:	08005e49 	.word	0x08005e49
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	220c      	movs	r2, #12
 8005e34:	605a      	str	r2, [r3, #4]
          break;
 8005e36:	e011      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2212      	movs	r2, #18
 8005e3c:	605a      	str	r2, [r3, #4]
          break;
 8005e3e:	e00d      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2218      	movs	r2, #24
 8005e44:	605a      	str	r2, [r3, #4]
          break;
 8005e46:	e009      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e4e:	605a      	str	r2, [r3, #4]
          break;
 8005e50:	e004      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2206      	movs	r2, #6
 8005e56:	605a      	str	r2, [r3, #4]
          break;
 8005e58:	e000      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005e5a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	6859      	ldr	r1, [r3, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f7ff fd5f 	bl	800592c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fe37 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 8005e78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff fe43 	bl	8005b0c <LL_ADC_INJ_IsConversionOngoing>
 8005e86:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 81c1 	bne.w	8006216 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 81bc 	bne.w	8006216 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ea6:	d10f      	bne.n	8005ec8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	f7ff fd66 	bl	8005984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff fd20 	bl	8005906 <LL_ADC_SetSamplingTimeCommonConfig>
 8005ec6:	e00e      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6819      	ldr	r1, [r3, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f7ff fd55 	bl	8005984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2100      	movs	r1, #0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fd10 	bl	8005906 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	08db      	lsrs	r3, r3, #3
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d00a      	beq.n	8005f1e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6919      	ldr	r1, [r3, #16]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f18:	f7ff fca0 	bl	800585c <LL_ADC_SetOffset>
 8005f1c:	e17b      	b.n	8006216 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fcbd 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <HAL_ADC_ConfigChannel+0x17e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff fcb2 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 8005f40:	4603      	mov	r3, r0
 8005f42:	0e9b      	lsrs	r3, r3, #26
 8005f44:	f003 021f 	and.w	r2, r3, #31
 8005f48:	e01e      	b.n	8005f88 <HAL_ADC_ConfigChannel+0x1bc>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fca7 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f60:	fa93 f3a3 	rbit	r3, r3
 8005f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005f78:	2320      	movs	r3, #32
 8005f7a:	e004      	b.n	8005f86 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8005f7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f80:	fab3 f383 	clz	r3, r3
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x1d4>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	0e9b      	lsrs	r3, r3, #26
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	e018      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x206>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fac:	fa93 f3a3 	rbit	r3, r3
 8005fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005fbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8005fc4:	2320      	movs	r3, #32
 8005fc6:	e004      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8005fc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fcc:	fab3 f383 	clz	r3, r3
 8005fd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d106      	bne.n	8005fe4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff fc76 	bl	80058d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff fc5a 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <HAL_ADC_ConfigChannel+0x244>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2101      	movs	r1, #1
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fc4f 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 8006006:	4603      	mov	r3, r0
 8006008:	0e9b      	lsrs	r3, r3, #26
 800600a:	f003 021f 	and.w	r2, r3, #31
 800600e:	e01e      	b.n	800604e <HAL_ADC_ConfigChannel+0x282>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2101      	movs	r1, #1
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fc44 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 800601c:	4603      	mov	r3, r0
 800601e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006026:	fa93 f3a3 	rbit	r3, r3
 800602a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800602e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800603e:	2320      	movs	r3, #32
 8006040:	e004      	b.n	800604c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8006042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006046:	fab3 f383 	clz	r3, r3
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <HAL_ADC_ConfigChannel+0x29a>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	0e9b      	lsrs	r3, r3, #26
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	e018      	b.n	8006098 <HAL_ADC_ConfigChannel+0x2cc>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006072:	fa93 f3a3 	rbit	r3, r3
 8006076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800607a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800607e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800608a:	2320      	movs	r3, #32
 800608c:	e004      	b.n	8006098 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800608e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006092:	fab3 f383 	clz	r3, r3
 8006096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006098:	429a      	cmp	r2, r3
 800609a:	d106      	bne.n	80060aa <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2200      	movs	r2, #0
 80060a2:	2101      	movs	r1, #1
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fc13 	bl	80058d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2102      	movs	r1, #2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff fbf7 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <HAL_ADC_ConfigChannel+0x30a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2102      	movs	r1, #2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fbec 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 80060cc:	4603      	mov	r3, r0
 80060ce:	0e9b      	lsrs	r3, r3, #26
 80060d0:	f003 021f 	and.w	r2, r3, #31
 80060d4:	e01e      	b.n	8006114 <HAL_ADC_ConfigChannel+0x348>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2102      	movs	r1, #2
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fbe1 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060ec:	fa93 f3a3 	rbit	r3, r3
 80060f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80060f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80060fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8006104:	2320      	movs	r3, #32
 8006106:	e004      	b.n	8006112 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8006108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800610c:	fab3 f383 	clz	r3, r3
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <HAL_ADC_ConfigChannel+0x360>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	0e9b      	lsrs	r3, r3, #26
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	e016      	b.n	800615a <HAL_ADC_ConfigChannel+0x38e>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006138:	fa93 f3a3 	rbit	r3, r3
 800613c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800613e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006144:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800614c:	2320      	movs	r3, #32
 800614e:	e004      	b.n	800615a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8006150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006154:	fab3 f383 	clz	r3, r3
 8006158:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800615a:	429a      	cmp	r2, r3
 800615c:	d106      	bne.n	800616c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	2102      	movs	r1, #2
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fbb2 	bl	80058d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2103      	movs	r1, #3
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff fb96 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 8006178:	4603      	mov	r3, r0
 800617a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x3cc>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2103      	movs	r1, #3
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fb8b 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 800618e:	4603      	mov	r3, r0
 8006190:	0e9b      	lsrs	r3, r3, #26
 8006192:	f003 021f 	and.w	r2, r3, #31
 8006196:	e017      	b.n	80061c8 <HAL_ADC_ConfigChannel+0x3fc>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2103      	movs	r1, #3
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff fb80 	bl	80058a4 <LL_ADC_GetOffsetChannel>
 80061a4:	4603      	mov	r3, r0
 80061a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061aa:	fa93 f3a3 	rbit	r3, r3
 80061ae:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80061b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80061b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80061ba:	2320      	movs	r3, #32
 80061bc:	e003      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80061be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061c0:	fab3 f383 	clz	r3, r3
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d105      	bne.n	80061e0 <HAL_ADC_ConfigChannel+0x414>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	0e9b      	lsrs	r3, r3, #26
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	e011      	b.n	8006204 <HAL_ADC_ConfigChannel+0x438>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061e8:	fa93 f3a3 	rbit	r3, r3
 80061ec:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80061ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80061f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80061f8:	2320      	movs	r3, #32
 80061fa:	e003      	b.n	8006204 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80061fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fe:	fab3 f383 	clz	r3, r3
 8006202:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006204:	429a      	cmp	r2, r3
 8006206:	d106      	bne.n	8006216 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2200      	movs	r2, #0
 800620e:	2103      	movs	r1, #3
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff fb5d 	bl	80058d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff fc50 	bl	8005ac0 <LL_ADC_IsEnabled>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 8140 	bne.w	80064a8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	461a      	mov	r2, r3
 8006236:	f7ff fbd1 	bl	80059dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	4a8f      	ldr	r2, [pc, #572]	; (800647c <HAL_ADC_ConfigChannel+0x6b0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	f040 8131 	bne.w	80064a8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <HAL_ADC_ConfigChannel+0x4a2>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	0e9b      	lsrs	r3, r3, #26
 800625c:	3301      	adds	r3, #1
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	2b09      	cmp	r3, #9
 8006264:	bf94      	ite	ls
 8006266:	2301      	movls	r3, #1
 8006268:	2300      	movhi	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	e019      	b.n	80062a2 <HAL_ADC_ConfigChannel+0x4d6>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006276:	fa93 f3a3 	rbit	r3, r3
 800627a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800627c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800627e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8006286:	2320      	movs	r3, #32
 8006288:	e003      	b.n	8006292 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800628a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800628c:	fab3 f383 	clz	r3, r3
 8006290:	b2db      	uxtb	r3, r3
 8006292:	3301      	adds	r3, #1
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	2b09      	cmp	r3, #9
 800629a:	bf94      	ite	ls
 800629c:	2301      	movls	r3, #1
 800629e:	2300      	movhi	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d079      	beq.n	800639a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d107      	bne.n	80062c2 <HAL_ADC_ConfigChannel+0x4f6>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	0e9b      	lsrs	r3, r3, #26
 80062b8:	3301      	adds	r3, #1
 80062ba:	069b      	lsls	r3, r3, #26
 80062bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062c0:	e015      	b.n	80062ee <HAL_ADC_ConfigChannel+0x522>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ca:	fa93 f3a3 	rbit	r3, r3
 80062ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80062d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80062d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80062da:	2320      	movs	r3, #32
 80062dc:	e003      	b.n	80062e6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80062de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e0:	fab3 f383 	clz	r3, r3
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3301      	adds	r3, #1
 80062e8:	069b      	lsls	r3, r3, #26
 80062ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <HAL_ADC_ConfigChannel+0x542>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	0e9b      	lsrs	r3, r3, #26
 8006300:	3301      	adds	r3, #1
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	2101      	movs	r1, #1
 8006308:	fa01 f303 	lsl.w	r3, r1, r3
 800630c:	e017      	b.n	800633e <HAL_ADC_ConfigChannel+0x572>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800631c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8006326:	2320      	movs	r3, #32
 8006328:	e003      	b.n	8006332 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800632a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632c:	fab3 f383 	clz	r3, r3
 8006330:	b2db      	uxtb	r3, r3
 8006332:	3301      	adds	r3, #1
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2101      	movs	r1, #1
 800633a:	fa01 f303 	lsl.w	r3, r1, r3
 800633e:	ea42 0103 	orr.w	r1, r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x598>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	0e9b      	lsrs	r3, r3, #26
 8006354:	3301      	adds	r3, #1
 8006356:	f003 021f 	and.w	r2, r3, #31
 800635a:	4613      	mov	r3, r2
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	4413      	add	r3, r2
 8006360:	051b      	lsls	r3, r3, #20
 8006362:	e018      	b.n	8006396 <HAL_ADC_ConfigChannel+0x5ca>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	fa93 f3a3 	rbit	r3, r3
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800637c:	2320      	movs	r3, #32
 800637e:	e003      	b.n	8006388 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8006380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006382:	fab3 f383 	clz	r3, r3
 8006386:	b2db      	uxtb	r3, r3
 8006388:	3301      	adds	r3, #1
 800638a:	f003 021f 	and.w	r2, r3, #31
 800638e:	4613      	mov	r3, r2
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	4413      	add	r3, r2
 8006394:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006396:	430b      	orrs	r3, r1
 8006398:	e081      	b.n	800649e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x5ea>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	0e9b      	lsrs	r3, r3, #26
 80063ac:	3301      	adds	r3, #1
 80063ae:	069b      	lsls	r3, r3, #26
 80063b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063b4:	e015      	b.n	80063e2 <HAL_ADC_ConfigChannel+0x616>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	fa93 f3a3 	rbit	r3, r3
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80063ce:	2320      	movs	r3, #32
 80063d0:	e003      	b.n	80063da <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	fab3 f383 	clz	r3, r3
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	3301      	adds	r3, #1
 80063dc:	069b      	lsls	r3, r3, #26
 80063de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x636>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	0e9b      	lsrs	r3, r3, #26
 80063f4:	3301      	adds	r3, #1
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2101      	movs	r1, #1
 80063fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006400:	e017      	b.n	8006432 <HAL_ADC_ConfigChannel+0x666>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	fa93 f3a3 	rbit	r3, r3
 800640e:	61fb      	str	r3, [r7, #28]
  return result;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800641a:	2320      	movs	r3, #32
 800641c:	e003      	b.n	8006426 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	fab3 f383 	clz	r3, r3
 8006424:	b2db      	uxtb	r3, r3
 8006426:	3301      	adds	r3, #1
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	2101      	movs	r1, #1
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	ea42 0103 	orr.w	r1, r2, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10d      	bne.n	800645e <HAL_ADC_ConfigChannel+0x692>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	0e9b      	lsrs	r3, r3, #26
 8006448:	3301      	adds	r3, #1
 800644a:	f003 021f 	and.w	r2, r3, #31
 800644e:	4613      	mov	r3, r2
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	4413      	add	r3, r2
 8006454:	3b1e      	subs	r3, #30
 8006456:	051b      	lsls	r3, r3, #20
 8006458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800645c:	e01e      	b.n	800649c <HAL_ADC_ConfigChannel+0x6d0>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	fa93 f3a3 	rbit	r3, r3
 800646a:	613b      	str	r3, [r7, #16]
  return result;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006476:	2320      	movs	r3, #32
 8006478:	e006      	b.n	8006488 <HAL_ADC_ConfigChannel+0x6bc>
 800647a:	bf00      	nop
 800647c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	fab3 f383 	clz	r3, r3
 8006486:	b2db      	uxtb	r3, r3
 8006488:	3301      	adds	r3, #1
 800648a:	f003 021f 	and.w	r2, r3, #31
 800648e:	4613      	mov	r3, r2
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	4413      	add	r3, r2
 8006494:	3b1e      	subs	r3, #30
 8006496:	051b      	lsls	r3, r3, #20
 8006498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800649c:	430b      	orrs	r3, r1
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	6892      	ldr	r2, [r2, #8]
 80064a2:	4619      	mov	r1, r3
 80064a4:	f7ff fa6e 	bl	8005984 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	4b3d      	ldr	r3, [pc, #244]	; (80065a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d06c      	beq.n	800658e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064b4:	483c      	ldr	r0, [pc, #240]	; (80065a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80064b6:	f7ff f9c3 	bl	8005840 <LL_ADC_GetCommonPathInternalCh>
 80064ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a3a      	ldr	r2, [pc, #232]	; (80065ac <HAL_ADC_ConfigChannel+0x7e0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d127      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80064c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d121      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a35      	ldr	r2, [pc, #212]	; (80065b0 <HAL_ADC_ConfigChannel+0x7e4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d157      	bne.n	800658e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064e6:	4619      	mov	r1, r3
 80064e8:	482f      	ldr	r0, [pc, #188]	; (80065a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80064ea:	f7ff f996 	bl	800581a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064ee:	4b31      	ldr	r3, [pc, #196]	; (80065b4 <HAL_ADC_ConfigChannel+0x7e8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	099b      	lsrs	r3, r3, #6
 80064f4:	4a30      	ldr	r2, [pc, #192]	; (80065b8 <HAL_ADC_ConfigChannel+0x7ec>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	099b      	lsrs	r3, r3, #6
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006508:	e002      	b.n	8006510 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3b01      	subs	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f9      	bne.n	800650a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006516:	e03a      	b.n	800658e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a27      	ldr	r2, [pc, #156]	; (80065bc <HAL_ADC_ConfigChannel+0x7f0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d113      	bne.n	800654a <HAL_ADC_ConfigChannel+0x77e>
 8006522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10d      	bne.n	800654a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d12a      	bne.n	800658e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800653c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006540:	4619      	mov	r1, r3
 8006542:	4819      	ldr	r0, [pc, #100]	; (80065a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8006544:	f7ff f969 	bl	800581a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006548:	e021      	b.n	800658e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <HAL_ADC_ConfigChannel+0x7f4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d11c      	bne.n	800658e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d116      	bne.n	800658e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a12      	ldr	r2, [pc, #72]	; (80065b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d111      	bne.n	800658e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800656a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800656e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006572:	4619      	mov	r1, r3
 8006574:	480c      	ldr	r0, [pc, #48]	; (80065a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8006576:	f7ff f950 	bl	800581a <LL_ADC_SetCommonPathInternalCh>
 800657a:	e008      	b.n	800658e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006580:	f043 0220 	orr.w	r2, r3, #32
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006596:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800659a:	4618      	mov	r0, r3
 800659c:	37d8      	adds	r7, #216	; 0xd8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	80080000 	.word	0x80080000
 80065a8:	50040300 	.word	0x50040300
 80065ac:	c7520000 	.word	0xc7520000
 80065b0:	50040000 	.word	0x50040000
 80065b4:	20000000 	.word	0x20000000
 80065b8:	053e2d63 	.word	0x053e2d63
 80065bc:	cb840000 	.word	0xcb840000
 80065c0:	80000001 	.word	0x80000001

080065c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065d4:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <__NVIC_SetPriorityGrouping+0x44>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065e0:	4013      	ands	r3, r2
 80065e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065f6:	4a04      	ldr	r2, [pc, #16]	; (8006608 <__NVIC_SetPriorityGrouping+0x44>)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	60d3      	str	r3, [r2, #12]
}
 80065fc:	bf00      	nop
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	e000ed00 	.word	0xe000ed00

0800660c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006610:	4b04      	ldr	r3, [pc, #16]	; (8006624 <__NVIC_GetPriorityGrouping+0x18>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	0a1b      	lsrs	r3, r3, #8
 8006616:	f003 0307 	and.w	r3, r3, #7
}
 800661a:	4618      	mov	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	e000ed00 	.word	0xe000ed00

08006628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006636:	2b00      	cmp	r3, #0
 8006638:	db0b      	blt.n	8006652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	f003 021f 	and.w	r2, r3, #31
 8006640:	4907      	ldr	r1, [pc, #28]	; (8006660 <__NVIC_EnableIRQ+0x38>)
 8006642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	2001      	movs	r0, #1
 800664a:	fa00 f202 	lsl.w	r2, r0, r2
 800664e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	e000e100 	.word	0xe000e100

08006664 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800666e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006672:	2b00      	cmp	r3, #0
 8006674:	db12      	blt.n	800669c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	f003 021f 	and.w	r2, r3, #31
 800667c:	490a      	ldr	r1, [pc, #40]	; (80066a8 <__NVIC_DisableIRQ+0x44>)
 800667e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	2001      	movs	r0, #1
 8006686:	fa00 f202 	lsl.w	r2, r0, r2
 800668a:	3320      	adds	r3, #32
 800668c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006690:	f3bf 8f4f 	dsb	sy
}
 8006694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006696:	f3bf 8f6f 	isb	sy
}
 800669a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	e000e100 	.word	0xe000e100

080066ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	6039      	str	r1, [r7, #0]
 80066b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	db0a      	blt.n	80066d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	490c      	ldr	r1, [pc, #48]	; (80066f8 <__NVIC_SetPriority+0x4c>)
 80066c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ca:	0112      	lsls	r2, r2, #4
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	440b      	add	r3, r1
 80066d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066d4:	e00a      	b.n	80066ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	4908      	ldr	r1, [pc, #32]	; (80066fc <__NVIC_SetPriority+0x50>)
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	3b04      	subs	r3, #4
 80066e4:	0112      	lsls	r2, r2, #4
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	440b      	add	r3, r1
 80066ea:	761a      	strb	r2, [r3, #24]
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	e000e100 	.word	0xe000e100
 80066fc:	e000ed00 	.word	0xe000ed00

08006700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006700:	b480      	push	{r7}
 8006702:	b089      	sub	sp, #36	; 0x24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f1c3 0307 	rsb	r3, r3, #7
 800671a:	2b04      	cmp	r3, #4
 800671c:	bf28      	it	cs
 800671e:	2304      	movcs	r3, #4
 8006720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3304      	adds	r3, #4
 8006726:	2b06      	cmp	r3, #6
 8006728:	d902      	bls.n	8006730 <NVIC_EncodePriority+0x30>
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3b03      	subs	r3, #3
 800672e:	e000      	b.n	8006732 <NVIC_EncodePriority+0x32>
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006734:	f04f 32ff 	mov.w	r2, #4294967295
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43da      	mvns	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	401a      	ands	r2, r3
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006748:	f04f 31ff 	mov.w	r1, #4294967295
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	fa01 f303 	lsl.w	r3, r1, r3
 8006752:	43d9      	mvns	r1, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006758:	4313      	orrs	r3, r2
         );
}
 800675a:	4618      	mov	r0, r3
 800675c:	3724      	adds	r7, #36	; 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3b01      	subs	r3, #1
 8006774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006778:	d301      	bcc.n	800677e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800677a:	2301      	movs	r3, #1
 800677c:	e00f      	b.n	800679e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800677e:	4a0a      	ldr	r2, [pc, #40]	; (80067a8 <SysTick_Config+0x40>)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3b01      	subs	r3, #1
 8006784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006786:	210f      	movs	r1, #15
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	f7ff ff8e 	bl	80066ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <SysTick_Config+0x40>)
 8006792:	2200      	movs	r2, #0
 8006794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006796:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <SysTick_Config+0x40>)
 8006798:	2207      	movs	r2, #7
 800679a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	e000e010 	.word	0xe000e010

080067ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff ff05 	bl	80065c4 <__NVIC_SetPriorityGrouping>
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b086      	sub	sp, #24
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	4603      	mov	r3, r0
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
 80067ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067d4:	f7ff ff1a 	bl	800660c <__NVIC_GetPriorityGrouping>
 80067d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	6978      	ldr	r0, [r7, #20]
 80067e0:	f7ff ff8e 	bl	8006700 <NVIC_EncodePriority>
 80067e4:	4602      	mov	r2, r0
 80067e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ff5d 	bl	80066ac <__NVIC_SetPriority>
}
 80067f2:	bf00      	nop
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	4603      	mov	r3, r0
 8006802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff ff0d 	bl	8006628 <__NVIC_EnableIRQ>
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	4603      	mov	r3, r0
 800681e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff ff1d 	bl	8006664 <__NVIC_DisableIRQ>
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff ff94 	bl	8006768 <SysTick_Config>
 8006840:	4603      	mov	r3, r0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e0ac      	b.n	80069b8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f8b2 	bl	80069cc <DFSDM_GetChannelFromInstance>
 8006868:	4603      	mov	r3, r0
 800686a:	4a55      	ldr	r2, [pc, #340]	; (80069c0 <HAL_DFSDM_ChannelInit+0x174>)
 800686c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e09f      	b.n	80069b8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7fc fdff 	bl	800347c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800687e:	4b51      	ldr	r3, [pc, #324]	; (80069c4 <HAL_DFSDM_ChannelInit+0x178>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a4f      	ldr	r2, [pc, #316]	; (80069c4 <HAL_DFSDM_ChannelInit+0x178>)
 8006886:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8006888:	4b4e      	ldr	r3, [pc, #312]	; (80069c4 <HAL_DFSDM_ChannelInit+0x178>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d125      	bne.n	80068dc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8006890:	4b4d      	ldr	r3, [pc, #308]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a4c      	ldr	r2, [pc, #304]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8006896:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800689a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800689c:	4b4a      	ldr	r3, [pc, #296]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	4948      	ldr	r1, [pc, #288]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80068aa:	4b47      	ldr	r3, [pc, #284]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a46      	ldr	r2, [pc, #280]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80068b0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80068b4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	791b      	ldrb	r3, [r3, #4]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d108      	bne.n	80068d0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80068be:	4b42      	ldr	r3, [pc, #264]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	041b      	lsls	r3, r3, #16
 80068ca:	493f      	ldr	r1, [pc, #252]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80068d0:	4b3d      	ldr	r3, [pc, #244]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a3c      	ldr	r2, [pc, #240]	; (80069c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80068d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068da:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80068ea:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6819      	ldr	r1, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80068fa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006900:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 020f 	bic.w	r2, r2, #15
 8006918:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6819      	ldr	r1, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8006940:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6899      	ldr	r1, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	3b01      	subs	r3, #1
 8006952:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f002 0207 	and.w	r2, r2, #7
 800696c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6859      	ldr	r1, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006998:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 f810 	bl	80069cc <DFSDM_GetChannelFromInstance>
 80069ac:	4602      	mov	r2, r0
 80069ae:	4904      	ldr	r1, [pc, #16]	; (80069c0 <HAL_DFSDM_ChannelInit+0x174>)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20001054 	.word	0x20001054
 80069c4:	20001050 	.word	0x20001050
 80069c8:	40016000 	.word	0x40016000

080069cc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <DFSDM_GetChannelFromInstance+0x7c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d102      	bne.n	80069e2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	e02b      	b.n	8006a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a19      	ldr	r2, [pc, #100]	; (8006a4c <DFSDM_GetChannelFromInstance+0x80>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d102      	bne.n	80069f0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80069ea:	2301      	movs	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	e024      	b.n	8006a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <DFSDM_GetChannelFromInstance+0x84>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d102      	bne.n	80069fe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80069f8:	2302      	movs	r3, #2
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e01d      	b.n	8006a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a14      	ldr	r2, [pc, #80]	; (8006a54 <DFSDM_GetChannelFromInstance+0x88>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d102      	bne.n	8006a0c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8006a06:	2304      	movs	r3, #4
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e016      	b.n	8006a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a12      	ldr	r2, [pc, #72]	; (8006a58 <DFSDM_GetChannelFromInstance+0x8c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d102      	bne.n	8006a1a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8006a14:	2305      	movs	r3, #5
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e00f      	b.n	8006a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a0f      	ldr	r2, [pc, #60]	; (8006a5c <DFSDM_GetChannelFromInstance+0x90>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d102      	bne.n	8006a28 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8006a22:	2306      	movs	r3, #6
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	e008      	b.n	8006a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a0d      	ldr	r2, [pc, #52]	; (8006a60 <DFSDM_GetChannelFromInstance+0x94>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d102      	bne.n	8006a36 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8006a30:	2307      	movs	r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e001      	b.n	8006a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8006a36:	2303      	movs	r3, #3
 8006a38:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40016000 	.word	0x40016000
 8006a4c:	40016020 	.word	0x40016020
 8006a50:	40016040 	.word	0x40016040
 8006a54:	40016080 	.word	0x40016080
 8006a58:	400160a0 	.word	0x400160a0
 8006a5c:	400160c0 	.word	0x400160c0
 8006a60:	400160e0 	.word	0x400160e0

08006a64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d005      	beq.n	8006a88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2204      	movs	r2, #4
 8006a80:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	73fb      	strb	r3, [r7, #15]
 8006a86:	e047      	b.n	8006b18 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 020e 	bic.w	r2, r2, #14
 8006a96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0201 	bic.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ab6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abc:	f003 021c 	and.w	r2, r3, #28
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8006aca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ad4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006af6:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
    }
  }
  return status;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b32:	e166      	b.n	8006e02 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	2101      	movs	r1, #1
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	4013      	ands	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8158 	beq.w	8006dfc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d005      	beq.n	8006b64 <HAL_GPIO_Init+0x40>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d130      	bne.n	8006bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	2203      	movs	r2, #3
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	091b      	lsrs	r3, r3, #4
 8006bb0:	f003 0201 	and.w	r2, r3, #1
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d017      	beq.n	8006c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	2203      	movs	r2, #3
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	43db      	mvns	r3, r3
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4013      	ands	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d123      	bne.n	8006c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	08da      	lsrs	r2, r3, #3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3208      	adds	r2, #8
 8006c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	220f      	movs	r2, #15
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	08da      	lsrs	r2, r3, #3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3208      	adds	r2, #8
 8006c50:	6939      	ldr	r1, [r7, #16]
 8006c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	2203      	movs	r2, #3
 8006c62:	fa02 f303 	lsl.w	r3, r2, r3
 8006c66:	43db      	mvns	r3, r3
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f003 0203 	and.w	r2, r3, #3
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80b2 	beq.w	8006dfc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c98:	4b61      	ldr	r3, [pc, #388]	; (8006e20 <HAL_GPIO_Init+0x2fc>)
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9c:	4a60      	ldr	r2, [pc, #384]	; (8006e20 <HAL_GPIO_Init+0x2fc>)
 8006c9e:	f043 0301 	orr.w	r3, r3, #1
 8006ca2:	6613      	str	r3, [r2, #96]	; 0x60
 8006ca4:	4b5e      	ldr	r3, [pc, #376]	; (8006e20 <HAL_GPIO_Init+0x2fc>)
 8006ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006cb0:	4a5c      	ldr	r2, [pc, #368]	; (8006e24 <HAL_GPIO_Init+0x300>)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	089b      	lsrs	r3, r3, #2
 8006cb6:	3302      	adds	r3, #2
 8006cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	220f      	movs	r2, #15
 8006cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006cda:	d02b      	beq.n	8006d34 <HAL_GPIO_Init+0x210>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a52      	ldr	r2, [pc, #328]	; (8006e28 <HAL_GPIO_Init+0x304>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d025      	beq.n	8006d30 <HAL_GPIO_Init+0x20c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a51      	ldr	r2, [pc, #324]	; (8006e2c <HAL_GPIO_Init+0x308>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d01f      	beq.n	8006d2c <HAL_GPIO_Init+0x208>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a50      	ldr	r2, [pc, #320]	; (8006e30 <HAL_GPIO_Init+0x30c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d019      	beq.n	8006d28 <HAL_GPIO_Init+0x204>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a4f      	ldr	r2, [pc, #316]	; (8006e34 <HAL_GPIO_Init+0x310>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d013      	beq.n	8006d24 <HAL_GPIO_Init+0x200>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a4e      	ldr	r2, [pc, #312]	; (8006e38 <HAL_GPIO_Init+0x314>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00d      	beq.n	8006d20 <HAL_GPIO_Init+0x1fc>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a4d      	ldr	r2, [pc, #308]	; (8006e3c <HAL_GPIO_Init+0x318>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <HAL_GPIO_Init+0x1f8>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a4c      	ldr	r2, [pc, #304]	; (8006e40 <HAL_GPIO_Init+0x31c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d101      	bne.n	8006d18 <HAL_GPIO_Init+0x1f4>
 8006d14:	2307      	movs	r3, #7
 8006d16:	e00e      	b.n	8006d36 <HAL_GPIO_Init+0x212>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	e00c      	b.n	8006d36 <HAL_GPIO_Init+0x212>
 8006d1c:	2306      	movs	r3, #6
 8006d1e:	e00a      	b.n	8006d36 <HAL_GPIO_Init+0x212>
 8006d20:	2305      	movs	r3, #5
 8006d22:	e008      	b.n	8006d36 <HAL_GPIO_Init+0x212>
 8006d24:	2304      	movs	r3, #4
 8006d26:	e006      	b.n	8006d36 <HAL_GPIO_Init+0x212>
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e004      	b.n	8006d36 <HAL_GPIO_Init+0x212>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e002      	b.n	8006d36 <HAL_GPIO_Init+0x212>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <HAL_GPIO_Init+0x212>
 8006d34:	2300      	movs	r3, #0
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	f002 0203 	and.w	r2, r2, #3
 8006d3c:	0092      	lsls	r2, r2, #2
 8006d3e:	4093      	lsls	r3, r2
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d46:	4937      	ldr	r1, [pc, #220]	; (8006e24 <HAL_GPIO_Init+0x300>)
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	089b      	lsrs	r3, r3, #2
 8006d4c:	3302      	adds	r3, #2
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d54:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <HAL_GPIO_Init+0x320>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4013      	ands	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d78:	4a32      	ldr	r2, [pc, #200]	; (8006e44 <HAL_GPIO_Init+0x320>)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d7e:	4b31      	ldr	r3, [pc, #196]	; (8006e44 <HAL_GPIO_Init+0x320>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	43db      	mvns	r3, r3
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006da2:	4a28      	ldr	r2, [pc, #160]	; (8006e44 <HAL_GPIO_Init+0x320>)
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006da8:	4b26      	ldr	r3, [pc, #152]	; (8006e44 <HAL_GPIO_Init+0x320>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4013      	ands	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <HAL_GPIO_Init+0x320>)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006dd2:	4b1c      	ldr	r3, [pc, #112]	; (8006e44 <HAL_GPIO_Init+0x320>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4013      	ands	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006df6:	4a13      	ldr	r2, [pc, #76]	; (8006e44 <HAL_GPIO_Init+0x320>)
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f47f ae91 	bne.w	8006b34 <HAL_GPIO_Init+0x10>
  }
}
 8006e12:	bf00      	nop
 8006e14:	bf00      	nop
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40010000 	.word	0x40010000
 8006e28:	48000400 	.word	0x48000400
 8006e2c:	48000800 	.word	0x48000800
 8006e30:	48000c00 	.word	0x48000c00
 8006e34:	48001000 	.word	0x48001000
 8006e38:	48001400 	.word	0x48001400
 8006e3c:	48001800 	.word	0x48001800
 8006e40:	48001c00 	.word	0x48001c00
 8006e44:	40010400 	.word	0x40010400

08006e48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006e56:	e0c9      	b.n	8006fec <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006e58:	2201      	movs	r2, #1
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	4013      	ands	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80bc 	beq.w	8006fe6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006e6e:	4a66      	ldr	r2, [pc, #408]	; (8007008 <HAL_GPIO_DeInit+0x1c0>)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	089b      	lsrs	r3, r3, #2
 8006e74:	3302      	adds	r3, #2
 8006e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e7a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	220f      	movs	r2, #15
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006e96:	d02b      	beq.n	8006ef0 <HAL_GPIO_DeInit+0xa8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a5c      	ldr	r2, [pc, #368]	; (800700c <HAL_GPIO_DeInit+0x1c4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d025      	beq.n	8006eec <HAL_GPIO_DeInit+0xa4>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a5b      	ldr	r2, [pc, #364]	; (8007010 <HAL_GPIO_DeInit+0x1c8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d01f      	beq.n	8006ee8 <HAL_GPIO_DeInit+0xa0>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a5a      	ldr	r2, [pc, #360]	; (8007014 <HAL_GPIO_DeInit+0x1cc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d019      	beq.n	8006ee4 <HAL_GPIO_DeInit+0x9c>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a59      	ldr	r2, [pc, #356]	; (8007018 <HAL_GPIO_DeInit+0x1d0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d013      	beq.n	8006ee0 <HAL_GPIO_DeInit+0x98>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a58      	ldr	r2, [pc, #352]	; (800701c <HAL_GPIO_DeInit+0x1d4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00d      	beq.n	8006edc <HAL_GPIO_DeInit+0x94>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a57      	ldr	r2, [pc, #348]	; (8007020 <HAL_GPIO_DeInit+0x1d8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <HAL_GPIO_DeInit+0x90>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a56      	ldr	r2, [pc, #344]	; (8007024 <HAL_GPIO_DeInit+0x1dc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d101      	bne.n	8006ed4 <HAL_GPIO_DeInit+0x8c>
 8006ed0:	2307      	movs	r3, #7
 8006ed2:	e00e      	b.n	8006ef2 <HAL_GPIO_DeInit+0xaa>
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	e00c      	b.n	8006ef2 <HAL_GPIO_DeInit+0xaa>
 8006ed8:	2306      	movs	r3, #6
 8006eda:	e00a      	b.n	8006ef2 <HAL_GPIO_DeInit+0xaa>
 8006edc:	2305      	movs	r3, #5
 8006ede:	e008      	b.n	8006ef2 <HAL_GPIO_DeInit+0xaa>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	e006      	b.n	8006ef2 <HAL_GPIO_DeInit+0xaa>
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e004      	b.n	8006ef2 <HAL_GPIO_DeInit+0xaa>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e002      	b.n	8006ef2 <HAL_GPIO_DeInit+0xaa>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <HAL_GPIO_DeInit+0xaa>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	f002 0203 	and.w	r2, r2, #3
 8006ef8:	0092      	lsls	r2, r2, #2
 8006efa:	4093      	lsls	r3, r2
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d132      	bne.n	8006f68 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006f02:	4b49      	ldr	r3, [pc, #292]	; (8007028 <HAL_GPIO_DeInit+0x1e0>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	4947      	ldr	r1, [pc, #284]	; (8007028 <HAL_GPIO_DeInit+0x1e0>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006f10:	4b45      	ldr	r3, [pc, #276]	; (8007028 <HAL_GPIO_DeInit+0x1e0>)
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	43db      	mvns	r3, r3
 8006f18:	4943      	ldr	r1, [pc, #268]	; (8007028 <HAL_GPIO_DeInit+0x1e0>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006f1e:	4b42      	ldr	r3, [pc, #264]	; (8007028 <HAL_GPIO_DeInit+0x1e0>)
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	43db      	mvns	r3, r3
 8006f26:	4940      	ldr	r1, [pc, #256]	; (8007028 <HAL_GPIO_DeInit+0x1e0>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006f2c:	4b3e      	ldr	r3, [pc, #248]	; (8007028 <HAL_GPIO_DeInit+0x1e0>)
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	43db      	mvns	r3, r3
 8006f34:	493c      	ldr	r1, [pc, #240]	; (8007028 <HAL_GPIO_DeInit+0x1e0>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	220f      	movs	r2, #15
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006f4a:	4a2f      	ldr	r2, [pc, #188]	; (8007008 <HAL_GPIO_DeInit+0x1c0>)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	089b      	lsrs	r3, r3, #2
 8006f50:	3302      	adds	r3, #2
 8006f52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	43da      	mvns	r2, r3
 8006f5a:	482b      	ldr	r0, [pc, #172]	; (8007008 <HAL_GPIO_DeInit+0x1c0>)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	400a      	ands	r2, r1
 8006f62:	3302      	adds	r3, #2
 8006f64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	005b      	lsls	r3, r3, #1
 8006f70:	2103      	movs	r1, #3
 8006f72:	fa01 f303 	lsl.w	r3, r1, r3
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	08da      	lsrs	r2, r3, #3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3208      	adds	r2, #8
 8006f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	220f      	movs	r2, #15
 8006f92:	fa02 f303 	lsl.w	r3, r2, r3
 8006f96:	43db      	mvns	r3, r3
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	08d2      	lsrs	r2, r2, #3
 8006f9c:	4019      	ands	r1, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3208      	adds	r2, #8
 8006fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	2103      	movs	r1, #3
 8006fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb4:	43db      	mvns	r3, r3
 8006fb6:	401a      	ands	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	401a      	ands	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	2103      	movs	r1, #3
 8006fda:	fa01 f303 	lsl.w	r3, r1, r3
 8006fde:	43db      	mvns	r3, r3
 8006fe0:	401a      	ands	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f47f af2f 	bne.w	8006e58 <HAL_GPIO_DeInit+0x10>
  }
}
 8006ffa:	bf00      	nop
 8006ffc:	bf00      	nop
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	40010000 	.word	0x40010000
 800700c:	48000400 	.word	0x48000400
 8007010:	48000800 	.word	0x48000800
 8007014:	48000c00 	.word	0x48000c00
 8007018:	48001000 	.word	0x48001000
 800701c:	48001400 	.word	0x48001400
 8007020:	48001800 	.word	0x48001800
 8007024:	48001c00 	.word	0x48001c00
 8007028:	40010400 	.word	0x40010400

0800702c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	887b      	ldrh	r3, [r7, #2]
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
 8007048:	e001      	b.n	800704e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	807b      	strh	r3, [r7, #2]
 8007068:	4613      	mov	r3, r2
 800706a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800706c:	787b      	ldrb	r3, [r7, #1]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007072:	887a      	ldrh	r2, [r7, #2]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007078:	e002      	b.n	8007080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800707a:	887a      	ldrh	r2, [r7, #2]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007098:	695a      	ldr	r2, [r3, #20]
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d006      	beq.n	80070b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070a2:	4a05      	ldr	r2, [pc, #20]	; (80070b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fc f870 	bl	8003190 <HAL_GPIO_EXTI_Callback>
  }
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	40010400 	.word	0x40010400

080070bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e081      	b.n	80071d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fc fa2e 	bl	8003544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2224      	movs	r2, #36	; 0x24
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0201 	bic.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800710c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800711c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d107      	bne.n	8007136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	e006      	b.n	8007144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	2b02      	cmp	r3, #2
 800714a:	d104      	bne.n	8007156 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007168:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691a      	ldr	r2, [r3, #16]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	69d9      	ldr	r1, [r3, #28]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a1a      	ldr	r2, [r3, #32]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e021      	b.n	8007230 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2224      	movs	r2, #36	; 0x24
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fc fa3f 	bl	8003688 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af02      	add	r7, sp, #8
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	4608      	mov	r0, r1
 8007242:	4611      	mov	r1, r2
 8007244:	461a      	mov	r2, r3
 8007246:	4603      	mov	r3, r0
 8007248:	817b      	strh	r3, [r7, #10]
 800724a:	460b      	mov	r3, r1
 800724c:	813b      	strh	r3, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b20      	cmp	r3, #32
 800725c:	f040 80f9 	bne.w	8007452 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_I2C_Mem_Write+0x34>
 8007266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007272:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e0ed      	b.n	8007454 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <HAL_I2C_Mem_Write+0x4e>
 8007282:	2302      	movs	r3, #2
 8007284:	e0e6      	b.n	8007454 <HAL_I2C_Mem_Write+0x21c>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800728e:	f7fe fa81 	bl	8005794 <HAL_GetTick>
 8007292:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	2319      	movs	r3, #25
 800729a:	2201      	movs	r2, #1
 800729c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fac3 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e0d1      	b.n	8007454 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2221      	movs	r2, #33	; 0x21
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2240      	movs	r2, #64	; 0x40
 80072bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a3a      	ldr	r2, [r7, #32]
 80072ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072d8:	88f8      	ldrh	r0, [r7, #6]
 80072da:	893a      	ldrh	r2, [r7, #8]
 80072dc:	8979      	ldrh	r1, [r7, #10]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	4603      	mov	r3, r0
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f9d3 	bl	8007694 <I2C_RequestMemoryWrite>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e0a9      	b.n	8007454 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007304:	b29b      	uxth	r3, r3
 8007306:	2bff      	cmp	r3, #255	; 0xff
 8007308:	d90e      	bls.n	8007328 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	22ff      	movs	r2, #255	; 0xff
 800730e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007314:	b2da      	uxtb	r2, r3
 8007316:	8979      	ldrh	r1, [r7, #10]
 8007318:	2300      	movs	r3, #0
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 fc2b 	bl	8007b7c <I2C_TransferConfig>
 8007326:	e00f      	b.n	8007348 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007336:	b2da      	uxtb	r2, r3
 8007338:	8979      	ldrh	r1, [r7, #10]
 800733a:	2300      	movs	r3, #0
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 fc1a 	bl	8007b7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 faad 	bl	80078ac <I2C_WaitOnTXISFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e07b      	b.n	8007454 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007376:	b29b      	uxth	r3, r3
 8007378:	3b01      	subs	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d034      	beq.n	8007400 <HAL_I2C_Mem_Write+0x1c8>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d130      	bne.n	8007400 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	2200      	movs	r2, #0
 80073a6:	2180      	movs	r1, #128	; 0x80
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 fa3f 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e04d      	b.n	8007454 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2bff      	cmp	r3, #255	; 0xff
 80073c0:	d90e      	bls.n	80073e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	22ff      	movs	r2, #255	; 0xff
 80073c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	8979      	ldrh	r1, [r7, #10]
 80073d0:	2300      	movs	r3, #0
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fbcf 	bl	8007b7c <I2C_TransferConfig>
 80073de:	e00f      	b.n	8007400 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	8979      	ldrh	r1, [r7, #10]
 80073f2:	2300      	movs	r3, #0
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fbbe 	bl	8007b7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d19e      	bne.n	8007348 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 fa8c 	bl	800792c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e01a      	b.n	8007454 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2220      	movs	r2, #32
 8007424:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6859      	ldr	r1, [r3, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <HAL_I2C_Mem_Write+0x224>)
 8007432:	400b      	ands	r3, r1
 8007434:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	e000      	b.n	8007454 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007452:	2302      	movs	r3, #2
  }
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	fe00e800 	.word	0xfe00e800

08007460 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	4608      	mov	r0, r1
 800746a:	4611      	mov	r1, r2
 800746c:	461a      	mov	r2, r3
 800746e:	4603      	mov	r3, r0
 8007470:	817b      	strh	r3, [r7, #10]
 8007472:	460b      	mov	r3, r1
 8007474:	813b      	strh	r3, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b20      	cmp	r3, #32
 8007484:	f040 80fd 	bne.w	8007682 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <HAL_I2C_Mem_Read+0x34>
 800748e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d105      	bne.n	80074a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800749a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e0f1      	b.n	8007684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <HAL_I2C_Mem_Read+0x4e>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e0ea      	b.n	8007684 <HAL_I2C_Mem_Read+0x224>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074b6:	f7fe f96d 	bl	8005794 <HAL_GetTick>
 80074ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	2319      	movs	r3, #25
 80074c2:	2201      	movs	r2, #1
 80074c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 f9af 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0d5      	b.n	8007684 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2222      	movs	r2, #34	; 0x22
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2240      	movs	r2, #64	; 0x40
 80074e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a3a      	ldr	r2, [r7, #32]
 80074f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007500:	88f8      	ldrh	r0, [r7, #6]
 8007502:	893a      	ldrh	r2, [r7, #8]
 8007504:	8979      	ldrh	r1, [r7, #10]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	4603      	mov	r3, r0
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 f913 	bl	800773c <I2C_RequestMemoryRead>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0ad      	b.n	8007684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752c:	b29b      	uxth	r3, r3
 800752e:	2bff      	cmp	r3, #255	; 0xff
 8007530:	d90e      	bls.n	8007550 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	22ff      	movs	r2, #255	; 0xff
 8007536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753c:	b2da      	uxtb	r2, r3
 800753e:	8979      	ldrh	r1, [r7, #10]
 8007540:	4b52      	ldr	r3, [pc, #328]	; (800768c <HAL_I2C_Mem_Read+0x22c>)
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fb17 	bl	8007b7c <I2C_TransferConfig>
 800754e:	e00f      	b.n	8007570 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755e:	b2da      	uxtb	r2, r3
 8007560:	8979      	ldrh	r1, [r7, #10]
 8007562:	4b4a      	ldr	r3, [pc, #296]	; (800768c <HAL_I2C_Mem_Read+0x22c>)
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fb06 	bl	8007b7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	2200      	movs	r2, #0
 8007578:	2104      	movs	r1, #4
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 f956 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e07c      	b.n	8007684 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d034      	beq.n	8007630 <HAL_I2C_Mem_Read+0x1d0>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d130      	bne.n	8007630 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	2200      	movs	r2, #0
 80075d6:	2180      	movs	r1, #128	; 0x80
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f927 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e04d      	b.n	8007684 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2bff      	cmp	r3, #255	; 0xff
 80075f0:	d90e      	bls.n	8007610 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	22ff      	movs	r2, #255	; 0xff
 80075f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	8979      	ldrh	r1, [r7, #10]
 8007600:	2300      	movs	r3, #0
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fab7 	bl	8007b7c <I2C_TransferConfig>
 800760e:	e00f      	b.n	8007630 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800761e:	b2da      	uxtb	r2, r3
 8007620:	8979      	ldrh	r1, [r7, #10]
 8007622:	2300      	movs	r3, #0
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 faa6 	bl	8007b7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d19a      	bne.n	8007570 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 f974 	bl	800792c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e01a      	b.n	8007684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2220      	movs	r2, #32
 8007654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6859      	ldr	r1, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <HAL_I2C_Mem_Read+0x230>)
 8007662:	400b      	ands	r3, r1
 8007664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2220      	movs	r2, #32
 800766a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	e000      	b.n	8007684 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007682:	2302      	movs	r3, #2
  }
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	80002400 	.word	0x80002400
 8007690:	fe00e800 	.word	0xfe00e800

08007694 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	461a      	mov	r2, r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	817b      	strh	r3, [r7, #10]
 80076a6:	460b      	mov	r3, r1
 80076a8:	813b      	strh	r3, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	8979      	ldrh	r1, [r7, #10]
 80076b4:	4b20      	ldr	r3, [pc, #128]	; (8007738 <I2C_RequestMemoryWrite+0xa4>)
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 fa5d 	bl	8007b7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	69b9      	ldr	r1, [r7, #24]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f8f0 	bl	80078ac <I2C_WaitOnTXISFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e02c      	b.n	8007730 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d105      	bne.n	80076e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076dc:	893b      	ldrh	r3, [r7, #8]
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	629a      	str	r2, [r3, #40]	; 0x28
 80076e6:	e015      	b.n	8007714 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076e8:	893b      	ldrh	r3, [r7, #8]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	69b9      	ldr	r1, [r7, #24]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f8d6 	bl	80078ac <I2C_WaitOnTXISFlagUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e012      	b.n	8007730 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800770a:	893b      	ldrh	r3, [r7, #8]
 800770c:	b2da      	uxtb	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	2200      	movs	r2, #0
 800771c:	2180      	movs	r1, #128	; 0x80
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f884 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	80002000 	.word	0x80002000

0800773c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af02      	add	r7, sp, #8
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	4608      	mov	r0, r1
 8007746:	4611      	mov	r1, r2
 8007748:	461a      	mov	r2, r3
 800774a:	4603      	mov	r3, r0
 800774c:	817b      	strh	r3, [r7, #10]
 800774e:	460b      	mov	r3, r1
 8007750:	813b      	strh	r3, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	b2da      	uxtb	r2, r3
 800775a:	8979      	ldrh	r1, [r7, #10]
 800775c:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <I2C_RequestMemoryRead+0xa4>)
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	2300      	movs	r3, #0
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 fa0a 	bl	8007b7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	69b9      	ldr	r1, [r7, #24]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f89d 	bl	80078ac <I2C_WaitOnTXISFlagUntilTimeout>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e02c      	b.n	80077d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d105      	bne.n	800778e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007782:	893b      	ldrh	r3, [r7, #8]
 8007784:	b2da      	uxtb	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	629a      	str	r2, [r3, #40]	; 0x28
 800778c:	e015      	b.n	80077ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800778e:	893b      	ldrh	r3, [r7, #8]
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	b29b      	uxth	r3, r3
 8007794:	b2da      	uxtb	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	69b9      	ldr	r1, [r7, #24]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f883 	bl	80078ac <I2C_WaitOnTXISFlagUntilTimeout>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e012      	b.n	80077d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077b0:	893b      	ldrh	r3, [r7, #8]
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2200      	movs	r2, #0
 80077c2:	2140      	movs	r1, #64	; 0x40
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f831 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	80002000 	.word	0x80002000

080077e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d103      	bne.n	8007802 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d007      	beq.n	8007820 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	619a      	str	r2, [r3, #24]
  }
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	4613      	mov	r3, r2
 800783a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800783c:	e022      	b.n	8007884 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007844:	d01e      	beq.n	8007884 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007846:	f7fd ffa5 	bl	8005794 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d302      	bcc.n	800785c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d113      	bne.n	8007884 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007860:	f043 0220 	orr.w	r2, r3, #32
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2220      	movs	r2, #32
 800786c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e00f      	b.n	80078a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	4013      	ands	r3, r2
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	429a      	cmp	r2, r3
 8007892:	bf0c      	ite	eq
 8007894:	2301      	moveq	r3, #1
 8007896:	2300      	movne	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d0cd      	beq.n	800783e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078b8:	e02c      	b.n	8007914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f870 	bl	80079a4 <I2C_IsErrorOccurred>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e02a      	b.n	8007924 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d4:	d01e      	beq.n	8007914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078d6:	f7fd ff5d 	bl	8005794 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d302      	bcc.n	80078ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d113      	bne.n	8007914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f0:	f043 0220 	orr.w	r2, r3, #32
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e007      	b.n	8007924 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b02      	cmp	r3, #2
 8007920:	d1cb      	bne.n	80078ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007938:	e028      	b.n	800798c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	68b9      	ldr	r1, [r7, #8]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 f830 	bl	80079a4 <I2C_IsErrorOccurred>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e026      	b.n	800799c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794e:	f7fd ff21 	bl	8005794 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d113      	bne.n	800798c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007968:	f043 0220 	orr.w	r2, r3, #32
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e007      	b.n	800799c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b20      	cmp	r3, #32
 8007998:	d1cf      	bne.n	800793a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08a      	sub	sp, #40	; 0x28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	f003 0310 	and.w	r3, r3, #16
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d075      	beq.n	8007abc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2210      	movs	r2, #16
 80079d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079d8:	e056      	b.n	8007a88 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e0:	d052      	beq.n	8007a88 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80079e2:	f7fd fed7 	bl	8005794 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d302      	bcc.n	80079f8 <I2C_IsErrorOccurred+0x54>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d147      	bne.n	8007a88 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1a:	d12e      	bne.n	8007a7a <I2C_IsErrorOccurred+0xd6>
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a22:	d02a      	beq.n	8007a7a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007a24:	7cfb      	ldrb	r3, [r7, #19]
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d027      	beq.n	8007a7a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007a3a:	f7fd feab 	bl	8005794 <HAL_GetTick>
 8007a3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a40:	e01b      	b.n	8007a7a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a42:	f7fd fea7 	bl	8005794 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b19      	cmp	r3, #25
 8007a4e:	d914      	bls.n	8007a7a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a54:	f043 0220 	orr.w	r2, r3, #32
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d1dc      	bne.n	8007a42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d003      	beq.n	8007a9e <I2C_IsErrorOccurred+0xfa>
 8007a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d09d      	beq.n	80079da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	f043 0304 	orr.w	r3, r3, #4
 8007ab4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00b      	beq.n	8007ae6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ade:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	f043 0308 	orr.w	r3, r3, #8
 8007af6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	f043 0302 	orr.w	r3, r3, #2
 8007b18:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d01c      	beq.n	8007b6c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fe56 	bl	80077e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6859      	ldr	r1, [r3, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b0d      	ldr	r3, [pc, #52]	; (8007b78 <I2C_IsErrorOccurred+0x1d4>)
 8007b44:	400b      	ands	r3, r1
 8007b46:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3728      	adds	r7, #40	; 0x28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	fe00e800 	.word	0xfe00e800

08007b7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	607b      	str	r3, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	817b      	strh	r3, [r7, #10]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b8e:	897b      	ldrh	r3, [r7, #10]
 8007b90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b94:	7a7b      	ldrb	r3, [r7, #9]
 8007b96:	041b      	lsls	r3, r3, #16
 8007b98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007baa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	0d5b      	lsrs	r3, r3, #21
 8007bb6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007bba:	4b08      	ldr	r3, [pc, #32]	; (8007bdc <I2C_TransferConfig+0x60>)
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	43db      	mvns	r3, r3
 8007bc0:	ea02 0103 	and.w	r1, r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007bce:	bf00      	nop
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	03ff63ff 	.word	0x03ff63ff

08007be0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	d138      	bne.n	8007c68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e032      	b.n	8007c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2224      	movs	r2, #36	; 0x24
 8007c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6819      	ldr	r1, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	e000      	b.n	8007c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c68:	2302      	movs	r3, #2
  }
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d139      	bne.n	8007d00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c96:	2302      	movs	r3, #2
 8007c98:	e033      	b.n	8007d02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2224      	movs	r2, #36	; 0x24
 8007ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0201 	bic.w	r2, r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e000      	b.n	8007d02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d00:	2302      	movs	r3, #2
  }
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007d1c:	f7fd fd3a 	bl	8005794 <HAL_GetTick>
 8007d20:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
 8007d2c:	e092      	b.n	8007e54 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f040 808b 	bne.w	8007e54 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fb fcde 	bl	8003700 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8007d44:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f88b 	bl	8007e64 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	4b42      	ldr	r3, [pc, #264]	; (8007e60 <HAL_OSPI_Init+0x150>)
 8007d56:	4013      	ands	r3, r2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	68d1      	ldr	r1, [r2, #12]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6912      	ldr	r2, [r2, #16]
 8007d60:	3a01      	subs	r2, #1
 8007d62:	0412      	lsls	r2, r2, #16
 8007d64:	4311      	orrs	r1, r2
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	6952      	ldr	r2, [r2, #20]
 8007d6a:	3a01      	subs	r2, #1
 8007d6c:	0212      	lsls	r2, r2, #8
 8007d6e:	4311      	orrs	r1, r2
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d74:	4311      	orrs	r1, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	69d2      	ldr	r2, [r2, #28]
 8007d7a:	4311      	orrs	r1, r2
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6812      	ldr	r2, [r2, #0]
 8007d80:	430b      	orrs	r3, r1
 8007d82:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	0412      	lsls	r2, r2, #16
 8007d8e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	021a      	lsls	r2, r3, #8
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2200      	movs	r2, #0
 8007db4:	2120      	movs	r1, #32
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fb98 	bl	80084ec <OSPI_WaitFlagStateUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d146      	bne.n	8007e54 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	1e5a      	subs	r2, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007dfc:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d107      	bne.n	8007e3c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0202 	orr.w	r2, r2, #2
 8007e3a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e44:	d103      	bne.n	8007e4e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8007e4c:	e002      	b.n	8007e54 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	f8e0f8f4 	.word	0xf8e0f8f4

08007e64 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b092      	sub	sp, #72	; 0x48
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a08      	ldr	r2, [pc, #32]	; (8007ec4 <HAL_OSPIM_Config+0x40>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d105      	bne.n	8007eb2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8007eb0:	e004      	b.n	8007ebc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007ec2:	e01f      	b.n	8007f04 <HAL_OSPIM_Config+0x80>
 8007ec4:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8007ec8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ecc:	3301      	adds	r3, #1
 8007ece:	b2d8      	uxtb	r0, r3
 8007ed0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007ed4:	f107 0114 	add.w	r1, r7, #20
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	f000 fb3a 	bl	800855c <OSPIM_GetConfig>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2208      	movs	r2, #8
 8007ef8:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007efa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007efe:	3301      	adds	r3, #1
 8007f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007f04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d9dd      	bls.n	8007ec8 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8007f0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f040 82de 	bne.w	80084d2 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007f16:	4bc6      	ldr	r3, [pc, #792]	; (8008230 <HAL_OSPIM_Config+0x3ac>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007f22:	4bc3      	ldr	r3, [pc, #780]	; (8008230 <HAL_OSPIM_Config+0x3ac>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4ac2      	ldr	r2, [pc, #776]	; (8008230 <HAL_OSPIM_Config+0x3ac>)
 8007f28:	f023 0301 	bic.w	r3, r3, #1
 8007f2c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007f2e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007f3a:	4bbe      	ldr	r3, [pc, #760]	; (8008234 <HAL_OSPIM_Config+0x3b0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007f46:	4bbb      	ldr	r3, [pc, #748]	; (8008234 <HAL_OSPIM_Config+0x3b0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4aba      	ldr	r2, [pc, #744]	; (8008234 <HAL_OSPIM_Config+0x3b0>)
 8007f4c:	f023 0301 	bic.w	r3, r3, #1
 8007f50:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8007f52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007f56:	f043 0302 	orr.w	r3, r3, #2
 8007f5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007f5e:	49b6      	ldr	r1, [pc, #728]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 8007f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	3348      	adds	r3, #72	; 0x48
 8007f6c:	443b      	add	r3, r7
 8007f6e:	3b2c      	subs	r3, #44	; 0x2c
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	6859      	ldr	r1, [r3, #4]
 8007f7a:	48af      	ldr	r0, [pc, #700]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 8007f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	3348      	adds	r3, #72	; 0x48
 8007f88:	443b      	add	r3, r7
 8007f8a:	3b2c      	subs	r3, #44	; 0x2c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4403      	add	r3, r0
 8007f98:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8007f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	3348      	adds	r3, #72	; 0x48
 8007fa6:	443b      	add	r3, r7
 8007fa8:	3b34      	subs	r3, #52	; 0x34
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80a1 	beq.w	80080f4 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007fb2:	49a1      	ldr	r1, [pc, #644]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 8007fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	3348      	adds	r3, #72	; 0x48
 8007fc0:	443b      	add	r3, r7
 8007fc2:	3b34      	subs	r3, #52	; 0x34
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	6859      	ldr	r1, [r3, #4]
 8007fce:	489a      	ldr	r0, [pc, #616]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 8007fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	3348      	adds	r3, #72	; 0x48
 8007fdc:	443b      	add	r3, r7
 8007fde:	3b34      	subs	r3, #52	; 0x34
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	f021 0201 	bic.w	r2, r1, #1
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4403      	add	r3, r0
 8007fec:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	3348      	adds	r3, #72	; 0x48
 8007ffa:	443b      	add	r3, r7
 8007ffc:	3b30      	subs	r3, #48	; 0x30
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d01d      	beq.n	8008040 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8008004:	498c      	ldr	r1, [pc, #560]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 8008006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	3348      	adds	r3, #72	; 0x48
 8008012:	443b      	add	r3, r7
 8008014:	3b30      	subs	r3, #48	; 0x30
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3b01      	subs	r3, #1
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	6859      	ldr	r1, [r3, #4]
 8008020:	4885      	ldr	r0, [pc, #532]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 8008022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	3348      	adds	r3, #72	; 0x48
 800802e:	443b      	add	r3, r7
 8008030:	3b30      	subs	r3, #48	; 0x30
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3b01      	subs	r3, #1
 8008036:	f021 0210 	bic.w	r2, r1, #16
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4403      	add	r3, r0
 800803e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008040:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	3348      	adds	r3, #72	; 0x48
 800804c:	443b      	add	r3, r7
 800804e:	3b28      	subs	r3, #40	; 0x28
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d021      	beq.n	800809a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8008056:	4978      	ldr	r1, [pc, #480]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 8008058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	3348      	adds	r3, #72	; 0x48
 8008064:	443b      	add	r3, r7
 8008066:	3b28      	subs	r3, #40	; 0x28
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3b01      	subs	r3, #1
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	440b      	add	r3, r1
 8008074:	6859      	ldr	r1, [r3, #4]
 8008076:	4870      	ldr	r0, [pc, #448]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 8008078:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	3348      	adds	r3, #72	; 0x48
 8008084:	443b      	add	r3, r7
 8008086:	3b28      	subs	r3, #40	; 0x28
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3b01      	subs	r3, #1
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4403      	add	r3, r0
 8008098:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800809a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800809c:	4613      	mov	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	3348      	adds	r3, #72	; 0x48
 80080a6:	443b      	add	r3, r7
 80080a8:	3b24      	subs	r3, #36	; 0x24
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d021      	beq.n	80080f4 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80080b0:	4961      	ldr	r1, [pc, #388]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 80080b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080b4:	4613      	mov	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	3348      	adds	r3, #72	; 0x48
 80080be:	443b      	add	r3, r7
 80080c0:	3b24      	subs	r3, #36	; 0x24
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	6859      	ldr	r1, [r3, #4]
 80080d0:	4859      	ldr	r0, [pc, #356]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 80080d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	3348      	adds	r3, #72	; 0x48
 80080de:	443b      	add	r3, r7
 80080e0:	3b24      	subs	r3, #36	; 0x24
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4403      	add	r3, r0
 80080f2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	6819      	ldr	r1, [r3, #0]
 80080f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	3348      	adds	r3, #72	; 0x48
 8008106:	443b      	add	r3, r7
 8008108:	3b34      	subs	r3, #52	; 0x34
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4299      	cmp	r1, r3
 800810e:	d038      	beq.n	8008182 <HAL_OSPIM_Config+0x2fe>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6859      	ldr	r1, [r3, #4]
 8008114:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	3348      	adds	r3, #72	; 0x48
 8008122:	443b      	add	r3, r7
 8008124:	3b30      	subs	r3, #48	; 0x30
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4299      	cmp	r1, r3
 800812a:	d02a      	beq.n	8008182 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6899      	ldr	r1, [r3, #8]
 8008130:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	3348      	adds	r3, #72	; 0x48
 800813e:	443b      	add	r3, r7
 8008140:	3b2c      	subs	r3, #44	; 0x2c
 8008142:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8008144:	4299      	cmp	r1, r3
 8008146:	d01c      	beq.n	8008182 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	68d9      	ldr	r1, [r3, #12]
 800814c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	3348      	adds	r3, #72	; 0x48
 800815a:	443b      	add	r3, r7
 800815c:	3b28      	subs	r3, #40	; 0x28
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4299      	cmp	r1, r3
 8008162:	d00e      	beq.n	8008182 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	6919      	ldr	r1, [r3, #16]
 8008168:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800816c:	4613      	mov	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	3348      	adds	r3, #72	; 0x48
 8008176:	443b      	add	r3, r7
 8008178:	3b24      	subs	r3, #36	; 0x24
 800817a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800817c:	4299      	cmp	r1, r3
 800817e:	f040 80d3 	bne.w	8008328 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8008182:	492d      	ldr	r1, [pc, #180]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 8008184:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	3348      	adds	r3, #72	; 0x48
 8008192:	443b      	add	r3, r7
 8008194:	3b34      	subs	r3, #52	; 0x34
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3b01      	subs	r3, #1
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	440b      	add	r3, r1
 800819e:	6859      	ldr	r1, [r3, #4]
 80081a0:	4825      	ldr	r0, [pc, #148]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 80081a2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	3348      	adds	r3, #72	; 0x48
 80081b0:	443b      	add	r3, r7
 80081b2:	3b34      	subs	r3, #52	; 0x34
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	f021 0201 	bic.w	r2, r1, #1
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4403      	add	r3, r0
 80081c0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80081c2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	3348      	adds	r3, #72	; 0x48
 80081d0:	443b      	add	r3, r7
 80081d2:	3b30      	subs	r3, #48	; 0x30
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01f      	beq.n	800821a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80081da:	4917      	ldr	r1, [pc, #92]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 80081dc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	3348      	adds	r3, #72	; 0x48
 80081ea:	443b      	add	r3, r7
 80081ec:	3b30      	subs	r3, #48	; 0x30
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	440b      	add	r3, r1
 80081f6:	6859      	ldr	r1, [r3, #4]
 80081f8:	480f      	ldr	r0, [pc, #60]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 80081fa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	3348      	adds	r3, #72	; 0x48
 8008208:	443b      	add	r3, r7
 800820a:	3b30      	subs	r3, #48	; 0x30
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3b01      	subs	r3, #1
 8008210:	f021 0210 	bic.w	r2, r1, #16
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4403      	add	r3, r0
 8008218:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800821a:	4907      	ldr	r1, [pc, #28]	; (8008238 <HAL_OSPIM_Config+0x3b4>)
 800821c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	3348      	adds	r3, #72	; 0x48
 800822a:	443b      	add	r3, r7
 800822c:	3b2c      	subs	r3, #44	; 0x2c
 800822e:	e005      	b.n	800823c <HAL_OSPIM_Config+0x3b8>
 8008230:	a0001000 	.word	0xa0001000
 8008234:	a0001400 	.word	0xa0001400
 8008238:	50061c00 	.word	0x50061c00
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3b01      	subs	r3, #1
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	6859      	ldr	r1, [r3, #4]
 8008246:	48a6      	ldr	r0, [pc, #664]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008248:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	3348      	adds	r3, #72	; 0x48
 8008256:	443b      	add	r3, r7
 8008258:	3b2c      	subs	r3, #44	; 0x2c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3b01      	subs	r3, #1
 800825e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4403      	add	r3, r0
 8008266:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008268:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	3348      	adds	r3, #72	; 0x48
 8008276:	443b      	add	r3, r7
 8008278:	3b28      	subs	r3, #40	; 0x28
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d023      	beq.n	80082c8 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8008280:	4997      	ldr	r1, [pc, #604]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008282:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	3348      	adds	r3, #72	; 0x48
 8008290:	443b      	add	r3, r7
 8008292:	3b28      	subs	r3, #40	; 0x28
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3b01      	subs	r3, #1
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	6859      	ldr	r1, [r3, #4]
 80082a2:	488f      	ldr	r0, [pc, #572]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 80082a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	3348      	adds	r3, #72	; 0x48
 80082b2:	443b      	add	r3, r7
 80082b4:	3b28      	subs	r3, #40	; 0x28
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4403      	add	r3, r0
 80082c6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80082c8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	3348      	adds	r3, #72	; 0x48
 80082d6:	443b      	add	r3, r7
 80082d8:	3b24      	subs	r3, #36	; 0x24
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d023      	beq.n	8008328 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80082e0:	497f      	ldr	r1, [pc, #508]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 80082e2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	3348      	adds	r3, #72	; 0x48
 80082f0:	443b      	add	r3, r7
 80082f2:	3b24      	subs	r3, #36	; 0x24
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	440b      	add	r3, r1
 8008300:	6859      	ldr	r1, [r3, #4]
 8008302:	4877      	ldr	r0, [pc, #476]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008304:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8008308:	4613      	mov	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	3348      	adds	r3, #72	; 0x48
 8008312:	443b      	add	r3, r7
 8008314:	3b24      	subs	r3, #36	; 0x24
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3b01      	subs	r3, #1
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4403      	add	r3, r0
 8008326:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8008328:	4a6d      	ldr	r2, [pc, #436]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	3b01      	subs	r3, #1
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800833a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833c:	025b      	lsls	r3, r3, #9
 800833e:	431a      	orrs	r2, r3
 8008340:	4967      	ldr	r1, [pc, #412]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	3b01      	subs	r3, #1
 8008348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	440b      	add	r3, r1
 8008350:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8008352:	4a63      	ldr	r2, [pc, #396]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3b01      	subs	r3, #1
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f023 0203 	bic.w	r2, r3, #3
 8008364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	431a      	orrs	r2, r3
 800836a:	495d      	ldr	r1, [pc, #372]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3b01      	subs	r3, #1
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d014      	beq.n	80083ae <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8008384:	4a56      	ldr	r2, [pc, #344]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	3b01      	subs	r3, #1
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008398:	015b      	lsls	r3, r3, #5
 800839a:	431a      	orrs	r2, r3
 800839c:	4950      	ldr	r1, [pc, #320]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	f042 0210 	orr.w	r2, r2, #16
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	440b      	add	r3, r1
 80083ac:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d019      	beq.n	80083ee <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80083ba:	4a49      	ldr	r2, [pc, #292]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80083d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d2:	049b      	lsls	r3, r3, #18
 80083d4:	431a      	orrs	r2, r3
 80083d6:	4942      	ldr	r1, [pc, #264]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	3b01      	subs	r3, #1
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	440b      	add	r3, r1
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	e01c      	b.n	8008428 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d018      	beq.n	8008428 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80083f6:	4a3a      	ldr	r2, [pc, #232]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800840c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800840e:	069b      	lsls	r3, r3, #26
 8008410:	431a      	orrs	r2, r3
 8008412:	4933      	ldr	r1, [pc, #204]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	3b01      	subs	r3, #1
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d019      	beq.n	8008468 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8008434:	4a2a      	ldr	r2, [pc, #168]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	3b01      	subs	r3, #1
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800844a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844c:	049b      	lsls	r3, r3, #18
 800844e:	431a      	orrs	r2, r3
 8008450:	4923      	ldr	r1, [pc, #140]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	3b01      	subs	r3, #1
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	440b      	add	r3, r1
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	e01c      	b.n	80084a2 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d018      	beq.n	80084a2 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8008470:	4a1b      	ldr	r2, [pc, #108]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	3b01      	subs	r3, #1
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008488:	069b      	lsls	r3, r3, #26
 800848a:	431a      	orrs	r2, r3
 800848c:	4914      	ldr	r1, [pc, #80]	; (80084e0 <HAL_OSPIM_Config+0x65c>)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	3b01      	subs	r3, #1
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80084a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <HAL_OSPIM_Config+0x660>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <HAL_OSPIM_Config+0x660>)
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80084ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80084c6:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <HAL_OSPIM_Config+0x664>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a07      	ldr	r2, [pc, #28]	; (80084e8 <HAL_OSPIM_Config+0x664>)
 80084cc:	f043 0301 	orr.w	r3, r3, #1
 80084d0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80084d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3748      	adds	r7, #72	; 0x48
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	50061c00 	.word	0x50061c00
 80084e4:	a0001000 	.word	0xa0001000
 80084e8:	a0001400 	.word	0xa0001400

080084ec <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	4613      	mov	r3, r2
 80084fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80084fc:	e01a      	b.n	8008534 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008504:	d016      	beq.n	8008534 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008506:	f7fd f945 	bl	8005794 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	429a      	cmp	r2, r3
 8008514:	d302      	bcc.n	800851c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008522:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008528:	f043 0201 	orr.w	r2, r3, #1
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e00e      	b.n	8008552 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6a1a      	ldr	r2, [r3, #32]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	4013      	ands	r3, r2
 800853e:	2b00      	cmp	r3, #0
 8008540:	bf14      	ite	ne
 8008542:	2301      	movne	r3, #1
 8008544:	2300      	moveq	r3, #0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	461a      	mov	r2, r3
 800854a:	79fb      	ldrb	r3, [r7, #7]
 800854c:	429a      	cmp	r2, r3
 800854e:	d1d6      	bne.n	80084fe <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <OSPIM_GetConfig+0x26>
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	2b02      	cmp	r3, #2
 800857a:	d802      	bhi.n	8008582 <OSPIM_GetConfig+0x26>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d102      	bne.n	8008588 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	75fb      	strb	r3, [r7, #23]
 8008586:	e08e      	b.n	80086a6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2200      	movs	r2, #0
 8008592:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2200      	movs	r2, #0
 8008598:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2200      	movs	r2, #0
 800859e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2200      	movs	r2, #0
 80085a4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d101      	bne.n	80085b0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80085ac:	4b41      	ldr	r3, [pc, #260]	; (80086b4 <OSPIM_GetConfig+0x158>)
 80085ae:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	e074      	b.n	80086a0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80085b6:	4a40      	ldr	r2, [pc, #256]	; (80086b8 <OSPIM_GetConfig+0x15c>)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	4053      	eors	r3, r2
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d103      	bne.n	80085e2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	4053      	eors	r3, r2
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4053      	eors	r3, r2
 8008612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008616:	2b00      	cmp	r3, #0
 8008618:	d103      	bne.n	8008622 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d018      	beq.n	800865e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	4053      	eors	r3, r2
 8008632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d111      	bne.n	800865e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3301      	adds	r3, #1
 8008648:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	60da      	str	r2, [r3, #12]
 8008650:	e005      	b.n	800865e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3301      	adds	r3, #1
 8008656:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d018      	beq.n	800869a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	4053      	eors	r3, r2
 800866e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d111      	bne.n	800869a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	611a      	str	r2, [r3, #16]
 800868c:	e005      	b.n	800869a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d987      	bls.n	80085b6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	371c      	adds	r7, #28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	04040222 	.word	0x04040222
 80086b8:	50061c00 	.word	0x50061c00

080086bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086c0:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a04      	ldr	r2, [pc, #16]	; (80086d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80086c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ca:	6013      	str	r3, [r2, #0]
}
 80086cc:	bf00      	nop
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40007000 	.word	0x40007000

080086dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086e0:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <HAL_PWREx_GetVoltageRange+0x3c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ec:	d102      	bne.n	80086f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80086ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086f2:	e00b      	b.n	800870c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80086f4:	4b08      	ldr	r3, [pc, #32]	; (8008718 <HAL_PWREx_GetVoltageRange+0x3c>)
 80086f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008702:	d102      	bne.n	800870a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008708:	e000      	b.n	800870c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800870a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800870c:	4618      	mov	r0, r3
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40007000 	.word	0x40007000

0800871c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d141      	bne.n	80087ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800872a:	4b4b      	ldr	r3, [pc, #300]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008736:	d131      	bne.n	800879c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008738:	4b47      	ldr	r3, [pc, #284]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800873a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800873e:	4a46      	ldr	r2, [pc, #280]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008744:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008748:	4b43      	ldr	r3, [pc, #268]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008750:	4a41      	ldr	r2, [pc, #260]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008756:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008758:	4b40      	ldr	r3, [pc, #256]	; (800885c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2232      	movs	r2, #50	; 0x32
 800875e:	fb02 f303 	mul.w	r3, r2, r3
 8008762:	4a3f      	ldr	r2, [pc, #252]	; (8008860 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008764:	fba2 2303 	umull	r2, r3, r2, r3
 8008768:	0c9b      	lsrs	r3, r3, #18
 800876a:	3301      	adds	r3, #1
 800876c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800876e:	e002      	b.n	8008776 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3b01      	subs	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008776:	4b38      	ldr	r3, [pc, #224]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800877e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008782:	d102      	bne.n	800878a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1f2      	bne.n	8008770 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800878a:	4b33      	ldr	r3, [pc, #204]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008796:	d158      	bne.n	800884a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e057      	b.n	800884c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800879c:	4b2e      	ldr	r3, [pc, #184]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800879e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087a2:	4a2d      	ldr	r2, [pc, #180]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80087ac:	e04d      	b.n	800884a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b4:	d141      	bne.n	800883a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087b6:	4b28      	ldr	r3, [pc, #160]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c2:	d131      	bne.n	8008828 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087c4:	4b24      	ldr	r3, [pc, #144]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087ca:	4a23      	ldr	r2, [pc, #140]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087d4:	4b20      	ldr	r3, [pc, #128]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80087dc:	4a1e      	ldr	r2, [pc, #120]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80087e4:	4b1d      	ldr	r3, [pc, #116]	; (800885c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2232      	movs	r2, #50	; 0x32
 80087ea:	fb02 f303 	mul.w	r3, r2, r3
 80087ee:	4a1c      	ldr	r2, [pc, #112]	; (8008860 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087f0:	fba2 2303 	umull	r2, r3, r2, r3
 80087f4:	0c9b      	lsrs	r3, r3, #18
 80087f6:	3301      	adds	r3, #1
 80087f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087fa:	e002      	b.n	8008802 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3b01      	subs	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008802:	4b15      	ldr	r3, [pc, #84]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800880a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800880e:	d102      	bne.n	8008816 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1f2      	bne.n	80087fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800881e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008822:	d112      	bne.n	800884a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e011      	b.n	800884c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008828:	4b0b      	ldr	r3, [pc, #44]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800882a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800882e:	4a0a      	ldr	r2, [pc, #40]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008838:	e007      	b.n	800884a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008842:	4a05      	ldr	r2, [pc, #20]	; (8008858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008844:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008848:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	40007000 	.word	0x40007000
 800885c:	20000000 	.word	0x20000000
 8008860:	431bde83 	.word	0x431bde83

08008864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d102      	bne.n	8008878 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f000 bc08 	b.w	8009088 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008878:	4b96      	ldr	r3, [pc, #600]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f003 030c 	and.w	r3, r3, #12
 8008880:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008882:	4b94      	ldr	r3, [pc, #592]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f003 0303 	and.w	r3, r3, #3
 800888a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 80e4 	beq.w	8008a62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d007      	beq.n	80088b0 <HAL_RCC_OscConfig+0x4c>
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2b0c      	cmp	r3, #12
 80088a4:	f040 808b 	bne.w	80089be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	f040 8087 	bne.w	80089be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80088b0:	4b88      	ldr	r3, [pc, #544]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_RCC_OscConfig+0x64>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e3df      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a1a      	ldr	r2, [r3, #32]
 80088cc:	4b81      	ldr	r3, [pc, #516]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0308 	and.w	r3, r3, #8
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d004      	beq.n	80088e2 <HAL_RCC_OscConfig+0x7e>
 80088d8:	4b7e      	ldr	r3, [pc, #504]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088e0:	e005      	b.n	80088ee <HAL_RCC_OscConfig+0x8a>
 80088e2:	4b7c      	ldr	r3, [pc, #496]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 80088e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e8:	091b      	lsrs	r3, r3, #4
 80088ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d223      	bcs.n	800893a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 fdcc 	bl	8009494 <RCC_SetFlashLatencyFromMSIRange>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e3c0      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008906:	4b73      	ldr	r3, [pc, #460]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a72      	ldr	r2, [pc, #456]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 800890c:	f043 0308 	orr.w	r3, r3, #8
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	4b70      	ldr	r3, [pc, #448]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	496d      	ldr	r1, [pc, #436]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008920:	4313      	orrs	r3, r2
 8008922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008924:	4b6b      	ldr	r3, [pc, #428]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	021b      	lsls	r3, r3, #8
 8008932:	4968      	ldr	r1, [pc, #416]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008934:	4313      	orrs	r3, r2
 8008936:	604b      	str	r3, [r1, #4]
 8008938:	e025      	b.n	8008986 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800893a:	4b66      	ldr	r3, [pc, #408]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a65      	ldr	r2, [pc, #404]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008940:	f043 0308 	orr.w	r3, r3, #8
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	4b63      	ldr	r3, [pc, #396]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	4960      	ldr	r1, [pc, #384]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008954:	4313      	orrs	r3, r2
 8008956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008958:	4b5e      	ldr	r3, [pc, #376]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	021b      	lsls	r3, r3, #8
 8008966:	495b      	ldr	r1, [pc, #364]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008968:	4313      	orrs	r3, r2
 800896a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fd8c 	bl	8009494 <RCC_SetFlashLatencyFromMSIRange>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e380      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008986:	f000 fcc1 	bl	800930c <HAL_RCC_GetSysClockFreq>
 800898a:	4602      	mov	r2, r0
 800898c:	4b51      	ldr	r3, [pc, #324]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	091b      	lsrs	r3, r3, #4
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	4950      	ldr	r1, [pc, #320]	; (8008ad8 <HAL_RCC_OscConfig+0x274>)
 8008998:	5ccb      	ldrb	r3, [r1, r3]
 800899a:	f003 031f 	and.w	r3, r3, #31
 800899e:	fa22 f303 	lsr.w	r3, r2, r3
 80089a2:	4a4e      	ldr	r2, [pc, #312]	; (8008adc <HAL_RCC_OscConfig+0x278>)
 80089a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80089a6:	4b4e      	ldr	r3, [pc, #312]	; (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fc fea2 	bl	80056f4 <HAL_InitTick>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d052      	beq.n	8008a60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	e364      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d032      	beq.n	8008a2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80089c6:	4b43      	ldr	r3, [pc, #268]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a42      	ldr	r2, [pc, #264]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80089d2:	f7fc fedf 	bl	8005794 <HAL_GetTick>
 80089d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80089d8:	e008      	b.n	80089ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80089da:	f7fc fedb 	bl	8005794 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d901      	bls.n	80089ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e34d      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80089ec:	4b39      	ldr	r3, [pc, #228]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d0f0      	beq.n	80089da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80089f8:	4b36      	ldr	r3, [pc, #216]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a35      	ldr	r2, [pc, #212]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 80089fe:	f043 0308 	orr.w	r3, r3, #8
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	4b33      	ldr	r3, [pc, #204]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	4930      	ldr	r1, [pc, #192]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a16:	4b2f      	ldr	r3, [pc, #188]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	492b      	ldr	r1, [pc, #172]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	604b      	str	r3, [r1, #4]
 8008a2a:	e01a      	b.n	8008a62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008a2c:	4b29      	ldr	r3, [pc, #164]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a28      	ldr	r2, [pc, #160]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008a38:	f7fc feac 	bl	8005794 <HAL_GetTick>
 8008a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008a3e:	e008      	b.n	8008a52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008a40:	f7fc fea8 	bl	8005794 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d901      	bls.n	8008a52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e31a      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008a52:	4b20      	ldr	r3, [pc, #128]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1f0      	bne.n	8008a40 <HAL_RCC_OscConfig+0x1dc>
 8008a5e:	e000      	b.n	8008a62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d073      	beq.n	8008b56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d005      	beq.n	8008a80 <HAL_RCC_OscConfig+0x21c>
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b0c      	cmp	r3, #12
 8008a78:	d10e      	bne.n	8008a98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d10b      	bne.n	8008a98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a80:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d063      	beq.n	8008b54 <HAL_RCC_OscConfig+0x2f0>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d15f      	bne.n	8008b54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e2f7      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa0:	d106      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x24c>
 8008aa2:	4b0c      	ldr	r3, [pc, #48]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a0b      	ldr	r2, [pc, #44]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	e025      	b.n	8008afc <HAL_RCC_OscConfig+0x298>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ab8:	d114      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x280>
 8008aba:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a05      	ldr	r2, [pc, #20]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a02      	ldr	r2, [pc, #8]	; (8008ad4 <HAL_RCC_OscConfig+0x270>)
 8008acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	e013      	b.n	8008afc <HAL_RCC_OscConfig+0x298>
 8008ad4:	40021000 	.word	0x40021000
 8008ad8:	08013e50 	.word	0x08013e50
 8008adc:	20000000 	.word	0x20000000
 8008ae0:	20000014 	.word	0x20000014
 8008ae4:	4ba0      	ldr	r3, [pc, #640]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a9f      	ldr	r2, [pc, #636]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	4b9d      	ldr	r3, [pc, #628]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a9c      	ldr	r2, [pc, #624]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d013      	beq.n	8008b2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b04:	f7fc fe46 	bl	8005794 <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b0c:	f7fc fe42 	bl	8005794 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b64      	cmp	r3, #100	; 0x64
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e2b4      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b1e:	4b92      	ldr	r3, [pc, #584]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0f0      	beq.n	8008b0c <HAL_RCC_OscConfig+0x2a8>
 8008b2a:	e014      	b.n	8008b56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2c:	f7fc fe32 	bl	8005794 <HAL_GetTick>
 8008b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b34:	f7fc fe2e 	bl	8005794 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b64      	cmp	r3, #100	; 0x64
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e2a0      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b46:	4b88      	ldr	r3, [pc, #544]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f0      	bne.n	8008b34 <HAL_RCC_OscConfig+0x2d0>
 8008b52:	e000      	b.n	8008b56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d060      	beq.n	8008c24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d005      	beq.n	8008b74 <HAL_RCC_OscConfig+0x310>
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b0c      	cmp	r3, #12
 8008b6c:	d119      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d116      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b74:	4b7c      	ldr	r3, [pc, #496]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <HAL_RCC_OscConfig+0x328>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e27d      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b8c:	4b76      	ldr	r3, [pc, #472]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	061b      	lsls	r3, r3, #24
 8008b9a:	4973      	ldr	r1, [pc, #460]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ba0:	e040      	b.n	8008c24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d023      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008baa:	4b6f      	ldr	r3, [pc, #444]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a6e      	ldr	r2, [pc, #440]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb6:	f7fc fded 	bl	8005794 <HAL_GetTick>
 8008bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bbc:	e008      	b.n	8008bd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bbe:	f7fc fde9 	bl	8005794 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e25b      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bd0:	4b65      	ldr	r3, [pc, #404]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0f0      	beq.n	8008bbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bdc:	4b62      	ldr	r3, [pc, #392]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	061b      	lsls	r3, r3, #24
 8008bea:	495f      	ldr	r1, [pc, #380]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	604b      	str	r3, [r1, #4]
 8008bf0:	e018      	b.n	8008c24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bf2:	4b5d      	ldr	r3, [pc, #372]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a5c      	ldr	r2, [pc, #368]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfe:	f7fc fdc9 	bl	8005794 <HAL_GetTick>
 8008c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c04:	e008      	b.n	8008c18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c06:	f7fc fdc5 	bl	8005794 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d901      	bls.n	8008c18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e237      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c18:	4b53      	ldr	r3, [pc, #332]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1f0      	bne.n	8008c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0308 	and.w	r3, r3, #8
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d03c      	beq.n	8008caa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01c      	beq.n	8008c72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c38:	4b4b      	ldr	r3, [pc, #300]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c3e:	4a4a      	ldr	r2, [pc, #296]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008c40:	f043 0301 	orr.w	r3, r3, #1
 8008c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c48:	f7fc fda4 	bl	8005794 <HAL_GetTick>
 8008c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c50:	f7fc fda0 	bl	8005794 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e212      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c62:	4b41      	ldr	r3, [pc, #260]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c68:	f003 0302 	and.w	r3, r3, #2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0ef      	beq.n	8008c50 <HAL_RCC_OscConfig+0x3ec>
 8008c70:	e01b      	b.n	8008caa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c72:	4b3d      	ldr	r3, [pc, #244]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c78:	4a3b      	ldr	r2, [pc, #236]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008c7a:	f023 0301 	bic.w	r3, r3, #1
 8008c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c82:	f7fc fd87 	bl	8005794 <HAL_GetTick>
 8008c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c88:	e008      	b.n	8008c9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c8a:	f7fc fd83 	bl	8005794 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e1f5      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c9c:	4b32      	ldr	r3, [pc, #200]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1ef      	bne.n	8008c8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0304 	and.w	r3, r3, #4
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80a6 	beq.w	8008e04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008cbc:	4b2a      	ldr	r3, [pc, #168]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10d      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cc8:	4b27      	ldr	r3, [pc, #156]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ccc:	4a26      	ldr	r2, [pc, #152]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8008cd4:	4b24      	ldr	r3, [pc, #144]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cdc:	60bb      	str	r3, [r7, #8]
 8008cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ce4:	4b21      	ldr	r3, [pc, #132]	; (8008d6c <HAL_RCC_OscConfig+0x508>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d118      	bne.n	8008d22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cf0:	4b1e      	ldr	r3, [pc, #120]	; (8008d6c <HAL_RCC_OscConfig+0x508>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a1d      	ldr	r2, [pc, #116]	; (8008d6c <HAL_RCC_OscConfig+0x508>)
 8008cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cfc:	f7fc fd4a 	bl	8005794 <HAL_GetTick>
 8008d00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d04:	f7fc fd46 	bl	8005794 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e1b8      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d16:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <HAL_RCC_OscConfig+0x508>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0f0      	beq.n	8008d04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d108      	bne.n	8008d3c <HAL_RCC_OscConfig+0x4d8>
 8008d2a:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d30:	4a0d      	ldr	r2, [pc, #52]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008d32:	f043 0301 	orr.w	r3, r3, #1
 8008d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d3a:	e029      	b.n	8008d90 <HAL_RCC_OscConfig+0x52c>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b05      	cmp	r3, #5
 8008d42:	d115      	bne.n	8008d70 <HAL_RCC_OscConfig+0x50c>
 8008d44:	4b08      	ldr	r3, [pc, #32]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d4a:	4a07      	ldr	r2, [pc, #28]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008d4c:	f043 0304 	orr.w	r3, r3, #4
 8008d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d54:	4b04      	ldr	r3, [pc, #16]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5a:	4a03      	ldr	r2, [pc, #12]	; (8008d68 <HAL_RCC_OscConfig+0x504>)
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d64:	e014      	b.n	8008d90 <HAL_RCC_OscConfig+0x52c>
 8008d66:	bf00      	nop
 8008d68:	40021000 	.word	0x40021000
 8008d6c:	40007000 	.word	0x40007000
 8008d70:	4b9d      	ldr	r3, [pc, #628]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d76:	4a9c      	ldr	r2, [pc, #624]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d80:	4b99      	ldr	r3, [pc, #612]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d86:	4a98      	ldr	r2, [pc, #608]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008d88:	f023 0304 	bic.w	r3, r3, #4
 8008d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d016      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d98:	f7fc fcfc 	bl	8005794 <HAL_GetTick>
 8008d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d9e:	e00a      	b.n	8008db6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008da0:	f7fc fcf8 	bl	8005794 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e168      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008db6:	4b8c      	ldr	r3, [pc, #560]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0ed      	beq.n	8008da0 <HAL_RCC_OscConfig+0x53c>
 8008dc4:	e015      	b.n	8008df2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc6:	f7fc fce5 	bl	8005794 <HAL_GetTick>
 8008dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008dcc:	e00a      	b.n	8008de4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dce:	f7fc fce1 	bl	8005794 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d901      	bls.n	8008de4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e151      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008de4:	4b80      	ldr	r3, [pc, #512]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1ed      	bne.n	8008dce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008df2:	7ffb      	ldrb	r3, [r7, #31]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d105      	bne.n	8008e04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008df8:	4b7b      	ldr	r3, [pc, #492]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfc:	4a7a      	ldr	r2, [pc, #488]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0320 	and.w	r3, r3, #32
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d03c      	beq.n	8008e8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01c      	beq.n	8008e52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e18:	4b73      	ldr	r3, [pc, #460]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e1e:	4a72      	ldr	r2, [pc, #456]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008e20:	f043 0301 	orr.w	r3, r3, #1
 8008e24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e28:	f7fc fcb4 	bl	8005794 <HAL_GetTick>
 8008e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e2e:	e008      	b.n	8008e42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e30:	f7fc fcb0 	bl	8005794 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e122      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e42:	4b69      	ldr	r3, [pc, #420]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d0ef      	beq.n	8008e30 <HAL_RCC_OscConfig+0x5cc>
 8008e50:	e01b      	b.n	8008e8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e52:	4b65      	ldr	r3, [pc, #404]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e58:	4a63      	ldr	r2, [pc, #396]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008e5a:	f023 0301 	bic.w	r3, r3, #1
 8008e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e62:	f7fc fc97 	bl	8005794 <HAL_GetTick>
 8008e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e68:	e008      	b.n	8008e7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e6a:	f7fc fc93 	bl	8005794 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d901      	bls.n	8008e7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e105      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e7c:	4b5a      	ldr	r3, [pc, #360]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1ef      	bne.n	8008e6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 80f9 	beq.w	8009086 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	f040 80cf 	bne.w	800903c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008e9e:	4b52      	ldr	r3, [pc, #328]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f003 0203 	and.w	r2, r3, #3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d12c      	bne.n	8008f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d123      	bne.n	8008f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ece:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d11b      	bne.n	8008f0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d113      	bne.n	8008f0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eee:	085b      	lsrs	r3, r3, #1
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d109      	bne.n	8008f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	085b      	lsrs	r3, r3, #1
 8008f04:	3b01      	subs	r3, #1
 8008f06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d071      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	2b0c      	cmp	r3, #12
 8008f10:	d068      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008f12:	4b35      	ldr	r3, [pc, #212]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d105      	bne.n	8008f2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008f1e:	4b32      	ldr	r3, [pc, #200]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e0ac      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008f2e:	4b2e      	ldr	r3, [pc, #184]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a2d      	ldr	r2, [pc, #180]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008f3a:	f7fc fc2b 	bl	8005794 <HAL_GetTick>
 8008f3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f40:	e008      	b.n	8008f54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f42:	f7fc fc27 	bl	8005794 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d901      	bls.n	8008f54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e099      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f54:	4b24      	ldr	r3, [pc, #144]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f0      	bne.n	8008f42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f60:	4b21      	ldr	r3, [pc, #132]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	4b21      	ldr	r3, [pc, #132]	; (8008fec <HAL_RCC_OscConfig+0x788>)
 8008f66:	4013      	ands	r3, r2
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008f70:	3a01      	subs	r2, #1
 8008f72:	0112      	lsls	r2, r2, #4
 8008f74:	4311      	orrs	r1, r2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f7a:	0212      	lsls	r2, r2, #8
 8008f7c:	4311      	orrs	r1, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008f82:	0852      	lsrs	r2, r2, #1
 8008f84:	3a01      	subs	r2, #1
 8008f86:	0552      	lsls	r2, r2, #21
 8008f88:	4311      	orrs	r1, r2
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008f8e:	0852      	lsrs	r2, r2, #1
 8008f90:	3a01      	subs	r2, #1
 8008f92:	0652      	lsls	r2, r2, #25
 8008f94:	4311      	orrs	r1, r2
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f9a:	06d2      	lsls	r2, r2, #27
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	4912      	ldr	r1, [pc, #72]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008fa4:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a0f      	ldr	r2, [pc, #60]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fb0:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	4a0c      	ldr	r2, [pc, #48]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008fbc:	f7fc fbea 	bl	8005794 <HAL_GetTick>
 8008fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fc2:	e008      	b.n	8008fd6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fc4:	f7fc fbe6 	bl	8005794 <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d901      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e058      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fd6:	4b04      	ldr	r3, [pc, #16]	; (8008fe8 <HAL_RCC_OscConfig+0x784>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0f0      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008fe2:	e050      	b.n	8009086 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e04f      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
 8008fe8:	40021000 	.word	0x40021000
 8008fec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ff0:	4b27      	ldr	r3, [pc, #156]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d144      	bne.n	8009086 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008ffc:	4b24      	ldr	r3, [pc, #144]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a23      	ldr	r2, [pc, #140]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 8009002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009006:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009008:	4b21      	ldr	r3, [pc, #132]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	4a20      	ldr	r2, [pc, #128]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 800900e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009012:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009014:	f7fc fbbe 	bl	8005794 <HAL_GetTick>
 8009018:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800901a:	e008      	b.n	800902e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800901c:	f7fc fbba 	bl	8005794 <HAL_GetTick>
 8009020:	4602      	mov	r2, r0
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	2b02      	cmp	r3, #2
 8009028:	d901      	bls.n	800902e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e02c      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800902e:	4b18      	ldr	r3, [pc, #96]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0f0      	beq.n	800901c <HAL_RCC_OscConfig+0x7b8>
 800903a:	e024      	b.n	8009086 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	2b0c      	cmp	r3, #12
 8009040:	d01f      	beq.n	8009082 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009042:	4b13      	ldr	r3, [pc, #76]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a12      	ldr	r2, [pc, #72]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 8009048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800904c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800904e:	f7fc fba1 	bl	8005794 <HAL_GetTick>
 8009052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009054:	e008      	b.n	8009068 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009056:	f7fc fb9d 	bl	8005794 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d901      	bls.n	8009068 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e00f      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009068:	4b09      	ldr	r3, [pc, #36]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1f0      	bne.n	8009056 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 8009076:	68da      	ldr	r2, [r3, #12]
 8009078:	4905      	ldr	r1, [pc, #20]	; (8009090 <HAL_RCC_OscConfig+0x82c>)
 800907a:	4b06      	ldr	r3, [pc, #24]	; (8009094 <HAL_RCC_OscConfig+0x830>)
 800907c:	4013      	ands	r3, r2
 800907e:	60cb      	str	r3, [r1, #12]
 8009080:	e001      	b.n	8009086 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e000      	b.n	8009088 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3720      	adds	r7, #32
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	40021000 	.word	0x40021000
 8009094:	feeefffc 	.word	0xfeeefffc

08009098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80090a2:	2300      	movs	r3, #0
 80090a4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e11d      	b.n	80092ec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090b0:	4b90      	ldr	r3, [pc, #576]	; (80092f4 <HAL_RCC_ClockConfig+0x25c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d910      	bls.n	80090e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090be:	4b8d      	ldr	r3, [pc, #564]	; (80092f4 <HAL_RCC_ClockConfig+0x25c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f023 020f 	bic.w	r2, r3, #15
 80090c6:	498b      	ldr	r1, [pc, #556]	; (80092f4 <HAL_RCC_ClockConfig+0x25c>)
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ce:	4b89      	ldr	r3, [pc, #548]	; (80092f4 <HAL_RCC_ClockConfig+0x25c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 030f 	and.w	r3, r3, #15
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d001      	beq.n	80090e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e105      	b.n	80092ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d010      	beq.n	800910e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	4b81      	ldr	r3, [pc, #516]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d908      	bls.n	800910e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090fc:	4b7e      	ldr	r3, [pc, #504]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	497b      	ldr	r1, [pc, #492]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 800910a:	4313      	orrs	r3, r2
 800910c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	d079      	beq.n	800920e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	2b03      	cmp	r3, #3
 8009120:	d11e      	bne.n	8009160 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009122:	4b75      	ldr	r3, [pc, #468]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e0dc      	b.n	80092ec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009132:	f000 fa09 	bl	8009548 <RCC_GetSysClockFreqFromPLLSource>
 8009136:	4603      	mov	r3, r0
 8009138:	4a70      	ldr	r2, [pc, #448]	; (80092fc <HAL_RCC_ClockConfig+0x264>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d946      	bls.n	80091cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800913e:	4b6e      	ldr	r3, [pc, #440]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d140      	bne.n	80091cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800914a:	4b6b      	ldr	r3, [pc, #428]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009152:	4a69      	ldr	r2, [pc, #420]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 8009154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009158:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800915a:	2380      	movs	r3, #128	; 0x80
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	e035      	b.n	80091cc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	2b02      	cmp	r3, #2
 8009166:	d107      	bne.n	8009178 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009168:	4b63      	ldr	r3, [pc, #396]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d115      	bne.n	80091a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e0b9      	b.n	80092ec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d107      	bne.n	8009190 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009180:	4b5d      	ldr	r3, [pc, #372]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0302 	and.w	r3, r3, #2
 8009188:	2b00      	cmp	r3, #0
 800918a:	d109      	bne.n	80091a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e0ad      	b.n	80092ec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009190:	4b59      	ldr	r3, [pc, #356]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e0a5      	b.n	80092ec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80091a0:	f000 f8b4 	bl	800930c <HAL_RCC_GetSysClockFreq>
 80091a4:	4603      	mov	r3, r0
 80091a6:	4a55      	ldr	r2, [pc, #340]	; (80092fc <HAL_RCC_ClockConfig+0x264>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d90f      	bls.n	80091cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80091ac:	4b52      	ldr	r3, [pc, #328]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d109      	bne.n	80091cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80091b8:	4b4f      	ldr	r3, [pc, #316]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091c0:	4a4d      	ldr	r2, [pc, #308]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80091c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80091c8:	2380      	movs	r3, #128	; 0x80
 80091ca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091cc:	4b4a      	ldr	r3, [pc, #296]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f023 0203 	bic.w	r2, r3, #3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	4947      	ldr	r1, [pc, #284]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091de:	f7fc fad9 	bl	8005794 <HAL_GetTick>
 80091e2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091e4:	e00a      	b.n	80091fc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091e6:	f7fc fad5 	bl	8005794 <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d901      	bls.n	80091fc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e077      	b.n	80092ec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091fc:	4b3e      	ldr	r3, [pc, #248]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f003 020c 	and.w	r2, r3, #12
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	429a      	cmp	r2, r3
 800920c:	d1eb      	bne.n	80091e6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2b80      	cmp	r3, #128	; 0x80
 8009212:	d105      	bne.n	8009220 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009214:	4b38      	ldr	r3, [pc, #224]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	4a37      	ldr	r2, [pc, #220]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 800921a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800921e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d010      	beq.n	800924e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689a      	ldr	r2, [r3, #8]
 8009230:	4b31      	ldr	r3, [pc, #196]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009238:	429a      	cmp	r2, r3
 800923a:	d208      	bcs.n	800924e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800923c:	4b2e      	ldr	r3, [pc, #184]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	492b      	ldr	r1, [pc, #172]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 800924a:	4313      	orrs	r3, r2
 800924c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800924e:	4b29      	ldr	r3, [pc, #164]	; (80092f4 <HAL_RCC_ClockConfig+0x25c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 030f 	and.w	r3, r3, #15
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d210      	bcs.n	800927e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800925c:	4b25      	ldr	r3, [pc, #148]	; (80092f4 <HAL_RCC_ClockConfig+0x25c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f023 020f 	bic.w	r2, r3, #15
 8009264:	4923      	ldr	r1, [pc, #140]	; (80092f4 <HAL_RCC_ClockConfig+0x25c>)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	4313      	orrs	r3, r2
 800926a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800926c:	4b21      	ldr	r3, [pc, #132]	; (80092f4 <HAL_RCC_ClockConfig+0x25c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 030f 	and.w	r3, r3, #15
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d001      	beq.n	800927e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e036      	b.n	80092ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d008      	beq.n	800929c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800928a:	4b1b      	ldr	r3, [pc, #108]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	4918      	ldr	r1, [pc, #96]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 8009298:	4313      	orrs	r3, r2
 800929a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0308 	and.w	r3, r3, #8
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d009      	beq.n	80092bc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092a8:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	00db      	lsls	r3, r3, #3
 80092b6:	4910      	ldr	r1, [pc, #64]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80092b8:	4313      	orrs	r3, r2
 80092ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80092bc:	f000 f826 	bl	800930c <HAL_RCC_GetSysClockFreq>
 80092c0:	4602      	mov	r2, r0
 80092c2:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <HAL_RCC_ClockConfig+0x260>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	091b      	lsrs	r3, r3, #4
 80092c8:	f003 030f 	and.w	r3, r3, #15
 80092cc:	490c      	ldr	r1, [pc, #48]	; (8009300 <HAL_RCC_ClockConfig+0x268>)
 80092ce:	5ccb      	ldrb	r3, [r1, r3]
 80092d0:	f003 031f 	and.w	r3, r3, #31
 80092d4:	fa22 f303 	lsr.w	r3, r2, r3
 80092d8:	4a0a      	ldr	r2, [pc, #40]	; (8009304 <HAL_RCC_ClockConfig+0x26c>)
 80092da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <HAL_RCC_ClockConfig+0x270>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fc fa07 	bl	80056f4 <HAL_InitTick>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	40022000 	.word	0x40022000
 80092f8:	40021000 	.word	0x40021000
 80092fc:	04c4b400 	.word	0x04c4b400
 8009300:	08013e50 	.word	0x08013e50
 8009304:	20000000 	.word	0x20000000
 8009308:	20000014 	.word	0x20000014

0800930c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800930c:	b480      	push	{r7}
 800930e:	b089      	sub	sp, #36	; 0x24
 8009310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	61fb      	str	r3, [r7, #28]
 8009316:	2300      	movs	r3, #0
 8009318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800931a:	4b3e      	ldr	r3, [pc, #248]	; (8009414 <HAL_RCC_GetSysClockFreq+0x108>)
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 030c 	and.w	r3, r3, #12
 8009322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009324:	4b3b      	ldr	r3, [pc, #236]	; (8009414 <HAL_RCC_GetSysClockFreq+0x108>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d005      	beq.n	8009340 <HAL_RCC_GetSysClockFreq+0x34>
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	2b0c      	cmp	r3, #12
 8009338:	d121      	bne.n	800937e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d11e      	bne.n	800937e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009340:	4b34      	ldr	r3, [pc, #208]	; (8009414 <HAL_RCC_GetSysClockFreq+0x108>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b00      	cmp	r3, #0
 800934a:	d107      	bne.n	800935c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800934c:	4b31      	ldr	r3, [pc, #196]	; (8009414 <HAL_RCC_GetSysClockFreq+0x108>)
 800934e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009352:	0a1b      	lsrs	r3, r3, #8
 8009354:	f003 030f 	and.w	r3, r3, #15
 8009358:	61fb      	str	r3, [r7, #28]
 800935a:	e005      	b.n	8009368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800935c:	4b2d      	ldr	r3, [pc, #180]	; (8009414 <HAL_RCC_GetSysClockFreq+0x108>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	091b      	lsrs	r3, r3, #4
 8009362:	f003 030f 	and.w	r3, r3, #15
 8009366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009368:	4a2b      	ldr	r2, [pc, #172]	; (8009418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10d      	bne.n	8009394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800937c:	e00a      	b.n	8009394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b04      	cmp	r3, #4
 8009382:	d102      	bne.n	800938a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009384:	4b25      	ldr	r3, [pc, #148]	; (800941c <HAL_RCC_GetSysClockFreq+0x110>)
 8009386:	61bb      	str	r3, [r7, #24]
 8009388:	e004      	b.n	8009394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b08      	cmp	r3, #8
 800938e:	d101      	bne.n	8009394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009390:	4b23      	ldr	r3, [pc, #140]	; (8009420 <HAL_RCC_GetSysClockFreq+0x114>)
 8009392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	2b0c      	cmp	r3, #12
 8009398:	d134      	bne.n	8009404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800939a:	4b1e      	ldr	r3, [pc, #120]	; (8009414 <HAL_RCC_GetSysClockFreq+0x108>)
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d003      	beq.n	80093b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	d003      	beq.n	80093b8 <HAL_RCC_GetSysClockFreq+0xac>
 80093b0:	e005      	b.n	80093be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80093b2:	4b1a      	ldr	r3, [pc, #104]	; (800941c <HAL_RCC_GetSysClockFreq+0x110>)
 80093b4:	617b      	str	r3, [r7, #20]
      break;
 80093b6:	e005      	b.n	80093c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80093b8:	4b19      	ldr	r3, [pc, #100]	; (8009420 <HAL_RCC_GetSysClockFreq+0x114>)
 80093ba:	617b      	str	r3, [r7, #20]
      break;
 80093bc:	e002      	b.n	80093c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	617b      	str	r3, [r7, #20]
      break;
 80093c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093c4:	4b13      	ldr	r3, [pc, #76]	; (8009414 <HAL_RCC_GetSysClockFreq+0x108>)
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	091b      	lsrs	r3, r3, #4
 80093ca:	f003 030f 	and.w	r3, r3, #15
 80093ce:	3301      	adds	r3, #1
 80093d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <HAL_RCC_GetSysClockFreq+0x108>)
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	0a1b      	lsrs	r3, r3, #8
 80093d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	fb03 f202 	mul.w	r2, r3, r2
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80093ea:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <HAL_RCC_GetSysClockFreq+0x108>)
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	0e5b      	lsrs	r3, r3, #25
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	3301      	adds	r3, #1
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009404:	69bb      	ldr	r3, [r7, #24]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3724      	adds	r7, #36	; 0x24
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	40021000 	.word	0x40021000
 8009418:	08013e68 	.word	0x08013e68
 800941c:	00f42400 	.word	0x00f42400
 8009420:	007a1200 	.word	0x007a1200

08009424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009428:	4b03      	ldr	r3, [pc, #12]	; (8009438 <HAL_RCC_GetHCLKFreq+0x14>)
 800942a:	681b      	ldr	r3, [r3, #0]
}
 800942c:	4618      	mov	r0, r3
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20000000 	.word	0x20000000

0800943c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009440:	f7ff fff0 	bl	8009424 <HAL_RCC_GetHCLKFreq>
 8009444:	4602      	mov	r2, r0
 8009446:	4b06      	ldr	r3, [pc, #24]	; (8009460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	0a1b      	lsrs	r3, r3, #8
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	4904      	ldr	r1, [pc, #16]	; (8009464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009452:	5ccb      	ldrb	r3, [r1, r3]
 8009454:	f003 031f 	and.w	r3, r3, #31
 8009458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800945c:	4618      	mov	r0, r3
 800945e:	bd80      	pop	{r7, pc}
 8009460:	40021000 	.word	0x40021000
 8009464:	08013e60 	.word	0x08013e60

08009468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800946c:	f7ff ffda 	bl	8009424 <HAL_RCC_GetHCLKFreq>
 8009470:	4602      	mov	r2, r0
 8009472:	4b06      	ldr	r3, [pc, #24]	; (800948c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	0adb      	lsrs	r3, r3, #11
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	4904      	ldr	r1, [pc, #16]	; (8009490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800947e:	5ccb      	ldrb	r3, [r1, r3]
 8009480:	f003 031f 	and.w	r3, r3, #31
 8009484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009488:	4618      	mov	r0, r3
 800948a:	bd80      	pop	{r7, pc}
 800948c:	40021000 	.word	0x40021000
 8009490:	08013e60 	.word	0x08013e60

08009494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800949c:	2300      	movs	r3, #0
 800949e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80094a0:	4b27      	ldr	r3, [pc, #156]	; (8009540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80094a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80094ac:	f7ff f916 	bl	80086dc <HAL_PWREx_GetVoltageRange>
 80094b0:	6178      	str	r0, [r7, #20]
 80094b2:	e014      	b.n	80094de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80094b4:	4b22      	ldr	r3, [pc, #136]	; (8009540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80094b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b8:	4a21      	ldr	r2, [pc, #132]	; (8009540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80094ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094be:	6593      	str	r3, [r2, #88]	; 0x58
 80094c0:	4b1f      	ldr	r3, [pc, #124]	; (8009540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80094c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80094cc:	f7ff f906 	bl	80086dc <HAL_PWREx_GetVoltageRange>
 80094d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80094d2:	4b1b      	ldr	r3, [pc, #108]	; (8009540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80094d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d6:	4a1a      	ldr	r2, [pc, #104]	; (8009540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80094d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094e4:	d10b      	bne.n	80094fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b80      	cmp	r3, #128	; 0x80
 80094ea:	d913      	bls.n	8009514 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2ba0      	cmp	r3, #160	; 0xa0
 80094f0:	d902      	bls.n	80094f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80094f2:	2302      	movs	r3, #2
 80094f4:	613b      	str	r3, [r7, #16]
 80094f6:	e00d      	b.n	8009514 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80094f8:	2301      	movs	r3, #1
 80094fa:	613b      	str	r3, [r7, #16]
 80094fc:	e00a      	b.n	8009514 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b7f      	cmp	r3, #127	; 0x7f
 8009502:	d902      	bls.n	800950a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009504:	2302      	movs	r3, #2
 8009506:	613b      	str	r3, [r7, #16]
 8009508:	e004      	b.n	8009514 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b70      	cmp	r3, #112	; 0x70
 800950e:	d101      	bne.n	8009514 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009510:	2301      	movs	r3, #1
 8009512:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009514:	4b0b      	ldr	r3, [pc, #44]	; (8009544 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f023 020f 	bic.w	r2, r3, #15
 800951c:	4909      	ldr	r1, [pc, #36]	; (8009544 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	4313      	orrs	r3, r2
 8009522:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009524:	4b07      	ldr	r3, [pc, #28]	; (8009544 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 030f 	and.w	r3, r3, #15
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	429a      	cmp	r2, r3
 8009530:	d001      	beq.n	8009536 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e000      	b.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	40021000 	.word	0x40021000
 8009544:	40022000 	.word	0x40022000

08009548 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800954e:	4b2d      	ldr	r3, [pc, #180]	; (8009604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b03      	cmp	r3, #3
 800955c:	d00b      	beq.n	8009576 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b03      	cmp	r3, #3
 8009562:	d825      	bhi.n	80095b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d008      	beq.n	800957c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2b02      	cmp	r3, #2
 800956e:	d11f      	bne.n	80095b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009570:	4b25      	ldr	r3, [pc, #148]	; (8009608 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009572:	613b      	str	r3, [r7, #16]
    break;
 8009574:	e01f      	b.n	80095b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009576:	4b25      	ldr	r3, [pc, #148]	; (800960c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009578:	613b      	str	r3, [r7, #16]
    break;
 800957a:	e01c      	b.n	80095b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800957c:	4b21      	ldr	r3, [pc, #132]	; (8009604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d107      	bne.n	8009598 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009588:	4b1e      	ldr	r3, [pc, #120]	; (8009604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800958a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	f003 030f 	and.w	r3, r3, #15
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	e005      	b.n	80095a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009598:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	091b      	lsrs	r3, r3, #4
 800959e:	f003 030f 	and.w	r3, r3, #15
 80095a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80095a4:	4a1a      	ldr	r2, [pc, #104]	; (8009610 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095ac:	613b      	str	r3, [r7, #16]
    break;
 80095ae:	e002      	b.n	80095b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	613b      	str	r3, [r7, #16]
    break;
 80095b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095b6:	4b13      	ldr	r3, [pc, #76]	; (8009604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	091b      	lsrs	r3, r3, #4
 80095bc:	f003 030f 	and.w	r3, r3, #15
 80095c0:	3301      	adds	r3, #1
 80095c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80095c4:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	0a1b      	lsrs	r3, r3, #8
 80095ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	fb03 f202 	mul.w	r2, r3, r2
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80095dc:	4b09      	ldr	r3, [pc, #36]	; (8009604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	0e5b      	lsrs	r3, r3, #25
 80095e2:	f003 0303 	and.w	r3, r3, #3
 80095e6:	3301      	adds	r3, #1
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80095f6:	683b      	ldr	r3, [r7, #0]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	371c      	adds	r7, #28
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	40021000 	.word	0x40021000
 8009608:	00f42400 	.word	0x00f42400
 800960c:	007a1200 	.word	0x007a1200
 8009610:	08013e68 	.word	0x08013e68

08009614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800961c:	2300      	movs	r3, #0
 800961e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009620:	2300      	movs	r3, #0
 8009622:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800962c:	2b00      	cmp	r3, #0
 800962e:	d040      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009634:	2b80      	cmp	r3, #128	; 0x80
 8009636:	d02a      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009638:	2b80      	cmp	r3, #128	; 0x80
 800963a:	d825      	bhi.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800963c:	2b60      	cmp	r3, #96	; 0x60
 800963e:	d026      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009640:	2b60      	cmp	r3, #96	; 0x60
 8009642:	d821      	bhi.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009644:	2b40      	cmp	r3, #64	; 0x40
 8009646:	d006      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009648:	2b40      	cmp	r3, #64	; 0x40
 800964a:	d81d      	bhi.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800964c:	2b00      	cmp	r3, #0
 800964e:	d009      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009650:	2b20      	cmp	r3, #32
 8009652:	d010      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009654:	e018      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009656:	4b89      	ldr	r3, [pc, #548]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	4a88      	ldr	r2, [pc, #544]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800965c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009660:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009662:	e015      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3304      	adds	r3, #4
 8009668:	2100      	movs	r1, #0
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fb12 	bl	8009c94 <RCCEx_PLLSAI1_Config>
 8009670:	4603      	mov	r3, r0
 8009672:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009674:	e00c      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	3320      	adds	r3, #32
 800967a:	2100      	movs	r1, #0
 800967c:	4618      	mov	r0, r3
 800967e:	f000 fbfd 	bl	8009e7c <RCCEx_PLLSAI2_Config>
 8009682:	4603      	mov	r3, r0
 8009684:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009686:	e003      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	74fb      	strb	r3, [r7, #19]
      break;
 800968c:	e000      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800968e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009690:	7cfb      	ldrb	r3, [r7, #19]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10b      	bne.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009696:	4b79      	ldr	r3, [pc, #484]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009698:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800969c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a4:	4975      	ldr	r1, [pc, #468]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80096ac:	e001      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ae:	7cfb      	ldrb	r3, [r7, #19]
 80096b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d047      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096c6:	d030      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80096c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096cc:	d82a      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80096ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096d2:	d02a      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80096d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096d8:	d824      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80096da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096de:	d008      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80096e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096e4:	d81e      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00a      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80096ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ee:	d010      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80096f0:	e018      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80096f2:	4b62      	ldr	r3, [pc, #392]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	4a61      	ldr	r2, [pc, #388]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80096f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80096fe:	e015      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3304      	adds	r3, #4
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fac4 	bl	8009c94 <RCCEx_PLLSAI1_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009710:	e00c      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	3320      	adds	r3, #32
 8009716:	2100      	movs	r1, #0
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fbaf 	bl	8009e7c <RCCEx_PLLSAI2_Config>
 800971e:	4603      	mov	r3, r0
 8009720:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009722:	e003      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	74fb      	strb	r3, [r7, #19]
      break;
 8009728:	e000      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800972a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800972c:	7cfb      	ldrb	r3, [r7, #19]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009732:	4b52      	ldr	r3, [pc, #328]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009734:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009740:	494e      	ldr	r1, [pc, #312]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009748:	e001      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974a:	7cfb      	ldrb	r3, [r7, #19]
 800974c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 809f 	beq.w	800989a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800975c:	2300      	movs	r3, #0
 800975e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009760:	4b46      	ldr	r3, [pc, #280]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800976c:	2301      	movs	r3, #1
 800976e:	e000      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009770:	2300      	movs	r3, #0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00d      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009776:	4b41      	ldr	r3, [pc, #260]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800977a:	4a40      	ldr	r2, [pc, #256]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800977c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009780:	6593      	str	r3, [r2, #88]	; 0x58
 8009782:	4b3e      	ldr	r3, [pc, #248]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800978a:	60bb      	str	r3, [r7, #8]
 800978c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800978e:	2301      	movs	r3, #1
 8009790:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009792:	4b3b      	ldr	r3, [pc, #236]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a3a      	ldr	r2, [pc, #232]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800979c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800979e:	f7fb fff9 	bl	8005794 <HAL_GetTick>
 80097a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80097a4:	e009      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097a6:	f7fb fff5 	bl	8005794 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d902      	bls.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	74fb      	strb	r3, [r7, #19]
        break;
 80097b8:	e005      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80097ba:	4b31      	ldr	r3, [pc, #196]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0ef      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80097c6:	7cfb      	ldrb	r3, [r7, #19]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d15b      	bne.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80097cc:	4b2b      	ldr	r3, [pc, #172]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80097ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d01f      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d019      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80097ea:	4b24      	ldr	r3, [pc, #144]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80097ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097f6:	4b21      	ldr	r3, [pc, #132]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80097f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097fc:	4a1f      	ldr	r2, [pc, #124]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80097fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009806:	4b1d      	ldr	r3, [pc, #116]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800980c:	4a1b      	ldr	r2, [pc, #108]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800980e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009816:	4a19      	ldr	r2, [pc, #100]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	d016      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009828:	f7fb ffb4 	bl	8005794 <HAL_GetTick>
 800982c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800982e:	e00b      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009830:	f7fb ffb0 	bl	8005794 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	f241 3288 	movw	r2, #5000	; 0x1388
 800983e:	4293      	cmp	r3, r2
 8009840:	d902      	bls.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	74fb      	strb	r3, [r7, #19]
            break;
 8009846:	e006      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009848:	4b0c      	ldr	r3, [pc, #48]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800984a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0ec      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009856:	7cfb      	ldrb	r3, [r7, #19]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10c      	bne.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800985c:	4b07      	ldr	r3, [pc, #28]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800985e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009862:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800986c:	4903      	ldr	r1, [pc, #12]	; (800987c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800986e:	4313      	orrs	r3, r2
 8009870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009874:	e008      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009876:	7cfb      	ldrb	r3, [r7, #19]
 8009878:	74bb      	strb	r3, [r7, #18]
 800987a:	e005      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800987c:	40021000 	.word	0x40021000
 8009880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009884:	7cfb      	ldrb	r3, [r7, #19]
 8009886:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009888:	7c7b      	ldrb	r3, [r7, #17]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d105      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800988e:	4ba0      	ldr	r3, [pc, #640]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009892:	4a9f      	ldr	r2, [pc, #636]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009898:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00a      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80098a6:	4b9a      	ldr	r3, [pc, #616]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ac:	f023 0203 	bic.w	r2, r3, #3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b4:	4996      	ldr	r1, [pc, #600]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0302 	and.w	r3, r3, #2
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00a      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80098c8:	4b91      	ldr	r3, [pc, #580]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ce:	f023 020c 	bic.w	r2, r3, #12
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d6:	498e      	ldr	r1, [pc, #568]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80098ea:	4b89      	ldr	r3, [pc, #548]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f8:	4985      	ldr	r1, [pc, #532]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0308 	and.w	r3, r3, #8
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00a      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800990c:	4b80      	ldr	r3, [pc, #512]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800990e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009912:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800991a:	497d      	ldr	r1, [pc, #500]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800991c:	4313      	orrs	r3, r2
 800991e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0310 	and.w	r3, r3, #16
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00a      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800992e:	4b78      	ldr	r3, [pc, #480]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800993c:	4974      	ldr	r1, [pc, #464]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800993e:	4313      	orrs	r3, r2
 8009940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 0320 	and.w	r3, r3, #32
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00a      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009950:	4b6f      	ldr	r3, [pc, #444]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009956:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800995e:	496c      	ldr	r1, [pc, #432]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009960:	4313      	orrs	r3, r2
 8009962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009972:	4b67      	ldr	r3, [pc, #412]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009978:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009980:	4963      	ldr	r1, [pc, #396]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009982:	4313      	orrs	r3, r2
 8009984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00a      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009994:	4b5e      	ldr	r3, [pc, #376]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800999a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099a2:	495b      	ldr	r1, [pc, #364]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00a      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80099b6:	4b56      	ldr	r3, [pc, #344]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c4:	4952      	ldr	r1, [pc, #328]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00a      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80099d8:	4b4d      	ldr	r3, [pc, #308]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e6:	494a      	ldr	r1, [pc, #296]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80099fa:	4b45      	ldr	r3, [pc, #276]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a08:	4941      	ldr	r1, [pc, #260]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00a      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a1c:	4b3c      	ldr	r3, [pc, #240]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a22:	f023 0203 	bic.w	r2, r3, #3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a2a:	4939      	ldr	r1, [pc, #228]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d028      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a3e:	4b34      	ldr	r3, [pc, #208]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4c:	4930      	ldr	r1, [pc, #192]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a5c:	d106      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a5e:	4b2c      	ldr	r3, [pc, #176]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	4a2b      	ldr	r2, [pc, #172]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a68:	60d3      	str	r3, [r2, #12]
 8009a6a:	e011      	b.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a74:	d10c      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 f909 	bl	8009c94 <RCCEx_PLLSAI1_Config>
 8009a82:	4603      	mov	r3, r0
 8009a84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009a86:	7cfb      	ldrb	r3, [r7, #19]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8009a8c:	7cfb      	ldrb	r3, [r7, #19]
 8009a8e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d04d      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aa4:	d108      	bne.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009aa6:	4b1a      	ldr	r3, [pc, #104]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009aac:	4a18      	ldr	r2, [pc, #96]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ab2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009ab6:	e012      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009ab8:	4b15      	ldr	r3, [pc, #84]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009abe:	4a14      	ldr	r2, [pc, #80]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ac4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009ac8:	4b11      	ldr	r3, [pc, #68]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ad6:	490e      	ldr	r1, [pc, #56]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ae6:	d106      	bne.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ae8:	4b09      	ldr	r3, [pc, #36]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009af2:	60d3      	str	r3, [r2, #12]
 8009af4:	e020      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009afe:	d109      	bne.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009b00:	4b03      	ldr	r3, [pc, #12]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	4a02      	ldr	r2, [pc, #8]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b0a:	60d3      	str	r3, [r2, #12]
 8009b0c:	e014      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009b0e:	bf00      	nop
 8009b10:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b1c:	d10c      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3304      	adds	r3, #4
 8009b22:	2101      	movs	r1, #1
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 f8b5 	bl	8009c94 <RCCEx_PLLSAI1_Config>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b2e:	7cfb      	ldrb	r3, [r7, #19]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009b34:	7cfb      	ldrb	r3, [r7, #19]
 8009b36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d028      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b44:	4b4a      	ldr	r3, [pc, #296]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b52:	4947      	ldr	r1, [pc, #284]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b54:	4313      	orrs	r3, r2
 8009b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b62:	d106      	bne.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b64:	4b42      	ldr	r3, [pc, #264]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	4a41      	ldr	r2, [pc, #260]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b6e:	60d3      	str	r3, [r2, #12]
 8009b70:	e011      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b7a:	d10c      	bne.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	2101      	movs	r1, #1
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 f886 	bl	8009c94 <RCCEx_PLLSAI1_Config>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b8c:	7cfb      	ldrb	r3, [r7, #19]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8009b92:	7cfb      	ldrb	r3, [r7, #19]
 8009b94:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d01e      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ba2:	4b33      	ldr	r3, [pc, #204]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bb2:	492f      	ldr	r1, [pc, #188]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc4:	d10c      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	2102      	movs	r1, #2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f861 	bl	8009c94 <RCCEx_PLLSAI1_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009bd6:	7cfb      	ldrb	r3, [r7, #19]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009bdc:	7cfb      	ldrb	r3, [r7, #19]
 8009bde:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009bec:	4b20      	ldr	r3, [pc, #128]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bf2:	f023 0204 	bic.w	r2, r3, #4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bfc:	491c      	ldr	r1, [pc, #112]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00b      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009c10:	4b17      	ldr	r3, [pc, #92]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c16:	f023 0218 	bic.w	r2, r3, #24
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c20:	4913      	ldr	r1, [pc, #76]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d017      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c44:	490a      	ldr	r1, [pc, #40]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c56:	d105      	bne.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c58:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	4a04      	ldr	r2, [pc, #16]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009c64:	7cbb      	ldrb	r3, [r7, #18]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	40021000 	.word	0x40021000

08009c74 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009c74:	b480      	push	{r7}
 8009c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009c78:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a04      	ldr	r2, [pc, #16]	; (8009c90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009c7e:	f043 0304 	orr.w	r3, r3, #4
 8009c82:	6013      	str	r3, [r2, #0]
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	40021000 	.word	0x40021000

08009c94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009ca2:	4b72      	ldr	r3, [pc, #456]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00e      	beq.n	8009ccc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009cae:	4b6f      	ldr	r3, [pc, #444]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f003 0203 	and.w	r2, r3, #3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d103      	bne.n	8009cc6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d142      	bne.n	8009d4c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	73fb      	strb	r3, [r7, #15]
 8009cca:	e03f      	b.n	8009d4c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	d018      	beq.n	8009d06 <RCCEx_PLLSAI1_Config+0x72>
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d825      	bhi.n	8009d24 <RCCEx_PLLSAI1_Config+0x90>
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d002      	beq.n	8009ce2 <RCCEx_PLLSAI1_Config+0x4e>
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d009      	beq.n	8009cf4 <RCCEx_PLLSAI1_Config+0x60>
 8009ce0:	e020      	b.n	8009d24 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009ce2:	4b62      	ldr	r3, [pc, #392]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d11d      	bne.n	8009d2a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009cf2:	e01a      	b.n	8009d2a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009cf4:	4b5d      	ldr	r3, [pc, #372]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d116      	bne.n	8009d2e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d04:	e013      	b.n	8009d2e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009d06:	4b59      	ldr	r3, [pc, #356]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10f      	bne.n	8009d32 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009d12:	4b56      	ldr	r3, [pc, #344]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d109      	bne.n	8009d32 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d22:	e006      	b.n	8009d32 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	73fb      	strb	r3, [r7, #15]
      break;
 8009d28:	e004      	b.n	8009d34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009d2a:	bf00      	nop
 8009d2c:	e002      	b.n	8009d34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009d2e:	bf00      	nop
 8009d30:	e000      	b.n	8009d34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009d32:	bf00      	nop
    }

    if(status == HAL_OK)
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d108      	bne.n	8009d4c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009d3a:	4b4c      	ldr	r3, [pc, #304]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f023 0203 	bic.w	r2, r3, #3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4949      	ldr	r1, [pc, #292]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f040 8086 	bne.w	8009e60 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009d54:	4b45      	ldr	r3, [pc, #276]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a44      	ldr	r2, [pc, #272]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d60:	f7fb fd18 	bl	8005794 <HAL_GetTick>
 8009d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d66:	e009      	b.n	8009d7c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009d68:	f7fb fd14 	bl	8005794 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d902      	bls.n	8009d7c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	73fb      	strb	r3, [r7, #15]
        break;
 8009d7a:	e005      	b.n	8009d88 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d7c:	4b3b      	ldr	r3, [pc, #236]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1ef      	bne.n	8009d68 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d168      	bne.n	8009e60 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d113      	bne.n	8009dbc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009d94:	4b35      	ldr	r3, [pc, #212]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d96:	691a      	ldr	r2, [r3, #16]
 8009d98:	4b35      	ldr	r3, [pc, #212]	; (8009e70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	6892      	ldr	r2, [r2, #8]
 8009da0:	0211      	lsls	r1, r2, #8
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	68d2      	ldr	r2, [r2, #12]
 8009da6:	06d2      	lsls	r2, r2, #27
 8009da8:	4311      	orrs	r1, r2
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6852      	ldr	r2, [r2, #4]
 8009dae:	3a01      	subs	r2, #1
 8009db0:	0112      	lsls	r2, r2, #4
 8009db2:	430a      	orrs	r2, r1
 8009db4:	492d      	ldr	r1, [pc, #180]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	610b      	str	r3, [r1, #16]
 8009dba:	e02d      	b.n	8009e18 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d115      	bne.n	8009dee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009dc2:	4b2a      	ldr	r3, [pc, #168]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009dc4:	691a      	ldr	r2, [r3, #16]
 8009dc6:	4b2b      	ldr	r3, [pc, #172]	; (8009e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dc8:	4013      	ands	r3, r2
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	6892      	ldr	r2, [r2, #8]
 8009dce:	0211      	lsls	r1, r2, #8
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	6912      	ldr	r2, [r2, #16]
 8009dd4:	0852      	lsrs	r2, r2, #1
 8009dd6:	3a01      	subs	r2, #1
 8009dd8:	0552      	lsls	r2, r2, #21
 8009dda:	4311      	orrs	r1, r2
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	6852      	ldr	r2, [r2, #4]
 8009de0:	3a01      	subs	r2, #1
 8009de2:	0112      	lsls	r2, r2, #4
 8009de4:	430a      	orrs	r2, r1
 8009de6:	4921      	ldr	r1, [pc, #132]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	610b      	str	r3, [r1, #16]
 8009dec:	e014      	b.n	8009e18 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009dee:	4b1f      	ldr	r3, [pc, #124]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009df0:	691a      	ldr	r2, [r3, #16]
 8009df2:	4b21      	ldr	r3, [pc, #132]	; (8009e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009df4:	4013      	ands	r3, r2
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	6892      	ldr	r2, [r2, #8]
 8009dfa:	0211      	lsls	r1, r2, #8
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	6952      	ldr	r2, [r2, #20]
 8009e00:	0852      	lsrs	r2, r2, #1
 8009e02:	3a01      	subs	r2, #1
 8009e04:	0652      	lsls	r2, r2, #25
 8009e06:	4311      	orrs	r1, r2
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	6852      	ldr	r2, [r2, #4]
 8009e0c:	3a01      	subs	r2, #1
 8009e0e:	0112      	lsls	r2, r2, #4
 8009e10:	430a      	orrs	r2, r1
 8009e12:	4916      	ldr	r1, [pc, #88]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009e18:	4b14      	ldr	r3, [pc, #80]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a13      	ldr	r2, [pc, #76]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e24:	f7fb fcb6 	bl	8005794 <HAL_GetTick>
 8009e28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e2a:	e009      	b.n	8009e40 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e2c:	f7fb fcb2 	bl	8005794 <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d902      	bls.n	8009e40 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	73fb      	strb	r3, [r7, #15]
          break;
 8009e3e:	e005      	b.n	8009e4c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e40:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d0ef      	beq.n	8009e2c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d106      	bne.n	8009e60 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009e52:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e54:	691a      	ldr	r2, [r3, #16]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	4904      	ldr	r1, [pc, #16]	; (8009e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	40021000 	.word	0x40021000
 8009e70:	07ff800f 	.word	0x07ff800f
 8009e74:	ff9f800f 	.word	0xff9f800f
 8009e78:	f9ff800f 	.word	0xf9ff800f

08009e7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009e8a:	4b72      	ldr	r3, [pc, #456]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f003 0303 	and.w	r3, r3, #3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00e      	beq.n	8009eb4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009e96:	4b6f      	ldr	r3, [pc, #444]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f003 0203 	and.w	r2, r3, #3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d103      	bne.n	8009eae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d142      	bne.n	8009f34 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	73fb      	strb	r3, [r7, #15]
 8009eb2:	e03f      	b.n	8009f34 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d018      	beq.n	8009eee <RCCEx_PLLSAI2_Config+0x72>
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d825      	bhi.n	8009f0c <RCCEx_PLLSAI2_Config+0x90>
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d002      	beq.n	8009eca <RCCEx_PLLSAI2_Config+0x4e>
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d009      	beq.n	8009edc <RCCEx_PLLSAI2_Config+0x60>
 8009ec8:	e020      	b.n	8009f0c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009eca:	4b62      	ldr	r3, [pc, #392]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 0302 	and.w	r3, r3, #2
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d11d      	bne.n	8009f12 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009eda:	e01a      	b.n	8009f12 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009edc:	4b5d      	ldr	r3, [pc, #372]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d116      	bne.n	8009f16 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009eec:	e013      	b.n	8009f16 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009eee:	4b59      	ldr	r3, [pc, #356]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10f      	bne.n	8009f1a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009efa:	4b56      	ldr	r3, [pc, #344]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d109      	bne.n	8009f1a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f0a:	e006      	b.n	8009f1a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f10:	e004      	b.n	8009f1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009f12:	bf00      	nop
 8009f14:	e002      	b.n	8009f1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009f16:	bf00      	nop
 8009f18:	e000      	b.n	8009f1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d108      	bne.n	8009f34 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009f22:	4b4c      	ldr	r3, [pc, #304]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f023 0203 	bic.w	r2, r3, #3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4949      	ldr	r1, [pc, #292]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f040 8086 	bne.w	800a048 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009f3c:	4b45      	ldr	r3, [pc, #276]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a44      	ldr	r2, [pc, #272]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f48:	f7fb fc24 	bl	8005794 <HAL_GetTick>
 8009f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009f4e:	e009      	b.n	8009f64 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009f50:	f7fb fc20 	bl	8005794 <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d902      	bls.n	8009f64 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	73fb      	strb	r3, [r7, #15]
        break;
 8009f62:	e005      	b.n	8009f70 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009f64:	4b3b      	ldr	r3, [pc, #236]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1ef      	bne.n	8009f50 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d168      	bne.n	800a048 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d113      	bne.n	8009fa4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009f7c:	4b35      	ldr	r3, [pc, #212]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f7e:	695a      	ldr	r2, [r3, #20]
 8009f80:	4b35      	ldr	r3, [pc, #212]	; (800a058 <RCCEx_PLLSAI2_Config+0x1dc>)
 8009f82:	4013      	ands	r3, r2
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6892      	ldr	r2, [r2, #8]
 8009f88:	0211      	lsls	r1, r2, #8
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	68d2      	ldr	r2, [r2, #12]
 8009f8e:	06d2      	lsls	r2, r2, #27
 8009f90:	4311      	orrs	r1, r2
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6852      	ldr	r2, [r2, #4]
 8009f96:	3a01      	subs	r2, #1
 8009f98:	0112      	lsls	r2, r2, #4
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	492d      	ldr	r1, [pc, #180]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	614b      	str	r3, [r1, #20]
 8009fa2:	e02d      	b.n	800a000 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d115      	bne.n	8009fd6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009faa:	4b2a      	ldr	r3, [pc, #168]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009fac:	695a      	ldr	r2, [r3, #20]
 8009fae:	4b2b      	ldr	r3, [pc, #172]	; (800a05c <RCCEx_PLLSAI2_Config+0x1e0>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6892      	ldr	r2, [r2, #8]
 8009fb6:	0211      	lsls	r1, r2, #8
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6912      	ldr	r2, [r2, #16]
 8009fbc:	0852      	lsrs	r2, r2, #1
 8009fbe:	3a01      	subs	r2, #1
 8009fc0:	0552      	lsls	r2, r2, #21
 8009fc2:	4311      	orrs	r1, r2
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	6852      	ldr	r2, [r2, #4]
 8009fc8:	3a01      	subs	r2, #1
 8009fca:	0112      	lsls	r2, r2, #4
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	4921      	ldr	r1, [pc, #132]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	614b      	str	r3, [r1, #20]
 8009fd4:	e014      	b.n	800a000 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009fd6:	4b1f      	ldr	r3, [pc, #124]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009fd8:	695a      	ldr	r2, [r3, #20]
 8009fda:	4b21      	ldr	r3, [pc, #132]	; (800a060 <RCCEx_PLLSAI2_Config+0x1e4>)
 8009fdc:	4013      	ands	r3, r2
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6892      	ldr	r2, [r2, #8]
 8009fe2:	0211      	lsls	r1, r2, #8
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6952      	ldr	r2, [r2, #20]
 8009fe8:	0852      	lsrs	r2, r2, #1
 8009fea:	3a01      	subs	r2, #1
 8009fec:	0652      	lsls	r2, r2, #25
 8009fee:	4311      	orrs	r1, r2
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	6852      	ldr	r2, [r2, #4]
 8009ff4:	3a01      	subs	r2, #1
 8009ff6:	0112      	lsls	r2, r2, #4
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	4916      	ldr	r1, [pc, #88]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a000:	4b14      	ldr	r3, [pc, #80]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a13      	ldr	r2, [pc, #76]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a00a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a00c:	f7fb fbc2 	bl	8005794 <HAL_GetTick>
 800a010:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a012:	e009      	b.n	800a028 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a014:	f7fb fbbe 	bl	8005794 <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d902      	bls.n	800a028 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	73fb      	strb	r3, [r7, #15]
          break;
 800a026:	e005      	b.n	800a034 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d0ef      	beq.n	800a014 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a034:	7bfb      	ldrb	r3, [r7, #15]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d106      	bne.n	800a048 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a03a:	4b06      	ldr	r3, [pc, #24]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a03c:	695a      	ldr	r2, [r3, #20]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	4904      	ldr	r1, [pc, #16]	; (800a054 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a044:	4313      	orrs	r3, r2
 800a046:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a048:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	40021000 	.word	0x40021000
 800a058:	07ff800f 	.word	0x07ff800f
 800a05c:	ff9f800f 	.word	0xff9f800f
 800a060:	f9ff800f 	.word	0xf9ff800f

0800a064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e095      	b.n	800a1a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d108      	bne.n	800a090 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a086:	d009      	beq.n	800a09c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	61da      	str	r2, [r3, #28]
 800a08e:	e005      	b.n	800a09c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7f9 fb8e 	bl	80037d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0dc:	d902      	bls.n	800a0e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	e002      	b.n	800a0ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a0e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a0f2:	d007      	beq.n	800a104 <HAL_SPI_Init+0xa0>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0fc:	d002      	beq.n	800a104 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a114:	431a      	orrs	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	431a      	orrs	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	431a      	orrs	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a132:	431a      	orrs	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a13c:	431a      	orrs	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a146:	ea42 0103 	orr.w	r1, r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	0c1b      	lsrs	r3, r3, #16
 800a160:	f003 0204 	and.w	r2, r3, #4
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	f003 0310 	and.w	r3, r3, #16
 800a16c:	431a      	orrs	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a172:	f003 0308 	and.w	r3, r3, #8
 800a176:	431a      	orrs	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a180:	ea42 0103 	orr.w	r1, r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	430a      	orrs	r2, r1
 800a190:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e01a      	b.n	800a1f2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1d2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7f9 fb7d 	bl	80038d4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b088      	sub	sp, #32
 800a1fe:	af02      	add	r7, sp, #8
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	60b9      	str	r1, [r7, #8]
 800a204:	603b      	str	r3, [r7, #0]
 800a206:	4613      	mov	r3, r2
 800a208:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a216:	d112      	bne.n	800a23e <HAL_SPI_Receive+0x44>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10e      	bne.n	800a23e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2204      	movs	r2, #4
 800a224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a228:	88fa      	ldrh	r2, [r7, #6]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	4613      	mov	r3, r2
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	68b9      	ldr	r1, [r7, #8]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f910 	bl	800a45a <HAL_SPI_TransmitReceive>
 800a23a:	4603      	mov	r3, r0
 800a23c:	e109      	b.n	800a452 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a244:	2b01      	cmp	r3, #1
 800a246:	d101      	bne.n	800a24c <HAL_SPI_Receive+0x52>
 800a248:	2302      	movs	r3, #2
 800a24a:	e102      	b.n	800a452 <HAL_SPI_Receive+0x258>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a254:	f7fb fa9e 	bl	8005794 <HAL_GetTick>
 800a258:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b01      	cmp	r3, #1
 800a264:	d002      	beq.n	800a26c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a266:	2302      	movs	r3, #2
 800a268:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a26a:	e0e9      	b.n	800a440 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d002      	beq.n	800a278 <HAL_SPI_Receive+0x7e>
 800a272:	88fb      	ldrh	r3, [r7, #6]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d102      	bne.n	800a27e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a27c:	e0e0      	b.n	800a440 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2204      	movs	r2, #4
 800a282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	88fa      	ldrh	r2, [r7, #6]
 800a296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	88fa      	ldrh	r2, [r7, #6]
 800a29e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2c8:	d908      	bls.n	800a2dc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a2d8:	605a      	str	r2, [r3, #4]
 800a2da:	e007      	b.n	800a2ec <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a2ea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f4:	d10f      	bne.n	800a316 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a314:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a320:	2b40      	cmp	r3, #64	; 0x40
 800a322:	d007      	beq.n	800a334 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a332:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a33c:	d867      	bhi.n	800a40e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a33e:	e030      	b.n	800a3a2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d117      	bne.n	800a37e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f103 020c 	add.w	r2, r3, #12
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	7812      	ldrb	r2, [r2, #0]
 800a35c:	b2d2      	uxtb	r2, r2
 800a35e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a370:	b29b      	uxth	r3, r3
 800a372:	3b01      	subs	r3, #1
 800a374:	b29a      	uxth	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a37c:	e011      	b.n	800a3a2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a37e:	f7fb fa09 	bl	8005794 <HAL_GetTick>
 800a382:	4602      	mov	r2, r0
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d803      	bhi.n	800a396 <HAL_SPI_Receive+0x19c>
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a394:	d102      	bne.n	800a39c <HAL_SPI_Receive+0x1a2>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a3a0:	e04e      	b.n	800a440 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1c8      	bne.n	800a340 <HAL_SPI_Receive+0x146>
 800a3ae:	e034      	b.n	800a41a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d115      	bne.n	800a3ea <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	b292      	uxth	r2, r2
 800a3ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d0:	1c9a      	adds	r2, r3, #2
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a3e8:	e011      	b.n	800a40e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3ea:	f7fb f9d3 	bl	8005794 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d803      	bhi.n	800a402 <HAL_SPI_Receive+0x208>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d102      	bne.n	800a408 <HAL_SPI_Receive+0x20e>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d102      	bne.n	800a40e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a40c:	e018      	b.n	800a440 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a414:	b29b      	uxth	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1ca      	bne.n	800a3b0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f001 f802 	bl	800b428 <SPI_EndRxTransaction>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2220      	movs	r2, #32
 800a42e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	75fb      	strb	r3, [r7, #23]
 800a43c:	e000      	b.n	800a440 <HAL_SPI_Receive+0x246>
  }

error :
 800a43e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3718      	adds	r7, #24
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b08a      	sub	sp, #40	; 0x28
 800a45e:	af00      	add	r7, sp, #0
 800a460:	60f8      	str	r0, [r7, #12]
 800a462:	60b9      	str	r1, [r7, #8]
 800a464:	607a      	str	r2, [r7, #4]
 800a466:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a468:	2301      	movs	r3, #1
 800a46a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d101      	bne.n	800a480 <HAL_SPI_TransmitReceive+0x26>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e1fb      	b.n	800a878 <HAL_SPI_TransmitReceive+0x41e>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a488:	f7fb f984 	bl	8005794 <HAL_GetTick>
 800a48c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a494:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a49c:	887b      	ldrh	r3, [r7, #2]
 800a49e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a4a0:	887b      	ldrh	r3, [r7, #2]
 800a4a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a4a4:	7efb      	ldrb	r3, [r7, #27]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d00e      	beq.n	800a4c8 <HAL_SPI_TransmitReceive+0x6e>
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4b0:	d106      	bne.n	800a4c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d102      	bne.n	800a4c0 <HAL_SPI_TransmitReceive+0x66>
 800a4ba:	7efb      	ldrb	r3, [r7, #27]
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d003      	beq.n	800a4c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a4c6:	e1cd      	b.n	800a864 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d005      	beq.n	800a4da <HAL_SPI_TransmitReceive+0x80>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <HAL_SPI_TransmitReceive+0x80>
 800a4d4:	887b      	ldrh	r3, [r7, #2]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d103      	bne.n	800a4e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a4e0:	e1c0      	b.n	800a864 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	d003      	beq.n	800a4f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2205      	movs	r2, #5
 800a4f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	887a      	ldrh	r2, [r7, #2]
 800a506:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	887a      	ldrh	r2, [r7, #2]
 800a50e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	887a      	ldrh	r2, [r7, #2]
 800a51c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	887a      	ldrh	r2, [r7, #2]
 800a522:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a538:	d802      	bhi.n	800a540 <HAL_SPI_TransmitReceive+0xe6>
 800a53a:	8a3b      	ldrh	r3, [r7, #16]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d908      	bls.n	800a552 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a54e:	605a      	str	r2, [r3, #4]
 800a550:	e007      	b.n	800a562 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a560:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56c:	2b40      	cmp	r3, #64	; 0x40
 800a56e:	d007      	beq.n	800a580 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a57e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a588:	d97c      	bls.n	800a684 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d002      	beq.n	800a598 <HAL_SPI_TransmitReceive+0x13e>
 800a592:	8a7b      	ldrh	r3, [r7, #18]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d169      	bne.n	800a66c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	881a      	ldrh	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	1c9a      	adds	r2, r3, #2
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5bc:	e056      	b.n	800a66c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d11b      	bne.n	800a604 <HAL_SPI_TransmitReceive+0x1aa>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d016      	beq.n	800a604 <HAL_SPI_TransmitReceive+0x1aa>
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d113      	bne.n	800a604 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e0:	881a      	ldrh	r2, [r3, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ec:	1c9a      	adds	r2, r3, #2
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d11c      	bne.n	800a64c <HAL_SPI_TransmitReceive+0x1f2>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a618:	b29b      	uxth	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d016      	beq.n	800a64c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68da      	ldr	r2, [r3, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a628:	b292      	uxth	r2, r2
 800a62a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a630:	1c9a      	adds	r2, r3, #2
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	3b01      	subs	r3, #1
 800a640:	b29a      	uxth	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a648:	2301      	movs	r3, #1
 800a64a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a64c:	f7fb f8a2 	bl	8005794 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a658:	429a      	cmp	r2, r3
 800a65a:	d807      	bhi.n	800a66c <HAL_SPI_TransmitReceive+0x212>
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d003      	beq.n	800a66c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a66a:	e0fb      	b.n	800a864 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a670:	b29b      	uxth	r3, r3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1a3      	bne.n	800a5be <HAL_SPI_TransmitReceive+0x164>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d19d      	bne.n	800a5be <HAL_SPI_TransmitReceive+0x164>
 800a682:	e0df      	b.n	800a844 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <HAL_SPI_TransmitReceive+0x23a>
 800a68c:	8a7b      	ldrh	r3, [r7, #18]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	f040 80cb 	bne.w	800a82a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a698:	b29b      	uxth	r3, r3
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d912      	bls.n	800a6c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a2:	881a      	ldrh	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	1c9a      	adds	r2, r3, #2
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b02      	subs	r3, #2
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6c2:	e0b2      	b.n	800a82a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	330c      	adds	r3, #12
 800a6ce:	7812      	ldrb	r2, [r2, #0]
 800a6d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6ea:	e09e      	b.n	800a82a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f003 0302 	and.w	r3, r3, #2
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d134      	bne.n	800a764 <HAL_SPI_TransmitReceive+0x30a>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d02f      	beq.n	800a764 <HAL_SPI_TransmitReceive+0x30a>
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	2b01      	cmp	r3, #1
 800a708:	d12c      	bne.n	800a764 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a70e:	b29b      	uxth	r3, r3
 800a710:	2b01      	cmp	r3, #1
 800a712:	d912      	bls.n	800a73a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a718:	881a      	ldrh	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a724:	1c9a      	adds	r2, r3, #2
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a72e:	b29b      	uxth	r3, r3
 800a730:	3b02      	subs	r3, #2
 800a732:	b29a      	uxth	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a738:	e012      	b.n	800a760 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	330c      	adds	r3, #12
 800a744:	7812      	ldrb	r2, [r2, #0]
 800a746:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	1c5a      	adds	r2, r3, #1
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a756:	b29b      	uxth	r3, r3
 800a758:	3b01      	subs	r3, #1
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d148      	bne.n	800a804 <HAL_SPI_TransmitReceive+0x3aa>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a778:	b29b      	uxth	r3, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d042      	beq.n	800a804 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a784:	b29b      	uxth	r3, r3
 800a786:	2b01      	cmp	r3, #1
 800a788:	d923      	bls.n	800a7d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a794:	b292      	uxth	r2, r2
 800a796:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	1c9a      	adds	r2, r3, #2
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	3b02      	subs	r3, #2
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d81f      	bhi.n	800a800 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a7ce:	605a      	str	r2, [r3, #4]
 800a7d0:	e016      	b.n	800a800 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f103 020c 	add.w	r2, r3, #12
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7de:	7812      	ldrb	r2, [r2, #0]
 800a7e0:	b2d2      	uxtb	r2, r2
 800a7e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e8:	1c5a      	adds	r2, r3, #1
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a800:	2301      	movs	r3, #1
 800a802:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a804:	f7fa ffc6 	bl	8005794 <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a810:	429a      	cmp	r2, r3
 800a812:	d803      	bhi.n	800a81c <HAL_SPI_TransmitReceive+0x3c2>
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81a:	d102      	bne.n	800a822 <HAL_SPI_TransmitReceive+0x3c8>
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d103      	bne.n	800a82a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a822:	2303      	movs	r3, #3
 800a824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a828:	e01c      	b.n	800a864 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a82e:	b29b      	uxth	r3, r3
 800a830:	2b00      	cmp	r3, #0
 800a832:	f47f af5b 	bne.w	800a6ec <HAL_SPI_TransmitReceive+0x292>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f47f af54 	bne.w	800a6ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a844:	69fa      	ldr	r2, [r7, #28]
 800a846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f000 fe45 	bl	800b4d8 <SPI_EndRxTxTransaction>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d006      	beq.n	800a862 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2220      	movs	r2, #32
 800a85e:	661a      	str	r2, [r3, #96]	; 0x60
 800a860:	e000      	b.n	800a864 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a862:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3728      	adds	r7, #40	; 0x28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	4613      	mov	r3, r2
 800a88c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d101      	bne.n	800a8a0 <HAL_SPI_Transmit_IT+0x20>
 800a89c:	2302      	movs	r3, #2
 800a89e:	e072      	b.n	800a986 <HAL_SPI_Transmit_IT+0x106>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d002      	beq.n	800a8b4 <HAL_SPI_Transmit_IT+0x34>
 800a8ae:	88fb      	ldrh	r3, [r7, #6]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d102      	bne.n	800a8ba <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a8b8:	e060      	b.n	800a97c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d002      	beq.n	800a8cc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a8ca:	e057      	b.n	800a97c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	88fa      	ldrh	r2, [r7, #6]
 800a8e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	88fa      	ldrh	r2, [r7, #6]
 800a8ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a910:	d903      	bls.n	800a91a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4a1f      	ldr	r2, [pc, #124]	; (800a994 <HAL_SPI_Transmit_IT+0x114>)
 800a916:	651a      	str	r2, [r3, #80]	; 0x50
 800a918:	e002      	b.n	800a920 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4a1e      	ldr	r2, [pc, #120]	; (800a998 <HAL_SPI_Transmit_IT+0x118>)
 800a91e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a928:	d10f      	bne.n	800a94a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a938:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a948:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	685a      	ldr	r2, [r3, #4]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800a958:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d008      	beq.n	800a97a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	e000      	b.n	800a97c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800a97a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a984:	7dfb      	ldrb	r3, [r7, #23]
}
 800a986:	4618      	mov	r0, r3
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	0800b1a7 	.word	0x0800b1a7
 800a998:	0800b161 	.word	0x0800b161

0800a99c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d110      	bne.n	800a9d8 <HAL_SPI_Receive_IT+0x3c>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9be:	d10b      	bne.n	800a9d8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2204      	movs	r2, #4
 800a9c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a9c8:	88fb      	ldrh	r3, [r7, #6]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f000 f894 	bl	800aafc <HAL_SPI_TransmitReceive_IT>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	e089      	b.n	800aaec <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d101      	bne.n	800a9e6 <HAL_SPI_Receive_IT+0x4a>
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	e082      	b.n	800aaec <HAL_SPI_Receive_IT+0x150>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d002      	beq.n	800aa00 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a9fe:	e070      	b.n	800aae2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d002      	beq.n	800aa0c <HAL_SPI_Receive_IT+0x70>
 800aa06:	88fb      	ldrh	r3, [r7, #6]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d102      	bne.n	800aa12 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aa10:	e067      	b.n	800aae2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2204      	movs	r2, #4
 800aa16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	88fa      	ldrh	r2, [r7, #6]
 800aa2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	88fa      	ldrh	r2, [r7, #6]
 800aa32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa56:	d90b      	bls.n	800aa70 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa66:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4a22      	ldr	r2, [pc, #136]	; (800aaf4 <HAL_SPI_Receive_IT+0x158>)
 800aa6c:	64da      	str	r2, [r3, #76]	; 0x4c
 800aa6e:	e00a      	b.n	800aa86 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa7e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4a1d      	ldr	r2, [pc, #116]	; (800aaf8 <HAL_SPI_Receive_IT+0x15c>)
 800aa84:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa8e:	d10f      	bne.n	800aab0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aaae:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800aabe:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaca:	2b40      	cmp	r3, #64	; 0x40
 800aacc:	d008      	beq.n	800aae0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	e000      	b.n	800aae2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 800aae0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3718      	adds	r7, #24
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	0800b115 	.word	0x0800b115
 800aaf8:	0800b0c5 	.word	0x0800b0c5

0800aafc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d101      	bne.n	800ab1c <HAL_SPI_TransmitReceive_IT+0x20>
 800ab18:	2302      	movs	r3, #2
 800ab1a:	e091      	b.n	800ac40 <HAL_SPI_TransmitReceive_IT+0x144>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab2a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ab32:	7dbb      	ldrb	r3, [r7, #22]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d00d      	beq.n	800ab54 <HAL_SPI_TransmitReceive_IT+0x58>
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab3e:	d106      	bne.n	800ab4e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d102      	bne.n	800ab4e <HAL_SPI_TransmitReceive_IT+0x52>
 800ab48:	7dbb      	ldrb	r3, [r7, #22]
 800ab4a:	2b04      	cmp	r3, #4
 800ab4c:	d002      	beq.n	800ab54 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800ab4e:	2302      	movs	r3, #2
 800ab50:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab52:	e070      	b.n	800ac36 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d005      	beq.n	800ab66 <HAL_SPI_TransmitReceive_IT+0x6a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <HAL_SPI_TransmitReceive_IT+0x6a>
 800ab60:	887b      	ldrh	r3, [r7, #2]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab6a:	e064      	b.n	800ac36 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b04      	cmp	r3, #4
 800ab76:	d003      	beq.n	800ab80 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2205      	movs	r2, #5
 800ab7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	887a      	ldrh	r2, [r7, #2]
 800ab90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	887a      	ldrh	r2, [r7, #2]
 800ab96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	887a      	ldrh	r2, [r7, #2]
 800aba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	887a      	ldrh	r2, [r7, #2]
 800abaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800abb6:	d906      	bls.n	800abc6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4a24      	ldr	r2, [pc, #144]	; (800ac4c <HAL_SPI_TransmitReceive_IT+0x150>)
 800abbc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4a23      	ldr	r2, [pc, #140]	; (800ac50 <HAL_SPI_TransmitReceive_IT+0x154>)
 800abc2:	651a      	str	r2, [r3, #80]	; 0x50
 800abc4:	e005      	b.n	800abd2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	4a22      	ldr	r2, [pc, #136]	; (800ac54 <HAL_SPI_TransmitReceive_IT+0x158>)
 800abca:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4a22      	ldr	r2, [pc, #136]	; (800ac58 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800abd0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800abda:	d802      	bhi.n	800abe2 <HAL_SPI_TransmitReceive_IT+0xe6>
 800abdc:	887b      	ldrh	r3, [r7, #2]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d908      	bls.n	800abf4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	685a      	ldr	r2, [r3, #4]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800abf0:	605a      	str	r2, [r3, #4]
 800abf2:	e007      	b.n	800ac04 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac02:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800ac12:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1e:	2b40      	cmp	r3, #64	; 0x40
 800ac20:	d008      	beq.n	800ac34 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	e000      	b.n	800ac36 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800ac34:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	371c      	adds	r7, #28
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	0800afff 	.word	0x0800afff
 800ac50:	0800b065 	.word	0x0800b065
 800ac54:	0800aeaf 	.word	0x0800aeaf
 800ac58:	0800af6d 	.word	0x0800af6d

0800ac5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	099b      	lsrs	r3, r3, #6
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10f      	bne.n	800aca0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	099b      	lsrs	r3, r3, #6
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d004      	beq.n	800aca0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	4798      	blx	r3
    return;
 800ac9e:	e0d7      	b.n	800ae50 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	085b      	lsrs	r3, r3, #1
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00a      	beq.n	800acc2 <HAL_SPI_IRQHandler+0x66>
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	09db      	lsrs	r3, r3, #7
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
    return;
 800acc0:	e0c6      	b.n	800ae50 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	095b      	lsrs	r3, r3, #5
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10c      	bne.n	800ace8 <HAL_SPI_IRQHandler+0x8c>
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	099b      	lsrs	r3, r3, #6
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d106      	bne.n	800ace8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	0a1b      	lsrs	r3, r3, #8
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 80b4 	beq.w	800ae50 <HAL_SPI_IRQHandler+0x1f4>
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	095b      	lsrs	r3, r3, #5
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 80ad 	beq.w	800ae50 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	099b      	lsrs	r3, r3, #6
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d023      	beq.n	800ad4a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d011      	beq.n	800ad32 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad12:	f043 0204 	orr.w	r2, r3, #4
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	617b      	str	r3, [r7, #20]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	617b      	str	r3, [r7, #20]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	617b      	str	r3, [r7, #20]
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	e00b      	b.n	800ad4a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad32:	2300      	movs	r3, #0
 800ad34:	613b      	str	r3, [r7, #16]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	613b      	str	r3, [r7, #16]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	613b      	str	r3, [r7, #16]
 800ad46:	693b      	ldr	r3, [r7, #16]
        return;
 800ad48:	e082      	b.n	800ae50 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	095b      	lsrs	r3, r3, #5
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d014      	beq.n	800ad80 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad5a:	f043 0201 	orr.w	r2, r3, #1
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	0a1b      	lsrs	r3, r3, #8
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00c      	beq.n	800ada6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad90:	f043 0208 	orr.w	r2, r3, #8
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60bb      	str	r3, [r7, #8]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	60bb      	str	r3, [r7, #8]
 800ada4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d04f      	beq.n	800ae4e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800adbc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	f003 0302 	and.w	r3, r3, #2
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d104      	bne.n	800adda <HAL_SPI_IRQHandler+0x17e>
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d034      	beq.n	800ae44 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f022 0203 	bic.w	r2, r2, #3
 800ade8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d011      	beq.n	800ae16 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf6:	4a18      	ldr	r2, [pc, #96]	; (800ae58 <HAL_SPI_IRQHandler+0x1fc>)
 800adf8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fb fe30 	bl	8006a64 <HAL_DMA_Abort_IT>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d005      	beq.n	800ae16 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d016      	beq.n	800ae4c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae22:	4a0d      	ldr	r2, [pc, #52]	; (800ae58 <HAL_SPI_IRQHandler+0x1fc>)
 800ae24:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fb fe1a 	bl	8006a64 <HAL_DMA_Abort_IT>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ae42:	e003      	b.n	800ae4c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f813 	bl	800ae70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ae4a:	e000      	b.n	800ae4e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ae4c:	bf00      	nop
    return;
 800ae4e:	bf00      	nop
  }
}
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	0800ae85 	.word	0x0800ae85

0800ae5c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f7ff ffe5 	bl	800ae70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aea6:	bf00      	nop
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d923      	bls.n	800af0a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68da      	ldr	r2, [r3, #12]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aecc:	b292      	uxth	r2, r2
 800aece:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed4:	1c9a      	adds	r2, r3, #2
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	3b02      	subs	r3, #2
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d11f      	bne.n	800af38 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800af06:	605a      	str	r2, [r3, #4]
 800af08:	e016      	b.n	800af38 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f103 020c 	add.w	r2, r3, #12
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	7812      	ldrb	r2, [r2, #0]
 800af18:	b2d2      	uxtb	r2, r2
 800af1a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af20:	1c5a      	adds	r2, r3, #1
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	3b01      	subs	r3, #1
 800af30:	b29a      	uxth	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af3e:	b29b      	uxth	r3, r3
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10f      	bne.n	800af64 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800af52:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af58:	b29b      	uxth	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d102      	bne.n	800af64 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fb00 	bl	800b564 <SPI_CloseRxTx_ISR>
    }
  }
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af78:	b29b      	uxth	r3, r3
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d912      	bls.n	800afa4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af82:	881a      	ldrh	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	1c9a      	adds	r2, r3, #2
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af98:	b29b      	uxth	r3, r3
 800af9a:	3b02      	subs	r3, #2
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800afa2:	e012      	b.n	800afca <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	330c      	adds	r3, #12
 800afae:	7812      	ldrb	r2, [r2, #0]
 800afb0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	3b01      	subs	r3, #1
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afce:	b29b      	uxth	r3, r3
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d110      	bne.n	800aff6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afe2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800afea:	b29b      	uxth	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d102      	bne.n	800aff6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fab7 	bl	800b564 <SPI_CloseRxTx_ISR>
    }
  }
}
 800aff6:	bf00      	nop
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68da      	ldr	r2, [r3, #12]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b010:	b292      	uxth	r2, r2
 800b012:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	1c9a      	adds	r2, r3, #2
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b024:	b29b      	uxth	r3, r3
 800b026:	3b01      	subs	r3, #1
 800b028:	b29a      	uxth	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b036:	b29b      	uxth	r3, r3
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10f      	bne.n	800b05c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b04a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b050:	b29b      	uxth	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	d102      	bne.n	800b05c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fa84 	bl	800b564 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b070:	881a      	ldrh	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07c:	1c9a      	adds	r2, r3, #2
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b086:	b29b      	uxth	r3, r3
 800b088:	3b01      	subs	r3, #1
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b094:	b29b      	uxth	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	d110      	bne.n	800b0bc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0a8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d102      	bne.n	800b0bc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fa54 	bl	800b564 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b0bc:	bf00      	nop
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f103 020c 	add.w	r2, r3, #12
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d8:	7812      	ldrb	r2, [r2, #0]
 800b0da:	b2d2      	uxtb	r2, r2
 800b0dc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b100:	b29b      	uxth	r3, r3
 800b102:	2b00      	cmp	r3, #0
 800b104:	d102      	bne.n	800b10c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fa6e 	bl	800b5e8 <SPI_CloseRx_ISR>
  }
}
 800b10c:	bf00      	nop
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68da      	ldr	r2, [r3, #12]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b126:	b292      	uxth	r2, r2
 800b128:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	1c9a      	adds	r2, r3, #2
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	3b01      	subs	r3, #1
 800b13e:	b29a      	uxth	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa48 	bl	800b5e8 <SPI_CloseRx_ISR>
  }
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	330c      	adds	r3, #12
 800b172:	7812      	ldrb	r2, [r2, #0]
 800b174:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17a:	1c5a      	adds	r2, r3, #1
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b184:	b29b      	uxth	r3, r3
 800b186:	3b01      	subs	r3, #1
 800b188:	b29a      	uxth	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b192:	b29b      	uxth	r3, r3
 800b194:	2b00      	cmp	r3, #0
 800b196:	d102      	bne.n	800b19e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fa55 	bl	800b648 <SPI_CloseTx_ISR>
  }
}
 800b19e:	bf00      	nop
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b2:	881a      	ldrh	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1be:	1c9a      	adds	r2, r3, #2
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d102      	bne.n	800b1e2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fa33 	bl	800b648 <SPI_CloseTx_ISR>
  }
}
 800b1e2:	bf00      	nop
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	603b      	str	r3, [r7, #0]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b1fc:	f7fa faca 	bl	8005794 <HAL_GetTick>
 800b200:	4602      	mov	r2, r0
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	1a9b      	subs	r3, r3, r2
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	4413      	add	r3, r2
 800b20a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b20c:	f7fa fac2 	bl	8005794 <HAL_GetTick>
 800b210:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b212:	4b39      	ldr	r3, [pc, #228]	; (800b2f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	015b      	lsls	r3, r3, #5
 800b218:	0d1b      	lsrs	r3, r3, #20
 800b21a:	69fa      	ldr	r2, [r7, #28]
 800b21c:	fb02 f303 	mul.w	r3, r2, r3
 800b220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b222:	e054      	b.n	800b2ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22a:	d050      	beq.n	800b2ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b22c:	f7fa fab2 	bl	8005794 <HAL_GetTick>
 800b230:	4602      	mov	r2, r0
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	69fa      	ldr	r2, [r7, #28]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d902      	bls.n	800b242 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d13d      	bne.n	800b2be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b250:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b25a:	d111      	bne.n	800b280 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b264:	d004      	beq.n	800b270 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b26e:	d107      	bne.n	800b280 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b27e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b288:	d10f      	bne.n	800b2aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e017      	b.n	800b2ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	689a      	ldr	r2, [r3, #8]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	4013      	ands	r3, r2
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	bf0c      	ite	eq
 800b2de:	2301      	moveq	r3, #1
 800b2e0:	2300      	movne	r3, #0
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	79fb      	ldrb	r3, [r7, #7]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d19b      	bne.n	800b224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	20000000 	.word	0x20000000

0800b2fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	; 0x28
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b30e:	f7fa fa41 	bl	8005794 <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b316:	1a9b      	subs	r3, r3, r2
 800b318:	683a      	ldr	r2, [r7, #0]
 800b31a:	4413      	add	r3, r2
 800b31c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b31e:	f7fa fa39 	bl	8005794 <HAL_GetTick>
 800b322:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	330c      	adds	r3, #12
 800b32a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b32c:	4b3d      	ldr	r3, [pc, #244]	; (800b424 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	4613      	mov	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	00da      	lsls	r2, r3, #3
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	0d1b      	lsrs	r3, r3, #20
 800b33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b33e:	fb02 f303 	mul.w	r3, r2, r3
 800b342:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b344:	e060      	b.n	800b408 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b34c:	d107      	bne.n	800b35e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d104      	bne.n	800b35e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b364:	d050      	beq.n	800b408 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b366:	f7fa fa15 	bl	8005794 <HAL_GetTick>
 800b36a:	4602      	mov	r2, r0
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b372:	429a      	cmp	r2, r3
 800b374:	d902      	bls.n	800b37c <SPI_WaitFifoStateUntilTimeout+0x80>
 800b376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d13d      	bne.n	800b3f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b38a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b394:	d111      	bne.n	800b3ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b39e:	d004      	beq.n	800b3aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3a8:	d107      	bne.n	800b3ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c2:	d10f      	bne.n	800b3e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e010      	b.n	800b41a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	3b01      	subs	r3, #1
 800b406:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689a      	ldr	r2, [r3, #8]
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	4013      	ands	r3, r2
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	429a      	cmp	r2, r3
 800b416:	d196      	bne.n	800b346 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3728      	adds	r7, #40	; 0x28
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	20000000 	.word	0x20000000

0800b428 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b43c:	d111      	bne.n	800b462 <SPI_EndRxTransaction+0x3a>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b446:	d004      	beq.n	800b452 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b450:	d107      	bne.n	800b462 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b460:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2200      	movs	r2, #0
 800b46a:	2180      	movs	r1, #128	; 0x80
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7ff febd 	bl	800b1ec <SPI_WaitFlagStateUntilTimeout>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d007      	beq.n	800b488 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b47c:	f043 0220 	orr.w	r2, r3, #32
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e023      	b.n	800b4d0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b490:	d11d      	bne.n	800b4ce <SPI_EndRxTransaction+0xa6>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b49a:	d004      	beq.n	800b4a6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4a4:	d113      	bne.n	800b4ce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f7ff ff22 	bl	800b2fc <SPI_WaitFifoStateUntilTimeout>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d007      	beq.n	800b4ce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4c2:	f043 0220 	orr.w	r2, r3, #32
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	e000      	b.n	800b4d0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af02      	add	r7, sp, #8
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f7ff ff03 	bl	800b2fc <SPI_WaitFifoStateUntilTimeout>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d007      	beq.n	800b50c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b500:	f043 0220 	orr.w	r2, r3, #32
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e027      	b.n	800b55c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2200      	movs	r2, #0
 800b514:	2180      	movs	r1, #128	; 0x80
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f7ff fe68 	bl	800b1ec <SPI_WaitFlagStateUntilTimeout>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d007      	beq.n	800b532 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b526:	f043 0220 	orr.w	r2, r3, #32
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b52e:	2303      	movs	r3, #3
 800b530:	e014      	b.n	800b55c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2200      	movs	r2, #0
 800b53a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff fedc 	bl	800b2fc <SPI_WaitFifoStateUntilTimeout>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d007      	beq.n	800b55a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b54e:	f043 0220 	orr.w	r2, r3, #32
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e000      	b.n	800b55c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b56c:	f7fa f912 	bl	8005794 <HAL_GetTick>
 800b570:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f022 0220 	bic.w	r2, r2, #32
 800b580:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	2164      	movs	r1, #100	; 0x64
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff ffa6 	bl	800b4d8 <SPI_EndRxTxTransaction>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d005      	beq.n	800b59e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b596:	f043 0220 	orr.w	r2, r3, #32
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d115      	bne.n	800b5d2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d107      	bne.n	800b5c2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7f6 feb6 	bl	800232c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b5c0:	e00e      	b.n	800b5e0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7ff fc46 	bl	800ae5c <HAL_SPI_TxRxCpltCallback>
}
 800b5d0:	e006      	b.n	800b5e0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff fc48 	bl	800ae70 <HAL_SPI_ErrorCallback>
}
 800b5e0:	bf00      	nop
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b5fe:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b600:	f7fa f8c8 	bl	8005794 <HAL_GetTick>
 800b604:	4603      	mov	r3, r0
 800b606:	461a      	mov	r2, r3
 800b608:	2164      	movs	r1, #100	; 0x64
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff ff0c 	bl	800b428 <SPI_EndRxTransaction>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d005      	beq.n	800b622 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b61a:	f043 0220 	orr.w	r2, r3, #32
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d103      	bne.n	800b63a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7f6 fe7a 	bl	800232c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b638:	e002      	b.n	800b640 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7ff fc18 	bl	800ae70 <HAL_SPI_ErrorCallback>
}
 800b640:	bf00      	nop
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b650:	f7fa f8a0 	bl	8005794 <HAL_GetTick>
 800b654:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b664:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	2164      	movs	r1, #100	; 0x64
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ff34 	bl	800b4d8 <SPI_EndRxTxTransaction>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d005      	beq.n	800b682 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b67a:	f043 0220 	orr.w	r2, r3, #32
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10a      	bne.n	800b6a0 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b68a:	2300      	movs	r3, #0
 800b68c:	60bb      	str	r3, [r7, #8]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	60bb      	str	r3, [r7, #8]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	60bb      	str	r3, [r7, #8]
 800b69e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff fbdd 	bl	800ae70 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b6b6:	e002      	b.n	800b6be <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7f6 fe4b 	bl	8002354 <HAL_SPI_TxCpltCallback>
}
 800b6be:	bf00      	nop
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e042      	b.n	800b75e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d106      	bne.n	800b6f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7f8 f926 	bl	800393c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2224      	movs	r2, #36	; 0x24
 800b6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f022 0201 	bic.w	r2, r2, #1
 800b706:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f997 	bl	800ba3c <UART_SetConfig>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b01      	cmp	r3, #1
 800b712:	d101      	bne.n	800b718 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	e022      	b.n	800b75e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fc87 	bl	800c034 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b734:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	689a      	ldr	r2, [r3, #8]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b744:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f042 0201 	orr.w	r2, r2, #1
 800b754:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fd0e 	bl	800c178 <UART_CheckIdleState>
 800b75c:	4603      	mov	r3, r0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b08a      	sub	sp, #40	; 0x28
 800b76a:	af02      	add	r7, sp, #8
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	603b      	str	r3, [r7, #0]
 800b772:	4613      	mov	r3, r2
 800b774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b77c:	2b20      	cmp	r3, #32
 800b77e:	f040 8084 	bne.w	800b88a <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <HAL_UART_Transmit+0x28>
 800b788:	88fb      	ldrh	r3, [r7, #6]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e07c      	b.n	800b88c <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d101      	bne.n	800b7a0 <HAL_UART_Transmit+0x3a>
 800b79c:	2302      	movs	r3, #2
 800b79e:	e075      	b.n	800b88c <HAL_UART_Transmit+0x126>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2221      	movs	r2, #33	; 0x21
 800b7b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b7b8:	f7f9 ffec 	bl	8005794 <HAL_GetTick>
 800b7bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	88fa      	ldrh	r2, [r7, #6]
 800b7c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	88fa      	ldrh	r2, [r7, #6]
 800b7ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d6:	d108      	bne.n	800b7ea <HAL_UART_Transmit+0x84>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d104      	bne.n	800b7ea <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	61bb      	str	r3, [r7, #24]
 800b7e8:	e003      	b.n	800b7f2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b7fa:	e02d      	b.n	800b858 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	2200      	movs	r2, #0
 800b804:	2180      	movs	r1, #128	; 0x80
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 fd01 	bl	800c20e <UART_WaitOnFlagUntilTimeout>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	e03a      	b.n	800b88c <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10b      	bne.n	800b834 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	881a      	ldrh	r2, [r3, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b828:	b292      	uxth	r2, r2
 800b82a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	3302      	adds	r3, #2
 800b830:	61bb      	str	r3, [r7, #24]
 800b832:	e008      	b.n	800b846 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	781a      	ldrb	r2, [r3, #0]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	b292      	uxth	r2, r2
 800b83e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	3301      	adds	r3, #1
 800b844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	3b01      	subs	r3, #1
 800b850:	b29a      	uxth	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b85e:	b29b      	uxth	r3, r3
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1cb      	bne.n	800b7fc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2200      	movs	r2, #0
 800b86c:	2140      	movs	r1, #64	; 0x40
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 fccd 	bl	800c20e <UART_WaitOnFlagUntilTimeout>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800b87a:	2303      	movs	r3, #3
 800b87c:	e006      	b.n	800b88c <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2220      	movs	r2, #32
 800b882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	e000      	b.n	800b88c <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b88a:	2302      	movs	r3, #2
  }
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3720      	adds	r7, #32
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08a      	sub	sp, #40	; 0x28
 800b898:	af02      	add	r7, sp, #8
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8aa:	2b20      	cmp	r3, #32
 800b8ac:	f040 80c1 	bne.w	800ba32 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <HAL_UART_Receive+0x28>
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e0b9      	b.n	800ba34 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d101      	bne.n	800b8ce <HAL_UART_Receive+0x3a>
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	e0b2      	b.n	800ba34 <HAL_UART_Receive+0x1a0>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2222      	movs	r2, #34	; 0x22
 800b8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8ec:	f7f9 ff52 	bl	8005794 <HAL_GetTick>
 800b8f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	88fa      	ldrh	r2, [r7, #6]
 800b8f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	88fa      	ldrh	r2, [r7, #6]
 800b8fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b90a:	d10e      	bne.n	800b92a <HAL_UART_Receive+0x96>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d105      	bne.n	800b920 <HAL_UART_Receive+0x8c>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b91a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b91e:	e02d      	b.n	800b97c <HAL_UART_Receive+0xe8>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	22ff      	movs	r2, #255	; 0xff
 800b924:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b928:	e028      	b.n	800b97c <HAL_UART_Receive+0xe8>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10d      	bne.n	800b94e <HAL_UART_Receive+0xba>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d104      	bne.n	800b944 <HAL_UART_Receive+0xb0>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	22ff      	movs	r2, #255	; 0xff
 800b93e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b942:	e01b      	b.n	800b97c <HAL_UART_Receive+0xe8>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	227f      	movs	r2, #127	; 0x7f
 800b948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b94c:	e016      	b.n	800b97c <HAL_UART_Receive+0xe8>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b956:	d10d      	bne.n	800b974 <HAL_UART_Receive+0xe0>
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d104      	bne.n	800b96a <HAL_UART_Receive+0xd6>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	227f      	movs	r2, #127	; 0x7f
 800b964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b968:	e008      	b.n	800b97c <HAL_UART_Receive+0xe8>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	223f      	movs	r2, #63	; 0x3f
 800b96e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b972:	e003      	b.n	800b97c <HAL_UART_Receive+0xe8>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b982:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b98c:	d108      	bne.n	800b9a0 <HAL_UART_Receive+0x10c>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d104      	bne.n	800b9a0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800b996:	2300      	movs	r3, #0
 800b998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	61bb      	str	r3, [r7, #24]
 800b99e:	e003      	b.n	800b9a8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b9b0:	e033      	b.n	800ba1a <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	2120      	movs	r1, #32
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 fc26 	bl	800c20e <UART_WaitOnFlagUntilTimeout>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e033      	b.n	800ba34 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10c      	bne.n	800b9ec <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	8a7b      	ldrh	r3, [r7, #18]
 800b9dc:	4013      	ands	r3, r2
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	3302      	adds	r3, #2
 800b9e8:	61bb      	str	r3, [r7, #24]
 800b9ea:	e00d      	b.n	800ba08 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	8a7b      	ldrh	r3, [r7, #18]
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	3301      	adds	r3, #1
 800ba06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	3b01      	subs	r3, #1
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1c5      	bne.n	800b9b2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2220      	movs	r2, #32
 800ba2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	e000      	b.n	800ba34 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800ba32:	2302      	movs	r3, #2
  }
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3720      	adds	r7, #32
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba40:	b08c      	sub	sp, #48	; 0x30
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	689a      	ldr	r2, [r3, #8]
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	431a      	orrs	r2, r3
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	69db      	ldr	r3, [r3, #28]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	4baa      	ldr	r3, [pc, #680]	; (800bd14 <UART_SetConfig+0x2d8>)
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	6812      	ldr	r2, [r2, #0]
 800ba72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba74:	430b      	orrs	r3, r1
 800ba76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	68da      	ldr	r2, [r3, #12]
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a9f      	ldr	r2, [pc, #636]	; (800bd18 <UART_SetConfig+0x2dc>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d004      	beq.n	800baa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baa4:	4313      	orrs	r3, r2
 800baa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bab2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800babc:	430b      	orrs	r3, r1
 800babe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac6:	f023 010f 	bic.w	r1, r3, #15
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a90      	ldr	r2, [pc, #576]	; (800bd1c <UART_SetConfig+0x2e0>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d125      	bne.n	800bb2c <UART_SetConfig+0xf0>
 800bae0:	4b8f      	ldr	r3, [pc, #572]	; (800bd20 <UART_SetConfig+0x2e4>)
 800bae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae6:	f003 0303 	and.w	r3, r3, #3
 800baea:	2b03      	cmp	r3, #3
 800baec:	d81a      	bhi.n	800bb24 <UART_SetConfig+0xe8>
 800baee:	a201      	add	r2, pc, #4	; (adr r2, 800baf4 <UART_SetConfig+0xb8>)
 800baf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf4:	0800bb05 	.word	0x0800bb05
 800baf8:	0800bb15 	.word	0x0800bb15
 800bafc:	0800bb0d 	.word	0x0800bb0d
 800bb00:	0800bb1d 	.word	0x0800bb1d
 800bb04:	2301      	movs	r3, #1
 800bb06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb0a:	e116      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb12:	e112      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bb14:	2304      	movs	r3, #4
 800bb16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb1a:	e10e      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb22:	e10a      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bb24:	2310      	movs	r3, #16
 800bb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb2a:	e106      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a7c      	ldr	r2, [pc, #496]	; (800bd24 <UART_SetConfig+0x2e8>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d138      	bne.n	800bba8 <UART_SetConfig+0x16c>
 800bb36:	4b7a      	ldr	r3, [pc, #488]	; (800bd20 <UART_SetConfig+0x2e4>)
 800bb38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb3c:	f003 030c 	and.w	r3, r3, #12
 800bb40:	2b0c      	cmp	r3, #12
 800bb42:	d82d      	bhi.n	800bba0 <UART_SetConfig+0x164>
 800bb44:	a201      	add	r2, pc, #4	; (adr r2, 800bb4c <UART_SetConfig+0x110>)
 800bb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4a:	bf00      	nop
 800bb4c:	0800bb81 	.word	0x0800bb81
 800bb50:	0800bba1 	.word	0x0800bba1
 800bb54:	0800bba1 	.word	0x0800bba1
 800bb58:	0800bba1 	.word	0x0800bba1
 800bb5c:	0800bb91 	.word	0x0800bb91
 800bb60:	0800bba1 	.word	0x0800bba1
 800bb64:	0800bba1 	.word	0x0800bba1
 800bb68:	0800bba1 	.word	0x0800bba1
 800bb6c:	0800bb89 	.word	0x0800bb89
 800bb70:	0800bba1 	.word	0x0800bba1
 800bb74:	0800bba1 	.word	0x0800bba1
 800bb78:	0800bba1 	.word	0x0800bba1
 800bb7c:	0800bb99 	.word	0x0800bb99
 800bb80:	2300      	movs	r3, #0
 800bb82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb86:	e0d8      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb8e:	e0d4      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bb90:	2304      	movs	r3, #4
 800bb92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb96:	e0d0      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bb98:	2308      	movs	r3, #8
 800bb9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb9e:	e0cc      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bba0:	2310      	movs	r3, #16
 800bba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bba6:	e0c8      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a5e      	ldr	r2, [pc, #376]	; (800bd28 <UART_SetConfig+0x2ec>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d125      	bne.n	800bbfe <UART_SetConfig+0x1c2>
 800bbb2:	4b5b      	ldr	r3, [pc, #364]	; (800bd20 <UART_SetConfig+0x2e4>)
 800bbb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bbbc:	2b30      	cmp	r3, #48	; 0x30
 800bbbe:	d016      	beq.n	800bbee <UART_SetConfig+0x1b2>
 800bbc0:	2b30      	cmp	r3, #48	; 0x30
 800bbc2:	d818      	bhi.n	800bbf6 <UART_SetConfig+0x1ba>
 800bbc4:	2b20      	cmp	r3, #32
 800bbc6:	d00a      	beq.n	800bbde <UART_SetConfig+0x1a2>
 800bbc8:	2b20      	cmp	r3, #32
 800bbca:	d814      	bhi.n	800bbf6 <UART_SetConfig+0x1ba>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <UART_SetConfig+0x19a>
 800bbd0:	2b10      	cmp	r3, #16
 800bbd2:	d008      	beq.n	800bbe6 <UART_SetConfig+0x1aa>
 800bbd4:	e00f      	b.n	800bbf6 <UART_SetConfig+0x1ba>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbdc:	e0ad      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bbde:	2302      	movs	r3, #2
 800bbe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbe4:	e0a9      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bbe6:	2304      	movs	r3, #4
 800bbe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbec:	e0a5      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bbee:	2308      	movs	r3, #8
 800bbf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbf4:	e0a1      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bbf6:	2310      	movs	r3, #16
 800bbf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbfc:	e09d      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a4a      	ldr	r2, [pc, #296]	; (800bd2c <UART_SetConfig+0x2f0>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d125      	bne.n	800bc54 <UART_SetConfig+0x218>
 800bc08:	4b45      	ldr	r3, [pc, #276]	; (800bd20 <UART_SetConfig+0x2e4>)
 800bc0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc12:	2bc0      	cmp	r3, #192	; 0xc0
 800bc14:	d016      	beq.n	800bc44 <UART_SetConfig+0x208>
 800bc16:	2bc0      	cmp	r3, #192	; 0xc0
 800bc18:	d818      	bhi.n	800bc4c <UART_SetConfig+0x210>
 800bc1a:	2b80      	cmp	r3, #128	; 0x80
 800bc1c:	d00a      	beq.n	800bc34 <UART_SetConfig+0x1f8>
 800bc1e:	2b80      	cmp	r3, #128	; 0x80
 800bc20:	d814      	bhi.n	800bc4c <UART_SetConfig+0x210>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <UART_SetConfig+0x1f0>
 800bc26:	2b40      	cmp	r3, #64	; 0x40
 800bc28:	d008      	beq.n	800bc3c <UART_SetConfig+0x200>
 800bc2a:	e00f      	b.n	800bc4c <UART_SetConfig+0x210>
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc32:	e082      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bc34:	2302      	movs	r3, #2
 800bc36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc3a:	e07e      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bc3c:	2304      	movs	r3, #4
 800bc3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc42:	e07a      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bc44:	2308      	movs	r3, #8
 800bc46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc4a:	e076      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bc4c:	2310      	movs	r3, #16
 800bc4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc52:	e072      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a35      	ldr	r2, [pc, #212]	; (800bd30 <UART_SetConfig+0x2f4>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d12a      	bne.n	800bcb4 <UART_SetConfig+0x278>
 800bc5e:	4b30      	ldr	r3, [pc, #192]	; (800bd20 <UART_SetConfig+0x2e4>)
 800bc60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc6c:	d01a      	beq.n	800bca4 <UART_SetConfig+0x268>
 800bc6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc72:	d81b      	bhi.n	800bcac <UART_SetConfig+0x270>
 800bc74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc78:	d00c      	beq.n	800bc94 <UART_SetConfig+0x258>
 800bc7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc7e:	d815      	bhi.n	800bcac <UART_SetConfig+0x270>
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d003      	beq.n	800bc8c <UART_SetConfig+0x250>
 800bc84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc88:	d008      	beq.n	800bc9c <UART_SetConfig+0x260>
 800bc8a:	e00f      	b.n	800bcac <UART_SetConfig+0x270>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc92:	e052      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bc94:	2302      	movs	r3, #2
 800bc96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc9a:	e04e      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bc9c:	2304      	movs	r3, #4
 800bc9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bca2:	e04a      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bca4:	2308      	movs	r3, #8
 800bca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcaa:	e046      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bcac:	2310      	movs	r3, #16
 800bcae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcb2:	e042      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a17      	ldr	r2, [pc, #92]	; (800bd18 <UART_SetConfig+0x2dc>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d13a      	bne.n	800bd34 <UART_SetConfig+0x2f8>
 800bcbe:	4b18      	ldr	r3, [pc, #96]	; (800bd20 <UART_SetConfig+0x2e4>)
 800bcc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bcc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bccc:	d01a      	beq.n	800bd04 <UART_SetConfig+0x2c8>
 800bcce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bcd2:	d81b      	bhi.n	800bd0c <UART_SetConfig+0x2d0>
 800bcd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcd8:	d00c      	beq.n	800bcf4 <UART_SetConfig+0x2b8>
 800bcda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcde:	d815      	bhi.n	800bd0c <UART_SetConfig+0x2d0>
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d003      	beq.n	800bcec <UART_SetConfig+0x2b0>
 800bce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bce8:	d008      	beq.n	800bcfc <UART_SetConfig+0x2c0>
 800bcea:	e00f      	b.n	800bd0c <UART_SetConfig+0x2d0>
 800bcec:	2300      	movs	r3, #0
 800bcee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcf2:	e022      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcfa:	e01e      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bcfc:	2304      	movs	r3, #4
 800bcfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd02:	e01a      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bd04:	2308      	movs	r3, #8
 800bd06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd0a:	e016      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bd0c:	2310      	movs	r3, #16
 800bd0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd12:	e012      	b.n	800bd3a <UART_SetConfig+0x2fe>
 800bd14:	cfff69f3 	.word	0xcfff69f3
 800bd18:	40008000 	.word	0x40008000
 800bd1c:	40013800 	.word	0x40013800
 800bd20:	40021000 	.word	0x40021000
 800bd24:	40004400 	.word	0x40004400
 800bd28:	40004800 	.word	0x40004800
 800bd2c:	40004c00 	.word	0x40004c00
 800bd30:	40005000 	.word	0x40005000
 800bd34:	2310      	movs	r3, #16
 800bd36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4aae      	ldr	r2, [pc, #696]	; (800bff8 <UART_SetConfig+0x5bc>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	f040 8097 	bne.w	800be74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd4a:	2b08      	cmp	r3, #8
 800bd4c:	d823      	bhi.n	800bd96 <UART_SetConfig+0x35a>
 800bd4e:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <UART_SetConfig+0x318>)
 800bd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd54:	0800bd79 	.word	0x0800bd79
 800bd58:	0800bd97 	.word	0x0800bd97
 800bd5c:	0800bd81 	.word	0x0800bd81
 800bd60:	0800bd97 	.word	0x0800bd97
 800bd64:	0800bd87 	.word	0x0800bd87
 800bd68:	0800bd97 	.word	0x0800bd97
 800bd6c:	0800bd97 	.word	0x0800bd97
 800bd70:	0800bd97 	.word	0x0800bd97
 800bd74:	0800bd8f 	.word	0x0800bd8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd78:	f7fd fb60 	bl	800943c <HAL_RCC_GetPCLK1Freq>
 800bd7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd7e:	e010      	b.n	800bda2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd80:	4b9e      	ldr	r3, [pc, #632]	; (800bffc <UART_SetConfig+0x5c0>)
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd84:	e00d      	b.n	800bda2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd86:	f7fd fac1 	bl	800930c <HAL_RCC_GetSysClockFreq>
 800bd8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd8c:	e009      	b.n	800bda2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd94:	e005      	b.n	800bda2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bd96:	2300      	movs	r3, #0
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bda0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 8130 	beq.w	800c00a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	4a94      	ldr	r2, [pc, #592]	; (800c000 <UART_SetConfig+0x5c4>)
 800bdb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdbc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	685a      	ldr	r2, [r3, #4]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	4413      	add	r3, r2
 800bdc8:	69ba      	ldr	r2, [r7, #24]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d305      	bcc.n	800bdda <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d903      	bls.n	800bde2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bde0:	e113      	b.n	800c00a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	2200      	movs	r2, #0
 800bde6:	60bb      	str	r3, [r7, #8]
 800bde8:	60fa      	str	r2, [r7, #12]
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdee:	4a84      	ldr	r2, [pc, #528]	; (800c000 <UART_SetConfig+0x5c4>)
 800bdf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	603b      	str	r3, [r7, #0]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800be04:	f7f4 ff68 	bl	8000cd8 <__aeabi_uldivmod>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4610      	mov	r0, r2
 800be0e:	4619      	mov	r1, r3
 800be10:	f04f 0200 	mov.w	r2, #0
 800be14:	f04f 0300 	mov.w	r3, #0
 800be18:	020b      	lsls	r3, r1, #8
 800be1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be1e:	0202      	lsls	r2, r0, #8
 800be20:	6979      	ldr	r1, [r7, #20]
 800be22:	6849      	ldr	r1, [r1, #4]
 800be24:	0849      	lsrs	r1, r1, #1
 800be26:	2000      	movs	r0, #0
 800be28:	460c      	mov	r4, r1
 800be2a:	4605      	mov	r5, r0
 800be2c:	eb12 0804 	adds.w	r8, r2, r4
 800be30:	eb43 0905 	adc.w	r9, r3, r5
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	469a      	mov	sl, r3
 800be3c:	4693      	mov	fp, r2
 800be3e:	4652      	mov	r2, sl
 800be40:	465b      	mov	r3, fp
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 ff47 	bl	8000cd8 <__aeabi_uldivmod>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4613      	mov	r3, r2
 800be50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be58:	d308      	bcc.n	800be6c <UART_SetConfig+0x430>
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be60:	d204      	bcs.n	800be6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6a3a      	ldr	r2, [r7, #32]
 800be68:	60da      	str	r2, [r3, #12]
 800be6a:	e0ce      	b.n	800c00a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800be72:	e0ca      	b.n	800c00a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	69db      	ldr	r3, [r3, #28]
 800be78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be7c:	d166      	bne.n	800bf4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800be7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be82:	2b08      	cmp	r3, #8
 800be84:	d827      	bhi.n	800bed6 <UART_SetConfig+0x49a>
 800be86:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <UART_SetConfig+0x450>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800beb1 	.word	0x0800beb1
 800be90:	0800beb9 	.word	0x0800beb9
 800be94:	0800bec1 	.word	0x0800bec1
 800be98:	0800bed7 	.word	0x0800bed7
 800be9c:	0800bec7 	.word	0x0800bec7
 800bea0:	0800bed7 	.word	0x0800bed7
 800bea4:	0800bed7 	.word	0x0800bed7
 800bea8:	0800bed7 	.word	0x0800bed7
 800beac:	0800becf 	.word	0x0800becf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800beb0:	f7fd fac4 	bl	800943c <HAL_RCC_GetPCLK1Freq>
 800beb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800beb6:	e014      	b.n	800bee2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800beb8:	f7fd fad6 	bl	8009468 <HAL_RCC_GetPCLK2Freq>
 800bebc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bebe:	e010      	b.n	800bee2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bec0:	4b4e      	ldr	r3, [pc, #312]	; (800bffc <UART_SetConfig+0x5c0>)
 800bec2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bec4:	e00d      	b.n	800bee2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bec6:	f7fd fa21 	bl	800930c <HAL_RCC_GetSysClockFreq>
 800beca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800becc:	e009      	b.n	800bee2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bed2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bed4:	e005      	b.n	800bee2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bed6:	2300      	movs	r3, #0
 800bed8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bee0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 8090 	beq.w	800c00a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	4a44      	ldr	r2, [pc, #272]	; (800c000 <UART_SetConfig+0x5c4>)
 800bef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bef4:	461a      	mov	r2, r3
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	fbb3 f3f2 	udiv	r3, r3, r2
 800befc:	005a      	lsls	r2, r3, #1
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	085b      	lsrs	r3, r3, #1
 800bf04:	441a      	add	r2, r3
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf0e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	2b0f      	cmp	r3, #15
 800bf14:	d916      	bls.n	800bf44 <UART_SetConfig+0x508>
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf1c:	d212      	bcs.n	800bf44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	f023 030f 	bic.w	r3, r3, #15
 800bf26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf28:	6a3b      	ldr	r3, [r7, #32]
 800bf2a:	085b      	lsrs	r3, r3, #1
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	f003 0307 	and.w	r3, r3, #7
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	8bfb      	ldrh	r3, [r7, #30]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	8bfa      	ldrh	r2, [r7, #30]
 800bf40:	60da      	str	r2, [r3, #12]
 800bf42:	e062      	b.n	800c00a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bf4a:	e05e      	b.n	800c00a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf50:	2b08      	cmp	r3, #8
 800bf52:	d828      	bhi.n	800bfa6 <UART_SetConfig+0x56a>
 800bf54:	a201      	add	r2, pc, #4	; (adr r2, 800bf5c <UART_SetConfig+0x520>)
 800bf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5a:	bf00      	nop
 800bf5c:	0800bf81 	.word	0x0800bf81
 800bf60:	0800bf89 	.word	0x0800bf89
 800bf64:	0800bf91 	.word	0x0800bf91
 800bf68:	0800bfa7 	.word	0x0800bfa7
 800bf6c:	0800bf97 	.word	0x0800bf97
 800bf70:	0800bfa7 	.word	0x0800bfa7
 800bf74:	0800bfa7 	.word	0x0800bfa7
 800bf78:	0800bfa7 	.word	0x0800bfa7
 800bf7c:	0800bf9f 	.word	0x0800bf9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf80:	f7fd fa5c 	bl	800943c <HAL_RCC_GetPCLK1Freq>
 800bf84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf86:	e014      	b.n	800bfb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf88:	f7fd fa6e 	bl	8009468 <HAL_RCC_GetPCLK2Freq>
 800bf8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf8e:	e010      	b.n	800bfb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf90:	4b1a      	ldr	r3, [pc, #104]	; (800bffc <UART_SetConfig+0x5c0>)
 800bf92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf94:	e00d      	b.n	800bfb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf96:	f7fd f9b9 	bl	800930c <HAL_RCC_GetSysClockFreq>
 800bf9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf9c:	e009      	b.n	800bfb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bfa4:	e005      	b.n	800bfb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bfb0:	bf00      	nop
    }

    if (pclk != 0U)
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d028      	beq.n	800c00a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	4a10      	ldr	r2, [pc, #64]	; (800c000 <UART_SetConfig+0x5c4>)
 800bfbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	fbb3 f2f2 	udiv	r2, r3, r2
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	085b      	lsrs	r3, r3, #1
 800bfd0:	441a      	add	r2, r3
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfda:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	2b0f      	cmp	r3, #15
 800bfe0:	d910      	bls.n	800c004 <UART_SetConfig+0x5c8>
 800bfe2:	6a3b      	ldr	r3, [r7, #32]
 800bfe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfe8:	d20c      	bcs.n	800c004 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	60da      	str	r2, [r3, #12]
 800bff4:	e009      	b.n	800c00a <UART_SetConfig+0x5ce>
 800bff6:	bf00      	nop
 800bff8:	40008000 	.word	0x40008000
 800bffc:	00f42400 	.word	0x00f42400
 800c000:	08013e98 	.word	0x08013e98
      }
      else
      {
        ret = HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	2201      	movs	r2, #1
 800c016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	2200      	movs	r2, #0
 800c01e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	2200      	movs	r2, #0
 800c024:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c026:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3730      	adds	r7, #48	; 0x30
 800c02e:	46bd      	mov	sp, r7
 800c030:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00a      	beq.n	800c05e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	430a      	orrs	r2, r1
 800c05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00a      	beq.n	800c080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	430a      	orrs	r2, r1
 800c07e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00a      	beq.n	800c0a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	430a      	orrs	r2, r1
 800c0a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a6:	f003 0308 	and.w	r3, r3, #8
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00a      	beq.n	800c0c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	430a      	orrs	r2, r1
 800c0c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c8:	f003 0310 	and.w	r3, r3, #16
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00a      	beq.n	800c0e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ea:	f003 0320 	and.w	r3, r3, #32
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00a      	beq.n	800c108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	430a      	orrs	r2, r1
 800c106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c110:	2b00      	cmp	r3, #0
 800c112:	d01a      	beq.n	800c14a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	430a      	orrs	r2, r1
 800c128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c132:	d10a      	bne.n	800c14a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	430a      	orrs	r2, r1
 800c148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00a      	beq.n	800c16c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	430a      	orrs	r2, r1
 800c16a:	605a      	str	r2, [r3, #4]
  }
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af02      	add	r7, sp, #8
 800c17e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c188:	f7f9 fb04 	bl	8005794 <HAL_GetTick>
 800c18c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 0308 	and.w	r3, r3, #8
 800c198:	2b08      	cmp	r3, #8
 800c19a:	d10e      	bne.n	800c1ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c19c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f82f 	bl	800c20e <UART_WaitOnFlagUntilTimeout>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1b6:	2303      	movs	r3, #3
 800c1b8:	e025      	b.n	800c206 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 0304 	and.w	r3, r3, #4
 800c1c4:	2b04      	cmp	r3, #4
 800c1c6:	d10e      	bne.n	800c1e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 f819 	bl	800c20e <UART_WaitOnFlagUntilTimeout>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e00f      	b.n	800c206 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2220      	movs	r2, #32
 800c1f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b09c      	sub	sp, #112	; 0x70
 800c212:	af00      	add	r7, sp, #0
 800c214:	60f8      	str	r0, [r7, #12]
 800c216:	60b9      	str	r1, [r7, #8]
 800c218:	603b      	str	r3, [r7, #0]
 800c21a:	4613      	mov	r3, r2
 800c21c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c21e:	e0a9      	b.n	800c374 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c226:	f000 80a5 	beq.w	800c374 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c22a:	f7f9 fab3 	bl	8005794 <HAL_GetTick>
 800c22e:	4602      	mov	r2, r0
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c236:	429a      	cmp	r2, r3
 800c238:	d302      	bcc.n	800c240 <UART_WaitOnFlagUntilTimeout+0x32>
 800c23a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d140      	bne.n	800c2c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c254:	667b      	str	r3, [r7, #100]	; 0x64
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c25e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c260:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c262:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c264:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c266:	e841 2300 	strex	r3, r2, [r1]
 800c26a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c26c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1e6      	bne.n	800c240 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3308      	adds	r3, #8
 800c278:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27c:	e853 3f00 	ldrex	r3, [r3]
 800c280:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c284:	f023 0301 	bic.w	r3, r3, #1
 800c288:	663b      	str	r3, [r7, #96]	; 0x60
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	3308      	adds	r3, #8
 800c290:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c292:	64ba      	str	r2, [r7, #72]	; 0x48
 800c294:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c29a:	e841 2300 	strex	r3, r2, [r1]
 800c29e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e5      	bne.n	800c272 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2220      	movs	r2, #32
 800c2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2220      	movs	r2, #32
 800c2b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	e069      	b.n	800c396 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0304 	and.w	r3, r3, #4
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d051      	beq.n	800c374 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2de:	d149      	bne.n	800c374 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	e853 3f00 	ldrex	r3, [r3]
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c2fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	461a      	mov	r2, r3
 800c306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c308:	637b      	str	r3, [r7, #52]	; 0x34
 800c30a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c30e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c310:	e841 2300 	strex	r3, r2, [r1]
 800c314:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1e6      	bne.n	800c2ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3308      	adds	r3, #8
 800c322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	e853 3f00 	ldrex	r3, [r3]
 800c32a:	613b      	str	r3, [r7, #16]
   return(result);
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	f023 0301 	bic.w	r3, r3, #1
 800c332:	66bb      	str	r3, [r7, #104]	; 0x68
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3308      	adds	r3, #8
 800c33a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c33c:	623a      	str	r2, [r7, #32]
 800c33e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c340:	69f9      	ldr	r1, [r7, #28]
 800c342:	6a3a      	ldr	r2, [r7, #32]
 800c344:	e841 2300 	strex	r3, r2, [r1]
 800c348:	61bb      	str	r3, [r7, #24]
   return(result);
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1e5      	bne.n	800c31c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2220      	movs	r2, #32
 800c354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2220      	movs	r2, #32
 800c35c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2220      	movs	r2, #32
 800c364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c370:	2303      	movs	r3, #3
 800c372:	e010      	b.n	800c396 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	69da      	ldr	r2, [r3, #28]
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	4013      	ands	r3, r2
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	429a      	cmp	r2, r3
 800c382:	bf0c      	ite	eq
 800c384:	2301      	moveq	r3, #1
 800c386:	2300      	movne	r3, #0
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	461a      	mov	r2, r3
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	429a      	cmp	r2, r3
 800c390:	f43f af46 	beq.w	800c220 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3770      	adds	r7, #112	; 0x70
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c39e:	b480      	push	{r7}
 800c3a0:	b085      	sub	sp, #20
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d101      	bne.n	800c3b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	e027      	b.n	800c404 <HAL_UARTEx_DisableFifoMode+0x66>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2224      	movs	r2, #36	; 0x24
 800c3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f022 0201 	bic.w	r2, r2, #1
 800c3da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c3e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2220      	movs	r2, #32
 800c3f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3714      	adds	r7, #20
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c420:	2b01      	cmp	r3, #1
 800c422:	d101      	bne.n	800c428 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c424:	2302      	movs	r3, #2
 800c426:	e02d      	b.n	800c484 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2224      	movs	r2, #36	; 0x24
 800c434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 0201 	bic.w	r2, r2, #1
 800c44e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	430a      	orrs	r2, r1
 800c462:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f84f 	bl	800c508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2220      	movs	r2, #32
 800c476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d101      	bne.n	800c4a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	e02d      	b.n	800c500 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2224      	movs	r2, #36	; 0x24
 800c4b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 0201 	bic.w	r2, r2, #1
 800c4ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	430a      	orrs	r2, r1
 800c4de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 f811 	bl	800c508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2220      	movs	r2, #32
 800c4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c514:	2b00      	cmp	r3, #0
 800c516:	d108      	bne.n	800c52a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c528:	e031      	b.n	800c58e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c52a:	2308      	movs	r3, #8
 800c52c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c52e:	2308      	movs	r3, #8
 800c530:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	0e5b      	lsrs	r3, r3, #25
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	f003 0307 	and.w	r3, r3, #7
 800c540:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	0f5b      	lsrs	r3, r3, #29
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	f003 0307 	and.w	r3, r3, #7
 800c550:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c552:	7bbb      	ldrb	r3, [r7, #14]
 800c554:	7b3a      	ldrb	r2, [r7, #12]
 800c556:	4911      	ldr	r1, [pc, #68]	; (800c59c <UARTEx_SetNbDataToProcess+0x94>)
 800c558:	5c8a      	ldrb	r2, [r1, r2]
 800c55a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c55e:	7b3a      	ldrb	r2, [r7, #12]
 800c560:	490f      	ldr	r1, [pc, #60]	; (800c5a0 <UARTEx_SetNbDataToProcess+0x98>)
 800c562:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c564:	fb93 f3f2 	sdiv	r3, r3, r2
 800c568:	b29a      	uxth	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c570:	7bfb      	ldrb	r3, [r7, #15]
 800c572:	7b7a      	ldrb	r2, [r7, #13]
 800c574:	4909      	ldr	r1, [pc, #36]	; (800c59c <UARTEx_SetNbDataToProcess+0x94>)
 800c576:	5c8a      	ldrb	r2, [r1, r2]
 800c578:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c57c:	7b7a      	ldrb	r2, [r7, #13]
 800c57e:	4908      	ldr	r1, [pc, #32]	; (800c5a0 <UARTEx_SetNbDataToProcess+0x98>)
 800c580:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c582:	fb93 f3f2 	sdiv	r3, r3, r2
 800c586:	b29a      	uxth	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c58e:	bf00      	nop
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	08013eb0 	.word	0x08013eb0
 800c5a0:	08013eb8 	.word	0x08013eb8

0800c5a4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	; (800c5e4 <WIFI_Init+0x40>)
 800c5b0:	9301      	str	r3, [sp, #4]
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <WIFI_Init+0x44>)
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	4b0d      	ldr	r3, [pc, #52]	; (800c5ec <WIFI_Init+0x48>)
 800c5b8:	4a0d      	ldr	r2, [pc, #52]	; (800c5f0 <WIFI_Init+0x4c>)
 800c5ba:	490e      	ldr	r1, [pc, #56]	; (800c5f4 <WIFI_Init+0x50>)
 800c5bc:	480e      	ldr	r0, [pc, #56]	; (800c5f8 <WIFI_Init+0x54>)
 800c5be:	f7f8 fa49 	bl	8004a54 <ES_WIFI_RegisterBusIO>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d107      	bne.n	800c5d8 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800c5c8:	480b      	ldr	r0, [pc, #44]	; (800c5f8 <WIFI_Init+0x54>)
 800c5ca:	f7f8 fa15 	bl	80049f8 <ES_WIFI_Init>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800c5d8:	79fb      	ldrb	r3, [r7, #7]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	080020a1 	.word	0x080020a1
 800c5e8:	08002195 	.word	0x08002195
 800c5ec:	08002271 	.word	0x08002271
 800c5f0:	08001f89 	.word	0x08001f89
 800c5f4:	08001e59 	.word	0x08001e59
 800c5f8:	20001074 	.word	0x20001074

0800c5fc <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	4613      	mov	r3, r2
 800c608:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	4809      	ldr	r0, [pc, #36]	; (800c63c <WIFI_Connect+0x40>)
 800c616:	f7f8 fa51 	bl	8004abc <ES_WIFI_Connect>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d107      	bne.n	800c630 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800c620:	4806      	ldr	r0, [pc, #24]	; (800c63c <WIFI_Connect+0x40>)
 800c622:	f7f8 faf7 	bl	8004c14 <ES_WIFI_GetNetworkSettings>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d101      	bne.n	800c630 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800c62c:	2300      	movs	r3, #0
 800c62e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800c630:	7dfb      	ldrb	r3, [r7, #23]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3718      	adds	r7, #24
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20001074 	.word	0x20001074

0800c640 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800c64c:	6879      	ldr	r1, [r7, #4]
 800c64e:	4806      	ldr	r0, [pc, #24]	; (800c668 <WIFI_GetMAC_Address+0x28>)
 800c650:	f7f8 fb0a 	bl	8004c68 <ES_WIFI_GetMACAddress>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	20001074 	.word	0x20001074

0800c66c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800c678:	4809      	ldr	r0, [pc, #36]	; (800c6a0 <WIFI_GetIP_Address+0x34>)
 800c67a:	f7f8 fa9f 	bl	8004bbc <ES_WIFI_IsConnected>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b01      	cmp	r3, #1
 800c682:	d107      	bne.n	800c694 <WIFI_GetIP_Address+0x28>
 800c684:	4b06      	ldr	r3, [pc, #24]	; (800c6a0 <WIFI_GetIP_Address+0x34>)
 800c686:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800c68a:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	20001074 	.word	0x20001074

0800c6a4 <WIFI_GetHostAddress>:
  * @param  location : Host URL
  * @param  ipaddr : array of the IP address
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetHostAddress(const char *location, uint8_t *ipaddr)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_DNS_LookUp(&EsWifiObj, location, ipaddr) == ES_WIFI_STATUS_OK)
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	6879      	ldr	r1, [r7, #4]
 800c6b6:	4806      	ldr	r0, [pc, #24]	; (800c6d0 <WIFI_GetHostAddress+0x2c>)
 800c6b8:	f7f8 fb08 	bl	8004ccc <ES_WIFI_DNS_LookUp>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d101      	bne.n	800c6c6 <WIFI_GetHostAddress+0x22>
  {
    return WIFI_STATUS_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e000      	b.n	800c6c8 <WIFI_GetHostAddress+0x24>
  }
  
  return ret;
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20001074 	.word	0x20001074

0800c6d4 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08a      	sub	sp, #40	; 0x28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	607a      	str	r2, [r7, #4]
 800c6de:	603b      	str	r3, [r7, #0]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	74bb      	strb	r3, [r7, #18]
  conn.RemotePort = port;
 800c6f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c6f2:	82bb      	strh	r3, [r7, #20]
  conn.LocalPort = local_port;
 800c6f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c6f6:	82fb      	strh	r3, [r7, #22]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800c6f8:	7afb      	ldrb	r3, [r7, #11]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	bf14      	ite	ne
 800c6fe:	2301      	movne	r3, #1
 800c700:	2300      	moveq	r3, #0
 800c702:	b2db      	uxtb	r3, r3
 800c704:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[1] = ipaddr[1];
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	785b      	ldrb	r3, [r3, #1]
 800c710:	767b      	strb	r3, [r7, #25]
  conn.RemoteIP[2] = ipaddr[2];
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	789b      	ldrb	r3, [r3, #2]
 800c716:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[3] = ipaddr[3];
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	78db      	ldrb	r3, [r3, #3]
 800c71c:	76fb      	strb	r3, [r7, #27]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800c71e:	f107 0310 	add.w	r3, r7, #16
 800c722:	4619      	mov	r1, r3
 800c724:	4807      	ldr	r0, [pc, #28]	; (800c744 <WIFI_OpenClientConnection+0x70>)
 800c726:	f7f8 fb05 	bl	8004d34 <ES_WIFI_StartClientConnection>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d102      	bne.n	800c736 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800c736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3728      	adds	r7, #40	; 0x28
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	20001074 	.word	0x20001074

0800c748 <WIFI_CloseClientConnection>:
/**
  * @brief  Close client connection
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b088      	sub	sp, #32
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	b2db      	uxtb	r3, r3
 800c758:	72bb      	strb	r3, [r7, #10]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800c75a:	f107 0308 	add.w	r3, r7, #8
 800c75e:	4619      	mov	r1, r3
 800c760:	4806      	ldr	r0, [pc, #24]	; (800c77c <WIFI_CloseClientConnection+0x34>)
 800c762:	f7f8 fbef 	bl	8004f44 <ES_WIFI_StopClientConnection>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800c770:	7ffb      	ldrb	r3, [r7, #31]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3720      	adds	r7, #32
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	20001074 	.word	0x20001074

0800c780 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af02      	add	r7, sp, #8
 800c786:	60b9      	str	r1, [r7, #8]
 800c788:	607b      	str	r3, [r7, #4]
 800c78a:	4603      	mov	r3, r0
 800c78c:	73fb      	strb	r3, [r7, #15]
 800c78e:	4613      	mov	r3, r2
 800c790:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800c796:	89ba      	ldrh	r2, [r7, #12]
 800c798:	7bf9      	ldrb	r1, [r7, #15]
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	4806      	ldr	r0, [pc, #24]	; (800c7c0 <WIFI_SendData+0x40>)
 800c7a8:	f7f8 fc06 	bl	8004fb8 <ES_WIFI_SendData>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800c7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	20001074 	.word	0x20001074

0800c7c4 <WIFI_SendDataTo>:
  * @param  ipaddr : (IN) 4-byte array containing the IP address of the remote host
  * @param  port : (IN) port number of the remote host
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendDataTo(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t port)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b08a      	sub	sp, #40	; 0x28
 800c7c8:	af04      	add	r7, sp, #16
 800c7ca:	60b9      	str	r1, [r7, #8]
 800c7cc:	607b      	str	r3, [r7, #4]
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	73fb      	strb	r3, [r7, #15]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_SendDataTo(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 800c7da:	89ba      	ldrh	r2, [r7, #12]
 800c7dc:	7bf9      	ldrb	r1, [r7, #15]
 800c7de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c7e0:	9303      	str	r3, [sp, #12]
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	9302      	str	r3, [sp, #8]
 800c7e6:	6a3b      	ldr	r3, [r7, #32]
 800c7e8:	9301      	str	r3, [sp, #4]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	4806      	ldr	r0, [pc, #24]	; (800c80c <WIFI_SendDataTo+0x48>)
 800c7f4:	f7f8 fc66 	bl	80050c4 <ES_WIFI_SendDataTo>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d101      	bne.n	800c802 <WIFI_SendDataTo+0x3e>
  {
    ret = WIFI_STATUS_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c802:	7dfb      	ldrb	r3, [r7, #23]
}
 800c804:	4618      	mov	r0, r3
 800c806:	3718      	adds	r7, #24
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	20001074 	.word	0x20001074

0800c810 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af02      	add	r7, sp, #8
 800c816:	60b9      	str	r1, [r7, #8]
 800c818:	607b      	str	r3, [r7, #4]
 800c81a:	4603      	mov	r3, r0
 800c81c:	73fb      	strb	r3, [r7, #15]
 800c81e:	4613      	mov	r3, r2
 800c820:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c822:	2301      	movs	r3, #1
 800c824:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800c826:	89ba      	ldrh	r2, [r7, #12]
 800c828:	7bf9      	ldrb	r1, [r7, #15]
 800c82a:	6a3b      	ldr	r3, [r7, #32]
 800c82c:	9301      	str	r3, [sp, #4]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	4613      	mov	r3, r2
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	4806      	ldr	r0, [pc, #24]	; (800c850 <WIFI_ReceiveData+0x40>)
 800c838:	f7f8 fd34 	bl	80052a4 <ES_WIFI_ReceiveData>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d101      	bne.n	800c846 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800c846:	7dfb      	ldrb	r3, [r7, #23]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	20001074 	.word	0x20001074

0800c854 <WIFI_ReceiveDataFrom>:
  * @param  ipaddr : (OUT) 4-byte array containing the IP address of the remote host
  * @param  port : (OUT) port number of the remote host
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveDataFrom(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t *port)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b08a      	sub	sp, #40	; 0x28
 800c858:	af04      	add	r7, sp, #16
 800c85a:	60b9      	str	r1, [r7, #8]
 800c85c:	607b      	str	r3, [r7, #4]
 800c85e:	4603      	mov	r3, r0
 800c860:	73fb      	strb	r3, [r7, #15]
 800c862:	4613      	mov	r3, r2
 800c864:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveDataFrom(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 800c86a:	89ba      	ldrh	r2, [r7, #12]
 800c86c:	7bf9      	ldrb	r1, [r7, #15]
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	9303      	str	r3, [sp, #12]
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	9302      	str	r3, [sp, #8]
 800c876:	6a3b      	ldr	r3, [r7, #32]
 800c878:	9301      	str	r3, [sp, #4]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	4613      	mov	r3, r2
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	4806      	ldr	r0, [pc, #24]	; (800c89c <WIFI_ReceiveDataFrom+0x48>)
 800c884:	f7f8 fd98 	bl	80053b8 <ES_WIFI_ReceiveDataFrom>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <WIFI_ReceiveDataFrom+0x3e>
  {
    ret = WIFI_STATUS_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800c892:	7dfb      	ldrb	r3, [r7, #23]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3718      	adds	r7, #24
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	20001074 	.word	0x20001074

0800c8a0 <WIFI_GetModuleFwRevision>:
  * @brief  Return Module firmware revision
  * @param  rev : revision string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleFwRevision(char *rev)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.FW_Rev != NULL)
  {
    strncpy(rev, (char *)EsWifiObj.FW_Rev, ES_WIFI_FW_REV_SIZE);
 800c8ac:	2218      	movs	r2, #24
 800c8ae:	4905      	ldr	r1, [pc, #20]	; (800c8c4 <WIFI_GetModuleFwRevision+0x24>)
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f002 fe55 	bl	800f560 <strncpy>
    ret = WIFI_STATUS_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	20001094 	.word	0x20001094

0800c8c8 <WIFI_GetModuleID>:
  * @brief  Return Module ID
  * @param  Info : Module ID string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleID(char *Id)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_ID != NULL)
  {
    strncpy(Id, (char *)EsWifiObj.Product_ID, ES_WIFI_PRODUCT_ID_SIZE);
 800c8d4:	2220      	movs	r2, #32
 800c8d6:	4905      	ldr	r1, [pc, #20]	; (800c8ec <WIFI_GetModuleID+0x24>)
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f002 fe41 	bl	800f560 <strncpy>
    ret = WIFI_STATUS_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	20001074 	.word	0x20001074

0800c8f0 <WIFI_GetModuleName>:
  * @brief  Return Module Name
  * @param  Info : Module Name string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleName(char *ModuleName)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_Name != NULL)
  {
    strncpy(ModuleName, (char *)EsWifiObj.Product_Name, ES_WIFI_PRODUCT_NAME_SIZE);
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	4905      	ldr	r1, [pc, #20]	; (800c914 <WIFI_GetModuleName+0x24>)
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f002 fe2d 	bl	800f560 <strncpy>
    ret = WIFI_STATUS_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	200010dc 	.word	0x200010dc

0800c918 <NewMessageData>:
static int waitfor(MQTTClient* c, int packet_type, Timer* timer);
void MQTTRun(void* parm);



static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	601a      	str	r2, [r3, #0]
}
 800c930:	bf00      	nop
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d003      	beq.n	800c958 <getNextPacketId+0x1c>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3301      	adds	r3, #1
 800c956:	e000      	b.n	800c95a <getNextPacketId+0x1e>
 800c958:	2301      	movs	r3, #1
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
}
 800c962:	4618      	mov	r0, r3
 800c964:	370c      	adds	r7, #12
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800c96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 800c97c:	f04f 33ff 	mov.w	r3, #4294967295
 800c980:	617b      	str	r3, [r7, #20]
        sent = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800c986:	e01c      	b.n	800c9c2 <sendPacket+0x54>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length - sent, TimerLeftMS(timer)); // length changed by length - sent for long packets and non blocking sockets
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c98c:	689c      	ldr	r4, [r3, #8]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	691a      	ldr	r2, [r3, #16]
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	18d6      	adds	r6, r2, r3
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	eba2 0803 	sub.w	r8, r2, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7f4 fb73 	bl	800108e <TimerLeftMS>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	4642      	mov	r2, r8
 800c9ac:	4631      	mov	r1, r6
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	47a0      	blx	r4
 800c9b2:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	db0e      	blt.n	800c9d8 <sendPacket+0x6a>
            break;
        sent += rc;
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	4413      	add	r3, r2
 800c9c0:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	da07      	bge.n	800c9da <sendPacket+0x6c>
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7f4 fb87 	bl	80010de <TimerIsExpired>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0d8      	beq.n	800c988 <sendPacket+0x1a>
 800c9d6:	e000      	b.n	800c9da <sendPacket+0x6c>
            break;
 800c9d8:	bf00      	nop
    }
    if (sent == length)
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d10b      	bne.n	800c9fa <sendPacket+0x8c>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	699b      	ldr	r3, [r3, #24]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	f7f4 fb3b 	bl	800106a <TimerCountdown>
        rc = MQSUCCESS;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	617b      	str	r3, [r7, #20]
 800c9f8:	e002      	b.n	800ca00 <sendPacket+0x92>
    }
    else
        rc = FAILURE;
 800c9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c9fe:	617b      	str	r3, [r7, #20]
    return rc;
 800ca00:	697b      	ldr	r3, [r7, #20]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3718      	adds	r7, #24
 800ca06:	46bd      	mov	sp, r7
 800ca08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca0c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ca20:	2300      	movs	r3, #0
 800ca22:	617b      	str	r3, [r7, #20]
 800ca24:	e008      	b.n	800ca38 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	3205      	adds	r2, #5
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	3301      	adds	r3, #1
 800ca36:	617b      	str	r3, [r7, #20]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	ddf3      	ble.n	800ca26 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6a3a      	ldr	r2, [r7, #32]
 800ca4e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca54:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca5a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2201      	movs	r2, #1
 800ca78:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3358      	adds	r3, #88	; 0x58
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7f4 fb3e 	bl	8001100 <TimerInit>
    TimerInit(&c->last_received);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	3360      	adds	r3, #96	; 0x60
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7f4 fb39 	bl	8001100 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 800ca8e:	bf00      	nop
 800ca90:	3718      	adds	r7, #24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800ca96:	b590      	push	{r4, r7, lr}
 800ca98:	b08b      	sub	sp, #44	; 0x2c
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	60f8      	str	r0, [r7, #12]
 800ca9e:	60b9      	str	r1, [r7, #8]
 800caa0:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800caa2:	2301      	movs	r3, #1
 800caa4:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 800caaa:	2304      	movs	r3, #4
 800caac:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2200      	movs	r2, #0
 800cab2:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 800cab4:	f04f 33ff 	mov.w	r3, #4294967295
 800cab8:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800caba:	6a3b      	ldr	r3, [r7, #32]
 800cabc:	3301      	adds	r3, #1
 800cabe:	623b      	str	r3, [r7, #32]
 800cac0:	6a3a      	ldr	r2, [r7, #32]
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	dd03      	ble.n	800cad0 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 800cac8:	f04f 33ff 	mov.w	r3, #4294967295
 800cacc:	61bb      	str	r3, [r7, #24]
            goto exit;
 800cace:	e021      	b.n	800cb14 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cad4:	685c      	ldr	r4, [r3, #4]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cada:	f107 0117 	add.w	r1, r7, #23
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	47a0      	blx	r4
 800cae4:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d112      	bne.n	800cb12 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
 800caf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800caf8:	fb01 f303 	mul.w	r3, r1, r3
 800cafc:	441a      	add	r2, r3
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb04:	01db      	lsls	r3, r3, #7
 800cb06:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
 800cb0a:	b25b      	sxtb	r3, r3
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dbd1      	blt.n	800cab4 <decodePacket+0x1e>
exit:
 800cb10:	e000      	b.n	800cb14 <decodePacket+0x7e>
            goto exit;
 800cb12:	bf00      	nop
    return len;
 800cb14:	6a3b      	ldr	r3, [r7, #32]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	372c      	adds	r7, #44	; 0x2c
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd90      	pop	{r4, r7, pc}

0800cb1e <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800cb1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb20:	b089      	sub	sp, #36	; 0x24
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 800cb28:	2300      	movs	r3, #0
 800cb2a:	617b      	str	r3, [r7, #20]
    int len = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800cb30:	2300      	movs	r3, #0
 800cb32:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb38:	685c      	ldr	r4, [r3, #4]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	695e      	ldr	r6, [r3, #20]
 800cb42:	68b8      	ldr	r0, [r7, #8]
 800cb44:	f7f4 faa3 	bl	800108e <TimerLeftMS>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	4628      	mov	r0, r5
 800cb50:	47a0      	blx	r4
 800cb52:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d157      	bne.n	800cc0a <readPacket+0xec>
        goto exit;

    len = 1;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800cb5e:	68b8      	ldr	r0, [r7, #8]
 800cb60:	f7f4 fa95 	bl	800108e <TimerLeftMS>
 800cb64:	4602      	mov	r2, r0
 800cb66:	f107 0310 	add.w	r3, r7, #16
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f7ff ff92 	bl	800ca96 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	3301      	adds	r3, #1
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f001 f814 	bl	800dbaa <MQTTPacket_encode>
 800cb82:	4602      	mov	r2, r0
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	4413      	add	r3, r2
 800cb88:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d203      	bcs.n	800cba0 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 800cb98:	f06f 0301 	mvn.w	r3, #1
 800cb9c:	61fb      	str	r3, [r7, #28]
        goto exit;
 800cb9e:	e037      	b.n	800cc10 <readPacket+0xf2>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0)
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	dd1a      	ble.n	800cbdc <readPacket+0xbe>
    {
      rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer));
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbaa:	685c      	ldr	r4, [r3, #4]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	695a      	ldr	r2, [r3, #20]
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	18d6      	adds	r6, r2, r3
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	607b      	str	r3, [r7, #4]
 800cbbc:	68b8      	ldr	r0, [r7, #8]
 800cbbe:	f7f4 fa66 	bl	800108e <TimerLeftMS>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4628      	mov	r0, r5
 800cbca:	47a0      	blx	r4
 800cbcc:	61f8      	str	r0, [r7, #28]
      if (rc != rem_len)
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	69fa      	ldr	r2, [r7, #28]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d002      	beq.n	800cbdc <readPacket+0xbe>
      {
        rc = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	61fb      	str	r3, [r7, #28]
        goto exit;
 800cbda:	e019      	b.n	800cc10 <readPacket+0xf2>
      }
    }

    header.byte = c->readbuf[0];
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	695b      	ldr	r3, [r3, #20]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800cbe4:	7d3b      	ldrb	r3, [r7, #20]
 800cbe6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00b      	beq.n	800cc0e <readPacket+0xf0>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	699b      	ldr	r3, [r3, #24]
 800cc00:	4619      	mov	r1, r3
 800cc02:	4610      	mov	r0, r2
 800cc04:	f7f4 fa31 	bl	800106a <TimerCountdown>
 800cc08:	e002      	b.n	800cc10 <readPacket+0xf2>
        goto exit;
 800cc0a:	bf00      	nop
 800cc0c:	e000      	b.n	800cc10 <readPacket+0xf2>
exit:
 800cc0e:	bf00      	nop
    return rc;
 800cc10:	69fb      	ldr	r3, [r7, #28]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3724      	adds	r7, #36	; 0x24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc1a <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b087      	sub	sp, #28
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
 800cc22:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	461a      	mov	r2, r3
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	4413      	add	r3, r2
 800cc38:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 800cc3a:	e039      	b.n	800ccb0 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	2b2f      	cmp	r3, #47	; 0x2f
 800cc42:	d103      	bne.n	800cc4c <isTopicMatched+0x32>
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b2f      	cmp	r3, #47	; 0x2f
 800cc4a:	d13a      	bne.n	800ccc2 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b2b      	cmp	r3, #43	; 0x2b
 800cc52:	d009      	beq.n	800cc68 <isTopicMatched+0x4e>
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b23      	cmp	r3, #35	; 0x23
 800cc5a:	d005      	beq.n	800cc68 <isTopicMatched+0x4e>
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	781a      	ldrb	r2, [r3, #0]
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d12e      	bne.n	800ccc6 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b2b      	cmp	r3, #43	; 0x2b
 800cc6e:	d112      	bne.n	800cc96 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	3301      	adds	r3, #1
 800cc74:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800cc76:	e005      	b.n	800cc84 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	613b      	str	r3, [r7, #16]
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	3301      	adds	r3, #1
 800cc82:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d20b      	bcs.n	800cca4 <isTopicMatched+0x8a>
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b2f      	cmp	r3, #47	; 0x2f
 800cc92:	d1f1      	bne.n	800cc78 <isTopicMatched+0x5e>
 800cc94:	e006      	b.n	800cca4 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b23      	cmp	r3, #35	; 0x23
 800cc9c:	d102      	bne.n	800cca4 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	613b      	str	r3, [r7, #16]
        curf++;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	3301      	adds	r3, #1
 800cca8:	617b      	str	r3, [r7, #20]
        curn++;
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	3301      	adds	r3, #1
 800ccae:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d007      	beq.n	800ccc8 <isTopicMatched+0xae>
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d3bd      	bcc.n	800cc3c <isTopicMatched+0x22>
 800ccc0:	e002      	b.n	800ccc8 <isTopicMatched+0xae>
            break;
 800ccc2:	bf00      	nop
 800ccc4:	e000      	b.n	800ccc8 <isTopicMatched+0xae>
            break;
 800ccc6:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d105      	bne.n	800ccdc <isTopicMatched+0xc2>
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d101      	bne.n	800ccdc <isTopicMatched+0xc2>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e000      	b.n	800ccde <isTopicMatched+0xc4>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	b2db      	uxtb	r3, r3
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	371c      	adds	r7, #28
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08a      	sub	sp, #40	; 0x28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 800ccf8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfc:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ccfe:	2300      	movs	r3, #0
 800cd00:	627b      	str	r3, [r7, #36]	; 0x24
 800cd02:	e03c      	b.n	800cd7e <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd08:	3205      	adds	r2, #5
 800cd0a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d032      	beq.n	800cd78 <deliverMessage+0x8c>
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd16:	3205      	adds	r2, #5
 800cd18:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	68b8      	ldr	r0, [r7, #8]
 800cd20:	f001 f912 	bl	800df48 <MQTTPacket_equals>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10b      	bne.n	800cd42 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd2e:	3205      	adds	r2, #5
 800cd30:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800cd34:	68b9      	ldr	r1, [r7, #8]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff ff6f 	bl	800cc1a <isTopicMatched>
 800cd3c:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d01a      	beq.n	800cd78 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd46:	3305      	adds	r3, #5
 800cd48:	00db      	lsls	r3, r3, #3
 800cd4a:	4413      	add	r3, r2
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d012      	beq.n	800cd78 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800cd52:	f107 0318 	add.w	r3, r7, #24
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	68b9      	ldr	r1, [r7, #8]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff fddc 	bl	800c918 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800cd60:	68fa      	ldr	r2, [r7, #12]
 800cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd64:	3305      	adds	r3, #5
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	4413      	add	r3, r2
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	f107 0218 	add.w	r2, r7, #24
 800cd70:	4610      	mov	r0, r2
 800cd72:	4798      	blx	r3
                rc = MQSUCCESS;
 800cd74:	2300      	movs	r3, #0
 800cd76:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd80:	2b04      	cmp	r3, #4
 800cd82:	ddbf      	ble.n	800cd04 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8a:	d112      	bne.n	800cdb2 <deliverMessage+0xc6>
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00e      	beq.n	800cdb2 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800cd94:	f107 0310 	add.w	r3, r7, #16
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7ff fdbb 	bl	800c918 <NewMessageData>
        c->defaultMessageHandler(&md);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cda6:	f107 0210 	add.w	r2, r7, #16
 800cdaa:	4610      	mov	r0, r2
 800cdac:	4798      	blx	r3
        rc = MQSUCCESS;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3728      	adds	r7, #40	; 0x28
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <keepalive>:


int keepalive(MQTTClient* c)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
    int rc = MQSUCCESS;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d045      	beq.n	800ce5c <keepalive+0xa0>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	3358      	adds	r3, #88	; 0x58
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7f4 f982 	bl	80010de <TimerIsExpired>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d107      	bne.n	800cdf0 <keepalive+0x34>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3360      	adds	r3, #96	; 0x60
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7f4 f97a 	bl	80010de <TimerIsExpired>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d037      	beq.n	800ce60 <keepalive+0xa4>
    {
        if (c->ping_outstanding)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	7f1b      	ldrb	r3, [r3, #28]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d003      	beq.n	800ce00 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 800cdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfc:	617b      	str	r3, [r7, #20]
 800cdfe:	e030      	b.n	800ce62 <keepalive+0xa6>
        else
        {
            Timer timer;
            TimerInit(&timer);
 800ce00:	f107 0308 	add.w	r3, r7, #8
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7f4 f97b 	bl	8001100 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800ce0a:	f107 0308 	add.w	r3, r7, #8
 800ce0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7f4 f918 	bl	8001048 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	691a      	ldr	r2, [r3, #16]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	4619      	mov	r1, r3
 800ce22:	4610      	mov	r0, r2
 800ce24:	f000 fdf5 	bl	800da12 <MQTTSerialize_pingreq>
 800ce28:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQSUCCESS) // send the ping packet
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	dd18      	ble.n	800ce62 <keepalive+0xa6>
 800ce30:	f107 0308 	add.w	r3, r7, #8
 800ce34:	461a      	mov	r2, r3
 800ce36:	6939      	ldr	r1, [r7, #16]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff fd98 	bl	800c96e <sendPacket>
 800ce3e:	6178      	str	r0, [r7, #20]
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10d      	bne.n	800ce62 <keepalive+0xa6>
            {
                c->ping_outstanding = 1;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	771a      	strb	r2, [r3, #28]
                TimerCountdownMS(&c->last_received, 5000);  // allow for a few seconds to receive the ping response
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	3360      	adds	r3, #96	; 0x60
 800ce50:	f241 3188 	movw	r1, #5000	; 0x1388
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f4 f8f7 	bl	8001048 <TimerCountdownMS>
 800ce5a:	e002      	b.n	800ce62 <keepalive+0xa6>
        goto exit;
 800ce5c:	bf00      	nop
 800ce5e:	e000      	b.n	800ce62 <keepalive+0xa6>
            }
        }
    }

exit:
 800ce60:	bf00      	nop
    return rc;
 800ce62:	697b      	ldr	r3, [r7, #20]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
    int i = 0;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ce78:	2300      	movs	r3, #0
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	e008      	b.n	800ce90 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	3205      	adds	r2, #5
 800ce84:	2100      	movs	r1, #0
 800ce86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	60fb      	str	r3, [r7, #12]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2b04      	cmp	r3, #4
 800ce94:	ddf3      	ble.n	800ce7e <MQTTCleanSession+0x12>
}
 800ce96:	bf00      	nop
 800ce98:	bf00      	nop
 800ce9a:	3714      	adds	r7, #20
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d002      	beq.n	800cec6 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff ffd3 	bl	800ce6c <MQTTCleanSession>
}
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
	...

0800ced0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800ced0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ced2:	b095      	sub	sp, #84	; 0x54
 800ced4:	af06      	add	r7, sp, #24
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
    int len = 0,
 800ceda:	2300      	movs	r3, #0
 800cedc:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQSUCCESS;
 800cede:	2300      	movs	r3, #0
 800cee0:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff fe1a 	bl	800cb1e <readPacket>
 800ceea:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	2b0d      	cmp	r3, #13
 800cef0:	d81e      	bhi.n	800cf30 <cycle+0x60>
 800cef2:	a201      	add	r2, pc, #4	; (adr r2, 800cef8 <cycle+0x28>)
 800cef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef8:	0800d087 	.word	0x0800d087
 800cefc:	0800cf31 	.word	0x0800cf31
 800cf00:	0800d087 	.word	0x0800d087
 800cf04:	0800cf37 	.word	0x0800cf37
 800cf08:	0800d087 	.word	0x0800d087
 800cf0c:	0800d003 	.word	0x0800d003
 800cf10:	0800d003 	.word	0x0800d003
 800cf14:	0800d087 	.word	0x0800d087
 800cf18:	0800cf31 	.word	0x0800cf31
 800cf1c:	0800d087 	.word	0x0800d087
 800cf20:	0800cf31 	.word	0x0800cf31
 800cf24:	0800cf31 	.word	0x0800cf31
 800cf28:	0800cf31 	.word	0x0800cf31
 800cf2c:	0800d07f 	.word	0x0800d07f
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 800cf34:	e0b9      	b.n	800d0aa <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 800cf36:	2300      	movs	r3, #0
 800cf38:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800cf42:	4616      	mov	r6, r2
 800cf44:	f107 0210 	add.w	r2, r7, #16
 800cf48:	1d15      	adds	r5, r2, #4
 800cf4a:	f107 0210 	add.w	r2, r7, #16
 800cf4e:	1c54      	adds	r4, r2, #1
 800cf50:	f107 010c 	add.w	r1, r7, #12
 800cf54:	f107 0210 	add.w	r2, r7, #16
 800cf58:	1c90      	adds	r0, r2, #2
 800cf5a:	9604      	str	r6, [sp, #16]
 800cf5c:	9303      	str	r3, [sp, #12]
 800cf5e:	f107 0310 	add.w	r3, r7, #16
 800cf62:	330c      	adds	r3, #12
 800cf64:	9302      	str	r3, [sp, #8]
 800cf66:	f107 0310 	add.w	r3, r7, #16
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	f107 0320 	add.w	r3, r7, #32
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	462b      	mov	r3, r5
 800cf76:	4622      	mov	r2, r4
 800cf78:	f000 fd5a 	bl	800da30 <MQTTDeserialize_publish>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	f040 8090 	bne.w	800d0a4 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800cf8a:	f107 0210 	add.w	r2, r7, #16
 800cf8e:	f107 0320 	add.w	r3, r7, #32
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7ff fea9 	bl	800ccec <deliverMessage>
            if (msg.qos != QOS0)
 800cf9a:	7c3b      	ldrb	r3, [r7, #16]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d074      	beq.n	800d08a <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 800cfa0:	7c3b      	ldrb	r3, [r7, #16]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d10c      	bne.n	800cfc0 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6918      	ldr	r0, [r3, #16]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	4619      	mov	r1, r3
 800cfb0:	8abb      	ldrh	r3, [r7, #20]
 800cfb2:	9300      	str	r3, [sp, #0]
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	2204      	movs	r2, #4
 800cfb8:	f001 f893 	bl	800e0e2 <MQTTSerialize_ack>
 800cfbc:	6378      	str	r0, [r7, #52]	; 0x34
 800cfbe:	e00e      	b.n	800cfde <cycle+0x10e>
                else if (msg.qos == QOS2)
 800cfc0:	7c3b      	ldrb	r3, [r7, #16]
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	d10b      	bne.n	800cfde <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6918      	ldr	r0, [r3, #16]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	4619      	mov	r1, r3
 800cfd0:	8abb      	ldrh	r3, [r7, #20]
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	2205      	movs	r2, #5
 800cfd8:	f001 f883 	bl	800e0e2 <MQTTSerialize_ack>
 800cfdc:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 800cfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	dc03      	bgt.n	800cfec <cycle+0x11c>
                    rc = FAILURE;
 800cfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfe8:	633b      	str	r3, [r7, #48]	; 0x30
 800cfea:	e005      	b.n	800cff8 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7ff fcbc 	bl	800c96e <sendPacket>
 800cff6:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800cff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cffe:	d144      	bne.n	800d08a <cycle+0x1ba>
                    goto exit; // there was a problem
 800d000:	e053      	b.n	800d0aa <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	695c      	ldr	r4, [r3, #20]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	f107 020a 	add.w	r2, r7, #10
 800d00e:	f107 0109 	add.w	r1, r7, #9
 800d012:	f107 0008 	add.w	r0, r7, #8
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	4623      	mov	r3, r4
 800d01a:	f000 fd7b 	bl	800db14 <MQTTDeserialize_ack>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b01      	cmp	r3, #1
 800d022:	d003      	beq.n	800d02c <cycle+0x15c>
                rc = FAILURE;
 800d024:	f04f 33ff 	mov.w	r3, #4294967295
 800d028:	633b      	str	r3, [r7, #48]	; 0x30
 800d02a:	e023      	b.n	800d074 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6918      	ldr	r0, [r3, #16]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	4619      	mov	r1, r3
 800d036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d038:	2b05      	cmp	r3, #5
 800d03a:	d101      	bne.n	800d040 <cycle+0x170>
 800d03c:	2206      	movs	r2, #6
 800d03e:	e000      	b.n	800d042 <cycle+0x172>
 800d040:	2207      	movs	r2, #7
 800d042:	897b      	ldrh	r3, [r7, #10]
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	2300      	movs	r3, #0
 800d048:	f001 f84b 	bl	800e0e2 <MQTTSerialize_ack>
 800d04c:	6378      	str	r0, [r7, #52]	; 0x34
 800d04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d050:	2b00      	cmp	r3, #0
 800d052:	dc03      	bgt.n	800d05c <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 800d054:	f04f 33ff 	mov.w	r3, #4294967295
 800d058:	633b      	str	r3, [r7, #48]	; 0x30
 800d05a:	e00b      	b.n	800d074 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQSUCCESS) // send the PUBREL packet
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fc84 	bl	800c96e <sendPacket>
 800d066:	6338      	str	r0, [r7, #48]	; 0x30
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d002      	beq.n	800d074 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 800d06e:	f04f 33ff 	mov.w	r3, #4294967295
 800d072:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800d074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07a:	d108      	bne.n	800d08e <cycle+0x1be>
                goto exit; // there was a problem
 800d07c:	e015      	b.n	800d0aa <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	771a      	strb	r2, [r3, #28]
            break;
 800d084:	e004      	b.n	800d090 <cycle+0x1c0>
            break;
 800d086:	bf00      	nop
 800d088:	e002      	b.n	800d090 <cycle+0x1c0>
            break;
 800d08a:	bf00      	nop
 800d08c:	e000      	b.n	800d090 <cycle+0x1c0>
            break;
 800d08e:	bf00      	nop
    }

    if (keepalive(c) != MQSUCCESS) {
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff fe93 	bl	800cdbc <keepalive>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d005      	beq.n	800d0a8 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 800d09c:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a0:	633b      	str	r3, [r7, #48]	; 0x30
 800d0a2:	e002      	b.n	800d0aa <cycle+0x1da>
                goto exit;
 800d0a4:	bf00      	nop
 800d0a6:	e000      	b.n	800d0aa <cycle+0x1da>
    }

exit:
 800d0a8:	bf00      	nop
    if (rc == MQSUCCESS)
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d102      	bne.n	800d0b6 <cycle+0x1e6>
        rc = packet_type;
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	633b      	str	r3, [r7, #48]	; 0x30
 800d0b4:	e006      	b.n	800d0c4 <cycle+0x1f4>
    else if (c->isconnected)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d002      	beq.n	800d0c4 <cycle+0x1f4>
        MQTTCloseSession(c);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7ff fef0 	bl	800cea4 <MQTTCloseSession>
    return rc;
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	373c      	adds	r7, #60	; 0x3c
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ce:	bf00      	nop

0800d0d0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
    int rc = MQSUCCESS;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 800d0de:	f107 030c 	add.w	r3, r7, #12
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7f4 f80c 	bl	8001100 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800d0e8:	683a      	ldr	r2, [r7, #0]
 800d0ea:	f107 030c 	add.w	r3, r7, #12
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7f3 ffa9 	bl	8001048 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 800d0f6:	f107 030c 	add.w	r3, r7, #12
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7ff fee7 	bl	800ced0 <cycle>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	da03      	bge.n	800d110 <MQTTYield+0x40>
        {
            rc = FAILURE;
 800d108:	f04f 33ff 	mov.w	r3, #4294967295
 800d10c:	617b      	str	r3, [r7, #20]
            break;
 800d10e:	e007      	b.n	800d120 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 800d110:	f107 030c 	add.w	r3, r7, #12
 800d114:	4618      	mov	r0, r3
 800d116:	f7f3 ffe2 	bl	80010de <TimerIsExpired>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d0ea      	beq.n	800d0f6 <MQTTYield+0x26>

    return rc;
 800d120:	697b      	ldr	r3, [r7, #20]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3718      	adds	r7, #24
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b086      	sub	sp, #24
 800d12e:	af00      	add	r7, sp, #0
 800d130:	60f8      	str	r0, [r7, #12]
 800d132:	60b9      	str	r1, [r7, #8]
 800d134:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800d136:	f04f 33ff 	mov.w	r3, #4294967295
 800d13a:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7f3 ffce 	bl	80010de <TimerIsExpired>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10c      	bne.n	800d162 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f7ff fec0 	bl	800ced0 <cycle>
 800d150:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 800d152:	697a      	ldr	r2, [r7, #20]
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	429a      	cmp	r2, r3
 800d158:	d004      	beq.n	800d164 <waitfor+0x3a>
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	daed      	bge.n	800d13c <waitfor+0x12>
 800d160:	e000      	b.n	800d164 <waitfor+0x3a>
            break; // we timed out
 800d162:	bf00      	nop

    return rc;
 800d164:	697b      	ldr	r3, [r7, #20]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3718      	adds	r7, #24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b09e      	sub	sp, #120	; 0x78
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 800d17c:	f04f 33ff 	mov.w	r3, #4294967295
 800d180:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800d182:	4a43      	ldr	r2, [pc, #268]	; (800d290 <MQTTConnectWithResults+0x120>)
 800d184:	f107 0310 	add.w	r3, r7, #16
 800d188:	4611      	mov	r1, r2
 800d18a:	2258      	movs	r2, #88	; 0x58
 800d18c:	4618      	mov	r0, r3
 800d18e:	f001 f955 	bl	800e43c <memcpy>
    int len = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d164      	bne.n	800d268 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 800d19e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7f3 ffac 	bl	8001100 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7f3 ff48 	bl	8001048 <TimerCountdownMS>

    if (options == 0)
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d102      	bne.n	800d1c4 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 800d1be:	f107 0310 	add.w	r3, r7, #16
 800d1c2:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	8b1b      	ldrh	r3, [r3, #24]
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	7e9b      	ldrb	r3, [r3, #26]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	f7f3 ff40 	bl	800106a <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6918      	ldr	r0, [r3, #16]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	68ba      	ldr	r2, [r7, #8]
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	f000 fa93 	bl	800d720 <MQTTSerialize_connect>
 800d1fa:	6738      	str	r0, [r7, #112]	; 0x70
 800d1fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	dd34      	ble.n	800d26c <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQSUCCESS)  // send the connect packet
 800d202:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d206:	461a      	mov	r2, r3
 800d208:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f7ff fbaf 	bl	800c96e <sendPacket>
 800d210:	6778      	str	r0, [r7, #116]	; 0x74
 800d212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d214:	2b00      	cmp	r3, #0
 800d216:	d12b      	bne.n	800d270 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800d218:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d21c:	461a      	mov	r2, r3
 800d21e:	2102      	movs	r1, #2
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f7ff ff82 	bl	800d12a <waitfor>
 800d226:	4603      	mov	r3, r0
 800d228:	2b02      	cmp	r3, #2
 800d22a:	d119      	bne.n	800d260 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	1c58      	adds	r0, r3, #1
 800d23c:	6879      	ldr	r1, [r7, #4]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	695a      	ldr	r2, [r3, #20]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	f000 fb57 	bl	800d8f8 <MQTTDeserialize_connack>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d103      	bne.n	800d258 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	677b      	str	r3, [r7, #116]	; 0x74
 800d256:	e00c      	b.n	800d272 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 800d258:	f04f 33ff 	mov.w	r3, #4294967295
 800d25c:	677b      	str	r3, [r7, #116]	; 0x74
 800d25e:	e008      	b.n	800d272 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 800d260:	f04f 33ff 	mov.w	r3, #4294967295
 800d264:	677b      	str	r3, [r7, #116]	; 0x74
 800d266:	e004      	b.n	800d272 <MQTTConnectWithResults+0x102>
		  goto exit;
 800d268:	bf00      	nop
 800d26a:	e002      	b.n	800d272 <MQTTConnectWithResults+0x102>
        goto exit;
 800d26c:	bf00      	nop
 800d26e:	e000      	b.n	800d272 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 800d270:	bf00      	nop

exit:
    if (rc == MQSUCCESS)
 800d272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d274:	2b00      	cmp	r3, #0
 800d276:	d105      	bne.n	800d284 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2201      	movs	r2, #1
 800d27c:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2200      	movs	r2, #0
 800d282:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 800d284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800d286:	4618      	mov	r0, r3
 800d288:	3778      	adds	r7, #120	; 0x78
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	08013d24 	.word	0x08013d24

0800d294 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 800d29e:	f107 030c 	add.w	r3, r7, #12
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f7ff ff62 	bl	800d170 <MQTTConnectWithResults>
 800d2ac:	4603      	mov	r3, r0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b086      	sub	sp, #24
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	60f8      	str	r0, [r7, #12]
 800d2be:	60b9      	str	r1, [r7, #8]
 800d2c0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800d2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c6:	617b      	str	r3, [r7, #20]
    int i = -1;
 800d2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2cc:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	613b      	str	r3, [r7, #16]
 800d2d2:	e028      	b.n	800d326 <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	693a      	ldr	r2, [r7, #16]
 800d2d8:	3205      	adds	r2, #5
 800d2da:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d01e      	beq.n	800d320 <MQTTSetMessageHandler+0x6a>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	3205      	adds	r2, #5
 800d2e8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800d2ec:	68b9      	ldr	r1, [r7, #8]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7f2 ff86 	bl	8000200 <strcmp>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d112      	bne.n	800d320 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10c      	bne.n	800d31a <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	693a      	ldr	r2, [r7, #16]
 800d304:	3205      	adds	r2, #5
 800d306:	2100      	movs	r1, #0
 800d308:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	3305      	adds	r3, #5
 800d312:	00db      	lsls	r3, r3, #3
 800d314:	4413      	add	r3, r2
 800d316:	2200      	movs	r2, #0
 800d318:	605a      	str	r2, [r3, #4]
            }
            rc = MQSUCCESS; /* return i when adding new subscription */
 800d31a:	2300      	movs	r3, #0
 800d31c:	617b      	str	r3, [r7, #20]
            break;
 800d31e:	e005      	b.n	800d32c <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	3301      	adds	r3, #1
 800d324:	613b      	str	r3, [r7, #16]
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	2b04      	cmp	r3, #4
 800d32a:	ddd3      	ble.n	800d2d4 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d026      	beq.n	800d380 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d338:	d112      	bne.n	800d360 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800d33a:	2300      	movs	r3, #0
 800d33c:	613b      	str	r3, [r7, #16]
 800d33e:	e00c      	b.n	800d35a <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	693a      	ldr	r2, [r7, #16]
 800d344:	3205      	adds	r2, #5
 800d346:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d102      	bne.n	800d354 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQSUCCESS;
 800d34e:	2300      	movs	r3, #0
 800d350:	617b      	str	r3, [r7, #20]
                    break;
 800d352:	e005      	b.n	800d360 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	3301      	adds	r3, #1
 800d358:	613b      	str	r3, [r7, #16]
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	ddef      	ble.n	800d340 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	2b04      	cmp	r3, #4
 800d364:	dc0c      	bgt.n	800d380 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	693a      	ldr	r2, [r7, #16]
 800d36a:	3205      	adds	r2, #5
 800d36c:	68b9      	ldr	r1, [r7, #8]
 800d36e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	3305      	adds	r3, #5
 800d378:	00db      	lsls	r3, r3, #3
 800d37a:	4413      	add	r3, r2
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 800d380:	697b      	ldr	r3, [r7, #20]
}
 800d382:	4618      	mov	r0, r3
 800d384:	3718      	adds	r7, #24
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 800d38a:	b5b0      	push	{r4, r5, r7, lr}
 800d38c:	b092      	sub	sp, #72	; 0x48
 800d38e:	af04      	add	r7, sp, #16
 800d390:	60f8      	str	r0, [r7, #12]
 800d392:	60b9      	str	r1, [r7, #8]
 800d394:	603b      	str	r3, [r7, #0]
 800d396:	4613      	mov	r3, r2
 800d398:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 800d39a:	f04f 33ff 	mov.w	r3, #4294967295
 800d39e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	61fb      	str	r3, [r7, #28]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	623b      	str	r3, [r7, #32]
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6a1b      	ldr	r3, [r3, #32]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d063      	beq.n	800d484 <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 800d3bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7f3 fe9d 	bl	8001100 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	685a      	ldr	r2, [r3, #4]
 800d3ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7f3 fe39 	bl	8001048 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	691c      	ldr	r4, [r3, #16]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	461d      	mov	r5, r3
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7ff faab 	bl	800c93c <getNextPacketId>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	1dfb      	adds	r3, r7, #7
 800d3ec:	9302      	str	r3, [sp, #8]
 800d3ee:	f107 031c 	add.w	r3, r7, #28
 800d3f2:	9301      	str	r3, [sp, #4]
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	4620      	mov	r0, r4
 800d400:	f000 feeb 	bl	800e1da <MQTTSerialize_subscribe>
 800d404:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d408:	2b00      	cmp	r3, #0
 800d40a:	dd3d      	ble.n	800d488 <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800d40c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d410:	461a      	mov	r2, r3
 800d412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7ff faaa 	bl	800c96e <sendPacket>
 800d41a:	6378      	str	r0, [r7, #52]	; 0x34
 800d41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d134      	bne.n	800d48c <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 800d422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d426:	461a      	mov	r2, r3
 800d428:	2109      	movs	r1, #9
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f7ff fe7d 	bl	800d12a <waitfor>
 800d430:	4603      	mov	r3, r0
 800d432:	2b09      	cmp	r3, #9
 800d434:	d122      	bne.n	800d47c <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 800d43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d43c:	2200      	movs	r2, #0
 800d43e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800d440:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	695b      	ldr	r3, [r3, #20]
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	68d2      	ldr	r2, [r2, #12]
 800d44a:	4614      	mov	r4, r2
 800d44c:	f107 0218 	add.w	r2, r7, #24
 800d450:	f107 0016 	add.w	r0, r7, #22
 800d454:	9401      	str	r4, [sp, #4]
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	460b      	mov	r3, r1
 800d45a:	2101      	movs	r1, #1
 800d45c:	f000 ff39 	bl	800e2d2 <MQTTDeserialize_suback>
 800d460:	4603      	mov	r3, r0
 800d462:	2b01      	cmp	r3, #1
 800d464:	d113      	bne.n	800d48e <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 800d466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	2b80      	cmp	r3, #128	; 0x80
 800d46c:	d00f      	beq.n	800d48e <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 800d46e:	683a      	ldr	r2, [r7, #0]
 800d470:	68b9      	ldr	r1, [r7, #8]
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f7ff ff1f 	bl	800d2b6 <MQTTSetMessageHandler>
 800d478:	6378      	str	r0, [r7, #52]	; 0x34
 800d47a:	e008      	b.n	800d48e <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 800d47c:	f04f 33ff 	mov.w	r3, #4294967295
 800d480:	637b      	str	r3, [r7, #52]	; 0x34
 800d482:	e004      	b.n	800d48e <MQTTSubscribeWithResults+0x104>
		    goto exit;
 800d484:	bf00      	nop
 800d486:	e002      	b.n	800d48e <MQTTSubscribeWithResults+0x104>
        goto exit;
 800d488:	bf00      	nop
 800d48a:	e000      	b.n	800d48e <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 800d48c:	bf00      	nop

exit:
    if (rc == FAILURE)
 800d48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d494:	d102      	bne.n	800d49c <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f7ff fd04 	bl	800cea4 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 800d49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3738      	adds	r7, #56	; 0x38
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bdb0      	pop	{r4, r5, r7, pc}

0800d4a6 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b088      	sub	sp, #32
 800d4aa:	af02      	add	r7, sp, #8
 800d4ac:	60f8      	str	r0, [r7, #12]
 800d4ae:	60b9      	str	r1, [r7, #8]
 800d4b0:	603b      	str	r3, [r7, #0]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 800d4b6:	79fa      	ldrb	r2, [r7, #7]
 800d4b8:	f107 0314 	add.w	r3, r7, #20
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	68b9      	ldr	r1, [r7, #8]
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff ff61 	bl	800d38a <MQTTSubscribeWithResults>
 800d4c8:	4603      	mov	r3, r0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800d4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4d4:	b097      	sub	sp, #92	; 0x5c
 800d4d6:	af08      	add	r7, sp, #32
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800d4de:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	61fb      	str	r3, [r7, #28]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	623b      	str	r3, [r7, #32]
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	61fb      	str	r3, [r7, #28]
    int len = 0;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6a1b      	ldr	r3, [r3, #32]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f000 809b 	beq.w	800d638 <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 800d502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d506:	4618      	mov	r0, r3
 800d508:	f7f3 fdfa 	bl	8001100 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d514:	4611      	mov	r1, r2
 800d516:	4618      	mov	r0, r3
 800d518:	f7f3 fd96 	bl	8001048 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d003      	beq.n	800d52c <MQTTPublish+0x5a>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	2b02      	cmp	r3, #2
 800d52a:	d106      	bne.n	800d53a <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f7ff fa05 	bl	800c93c <getNextPacketId>
 800d532:	4603      	mov	r3, r0
 800d534:	b29a      	uxth	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	691b      	ldr	r3, [r3, #16]
 800d53e:	603b      	str	r3, [r7, #0]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	469c      	mov	ip, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	469e      	mov	lr, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	785d      	ldrb	r5, [r3, #1]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800d55c:	9206      	str	r2, [sp, #24]
 800d55e:	9305      	str	r3, [sp, #20]
 800d560:	ac02      	add	r4, sp, #8
 800d562:	f107 031c 	add.w	r3, r7, #28
 800d566:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d56a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d56e:	9601      	str	r6, [sp, #4]
 800d570:	9500      	str	r5, [sp, #0]
 800d572:	4673      	mov	r3, lr
 800d574:	2200      	movs	r2, #0
 800d576:	4661      	mov	r1, ip
 800d578:	6838      	ldr	r0, [r7, #0]
 800d57a:	f000 fd3c 	bl	800dff6 <MQTTSerialize_publish>
 800d57e:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800d580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d582:	2b00      	cmp	r3, #0
 800d584:	dd5a      	ble.n	800d63c <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800d586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d58a:	461a      	mov	r2, r3
 800d58c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f7ff f9ed 	bl	800c96e <sendPacket>
 800d594:	6378      	str	r0, [r7, #52]	; 0x34
 800d596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d151      	bne.n	800d640 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d122      	bne.n	800d5ea <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800d5a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	2104      	movs	r1, #4
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f7ff fdbc 	bl	800d12a <waitfor>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b04      	cmp	r3, #4
 800d5b6:	d114      	bne.n	800d5e2 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	695c      	ldr	r4, [r3, #20]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	f107 021a 	add.w	r2, r7, #26
 800d5c4:	f107 0119 	add.w	r1, r7, #25
 800d5c8:	f107 0018 	add.w	r0, r7, #24
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	4623      	mov	r3, r4
 800d5d0:	f000 faa0 	bl	800db14 <MQTTDeserialize_ack>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d035      	beq.n	800d646 <MQTTPublish+0x174>
                rc = FAILURE;
 800d5da:	f04f 33ff 	mov.w	r3, #4294967295
 800d5de:	637b      	str	r3, [r7, #52]	; 0x34
 800d5e0:	e031      	b.n	800d646 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800d5e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e6:	637b      	str	r3, [r7, #52]	; 0x34
 800d5e8:	e02d      	b.n	800d646 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	d128      	bne.n	800d644 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800d5f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	2107      	movs	r1, #7
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7ff fd95 	bl	800d12a <waitfor>
 800d600:	4603      	mov	r3, r0
 800d602:	2b07      	cmp	r3, #7
 800d604:	d114      	bne.n	800d630 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	695c      	ldr	r4, [r3, #20]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	f107 0216 	add.w	r2, r7, #22
 800d612:	f107 0115 	add.w	r1, r7, #21
 800d616:	f107 0014 	add.w	r0, r7, #20
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	4623      	mov	r3, r4
 800d61e:	f000 fa79 	bl	800db14 <MQTTDeserialize_ack>
 800d622:	4603      	mov	r3, r0
 800d624:	2b01      	cmp	r3, #1
 800d626:	d00e      	beq.n	800d646 <MQTTPublish+0x174>
                rc = FAILURE;
 800d628:	f04f 33ff 	mov.w	r3, #4294967295
 800d62c:	637b      	str	r3, [r7, #52]	; 0x34
 800d62e:	e00a      	b.n	800d646 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800d630:	f04f 33ff 	mov.w	r3, #4294967295
 800d634:	637b      	str	r3, [r7, #52]	; 0x34
 800d636:	e006      	b.n	800d646 <MQTTPublish+0x174>
		    goto exit;
 800d638:	bf00      	nop
 800d63a:	e004      	b.n	800d646 <MQTTPublish+0x174>
        goto exit;
 800d63c:	bf00      	nop
 800d63e:	e002      	b.n	800d646 <MQTTPublish+0x174>
        goto exit; // there was a problem
 800d640:	bf00      	nop
 800d642:	e000      	b.n	800d646 <MQTTPublish+0x174>
    }

exit:
 800d644:	bf00      	nop
    if (rc == FAILURE)
 800d646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64c:	d102      	bne.n	800d654 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f7ff fc28 	bl	800cea4 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 800d654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d656:	4618      	mov	r0, r3
 800d658:	373c      	adds	r7, #60	; 0x3c
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d65e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800d65e:	b590      	push	{r4, r7, lr}
 800d660:	b085      	sub	sp, #20
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
	int len = 0;
 800d666:	2300      	movs	r3, #0
 800d668:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	7a1b      	ldrb	r3, [r3, #8]
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d102      	bne.n	800d678 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800d672:	230c      	movs	r3, #12
 800d674:	60fb      	str	r3, [r7, #12]
 800d676:	e005      	b.n	800d684 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7a1b      	ldrb	r3, [r3, #8]
 800d67c:	2b04      	cmp	r3, #4
 800d67e:	d101      	bne.n	800d684 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800d680:	230a      	movs	r3, #10
 800d682:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	330c      	adds	r3, #12
 800d688:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d68c:	f000 fc43 	bl	800df16 <MQTTstrlen>
 800d690:	4603      	mov	r3, r0
 800d692:	3302      	adds	r3, #2
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	4413      	add	r3, r2
 800d698:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	7edb      	ldrb	r3, [r3, #27]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d013      	beq.n	800d6ca <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	3324      	adds	r3, #36	; 0x24
 800d6a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d6aa:	f000 fc34 	bl	800df16 <MQTTstrlen>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	1c9c      	adds	r4, r3, #2
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	3330      	adds	r3, #48	; 0x30
 800d6b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d6ba:	f000 fc2c 	bl	800df16 <MQTTstrlen>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	4423      	add	r3, r4
 800d6c2:	3302      	adds	r3, #2
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d103      	bne.n	800d6da <MQTTSerialize_connectLength+0x7c>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	3340      	adds	r3, #64	; 0x40
 800d6de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d6e2:	f000 fc18 	bl	800df16 <MQTTstrlen>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	3302      	adds	r3, #2
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d103      	bne.n	800d700 <MQTTSerialize_connectLength+0xa2>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00a      	beq.n	800d716 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	334c      	adds	r3, #76	; 0x4c
 800d704:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d708:	f000 fc05 	bl	800df16 <MQTTstrlen>
 800d70c:	4603      	mov	r3, r0
 800d70e:	3302      	adds	r3, #2
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	4413      	add	r3, r2
 800d714:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800d716:	68fb      	ldr	r3, [r7, #12]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3714      	adds	r7, #20
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd90      	pop	{r4, r7, pc}

0800d720 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08a      	sub	sp, #40	; 0x28
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800d730:	2300      	movs	r3, #0
 800d732:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800d734:	2300      	movs	r3, #0
 800d736:	617b      	str	r3, [r7, #20]
	int len = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800d73c:	f04f 33ff 	mov.w	r3, #4294967295
 800d740:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff ff8b 	bl	800d65e <MQTTSerialize_connectLength>
 800d748:	6238      	str	r0, [r7, #32]
 800d74a:	6a38      	ldr	r0, [r7, #32]
 800d74c:	f000 fa98 	bl	800dc80 <MQTTPacket_len>
 800d750:	4602      	mov	r2, r0
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	4293      	cmp	r3, r2
 800d756:	da03      	bge.n	800d760 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d758:	f06f 0301 	mvn.w	r3, #1
 800d75c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800d75e:	e0c2      	b.n	800d8e6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800d764:	7e3b      	ldrb	r3, [r7, #24]
 800d766:	2201      	movs	r2, #1
 800d768:	f362 1307 	bfi	r3, r2, #4, #4
 800d76c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800d76e:	7e3a      	ldrb	r2, [r7, #24]
 800d770:	f107 031c 	add.w	r3, r7, #28
 800d774:	4611      	mov	r1, r2
 800d776:	4618      	mov	r0, r3
 800d778:	f000 fb11 	bl	800dd9e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	6a39      	ldr	r1, [r7, #32]
 800d780:	4618      	mov	r0, r3
 800d782:	f000 fa12 	bl	800dbaa <MQTTPacket_encode>
 800d786:	4602      	mov	r2, r0
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	4413      	add	r3, r2
 800d78c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	7a1b      	ldrb	r3, [r3, #8]
 800d792:	2b04      	cmp	r3, #4
 800d794:	d10c      	bne.n	800d7b0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800d796:	f107 031c 	add.w	r3, r7, #28
 800d79a:	4955      	ldr	r1, [pc, #340]	; (800d8f0 <MQTTSerialize_connect+0x1d0>)
 800d79c:	4618      	mov	r0, r3
 800d79e:	f000 fb3c 	bl	800de1a <writeCString>
		writeChar(&ptr, (char) 4);
 800d7a2:	f107 031c 	add.w	r3, r7, #28
 800d7a6:	2104      	movs	r1, #4
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f000 faf8 	bl	800dd9e <writeChar>
 800d7ae:	e00b      	b.n	800d7c8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800d7b0:	f107 031c 	add.w	r3, r7, #28
 800d7b4:	494f      	ldr	r1, [pc, #316]	; (800d8f4 <MQTTSerialize_connect+0x1d4>)
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f000 fb2f 	bl	800de1a <writeCString>
		writeChar(&ptr, (char) 3);
 800d7bc:	f107 031c 	add.w	r3, r7, #28
 800d7c0:	2103      	movs	r1, #3
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 faeb 	bl	800dd9e <writeChar>
	}

	flags.all = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	7e9b      	ldrb	r3, [r3, #26]
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	7d3b      	ldrb	r3, [r7, #20]
 800d7d8:	f362 0341 	bfi	r3, r2, #1, #1
 800d7dc:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	7edb      	ldrb	r3, [r3, #27]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	bf14      	ite	ne
 800d7e6:	2301      	movne	r3, #1
 800d7e8:	2300      	moveq	r3, #0
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	7d3b      	ldrb	r3, [r7, #20]
 800d7ee:	f362 0382 	bfi	r3, r2, #2, #1
 800d7f2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800d7f4:	7d3b      	ldrb	r3, [r7, #20]
 800d7f6:	f003 0304 	and.w	r3, r3, #4
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d013      	beq.n	800d828 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d806:	f003 0303 	and.w	r3, r3, #3
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	7d3b      	ldrb	r3, [r7, #20]
 800d80e:	f362 03c4 	bfi	r3, r2, #3, #2
 800d812:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	7d3b      	ldrb	r3, [r7, #20]
 800d822:	f362 1345 	bfi	r3, r2, #5, #1
 800d826:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d103      	bne.n	800d838 <MQTTSerialize_connect+0x118>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d834:	2b00      	cmp	r3, #0
 800d836:	d003      	beq.n	800d840 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800d838:	7d3b      	ldrb	r3, [r7, #20]
 800d83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d83e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d844:	2b00      	cmp	r3, #0
 800d846:	d103      	bne.n	800d850 <MQTTSerialize_connect+0x130>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d003      	beq.n	800d858 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800d850:	7d3b      	ldrb	r3, [r7, #20]
 800d852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d856:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800d858:	7d3a      	ldrb	r2, [r7, #20]
 800d85a:	f107 031c 	add.w	r3, r7, #28
 800d85e:	4611      	mov	r1, r2
 800d860:	4618      	mov	r0, r3
 800d862:	f000 fa9c 	bl	800dd9e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	8b1b      	ldrh	r3, [r3, #24]
 800d86a:	461a      	mov	r2, r3
 800d86c:	f107 031c 	add.w	r3, r7, #28
 800d870:	4611      	mov	r1, r2
 800d872:	4618      	mov	r0, r3
 800d874:	f000 faa8 	bl	800ddc8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f107 001c 	add.w	r0, r7, #28
 800d87e:	330c      	adds	r3, #12
 800d880:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d882:	f000 fae9 	bl	800de58 <writeMQTTString>
	if (options->willFlag)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	7edb      	ldrb	r3, [r3, #27]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00d      	beq.n	800d8aa <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f107 001c 	add.w	r0, r7, #28
 800d894:	3324      	adds	r3, #36	; 0x24
 800d896:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d898:	f000 fade 	bl	800de58 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f107 001c 	add.w	r0, r7, #28
 800d8a2:	3330      	adds	r3, #48	; 0x30
 800d8a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d8a6:	f000 fad7 	bl	800de58 <writeMQTTString>
	}
	if (flags.bits.username)
 800d8aa:	7d3b      	ldrb	r3, [r7, #20]
 800d8ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d006      	beq.n	800d8c4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f107 001c 	add.w	r0, r7, #28
 800d8bc:	3340      	adds	r3, #64	; 0x40
 800d8be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d8c0:	f000 faca 	bl	800de58 <writeMQTTString>
	if (flags.bits.password)
 800d8c4:	7d3b      	ldrb	r3, [r7, #20]
 800d8c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d006      	beq.n	800d8de <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f107 001c 	add.w	r0, r7, #28
 800d8d6:	334c      	adds	r3, #76	; 0x4c
 800d8d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d8da:	f000 fabd 	bl	800de58 <writeMQTTString>

	rc = ptr - buf;
 800d8de:	69fa      	ldr	r2, [r7, #28]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3728      	adds	r7, #40	; 0x28
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}
 800d8f0:	08013d7c 	.word	0x08013d7c
 800d8f4:	08013d84 	.word	0x08013d84

0800d8f8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b08a      	sub	sp, #40	; 0x28
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
 800d904:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800d906:	2300      	movs	r3, #0
 800d908:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800d90e:	2300      	movs	r3, #0
 800d910:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800d916:	2300      	movs	r3, #0
 800d918:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d91a:	f107 0318 	add.w	r3, r7, #24
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 fa29 	bl	800dd76 <readChar>
 800d924:	4603      	mov	r3, r0
 800d926:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800d928:	7f3b      	ldrb	r3, [r7, #28]
 800d92a:	f023 030f 	bic.w	r3, r3, #15
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b20      	cmp	r3, #32
 800d932:	d12e      	bne.n	800d992 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	f107 0214 	add.w	r2, r7, #20
 800d93a:	4611      	mov	r1, r2
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 f9e9 	bl	800dd14 <MQTTPacket_decodeBuf>
 800d942:	6278      	str	r0, [r7, #36]	; 0x24
 800d944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	4413      	add	r3, r2
 800d94a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	697a      	ldr	r2, [r7, #20]
 800d950:	4413      	add	r3, r2
 800d952:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	6a3a      	ldr	r2, [r7, #32]
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	dd1b      	ble.n	800d996 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800d95e:	f107 0318 	add.w	r3, r7, #24
 800d962:	4618      	mov	r0, r3
 800d964:	f000 fa07 	bl	800dd76 <readChar>
 800d968:	4603      	mov	r3, r0
 800d96a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800d96c:	7c3b      	ldrb	r3, [r7, #16]
 800d96e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d972:	b2db      	uxtb	r3, r3
 800d974:	461a      	mov	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800d97a:	f107 0318 	add.w	r3, r7, #24
 800d97e:	4618      	mov	r0, r3
 800d980:	f000 f9f9 	bl	800dd76 <readChar>
 800d984:	4603      	mov	r3, r0
 800d986:	461a      	mov	r2, r3
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800d98c:	2301      	movs	r3, #1
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24
 800d990:	e002      	b.n	800d998 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800d992:	bf00      	nop
 800d994:	e000      	b.n	800d998 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800d996:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3728      	adds	r7, #40	; 0x28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b088      	sub	sp, #32
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	60f8      	str	r0, [r7, #12]
 800d9aa:	60b9      	str	r1, [r7, #8]
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800d9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	dc03      	bgt.n	800d9cc <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d9c4:	f06f 0301 	mvn.w	r3, #1
 800d9c8:	61fb      	str	r3, [r7, #28]
		goto exit;
 800d9ca:	e01d      	b.n	800da08 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 800d9d0:	79fb      	ldrb	r3, [r7, #7]
 800d9d2:	f003 030f 	and.w	r3, r3, #15
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	7e3b      	ldrb	r3, [r7, #24]
 800d9da:	f362 1307 	bfi	r3, r2, #4, #4
 800d9de:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800d9e0:	7e3a      	ldrb	r2, [r7, #24]
 800d9e2:	f107 0314 	add.w	r3, r7, #20
 800d9e6:	4611      	mov	r1, r2
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 f9d8 	bl	800dd9e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 f8d9 	bl	800dbaa <MQTTPacket_encode>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800da08:	69fb      	ldr	r3, [r7, #28]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3720      	adds	r7, #32
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b082      	sub	sp, #8
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800da1c:	220c      	movs	r2, #12
 800da1e:	6839      	ldr	r1, [r7, #0]
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff ffbe 	bl	800d9a2 <MQTTSerialize_zero>
 800da26:	4603      	mov	r3, r0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b08a      	sub	sp, #40	; 0x28
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
 800da3c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800da3e:	2300      	movs	r3, #0
 800da40:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800da42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da44:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800da46:	2300      	movs	r3, #0
 800da48:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800da4a:	2300      	movs	r3, #0
 800da4c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800da52:	f107 0318 	add.w	r3, r7, #24
 800da56:	4618      	mov	r0, r3
 800da58:	f000 f98d 	bl	800dd76 <readChar>
 800da5c:	4603      	mov	r3, r0
 800da5e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800da60:	7f3b      	ldrb	r3, [r7, #28]
 800da62:	f023 030f 	bic.w	r3, r3, #15
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b30      	cmp	r3, #48	; 0x30
 800da6a:	d14b      	bne.n	800db04 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800da6c:	7f3b      	ldrb	r3, [r7, #28]
 800da6e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800da72:	b2db      	uxtb	r3, r3
 800da74:	461a      	mov	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800da7a:	7f3b      	ldrb	r3, [r7, #28]
 800da7c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800da80:	b2db      	uxtb	r3, r3
 800da82:	461a      	mov	r2, r3
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800da88:	7f3b      	ldrb	r3, [r7, #28]
 800da8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	461a      	mov	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	f107 0214 	add.w	r2, r7, #20
 800da9c:	4611      	mov	r1, r2
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 f938 	bl	800dd14 <MQTTPacket_decodeBuf>
 800daa4:	6278      	str	r0, [r7, #36]	; 0x24
 800daa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	4413      	add	r3, r2
 800daac:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	4413      	add	r3, r2
 800dab4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800dab6:	f107 0318 	add.w	r3, r7, #24
 800daba:	6a3a      	ldr	r2, [r7, #32]
 800dabc:	4619      	mov	r1, r3
 800dabe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dac0:	f000 f9f8 	bl	800deb4 <readMQTTLenString>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d01e      	beq.n	800db08 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	6a3a      	ldr	r2, [r7, #32]
 800dace:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	db19      	blt.n	800db08 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	dd08      	ble.n	800daee <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800dadc:	f107 0318 	add.w	r3, r7, #24
 800dae0:	4618      	mov	r0, r3
 800dae2:	f000 f92d 	bl	800dd40 <readInt>
 800dae6:	4603      	mov	r3, r0
 800dae8:	b29a      	uxth	r2, r3
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	6a3a      	ldr	r2, [r7, #32]
 800daf2:	1ad2      	subs	r2, r2, r3
 800daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800daf8:	69ba      	ldr	r2, [r7, #24]
 800dafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dafc:	601a      	str	r2, [r3, #0]
	rc = 1;
 800dafe:	2301      	movs	r3, #1
 800db00:	627b      	str	r3, [r7, #36]	; 0x24
 800db02:	e002      	b.n	800db0a <MQTTDeserialize_publish+0xda>
		goto exit;
 800db04:	bf00      	nop
 800db06:	e000      	b.n	800db0a <MQTTDeserialize_publish+0xda>
		goto exit;
 800db08:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3728      	adds	r7, #40	; 0x28
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b08a      	sub	sp, #40	; 0x28
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
 800db20:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800db22:	2300      	movs	r3, #0
 800db24:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800db32:	f107 0318 	add.w	r3, r7, #24
 800db36:	4618      	mov	r0, r3
 800db38:	f000 f91d 	bl	800dd76 <readChar>
 800db3c:	4603      	mov	r3, r0
 800db3e:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800db40:	7f3b      	ldrb	r3, [r7, #28]
 800db42:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800db46:	b2db      	uxtb	r3, r3
 800db48:	461a      	mov	r2, r3
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800db4e:	7f3b      	ldrb	r3, [r7, #28]
 800db50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800db54:	b2db      	uxtb	r3, r3
 800db56:	461a      	mov	r2, r3
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	f107 0214 	add.w	r2, r7, #20
 800db62:	4611      	mov	r1, r2
 800db64:	4618      	mov	r0, r3
 800db66:	f000 f8d5 	bl	800dd14 <MQTTPacket_decodeBuf>
 800db6a:	6278      	str	r0, [r7, #36]	; 0x24
 800db6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	4413      	add	r3, r2
 800db72:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	697a      	ldr	r2, [r7, #20]
 800db78:	4413      	add	r3, r2
 800db7a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	6a3a      	ldr	r2, [r7, #32]
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	2b01      	cmp	r3, #1
 800db84:	dd0b      	ble.n	800db9e <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800db86:	f107 0318 	add.w	r3, r7, #24
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 f8d8 	bl	800dd40 <readInt>
 800db90:	4603      	mov	r3, r0
 800db92:	b29a      	uxth	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800db98:	2301      	movs	r3, #1
 800db9a:	627b      	str	r3, [r7, #36]	; 0x24
 800db9c:	e000      	b.n	800dba0 <MQTTDeserialize_ack+0x8c>
		goto exit;
 800db9e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3728      	adds	r7, #40	; 0x28
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800dbaa:	b480      	push	{r7}
 800dbac:	b085      	sub	sp, #20
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	425a      	negs	r2, r3
 800dbbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dbc4:	bf58      	it	pl
 800dbc6:	4253      	negpl	r3, r2
 800dbc8:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	da00      	bge.n	800dbd2 <MQTTPacket_encode+0x28>
 800dbd0:	337f      	adds	r3, #127	; 0x7f
 800dbd2:	11db      	asrs	r3, r3, #7
 800dbd4:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	dd03      	ble.n	800dbe4 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800dbdc:	7afb      	ldrb	r3, [r7, #11]
 800dbde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbe2:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	1c5a      	adds	r2, r3, #1
 800dbe8:	60fa      	str	r2, [r7, #12]
 800dbea:	461a      	mov	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	4413      	add	r3, r2
 800dbf0:	7afa      	ldrb	r2, [r7, #11]
 800dbf2:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	dcde      	bgt.n	800dbb8 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3714      	adds	r7, #20
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800dc12:	2301      	movs	r3, #1
 800dc14:	617b      	str	r3, [r7, #20]
	int len = 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800dc20:	f04f 33ff 	mov.w	r3, #4294967295
 800dc24:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	613b      	str	r3, [r7, #16]
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	2b04      	cmp	r3, #4
 800dc30:	dd03      	ble.n	800dc3a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800dc32:	f04f 33ff 	mov.w	r3, #4294967295
 800dc36:	60fb      	str	r3, [r7, #12]
			goto exit;
 800dc38:	e01d      	b.n	800dc76 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800dc3a:	f107 020b 	add.w	r2, r7, #11
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2101      	movs	r1, #1
 800dc42:	4610      	mov	r0, r2
 800dc44:	4798      	blx	r3
 800dc46:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d112      	bne.n	800dc74 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	7afb      	ldrb	r3, [r7, #11]
 800dc54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc58:	6979      	ldr	r1, [r7, #20]
 800dc5a:	fb01 f303 	mul.w	r3, r1, r3
 800dc5e:	441a      	add	r2, r3
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	01db      	lsls	r3, r3, #7
 800dc68:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800dc6a:	7afb      	ldrb	r3, [r7, #11]
 800dc6c:	b25b      	sxtb	r3, r3
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	dbd6      	blt.n	800dc20 <MQTTPacket_decode+0x18>
exit:
 800dc72:	e000      	b.n	800dc76 <MQTTPacket_decode+0x6e>
			goto exit;
 800dc74:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800dc76:	693b      	ldr	r3, [r7, #16]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3718      	adds	r7, #24
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b7f      	cmp	r3, #127	; 0x7f
 800dc92:	dc03      	bgt.n	800dc9c <MQTTPacket_len+0x1c>
		rem_len += 1;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	3301      	adds	r3, #1
 800dc98:	607b      	str	r3, [r7, #4]
 800dc9a:	e012      	b.n	800dcc2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dca2:	da03      	bge.n	800dcac <MQTTPacket_len+0x2c>
		rem_len += 2;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	3302      	adds	r3, #2
 800dca8:	607b      	str	r3, [r7, #4]
 800dcaa:	e00a      	b.n	800dcc2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	4a08      	ldr	r2, [pc, #32]	; (800dcd0 <MQTTPacket_len+0x50>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	dc03      	bgt.n	800dcbc <MQTTPacket_len+0x3c>
		rem_len += 3;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	3303      	adds	r3, #3
 800dcb8:	607b      	str	r3, [r7, #4]
 800dcba:	e002      	b.n	800dcc2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	607b      	str	r3, [r7, #4]
	return rem_len;
 800dcc2:	687b      	ldr	r3, [r7, #4]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr
 800dcd0:	001ffffe 	.word	0x001ffffe

0800dcd4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800dcde:	2300      	movs	r3, #0
 800dce0:	60fb      	str	r3, [r7, #12]
 800dce2:	e00a      	b.n	800dcfa <bufchar+0x26>
		*c = *bufptr++;
 800dce4:	4b0a      	ldr	r3, [pc, #40]	; (800dd10 <bufchar+0x3c>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	1c5a      	adds	r2, r3, #1
 800dcea:	4909      	ldr	r1, [pc, #36]	; (800dd10 <bufchar+0x3c>)
 800dcec:	600a      	str	r2, [r1, #0]
 800dcee:	781a      	ldrb	r2, [r3, #0]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	60fb      	str	r3, [r7, #12]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	dbf0      	blt.n	800dce4 <bufchar+0x10>
	return count;
 800dd02:	683b      	ldr	r3, [r7, #0]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	2000171c 	.word	0x2000171c

0800dd14 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800dd1e:	4a06      	ldr	r2, [pc, #24]	; (800dd38 <MQTTPacket_decodeBuf+0x24>)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	4805      	ldr	r0, [pc, #20]	; (800dd3c <MQTTPacket_decodeBuf+0x28>)
 800dd28:	f7ff ff6e 	bl	800dc08 <MQTTPacket_decode>
 800dd2c:	4603      	mov	r3, r0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	2000171c 	.word	0x2000171c
 800dd3c:	0800dcd5 	.word	0x0800dcd5

0800dd40 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	021b      	lsls	r3, r3, #8
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	3201      	adds	r2, #1
 800dd58:	7812      	ldrb	r2, [r2, #0]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	1c9a      	adds	r2, r3, #2
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	601a      	str	r2, [r3, #0]
	return len;
 800dd68:	68bb      	ldr	r3, [r7, #8]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3714      	adds	r7, #20
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800dd76:	b480      	push	{r7}
 800dd78:	b085      	sub	sp, #20
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	1c5a      	adds	r2, r3, #1
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	601a      	str	r2, [r3, #0]
	return c;
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr

0800dd9e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800dd9e:	b480      	push	{r7}
 800dda0:	b083      	sub	sp, #12
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
 800dda6:	460b      	mov	r3, r1
 800dda8:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	78fa      	ldrb	r2, [r7, #3]
 800ddb0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	601a      	str	r2, [r3, #0]
}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	da00      	bge.n	800ddda <writeInt+0x12>
 800ddd8:	33ff      	adds	r3, #255	; 0xff
 800ddda:	121b      	asrs	r3, r3, #8
 800dddc:	461a      	mov	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	b2d2      	uxtb	r2, r2
 800dde4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	1c5a      	adds	r2, r3, #1
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	425a      	negs	r2, r3
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	b2d2      	uxtb	r2, r2
 800ddf8:	bf58      	it	pl
 800ddfa:	4253      	negpl	r3, r2
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	6812      	ldr	r2, [r2, #0]
 800de00:	b2db      	uxtb	r3, r3
 800de02:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	601a      	str	r2, [r3, #0]
}
 800de0e:	bf00      	nop
 800de10:	370c      	adds	r7, #12
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr

0800de1a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b084      	sub	sp, #16
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800de24:	6838      	ldr	r0, [r7, #0]
 800de26:	f7f2 f9f5 	bl	8000214 <strlen>
 800de2a:	4603      	mov	r3, r0
 800de2c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800de2e:	68f9      	ldr	r1, [r7, #12]
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7ff ffc9 	bl	800ddc8 <writeInt>
	memcpy(*pptr, string, len);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	6839      	ldr	r1, [r7, #0]
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 fafc 	bl	800e43c <memcpy>
	*pptr += len;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	441a      	add	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	601a      	str	r2, [r3, #0]
}
 800de50:	bf00      	nop
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <writeMQTTString>:


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	4638      	mov	r0, r7
 800de62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	dd12      	ble.n	800de92 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	4619      	mov	r1, r3
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f7ff ffa9 	bl	800ddc8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	68b9      	ldr	r1, [r7, #8]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	4618      	mov	r0, r3
 800de80:	f000 fadc 	bl	800e43c <memcpy>
		*pptr += mqttstring.lenstring.len;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	441a      	add	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800de90:	e00c      	b.n	800deac <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d005      	beq.n	800dea4 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	4619      	mov	r1, r3
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f7ff ffbc 	bl	800de1a <writeCString>
}
 800dea2:	e003      	b.n	800deac <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800dea4:	2100      	movs	r1, #0
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f7ff ff8e 	bl	800ddc8 <writeInt>
}
 800deac:	bf00      	nop
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b086      	sub	sp, #24
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800dec0:	2300      	movs	r3, #0
 800dec2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	1ad3      	subs	r3, r2, r3
 800decc:	2b01      	cmp	r3, #1
 800dece:	dd1a      	ble.n	800df06 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800ded0:	68b8      	ldr	r0, [r7, #8]
 800ded2:	f7ff ff35 	bl	800dd40 <readInt>
 800ded6:	4602      	mov	r2, r0
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	6852      	ldr	r2, [r2, #4]
 800dee4:	4413      	add	r3, r2
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d30c      	bcc.n	800df06 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	6852      	ldr	r2, [r2, #4]
 800defc:	441a      	add	r2, r3
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	601a      	str	r2, [r3, #0]
			rc = 1;
 800df02:	2301      	movs	r3, #1
 800df04:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2200      	movs	r2, #0
 800df0a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800df0c:	697b      	ldr	r3, [r7, #20]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3718      	adds	r7, #24
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b086      	sub	sp, #24
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	1d3b      	adds	r3, r7, #4
 800df1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800df22:	2300      	movs	r3, #0
 800df24:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d006      	beq.n	800df3a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f2 f970 	bl	8000214 <strlen>
 800df34:	4603      	mov	r3, r0
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	e001      	b.n	800df3e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	617b      	str	r3, [r7, #20]
	return rc;
 800df3e:	697b      	ldr	r3, [r7, #20]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3718      	adds	r7, #24
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800df52:	2300      	movs	r3, #0
 800df54:	617b      	str	r3, [r7, #20]
		blen = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00a      	beq.n	800df78 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7f2 f951 	bl	8000214 <strlen>
 800df72:	4603      	mov	r3, r0
 800df74:	617b      	str	r3, [r7, #20]
 800df76:	e005      	b.n	800df84 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800df84:	6838      	ldr	r0, [r7, #0]
 800df86:	f7f2 f945 	bl	8000214 <strlen>
 800df8a:	4603      	mov	r3, r0
 800df8c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800df8e:	697a      	ldr	r2, [r7, #20]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	429a      	cmp	r2, r3
 800df94:	d10a      	bne.n	800dfac <MQTTPacket_equals+0x64>
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	461a      	mov	r2, r3
 800df9a:	6839      	ldr	r1, [r7, #0]
 800df9c:	6938      	ldr	r0, [r7, #16]
 800df9e:	f001 facb 	bl	800f538 <strncmp>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d101      	bne.n	800dfac <MQTTPacket_equals+0x64>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e000      	b.n	800dfae <MQTTPacket_equals+0x66>
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3718      	adds	r7, #24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b086      	sub	sp, #24
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	60f8      	str	r0, [r7, #12]
 800dfbe:	4638      	mov	r0, r7
 800dfc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800dfc8:	463b      	mov	r3, r7
 800dfca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfce:	f7ff ffa2 	bl	800df16 <MQTTstrlen>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	1c9a      	adds	r2, r3, #2
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	4413      	add	r3, r2
 800dfda:	697a      	ldr	r2, [r7, #20]
 800dfdc:	4413      	add	r3, r2
 800dfde:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	dd02      	ble.n	800dfec <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	3302      	adds	r3, #2
 800dfea:	617b      	str	r3, [r7, #20]
	return len;
 800dfec:	697b      	ldr	r3, [r7, #20]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3718      	adds	r7, #24
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b08a      	sub	sp, #40	; 0x28
 800dffa:	af02      	add	r7, sp, #8
 800dffc:	60f8      	str	r0, [r7, #12]
 800dffe:	60b9      	str	r1, [r7, #8]
 800e000:	603b      	str	r3, [r7, #0]
 800e002:	4613      	mov	r3, r2
 800e004:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800e00a:	2300      	movs	r3, #0
 800e00c:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800e012:	2300      	movs	r3, #0
 800e014:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800e016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e01e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e020:	6838      	ldr	r0, [r7, #0]
 800e022:	f7ff ffc8 	bl	800dfb6 <MQTTSerialize_publishLength>
 800e026:	61b8      	str	r0, [r7, #24]
 800e028:	69b8      	ldr	r0, [r7, #24]
 800e02a:	f7ff fe29 	bl	800dc80 <MQTTPacket_len>
 800e02e:	4602      	mov	r2, r0
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	4293      	cmp	r3, r2
 800e034:	da03      	bge.n	800e03e <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800e036:	f06f 0301 	mvn.w	r3, #1
 800e03a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800e03c:	e04c      	b.n	800e0d8 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800e03e:	7c3b      	ldrb	r3, [r7, #16]
 800e040:	2203      	movs	r2, #3
 800e042:	f362 1307 	bfi	r3, r2, #4, #4
 800e046:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	f003 0301 	and.w	r3, r3, #1
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	7c3b      	ldrb	r3, [r7, #16]
 800e052:	f362 03c3 	bfi	r3, r2, #3, #1
 800e056:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	f003 0303 	and.w	r3, r3, #3
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	7c3b      	ldrb	r3, [r7, #16]
 800e062:	f362 0342 	bfi	r3, r2, #1, #2
 800e066:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800e068:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	b2da      	uxtb	r2, r3
 800e072:	7c3b      	ldrb	r3, [r7, #16]
 800e074:	f362 0300 	bfi	r3, r2, #0, #1
 800e078:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800e07a:	7c3a      	ldrb	r2, [r7, #16]
 800e07c:	f107 0314 	add.w	r3, r7, #20
 800e080:	4611      	mov	r1, r2
 800e082:	4618      	mov	r0, r3
 800e084:	f7ff fe8b 	bl	800dd9e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	69b9      	ldr	r1, [r7, #24]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7ff fd8c 	bl	800dbaa <MQTTPacket_encode>
 800e092:	4602      	mov	r2, r0
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	4413      	add	r3, r2
 800e098:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800e09a:	f107 0014 	add.w	r0, r7, #20
 800e09e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e0a4:	f7ff fed8 	bl	800de58 <writeMQTTString>

	if (qos > 0)
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	dd06      	ble.n	800e0bc <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800e0ae:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e0b0:	f107 0314 	add.w	r3, r7, #20
 800e0b4:	4611      	mov	r1, r2
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff fe86 	bl	800ddc8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f000 f9ba 	bl	800e43c <memcpy>
	ptr += payloadlen;
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0cc:	4413      	add	r3, r2
 800e0ce:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800e0d8:	69fb      	ldr	r3, [r7, #28]
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3720      	adds	r7, #32
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b088      	sub	sp, #32
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	60f8      	str	r0, [r7, #12]
 800e0ea:	60b9      	str	r1, [r7, #8]
 800e0ec:	4611      	mov	r1, r2
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	71fb      	strb	r3, [r7, #7]
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	2b03      	cmp	r3, #3
 800e108:	dc03      	bgt.n	800e112 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800e10a:	f06f 0301 	mvn.w	r3, #1
 800e10e:	61fb      	str	r3, [r7, #28]
		goto exit;
 800e110:	e037      	b.n	800e182 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800e112:	79fb      	ldrb	r3, [r7, #7]
 800e114:	f003 030f 	and.w	r3, r3, #15
 800e118:	b2da      	uxtb	r2, r3
 800e11a:	7e3b      	ldrb	r3, [r7, #24]
 800e11c:	f362 1307 	bfi	r3, r2, #4, #4
 800e120:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800e122:	79bb      	ldrb	r3, [r7, #6]
 800e124:	f003 0301 	and.w	r3, r3, #1
 800e128:	b2da      	uxtb	r2, r3
 800e12a:	7e3b      	ldrb	r3, [r7, #24]
 800e12c:	f362 03c3 	bfi	r3, r2, #3, #1
 800e130:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800e132:	79fb      	ldrb	r3, [r7, #7]
 800e134:	2b06      	cmp	r3, #6
 800e136:	bf0c      	ite	eq
 800e138:	2301      	moveq	r3, #1
 800e13a:	2300      	movne	r3, #0
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	f003 0303 	and.w	r3, r3, #3
 800e142:	b2da      	uxtb	r2, r3
 800e144:	7e3b      	ldrb	r3, [r7, #24]
 800e146:	f362 0342 	bfi	r3, r2, #1, #2
 800e14a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800e14c:	7e3a      	ldrb	r2, [r7, #24]
 800e14e:	f107 0314 	add.w	r3, r7, #20
 800e152:	4611      	mov	r1, r2
 800e154:	4618      	mov	r0, r3
 800e156:	f7ff fe22 	bl	800dd9e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	2102      	movs	r1, #2
 800e15e:	4618      	mov	r0, r3
 800e160:	f7ff fd23 	bl	800dbaa <MQTTPacket_encode>
 800e164:	4602      	mov	r2, r0
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	4413      	add	r3, r2
 800e16a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800e16c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e16e:	f107 0314 	add.w	r3, r7, #20
 800e172:	4611      	mov	r1, r2
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fe27 	bl	800ddc8 <writeInt>
	rc = ptr - buf;
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	1ad3      	subs	r3, r2, r3
 800e180:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800e182:	69fb      	ldr	r3, [r7, #28]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3720      	adds	r7, #32
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800e196:	2302      	movs	r3, #2
 800e198:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800e19a:	2300      	movs	r3, #0
 800e19c:	60fb      	str	r3, [r7, #12]
 800e19e:	e013      	b.n	800e1c8 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	4413      	add	r3, r2
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	4413      	add	r3, r2
 800e1b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1b4:	f7ff feaf 	bl	800df16 <MQTTstrlen>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	3303      	adds	r3, #3
 800e1bc:	68ba      	ldr	r2, [r7, #8]
 800e1be:	4413      	add	r3, r2
 800e1c0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	60fb      	str	r3, [r7, #12]
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	dbe7      	blt.n	800e1a0 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3710      	adds	r7, #16
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b08a      	sub	sp, #40	; 0x28
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	60f8      	str	r0, [r7, #12]
 800e1e2:	60b9      	str	r1, [r7, #8]
 800e1e4:	4611      	mov	r1, r2
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	71fb      	strb	r3, [r7, #7]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800e200:	2300      	movs	r3, #0
 800e202:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800e204:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e208:	f7ff ffc0 	bl	800e18c <MQTTSerialize_subscribeLength>
 800e20c:	61f8      	str	r0, [r7, #28]
 800e20e:	69f8      	ldr	r0, [r7, #28]
 800e210:	f7ff fd36 	bl	800dc80 <MQTTPacket_len>
 800e214:	4602      	mov	r2, r0
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	4293      	cmp	r3, r2
 800e21a:	da03      	bge.n	800e224 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800e21c:	f06f 0301 	mvn.w	r3, #1
 800e220:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800e222:	e051      	b.n	800e2c8 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800e228:	7d3b      	ldrb	r3, [r7, #20]
 800e22a:	2208      	movs	r2, #8
 800e22c:	f362 1307 	bfi	r3, r2, #4, #4
 800e230:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800e232:	79fb      	ldrb	r3, [r7, #7]
 800e234:	f003 0301 	and.w	r3, r3, #1
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	7d3b      	ldrb	r3, [r7, #20]
 800e23c:	f362 03c3 	bfi	r3, r2, #3, #1
 800e240:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800e242:	7d3b      	ldrb	r3, [r7, #20]
 800e244:	2201      	movs	r2, #1
 800e246:	f362 0342 	bfi	r3, r2, #1, #2
 800e24a:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800e24c:	7d3a      	ldrb	r2, [r7, #20]
 800e24e:	f107 0318 	add.w	r3, r7, #24
 800e252:	4611      	mov	r1, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f7ff fda2 	bl	800dd9e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	69f9      	ldr	r1, [r7, #28]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7ff fca3 	bl	800dbaa <MQTTPacket_encode>
 800e264:	4602      	mov	r2, r0
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	4413      	add	r3, r2
 800e26a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800e26c:	88ba      	ldrh	r2, [r7, #4]
 800e26e:	f107 0318 	add.w	r3, r7, #24
 800e272:	4611      	mov	r1, r2
 800e274:	4618      	mov	r0, r3
 800e276:	f7ff fda7 	bl	800ddc8 <writeInt>

	for (i = 0; i < count; ++i)
 800e27a:	2300      	movs	r3, #0
 800e27c:	623b      	str	r3, [r7, #32]
 800e27e:	e01b      	b.n	800e2b8 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800e280:	6a3a      	ldr	r2, [r7, #32]
 800e282:	4613      	mov	r3, r2
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	4413      	add	r3, r2
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	461a      	mov	r2, r3
 800e28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e28e:	4413      	add	r3, r2
 800e290:	f107 0018 	add.w	r0, r7, #24
 800e294:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e296:	f7ff fddf 	bl	800de58 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2a0:	4413      	add	r3, r2
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	f107 0318 	add.w	r3, r7, #24
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7ff fd76 	bl	800dd9e <writeChar>
	for (i = 0; i < count; ++i)
 800e2b2:	6a3b      	ldr	r3, [r7, #32]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	623b      	str	r3, [r7, #32]
 800e2b8:	6a3a      	ldr	r2, [r7, #32]
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	dbdf      	blt.n	800e280 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800e2c0:	69ba      	ldr	r2, [r7, #24]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3728      	adds	r7, #40	; 0x28
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b08a      	sub	sp, #40	; 0x28
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	60f8      	str	r0, [r7, #12]
 800e2da:	60b9      	str	r1, [r7, #8]
 800e2dc:	607a      	str	r2, [r7, #4]
 800e2de:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800e2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e6:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800e2f0:	f107 0318 	add.w	r3, r7, #24
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff fd3e 	bl	800dd76 <readChar>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800e2fe:	7f3b      	ldrb	r3, [r7, #28]
 800e300:	f023 030f 	bic.w	r3, r3, #15
 800e304:	b2db      	uxtb	r3, r3
 800e306:	2b90      	cmp	r3, #144	; 0x90
 800e308:	d142      	bne.n	800e390 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	f107 0214 	add.w	r2, r7, #20
 800e310:	4611      	mov	r1, r2
 800e312:	4618      	mov	r0, r3
 800e314:	f7ff fcfe 	bl	800dd14 <MQTTPacket_decodeBuf>
 800e318:	6278      	str	r0, [r7, #36]	; 0x24
 800e31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	4413      	add	r3, r2
 800e320:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	697a      	ldr	r2, [r7, #20]
 800e326:	4413      	add	r3, r2
 800e328:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	6a3a      	ldr	r2, [r7, #32]
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	2b01      	cmp	r3, #1
 800e332:	dd2f      	ble.n	800e394 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800e334:	f107 0318 	add.w	r3, r7, #24
 800e338:	4618      	mov	r0, r3
 800e33a:	f7ff fd01 	bl	800dd40 <readInt>
 800e33e:	4603      	mov	r3, r0
 800e340:	b29a      	uxth	r2, r3
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800e34c:	e019      	b.n	800e382 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	429a      	cmp	r2, r3
 800e356:	da03      	bge.n	800e360 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 800e358:	f04f 33ff 	mov.w	r3, #4294967295
 800e35c:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800e35e:	e01a      	b.n	800e396 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 800e360:	f107 0318 	add.w	r3, r7, #24
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff fd06 	bl	800dd76 <readChar>
 800e36a:	4603      	mov	r3, r0
 800e36c:	4618      	mov	r0, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	1c59      	adds	r1, r3, #1
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	6011      	str	r1, [r2, #0]
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	4413      	add	r3, r2
 800e37e:	4602      	mov	r2, r0
 800e380:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	6a3a      	ldr	r2, [r7, #32]
 800e386:	429a      	cmp	r2, r3
 800e388:	d8e1      	bhi.n	800e34e <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800e38a:	2301      	movs	r3, #1
 800e38c:	627b      	str	r3, [r7, #36]	; 0x24
 800e38e:	e002      	b.n	800e396 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800e390:	bf00      	nop
 800e392:	e000      	b.n	800e396 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800e394:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3728      	adds	r7, #40	; 0x28
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <atoi>:
 800e3a0:	220a      	movs	r2, #10
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	f002 b810 	b.w	80103c8 <strtol>

0800e3a8 <__errno>:
 800e3a8:	4b01      	ldr	r3, [pc, #4]	; (800e3b0 <__errno+0x8>)
 800e3aa:	6818      	ldr	r0, [r3, #0]
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	2000001c 	.word	0x2000001c

0800e3b4 <__libc_init_array>:
 800e3b4:	b570      	push	{r4, r5, r6, lr}
 800e3b6:	4d0d      	ldr	r5, [pc, #52]	; (800e3ec <__libc_init_array+0x38>)
 800e3b8:	4c0d      	ldr	r4, [pc, #52]	; (800e3f0 <__libc_init_array+0x3c>)
 800e3ba:	1b64      	subs	r4, r4, r5
 800e3bc:	10a4      	asrs	r4, r4, #2
 800e3be:	2600      	movs	r6, #0
 800e3c0:	42a6      	cmp	r6, r4
 800e3c2:	d109      	bne.n	800e3d8 <__libc_init_array+0x24>
 800e3c4:	4d0b      	ldr	r5, [pc, #44]	; (800e3f4 <__libc_init_array+0x40>)
 800e3c6:	4c0c      	ldr	r4, [pc, #48]	; (800e3f8 <__libc_init_array+0x44>)
 800e3c8:	f004 fe54 	bl	8013074 <_init>
 800e3cc:	1b64      	subs	r4, r4, r5
 800e3ce:	10a4      	asrs	r4, r4, #2
 800e3d0:	2600      	movs	r6, #0
 800e3d2:	42a6      	cmp	r6, r4
 800e3d4:	d105      	bne.n	800e3e2 <__libc_init_array+0x2e>
 800e3d6:	bd70      	pop	{r4, r5, r6, pc}
 800e3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3dc:	4798      	blx	r3
 800e3de:	3601      	adds	r6, #1
 800e3e0:	e7ee      	b.n	800e3c0 <__libc_init_array+0xc>
 800e3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3e6:	4798      	blx	r3
 800e3e8:	3601      	adds	r6, #1
 800e3ea:	e7f2      	b.n	800e3d2 <__libc_init_array+0x1e>
 800e3ec:	080143d0 	.word	0x080143d0
 800e3f0:	080143d0 	.word	0x080143d0
 800e3f4:	080143d0 	.word	0x080143d0
 800e3f8:	080143d4 	.word	0x080143d4

0800e3fc <malloc>:
 800e3fc:	4b02      	ldr	r3, [pc, #8]	; (800e408 <malloc+0xc>)
 800e3fe:	4601      	mov	r1, r0
 800e400:	6818      	ldr	r0, [r3, #0]
 800e402:	f000 b89d 	b.w	800e540 <_malloc_r>
 800e406:	bf00      	nop
 800e408:	2000001c 	.word	0x2000001c

0800e40c <free>:
 800e40c:	4b02      	ldr	r3, [pc, #8]	; (800e418 <free+0xc>)
 800e40e:	4601      	mov	r1, r0
 800e410:	6818      	ldr	r0, [r3, #0]
 800e412:	f000 b829 	b.w	800e468 <_free_r>
 800e416:	bf00      	nop
 800e418:	2000001c 	.word	0x2000001c

0800e41c <memcmp>:
 800e41c:	b510      	push	{r4, lr}
 800e41e:	3901      	subs	r1, #1
 800e420:	4402      	add	r2, r0
 800e422:	4290      	cmp	r0, r2
 800e424:	d101      	bne.n	800e42a <memcmp+0xe>
 800e426:	2000      	movs	r0, #0
 800e428:	e005      	b.n	800e436 <memcmp+0x1a>
 800e42a:	7803      	ldrb	r3, [r0, #0]
 800e42c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e430:	42a3      	cmp	r3, r4
 800e432:	d001      	beq.n	800e438 <memcmp+0x1c>
 800e434:	1b18      	subs	r0, r3, r4
 800e436:	bd10      	pop	{r4, pc}
 800e438:	3001      	adds	r0, #1
 800e43a:	e7f2      	b.n	800e422 <memcmp+0x6>

0800e43c <memcpy>:
 800e43c:	440a      	add	r2, r1
 800e43e:	4291      	cmp	r1, r2
 800e440:	f100 33ff 	add.w	r3, r0, #4294967295
 800e444:	d100      	bne.n	800e448 <memcpy+0xc>
 800e446:	4770      	bx	lr
 800e448:	b510      	push	{r4, lr}
 800e44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e452:	4291      	cmp	r1, r2
 800e454:	d1f9      	bne.n	800e44a <memcpy+0xe>
 800e456:	bd10      	pop	{r4, pc}

0800e458 <memset>:
 800e458:	4402      	add	r2, r0
 800e45a:	4603      	mov	r3, r0
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d100      	bne.n	800e462 <memset+0xa>
 800e460:	4770      	bx	lr
 800e462:	f803 1b01 	strb.w	r1, [r3], #1
 800e466:	e7f9      	b.n	800e45c <memset+0x4>

0800e468 <_free_r>:
 800e468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e46a:	2900      	cmp	r1, #0
 800e46c:	d044      	beq.n	800e4f8 <_free_r+0x90>
 800e46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e472:	9001      	str	r0, [sp, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	f1a1 0404 	sub.w	r4, r1, #4
 800e47a:	bfb8      	it	lt
 800e47c:	18e4      	addlt	r4, r4, r3
 800e47e:	f003 fcbb 	bl	8011df8 <__malloc_lock>
 800e482:	4a1e      	ldr	r2, [pc, #120]	; (800e4fc <_free_r+0x94>)
 800e484:	9801      	ldr	r0, [sp, #4]
 800e486:	6813      	ldr	r3, [r2, #0]
 800e488:	b933      	cbnz	r3, 800e498 <_free_r+0x30>
 800e48a:	6063      	str	r3, [r4, #4]
 800e48c:	6014      	str	r4, [r2, #0]
 800e48e:	b003      	add	sp, #12
 800e490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e494:	f003 bcb6 	b.w	8011e04 <__malloc_unlock>
 800e498:	42a3      	cmp	r3, r4
 800e49a:	d908      	bls.n	800e4ae <_free_r+0x46>
 800e49c:	6825      	ldr	r5, [r4, #0]
 800e49e:	1961      	adds	r1, r4, r5
 800e4a0:	428b      	cmp	r3, r1
 800e4a2:	bf01      	itttt	eq
 800e4a4:	6819      	ldreq	r1, [r3, #0]
 800e4a6:	685b      	ldreq	r3, [r3, #4]
 800e4a8:	1949      	addeq	r1, r1, r5
 800e4aa:	6021      	streq	r1, [r4, #0]
 800e4ac:	e7ed      	b.n	800e48a <_free_r+0x22>
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	b10b      	cbz	r3, 800e4b8 <_free_r+0x50>
 800e4b4:	42a3      	cmp	r3, r4
 800e4b6:	d9fa      	bls.n	800e4ae <_free_r+0x46>
 800e4b8:	6811      	ldr	r1, [r2, #0]
 800e4ba:	1855      	adds	r5, r2, r1
 800e4bc:	42a5      	cmp	r5, r4
 800e4be:	d10b      	bne.n	800e4d8 <_free_r+0x70>
 800e4c0:	6824      	ldr	r4, [r4, #0]
 800e4c2:	4421      	add	r1, r4
 800e4c4:	1854      	adds	r4, r2, r1
 800e4c6:	42a3      	cmp	r3, r4
 800e4c8:	6011      	str	r1, [r2, #0]
 800e4ca:	d1e0      	bne.n	800e48e <_free_r+0x26>
 800e4cc:	681c      	ldr	r4, [r3, #0]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	6053      	str	r3, [r2, #4]
 800e4d2:	4421      	add	r1, r4
 800e4d4:	6011      	str	r1, [r2, #0]
 800e4d6:	e7da      	b.n	800e48e <_free_r+0x26>
 800e4d8:	d902      	bls.n	800e4e0 <_free_r+0x78>
 800e4da:	230c      	movs	r3, #12
 800e4dc:	6003      	str	r3, [r0, #0]
 800e4de:	e7d6      	b.n	800e48e <_free_r+0x26>
 800e4e0:	6825      	ldr	r5, [r4, #0]
 800e4e2:	1961      	adds	r1, r4, r5
 800e4e4:	428b      	cmp	r3, r1
 800e4e6:	bf04      	itt	eq
 800e4e8:	6819      	ldreq	r1, [r3, #0]
 800e4ea:	685b      	ldreq	r3, [r3, #4]
 800e4ec:	6063      	str	r3, [r4, #4]
 800e4ee:	bf04      	itt	eq
 800e4f0:	1949      	addeq	r1, r1, r5
 800e4f2:	6021      	streq	r1, [r4, #0]
 800e4f4:	6054      	str	r4, [r2, #4]
 800e4f6:	e7ca      	b.n	800e48e <_free_r+0x26>
 800e4f8:	b003      	add	sp, #12
 800e4fa:	bd30      	pop	{r4, r5, pc}
 800e4fc:	20001720 	.word	0x20001720

0800e500 <sbrk_aligned>:
 800e500:	b570      	push	{r4, r5, r6, lr}
 800e502:	4e0e      	ldr	r6, [pc, #56]	; (800e53c <sbrk_aligned+0x3c>)
 800e504:	460c      	mov	r4, r1
 800e506:	6831      	ldr	r1, [r6, #0]
 800e508:	4605      	mov	r5, r0
 800e50a:	b911      	cbnz	r1, 800e512 <sbrk_aligned+0x12>
 800e50c:	f000 ffaa 	bl	800f464 <_sbrk_r>
 800e510:	6030      	str	r0, [r6, #0]
 800e512:	4621      	mov	r1, r4
 800e514:	4628      	mov	r0, r5
 800e516:	f000 ffa5 	bl	800f464 <_sbrk_r>
 800e51a:	1c43      	adds	r3, r0, #1
 800e51c:	d00a      	beq.n	800e534 <sbrk_aligned+0x34>
 800e51e:	1cc4      	adds	r4, r0, #3
 800e520:	f024 0403 	bic.w	r4, r4, #3
 800e524:	42a0      	cmp	r0, r4
 800e526:	d007      	beq.n	800e538 <sbrk_aligned+0x38>
 800e528:	1a21      	subs	r1, r4, r0
 800e52a:	4628      	mov	r0, r5
 800e52c:	f000 ff9a 	bl	800f464 <_sbrk_r>
 800e530:	3001      	adds	r0, #1
 800e532:	d101      	bne.n	800e538 <sbrk_aligned+0x38>
 800e534:	f04f 34ff 	mov.w	r4, #4294967295
 800e538:	4620      	mov	r0, r4
 800e53a:	bd70      	pop	{r4, r5, r6, pc}
 800e53c:	20001724 	.word	0x20001724

0800e540 <_malloc_r>:
 800e540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e544:	1ccd      	adds	r5, r1, #3
 800e546:	f025 0503 	bic.w	r5, r5, #3
 800e54a:	3508      	adds	r5, #8
 800e54c:	2d0c      	cmp	r5, #12
 800e54e:	bf38      	it	cc
 800e550:	250c      	movcc	r5, #12
 800e552:	2d00      	cmp	r5, #0
 800e554:	4607      	mov	r7, r0
 800e556:	db01      	blt.n	800e55c <_malloc_r+0x1c>
 800e558:	42a9      	cmp	r1, r5
 800e55a:	d905      	bls.n	800e568 <_malloc_r+0x28>
 800e55c:	230c      	movs	r3, #12
 800e55e:	603b      	str	r3, [r7, #0]
 800e560:	2600      	movs	r6, #0
 800e562:	4630      	mov	r0, r6
 800e564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e568:	4e2e      	ldr	r6, [pc, #184]	; (800e624 <_malloc_r+0xe4>)
 800e56a:	f003 fc45 	bl	8011df8 <__malloc_lock>
 800e56e:	6833      	ldr	r3, [r6, #0]
 800e570:	461c      	mov	r4, r3
 800e572:	bb34      	cbnz	r4, 800e5c2 <_malloc_r+0x82>
 800e574:	4629      	mov	r1, r5
 800e576:	4638      	mov	r0, r7
 800e578:	f7ff ffc2 	bl	800e500 <sbrk_aligned>
 800e57c:	1c43      	adds	r3, r0, #1
 800e57e:	4604      	mov	r4, r0
 800e580:	d14d      	bne.n	800e61e <_malloc_r+0xde>
 800e582:	6834      	ldr	r4, [r6, #0]
 800e584:	4626      	mov	r6, r4
 800e586:	2e00      	cmp	r6, #0
 800e588:	d140      	bne.n	800e60c <_malloc_r+0xcc>
 800e58a:	6823      	ldr	r3, [r4, #0]
 800e58c:	4631      	mov	r1, r6
 800e58e:	4638      	mov	r0, r7
 800e590:	eb04 0803 	add.w	r8, r4, r3
 800e594:	f000 ff66 	bl	800f464 <_sbrk_r>
 800e598:	4580      	cmp	r8, r0
 800e59a:	d13a      	bne.n	800e612 <_malloc_r+0xd2>
 800e59c:	6821      	ldr	r1, [r4, #0]
 800e59e:	3503      	adds	r5, #3
 800e5a0:	1a6d      	subs	r5, r5, r1
 800e5a2:	f025 0503 	bic.w	r5, r5, #3
 800e5a6:	3508      	adds	r5, #8
 800e5a8:	2d0c      	cmp	r5, #12
 800e5aa:	bf38      	it	cc
 800e5ac:	250c      	movcc	r5, #12
 800e5ae:	4629      	mov	r1, r5
 800e5b0:	4638      	mov	r0, r7
 800e5b2:	f7ff ffa5 	bl	800e500 <sbrk_aligned>
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	d02b      	beq.n	800e612 <_malloc_r+0xd2>
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	442b      	add	r3, r5
 800e5be:	6023      	str	r3, [r4, #0]
 800e5c0:	e00e      	b.n	800e5e0 <_malloc_r+0xa0>
 800e5c2:	6822      	ldr	r2, [r4, #0]
 800e5c4:	1b52      	subs	r2, r2, r5
 800e5c6:	d41e      	bmi.n	800e606 <_malloc_r+0xc6>
 800e5c8:	2a0b      	cmp	r2, #11
 800e5ca:	d916      	bls.n	800e5fa <_malloc_r+0xba>
 800e5cc:	1961      	adds	r1, r4, r5
 800e5ce:	42a3      	cmp	r3, r4
 800e5d0:	6025      	str	r5, [r4, #0]
 800e5d2:	bf18      	it	ne
 800e5d4:	6059      	strne	r1, [r3, #4]
 800e5d6:	6863      	ldr	r3, [r4, #4]
 800e5d8:	bf08      	it	eq
 800e5da:	6031      	streq	r1, [r6, #0]
 800e5dc:	5162      	str	r2, [r4, r5]
 800e5de:	604b      	str	r3, [r1, #4]
 800e5e0:	4638      	mov	r0, r7
 800e5e2:	f104 060b 	add.w	r6, r4, #11
 800e5e6:	f003 fc0d 	bl	8011e04 <__malloc_unlock>
 800e5ea:	f026 0607 	bic.w	r6, r6, #7
 800e5ee:	1d23      	adds	r3, r4, #4
 800e5f0:	1af2      	subs	r2, r6, r3
 800e5f2:	d0b6      	beq.n	800e562 <_malloc_r+0x22>
 800e5f4:	1b9b      	subs	r3, r3, r6
 800e5f6:	50a3      	str	r3, [r4, r2]
 800e5f8:	e7b3      	b.n	800e562 <_malloc_r+0x22>
 800e5fa:	6862      	ldr	r2, [r4, #4]
 800e5fc:	42a3      	cmp	r3, r4
 800e5fe:	bf0c      	ite	eq
 800e600:	6032      	streq	r2, [r6, #0]
 800e602:	605a      	strne	r2, [r3, #4]
 800e604:	e7ec      	b.n	800e5e0 <_malloc_r+0xa0>
 800e606:	4623      	mov	r3, r4
 800e608:	6864      	ldr	r4, [r4, #4]
 800e60a:	e7b2      	b.n	800e572 <_malloc_r+0x32>
 800e60c:	4634      	mov	r4, r6
 800e60e:	6876      	ldr	r6, [r6, #4]
 800e610:	e7b9      	b.n	800e586 <_malloc_r+0x46>
 800e612:	230c      	movs	r3, #12
 800e614:	603b      	str	r3, [r7, #0]
 800e616:	4638      	mov	r0, r7
 800e618:	f003 fbf4 	bl	8011e04 <__malloc_unlock>
 800e61c:	e7a1      	b.n	800e562 <_malloc_r+0x22>
 800e61e:	6025      	str	r5, [r4, #0]
 800e620:	e7de      	b.n	800e5e0 <_malloc_r+0xa0>
 800e622:	bf00      	nop
 800e624:	20001720 	.word	0x20001720

0800e628 <__cvt>:
 800e628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e62c:	ec55 4b10 	vmov	r4, r5, d0
 800e630:	2d00      	cmp	r5, #0
 800e632:	460e      	mov	r6, r1
 800e634:	4619      	mov	r1, r3
 800e636:	462b      	mov	r3, r5
 800e638:	bfbb      	ittet	lt
 800e63a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e63e:	461d      	movlt	r5, r3
 800e640:	2300      	movge	r3, #0
 800e642:	232d      	movlt	r3, #45	; 0x2d
 800e644:	700b      	strb	r3, [r1, #0]
 800e646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e648:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e64c:	4691      	mov	r9, r2
 800e64e:	f023 0820 	bic.w	r8, r3, #32
 800e652:	bfbc      	itt	lt
 800e654:	4622      	movlt	r2, r4
 800e656:	4614      	movlt	r4, r2
 800e658:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e65c:	d005      	beq.n	800e66a <__cvt+0x42>
 800e65e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e662:	d100      	bne.n	800e666 <__cvt+0x3e>
 800e664:	3601      	adds	r6, #1
 800e666:	2102      	movs	r1, #2
 800e668:	e000      	b.n	800e66c <__cvt+0x44>
 800e66a:	2103      	movs	r1, #3
 800e66c:	ab03      	add	r3, sp, #12
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	ab02      	add	r3, sp, #8
 800e672:	9300      	str	r3, [sp, #0]
 800e674:	ec45 4b10 	vmov	d0, r4, r5
 800e678:	4653      	mov	r3, sl
 800e67a:	4632      	mov	r2, r6
 800e67c:	f002 f818 	bl	80106b0 <_dtoa_r>
 800e680:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e684:	4607      	mov	r7, r0
 800e686:	d102      	bne.n	800e68e <__cvt+0x66>
 800e688:	f019 0f01 	tst.w	r9, #1
 800e68c:	d022      	beq.n	800e6d4 <__cvt+0xac>
 800e68e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e692:	eb07 0906 	add.w	r9, r7, r6
 800e696:	d110      	bne.n	800e6ba <__cvt+0x92>
 800e698:	783b      	ldrb	r3, [r7, #0]
 800e69a:	2b30      	cmp	r3, #48	; 0x30
 800e69c:	d10a      	bne.n	800e6b4 <__cvt+0x8c>
 800e69e:	2200      	movs	r2, #0
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	f7f2 fa37 	bl	8000b18 <__aeabi_dcmpeq>
 800e6aa:	b918      	cbnz	r0, 800e6b4 <__cvt+0x8c>
 800e6ac:	f1c6 0601 	rsb	r6, r6, #1
 800e6b0:	f8ca 6000 	str.w	r6, [sl]
 800e6b4:	f8da 3000 	ldr.w	r3, [sl]
 800e6b8:	4499      	add	r9, r3
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	2300      	movs	r3, #0
 800e6be:	4620      	mov	r0, r4
 800e6c0:	4629      	mov	r1, r5
 800e6c2:	f7f2 fa29 	bl	8000b18 <__aeabi_dcmpeq>
 800e6c6:	b108      	cbz	r0, 800e6cc <__cvt+0xa4>
 800e6c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6cc:	2230      	movs	r2, #48	; 0x30
 800e6ce:	9b03      	ldr	r3, [sp, #12]
 800e6d0:	454b      	cmp	r3, r9
 800e6d2:	d307      	bcc.n	800e6e4 <__cvt+0xbc>
 800e6d4:	9b03      	ldr	r3, [sp, #12]
 800e6d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6d8:	1bdb      	subs	r3, r3, r7
 800e6da:	4638      	mov	r0, r7
 800e6dc:	6013      	str	r3, [r2, #0]
 800e6de:	b004      	add	sp, #16
 800e6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6e4:	1c59      	adds	r1, r3, #1
 800e6e6:	9103      	str	r1, [sp, #12]
 800e6e8:	701a      	strb	r2, [r3, #0]
 800e6ea:	e7f0      	b.n	800e6ce <__cvt+0xa6>

0800e6ec <__exponent>:
 800e6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2900      	cmp	r1, #0
 800e6f2:	bfb8      	it	lt
 800e6f4:	4249      	neglt	r1, r1
 800e6f6:	f803 2b02 	strb.w	r2, [r3], #2
 800e6fa:	bfb4      	ite	lt
 800e6fc:	222d      	movlt	r2, #45	; 0x2d
 800e6fe:	222b      	movge	r2, #43	; 0x2b
 800e700:	2909      	cmp	r1, #9
 800e702:	7042      	strb	r2, [r0, #1]
 800e704:	dd2a      	ble.n	800e75c <__exponent+0x70>
 800e706:	f10d 0407 	add.w	r4, sp, #7
 800e70a:	46a4      	mov	ip, r4
 800e70c:	270a      	movs	r7, #10
 800e70e:	46a6      	mov	lr, r4
 800e710:	460a      	mov	r2, r1
 800e712:	fb91 f6f7 	sdiv	r6, r1, r7
 800e716:	fb07 1516 	mls	r5, r7, r6, r1
 800e71a:	3530      	adds	r5, #48	; 0x30
 800e71c:	2a63      	cmp	r2, #99	; 0x63
 800e71e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e722:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e726:	4631      	mov	r1, r6
 800e728:	dcf1      	bgt.n	800e70e <__exponent+0x22>
 800e72a:	3130      	adds	r1, #48	; 0x30
 800e72c:	f1ae 0502 	sub.w	r5, lr, #2
 800e730:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e734:	1c44      	adds	r4, r0, #1
 800e736:	4629      	mov	r1, r5
 800e738:	4561      	cmp	r1, ip
 800e73a:	d30a      	bcc.n	800e752 <__exponent+0x66>
 800e73c:	f10d 0209 	add.w	r2, sp, #9
 800e740:	eba2 020e 	sub.w	r2, r2, lr
 800e744:	4565      	cmp	r5, ip
 800e746:	bf88      	it	hi
 800e748:	2200      	movhi	r2, #0
 800e74a:	4413      	add	r3, r2
 800e74c:	1a18      	subs	r0, r3, r0
 800e74e:	b003      	add	sp, #12
 800e750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e752:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e756:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e75a:	e7ed      	b.n	800e738 <__exponent+0x4c>
 800e75c:	2330      	movs	r3, #48	; 0x30
 800e75e:	3130      	adds	r1, #48	; 0x30
 800e760:	7083      	strb	r3, [r0, #2]
 800e762:	70c1      	strb	r1, [r0, #3]
 800e764:	1d03      	adds	r3, r0, #4
 800e766:	e7f1      	b.n	800e74c <__exponent+0x60>

0800e768 <_printf_float>:
 800e768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76c:	ed2d 8b02 	vpush	{d8}
 800e770:	b08d      	sub	sp, #52	; 0x34
 800e772:	460c      	mov	r4, r1
 800e774:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e778:	4616      	mov	r6, r2
 800e77a:	461f      	mov	r7, r3
 800e77c:	4605      	mov	r5, r0
 800e77e:	f003 fabd 	bl	8011cfc <_localeconv_r>
 800e782:	f8d0 a000 	ldr.w	sl, [r0]
 800e786:	4650      	mov	r0, sl
 800e788:	f7f1 fd44 	bl	8000214 <strlen>
 800e78c:	2300      	movs	r3, #0
 800e78e:	930a      	str	r3, [sp, #40]	; 0x28
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	9305      	str	r3, [sp, #20]
 800e794:	f8d8 3000 	ldr.w	r3, [r8]
 800e798:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e79c:	3307      	adds	r3, #7
 800e79e:	f023 0307 	bic.w	r3, r3, #7
 800e7a2:	f103 0208 	add.w	r2, r3, #8
 800e7a6:	f8c8 2000 	str.w	r2, [r8]
 800e7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e7b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e7b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e7ba:	9307      	str	r3, [sp, #28]
 800e7bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800e7c0:	ee08 0a10 	vmov	s16, r0
 800e7c4:	4b9f      	ldr	r3, [pc, #636]	; (800ea44 <_printf_float+0x2dc>)
 800e7c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e7ce:	f7f2 f9d5 	bl	8000b7c <__aeabi_dcmpun>
 800e7d2:	bb88      	cbnz	r0, 800e838 <_printf_float+0xd0>
 800e7d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7d8:	4b9a      	ldr	r3, [pc, #616]	; (800ea44 <_printf_float+0x2dc>)
 800e7da:	f04f 32ff 	mov.w	r2, #4294967295
 800e7de:	f7f2 f9af 	bl	8000b40 <__aeabi_dcmple>
 800e7e2:	bb48      	cbnz	r0, 800e838 <_printf_float+0xd0>
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	4640      	mov	r0, r8
 800e7ea:	4649      	mov	r1, r9
 800e7ec:	f7f2 f99e 	bl	8000b2c <__aeabi_dcmplt>
 800e7f0:	b110      	cbz	r0, 800e7f8 <_printf_float+0x90>
 800e7f2:	232d      	movs	r3, #45	; 0x2d
 800e7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7f8:	4b93      	ldr	r3, [pc, #588]	; (800ea48 <_printf_float+0x2e0>)
 800e7fa:	4894      	ldr	r0, [pc, #592]	; (800ea4c <_printf_float+0x2e4>)
 800e7fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e800:	bf94      	ite	ls
 800e802:	4698      	movls	r8, r3
 800e804:	4680      	movhi	r8, r0
 800e806:	2303      	movs	r3, #3
 800e808:	6123      	str	r3, [r4, #16]
 800e80a:	9b05      	ldr	r3, [sp, #20]
 800e80c:	f023 0204 	bic.w	r2, r3, #4
 800e810:	6022      	str	r2, [r4, #0]
 800e812:	f04f 0900 	mov.w	r9, #0
 800e816:	9700      	str	r7, [sp, #0]
 800e818:	4633      	mov	r3, r6
 800e81a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e81c:	4621      	mov	r1, r4
 800e81e:	4628      	mov	r0, r5
 800e820:	f000 f9d8 	bl	800ebd4 <_printf_common>
 800e824:	3001      	adds	r0, #1
 800e826:	f040 8090 	bne.w	800e94a <_printf_float+0x1e2>
 800e82a:	f04f 30ff 	mov.w	r0, #4294967295
 800e82e:	b00d      	add	sp, #52	; 0x34
 800e830:	ecbd 8b02 	vpop	{d8}
 800e834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e838:	4642      	mov	r2, r8
 800e83a:	464b      	mov	r3, r9
 800e83c:	4640      	mov	r0, r8
 800e83e:	4649      	mov	r1, r9
 800e840:	f7f2 f99c 	bl	8000b7c <__aeabi_dcmpun>
 800e844:	b140      	cbz	r0, 800e858 <_printf_float+0xf0>
 800e846:	464b      	mov	r3, r9
 800e848:	2b00      	cmp	r3, #0
 800e84a:	bfbc      	itt	lt
 800e84c:	232d      	movlt	r3, #45	; 0x2d
 800e84e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e852:	487f      	ldr	r0, [pc, #508]	; (800ea50 <_printf_float+0x2e8>)
 800e854:	4b7f      	ldr	r3, [pc, #508]	; (800ea54 <_printf_float+0x2ec>)
 800e856:	e7d1      	b.n	800e7fc <_printf_float+0x94>
 800e858:	6863      	ldr	r3, [r4, #4]
 800e85a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e85e:	9206      	str	r2, [sp, #24]
 800e860:	1c5a      	adds	r2, r3, #1
 800e862:	d13f      	bne.n	800e8e4 <_printf_float+0x17c>
 800e864:	2306      	movs	r3, #6
 800e866:	6063      	str	r3, [r4, #4]
 800e868:	9b05      	ldr	r3, [sp, #20]
 800e86a:	6861      	ldr	r1, [r4, #4]
 800e86c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e870:	2300      	movs	r3, #0
 800e872:	9303      	str	r3, [sp, #12]
 800e874:	ab0a      	add	r3, sp, #40	; 0x28
 800e876:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e87a:	ab09      	add	r3, sp, #36	; 0x24
 800e87c:	ec49 8b10 	vmov	d0, r8, r9
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	6022      	str	r2, [r4, #0]
 800e884:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e888:	4628      	mov	r0, r5
 800e88a:	f7ff fecd 	bl	800e628 <__cvt>
 800e88e:	9b06      	ldr	r3, [sp, #24]
 800e890:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e892:	2b47      	cmp	r3, #71	; 0x47
 800e894:	4680      	mov	r8, r0
 800e896:	d108      	bne.n	800e8aa <_printf_float+0x142>
 800e898:	1cc8      	adds	r0, r1, #3
 800e89a:	db02      	blt.n	800e8a2 <_printf_float+0x13a>
 800e89c:	6863      	ldr	r3, [r4, #4]
 800e89e:	4299      	cmp	r1, r3
 800e8a0:	dd41      	ble.n	800e926 <_printf_float+0x1be>
 800e8a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800e8a6:	fa5f fb8b 	uxtb.w	fp, fp
 800e8aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e8ae:	d820      	bhi.n	800e8f2 <_printf_float+0x18a>
 800e8b0:	3901      	subs	r1, #1
 800e8b2:	465a      	mov	r2, fp
 800e8b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e8b8:	9109      	str	r1, [sp, #36]	; 0x24
 800e8ba:	f7ff ff17 	bl	800e6ec <__exponent>
 800e8be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8c0:	1813      	adds	r3, r2, r0
 800e8c2:	2a01      	cmp	r2, #1
 800e8c4:	4681      	mov	r9, r0
 800e8c6:	6123      	str	r3, [r4, #16]
 800e8c8:	dc02      	bgt.n	800e8d0 <_printf_float+0x168>
 800e8ca:	6822      	ldr	r2, [r4, #0]
 800e8cc:	07d2      	lsls	r2, r2, #31
 800e8ce:	d501      	bpl.n	800e8d4 <_printf_float+0x16c>
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	6123      	str	r3, [r4, #16]
 800e8d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d09c      	beq.n	800e816 <_printf_float+0xae>
 800e8dc:	232d      	movs	r3, #45	; 0x2d
 800e8de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8e2:	e798      	b.n	800e816 <_printf_float+0xae>
 800e8e4:	9a06      	ldr	r2, [sp, #24]
 800e8e6:	2a47      	cmp	r2, #71	; 0x47
 800e8e8:	d1be      	bne.n	800e868 <_printf_float+0x100>
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1bc      	bne.n	800e868 <_printf_float+0x100>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	e7b9      	b.n	800e866 <_printf_float+0xfe>
 800e8f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e8f6:	d118      	bne.n	800e92a <_printf_float+0x1c2>
 800e8f8:	2900      	cmp	r1, #0
 800e8fa:	6863      	ldr	r3, [r4, #4]
 800e8fc:	dd0b      	ble.n	800e916 <_printf_float+0x1ae>
 800e8fe:	6121      	str	r1, [r4, #16]
 800e900:	b913      	cbnz	r3, 800e908 <_printf_float+0x1a0>
 800e902:	6822      	ldr	r2, [r4, #0]
 800e904:	07d0      	lsls	r0, r2, #31
 800e906:	d502      	bpl.n	800e90e <_printf_float+0x1a6>
 800e908:	3301      	adds	r3, #1
 800e90a:	440b      	add	r3, r1
 800e90c:	6123      	str	r3, [r4, #16]
 800e90e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e910:	f04f 0900 	mov.w	r9, #0
 800e914:	e7de      	b.n	800e8d4 <_printf_float+0x16c>
 800e916:	b913      	cbnz	r3, 800e91e <_printf_float+0x1b6>
 800e918:	6822      	ldr	r2, [r4, #0]
 800e91a:	07d2      	lsls	r2, r2, #31
 800e91c:	d501      	bpl.n	800e922 <_printf_float+0x1ba>
 800e91e:	3302      	adds	r3, #2
 800e920:	e7f4      	b.n	800e90c <_printf_float+0x1a4>
 800e922:	2301      	movs	r3, #1
 800e924:	e7f2      	b.n	800e90c <_printf_float+0x1a4>
 800e926:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e92c:	4299      	cmp	r1, r3
 800e92e:	db05      	blt.n	800e93c <_printf_float+0x1d4>
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	6121      	str	r1, [r4, #16]
 800e934:	07d8      	lsls	r0, r3, #31
 800e936:	d5ea      	bpl.n	800e90e <_printf_float+0x1a6>
 800e938:	1c4b      	adds	r3, r1, #1
 800e93a:	e7e7      	b.n	800e90c <_printf_float+0x1a4>
 800e93c:	2900      	cmp	r1, #0
 800e93e:	bfd4      	ite	le
 800e940:	f1c1 0202 	rsble	r2, r1, #2
 800e944:	2201      	movgt	r2, #1
 800e946:	4413      	add	r3, r2
 800e948:	e7e0      	b.n	800e90c <_printf_float+0x1a4>
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	055a      	lsls	r2, r3, #21
 800e94e:	d407      	bmi.n	800e960 <_printf_float+0x1f8>
 800e950:	6923      	ldr	r3, [r4, #16]
 800e952:	4642      	mov	r2, r8
 800e954:	4631      	mov	r1, r6
 800e956:	4628      	mov	r0, r5
 800e958:	47b8      	blx	r7
 800e95a:	3001      	adds	r0, #1
 800e95c:	d12c      	bne.n	800e9b8 <_printf_float+0x250>
 800e95e:	e764      	b.n	800e82a <_printf_float+0xc2>
 800e960:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e964:	f240 80e0 	bls.w	800eb28 <_printf_float+0x3c0>
 800e968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e96c:	2200      	movs	r2, #0
 800e96e:	2300      	movs	r3, #0
 800e970:	f7f2 f8d2 	bl	8000b18 <__aeabi_dcmpeq>
 800e974:	2800      	cmp	r0, #0
 800e976:	d034      	beq.n	800e9e2 <_printf_float+0x27a>
 800e978:	4a37      	ldr	r2, [pc, #220]	; (800ea58 <_printf_float+0x2f0>)
 800e97a:	2301      	movs	r3, #1
 800e97c:	4631      	mov	r1, r6
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	f43f af51 	beq.w	800e82a <_printf_float+0xc2>
 800e988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e98c:	429a      	cmp	r2, r3
 800e98e:	db02      	blt.n	800e996 <_printf_float+0x22e>
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	07d8      	lsls	r0, r3, #31
 800e994:	d510      	bpl.n	800e9b8 <_printf_float+0x250>
 800e996:	ee18 3a10 	vmov	r3, s16
 800e99a:	4652      	mov	r2, sl
 800e99c:	4631      	mov	r1, r6
 800e99e:	4628      	mov	r0, r5
 800e9a0:	47b8      	blx	r7
 800e9a2:	3001      	adds	r0, #1
 800e9a4:	f43f af41 	beq.w	800e82a <_printf_float+0xc2>
 800e9a8:	f04f 0800 	mov.w	r8, #0
 800e9ac:	f104 091a 	add.w	r9, r4, #26
 800e9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	4543      	cmp	r3, r8
 800e9b6:	dc09      	bgt.n	800e9cc <_printf_float+0x264>
 800e9b8:	6823      	ldr	r3, [r4, #0]
 800e9ba:	079b      	lsls	r3, r3, #30
 800e9bc:	f100 8105 	bmi.w	800ebca <_printf_float+0x462>
 800e9c0:	68e0      	ldr	r0, [r4, #12]
 800e9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9c4:	4298      	cmp	r0, r3
 800e9c6:	bfb8      	it	lt
 800e9c8:	4618      	movlt	r0, r3
 800e9ca:	e730      	b.n	800e82e <_printf_float+0xc6>
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	464a      	mov	r2, r9
 800e9d0:	4631      	mov	r1, r6
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	47b8      	blx	r7
 800e9d6:	3001      	adds	r0, #1
 800e9d8:	f43f af27 	beq.w	800e82a <_printf_float+0xc2>
 800e9dc:	f108 0801 	add.w	r8, r8, #1
 800e9e0:	e7e6      	b.n	800e9b0 <_printf_float+0x248>
 800e9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	dc39      	bgt.n	800ea5c <_printf_float+0x2f4>
 800e9e8:	4a1b      	ldr	r2, [pc, #108]	; (800ea58 <_printf_float+0x2f0>)
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	47b8      	blx	r7
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	f43f af19 	beq.w	800e82a <_printf_float+0xc2>
 800e9f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	d102      	bne.n	800ea06 <_printf_float+0x29e>
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	07d9      	lsls	r1, r3, #31
 800ea04:	d5d8      	bpl.n	800e9b8 <_printf_float+0x250>
 800ea06:	ee18 3a10 	vmov	r3, s16
 800ea0a:	4652      	mov	r2, sl
 800ea0c:	4631      	mov	r1, r6
 800ea0e:	4628      	mov	r0, r5
 800ea10:	47b8      	blx	r7
 800ea12:	3001      	adds	r0, #1
 800ea14:	f43f af09 	beq.w	800e82a <_printf_float+0xc2>
 800ea18:	f04f 0900 	mov.w	r9, #0
 800ea1c:	f104 0a1a 	add.w	sl, r4, #26
 800ea20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea22:	425b      	negs	r3, r3
 800ea24:	454b      	cmp	r3, r9
 800ea26:	dc01      	bgt.n	800ea2c <_printf_float+0x2c4>
 800ea28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea2a:	e792      	b.n	800e952 <_printf_float+0x1ea>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	4652      	mov	r2, sl
 800ea30:	4631      	mov	r1, r6
 800ea32:	4628      	mov	r0, r5
 800ea34:	47b8      	blx	r7
 800ea36:	3001      	adds	r0, #1
 800ea38:	f43f aef7 	beq.w	800e82a <_printf_float+0xc2>
 800ea3c:	f109 0901 	add.w	r9, r9, #1
 800ea40:	e7ee      	b.n	800ea20 <_printf_float+0x2b8>
 800ea42:	bf00      	nop
 800ea44:	7fefffff 	.word	0x7fefffff
 800ea48:	08013ec4 	.word	0x08013ec4
 800ea4c:	08013ec8 	.word	0x08013ec8
 800ea50:	08013ed0 	.word	0x08013ed0
 800ea54:	08013ecc 	.word	0x08013ecc
 800ea58:	08013ed4 	.word	0x08013ed4
 800ea5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea60:	429a      	cmp	r2, r3
 800ea62:	bfa8      	it	ge
 800ea64:	461a      	movge	r2, r3
 800ea66:	2a00      	cmp	r2, #0
 800ea68:	4691      	mov	r9, r2
 800ea6a:	dc37      	bgt.n	800eadc <_printf_float+0x374>
 800ea6c:	f04f 0b00 	mov.w	fp, #0
 800ea70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea74:	f104 021a 	add.w	r2, r4, #26
 800ea78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea7a:	9305      	str	r3, [sp, #20]
 800ea7c:	eba3 0309 	sub.w	r3, r3, r9
 800ea80:	455b      	cmp	r3, fp
 800ea82:	dc33      	bgt.n	800eaec <_printf_float+0x384>
 800ea84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	db3b      	blt.n	800eb04 <_printf_float+0x39c>
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	07da      	lsls	r2, r3, #31
 800ea90:	d438      	bmi.n	800eb04 <_printf_float+0x39c>
 800ea92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea94:	9a05      	ldr	r2, [sp, #20]
 800ea96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea98:	1a9a      	subs	r2, r3, r2
 800ea9a:	eba3 0901 	sub.w	r9, r3, r1
 800ea9e:	4591      	cmp	r9, r2
 800eaa0:	bfa8      	it	ge
 800eaa2:	4691      	movge	r9, r2
 800eaa4:	f1b9 0f00 	cmp.w	r9, #0
 800eaa8:	dc35      	bgt.n	800eb16 <_printf_float+0x3ae>
 800eaaa:	f04f 0800 	mov.w	r8, #0
 800eaae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eab2:	f104 0a1a 	add.w	sl, r4, #26
 800eab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eaba:	1a9b      	subs	r3, r3, r2
 800eabc:	eba3 0309 	sub.w	r3, r3, r9
 800eac0:	4543      	cmp	r3, r8
 800eac2:	f77f af79 	ble.w	800e9b8 <_printf_float+0x250>
 800eac6:	2301      	movs	r3, #1
 800eac8:	4652      	mov	r2, sl
 800eaca:	4631      	mov	r1, r6
 800eacc:	4628      	mov	r0, r5
 800eace:	47b8      	blx	r7
 800ead0:	3001      	adds	r0, #1
 800ead2:	f43f aeaa 	beq.w	800e82a <_printf_float+0xc2>
 800ead6:	f108 0801 	add.w	r8, r8, #1
 800eada:	e7ec      	b.n	800eab6 <_printf_float+0x34e>
 800eadc:	4613      	mov	r3, r2
 800eade:	4631      	mov	r1, r6
 800eae0:	4642      	mov	r2, r8
 800eae2:	4628      	mov	r0, r5
 800eae4:	47b8      	blx	r7
 800eae6:	3001      	adds	r0, #1
 800eae8:	d1c0      	bne.n	800ea6c <_printf_float+0x304>
 800eaea:	e69e      	b.n	800e82a <_printf_float+0xc2>
 800eaec:	2301      	movs	r3, #1
 800eaee:	4631      	mov	r1, r6
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	9205      	str	r2, [sp, #20]
 800eaf4:	47b8      	blx	r7
 800eaf6:	3001      	adds	r0, #1
 800eaf8:	f43f ae97 	beq.w	800e82a <_printf_float+0xc2>
 800eafc:	9a05      	ldr	r2, [sp, #20]
 800eafe:	f10b 0b01 	add.w	fp, fp, #1
 800eb02:	e7b9      	b.n	800ea78 <_printf_float+0x310>
 800eb04:	ee18 3a10 	vmov	r3, s16
 800eb08:	4652      	mov	r2, sl
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	47b8      	blx	r7
 800eb10:	3001      	adds	r0, #1
 800eb12:	d1be      	bne.n	800ea92 <_printf_float+0x32a>
 800eb14:	e689      	b.n	800e82a <_printf_float+0xc2>
 800eb16:	9a05      	ldr	r2, [sp, #20]
 800eb18:	464b      	mov	r3, r9
 800eb1a:	4442      	add	r2, r8
 800eb1c:	4631      	mov	r1, r6
 800eb1e:	4628      	mov	r0, r5
 800eb20:	47b8      	blx	r7
 800eb22:	3001      	adds	r0, #1
 800eb24:	d1c1      	bne.n	800eaaa <_printf_float+0x342>
 800eb26:	e680      	b.n	800e82a <_printf_float+0xc2>
 800eb28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb2a:	2a01      	cmp	r2, #1
 800eb2c:	dc01      	bgt.n	800eb32 <_printf_float+0x3ca>
 800eb2e:	07db      	lsls	r3, r3, #31
 800eb30:	d538      	bpl.n	800eba4 <_printf_float+0x43c>
 800eb32:	2301      	movs	r3, #1
 800eb34:	4642      	mov	r2, r8
 800eb36:	4631      	mov	r1, r6
 800eb38:	4628      	mov	r0, r5
 800eb3a:	47b8      	blx	r7
 800eb3c:	3001      	adds	r0, #1
 800eb3e:	f43f ae74 	beq.w	800e82a <_printf_float+0xc2>
 800eb42:	ee18 3a10 	vmov	r3, s16
 800eb46:	4652      	mov	r2, sl
 800eb48:	4631      	mov	r1, r6
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	47b8      	blx	r7
 800eb4e:	3001      	adds	r0, #1
 800eb50:	f43f ae6b 	beq.w	800e82a <_printf_float+0xc2>
 800eb54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb58:	2200      	movs	r2, #0
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	f7f1 ffdc 	bl	8000b18 <__aeabi_dcmpeq>
 800eb60:	b9d8      	cbnz	r0, 800eb9a <_printf_float+0x432>
 800eb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb64:	f108 0201 	add.w	r2, r8, #1
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	4631      	mov	r1, r6
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	47b8      	blx	r7
 800eb70:	3001      	adds	r0, #1
 800eb72:	d10e      	bne.n	800eb92 <_printf_float+0x42a>
 800eb74:	e659      	b.n	800e82a <_printf_float+0xc2>
 800eb76:	2301      	movs	r3, #1
 800eb78:	4652      	mov	r2, sl
 800eb7a:	4631      	mov	r1, r6
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	47b8      	blx	r7
 800eb80:	3001      	adds	r0, #1
 800eb82:	f43f ae52 	beq.w	800e82a <_printf_float+0xc2>
 800eb86:	f108 0801 	add.w	r8, r8, #1
 800eb8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	4543      	cmp	r3, r8
 800eb90:	dcf1      	bgt.n	800eb76 <_printf_float+0x40e>
 800eb92:	464b      	mov	r3, r9
 800eb94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb98:	e6dc      	b.n	800e954 <_printf_float+0x1ec>
 800eb9a:	f04f 0800 	mov.w	r8, #0
 800eb9e:	f104 0a1a 	add.w	sl, r4, #26
 800eba2:	e7f2      	b.n	800eb8a <_printf_float+0x422>
 800eba4:	2301      	movs	r3, #1
 800eba6:	4642      	mov	r2, r8
 800eba8:	e7df      	b.n	800eb6a <_printf_float+0x402>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	464a      	mov	r2, r9
 800ebae:	4631      	mov	r1, r6
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	47b8      	blx	r7
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	f43f ae38 	beq.w	800e82a <_printf_float+0xc2>
 800ebba:	f108 0801 	add.w	r8, r8, #1
 800ebbe:	68e3      	ldr	r3, [r4, #12]
 800ebc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebc2:	1a5b      	subs	r3, r3, r1
 800ebc4:	4543      	cmp	r3, r8
 800ebc6:	dcf0      	bgt.n	800ebaa <_printf_float+0x442>
 800ebc8:	e6fa      	b.n	800e9c0 <_printf_float+0x258>
 800ebca:	f04f 0800 	mov.w	r8, #0
 800ebce:	f104 0919 	add.w	r9, r4, #25
 800ebd2:	e7f4      	b.n	800ebbe <_printf_float+0x456>

0800ebd4 <_printf_common>:
 800ebd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd8:	4616      	mov	r6, r2
 800ebda:	4699      	mov	r9, r3
 800ebdc:	688a      	ldr	r2, [r1, #8]
 800ebde:	690b      	ldr	r3, [r1, #16]
 800ebe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	bfb8      	it	lt
 800ebe8:	4613      	movlt	r3, r2
 800ebea:	6033      	str	r3, [r6, #0]
 800ebec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebf0:	4607      	mov	r7, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	b10a      	cbz	r2, 800ebfa <_printf_common+0x26>
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	6033      	str	r3, [r6, #0]
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	0699      	lsls	r1, r3, #26
 800ebfe:	bf42      	ittt	mi
 800ec00:	6833      	ldrmi	r3, [r6, #0]
 800ec02:	3302      	addmi	r3, #2
 800ec04:	6033      	strmi	r3, [r6, #0]
 800ec06:	6825      	ldr	r5, [r4, #0]
 800ec08:	f015 0506 	ands.w	r5, r5, #6
 800ec0c:	d106      	bne.n	800ec1c <_printf_common+0x48>
 800ec0e:	f104 0a19 	add.w	sl, r4, #25
 800ec12:	68e3      	ldr	r3, [r4, #12]
 800ec14:	6832      	ldr	r2, [r6, #0]
 800ec16:	1a9b      	subs	r3, r3, r2
 800ec18:	42ab      	cmp	r3, r5
 800ec1a:	dc26      	bgt.n	800ec6a <_printf_common+0x96>
 800ec1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec20:	1e13      	subs	r3, r2, #0
 800ec22:	6822      	ldr	r2, [r4, #0]
 800ec24:	bf18      	it	ne
 800ec26:	2301      	movne	r3, #1
 800ec28:	0692      	lsls	r2, r2, #26
 800ec2a:	d42b      	bmi.n	800ec84 <_printf_common+0xb0>
 800ec2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec30:	4649      	mov	r1, r9
 800ec32:	4638      	mov	r0, r7
 800ec34:	47c0      	blx	r8
 800ec36:	3001      	adds	r0, #1
 800ec38:	d01e      	beq.n	800ec78 <_printf_common+0xa4>
 800ec3a:	6823      	ldr	r3, [r4, #0]
 800ec3c:	68e5      	ldr	r5, [r4, #12]
 800ec3e:	6832      	ldr	r2, [r6, #0]
 800ec40:	f003 0306 	and.w	r3, r3, #6
 800ec44:	2b04      	cmp	r3, #4
 800ec46:	bf08      	it	eq
 800ec48:	1aad      	subeq	r5, r5, r2
 800ec4a:	68a3      	ldr	r3, [r4, #8]
 800ec4c:	6922      	ldr	r2, [r4, #16]
 800ec4e:	bf0c      	ite	eq
 800ec50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec54:	2500      	movne	r5, #0
 800ec56:	4293      	cmp	r3, r2
 800ec58:	bfc4      	itt	gt
 800ec5a:	1a9b      	subgt	r3, r3, r2
 800ec5c:	18ed      	addgt	r5, r5, r3
 800ec5e:	2600      	movs	r6, #0
 800ec60:	341a      	adds	r4, #26
 800ec62:	42b5      	cmp	r5, r6
 800ec64:	d11a      	bne.n	800ec9c <_printf_common+0xc8>
 800ec66:	2000      	movs	r0, #0
 800ec68:	e008      	b.n	800ec7c <_printf_common+0xa8>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	4652      	mov	r2, sl
 800ec6e:	4649      	mov	r1, r9
 800ec70:	4638      	mov	r0, r7
 800ec72:	47c0      	blx	r8
 800ec74:	3001      	adds	r0, #1
 800ec76:	d103      	bne.n	800ec80 <_printf_common+0xac>
 800ec78:	f04f 30ff 	mov.w	r0, #4294967295
 800ec7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec80:	3501      	adds	r5, #1
 800ec82:	e7c6      	b.n	800ec12 <_printf_common+0x3e>
 800ec84:	18e1      	adds	r1, r4, r3
 800ec86:	1c5a      	adds	r2, r3, #1
 800ec88:	2030      	movs	r0, #48	; 0x30
 800ec8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec8e:	4422      	add	r2, r4
 800ec90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec98:	3302      	adds	r3, #2
 800ec9a:	e7c7      	b.n	800ec2c <_printf_common+0x58>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	4622      	mov	r2, r4
 800eca0:	4649      	mov	r1, r9
 800eca2:	4638      	mov	r0, r7
 800eca4:	47c0      	blx	r8
 800eca6:	3001      	adds	r0, #1
 800eca8:	d0e6      	beq.n	800ec78 <_printf_common+0xa4>
 800ecaa:	3601      	adds	r6, #1
 800ecac:	e7d9      	b.n	800ec62 <_printf_common+0x8e>
	...

0800ecb0 <_printf_i>:
 800ecb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb4:	7e0f      	ldrb	r7, [r1, #24]
 800ecb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ecb8:	2f78      	cmp	r7, #120	; 0x78
 800ecba:	4691      	mov	r9, r2
 800ecbc:	4680      	mov	r8, r0
 800ecbe:	460c      	mov	r4, r1
 800ecc0:	469a      	mov	sl, r3
 800ecc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ecc6:	d807      	bhi.n	800ecd8 <_printf_i+0x28>
 800ecc8:	2f62      	cmp	r7, #98	; 0x62
 800ecca:	d80a      	bhi.n	800ece2 <_printf_i+0x32>
 800eccc:	2f00      	cmp	r7, #0
 800ecce:	f000 80d8 	beq.w	800ee82 <_printf_i+0x1d2>
 800ecd2:	2f58      	cmp	r7, #88	; 0x58
 800ecd4:	f000 80a3 	beq.w	800ee1e <_printf_i+0x16e>
 800ecd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ece0:	e03a      	b.n	800ed58 <_printf_i+0xa8>
 800ece2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ece6:	2b15      	cmp	r3, #21
 800ece8:	d8f6      	bhi.n	800ecd8 <_printf_i+0x28>
 800ecea:	a101      	add	r1, pc, #4	; (adr r1, 800ecf0 <_printf_i+0x40>)
 800ecec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecf0:	0800ed49 	.word	0x0800ed49
 800ecf4:	0800ed5d 	.word	0x0800ed5d
 800ecf8:	0800ecd9 	.word	0x0800ecd9
 800ecfc:	0800ecd9 	.word	0x0800ecd9
 800ed00:	0800ecd9 	.word	0x0800ecd9
 800ed04:	0800ecd9 	.word	0x0800ecd9
 800ed08:	0800ed5d 	.word	0x0800ed5d
 800ed0c:	0800ecd9 	.word	0x0800ecd9
 800ed10:	0800ecd9 	.word	0x0800ecd9
 800ed14:	0800ecd9 	.word	0x0800ecd9
 800ed18:	0800ecd9 	.word	0x0800ecd9
 800ed1c:	0800ee69 	.word	0x0800ee69
 800ed20:	0800ed8d 	.word	0x0800ed8d
 800ed24:	0800ee4b 	.word	0x0800ee4b
 800ed28:	0800ecd9 	.word	0x0800ecd9
 800ed2c:	0800ecd9 	.word	0x0800ecd9
 800ed30:	0800ee8b 	.word	0x0800ee8b
 800ed34:	0800ecd9 	.word	0x0800ecd9
 800ed38:	0800ed8d 	.word	0x0800ed8d
 800ed3c:	0800ecd9 	.word	0x0800ecd9
 800ed40:	0800ecd9 	.word	0x0800ecd9
 800ed44:	0800ee53 	.word	0x0800ee53
 800ed48:	682b      	ldr	r3, [r5, #0]
 800ed4a:	1d1a      	adds	r2, r3, #4
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	602a      	str	r2, [r5, #0]
 800ed50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e0a3      	b.n	800eea4 <_printf_i+0x1f4>
 800ed5c:	6820      	ldr	r0, [r4, #0]
 800ed5e:	6829      	ldr	r1, [r5, #0]
 800ed60:	0606      	lsls	r6, r0, #24
 800ed62:	f101 0304 	add.w	r3, r1, #4
 800ed66:	d50a      	bpl.n	800ed7e <_printf_i+0xce>
 800ed68:	680e      	ldr	r6, [r1, #0]
 800ed6a:	602b      	str	r3, [r5, #0]
 800ed6c:	2e00      	cmp	r6, #0
 800ed6e:	da03      	bge.n	800ed78 <_printf_i+0xc8>
 800ed70:	232d      	movs	r3, #45	; 0x2d
 800ed72:	4276      	negs	r6, r6
 800ed74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed78:	485e      	ldr	r0, [pc, #376]	; (800eef4 <_printf_i+0x244>)
 800ed7a:	230a      	movs	r3, #10
 800ed7c:	e019      	b.n	800edb2 <_printf_i+0x102>
 800ed7e:	680e      	ldr	r6, [r1, #0]
 800ed80:	602b      	str	r3, [r5, #0]
 800ed82:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed86:	bf18      	it	ne
 800ed88:	b236      	sxthne	r6, r6
 800ed8a:	e7ef      	b.n	800ed6c <_printf_i+0xbc>
 800ed8c:	682b      	ldr	r3, [r5, #0]
 800ed8e:	6820      	ldr	r0, [r4, #0]
 800ed90:	1d19      	adds	r1, r3, #4
 800ed92:	6029      	str	r1, [r5, #0]
 800ed94:	0601      	lsls	r1, r0, #24
 800ed96:	d501      	bpl.n	800ed9c <_printf_i+0xec>
 800ed98:	681e      	ldr	r6, [r3, #0]
 800ed9a:	e002      	b.n	800eda2 <_printf_i+0xf2>
 800ed9c:	0646      	lsls	r6, r0, #25
 800ed9e:	d5fb      	bpl.n	800ed98 <_printf_i+0xe8>
 800eda0:	881e      	ldrh	r6, [r3, #0]
 800eda2:	4854      	ldr	r0, [pc, #336]	; (800eef4 <_printf_i+0x244>)
 800eda4:	2f6f      	cmp	r7, #111	; 0x6f
 800eda6:	bf0c      	ite	eq
 800eda8:	2308      	moveq	r3, #8
 800edaa:	230a      	movne	r3, #10
 800edac:	2100      	movs	r1, #0
 800edae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edb2:	6865      	ldr	r5, [r4, #4]
 800edb4:	60a5      	str	r5, [r4, #8]
 800edb6:	2d00      	cmp	r5, #0
 800edb8:	bfa2      	ittt	ge
 800edba:	6821      	ldrge	r1, [r4, #0]
 800edbc:	f021 0104 	bicge.w	r1, r1, #4
 800edc0:	6021      	strge	r1, [r4, #0]
 800edc2:	b90e      	cbnz	r6, 800edc8 <_printf_i+0x118>
 800edc4:	2d00      	cmp	r5, #0
 800edc6:	d04d      	beq.n	800ee64 <_printf_i+0x1b4>
 800edc8:	4615      	mov	r5, r2
 800edca:	fbb6 f1f3 	udiv	r1, r6, r3
 800edce:	fb03 6711 	mls	r7, r3, r1, r6
 800edd2:	5dc7      	ldrb	r7, [r0, r7]
 800edd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800edd8:	4637      	mov	r7, r6
 800edda:	42bb      	cmp	r3, r7
 800eddc:	460e      	mov	r6, r1
 800edde:	d9f4      	bls.n	800edca <_printf_i+0x11a>
 800ede0:	2b08      	cmp	r3, #8
 800ede2:	d10b      	bne.n	800edfc <_printf_i+0x14c>
 800ede4:	6823      	ldr	r3, [r4, #0]
 800ede6:	07de      	lsls	r6, r3, #31
 800ede8:	d508      	bpl.n	800edfc <_printf_i+0x14c>
 800edea:	6923      	ldr	r3, [r4, #16]
 800edec:	6861      	ldr	r1, [r4, #4]
 800edee:	4299      	cmp	r1, r3
 800edf0:	bfde      	ittt	le
 800edf2:	2330      	movle	r3, #48	; 0x30
 800edf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800edf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800edfc:	1b52      	subs	r2, r2, r5
 800edfe:	6122      	str	r2, [r4, #16]
 800ee00:	f8cd a000 	str.w	sl, [sp]
 800ee04:	464b      	mov	r3, r9
 800ee06:	aa03      	add	r2, sp, #12
 800ee08:	4621      	mov	r1, r4
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	f7ff fee2 	bl	800ebd4 <_printf_common>
 800ee10:	3001      	adds	r0, #1
 800ee12:	d14c      	bne.n	800eeae <_printf_i+0x1fe>
 800ee14:	f04f 30ff 	mov.w	r0, #4294967295
 800ee18:	b004      	add	sp, #16
 800ee1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee1e:	4835      	ldr	r0, [pc, #212]	; (800eef4 <_printf_i+0x244>)
 800ee20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ee24:	6829      	ldr	r1, [r5, #0]
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee2c:	6029      	str	r1, [r5, #0]
 800ee2e:	061d      	lsls	r5, r3, #24
 800ee30:	d514      	bpl.n	800ee5c <_printf_i+0x1ac>
 800ee32:	07df      	lsls	r7, r3, #31
 800ee34:	bf44      	itt	mi
 800ee36:	f043 0320 	orrmi.w	r3, r3, #32
 800ee3a:	6023      	strmi	r3, [r4, #0]
 800ee3c:	b91e      	cbnz	r6, 800ee46 <_printf_i+0x196>
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	f023 0320 	bic.w	r3, r3, #32
 800ee44:	6023      	str	r3, [r4, #0]
 800ee46:	2310      	movs	r3, #16
 800ee48:	e7b0      	b.n	800edac <_printf_i+0xfc>
 800ee4a:	6823      	ldr	r3, [r4, #0]
 800ee4c:	f043 0320 	orr.w	r3, r3, #32
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	2378      	movs	r3, #120	; 0x78
 800ee54:	4828      	ldr	r0, [pc, #160]	; (800eef8 <_printf_i+0x248>)
 800ee56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee5a:	e7e3      	b.n	800ee24 <_printf_i+0x174>
 800ee5c:	0659      	lsls	r1, r3, #25
 800ee5e:	bf48      	it	mi
 800ee60:	b2b6      	uxthmi	r6, r6
 800ee62:	e7e6      	b.n	800ee32 <_printf_i+0x182>
 800ee64:	4615      	mov	r5, r2
 800ee66:	e7bb      	b.n	800ede0 <_printf_i+0x130>
 800ee68:	682b      	ldr	r3, [r5, #0]
 800ee6a:	6826      	ldr	r6, [r4, #0]
 800ee6c:	6961      	ldr	r1, [r4, #20]
 800ee6e:	1d18      	adds	r0, r3, #4
 800ee70:	6028      	str	r0, [r5, #0]
 800ee72:	0635      	lsls	r5, r6, #24
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	d501      	bpl.n	800ee7c <_printf_i+0x1cc>
 800ee78:	6019      	str	r1, [r3, #0]
 800ee7a:	e002      	b.n	800ee82 <_printf_i+0x1d2>
 800ee7c:	0670      	lsls	r0, r6, #25
 800ee7e:	d5fb      	bpl.n	800ee78 <_printf_i+0x1c8>
 800ee80:	8019      	strh	r1, [r3, #0]
 800ee82:	2300      	movs	r3, #0
 800ee84:	6123      	str	r3, [r4, #16]
 800ee86:	4615      	mov	r5, r2
 800ee88:	e7ba      	b.n	800ee00 <_printf_i+0x150>
 800ee8a:	682b      	ldr	r3, [r5, #0]
 800ee8c:	1d1a      	adds	r2, r3, #4
 800ee8e:	602a      	str	r2, [r5, #0]
 800ee90:	681d      	ldr	r5, [r3, #0]
 800ee92:	6862      	ldr	r2, [r4, #4]
 800ee94:	2100      	movs	r1, #0
 800ee96:	4628      	mov	r0, r5
 800ee98:	f7f1 f9ca 	bl	8000230 <memchr>
 800ee9c:	b108      	cbz	r0, 800eea2 <_printf_i+0x1f2>
 800ee9e:	1b40      	subs	r0, r0, r5
 800eea0:	6060      	str	r0, [r4, #4]
 800eea2:	6863      	ldr	r3, [r4, #4]
 800eea4:	6123      	str	r3, [r4, #16]
 800eea6:	2300      	movs	r3, #0
 800eea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eeac:	e7a8      	b.n	800ee00 <_printf_i+0x150>
 800eeae:	6923      	ldr	r3, [r4, #16]
 800eeb0:	462a      	mov	r2, r5
 800eeb2:	4649      	mov	r1, r9
 800eeb4:	4640      	mov	r0, r8
 800eeb6:	47d0      	blx	sl
 800eeb8:	3001      	adds	r0, #1
 800eeba:	d0ab      	beq.n	800ee14 <_printf_i+0x164>
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	079b      	lsls	r3, r3, #30
 800eec0:	d413      	bmi.n	800eeea <_printf_i+0x23a>
 800eec2:	68e0      	ldr	r0, [r4, #12]
 800eec4:	9b03      	ldr	r3, [sp, #12]
 800eec6:	4298      	cmp	r0, r3
 800eec8:	bfb8      	it	lt
 800eeca:	4618      	movlt	r0, r3
 800eecc:	e7a4      	b.n	800ee18 <_printf_i+0x168>
 800eece:	2301      	movs	r3, #1
 800eed0:	4632      	mov	r2, r6
 800eed2:	4649      	mov	r1, r9
 800eed4:	4640      	mov	r0, r8
 800eed6:	47d0      	blx	sl
 800eed8:	3001      	adds	r0, #1
 800eeda:	d09b      	beq.n	800ee14 <_printf_i+0x164>
 800eedc:	3501      	adds	r5, #1
 800eede:	68e3      	ldr	r3, [r4, #12]
 800eee0:	9903      	ldr	r1, [sp, #12]
 800eee2:	1a5b      	subs	r3, r3, r1
 800eee4:	42ab      	cmp	r3, r5
 800eee6:	dcf2      	bgt.n	800eece <_printf_i+0x21e>
 800eee8:	e7eb      	b.n	800eec2 <_printf_i+0x212>
 800eeea:	2500      	movs	r5, #0
 800eeec:	f104 0619 	add.w	r6, r4, #25
 800eef0:	e7f5      	b.n	800eede <_printf_i+0x22e>
 800eef2:	bf00      	nop
 800eef4:	08013ed6 	.word	0x08013ed6
 800eef8:	08013ee7 	.word	0x08013ee7

0800eefc <_scanf_float>:
 800eefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef00:	b087      	sub	sp, #28
 800ef02:	4617      	mov	r7, r2
 800ef04:	9303      	str	r3, [sp, #12]
 800ef06:	688b      	ldr	r3, [r1, #8]
 800ef08:	1e5a      	subs	r2, r3, #1
 800ef0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ef0e:	bf83      	ittte	hi
 800ef10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ef14:	195b      	addhi	r3, r3, r5
 800ef16:	9302      	strhi	r3, [sp, #8]
 800ef18:	2300      	movls	r3, #0
 800ef1a:	bf86      	itte	hi
 800ef1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ef20:	608b      	strhi	r3, [r1, #8]
 800ef22:	9302      	strls	r3, [sp, #8]
 800ef24:	680b      	ldr	r3, [r1, #0]
 800ef26:	468b      	mov	fp, r1
 800ef28:	2500      	movs	r5, #0
 800ef2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ef2e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ef32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ef36:	4680      	mov	r8, r0
 800ef38:	460c      	mov	r4, r1
 800ef3a:	465e      	mov	r6, fp
 800ef3c:	46aa      	mov	sl, r5
 800ef3e:	46a9      	mov	r9, r5
 800ef40:	9501      	str	r5, [sp, #4]
 800ef42:	68a2      	ldr	r2, [r4, #8]
 800ef44:	b152      	cbz	r2, 800ef5c <_scanf_float+0x60>
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	2b4e      	cmp	r3, #78	; 0x4e
 800ef4c:	d864      	bhi.n	800f018 <_scanf_float+0x11c>
 800ef4e:	2b40      	cmp	r3, #64	; 0x40
 800ef50:	d83c      	bhi.n	800efcc <_scanf_float+0xd0>
 800ef52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ef56:	b2c8      	uxtb	r0, r1
 800ef58:	280e      	cmp	r0, #14
 800ef5a:	d93a      	bls.n	800efd2 <_scanf_float+0xd6>
 800ef5c:	f1b9 0f00 	cmp.w	r9, #0
 800ef60:	d003      	beq.n	800ef6a <_scanf_float+0x6e>
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef68:	6023      	str	r3, [r4, #0]
 800ef6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef6e:	f1ba 0f01 	cmp.w	sl, #1
 800ef72:	f200 8113 	bhi.w	800f19c <_scanf_float+0x2a0>
 800ef76:	455e      	cmp	r6, fp
 800ef78:	f200 8105 	bhi.w	800f186 <_scanf_float+0x28a>
 800ef7c:	2501      	movs	r5, #1
 800ef7e:	4628      	mov	r0, r5
 800ef80:	b007      	add	sp, #28
 800ef82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ef8a:	2a0d      	cmp	r2, #13
 800ef8c:	d8e6      	bhi.n	800ef5c <_scanf_float+0x60>
 800ef8e:	a101      	add	r1, pc, #4	; (adr r1, 800ef94 <_scanf_float+0x98>)
 800ef90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ef94:	0800f0d3 	.word	0x0800f0d3
 800ef98:	0800ef5d 	.word	0x0800ef5d
 800ef9c:	0800ef5d 	.word	0x0800ef5d
 800efa0:	0800ef5d 	.word	0x0800ef5d
 800efa4:	0800f133 	.word	0x0800f133
 800efa8:	0800f10b 	.word	0x0800f10b
 800efac:	0800ef5d 	.word	0x0800ef5d
 800efb0:	0800ef5d 	.word	0x0800ef5d
 800efb4:	0800f0e1 	.word	0x0800f0e1
 800efb8:	0800ef5d 	.word	0x0800ef5d
 800efbc:	0800ef5d 	.word	0x0800ef5d
 800efc0:	0800ef5d 	.word	0x0800ef5d
 800efc4:	0800ef5d 	.word	0x0800ef5d
 800efc8:	0800f099 	.word	0x0800f099
 800efcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800efd0:	e7db      	b.n	800ef8a <_scanf_float+0x8e>
 800efd2:	290e      	cmp	r1, #14
 800efd4:	d8c2      	bhi.n	800ef5c <_scanf_float+0x60>
 800efd6:	a001      	add	r0, pc, #4	; (adr r0, 800efdc <_scanf_float+0xe0>)
 800efd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800efdc:	0800f08b 	.word	0x0800f08b
 800efe0:	0800ef5d 	.word	0x0800ef5d
 800efe4:	0800f08b 	.word	0x0800f08b
 800efe8:	0800f11f 	.word	0x0800f11f
 800efec:	0800ef5d 	.word	0x0800ef5d
 800eff0:	0800f039 	.word	0x0800f039
 800eff4:	0800f075 	.word	0x0800f075
 800eff8:	0800f075 	.word	0x0800f075
 800effc:	0800f075 	.word	0x0800f075
 800f000:	0800f075 	.word	0x0800f075
 800f004:	0800f075 	.word	0x0800f075
 800f008:	0800f075 	.word	0x0800f075
 800f00c:	0800f075 	.word	0x0800f075
 800f010:	0800f075 	.word	0x0800f075
 800f014:	0800f075 	.word	0x0800f075
 800f018:	2b6e      	cmp	r3, #110	; 0x6e
 800f01a:	d809      	bhi.n	800f030 <_scanf_float+0x134>
 800f01c:	2b60      	cmp	r3, #96	; 0x60
 800f01e:	d8b2      	bhi.n	800ef86 <_scanf_float+0x8a>
 800f020:	2b54      	cmp	r3, #84	; 0x54
 800f022:	d077      	beq.n	800f114 <_scanf_float+0x218>
 800f024:	2b59      	cmp	r3, #89	; 0x59
 800f026:	d199      	bne.n	800ef5c <_scanf_float+0x60>
 800f028:	2d07      	cmp	r5, #7
 800f02a:	d197      	bne.n	800ef5c <_scanf_float+0x60>
 800f02c:	2508      	movs	r5, #8
 800f02e:	e029      	b.n	800f084 <_scanf_float+0x188>
 800f030:	2b74      	cmp	r3, #116	; 0x74
 800f032:	d06f      	beq.n	800f114 <_scanf_float+0x218>
 800f034:	2b79      	cmp	r3, #121	; 0x79
 800f036:	e7f6      	b.n	800f026 <_scanf_float+0x12a>
 800f038:	6821      	ldr	r1, [r4, #0]
 800f03a:	05c8      	lsls	r0, r1, #23
 800f03c:	d51a      	bpl.n	800f074 <_scanf_float+0x178>
 800f03e:	9b02      	ldr	r3, [sp, #8]
 800f040:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f044:	6021      	str	r1, [r4, #0]
 800f046:	f109 0901 	add.w	r9, r9, #1
 800f04a:	b11b      	cbz	r3, 800f054 <_scanf_float+0x158>
 800f04c:	3b01      	subs	r3, #1
 800f04e:	3201      	adds	r2, #1
 800f050:	9302      	str	r3, [sp, #8]
 800f052:	60a2      	str	r2, [r4, #8]
 800f054:	68a3      	ldr	r3, [r4, #8]
 800f056:	3b01      	subs	r3, #1
 800f058:	60a3      	str	r3, [r4, #8]
 800f05a:	6923      	ldr	r3, [r4, #16]
 800f05c:	3301      	adds	r3, #1
 800f05e:	6123      	str	r3, [r4, #16]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	3b01      	subs	r3, #1
 800f064:	2b00      	cmp	r3, #0
 800f066:	607b      	str	r3, [r7, #4]
 800f068:	f340 8084 	ble.w	800f174 <_scanf_float+0x278>
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	3301      	adds	r3, #1
 800f070:	603b      	str	r3, [r7, #0]
 800f072:	e766      	b.n	800ef42 <_scanf_float+0x46>
 800f074:	eb1a 0f05 	cmn.w	sl, r5
 800f078:	f47f af70 	bne.w	800ef5c <_scanf_float+0x60>
 800f07c:	6822      	ldr	r2, [r4, #0]
 800f07e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f082:	6022      	str	r2, [r4, #0]
 800f084:	f806 3b01 	strb.w	r3, [r6], #1
 800f088:	e7e4      	b.n	800f054 <_scanf_float+0x158>
 800f08a:	6822      	ldr	r2, [r4, #0]
 800f08c:	0610      	lsls	r0, r2, #24
 800f08e:	f57f af65 	bpl.w	800ef5c <_scanf_float+0x60>
 800f092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f096:	e7f4      	b.n	800f082 <_scanf_float+0x186>
 800f098:	f1ba 0f00 	cmp.w	sl, #0
 800f09c:	d10e      	bne.n	800f0bc <_scanf_float+0x1c0>
 800f09e:	f1b9 0f00 	cmp.w	r9, #0
 800f0a2:	d10e      	bne.n	800f0c2 <_scanf_float+0x1c6>
 800f0a4:	6822      	ldr	r2, [r4, #0]
 800f0a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f0aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f0ae:	d108      	bne.n	800f0c2 <_scanf_float+0x1c6>
 800f0b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f0b4:	6022      	str	r2, [r4, #0]
 800f0b6:	f04f 0a01 	mov.w	sl, #1
 800f0ba:	e7e3      	b.n	800f084 <_scanf_float+0x188>
 800f0bc:	f1ba 0f02 	cmp.w	sl, #2
 800f0c0:	d055      	beq.n	800f16e <_scanf_float+0x272>
 800f0c2:	2d01      	cmp	r5, #1
 800f0c4:	d002      	beq.n	800f0cc <_scanf_float+0x1d0>
 800f0c6:	2d04      	cmp	r5, #4
 800f0c8:	f47f af48 	bne.w	800ef5c <_scanf_float+0x60>
 800f0cc:	3501      	adds	r5, #1
 800f0ce:	b2ed      	uxtb	r5, r5
 800f0d0:	e7d8      	b.n	800f084 <_scanf_float+0x188>
 800f0d2:	f1ba 0f01 	cmp.w	sl, #1
 800f0d6:	f47f af41 	bne.w	800ef5c <_scanf_float+0x60>
 800f0da:	f04f 0a02 	mov.w	sl, #2
 800f0de:	e7d1      	b.n	800f084 <_scanf_float+0x188>
 800f0e0:	b97d      	cbnz	r5, 800f102 <_scanf_float+0x206>
 800f0e2:	f1b9 0f00 	cmp.w	r9, #0
 800f0e6:	f47f af3c 	bne.w	800ef62 <_scanf_float+0x66>
 800f0ea:	6822      	ldr	r2, [r4, #0]
 800f0ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f0f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f0f4:	f47f af39 	bne.w	800ef6a <_scanf_float+0x6e>
 800f0f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f0fc:	6022      	str	r2, [r4, #0]
 800f0fe:	2501      	movs	r5, #1
 800f100:	e7c0      	b.n	800f084 <_scanf_float+0x188>
 800f102:	2d03      	cmp	r5, #3
 800f104:	d0e2      	beq.n	800f0cc <_scanf_float+0x1d0>
 800f106:	2d05      	cmp	r5, #5
 800f108:	e7de      	b.n	800f0c8 <_scanf_float+0x1cc>
 800f10a:	2d02      	cmp	r5, #2
 800f10c:	f47f af26 	bne.w	800ef5c <_scanf_float+0x60>
 800f110:	2503      	movs	r5, #3
 800f112:	e7b7      	b.n	800f084 <_scanf_float+0x188>
 800f114:	2d06      	cmp	r5, #6
 800f116:	f47f af21 	bne.w	800ef5c <_scanf_float+0x60>
 800f11a:	2507      	movs	r5, #7
 800f11c:	e7b2      	b.n	800f084 <_scanf_float+0x188>
 800f11e:	6822      	ldr	r2, [r4, #0]
 800f120:	0591      	lsls	r1, r2, #22
 800f122:	f57f af1b 	bpl.w	800ef5c <_scanf_float+0x60>
 800f126:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f12a:	6022      	str	r2, [r4, #0]
 800f12c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f130:	e7a8      	b.n	800f084 <_scanf_float+0x188>
 800f132:	6822      	ldr	r2, [r4, #0]
 800f134:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f138:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f13c:	d006      	beq.n	800f14c <_scanf_float+0x250>
 800f13e:	0550      	lsls	r0, r2, #21
 800f140:	f57f af0c 	bpl.w	800ef5c <_scanf_float+0x60>
 800f144:	f1b9 0f00 	cmp.w	r9, #0
 800f148:	f43f af0f 	beq.w	800ef6a <_scanf_float+0x6e>
 800f14c:	0591      	lsls	r1, r2, #22
 800f14e:	bf58      	it	pl
 800f150:	9901      	ldrpl	r1, [sp, #4]
 800f152:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f156:	bf58      	it	pl
 800f158:	eba9 0101 	subpl.w	r1, r9, r1
 800f15c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f160:	bf58      	it	pl
 800f162:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f166:	6022      	str	r2, [r4, #0]
 800f168:	f04f 0900 	mov.w	r9, #0
 800f16c:	e78a      	b.n	800f084 <_scanf_float+0x188>
 800f16e:	f04f 0a03 	mov.w	sl, #3
 800f172:	e787      	b.n	800f084 <_scanf_float+0x188>
 800f174:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f178:	4639      	mov	r1, r7
 800f17a:	4640      	mov	r0, r8
 800f17c:	4798      	blx	r3
 800f17e:	2800      	cmp	r0, #0
 800f180:	f43f aedf 	beq.w	800ef42 <_scanf_float+0x46>
 800f184:	e6ea      	b.n	800ef5c <_scanf_float+0x60>
 800f186:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f18a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f18e:	463a      	mov	r2, r7
 800f190:	4640      	mov	r0, r8
 800f192:	4798      	blx	r3
 800f194:	6923      	ldr	r3, [r4, #16]
 800f196:	3b01      	subs	r3, #1
 800f198:	6123      	str	r3, [r4, #16]
 800f19a:	e6ec      	b.n	800ef76 <_scanf_float+0x7a>
 800f19c:	1e6b      	subs	r3, r5, #1
 800f19e:	2b06      	cmp	r3, #6
 800f1a0:	d825      	bhi.n	800f1ee <_scanf_float+0x2f2>
 800f1a2:	2d02      	cmp	r5, #2
 800f1a4:	d836      	bhi.n	800f214 <_scanf_float+0x318>
 800f1a6:	455e      	cmp	r6, fp
 800f1a8:	f67f aee8 	bls.w	800ef7c <_scanf_float+0x80>
 800f1ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f1b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f1b4:	463a      	mov	r2, r7
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	4798      	blx	r3
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	3b01      	subs	r3, #1
 800f1be:	6123      	str	r3, [r4, #16]
 800f1c0:	e7f1      	b.n	800f1a6 <_scanf_float+0x2aa>
 800f1c2:	9802      	ldr	r0, [sp, #8]
 800f1c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f1c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f1cc:	9002      	str	r0, [sp, #8]
 800f1ce:	463a      	mov	r2, r7
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	4798      	blx	r3
 800f1d4:	6923      	ldr	r3, [r4, #16]
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	6123      	str	r3, [r4, #16]
 800f1da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1de:	fa5f fa8a 	uxtb.w	sl, sl
 800f1e2:	f1ba 0f02 	cmp.w	sl, #2
 800f1e6:	d1ec      	bne.n	800f1c2 <_scanf_float+0x2c6>
 800f1e8:	3d03      	subs	r5, #3
 800f1ea:	b2ed      	uxtb	r5, r5
 800f1ec:	1b76      	subs	r6, r6, r5
 800f1ee:	6823      	ldr	r3, [r4, #0]
 800f1f0:	05da      	lsls	r2, r3, #23
 800f1f2:	d52f      	bpl.n	800f254 <_scanf_float+0x358>
 800f1f4:	055b      	lsls	r3, r3, #21
 800f1f6:	d510      	bpl.n	800f21a <_scanf_float+0x31e>
 800f1f8:	455e      	cmp	r6, fp
 800f1fa:	f67f aebf 	bls.w	800ef7c <_scanf_float+0x80>
 800f1fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f202:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f206:	463a      	mov	r2, r7
 800f208:	4640      	mov	r0, r8
 800f20a:	4798      	blx	r3
 800f20c:	6923      	ldr	r3, [r4, #16]
 800f20e:	3b01      	subs	r3, #1
 800f210:	6123      	str	r3, [r4, #16]
 800f212:	e7f1      	b.n	800f1f8 <_scanf_float+0x2fc>
 800f214:	46aa      	mov	sl, r5
 800f216:	9602      	str	r6, [sp, #8]
 800f218:	e7df      	b.n	800f1da <_scanf_float+0x2de>
 800f21a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f21e:	6923      	ldr	r3, [r4, #16]
 800f220:	2965      	cmp	r1, #101	; 0x65
 800f222:	f103 33ff 	add.w	r3, r3, #4294967295
 800f226:	f106 35ff 	add.w	r5, r6, #4294967295
 800f22a:	6123      	str	r3, [r4, #16]
 800f22c:	d00c      	beq.n	800f248 <_scanf_float+0x34c>
 800f22e:	2945      	cmp	r1, #69	; 0x45
 800f230:	d00a      	beq.n	800f248 <_scanf_float+0x34c>
 800f232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f236:	463a      	mov	r2, r7
 800f238:	4640      	mov	r0, r8
 800f23a:	4798      	blx	r3
 800f23c:	6923      	ldr	r3, [r4, #16]
 800f23e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f242:	3b01      	subs	r3, #1
 800f244:	1eb5      	subs	r5, r6, #2
 800f246:	6123      	str	r3, [r4, #16]
 800f248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f24c:	463a      	mov	r2, r7
 800f24e:	4640      	mov	r0, r8
 800f250:	4798      	blx	r3
 800f252:	462e      	mov	r6, r5
 800f254:	6825      	ldr	r5, [r4, #0]
 800f256:	f015 0510 	ands.w	r5, r5, #16
 800f25a:	d159      	bne.n	800f310 <_scanf_float+0x414>
 800f25c:	7035      	strb	r5, [r6, #0]
 800f25e:	6823      	ldr	r3, [r4, #0]
 800f260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f268:	d11b      	bne.n	800f2a2 <_scanf_float+0x3a6>
 800f26a:	9b01      	ldr	r3, [sp, #4]
 800f26c:	454b      	cmp	r3, r9
 800f26e:	eba3 0209 	sub.w	r2, r3, r9
 800f272:	d123      	bne.n	800f2bc <_scanf_float+0x3c0>
 800f274:	2200      	movs	r2, #0
 800f276:	4659      	mov	r1, fp
 800f278:	4640      	mov	r0, r8
 800f27a:	f000 ffbf 	bl	80101fc <_strtod_r>
 800f27e:	6822      	ldr	r2, [r4, #0]
 800f280:	9b03      	ldr	r3, [sp, #12]
 800f282:	f012 0f02 	tst.w	r2, #2
 800f286:	ec57 6b10 	vmov	r6, r7, d0
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	d021      	beq.n	800f2d2 <_scanf_float+0x3d6>
 800f28e:	9903      	ldr	r1, [sp, #12]
 800f290:	1d1a      	adds	r2, r3, #4
 800f292:	600a      	str	r2, [r1, #0]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	e9c3 6700 	strd	r6, r7, [r3]
 800f29a:	68e3      	ldr	r3, [r4, #12]
 800f29c:	3301      	adds	r3, #1
 800f29e:	60e3      	str	r3, [r4, #12]
 800f2a0:	e66d      	b.n	800ef7e <_scanf_float+0x82>
 800f2a2:	9b04      	ldr	r3, [sp, #16]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d0e5      	beq.n	800f274 <_scanf_float+0x378>
 800f2a8:	9905      	ldr	r1, [sp, #20]
 800f2aa:	230a      	movs	r3, #10
 800f2ac:	462a      	mov	r2, r5
 800f2ae:	3101      	adds	r1, #1
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	f001 f887 	bl	80103c4 <_strtol_r>
 800f2b6:	9b04      	ldr	r3, [sp, #16]
 800f2b8:	9e05      	ldr	r6, [sp, #20]
 800f2ba:	1ac2      	subs	r2, r0, r3
 800f2bc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f2c0:	429e      	cmp	r6, r3
 800f2c2:	bf28      	it	cs
 800f2c4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f2c8:	4912      	ldr	r1, [pc, #72]	; (800f314 <_scanf_float+0x418>)
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	f000 f914 	bl	800f4f8 <siprintf>
 800f2d0:	e7d0      	b.n	800f274 <_scanf_float+0x378>
 800f2d2:	9903      	ldr	r1, [sp, #12]
 800f2d4:	f012 0f04 	tst.w	r2, #4
 800f2d8:	f103 0204 	add.w	r2, r3, #4
 800f2dc:	600a      	str	r2, [r1, #0]
 800f2de:	d1d9      	bne.n	800f294 <_scanf_float+0x398>
 800f2e0:	f8d3 8000 	ldr.w	r8, [r3]
 800f2e4:	ee10 2a10 	vmov	r2, s0
 800f2e8:	ee10 0a10 	vmov	r0, s0
 800f2ec:	463b      	mov	r3, r7
 800f2ee:	4639      	mov	r1, r7
 800f2f0:	f7f1 fc44 	bl	8000b7c <__aeabi_dcmpun>
 800f2f4:	b128      	cbz	r0, 800f302 <_scanf_float+0x406>
 800f2f6:	4808      	ldr	r0, [pc, #32]	; (800f318 <_scanf_float+0x41c>)
 800f2f8:	f000 f8c4 	bl	800f484 <nanf>
 800f2fc:	ed88 0a00 	vstr	s0, [r8]
 800f300:	e7cb      	b.n	800f29a <_scanf_float+0x39e>
 800f302:	4630      	mov	r0, r6
 800f304:	4639      	mov	r1, r7
 800f306:	f7f1 fc97 	bl	8000c38 <__aeabi_d2f>
 800f30a:	f8c8 0000 	str.w	r0, [r8]
 800f30e:	e7c4      	b.n	800f29a <_scanf_float+0x39e>
 800f310:	2500      	movs	r5, #0
 800f312:	e634      	b.n	800ef7e <_scanf_float+0x82>
 800f314:	08013ef8 	.word	0x08013ef8
 800f318:	08013fff 	.word	0x08013fff

0800f31c <iprintf>:
 800f31c:	b40f      	push	{r0, r1, r2, r3}
 800f31e:	4b0a      	ldr	r3, [pc, #40]	; (800f348 <iprintf+0x2c>)
 800f320:	b513      	push	{r0, r1, r4, lr}
 800f322:	681c      	ldr	r4, [r3, #0]
 800f324:	b124      	cbz	r4, 800f330 <iprintf+0x14>
 800f326:	69a3      	ldr	r3, [r4, #24]
 800f328:	b913      	cbnz	r3, 800f330 <iprintf+0x14>
 800f32a:	4620      	mov	r0, r4
 800f32c:	f002 f8c8 	bl	80114c0 <__sinit>
 800f330:	ab05      	add	r3, sp, #20
 800f332:	9a04      	ldr	r2, [sp, #16]
 800f334:	68a1      	ldr	r1, [r4, #8]
 800f336:	9301      	str	r3, [sp, #4]
 800f338:	4620      	mov	r0, r4
 800f33a:	f003 fbc5 	bl	8012ac8 <_vfiprintf_r>
 800f33e:	b002      	add	sp, #8
 800f340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f344:	b004      	add	sp, #16
 800f346:	4770      	bx	lr
 800f348:	2000001c 	.word	0x2000001c

0800f34c <putchar>:
 800f34c:	4b09      	ldr	r3, [pc, #36]	; (800f374 <putchar+0x28>)
 800f34e:	b513      	push	{r0, r1, r4, lr}
 800f350:	681c      	ldr	r4, [r3, #0]
 800f352:	4601      	mov	r1, r0
 800f354:	b134      	cbz	r4, 800f364 <putchar+0x18>
 800f356:	69a3      	ldr	r3, [r4, #24]
 800f358:	b923      	cbnz	r3, 800f364 <putchar+0x18>
 800f35a:	9001      	str	r0, [sp, #4]
 800f35c:	4620      	mov	r0, r4
 800f35e:	f002 f8af 	bl	80114c0 <__sinit>
 800f362:	9901      	ldr	r1, [sp, #4]
 800f364:	68a2      	ldr	r2, [r4, #8]
 800f366:	4620      	mov	r0, r4
 800f368:	b002      	add	sp, #8
 800f36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f36e:	f003 bcdb 	b.w	8012d28 <_putc_r>
 800f372:	bf00      	nop
 800f374:	2000001c 	.word	0x2000001c

0800f378 <_puts_r>:
 800f378:	b570      	push	{r4, r5, r6, lr}
 800f37a:	460e      	mov	r6, r1
 800f37c:	4605      	mov	r5, r0
 800f37e:	b118      	cbz	r0, 800f388 <_puts_r+0x10>
 800f380:	6983      	ldr	r3, [r0, #24]
 800f382:	b90b      	cbnz	r3, 800f388 <_puts_r+0x10>
 800f384:	f002 f89c 	bl	80114c0 <__sinit>
 800f388:	69ab      	ldr	r3, [r5, #24]
 800f38a:	68ac      	ldr	r4, [r5, #8]
 800f38c:	b913      	cbnz	r3, 800f394 <_puts_r+0x1c>
 800f38e:	4628      	mov	r0, r5
 800f390:	f002 f896 	bl	80114c0 <__sinit>
 800f394:	4b2c      	ldr	r3, [pc, #176]	; (800f448 <_puts_r+0xd0>)
 800f396:	429c      	cmp	r4, r3
 800f398:	d120      	bne.n	800f3dc <_puts_r+0x64>
 800f39a:	686c      	ldr	r4, [r5, #4]
 800f39c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f39e:	07db      	lsls	r3, r3, #31
 800f3a0:	d405      	bmi.n	800f3ae <_puts_r+0x36>
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	0598      	lsls	r0, r3, #22
 800f3a6:	d402      	bmi.n	800f3ae <_puts_r+0x36>
 800f3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3aa:	f002 fcac 	bl	8011d06 <__retarget_lock_acquire_recursive>
 800f3ae:	89a3      	ldrh	r3, [r4, #12]
 800f3b0:	0719      	lsls	r1, r3, #28
 800f3b2:	d51d      	bpl.n	800f3f0 <_puts_r+0x78>
 800f3b4:	6923      	ldr	r3, [r4, #16]
 800f3b6:	b1db      	cbz	r3, 800f3f0 <_puts_r+0x78>
 800f3b8:	3e01      	subs	r6, #1
 800f3ba:	68a3      	ldr	r3, [r4, #8]
 800f3bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	60a3      	str	r3, [r4, #8]
 800f3c4:	bb39      	cbnz	r1, 800f416 <_puts_r+0x9e>
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	da38      	bge.n	800f43c <_puts_r+0xc4>
 800f3ca:	4622      	mov	r2, r4
 800f3cc:	210a      	movs	r1, #10
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f001 f804 	bl	80103dc <__swbuf_r>
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	d011      	beq.n	800f3fc <_puts_r+0x84>
 800f3d8:	250a      	movs	r5, #10
 800f3da:	e011      	b.n	800f400 <_puts_r+0x88>
 800f3dc:	4b1b      	ldr	r3, [pc, #108]	; (800f44c <_puts_r+0xd4>)
 800f3de:	429c      	cmp	r4, r3
 800f3e0:	d101      	bne.n	800f3e6 <_puts_r+0x6e>
 800f3e2:	68ac      	ldr	r4, [r5, #8]
 800f3e4:	e7da      	b.n	800f39c <_puts_r+0x24>
 800f3e6:	4b1a      	ldr	r3, [pc, #104]	; (800f450 <_puts_r+0xd8>)
 800f3e8:	429c      	cmp	r4, r3
 800f3ea:	bf08      	it	eq
 800f3ec:	68ec      	ldreq	r4, [r5, #12]
 800f3ee:	e7d5      	b.n	800f39c <_puts_r+0x24>
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	f001 f844 	bl	8010480 <__swsetup_r>
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	d0dd      	beq.n	800f3b8 <_puts_r+0x40>
 800f3fc:	f04f 35ff 	mov.w	r5, #4294967295
 800f400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f402:	07da      	lsls	r2, r3, #31
 800f404:	d405      	bmi.n	800f412 <_puts_r+0x9a>
 800f406:	89a3      	ldrh	r3, [r4, #12]
 800f408:	059b      	lsls	r3, r3, #22
 800f40a:	d402      	bmi.n	800f412 <_puts_r+0x9a>
 800f40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f40e:	f002 fc7b 	bl	8011d08 <__retarget_lock_release_recursive>
 800f412:	4628      	mov	r0, r5
 800f414:	bd70      	pop	{r4, r5, r6, pc}
 800f416:	2b00      	cmp	r3, #0
 800f418:	da04      	bge.n	800f424 <_puts_r+0xac>
 800f41a:	69a2      	ldr	r2, [r4, #24]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	dc06      	bgt.n	800f42e <_puts_r+0xb6>
 800f420:	290a      	cmp	r1, #10
 800f422:	d004      	beq.n	800f42e <_puts_r+0xb6>
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	6022      	str	r2, [r4, #0]
 800f42a:	7019      	strb	r1, [r3, #0]
 800f42c:	e7c5      	b.n	800f3ba <_puts_r+0x42>
 800f42e:	4622      	mov	r2, r4
 800f430:	4628      	mov	r0, r5
 800f432:	f000 ffd3 	bl	80103dc <__swbuf_r>
 800f436:	3001      	adds	r0, #1
 800f438:	d1bf      	bne.n	800f3ba <_puts_r+0x42>
 800f43a:	e7df      	b.n	800f3fc <_puts_r+0x84>
 800f43c:	6823      	ldr	r3, [r4, #0]
 800f43e:	250a      	movs	r5, #10
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	6022      	str	r2, [r4, #0]
 800f444:	701d      	strb	r5, [r3, #0]
 800f446:	e7db      	b.n	800f400 <_puts_r+0x88>
 800f448:	0801419c 	.word	0x0801419c
 800f44c:	080141bc 	.word	0x080141bc
 800f450:	0801417c 	.word	0x0801417c

0800f454 <puts>:
 800f454:	4b02      	ldr	r3, [pc, #8]	; (800f460 <puts+0xc>)
 800f456:	4601      	mov	r1, r0
 800f458:	6818      	ldr	r0, [r3, #0]
 800f45a:	f7ff bf8d 	b.w	800f378 <_puts_r>
 800f45e:	bf00      	nop
 800f460:	2000001c 	.word	0x2000001c

0800f464 <_sbrk_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4d06      	ldr	r5, [pc, #24]	; (800f480 <_sbrk_r+0x1c>)
 800f468:	2300      	movs	r3, #0
 800f46a:	4604      	mov	r4, r0
 800f46c:	4608      	mov	r0, r1
 800f46e:	602b      	str	r3, [r5, #0]
 800f470:	f7f4 fc86 	bl	8003d80 <_sbrk>
 800f474:	1c43      	adds	r3, r0, #1
 800f476:	d102      	bne.n	800f47e <_sbrk_r+0x1a>
 800f478:	682b      	ldr	r3, [r5, #0]
 800f47a:	b103      	cbz	r3, 800f47e <_sbrk_r+0x1a>
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	bd38      	pop	{r3, r4, r5, pc}
 800f480:	2000172c 	.word	0x2000172c

0800f484 <nanf>:
 800f484:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f48c <nanf+0x8>
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	7fc00000 	.word	0x7fc00000

0800f490 <sniprintf>:
 800f490:	b40c      	push	{r2, r3}
 800f492:	b530      	push	{r4, r5, lr}
 800f494:	4b17      	ldr	r3, [pc, #92]	; (800f4f4 <sniprintf+0x64>)
 800f496:	1e0c      	subs	r4, r1, #0
 800f498:	681d      	ldr	r5, [r3, #0]
 800f49a:	b09d      	sub	sp, #116	; 0x74
 800f49c:	da08      	bge.n	800f4b0 <sniprintf+0x20>
 800f49e:	238b      	movs	r3, #139	; 0x8b
 800f4a0:	602b      	str	r3, [r5, #0]
 800f4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a6:	b01d      	add	sp, #116	; 0x74
 800f4a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4ac:	b002      	add	sp, #8
 800f4ae:	4770      	bx	lr
 800f4b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f4b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f4b8:	bf14      	ite	ne
 800f4ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f4be:	4623      	moveq	r3, r4
 800f4c0:	9304      	str	r3, [sp, #16]
 800f4c2:	9307      	str	r3, [sp, #28]
 800f4c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4c8:	9002      	str	r0, [sp, #8]
 800f4ca:	9006      	str	r0, [sp, #24]
 800f4cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f4d2:	ab21      	add	r3, sp, #132	; 0x84
 800f4d4:	a902      	add	r1, sp, #8
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	9301      	str	r3, [sp, #4]
 800f4da:	f003 f9cb 	bl	8012874 <_svfiprintf_r>
 800f4de:	1c43      	adds	r3, r0, #1
 800f4e0:	bfbc      	itt	lt
 800f4e2:	238b      	movlt	r3, #139	; 0x8b
 800f4e4:	602b      	strlt	r3, [r5, #0]
 800f4e6:	2c00      	cmp	r4, #0
 800f4e8:	d0dd      	beq.n	800f4a6 <sniprintf+0x16>
 800f4ea:	9b02      	ldr	r3, [sp, #8]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	701a      	strb	r2, [r3, #0]
 800f4f0:	e7d9      	b.n	800f4a6 <sniprintf+0x16>
 800f4f2:	bf00      	nop
 800f4f4:	2000001c 	.word	0x2000001c

0800f4f8 <siprintf>:
 800f4f8:	b40e      	push	{r1, r2, r3}
 800f4fa:	b500      	push	{lr}
 800f4fc:	b09c      	sub	sp, #112	; 0x70
 800f4fe:	ab1d      	add	r3, sp, #116	; 0x74
 800f500:	9002      	str	r0, [sp, #8]
 800f502:	9006      	str	r0, [sp, #24]
 800f504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f508:	4809      	ldr	r0, [pc, #36]	; (800f530 <siprintf+0x38>)
 800f50a:	9107      	str	r1, [sp, #28]
 800f50c:	9104      	str	r1, [sp, #16]
 800f50e:	4909      	ldr	r1, [pc, #36]	; (800f534 <siprintf+0x3c>)
 800f510:	f853 2b04 	ldr.w	r2, [r3], #4
 800f514:	9105      	str	r1, [sp, #20]
 800f516:	6800      	ldr	r0, [r0, #0]
 800f518:	9301      	str	r3, [sp, #4]
 800f51a:	a902      	add	r1, sp, #8
 800f51c:	f003 f9aa 	bl	8012874 <_svfiprintf_r>
 800f520:	9b02      	ldr	r3, [sp, #8]
 800f522:	2200      	movs	r2, #0
 800f524:	701a      	strb	r2, [r3, #0]
 800f526:	b01c      	add	sp, #112	; 0x70
 800f528:	f85d eb04 	ldr.w	lr, [sp], #4
 800f52c:	b003      	add	sp, #12
 800f52e:	4770      	bx	lr
 800f530:	2000001c 	.word	0x2000001c
 800f534:	ffff0208 	.word	0xffff0208

0800f538 <strncmp>:
 800f538:	b510      	push	{r4, lr}
 800f53a:	b17a      	cbz	r2, 800f55c <strncmp+0x24>
 800f53c:	4603      	mov	r3, r0
 800f53e:	3901      	subs	r1, #1
 800f540:	1884      	adds	r4, r0, r2
 800f542:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f546:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f54a:	4290      	cmp	r0, r2
 800f54c:	d101      	bne.n	800f552 <strncmp+0x1a>
 800f54e:	42a3      	cmp	r3, r4
 800f550:	d101      	bne.n	800f556 <strncmp+0x1e>
 800f552:	1a80      	subs	r0, r0, r2
 800f554:	bd10      	pop	{r4, pc}
 800f556:	2800      	cmp	r0, #0
 800f558:	d1f3      	bne.n	800f542 <strncmp+0xa>
 800f55a:	e7fa      	b.n	800f552 <strncmp+0x1a>
 800f55c:	4610      	mov	r0, r2
 800f55e:	e7f9      	b.n	800f554 <strncmp+0x1c>

0800f560 <strncpy>:
 800f560:	b510      	push	{r4, lr}
 800f562:	3901      	subs	r1, #1
 800f564:	4603      	mov	r3, r0
 800f566:	b132      	cbz	r2, 800f576 <strncpy+0x16>
 800f568:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f56c:	f803 4b01 	strb.w	r4, [r3], #1
 800f570:	3a01      	subs	r2, #1
 800f572:	2c00      	cmp	r4, #0
 800f574:	d1f7      	bne.n	800f566 <strncpy+0x6>
 800f576:	441a      	add	r2, r3
 800f578:	2100      	movs	r1, #0
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d100      	bne.n	800f580 <strncpy+0x20>
 800f57e:	bd10      	pop	{r4, pc}
 800f580:	f803 1b01 	strb.w	r1, [r3], #1
 800f584:	e7f9      	b.n	800f57a <strncpy+0x1a>

0800f586 <strstr>:
 800f586:	780a      	ldrb	r2, [r1, #0]
 800f588:	b570      	push	{r4, r5, r6, lr}
 800f58a:	b96a      	cbnz	r2, 800f5a8 <strstr+0x22>
 800f58c:	bd70      	pop	{r4, r5, r6, pc}
 800f58e:	429a      	cmp	r2, r3
 800f590:	d109      	bne.n	800f5a6 <strstr+0x20>
 800f592:	460c      	mov	r4, r1
 800f594:	4605      	mov	r5, r0
 800f596:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d0f6      	beq.n	800f58c <strstr+0x6>
 800f59e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f5a2:	429e      	cmp	r6, r3
 800f5a4:	d0f7      	beq.n	800f596 <strstr+0x10>
 800f5a6:	3001      	adds	r0, #1
 800f5a8:	7803      	ldrb	r3, [r0, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d1ef      	bne.n	800f58e <strstr+0x8>
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	e7ec      	b.n	800f58c <strstr+0x6>

0800f5b2 <sulp>:
 800f5b2:	b570      	push	{r4, r5, r6, lr}
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	460d      	mov	r5, r1
 800f5b8:	ec45 4b10 	vmov	d0, r4, r5
 800f5bc:	4616      	mov	r6, r2
 800f5be:	f002 ff99 	bl	80124f4 <__ulp>
 800f5c2:	ec51 0b10 	vmov	r0, r1, d0
 800f5c6:	b17e      	cbz	r6, 800f5e8 <sulp+0x36>
 800f5c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f5cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	dd09      	ble.n	800f5e8 <sulp+0x36>
 800f5d4:	051b      	lsls	r3, r3, #20
 800f5d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f5da:	2400      	movs	r4, #0
 800f5dc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f5e0:	4622      	mov	r2, r4
 800f5e2:	462b      	mov	r3, r5
 800f5e4:	f7f1 f830 	bl	8000648 <__aeabi_dmul>
 800f5e8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ea:	0000      	movs	r0, r0
 800f5ec:	0000      	movs	r0, r0
	...

0800f5f0 <_strtod_l>:
 800f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f4:	ed2d 8b02 	vpush	{d8}
 800f5f8:	b09d      	sub	sp, #116	; 0x74
 800f5fa:	461f      	mov	r7, r3
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	9318      	str	r3, [sp, #96]	; 0x60
 800f600:	4ba2      	ldr	r3, [pc, #648]	; (800f88c <_strtod_l+0x29c>)
 800f602:	9213      	str	r2, [sp, #76]	; 0x4c
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	9305      	str	r3, [sp, #20]
 800f608:	4604      	mov	r4, r0
 800f60a:	4618      	mov	r0, r3
 800f60c:	4688      	mov	r8, r1
 800f60e:	f7f0 fe01 	bl	8000214 <strlen>
 800f612:	f04f 0a00 	mov.w	sl, #0
 800f616:	4605      	mov	r5, r0
 800f618:	f04f 0b00 	mov.w	fp, #0
 800f61c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f622:	781a      	ldrb	r2, [r3, #0]
 800f624:	2a2b      	cmp	r2, #43	; 0x2b
 800f626:	d04e      	beq.n	800f6c6 <_strtod_l+0xd6>
 800f628:	d83b      	bhi.n	800f6a2 <_strtod_l+0xb2>
 800f62a:	2a0d      	cmp	r2, #13
 800f62c:	d834      	bhi.n	800f698 <_strtod_l+0xa8>
 800f62e:	2a08      	cmp	r2, #8
 800f630:	d834      	bhi.n	800f69c <_strtod_l+0xac>
 800f632:	2a00      	cmp	r2, #0
 800f634:	d03e      	beq.n	800f6b4 <_strtod_l+0xc4>
 800f636:	2300      	movs	r3, #0
 800f638:	930a      	str	r3, [sp, #40]	; 0x28
 800f63a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f63c:	7833      	ldrb	r3, [r6, #0]
 800f63e:	2b30      	cmp	r3, #48	; 0x30
 800f640:	f040 80b0 	bne.w	800f7a4 <_strtod_l+0x1b4>
 800f644:	7873      	ldrb	r3, [r6, #1]
 800f646:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f64a:	2b58      	cmp	r3, #88	; 0x58
 800f64c:	d168      	bne.n	800f720 <_strtod_l+0x130>
 800f64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	ab18      	add	r3, sp, #96	; 0x60
 800f654:	9702      	str	r7, [sp, #8]
 800f656:	9300      	str	r3, [sp, #0]
 800f658:	4a8d      	ldr	r2, [pc, #564]	; (800f890 <_strtod_l+0x2a0>)
 800f65a:	ab19      	add	r3, sp, #100	; 0x64
 800f65c:	a917      	add	r1, sp, #92	; 0x5c
 800f65e:	4620      	mov	r0, r4
 800f660:	f002 f844 	bl	80116ec <__gethex>
 800f664:	f010 0707 	ands.w	r7, r0, #7
 800f668:	4605      	mov	r5, r0
 800f66a:	d005      	beq.n	800f678 <_strtod_l+0x88>
 800f66c:	2f06      	cmp	r7, #6
 800f66e:	d12c      	bne.n	800f6ca <_strtod_l+0xda>
 800f670:	3601      	adds	r6, #1
 800f672:	2300      	movs	r3, #0
 800f674:	9617      	str	r6, [sp, #92]	; 0x5c
 800f676:	930a      	str	r3, [sp, #40]	; 0x28
 800f678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f040 8590 	bne.w	80101a0 <_strtod_l+0xbb0>
 800f680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f682:	b1eb      	cbz	r3, 800f6c0 <_strtod_l+0xd0>
 800f684:	4652      	mov	r2, sl
 800f686:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f68a:	ec43 2b10 	vmov	d0, r2, r3
 800f68e:	b01d      	add	sp, #116	; 0x74
 800f690:	ecbd 8b02 	vpop	{d8}
 800f694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f698:	2a20      	cmp	r2, #32
 800f69a:	d1cc      	bne.n	800f636 <_strtod_l+0x46>
 800f69c:	3301      	adds	r3, #1
 800f69e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f6a0:	e7be      	b.n	800f620 <_strtod_l+0x30>
 800f6a2:	2a2d      	cmp	r2, #45	; 0x2d
 800f6a4:	d1c7      	bne.n	800f636 <_strtod_l+0x46>
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	920a      	str	r2, [sp, #40]	; 0x28
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800f6ae:	785b      	ldrb	r3, [r3, #1]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1c2      	bne.n	800f63a <_strtod_l+0x4a>
 800f6b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f040 856e 	bne.w	801019c <_strtod_l+0xbac>
 800f6c0:	4652      	mov	r2, sl
 800f6c2:	465b      	mov	r3, fp
 800f6c4:	e7e1      	b.n	800f68a <_strtod_l+0x9a>
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	e7ee      	b.n	800f6a8 <_strtod_l+0xb8>
 800f6ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f6cc:	b13a      	cbz	r2, 800f6de <_strtod_l+0xee>
 800f6ce:	2135      	movs	r1, #53	; 0x35
 800f6d0:	a81a      	add	r0, sp, #104	; 0x68
 800f6d2:	f003 f81a 	bl	801270a <__copybits>
 800f6d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f002 fbd9 	bl	8011e90 <_Bfree>
 800f6de:	3f01      	subs	r7, #1
 800f6e0:	2f04      	cmp	r7, #4
 800f6e2:	d806      	bhi.n	800f6f2 <_strtod_l+0x102>
 800f6e4:	e8df f007 	tbb	[pc, r7]
 800f6e8:	1714030a 	.word	0x1714030a
 800f6ec:	0a          	.byte	0x0a
 800f6ed:	00          	.byte	0x00
 800f6ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f6f2:	0728      	lsls	r0, r5, #28
 800f6f4:	d5c0      	bpl.n	800f678 <_strtod_l+0x88>
 800f6f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f6fa:	e7bd      	b.n	800f678 <_strtod_l+0x88>
 800f6fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f700:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f702:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f706:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f70a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f70e:	e7f0      	b.n	800f6f2 <_strtod_l+0x102>
 800f710:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f894 <_strtod_l+0x2a4>
 800f714:	e7ed      	b.n	800f6f2 <_strtod_l+0x102>
 800f716:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f71a:	f04f 3aff 	mov.w	sl, #4294967295
 800f71e:	e7e8      	b.n	800f6f2 <_strtod_l+0x102>
 800f720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f722:	1c5a      	adds	r2, r3, #1
 800f724:	9217      	str	r2, [sp, #92]	; 0x5c
 800f726:	785b      	ldrb	r3, [r3, #1]
 800f728:	2b30      	cmp	r3, #48	; 0x30
 800f72a:	d0f9      	beq.n	800f720 <_strtod_l+0x130>
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d0a3      	beq.n	800f678 <_strtod_l+0x88>
 800f730:	2301      	movs	r3, #1
 800f732:	f04f 0900 	mov.w	r9, #0
 800f736:	9304      	str	r3, [sp, #16]
 800f738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f73a:	9308      	str	r3, [sp, #32]
 800f73c:	f8cd 901c 	str.w	r9, [sp, #28]
 800f740:	464f      	mov	r7, r9
 800f742:	220a      	movs	r2, #10
 800f744:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f746:	7806      	ldrb	r6, [r0, #0]
 800f748:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f74c:	b2d9      	uxtb	r1, r3
 800f74e:	2909      	cmp	r1, #9
 800f750:	d92a      	bls.n	800f7a8 <_strtod_l+0x1b8>
 800f752:	9905      	ldr	r1, [sp, #20]
 800f754:	462a      	mov	r2, r5
 800f756:	f7ff feef 	bl	800f538 <strncmp>
 800f75a:	b398      	cbz	r0, 800f7c4 <_strtod_l+0x1d4>
 800f75c:	2000      	movs	r0, #0
 800f75e:	4632      	mov	r2, r6
 800f760:	463d      	mov	r5, r7
 800f762:	9005      	str	r0, [sp, #20]
 800f764:	4603      	mov	r3, r0
 800f766:	2a65      	cmp	r2, #101	; 0x65
 800f768:	d001      	beq.n	800f76e <_strtod_l+0x17e>
 800f76a:	2a45      	cmp	r2, #69	; 0x45
 800f76c:	d118      	bne.n	800f7a0 <_strtod_l+0x1b0>
 800f76e:	b91d      	cbnz	r5, 800f778 <_strtod_l+0x188>
 800f770:	9a04      	ldr	r2, [sp, #16]
 800f772:	4302      	orrs	r2, r0
 800f774:	d09e      	beq.n	800f6b4 <_strtod_l+0xc4>
 800f776:	2500      	movs	r5, #0
 800f778:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f77c:	f108 0201 	add.w	r2, r8, #1
 800f780:	9217      	str	r2, [sp, #92]	; 0x5c
 800f782:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f786:	2a2b      	cmp	r2, #43	; 0x2b
 800f788:	d075      	beq.n	800f876 <_strtod_l+0x286>
 800f78a:	2a2d      	cmp	r2, #45	; 0x2d
 800f78c:	d07b      	beq.n	800f886 <_strtod_l+0x296>
 800f78e:	f04f 0c00 	mov.w	ip, #0
 800f792:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f796:	2909      	cmp	r1, #9
 800f798:	f240 8082 	bls.w	800f8a0 <_strtod_l+0x2b0>
 800f79c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f7a0:	2600      	movs	r6, #0
 800f7a2:	e09d      	b.n	800f8e0 <_strtod_l+0x2f0>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	e7c4      	b.n	800f732 <_strtod_l+0x142>
 800f7a8:	2f08      	cmp	r7, #8
 800f7aa:	bfd8      	it	le
 800f7ac:	9907      	ldrle	r1, [sp, #28]
 800f7ae:	f100 0001 	add.w	r0, r0, #1
 800f7b2:	bfda      	itte	le
 800f7b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800f7b8:	9307      	strle	r3, [sp, #28]
 800f7ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f7be:	3701      	adds	r7, #1
 800f7c0:	9017      	str	r0, [sp, #92]	; 0x5c
 800f7c2:	e7bf      	b.n	800f744 <_strtod_l+0x154>
 800f7c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7c6:	195a      	adds	r2, r3, r5
 800f7c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800f7ca:	5d5a      	ldrb	r2, [r3, r5]
 800f7cc:	2f00      	cmp	r7, #0
 800f7ce:	d037      	beq.n	800f840 <_strtod_l+0x250>
 800f7d0:	9005      	str	r0, [sp, #20]
 800f7d2:	463d      	mov	r5, r7
 800f7d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f7d8:	2b09      	cmp	r3, #9
 800f7da:	d912      	bls.n	800f802 <_strtod_l+0x212>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e7c2      	b.n	800f766 <_strtod_l+0x176>
 800f7e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f7e6:	785a      	ldrb	r2, [r3, #1]
 800f7e8:	3001      	adds	r0, #1
 800f7ea:	2a30      	cmp	r2, #48	; 0x30
 800f7ec:	d0f8      	beq.n	800f7e0 <_strtod_l+0x1f0>
 800f7ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f7f2:	2b08      	cmp	r3, #8
 800f7f4:	f200 84d9 	bhi.w	80101aa <_strtod_l+0xbba>
 800f7f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7fa:	9005      	str	r0, [sp, #20]
 800f7fc:	2000      	movs	r0, #0
 800f7fe:	9308      	str	r3, [sp, #32]
 800f800:	4605      	mov	r5, r0
 800f802:	3a30      	subs	r2, #48	; 0x30
 800f804:	f100 0301 	add.w	r3, r0, #1
 800f808:	d014      	beq.n	800f834 <_strtod_l+0x244>
 800f80a:	9905      	ldr	r1, [sp, #20]
 800f80c:	4419      	add	r1, r3
 800f80e:	9105      	str	r1, [sp, #20]
 800f810:	462b      	mov	r3, r5
 800f812:	eb00 0e05 	add.w	lr, r0, r5
 800f816:	210a      	movs	r1, #10
 800f818:	4573      	cmp	r3, lr
 800f81a:	d113      	bne.n	800f844 <_strtod_l+0x254>
 800f81c:	182b      	adds	r3, r5, r0
 800f81e:	2b08      	cmp	r3, #8
 800f820:	f105 0501 	add.w	r5, r5, #1
 800f824:	4405      	add	r5, r0
 800f826:	dc1c      	bgt.n	800f862 <_strtod_l+0x272>
 800f828:	9907      	ldr	r1, [sp, #28]
 800f82a:	230a      	movs	r3, #10
 800f82c:	fb03 2301 	mla	r3, r3, r1, r2
 800f830:	9307      	str	r3, [sp, #28]
 800f832:	2300      	movs	r3, #0
 800f834:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f836:	1c51      	adds	r1, r2, #1
 800f838:	9117      	str	r1, [sp, #92]	; 0x5c
 800f83a:	7852      	ldrb	r2, [r2, #1]
 800f83c:	4618      	mov	r0, r3
 800f83e:	e7c9      	b.n	800f7d4 <_strtod_l+0x1e4>
 800f840:	4638      	mov	r0, r7
 800f842:	e7d2      	b.n	800f7ea <_strtod_l+0x1fa>
 800f844:	2b08      	cmp	r3, #8
 800f846:	dc04      	bgt.n	800f852 <_strtod_l+0x262>
 800f848:	9e07      	ldr	r6, [sp, #28]
 800f84a:	434e      	muls	r6, r1
 800f84c:	9607      	str	r6, [sp, #28]
 800f84e:	3301      	adds	r3, #1
 800f850:	e7e2      	b.n	800f818 <_strtod_l+0x228>
 800f852:	f103 0c01 	add.w	ip, r3, #1
 800f856:	f1bc 0f10 	cmp.w	ip, #16
 800f85a:	bfd8      	it	le
 800f85c:	fb01 f909 	mulle.w	r9, r1, r9
 800f860:	e7f5      	b.n	800f84e <_strtod_l+0x25e>
 800f862:	2d10      	cmp	r5, #16
 800f864:	bfdc      	itt	le
 800f866:	230a      	movle	r3, #10
 800f868:	fb03 2909 	mlale	r9, r3, r9, r2
 800f86c:	e7e1      	b.n	800f832 <_strtod_l+0x242>
 800f86e:	2300      	movs	r3, #0
 800f870:	9305      	str	r3, [sp, #20]
 800f872:	2301      	movs	r3, #1
 800f874:	e77c      	b.n	800f770 <_strtod_l+0x180>
 800f876:	f04f 0c00 	mov.w	ip, #0
 800f87a:	f108 0202 	add.w	r2, r8, #2
 800f87e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f880:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f884:	e785      	b.n	800f792 <_strtod_l+0x1a2>
 800f886:	f04f 0c01 	mov.w	ip, #1
 800f88a:	e7f6      	b.n	800f87a <_strtod_l+0x28a>
 800f88c:	08014244 	.word	0x08014244
 800f890:	08013f00 	.word	0x08013f00
 800f894:	7ff00000 	.word	0x7ff00000
 800f898:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f89a:	1c51      	adds	r1, r2, #1
 800f89c:	9117      	str	r1, [sp, #92]	; 0x5c
 800f89e:	7852      	ldrb	r2, [r2, #1]
 800f8a0:	2a30      	cmp	r2, #48	; 0x30
 800f8a2:	d0f9      	beq.n	800f898 <_strtod_l+0x2a8>
 800f8a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f8a8:	2908      	cmp	r1, #8
 800f8aa:	f63f af79 	bhi.w	800f7a0 <_strtod_l+0x1b0>
 800f8ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f8b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f8b4:	9206      	str	r2, [sp, #24]
 800f8b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f8b8:	1c51      	adds	r1, r2, #1
 800f8ba:	9117      	str	r1, [sp, #92]	; 0x5c
 800f8bc:	7852      	ldrb	r2, [r2, #1]
 800f8be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f8c2:	2e09      	cmp	r6, #9
 800f8c4:	d937      	bls.n	800f936 <_strtod_l+0x346>
 800f8c6:	9e06      	ldr	r6, [sp, #24]
 800f8c8:	1b89      	subs	r1, r1, r6
 800f8ca:	2908      	cmp	r1, #8
 800f8cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f8d0:	dc02      	bgt.n	800f8d8 <_strtod_l+0x2e8>
 800f8d2:	4576      	cmp	r6, lr
 800f8d4:	bfa8      	it	ge
 800f8d6:	4676      	movge	r6, lr
 800f8d8:	f1bc 0f00 	cmp.w	ip, #0
 800f8dc:	d000      	beq.n	800f8e0 <_strtod_l+0x2f0>
 800f8de:	4276      	negs	r6, r6
 800f8e0:	2d00      	cmp	r5, #0
 800f8e2:	d14d      	bne.n	800f980 <_strtod_l+0x390>
 800f8e4:	9904      	ldr	r1, [sp, #16]
 800f8e6:	4301      	orrs	r1, r0
 800f8e8:	f47f aec6 	bne.w	800f678 <_strtod_l+0x88>
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f47f aee1 	bne.w	800f6b4 <_strtod_l+0xc4>
 800f8f2:	2a69      	cmp	r2, #105	; 0x69
 800f8f4:	d027      	beq.n	800f946 <_strtod_l+0x356>
 800f8f6:	dc24      	bgt.n	800f942 <_strtod_l+0x352>
 800f8f8:	2a49      	cmp	r2, #73	; 0x49
 800f8fa:	d024      	beq.n	800f946 <_strtod_l+0x356>
 800f8fc:	2a4e      	cmp	r2, #78	; 0x4e
 800f8fe:	f47f aed9 	bne.w	800f6b4 <_strtod_l+0xc4>
 800f902:	499f      	ldr	r1, [pc, #636]	; (800fb80 <_strtod_l+0x590>)
 800f904:	a817      	add	r0, sp, #92	; 0x5c
 800f906:	f002 f949 	bl	8011b9c <__match>
 800f90a:	2800      	cmp	r0, #0
 800f90c:	f43f aed2 	beq.w	800f6b4 <_strtod_l+0xc4>
 800f910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	2b28      	cmp	r3, #40	; 0x28
 800f916:	d12d      	bne.n	800f974 <_strtod_l+0x384>
 800f918:	499a      	ldr	r1, [pc, #616]	; (800fb84 <_strtod_l+0x594>)
 800f91a:	aa1a      	add	r2, sp, #104	; 0x68
 800f91c:	a817      	add	r0, sp, #92	; 0x5c
 800f91e:	f002 f951 	bl	8011bc4 <__hexnan>
 800f922:	2805      	cmp	r0, #5
 800f924:	d126      	bne.n	800f974 <_strtod_l+0x384>
 800f926:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f928:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f92c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f930:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f934:	e6a0      	b.n	800f678 <_strtod_l+0x88>
 800f936:	210a      	movs	r1, #10
 800f938:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f93c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f940:	e7b9      	b.n	800f8b6 <_strtod_l+0x2c6>
 800f942:	2a6e      	cmp	r2, #110	; 0x6e
 800f944:	e7db      	b.n	800f8fe <_strtod_l+0x30e>
 800f946:	4990      	ldr	r1, [pc, #576]	; (800fb88 <_strtod_l+0x598>)
 800f948:	a817      	add	r0, sp, #92	; 0x5c
 800f94a:	f002 f927 	bl	8011b9c <__match>
 800f94e:	2800      	cmp	r0, #0
 800f950:	f43f aeb0 	beq.w	800f6b4 <_strtod_l+0xc4>
 800f954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f956:	498d      	ldr	r1, [pc, #564]	; (800fb8c <_strtod_l+0x59c>)
 800f958:	3b01      	subs	r3, #1
 800f95a:	a817      	add	r0, sp, #92	; 0x5c
 800f95c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f95e:	f002 f91d 	bl	8011b9c <__match>
 800f962:	b910      	cbnz	r0, 800f96a <_strtod_l+0x37a>
 800f964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f966:	3301      	adds	r3, #1
 800f968:	9317      	str	r3, [sp, #92]	; 0x5c
 800f96a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fb9c <_strtod_l+0x5ac>
 800f96e:	f04f 0a00 	mov.w	sl, #0
 800f972:	e681      	b.n	800f678 <_strtod_l+0x88>
 800f974:	4886      	ldr	r0, [pc, #536]	; (800fb90 <_strtod_l+0x5a0>)
 800f976:	f003 fa1f 	bl	8012db8 <nan>
 800f97a:	ec5b ab10 	vmov	sl, fp, d0
 800f97e:	e67b      	b.n	800f678 <_strtod_l+0x88>
 800f980:	9b05      	ldr	r3, [sp, #20]
 800f982:	9807      	ldr	r0, [sp, #28]
 800f984:	1af3      	subs	r3, r6, r3
 800f986:	2f00      	cmp	r7, #0
 800f988:	bf08      	it	eq
 800f98a:	462f      	moveq	r7, r5
 800f98c:	2d10      	cmp	r5, #16
 800f98e:	9306      	str	r3, [sp, #24]
 800f990:	46a8      	mov	r8, r5
 800f992:	bfa8      	it	ge
 800f994:	f04f 0810 	movge.w	r8, #16
 800f998:	f7f0 fddc 	bl	8000554 <__aeabi_ui2d>
 800f99c:	2d09      	cmp	r5, #9
 800f99e:	4682      	mov	sl, r0
 800f9a0:	468b      	mov	fp, r1
 800f9a2:	dd13      	ble.n	800f9cc <_strtod_l+0x3dc>
 800f9a4:	4b7b      	ldr	r3, [pc, #492]	; (800fb94 <_strtod_l+0x5a4>)
 800f9a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f9aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f9ae:	f7f0 fe4b 	bl	8000648 <__aeabi_dmul>
 800f9b2:	4682      	mov	sl, r0
 800f9b4:	4648      	mov	r0, r9
 800f9b6:	468b      	mov	fp, r1
 800f9b8:	f7f0 fdcc 	bl	8000554 <__aeabi_ui2d>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	460b      	mov	r3, r1
 800f9c0:	4650      	mov	r0, sl
 800f9c2:	4659      	mov	r1, fp
 800f9c4:	f7f0 fc8a 	bl	80002dc <__adddf3>
 800f9c8:	4682      	mov	sl, r0
 800f9ca:	468b      	mov	fp, r1
 800f9cc:	2d0f      	cmp	r5, #15
 800f9ce:	dc38      	bgt.n	800fa42 <_strtod_l+0x452>
 800f9d0:	9b06      	ldr	r3, [sp, #24]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f43f ae50 	beq.w	800f678 <_strtod_l+0x88>
 800f9d8:	dd24      	ble.n	800fa24 <_strtod_l+0x434>
 800f9da:	2b16      	cmp	r3, #22
 800f9dc:	dc0b      	bgt.n	800f9f6 <_strtod_l+0x406>
 800f9de:	496d      	ldr	r1, [pc, #436]	; (800fb94 <_strtod_l+0x5a4>)
 800f9e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f9e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9e8:	4652      	mov	r2, sl
 800f9ea:	465b      	mov	r3, fp
 800f9ec:	f7f0 fe2c 	bl	8000648 <__aeabi_dmul>
 800f9f0:	4682      	mov	sl, r0
 800f9f2:	468b      	mov	fp, r1
 800f9f4:	e640      	b.n	800f678 <_strtod_l+0x88>
 800f9f6:	9a06      	ldr	r2, [sp, #24]
 800f9f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	db20      	blt.n	800fa42 <_strtod_l+0x452>
 800fa00:	4c64      	ldr	r4, [pc, #400]	; (800fb94 <_strtod_l+0x5a4>)
 800fa02:	f1c5 050f 	rsb	r5, r5, #15
 800fa06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fa0a:	4652      	mov	r2, sl
 800fa0c:	465b      	mov	r3, fp
 800fa0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa12:	f7f0 fe19 	bl	8000648 <__aeabi_dmul>
 800fa16:	9b06      	ldr	r3, [sp, #24]
 800fa18:	1b5d      	subs	r5, r3, r5
 800fa1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fa1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fa22:	e7e3      	b.n	800f9ec <_strtod_l+0x3fc>
 800fa24:	9b06      	ldr	r3, [sp, #24]
 800fa26:	3316      	adds	r3, #22
 800fa28:	db0b      	blt.n	800fa42 <_strtod_l+0x452>
 800fa2a:	9b05      	ldr	r3, [sp, #20]
 800fa2c:	1b9e      	subs	r6, r3, r6
 800fa2e:	4b59      	ldr	r3, [pc, #356]	; (800fb94 <_strtod_l+0x5a4>)
 800fa30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fa34:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fa38:	4650      	mov	r0, sl
 800fa3a:	4659      	mov	r1, fp
 800fa3c:	f7f0 ff2e 	bl	800089c <__aeabi_ddiv>
 800fa40:	e7d6      	b.n	800f9f0 <_strtod_l+0x400>
 800fa42:	9b06      	ldr	r3, [sp, #24]
 800fa44:	eba5 0808 	sub.w	r8, r5, r8
 800fa48:	4498      	add	r8, r3
 800fa4a:	f1b8 0f00 	cmp.w	r8, #0
 800fa4e:	dd74      	ble.n	800fb3a <_strtod_l+0x54a>
 800fa50:	f018 030f 	ands.w	r3, r8, #15
 800fa54:	d00a      	beq.n	800fa6c <_strtod_l+0x47c>
 800fa56:	494f      	ldr	r1, [pc, #316]	; (800fb94 <_strtod_l+0x5a4>)
 800fa58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa5c:	4652      	mov	r2, sl
 800fa5e:	465b      	mov	r3, fp
 800fa60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa64:	f7f0 fdf0 	bl	8000648 <__aeabi_dmul>
 800fa68:	4682      	mov	sl, r0
 800fa6a:	468b      	mov	fp, r1
 800fa6c:	f038 080f 	bics.w	r8, r8, #15
 800fa70:	d04f      	beq.n	800fb12 <_strtod_l+0x522>
 800fa72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fa76:	dd22      	ble.n	800fabe <_strtod_l+0x4ce>
 800fa78:	2500      	movs	r5, #0
 800fa7a:	462e      	mov	r6, r5
 800fa7c:	9507      	str	r5, [sp, #28]
 800fa7e:	9505      	str	r5, [sp, #20]
 800fa80:	2322      	movs	r3, #34	; 0x22
 800fa82:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fb9c <_strtod_l+0x5ac>
 800fa86:	6023      	str	r3, [r4, #0]
 800fa88:	f04f 0a00 	mov.w	sl, #0
 800fa8c:	9b07      	ldr	r3, [sp, #28]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f43f adf2 	beq.w	800f678 <_strtod_l+0x88>
 800fa94:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa96:	4620      	mov	r0, r4
 800fa98:	f002 f9fa 	bl	8011e90 <_Bfree>
 800fa9c:	9905      	ldr	r1, [sp, #20]
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f002 f9f6 	bl	8011e90 <_Bfree>
 800faa4:	4631      	mov	r1, r6
 800faa6:	4620      	mov	r0, r4
 800faa8:	f002 f9f2 	bl	8011e90 <_Bfree>
 800faac:	9907      	ldr	r1, [sp, #28]
 800faae:	4620      	mov	r0, r4
 800fab0:	f002 f9ee 	bl	8011e90 <_Bfree>
 800fab4:	4629      	mov	r1, r5
 800fab6:	4620      	mov	r0, r4
 800fab8:	f002 f9ea 	bl	8011e90 <_Bfree>
 800fabc:	e5dc      	b.n	800f678 <_strtod_l+0x88>
 800fabe:	4b36      	ldr	r3, [pc, #216]	; (800fb98 <_strtod_l+0x5a8>)
 800fac0:	9304      	str	r3, [sp, #16]
 800fac2:	2300      	movs	r3, #0
 800fac4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fac8:	4650      	mov	r0, sl
 800faca:	4659      	mov	r1, fp
 800facc:	4699      	mov	r9, r3
 800face:	f1b8 0f01 	cmp.w	r8, #1
 800fad2:	dc21      	bgt.n	800fb18 <_strtod_l+0x528>
 800fad4:	b10b      	cbz	r3, 800fada <_strtod_l+0x4ea>
 800fad6:	4682      	mov	sl, r0
 800fad8:	468b      	mov	fp, r1
 800fada:	4b2f      	ldr	r3, [pc, #188]	; (800fb98 <_strtod_l+0x5a8>)
 800fadc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fae0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fae4:	4652      	mov	r2, sl
 800fae6:	465b      	mov	r3, fp
 800fae8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800faec:	f7f0 fdac 	bl	8000648 <__aeabi_dmul>
 800faf0:	4b2a      	ldr	r3, [pc, #168]	; (800fb9c <_strtod_l+0x5ac>)
 800faf2:	460a      	mov	r2, r1
 800faf4:	400b      	ands	r3, r1
 800faf6:	492a      	ldr	r1, [pc, #168]	; (800fba0 <_strtod_l+0x5b0>)
 800faf8:	428b      	cmp	r3, r1
 800fafa:	4682      	mov	sl, r0
 800fafc:	d8bc      	bhi.n	800fa78 <_strtod_l+0x488>
 800fafe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fb02:	428b      	cmp	r3, r1
 800fb04:	bf86      	itte	hi
 800fb06:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fba4 <_strtod_l+0x5b4>
 800fb0a:	f04f 3aff 	movhi.w	sl, #4294967295
 800fb0e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fb12:	2300      	movs	r3, #0
 800fb14:	9304      	str	r3, [sp, #16]
 800fb16:	e084      	b.n	800fc22 <_strtod_l+0x632>
 800fb18:	f018 0f01 	tst.w	r8, #1
 800fb1c:	d005      	beq.n	800fb2a <_strtod_l+0x53a>
 800fb1e:	9b04      	ldr	r3, [sp, #16]
 800fb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb24:	f7f0 fd90 	bl	8000648 <__aeabi_dmul>
 800fb28:	2301      	movs	r3, #1
 800fb2a:	9a04      	ldr	r2, [sp, #16]
 800fb2c:	3208      	adds	r2, #8
 800fb2e:	f109 0901 	add.w	r9, r9, #1
 800fb32:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fb36:	9204      	str	r2, [sp, #16]
 800fb38:	e7c9      	b.n	800face <_strtod_l+0x4de>
 800fb3a:	d0ea      	beq.n	800fb12 <_strtod_l+0x522>
 800fb3c:	f1c8 0800 	rsb	r8, r8, #0
 800fb40:	f018 020f 	ands.w	r2, r8, #15
 800fb44:	d00a      	beq.n	800fb5c <_strtod_l+0x56c>
 800fb46:	4b13      	ldr	r3, [pc, #76]	; (800fb94 <_strtod_l+0x5a4>)
 800fb48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb4c:	4650      	mov	r0, sl
 800fb4e:	4659      	mov	r1, fp
 800fb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb54:	f7f0 fea2 	bl	800089c <__aeabi_ddiv>
 800fb58:	4682      	mov	sl, r0
 800fb5a:	468b      	mov	fp, r1
 800fb5c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fb60:	d0d7      	beq.n	800fb12 <_strtod_l+0x522>
 800fb62:	f1b8 0f1f 	cmp.w	r8, #31
 800fb66:	dd1f      	ble.n	800fba8 <_strtod_l+0x5b8>
 800fb68:	2500      	movs	r5, #0
 800fb6a:	462e      	mov	r6, r5
 800fb6c:	9507      	str	r5, [sp, #28]
 800fb6e:	9505      	str	r5, [sp, #20]
 800fb70:	2322      	movs	r3, #34	; 0x22
 800fb72:	f04f 0a00 	mov.w	sl, #0
 800fb76:	f04f 0b00 	mov.w	fp, #0
 800fb7a:	6023      	str	r3, [r4, #0]
 800fb7c:	e786      	b.n	800fa8c <_strtod_l+0x49c>
 800fb7e:	bf00      	nop
 800fb80:	08013ed1 	.word	0x08013ed1
 800fb84:	08013f14 	.word	0x08013f14
 800fb88:	08013ec9 	.word	0x08013ec9
 800fb8c:	08014104 	.word	0x08014104
 800fb90:	08013fff 	.word	0x08013fff
 800fb94:	080142e0 	.word	0x080142e0
 800fb98:	080142b8 	.word	0x080142b8
 800fb9c:	7ff00000 	.word	0x7ff00000
 800fba0:	7ca00000 	.word	0x7ca00000
 800fba4:	7fefffff 	.word	0x7fefffff
 800fba8:	f018 0310 	ands.w	r3, r8, #16
 800fbac:	bf18      	it	ne
 800fbae:	236a      	movne	r3, #106	; 0x6a
 800fbb0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ff60 <_strtod_l+0x970>
 800fbb4:	9304      	str	r3, [sp, #16]
 800fbb6:	4650      	mov	r0, sl
 800fbb8:	4659      	mov	r1, fp
 800fbba:	2300      	movs	r3, #0
 800fbbc:	f018 0f01 	tst.w	r8, #1
 800fbc0:	d004      	beq.n	800fbcc <_strtod_l+0x5dc>
 800fbc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fbc6:	f7f0 fd3f 	bl	8000648 <__aeabi_dmul>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fbd0:	f109 0908 	add.w	r9, r9, #8
 800fbd4:	d1f2      	bne.n	800fbbc <_strtod_l+0x5cc>
 800fbd6:	b10b      	cbz	r3, 800fbdc <_strtod_l+0x5ec>
 800fbd8:	4682      	mov	sl, r0
 800fbda:	468b      	mov	fp, r1
 800fbdc:	9b04      	ldr	r3, [sp, #16]
 800fbde:	b1c3      	cbz	r3, 800fc12 <_strtod_l+0x622>
 800fbe0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fbe4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	4659      	mov	r1, fp
 800fbec:	dd11      	ble.n	800fc12 <_strtod_l+0x622>
 800fbee:	2b1f      	cmp	r3, #31
 800fbf0:	f340 8124 	ble.w	800fe3c <_strtod_l+0x84c>
 800fbf4:	2b34      	cmp	r3, #52	; 0x34
 800fbf6:	bfde      	ittt	le
 800fbf8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fbfc:	f04f 33ff 	movle.w	r3, #4294967295
 800fc00:	fa03 f202 	lslle.w	r2, r3, r2
 800fc04:	f04f 0a00 	mov.w	sl, #0
 800fc08:	bfcc      	ite	gt
 800fc0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fc0e:	ea02 0b01 	andle.w	fp, r2, r1
 800fc12:	2200      	movs	r2, #0
 800fc14:	2300      	movs	r3, #0
 800fc16:	4650      	mov	r0, sl
 800fc18:	4659      	mov	r1, fp
 800fc1a:	f7f0 ff7d 	bl	8000b18 <__aeabi_dcmpeq>
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d1a2      	bne.n	800fb68 <_strtod_l+0x578>
 800fc22:	9b07      	ldr	r3, [sp, #28]
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	9908      	ldr	r1, [sp, #32]
 800fc28:	462b      	mov	r3, r5
 800fc2a:	463a      	mov	r2, r7
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f002 f997 	bl	8011f60 <__s2b>
 800fc32:	9007      	str	r0, [sp, #28]
 800fc34:	2800      	cmp	r0, #0
 800fc36:	f43f af1f 	beq.w	800fa78 <_strtod_l+0x488>
 800fc3a:	9b05      	ldr	r3, [sp, #20]
 800fc3c:	1b9e      	subs	r6, r3, r6
 800fc3e:	9b06      	ldr	r3, [sp, #24]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	bfb4      	ite	lt
 800fc44:	4633      	movlt	r3, r6
 800fc46:	2300      	movge	r3, #0
 800fc48:	930c      	str	r3, [sp, #48]	; 0x30
 800fc4a:	9b06      	ldr	r3, [sp, #24]
 800fc4c:	2500      	movs	r5, #0
 800fc4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc52:	9312      	str	r3, [sp, #72]	; 0x48
 800fc54:	462e      	mov	r6, r5
 800fc56:	9b07      	ldr	r3, [sp, #28]
 800fc58:	4620      	mov	r0, r4
 800fc5a:	6859      	ldr	r1, [r3, #4]
 800fc5c:	f002 f8d8 	bl	8011e10 <_Balloc>
 800fc60:	9005      	str	r0, [sp, #20]
 800fc62:	2800      	cmp	r0, #0
 800fc64:	f43f af0c 	beq.w	800fa80 <_strtod_l+0x490>
 800fc68:	9b07      	ldr	r3, [sp, #28]
 800fc6a:	691a      	ldr	r2, [r3, #16]
 800fc6c:	3202      	adds	r2, #2
 800fc6e:	f103 010c 	add.w	r1, r3, #12
 800fc72:	0092      	lsls	r2, r2, #2
 800fc74:	300c      	adds	r0, #12
 800fc76:	f7fe fbe1 	bl	800e43c <memcpy>
 800fc7a:	ec4b ab10 	vmov	d0, sl, fp
 800fc7e:	aa1a      	add	r2, sp, #104	; 0x68
 800fc80:	a919      	add	r1, sp, #100	; 0x64
 800fc82:	4620      	mov	r0, r4
 800fc84:	f002 fcb2 	bl	80125ec <__d2b>
 800fc88:	ec4b ab18 	vmov	d8, sl, fp
 800fc8c:	9018      	str	r0, [sp, #96]	; 0x60
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	f43f aef6 	beq.w	800fa80 <_strtod_l+0x490>
 800fc94:	2101      	movs	r1, #1
 800fc96:	4620      	mov	r0, r4
 800fc98:	f002 f9fc 	bl	8012094 <__i2b>
 800fc9c:	4606      	mov	r6, r0
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	f43f aeee 	beq.w	800fa80 <_strtod_l+0x490>
 800fca4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fca6:	9904      	ldr	r1, [sp, #16]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	bfab      	itete	ge
 800fcac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fcae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fcb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fcb2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fcb6:	bfac      	ite	ge
 800fcb8:	eb03 0902 	addge.w	r9, r3, r2
 800fcbc:	1ad7      	sublt	r7, r2, r3
 800fcbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fcc0:	eba3 0801 	sub.w	r8, r3, r1
 800fcc4:	4490      	add	r8, r2
 800fcc6:	4ba1      	ldr	r3, [pc, #644]	; (800ff4c <_strtod_l+0x95c>)
 800fcc8:	f108 38ff 	add.w	r8, r8, #4294967295
 800fccc:	4598      	cmp	r8, r3
 800fcce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fcd2:	f280 80c7 	bge.w	800fe64 <_strtod_l+0x874>
 800fcd6:	eba3 0308 	sub.w	r3, r3, r8
 800fcda:	2b1f      	cmp	r3, #31
 800fcdc:	eba2 0203 	sub.w	r2, r2, r3
 800fce0:	f04f 0101 	mov.w	r1, #1
 800fce4:	f300 80b1 	bgt.w	800fe4a <_strtod_l+0x85a>
 800fce8:	fa01 f303 	lsl.w	r3, r1, r3
 800fcec:	930d      	str	r3, [sp, #52]	; 0x34
 800fcee:	2300      	movs	r3, #0
 800fcf0:	9308      	str	r3, [sp, #32]
 800fcf2:	eb09 0802 	add.w	r8, r9, r2
 800fcf6:	9b04      	ldr	r3, [sp, #16]
 800fcf8:	45c1      	cmp	r9, r8
 800fcfa:	4417      	add	r7, r2
 800fcfc:	441f      	add	r7, r3
 800fcfe:	464b      	mov	r3, r9
 800fd00:	bfa8      	it	ge
 800fd02:	4643      	movge	r3, r8
 800fd04:	42bb      	cmp	r3, r7
 800fd06:	bfa8      	it	ge
 800fd08:	463b      	movge	r3, r7
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	bfc2      	ittt	gt
 800fd0e:	eba8 0803 	subgt.w	r8, r8, r3
 800fd12:	1aff      	subgt	r7, r7, r3
 800fd14:	eba9 0903 	subgt.w	r9, r9, r3
 800fd18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	dd17      	ble.n	800fd4e <_strtod_l+0x75e>
 800fd1e:	4631      	mov	r1, r6
 800fd20:	461a      	mov	r2, r3
 800fd22:	4620      	mov	r0, r4
 800fd24:	f002 fa76 	bl	8012214 <__pow5mult>
 800fd28:	4606      	mov	r6, r0
 800fd2a:	2800      	cmp	r0, #0
 800fd2c:	f43f aea8 	beq.w	800fa80 <_strtod_l+0x490>
 800fd30:	4601      	mov	r1, r0
 800fd32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fd34:	4620      	mov	r0, r4
 800fd36:	f002 f9c3 	bl	80120c0 <__multiply>
 800fd3a:	900b      	str	r0, [sp, #44]	; 0x2c
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	f43f ae9f 	beq.w	800fa80 <_strtod_l+0x490>
 800fd42:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd44:	4620      	mov	r0, r4
 800fd46:	f002 f8a3 	bl	8011e90 <_Bfree>
 800fd4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd4c:	9318      	str	r3, [sp, #96]	; 0x60
 800fd4e:	f1b8 0f00 	cmp.w	r8, #0
 800fd52:	f300 808c 	bgt.w	800fe6e <_strtod_l+0x87e>
 800fd56:	9b06      	ldr	r3, [sp, #24]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	dd08      	ble.n	800fd6e <_strtod_l+0x77e>
 800fd5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd5e:	9905      	ldr	r1, [sp, #20]
 800fd60:	4620      	mov	r0, r4
 800fd62:	f002 fa57 	bl	8012214 <__pow5mult>
 800fd66:	9005      	str	r0, [sp, #20]
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	f43f ae89 	beq.w	800fa80 <_strtod_l+0x490>
 800fd6e:	2f00      	cmp	r7, #0
 800fd70:	dd08      	ble.n	800fd84 <_strtod_l+0x794>
 800fd72:	9905      	ldr	r1, [sp, #20]
 800fd74:	463a      	mov	r2, r7
 800fd76:	4620      	mov	r0, r4
 800fd78:	f002 faa6 	bl	80122c8 <__lshift>
 800fd7c:	9005      	str	r0, [sp, #20]
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	f43f ae7e 	beq.w	800fa80 <_strtod_l+0x490>
 800fd84:	f1b9 0f00 	cmp.w	r9, #0
 800fd88:	dd08      	ble.n	800fd9c <_strtod_l+0x7ac>
 800fd8a:	4631      	mov	r1, r6
 800fd8c:	464a      	mov	r2, r9
 800fd8e:	4620      	mov	r0, r4
 800fd90:	f002 fa9a 	bl	80122c8 <__lshift>
 800fd94:	4606      	mov	r6, r0
 800fd96:	2800      	cmp	r0, #0
 800fd98:	f43f ae72 	beq.w	800fa80 <_strtod_l+0x490>
 800fd9c:	9a05      	ldr	r2, [sp, #20]
 800fd9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fda0:	4620      	mov	r0, r4
 800fda2:	f002 fb1d 	bl	80123e0 <__mdiff>
 800fda6:	4605      	mov	r5, r0
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	f43f ae69 	beq.w	800fa80 <_strtod_l+0x490>
 800fdae:	68c3      	ldr	r3, [r0, #12]
 800fdb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	60c3      	str	r3, [r0, #12]
 800fdb6:	4631      	mov	r1, r6
 800fdb8:	f002 faf6 	bl	80123a8 <__mcmp>
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	da60      	bge.n	800fe82 <_strtod_l+0x892>
 800fdc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdc2:	ea53 030a 	orrs.w	r3, r3, sl
 800fdc6:	f040 8082 	bne.w	800fece <_strtod_l+0x8de>
 800fdca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d17d      	bne.n	800fece <_strtod_l+0x8de>
 800fdd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fdd6:	0d1b      	lsrs	r3, r3, #20
 800fdd8:	051b      	lsls	r3, r3, #20
 800fdda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fdde:	d976      	bls.n	800fece <_strtod_l+0x8de>
 800fde0:	696b      	ldr	r3, [r5, #20]
 800fde2:	b913      	cbnz	r3, 800fdea <_strtod_l+0x7fa>
 800fde4:	692b      	ldr	r3, [r5, #16]
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	dd71      	ble.n	800fece <_strtod_l+0x8de>
 800fdea:	4629      	mov	r1, r5
 800fdec:	2201      	movs	r2, #1
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f002 fa6a 	bl	80122c8 <__lshift>
 800fdf4:	4631      	mov	r1, r6
 800fdf6:	4605      	mov	r5, r0
 800fdf8:	f002 fad6 	bl	80123a8 <__mcmp>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	dd66      	ble.n	800fece <_strtod_l+0x8de>
 800fe00:	9904      	ldr	r1, [sp, #16]
 800fe02:	4a53      	ldr	r2, [pc, #332]	; (800ff50 <_strtod_l+0x960>)
 800fe04:	465b      	mov	r3, fp
 800fe06:	2900      	cmp	r1, #0
 800fe08:	f000 8081 	beq.w	800ff0e <_strtod_l+0x91e>
 800fe0c:	ea02 010b 	and.w	r1, r2, fp
 800fe10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fe14:	dc7b      	bgt.n	800ff0e <_strtod_l+0x91e>
 800fe16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fe1a:	f77f aea9 	ble.w	800fb70 <_strtod_l+0x580>
 800fe1e:	4b4d      	ldr	r3, [pc, #308]	; (800ff54 <_strtod_l+0x964>)
 800fe20:	4650      	mov	r0, sl
 800fe22:	4659      	mov	r1, fp
 800fe24:	2200      	movs	r2, #0
 800fe26:	f7f0 fc0f 	bl	8000648 <__aeabi_dmul>
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	4303      	orrs	r3, r0
 800fe2e:	bf08      	it	eq
 800fe30:	2322      	moveq	r3, #34	; 0x22
 800fe32:	4682      	mov	sl, r0
 800fe34:	468b      	mov	fp, r1
 800fe36:	bf08      	it	eq
 800fe38:	6023      	streq	r3, [r4, #0]
 800fe3a:	e62b      	b.n	800fa94 <_strtod_l+0x4a4>
 800fe3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe40:	fa02 f303 	lsl.w	r3, r2, r3
 800fe44:	ea03 0a0a 	and.w	sl, r3, sl
 800fe48:	e6e3      	b.n	800fc12 <_strtod_l+0x622>
 800fe4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fe4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fe52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fe56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fe5a:	fa01 f308 	lsl.w	r3, r1, r8
 800fe5e:	9308      	str	r3, [sp, #32]
 800fe60:	910d      	str	r1, [sp, #52]	; 0x34
 800fe62:	e746      	b.n	800fcf2 <_strtod_l+0x702>
 800fe64:	2300      	movs	r3, #0
 800fe66:	9308      	str	r3, [sp, #32]
 800fe68:	2301      	movs	r3, #1
 800fe6a:	930d      	str	r3, [sp, #52]	; 0x34
 800fe6c:	e741      	b.n	800fcf2 <_strtod_l+0x702>
 800fe6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe70:	4642      	mov	r2, r8
 800fe72:	4620      	mov	r0, r4
 800fe74:	f002 fa28 	bl	80122c8 <__lshift>
 800fe78:	9018      	str	r0, [sp, #96]	; 0x60
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	f47f af6b 	bne.w	800fd56 <_strtod_l+0x766>
 800fe80:	e5fe      	b.n	800fa80 <_strtod_l+0x490>
 800fe82:	465f      	mov	r7, fp
 800fe84:	d16e      	bne.n	800ff64 <_strtod_l+0x974>
 800fe86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe8c:	b342      	cbz	r2, 800fee0 <_strtod_l+0x8f0>
 800fe8e:	4a32      	ldr	r2, [pc, #200]	; (800ff58 <_strtod_l+0x968>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d128      	bne.n	800fee6 <_strtod_l+0x8f6>
 800fe94:	9b04      	ldr	r3, [sp, #16]
 800fe96:	4651      	mov	r1, sl
 800fe98:	b1eb      	cbz	r3, 800fed6 <_strtod_l+0x8e6>
 800fe9a:	4b2d      	ldr	r3, [pc, #180]	; (800ff50 <_strtod_l+0x960>)
 800fe9c:	403b      	ands	r3, r7
 800fe9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fea2:	f04f 32ff 	mov.w	r2, #4294967295
 800fea6:	d819      	bhi.n	800fedc <_strtod_l+0x8ec>
 800fea8:	0d1b      	lsrs	r3, r3, #20
 800feaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800feae:	fa02 f303 	lsl.w	r3, r2, r3
 800feb2:	4299      	cmp	r1, r3
 800feb4:	d117      	bne.n	800fee6 <_strtod_l+0x8f6>
 800feb6:	4b29      	ldr	r3, [pc, #164]	; (800ff5c <_strtod_l+0x96c>)
 800feb8:	429f      	cmp	r7, r3
 800feba:	d102      	bne.n	800fec2 <_strtod_l+0x8d2>
 800febc:	3101      	adds	r1, #1
 800febe:	f43f addf 	beq.w	800fa80 <_strtod_l+0x490>
 800fec2:	4b23      	ldr	r3, [pc, #140]	; (800ff50 <_strtod_l+0x960>)
 800fec4:	403b      	ands	r3, r7
 800fec6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800feca:	f04f 0a00 	mov.w	sl, #0
 800fece:	9b04      	ldr	r3, [sp, #16]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d1a4      	bne.n	800fe1e <_strtod_l+0x82e>
 800fed4:	e5de      	b.n	800fa94 <_strtod_l+0x4a4>
 800fed6:	f04f 33ff 	mov.w	r3, #4294967295
 800feda:	e7ea      	b.n	800feb2 <_strtod_l+0x8c2>
 800fedc:	4613      	mov	r3, r2
 800fede:	e7e8      	b.n	800feb2 <_strtod_l+0x8c2>
 800fee0:	ea53 030a 	orrs.w	r3, r3, sl
 800fee4:	d08c      	beq.n	800fe00 <_strtod_l+0x810>
 800fee6:	9b08      	ldr	r3, [sp, #32]
 800fee8:	b1db      	cbz	r3, 800ff22 <_strtod_l+0x932>
 800feea:	423b      	tst	r3, r7
 800feec:	d0ef      	beq.n	800fece <_strtod_l+0x8de>
 800feee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fef0:	9a04      	ldr	r2, [sp, #16]
 800fef2:	4650      	mov	r0, sl
 800fef4:	4659      	mov	r1, fp
 800fef6:	b1c3      	cbz	r3, 800ff2a <_strtod_l+0x93a>
 800fef8:	f7ff fb5b 	bl	800f5b2 <sulp>
 800fefc:	4602      	mov	r2, r0
 800fefe:	460b      	mov	r3, r1
 800ff00:	ec51 0b18 	vmov	r0, r1, d8
 800ff04:	f7f0 f9ea 	bl	80002dc <__adddf3>
 800ff08:	4682      	mov	sl, r0
 800ff0a:	468b      	mov	fp, r1
 800ff0c:	e7df      	b.n	800fece <_strtod_l+0x8de>
 800ff0e:	4013      	ands	r3, r2
 800ff10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ff14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ff18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ff1c:	f04f 3aff 	mov.w	sl, #4294967295
 800ff20:	e7d5      	b.n	800fece <_strtod_l+0x8de>
 800ff22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff24:	ea13 0f0a 	tst.w	r3, sl
 800ff28:	e7e0      	b.n	800feec <_strtod_l+0x8fc>
 800ff2a:	f7ff fb42 	bl	800f5b2 <sulp>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	460b      	mov	r3, r1
 800ff32:	ec51 0b18 	vmov	r0, r1, d8
 800ff36:	f7f0 f9cf 	bl	80002d8 <__aeabi_dsub>
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	4682      	mov	sl, r0
 800ff40:	468b      	mov	fp, r1
 800ff42:	f7f0 fde9 	bl	8000b18 <__aeabi_dcmpeq>
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d0c1      	beq.n	800fece <_strtod_l+0x8de>
 800ff4a:	e611      	b.n	800fb70 <_strtod_l+0x580>
 800ff4c:	fffffc02 	.word	0xfffffc02
 800ff50:	7ff00000 	.word	0x7ff00000
 800ff54:	39500000 	.word	0x39500000
 800ff58:	000fffff 	.word	0x000fffff
 800ff5c:	7fefffff 	.word	0x7fefffff
 800ff60:	08013f28 	.word	0x08013f28
 800ff64:	4631      	mov	r1, r6
 800ff66:	4628      	mov	r0, r5
 800ff68:	f002 fb9c 	bl	80126a4 <__ratio>
 800ff6c:	ec59 8b10 	vmov	r8, r9, d0
 800ff70:	ee10 0a10 	vmov	r0, s0
 800ff74:	2200      	movs	r2, #0
 800ff76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff7a:	4649      	mov	r1, r9
 800ff7c:	f7f0 fde0 	bl	8000b40 <__aeabi_dcmple>
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d07a      	beq.n	801007a <_strtod_l+0xa8a>
 800ff84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d04a      	beq.n	8010020 <_strtod_l+0xa30>
 800ff8a:	4b95      	ldr	r3, [pc, #596]	; (80101e0 <_strtod_l+0xbf0>)
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80101e0 <_strtod_l+0xbf0>
 800ff96:	f04f 0800 	mov.w	r8, #0
 800ff9a:	4b92      	ldr	r3, [pc, #584]	; (80101e4 <_strtod_l+0xbf4>)
 800ff9c:	403b      	ands	r3, r7
 800ff9e:	930d      	str	r3, [sp, #52]	; 0x34
 800ffa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffa2:	4b91      	ldr	r3, [pc, #580]	; (80101e8 <_strtod_l+0xbf8>)
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	f040 80b0 	bne.w	801010a <_strtod_l+0xb1a>
 800ffaa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ffae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ffb2:	ec4b ab10 	vmov	d0, sl, fp
 800ffb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ffba:	f002 fa9b 	bl	80124f4 <__ulp>
 800ffbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ffc2:	ec53 2b10 	vmov	r2, r3, d0
 800ffc6:	f7f0 fb3f 	bl	8000648 <__aeabi_dmul>
 800ffca:	4652      	mov	r2, sl
 800ffcc:	465b      	mov	r3, fp
 800ffce:	f7f0 f985 	bl	80002dc <__adddf3>
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	4983      	ldr	r1, [pc, #524]	; (80101e4 <_strtod_l+0xbf4>)
 800ffd6:	4a85      	ldr	r2, [pc, #532]	; (80101ec <_strtod_l+0xbfc>)
 800ffd8:	4019      	ands	r1, r3
 800ffda:	4291      	cmp	r1, r2
 800ffdc:	4682      	mov	sl, r0
 800ffde:	d960      	bls.n	80100a2 <_strtod_l+0xab2>
 800ffe0:	ee18 3a90 	vmov	r3, s17
 800ffe4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d104      	bne.n	800fff6 <_strtod_l+0xa06>
 800ffec:	ee18 3a10 	vmov	r3, s16
 800fff0:	3301      	adds	r3, #1
 800fff2:	f43f ad45 	beq.w	800fa80 <_strtod_l+0x490>
 800fff6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80101f8 <_strtod_l+0xc08>
 800fffa:	f04f 3aff 	mov.w	sl, #4294967295
 800fffe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010000:	4620      	mov	r0, r4
 8010002:	f001 ff45 	bl	8011e90 <_Bfree>
 8010006:	9905      	ldr	r1, [sp, #20]
 8010008:	4620      	mov	r0, r4
 801000a:	f001 ff41 	bl	8011e90 <_Bfree>
 801000e:	4631      	mov	r1, r6
 8010010:	4620      	mov	r0, r4
 8010012:	f001 ff3d 	bl	8011e90 <_Bfree>
 8010016:	4629      	mov	r1, r5
 8010018:	4620      	mov	r0, r4
 801001a:	f001 ff39 	bl	8011e90 <_Bfree>
 801001e:	e61a      	b.n	800fc56 <_strtod_l+0x666>
 8010020:	f1ba 0f00 	cmp.w	sl, #0
 8010024:	d11b      	bne.n	801005e <_strtod_l+0xa6e>
 8010026:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801002a:	b9f3      	cbnz	r3, 801006a <_strtod_l+0xa7a>
 801002c:	4b6c      	ldr	r3, [pc, #432]	; (80101e0 <_strtod_l+0xbf0>)
 801002e:	2200      	movs	r2, #0
 8010030:	4640      	mov	r0, r8
 8010032:	4649      	mov	r1, r9
 8010034:	f7f0 fd7a 	bl	8000b2c <__aeabi_dcmplt>
 8010038:	b9d0      	cbnz	r0, 8010070 <_strtod_l+0xa80>
 801003a:	4640      	mov	r0, r8
 801003c:	4649      	mov	r1, r9
 801003e:	4b6c      	ldr	r3, [pc, #432]	; (80101f0 <_strtod_l+0xc00>)
 8010040:	2200      	movs	r2, #0
 8010042:	f7f0 fb01 	bl	8000648 <__aeabi_dmul>
 8010046:	4680      	mov	r8, r0
 8010048:	4689      	mov	r9, r1
 801004a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801004e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010052:	9315      	str	r3, [sp, #84]	; 0x54
 8010054:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010058:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801005c:	e79d      	b.n	800ff9a <_strtod_l+0x9aa>
 801005e:	f1ba 0f01 	cmp.w	sl, #1
 8010062:	d102      	bne.n	801006a <_strtod_l+0xa7a>
 8010064:	2f00      	cmp	r7, #0
 8010066:	f43f ad83 	beq.w	800fb70 <_strtod_l+0x580>
 801006a:	4b62      	ldr	r3, [pc, #392]	; (80101f4 <_strtod_l+0xc04>)
 801006c:	2200      	movs	r2, #0
 801006e:	e78e      	b.n	800ff8e <_strtod_l+0x99e>
 8010070:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80101f0 <_strtod_l+0xc00>
 8010074:	f04f 0800 	mov.w	r8, #0
 8010078:	e7e7      	b.n	801004a <_strtod_l+0xa5a>
 801007a:	4b5d      	ldr	r3, [pc, #372]	; (80101f0 <_strtod_l+0xc00>)
 801007c:	4640      	mov	r0, r8
 801007e:	4649      	mov	r1, r9
 8010080:	2200      	movs	r2, #0
 8010082:	f7f0 fae1 	bl	8000648 <__aeabi_dmul>
 8010086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010088:	4680      	mov	r8, r0
 801008a:	4689      	mov	r9, r1
 801008c:	b933      	cbnz	r3, 801009c <_strtod_l+0xaac>
 801008e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010092:	900e      	str	r0, [sp, #56]	; 0x38
 8010094:	930f      	str	r3, [sp, #60]	; 0x3c
 8010096:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801009a:	e7dd      	b.n	8010058 <_strtod_l+0xa68>
 801009c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80100a0:	e7f9      	b.n	8010096 <_strtod_l+0xaa6>
 80100a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80100a6:	9b04      	ldr	r3, [sp, #16]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d1a8      	bne.n	800fffe <_strtod_l+0xa0e>
 80100ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100b2:	0d1b      	lsrs	r3, r3, #20
 80100b4:	051b      	lsls	r3, r3, #20
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d1a1      	bne.n	800fffe <_strtod_l+0xa0e>
 80100ba:	4640      	mov	r0, r8
 80100bc:	4649      	mov	r1, r9
 80100be:	f7f0 fe23 	bl	8000d08 <__aeabi_d2lz>
 80100c2:	f7f0 fa93 	bl	80005ec <__aeabi_l2d>
 80100c6:	4602      	mov	r2, r0
 80100c8:	460b      	mov	r3, r1
 80100ca:	4640      	mov	r0, r8
 80100cc:	4649      	mov	r1, r9
 80100ce:	f7f0 f903 	bl	80002d8 <__aeabi_dsub>
 80100d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80100d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100d8:	ea43 030a 	orr.w	r3, r3, sl
 80100dc:	4313      	orrs	r3, r2
 80100de:	4680      	mov	r8, r0
 80100e0:	4689      	mov	r9, r1
 80100e2:	d055      	beq.n	8010190 <_strtod_l+0xba0>
 80100e4:	a336      	add	r3, pc, #216	; (adr r3, 80101c0 <_strtod_l+0xbd0>)
 80100e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ea:	f7f0 fd1f 	bl	8000b2c <__aeabi_dcmplt>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	f47f acd0 	bne.w	800fa94 <_strtod_l+0x4a4>
 80100f4:	a334      	add	r3, pc, #208	; (adr r3, 80101c8 <_strtod_l+0xbd8>)
 80100f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fa:	4640      	mov	r0, r8
 80100fc:	4649      	mov	r1, r9
 80100fe:	f7f0 fd33 	bl	8000b68 <__aeabi_dcmpgt>
 8010102:	2800      	cmp	r0, #0
 8010104:	f43f af7b 	beq.w	800fffe <_strtod_l+0xa0e>
 8010108:	e4c4      	b.n	800fa94 <_strtod_l+0x4a4>
 801010a:	9b04      	ldr	r3, [sp, #16]
 801010c:	b333      	cbz	r3, 801015c <_strtod_l+0xb6c>
 801010e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010110:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010114:	d822      	bhi.n	801015c <_strtod_l+0xb6c>
 8010116:	a32e      	add	r3, pc, #184	; (adr r3, 80101d0 <_strtod_l+0xbe0>)
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	4640      	mov	r0, r8
 801011e:	4649      	mov	r1, r9
 8010120:	f7f0 fd0e 	bl	8000b40 <__aeabi_dcmple>
 8010124:	b1a0      	cbz	r0, 8010150 <_strtod_l+0xb60>
 8010126:	4649      	mov	r1, r9
 8010128:	4640      	mov	r0, r8
 801012a:	f7f0 fd65 	bl	8000bf8 <__aeabi_d2uiz>
 801012e:	2801      	cmp	r0, #1
 8010130:	bf38      	it	cc
 8010132:	2001      	movcc	r0, #1
 8010134:	f7f0 fa0e 	bl	8000554 <__aeabi_ui2d>
 8010138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801013a:	4680      	mov	r8, r0
 801013c:	4689      	mov	r9, r1
 801013e:	bb23      	cbnz	r3, 801018a <_strtod_l+0xb9a>
 8010140:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010144:	9010      	str	r0, [sp, #64]	; 0x40
 8010146:	9311      	str	r3, [sp, #68]	; 0x44
 8010148:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801014c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010154:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010158:	1a9b      	subs	r3, r3, r2
 801015a:	9309      	str	r3, [sp, #36]	; 0x24
 801015c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010160:	eeb0 0a48 	vmov.f32	s0, s16
 8010164:	eef0 0a68 	vmov.f32	s1, s17
 8010168:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801016c:	f002 f9c2 	bl	80124f4 <__ulp>
 8010170:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010174:	ec53 2b10 	vmov	r2, r3, d0
 8010178:	f7f0 fa66 	bl	8000648 <__aeabi_dmul>
 801017c:	ec53 2b18 	vmov	r2, r3, d8
 8010180:	f7f0 f8ac 	bl	80002dc <__adddf3>
 8010184:	4682      	mov	sl, r0
 8010186:	468b      	mov	fp, r1
 8010188:	e78d      	b.n	80100a6 <_strtod_l+0xab6>
 801018a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801018e:	e7db      	b.n	8010148 <_strtod_l+0xb58>
 8010190:	a311      	add	r3, pc, #68	; (adr r3, 80101d8 <_strtod_l+0xbe8>)
 8010192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010196:	f7f0 fcc9 	bl	8000b2c <__aeabi_dcmplt>
 801019a:	e7b2      	b.n	8010102 <_strtod_l+0xb12>
 801019c:	2300      	movs	r3, #0
 801019e:	930a      	str	r3, [sp, #40]	; 0x28
 80101a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80101a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101a4:	6013      	str	r3, [r2, #0]
 80101a6:	f7ff ba6b 	b.w	800f680 <_strtod_l+0x90>
 80101aa:	2a65      	cmp	r2, #101	; 0x65
 80101ac:	f43f ab5f 	beq.w	800f86e <_strtod_l+0x27e>
 80101b0:	2a45      	cmp	r2, #69	; 0x45
 80101b2:	f43f ab5c 	beq.w	800f86e <_strtod_l+0x27e>
 80101b6:	2301      	movs	r3, #1
 80101b8:	f7ff bb94 	b.w	800f8e4 <_strtod_l+0x2f4>
 80101bc:	f3af 8000 	nop.w
 80101c0:	94a03595 	.word	0x94a03595
 80101c4:	3fdfffff 	.word	0x3fdfffff
 80101c8:	35afe535 	.word	0x35afe535
 80101cc:	3fe00000 	.word	0x3fe00000
 80101d0:	ffc00000 	.word	0xffc00000
 80101d4:	41dfffff 	.word	0x41dfffff
 80101d8:	94a03595 	.word	0x94a03595
 80101dc:	3fcfffff 	.word	0x3fcfffff
 80101e0:	3ff00000 	.word	0x3ff00000
 80101e4:	7ff00000 	.word	0x7ff00000
 80101e8:	7fe00000 	.word	0x7fe00000
 80101ec:	7c9fffff 	.word	0x7c9fffff
 80101f0:	3fe00000 	.word	0x3fe00000
 80101f4:	bff00000 	.word	0xbff00000
 80101f8:	7fefffff 	.word	0x7fefffff

080101fc <_strtod_r>:
 80101fc:	4b01      	ldr	r3, [pc, #4]	; (8010204 <_strtod_r+0x8>)
 80101fe:	f7ff b9f7 	b.w	800f5f0 <_strtod_l>
 8010202:	bf00      	nop
 8010204:	20000084 	.word	0x20000084

08010208 <strtok>:
 8010208:	4b16      	ldr	r3, [pc, #88]	; (8010264 <strtok+0x5c>)
 801020a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801020c:	681e      	ldr	r6, [r3, #0]
 801020e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8010210:	4605      	mov	r5, r0
 8010212:	b9fc      	cbnz	r4, 8010254 <strtok+0x4c>
 8010214:	2050      	movs	r0, #80	; 0x50
 8010216:	9101      	str	r1, [sp, #4]
 8010218:	f7fe f8f0 	bl	800e3fc <malloc>
 801021c:	9901      	ldr	r1, [sp, #4]
 801021e:	65b0      	str	r0, [r6, #88]	; 0x58
 8010220:	4602      	mov	r2, r0
 8010222:	b920      	cbnz	r0, 801022e <strtok+0x26>
 8010224:	4b10      	ldr	r3, [pc, #64]	; (8010268 <strtok+0x60>)
 8010226:	4811      	ldr	r0, [pc, #68]	; (801026c <strtok+0x64>)
 8010228:	2157      	movs	r1, #87	; 0x57
 801022a:	f000 f997 	bl	801055c <__assert_func>
 801022e:	e9c0 4400 	strd	r4, r4, [r0]
 8010232:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010236:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801023a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801023e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010242:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010246:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801024a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801024e:	6184      	str	r4, [r0, #24]
 8010250:	7704      	strb	r4, [r0, #28]
 8010252:	6244      	str	r4, [r0, #36]	; 0x24
 8010254:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8010256:	2301      	movs	r3, #1
 8010258:	4628      	mov	r0, r5
 801025a:	b002      	add	sp, #8
 801025c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010260:	f000 b806 	b.w	8010270 <__strtok_r>
 8010264:	2000001c 	.word	0x2000001c
 8010268:	08013f50 	.word	0x08013f50
 801026c:	08013f67 	.word	0x08013f67

08010270 <__strtok_r>:
 8010270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010272:	b908      	cbnz	r0, 8010278 <__strtok_r+0x8>
 8010274:	6810      	ldr	r0, [r2, #0]
 8010276:	b188      	cbz	r0, 801029c <__strtok_r+0x2c>
 8010278:	4604      	mov	r4, r0
 801027a:	4620      	mov	r0, r4
 801027c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010280:	460f      	mov	r7, r1
 8010282:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010286:	b91e      	cbnz	r6, 8010290 <__strtok_r+0x20>
 8010288:	b965      	cbnz	r5, 80102a4 <__strtok_r+0x34>
 801028a:	6015      	str	r5, [r2, #0]
 801028c:	4628      	mov	r0, r5
 801028e:	e005      	b.n	801029c <__strtok_r+0x2c>
 8010290:	42b5      	cmp	r5, r6
 8010292:	d1f6      	bne.n	8010282 <__strtok_r+0x12>
 8010294:	2b00      	cmp	r3, #0
 8010296:	d1f0      	bne.n	801027a <__strtok_r+0xa>
 8010298:	6014      	str	r4, [r2, #0]
 801029a:	7003      	strb	r3, [r0, #0]
 801029c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801029e:	461c      	mov	r4, r3
 80102a0:	e00c      	b.n	80102bc <__strtok_r+0x4c>
 80102a2:	b915      	cbnz	r5, 80102aa <__strtok_r+0x3a>
 80102a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80102a8:	460e      	mov	r6, r1
 80102aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80102ae:	42ab      	cmp	r3, r5
 80102b0:	d1f7      	bne.n	80102a2 <__strtok_r+0x32>
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d0f3      	beq.n	801029e <__strtok_r+0x2e>
 80102b6:	2300      	movs	r3, #0
 80102b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80102bc:	6014      	str	r4, [r2, #0]
 80102be:	e7ed      	b.n	801029c <__strtok_r+0x2c>

080102c0 <_strtol_l.constprop.0>:
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102c6:	d001      	beq.n	80102cc <_strtol_l.constprop.0+0xc>
 80102c8:	2b24      	cmp	r3, #36	; 0x24
 80102ca:	d906      	bls.n	80102da <_strtol_l.constprop.0+0x1a>
 80102cc:	f7fe f86c 	bl	800e3a8 <__errno>
 80102d0:	2316      	movs	r3, #22
 80102d2:	6003      	str	r3, [r0, #0]
 80102d4:	2000      	movs	r0, #0
 80102d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80103c0 <_strtol_l.constprop.0+0x100>
 80102de:	460d      	mov	r5, r1
 80102e0:	462e      	mov	r6, r5
 80102e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80102ea:	f017 0708 	ands.w	r7, r7, #8
 80102ee:	d1f7      	bne.n	80102e0 <_strtol_l.constprop.0+0x20>
 80102f0:	2c2d      	cmp	r4, #45	; 0x2d
 80102f2:	d132      	bne.n	801035a <_strtol_l.constprop.0+0x9a>
 80102f4:	782c      	ldrb	r4, [r5, #0]
 80102f6:	2701      	movs	r7, #1
 80102f8:	1cb5      	adds	r5, r6, #2
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d05b      	beq.n	80103b6 <_strtol_l.constprop.0+0xf6>
 80102fe:	2b10      	cmp	r3, #16
 8010300:	d109      	bne.n	8010316 <_strtol_l.constprop.0+0x56>
 8010302:	2c30      	cmp	r4, #48	; 0x30
 8010304:	d107      	bne.n	8010316 <_strtol_l.constprop.0+0x56>
 8010306:	782c      	ldrb	r4, [r5, #0]
 8010308:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801030c:	2c58      	cmp	r4, #88	; 0x58
 801030e:	d14d      	bne.n	80103ac <_strtol_l.constprop.0+0xec>
 8010310:	786c      	ldrb	r4, [r5, #1]
 8010312:	2310      	movs	r3, #16
 8010314:	3502      	adds	r5, #2
 8010316:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801031a:	f108 38ff 	add.w	r8, r8, #4294967295
 801031e:	f04f 0c00 	mov.w	ip, #0
 8010322:	fbb8 f9f3 	udiv	r9, r8, r3
 8010326:	4666      	mov	r6, ip
 8010328:	fb03 8a19 	mls	sl, r3, r9, r8
 801032c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010330:	f1be 0f09 	cmp.w	lr, #9
 8010334:	d816      	bhi.n	8010364 <_strtol_l.constprop.0+0xa4>
 8010336:	4674      	mov	r4, lr
 8010338:	42a3      	cmp	r3, r4
 801033a:	dd24      	ble.n	8010386 <_strtol_l.constprop.0+0xc6>
 801033c:	f1bc 0f00 	cmp.w	ip, #0
 8010340:	db1e      	blt.n	8010380 <_strtol_l.constprop.0+0xc0>
 8010342:	45b1      	cmp	r9, r6
 8010344:	d31c      	bcc.n	8010380 <_strtol_l.constprop.0+0xc0>
 8010346:	d101      	bne.n	801034c <_strtol_l.constprop.0+0x8c>
 8010348:	45a2      	cmp	sl, r4
 801034a:	db19      	blt.n	8010380 <_strtol_l.constprop.0+0xc0>
 801034c:	fb06 4603 	mla	r6, r6, r3, r4
 8010350:	f04f 0c01 	mov.w	ip, #1
 8010354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010358:	e7e8      	b.n	801032c <_strtol_l.constprop.0+0x6c>
 801035a:	2c2b      	cmp	r4, #43	; 0x2b
 801035c:	bf04      	itt	eq
 801035e:	782c      	ldrbeq	r4, [r5, #0]
 8010360:	1cb5      	addeq	r5, r6, #2
 8010362:	e7ca      	b.n	80102fa <_strtol_l.constprop.0+0x3a>
 8010364:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010368:	f1be 0f19 	cmp.w	lr, #25
 801036c:	d801      	bhi.n	8010372 <_strtol_l.constprop.0+0xb2>
 801036e:	3c37      	subs	r4, #55	; 0x37
 8010370:	e7e2      	b.n	8010338 <_strtol_l.constprop.0+0x78>
 8010372:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010376:	f1be 0f19 	cmp.w	lr, #25
 801037a:	d804      	bhi.n	8010386 <_strtol_l.constprop.0+0xc6>
 801037c:	3c57      	subs	r4, #87	; 0x57
 801037e:	e7db      	b.n	8010338 <_strtol_l.constprop.0+0x78>
 8010380:	f04f 3cff 	mov.w	ip, #4294967295
 8010384:	e7e6      	b.n	8010354 <_strtol_l.constprop.0+0x94>
 8010386:	f1bc 0f00 	cmp.w	ip, #0
 801038a:	da05      	bge.n	8010398 <_strtol_l.constprop.0+0xd8>
 801038c:	2322      	movs	r3, #34	; 0x22
 801038e:	6003      	str	r3, [r0, #0]
 8010390:	4646      	mov	r6, r8
 8010392:	b942      	cbnz	r2, 80103a6 <_strtol_l.constprop.0+0xe6>
 8010394:	4630      	mov	r0, r6
 8010396:	e79e      	b.n	80102d6 <_strtol_l.constprop.0+0x16>
 8010398:	b107      	cbz	r7, 801039c <_strtol_l.constprop.0+0xdc>
 801039a:	4276      	negs	r6, r6
 801039c:	2a00      	cmp	r2, #0
 801039e:	d0f9      	beq.n	8010394 <_strtol_l.constprop.0+0xd4>
 80103a0:	f1bc 0f00 	cmp.w	ip, #0
 80103a4:	d000      	beq.n	80103a8 <_strtol_l.constprop.0+0xe8>
 80103a6:	1e69      	subs	r1, r5, #1
 80103a8:	6011      	str	r1, [r2, #0]
 80103aa:	e7f3      	b.n	8010394 <_strtol_l.constprop.0+0xd4>
 80103ac:	2430      	movs	r4, #48	; 0x30
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1b1      	bne.n	8010316 <_strtol_l.constprop.0+0x56>
 80103b2:	2308      	movs	r3, #8
 80103b4:	e7af      	b.n	8010316 <_strtol_l.constprop.0+0x56>
 80103b6:	2c30      	cmp	r4, #48	; 0x30
 80103b8:	d0a5      	beq.n	8010306 <_strtol_l.constprop.0+0x46>
 80103ba:	230a      	movs	r3, #10
 80103bc:	e7ab      	b.n	8010316 <_strtol_l.constprop.0+0x56>
 80103be:	bf00      	nop
 80103c0:	08014001 	.word	0x08014001

080103c4 <_strtol_r>:
 80103c4:	f7ff bf7c 	b.w	80102c0 <_strtol_l.constprop.0>

080103c8 <strtol>:
 80103c8:	4613      	mov	r3, r2
 80103ca:	460a      	mov	r2, r1
 80103cc:	4601      	mov	r1, r0
 80103ce:	4802      	ldr	r0, [pc, #8]	; (80103d8 <strtol+0x10>)
 80103d0:	6800      	ldr	r0, [r0, #0]
 80103d2:	f7ff bf75 	b.w	80102c0 <_strtol_l.constprop.0>
 80103d6:	bf00      	nop
 80103d8:	2000001c 	.word	0x2000001c

080103dc <__swbuf_r>:
 80103dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103de:	460e      	mov	r6, r1
 80103e0:	4614      	mov	r4, r2
 80103e2:	4605      	mov	r5, r0
 80103e4:	b118      	cbz	r0, 80103ee <__swbuf_r+0x12>
 80103e6:	6983      	ldr	r3, [r0, #24]
 80103e8:	b90b      	cbnz	r3, 80103ee <__swbuf_r+0x12>
 80103ea:	f001 f869 	bl	80114c0 <__sinit>
 80103ee:	4b21      	ldr	r3, [pc, #132]	; (8010474 <__swbuf_r+0x98>)
 80103f0:	429c      	cmp	r4, r3
 80103f2:	d12b      	bne.n	801044c <__swbuf_r+0x70>
 80103f4:	686c      	ldr	r4, [r5, #4]
 80103f6:	69a3      	ldr	r3, [r4, #24]
 80103f8:	60a3      	str	r3, [r4, #8]
 80103fa:	89a3      	ldrh	r3, [r4, #12]
 80103fc:	071a      	lsls	r2, r3, #28
 80103fe:	d52f      	bpl.n	8010460 <__swbuf_r+0x84>
 8010400:	6923      	ldr	r3, [r4, #16]
 8010402:	b36b      	cbz	r3, 8010460 <__swbuf_r+0x84>
 8010404:	6923      	ldr	r3, [r4, #16]
 8010406:	6820      	ldr	r0, [r4, #0]
 8010408:	1ac0      	subs	r0, r0, r3
 801040a:	6963      	ldr	r3, [r4, #20]
 801040c:	b2f6      	uxtb	r6, r6
 801040e:	4283      	cmp	r3, r0
 8010410:	4637      	mov	r7, r6
 8010412:	dc04      	bgt.n	801041e <__swbuf_r+0x42>
 8010414:	4621      	mov	r1, r4
 8010416:	4628      	mov	r0, r5
 8010418:	f000 ffbe 	bl	8011398 <_fflush_r>
 801041c:	bb30      	cbnz	r0, 801046c <__swbuf_r+0x90>
 801041e:	68a3      	ldr	r3, [r4, #8]
 8010420:	3b01      	subs	r3, #1
 8010422:	60a3      	str	r3, [r4, #8]
 8010424:	6823      	ldr	r3, [r4, #0]
 8010426:	1c5a      	adds	r2, r3, #1
 8010428:	6022      	str	r2, [r4, #0]
 801042a:	701e      	strb	r6, [r3, #0]
 801042c:	6963      	ldr	r3, [r4, #20]
 801042e:	3001      	adds	r0, #1
 8010430:	4283      	cmp	r3, r0
 8010432:	d004      	beq.n	801043e <__swbuf_r+0x62>
 8010434:	89a3      	ldrh	r3, [r4, #12]
 8010436:	07db      	lsls	r3, r3, #31
 8010438:	d506      	bpl.n	8010448 <__swbuf_r+0x6c>
 801043a:	2e0a      	cmp	r6, #10
 801043c:	d104      	bne.n	8010448 <__swbuf_r+0x6c>
 801043e:	4621      	mov	r1, r4
 8010440:	4628      	mov	r0, r5
 8010442:	f000 ffa9 	bl	8011398 <_fflush_r>
 8010446:	b988      	cbnz	r0, 801046c <__swbuf_r+0x90>
 8010448:	4638      	mov	r0, r7
 801044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801044c:	4b0a      	ldr	r3, [pc, #40]	; (8010478 <__swbuf_r+0x9c>)
 801044e:	429c      	cmp	r4, r3
 8010450:	d101      	bne.n	8010456 <__swbuf_r+0x7a>
 8010452:	68ac      	ldr	r4, [r5, #8]
 8010454:	e7cf      	b.n	80103f6 <__swbuf_r+0x1a>
 8010456:	4b09      	ldr	r3, [pc, #36]	; (801047c <__swbuf_r+0xa0>)
 8010458:	429c      	cmp	r4, r3
 801045a:	bf08      	it	eq
 801045c:	68ec      	ldreq	r4, [r5, #12]
 801045e:	e7ca      	b.n	80103f6 <__swbuf_r+0x1a>
 8010460:	4621      	mov	r1, r4
 8010462:	4628      	mov	r0, r5
 8010464:	f000 f80c 	bl	8010480 <__swsetup_r>
 8010468:	2800      	cmp	r0, #0
 801046a:	d0cb      	beq.n	8010404 <__swbuf_r+0x28>
 801046c:	f04f 37ff 	mov.w	r7, #4294967295
 8010470:	e7ea      	b.n	8010448 <__swbuf_r+0x6c>
 8010472:	bf00      	nop
 8010474:	0801419c 	.word	0x0801419c
 8010478:	080141bc 	.word	0x080141bc
 801047c:	0801417c 	.word	0x0801417c

08010480 <__swsetup_r>:
 8010480:	4b32      	ldr	r3, [pc, #200]	; (801054c <__swsetup_r+0xcc>)
 8010482:	b570      	push	{r4, r5, r6, lr}
 8010484:	681d      	ldr	r5, [r3, #0]
 8010486:	4606      	mov	r6, r0
 8010488:	460c      	mov	r4, r1
 801048a:	b125      	cbz	r5, 8010496 <__swsetup_r+0x16>
 801048c:	69ab      	ldr	r3, [r5, #24]
 801048e:	b913      	cbnz	r3, 8010496 <__swsetup_r+0x16>
 8010490:	4628      	mov	r0, r5
 8010492:	f001 f815 	bl	80114c0 <__sinit>
 8010496:	4b2e      	ldr	r3, [pc, #184]	; (8010550 <__swsetup_r+0xd0>)
 8010498:	429c      	cmp	r4, r3
 801049a:	d10f      	bne.n	80104bc <__swsetup_r+0x3c>
 801049c:	686c      	ldr	r4, [r5, #4]
 801049e:	89a3      	ldrh	r3, [r4, #12]
 80104a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104a4:	0719      	lsls	r1, r3, #28
 80104a6:	d42c      	bmi.n	8010502 <__swsetup_r+0x82>
 80104a8:	06dd      	lsls	r5, r3, #27
 80104aa:	d411      	bmi.n	80104d0 <__swsetup_r+0x50>
 80104ac:	2309      	movs	r3, #9
 80104ae:	6033      	str	r3, [r6, #0]
 80104b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80104b4:	81a3      	strh	r3, [r4, #12]
 80104b6:	f04f 30ff 	mov.w	r0, #4294967295
 80104ba:	e03e      	b.n	801053a <__swsetup_r+0xba>
 80104bc:	4b25      	ldr	r3, [pc, #148]	; (8010554 <__swsetup_r+0xd4>)
 80104be:	429c      	cmp	r4, r3
 80104c0:	d101      	bne.n	80104c6 <__swsetup_r+0x46>
 80104c2:	68ac      	ldr	r4, [r5, #8]
 80104c4:	e7eb      	b.n	801049e <__swsetup_r+0x1e>
 80104c6:	4b24      	ldr	r3, [pc, #144]	; (8010558 <__swsetup_r+0xd8>)
 80104c8:	429c      	cmp	r4, r3
 80104ca:	bf08      	it	eq
 80104cc:	68ec      	ldreq	r4, [r5, #12]
 80104ce:	e7e6      	b.n	801049e <__swsetup_r+0x1e>
 80104d0:	0758      	lsls	r0, r3, #29
 80104d2:	d512      	bpl.n	80104fa <__swsetup_r+0x7a>
 80104d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104d6:	b141      	cbz	r1, 80104ea <__swsetup_r+0x6a>
 80104d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104dc:	4299      	cmp	r1, r3
 80104de:	d002      	beq.n	80104e6 <__swsetup_r+0x66>
 80104e0:	4630      	mov	r0, r6
 80104e2:	f7fd ffc1 	bl	800e468 <_free_r>
 80104e6:	2300      	movs	r3, #0
 80104e8:	6363      	str	r3, [r4, #52]	; 0x34
 80104ea:	89a3      	ldrh	r3, [r4, #12]
 80104ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80104f0:	81a3      	strh	r3, [r4, #12]
 80104f2:	2300      	movs	r3, #0
 80104f4:	6063      	str	r3, [r4, #4]
 80104f6:	6923      	ldr	r3, [r4, #16]
 80104f8:	6023      	str	r3, [r4, #0]
 80104fa:	89a3      	ldrh	r3, [r4, #12]
 80104fc:	f043 0308 	orr.w	r3, r3, #8
 8010500:	81a3      	strh	r3, [r4, #12]
 8010502:	6923      	ldr	r3, [r4, #16]
 8010504:	b94b      	cbnz	r3, 801051a <__swsetup_r+0x9a>
 8010506:	89a3      	ldrh	r3, [r4, #12]
 8010508:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801050c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010510:	d003      	beq.n	801051a <__swsetup_r+0x9a>
 8010512:	4621      	mov	r1, r4
 8010514:	4630      	mov	r0, r6
 8010516:	f001 fc1d 	bl	8011d54 <__smakebuf_r>
 801051a:	89a0      	ldrh	r0, [r4, #12]
 801051c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010520:	f010 0301 	ands.w	r3, r0, #1
 8010524:	d00a      	beq.n	801053c <__swsetup_r+0xbc>
 8010526:	2300      	movs	r3, #0
 8010528:	60a3      	str	r3, [r4, #8]
 801052a:	6963      	ldr	r3, [r4, #20]
 801052c:	425b      	negs	r3, r3
 801052e:	61a3      	str	r3, [r4, #24]
 8010530:	6923      	ldr	r3, [r4, #16]
 8010532:	b943      	cbnz	r3, 8010546 <__swsetup_r+0xc6>
 8010534:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010538:	d1ba      	bne.n	80104b0 <__swsetup_r+0x30>
 801053a:	bd70      	pop	{r4, r5, r6, pc}
 801053c:	0781      	lsls	r1, r0, #30
 801053e:	bf58      	it	pl
 8010540:	6963      	ldrpl	r3, [r4, #20]
 8010542:	60a3      	str	r3, [r4, #8]
 8010544:	e7f4      	b.n	8010530 <__swsetup_r+0xb0>
 8010546:	2000      	movs	r0, #0
 8010548:	e7f7      	b.n	801053a <__swsetup_r+0xba>
 801054a:	bf00      	nop
 801054c:	2000001c 	.word	0x2000001c
 8010550:	0801419c 	.word	0x0801419c
 8010554:	080141bc 	.word	0x080141bc
 8010558:	0801417c 	.word	0x0801417c

0801055c <__assert_func>:
 801055c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801055e:	4614      	mov	r4, r2
 8010560:	461a      	mov	r2, r3
 8010562:	4b09      	ldr	r3, [pc, #36]	; (8010588 <__assert_func+0x2c>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	4605      	mov	r5, r0
 8010568:	68d8      	ldr	r0, [r3, #12]
 801056a:	b14c      	cbz	r4, 8010580 <__assert_func+0x24>
 801056c:	4b07      	ldr	r3, [pc, #28]	; (801058c <__assert_func+0x30>)
 801056e:	9100      	str	r1, [sp, #0]
 8010570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010574:	4906      	ldr	r1, [pc, #24]	; (8010590 <__assert_func+0x34>)
 8010576:	462b      	mov	r3, r5
 8010578:	f001 f820 	bl	80115bc <fiprintf>
 801057c:	f002 fc86 	bl	8012e8c <abort>
 8010580:	4b04      	ldr	r3, [pc, #16]	; (8010594 <__assert_func+0x38>)
 8010582:	461c      	mov	r4, r3
 8010584:	e7f3      	b.n	801056e <__assert_func+0x12>
 8010586:	bf00      	nop
 8010588:	2000001c 	.word	0x2000001c
 801058c:	08013fc4 	.word	0x08013fc4
 8010590:	08013fd1 	.word	0x08013fd1
 8010594:	08013fff 	.word	0x08013fff

08010598 <quorem>:
 8010598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	6903      	ldr	r3, [r0, #16]
 801059e:	690c      	ldr	r4, [r1, #16]
 80105a0:	42a3      	cmp	r3, r4
 80105a2:	4607      	mov	r7, r0
 80105a4:	f2c0 8081 	blt.w	80106aa <quorem+0x112>
 80105a8:	3c01      	subs	r4, #1
 80105aa:	f101 0814 	add.w	r8, r1, #20
 80105ae:	f100 0514 	add.w	r5, r0, #20
 80105b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105b6:	9301      	str	r3, [sp, #4]
 80105b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80105bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105c0:	3301      	adds	r3, #1
 80105c2:	429a      	cmp	r2, r3
 80105c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80105d0:	d331      	bcc.n	8010636 <quorem+0x9e>
 80105d2:	f04f 0e00 	mov.w	lr, #0
 80105d6:	4640      	mov	r0, r8
 80105d8:	46ac      	mov	ip, r5
 80105da:	46f2      	mov	sl, lr
 80105dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80105e0:	b293      	uxth	r3, r2
 80105e2:	fb06 e303 	mla	r3, r6, r3, lr
 80105e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	ebaa 0303 	sub.w	r3, sl, r3
 80105f0:	f8dc a000 	ldr.w	sl, [ip]
 80105f4:	0c12      	lsrs	r2, r2, #16
 80105f6:	fa13 f38a 	uxtah	r3, r3, sl
 80105fa:	fb06 e202 	mla	r2, r6, r2, lr
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	9b00      	ldr	r3, [sp, #0]
 8010602:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010606:	b292      	uxth	r2, r2
 8010608:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801060c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010610:	f8bd 3000 	ldrh.w	r3, [sp]
 8010614:	4581      	cmp	r9, r0
 8010616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801061a:	f84c 3b04 	str.w	r3, [ip], #4
 801061e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010622:	d2db      	bcs.n	80105dc <quorem+0x44>
 8010624:	f855 300b 	ldr.w	r3, [r5, fp]
 8010628:	b92b      	cbnz	r3, 8010636 <quorem+0x9e>
 801062a:	9b01      	ldr	r3, [sp, #4]
 801062c:	3b04      	subs	r3, #4
 801062e:	429d      	cmp	r5, r3
 8010630:	461a      	mov	r2, r3
 8010632:	d32e      	bcc.n	8010692 <quorem+0xfa>
 8010634:	613c      	str	r4, [r7, #16]
 8010636:	4638      	mov	r0, r7
 8010638:	f001 feb6 	bl	80123a8 <__mcmp>
 801063c:	2800      	cmp	r0, #0
 801063e:	db24      	blt.n	801068a <quorem+0xf2>
 8010640:	3601      	adds	r6, #1
 8010642:	4628      	mov	r0, r5
 8010644:	f04f 0c00 	mov.w	ip, #0
 8010648:	f858 2b04 	ldr.w	r2, [r8], #4
 801064c:	f8d0 e000 	ldr.w	lr, [r0]
 8010650:	b293      	uxth	r3, r2
 8010652:	ebac 0303 	sub.w	r3, ip, r3
 8010656:	0c12      	lsrs	r2, r2, #16
 8010658:	fa13 f38e 	uxtah	r3, r3, lr
 801065c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010660:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010664:	b29b      	uxth	r3, r3
 8010666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801066a:	45c1      	cmp	r9, r8
 801066c:	f840 3b04 	str.w	r3, [r0], #4
 8010670:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010674:	d2e8      	bcs.n	8010648 <quorem+0xb0>
 8010676:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801067a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801067e:	b922      	cbnz	r2, 801068a <quorem+0xf2>
 8010680:	3b04      	subs	r3, #4
 8010682:	429d      	cmp	r5, r3
 8010684:	461a      	mov	r2, r3
 8010686:	d30a      	bcc.n	801069e <quorem+0x106>
 8010688:	613c      	str	r4, [r7, #16]
 801068a:	4630      	mov	r0, r6
 801068c:	b003      	add	sp, #12
 801068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010692:	6812      	ldr	r2, [r2, #0]
 8010694:	3b04      	subs	r3, #4
 8010696:	2a00      	cmp	r2, #0
 8010698:	d1cc      	bne.n	8010634 <quorem+0x9c>
 801069a:	3c01      	subs	r4, #1
 801069c:	e7c7      	b.n	801062e <quorem+0x96>
 801069e:	6812      	ldr	r2, [r2, #0]
 80106a0:	3b04      	subs	r3, #4
 80106a2:	2a00      	cmp	r2, #0
 80106a4:	d1f0      	bne.n	8010688 <quorem+0xf0>
 80106a6:	3c01      	subs	r4, #1
 80106a8:	e7eb      	b.n	8010682 <quorem+0xea>
 80106aa:	2000      	movs	r0, #0
 80106ac:	e7ee      	b.n	801068c <quorem+0xf4>
	...

080106b0 <_dtoa_r>:
 80106b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b4:	ed2d 8b04 	vpush	{d8-d9}
 80106b8:	ec57 6b10 	vmov	r6, r7, d0
 80106bc:	b093      	sub	sp, #76	; 0x4c
 80106be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80106c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80106c4:	9106      	str	r1, [sp, #24]
 80106c6:	ee10 aa10 	vmov	sl, s0
 80106ca:	4604      	mov	r4, r0
 80106cc:	9209      	str	r2, [sp, #36]	; 0x24
 80106ce:	930c      	str	r3, [sp, #48]	; 0x30
 80106d0:	46bb      	mov	fp, r7
 80106d2:	b975      	cbnz	r5, 80106f2 <_dtoa_r+0x42>
 80106d4:	2010      	movs	r0, #16
 80106d6:	f7fd fe91 	bl	800e3fc <malloc>
 80106da:	4602      	mov	r2, r0
 80106dc:	6260      	str	r0, [r4, #36]	; 0x24
 80106de:	b920      	cbnz	r0, 80106ea <_dtoa_r+0x3a>
 80106e0:	4ba7      	ldr	r3, [pc, #668]	; (8010980 <_dtoa_r+0x2d0>)
 80106e2:	21ea      	movs	r1, #234	; 0xea
 80106e4:	48a7      	ldr	r0, [pc, #668]	; (8010984 <_dtoa_r+0x2d4>)
 80106e6:	f7ff ff39 	bl	801055c <__assert_func>
 80106ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106ee:	6005      	str	r5, [r0, #0]
 80106f0:	60c5      	str	r5, [r0, #12]
 80106f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106f4:	6819      	ldr	r1, [r3, #0]
 80106f6:	b151      	cbz	r1, 801070e <_dtoa_r+0x5e>
 80106f8:	685a      	ldr	r2, [r3, #4]
 80106fa:	604a      	str	r2, [r1, #4]
 80106fc:	2301      	movs	r3, #1
 80106fe:	4093      	lsls	r3, r2
 8010700:	608b      	str	r3, [r1, #8]
 8010702:	4620      	mov	r0, r4
 8010704:	f001 fbc4 	bl	8011e90 <_Bfree>
 8010708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801070a:	2200      	movs	r2, #0
 801070c:	601a      	str	r2, [r3, #0]
 801070e:	1e3b      	subs	r3, r7, #0
 8010710:	bfaa      	itet	ge
 8010712:	2300      	movge	r3, #0
 8010714:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010718:	f8c8 3000 	strge.w	r3, [r8]
 801071c:	4b9a      	ldr	r3, [pc, #616]	; (8010988 <_dtoa_r+0x2d8>)
 801071e:	bfbc      	itt	lt
 8010720:	2201      	movlt	r2, #1
 8010722:	f8c8 2000 	strlt.w	r2, [r8]
 8010726:	ea33 030b 	bics.w	r3, r3, fp
 801072a:	d11b      	bne.n	8010764 <_dtoa_r+0xb4>
 801072c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801072e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010732:	6013      	str	r3, [r2, #0]
 8010734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010738:	4333      	orrs	r3, r6
 801073a:	f000 8592 	beq.w	8011262 <_dtoa_r+0xbb2>
 801073e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010740:	b963      	cbnz	r3, 801075c <_dtoa_r+0xac>
 8010742:	4b92      	ldr	r3, [pc, #584]	; (801098c <_dtoa_r+0x2dc>)
 8010744:	e022      	b.n	801078c <_dtoa_r+0xdc>
 8010746:	4b92      	ldr	r3, [pc, #584]	; (8010990 <_dtoa_r+0x2e0>)
 8010748:	9301      	str	r3, [sp, #4]
 801074a:	3308      	adds	r3, #8
 801074c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801074e:	6013      	str	r3, [r2, #0]
 8010750:	9801      	ldr	r0, [sp, #4]
 8010752:	b013      	add	sp, #76	; 0x4c
 8010754:	ecbd 8b04 	vpop	{d8-d9}
 8010758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075c:	4b8b      	ldr	r3, [pc, #556]	; (801098c <_dtoa_r+0x2dc>)
 801075e:	9301      	str	r3, [sp, #4]
 8010760:	3303      	adds	r3, #3
 8010762:	e7f3      	b.n	801074c <_dtoa_r+0x9c>
 8010764:	2200      	movs	r2, #0
 8010766:	2300      	movs	r3, #0
 8010768:	4650      	mov	r0, sl
 801076a:	4659      	mov	r1, fp
 801076c:	f7f0 f9d4 	bl	8000b18 <__aeabi_dcmpeq>
 8010770:	ec4b ab19 	vmov	d9, sl, fp
 8010774:	4680      	mov	r8, r0
 8010776:	b158      	cbz	r0, 8010790 <_dtoa_r+0xe0>
 8010778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801077a:	2301      	movs	r3, #1
 801077c:	6013      	str	r3, [r2, #0]
 801077e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010780:	2b00      	cmp	r3, #0
 8010782:	f000 856b 	beq.w	801125c <_dtoa_r+0xbac>
 8010786:	4883      	ldr	r0, [pc, #524]	; (8010994 <_dtoa_r+0x2e4>)
 8010788:	6018      	str	r0, [r3, #0]
 801078a:	1e43      	subs	r3, r0, #1
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	e7df      	b.n	8010750 <_dtoa_r+0xa0>
 8010790:	ec4b ab10 	vmov	d0, sl, fp
 8010794:	aa10      	add	r2, sp, #64	; 0x40
 8010796:	a911      	add	r1, sp, #68	; 0x44
 8010798:	4620      	mov	r0, r4
 801079a:	f001 ff27 	bl	80125ec <__d2b>
 801079e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80107a2:	ee08 0a10 	vmov	s16, r0
 80107a6:	2d00      	cmp	r5, #0
 80107a8:	f000 8084 	beq.w	80108b4 <_dtoa_r+0x204>
 80107ac:	ee19 3a90 	vmov	r3, s19
 80107b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80107b8:	4656      	mov	r6, sl
 80107ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80107be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80107c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80107c6:	4b74      	ldr	r3, [pc, #464]	; (8010998 <_dtoa_r+0x2e8>)
 80107c8:	2200      	movs	r2, #0
 80107ca:	4630      	mov	r0, r6
 80107cc:	4639      	mov	r1, r7
 80107ce:	f7ef fd83 	bl	80002d8 <__aeabi_dsub>
 80107d2:	a365      	add	r3, pc, #404	; (adr r3, 8010968 <_dtoa_r+0x2b8>)
 80107d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d8:	f7ef ff36 	bl	8000648 <__aeabi_dmul>
 80107dc:	a364      	add	r3, pc, #400	; (adr r3, 8010970 <_dtoa_r+0x2c0>)
 80107de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e2:	f7ef fd7b 	bl	80002dc <__adddf3>
 80107e6:	4606      	mov	r6, r0
 80107e8:	4628      	mov	r0, r5
 80107ea:	460f      	mov	r7, r1
 80107ec:	f7ef fec2 	bl	8000574 <__aeabi_i2d>
 80107f0:	a361      	add	r3, pc, #388	; (adr r3, 8010978 <_dtoa_r+0x2c8>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	f7ef ff27 	bl	8000648 <__aeabi_dmul>
 80107fa:	4602      	mov	r2, r0
 80107fc:	460b      	mov	r3, r1
 80107fe:	4630      	mov	r0, r6
 8010800:	4639      	mov	r1, r7
 8010802:	f7ef fd6b 	bl	80002dc <__adddf3>
 8010806:	4606      	mov	r6, r0
 8010808:	460f      	mov	r7, r1
 801080a:	f7f0 f9cd 	bl	8000ba8 <__aeabi_d2iz>
 801080e:	2200      	movs	r2, #0
 8010810:	9000      	str	r0, [sp, #0]
 8010812:	2300      	movs	r3, #0
 8010814:	4630      	mov	r0, r6
 8010816:	4639      	mov	r1, r7
 8010818:	f7f0 f988 	bl	8000b2c <__aeabi_dcmplt>
 801081c:	b150      	cbz	r0, 8010834 <_dtoa_r+0x184>
 801081e:	9800      	ldr	r0, [sp, #0]
 8010820:	f7ef fea8 	bl	8000574 <__aeabi_i2d>
 8010824:	4632      	mov	r2, r6
 8010826:	463b      	mov	r3, r7
 8010828:	f7f0 f976 	bl	8000b18 <__aeabi_dcmpeq>
 801082c:	b910      	cbnz	r0, 8010834 <_dtoa_r+0x184>
 801082e:	9b00      	ldr	r3, [sp, #0]
 8010830:	3b01      	subs	r3, #1
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	9b00      	ldr	r3, [sp, #0]
 8010836:	2b16      	cmp	r3, #22
 8010838:	d85a      	bhi.n	80108f0 <_dtoa_r+0x240>
 801083a:	9a00      	ldr	r2, [sp, #0]
 801083c:	4b57      	ldr	r3, [pc, #348]	; (801099c <_dtoa_r+0x2ec>)
 801083e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010846:	ec51 0b19 	vmov	r0, r1, d9
 801084a:	f7f0 f96f 	bl	8000b2c <__aeabi_dcmplt>
 801084e:	2800      	cmp	r0, #0
 8010850:	d050      	beq.n	80108f4 <_dtoa_r+0x244>
 8010852:	9b00      	ldr	r3, [sp, #0]
 8010854:	3b01      	subs	r3, #1
 8010856:	9300      	str	r3, [sp, #0]
 8010858:	2300      	movs	r3, #0
 801085a:	930b      	str	r3, [sp, #44]	; 0x2c
 801085c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801085e:	1b5d      	subs	r5, r3, r5
 8010860:	1e6b      	subs	r3, r5, #1
 8010862:	9305      	str	r3, [sp, #20]
 8010864:	bf45      	ittet	mi
 8010866:	f1c5 0301 	rsbmi	r3, r5, #1
 801086a:	9304      	strmi	r3, [sp, #16]
 801086c:	2300      	movpl	r3, #0
 801086e:	2300      	movmi	r3, #0
 8010870:	bf4c      	ite	mi
 8010872:	9305      	strmi	r3, [sp, #20]
 8010874:	9304      	strpl	r3, [sp, #16]
 8010876:	9b00      	ldr	r3, [sp, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	db3d      	blt.n	80108f8 <_dtoa_r+0x248>
 801087c:	9b05      	ldr	r3, [sp, #20]
 801087e:	9a00      	ldr	r2, [sp, #0]
 8010880:	920a      	str	r2, [sp, #40]	; 0x28
 8010882:	4413      	add	r3, r2
 8010884:	9305      	str	r3, [sp, #20]
 8010886:	2300      	movs	r3, #0
 8010888:	9307      	str	r3, [sp, #28]
 801088a:	9b06      	ldr	r3, [sp, #24]
 801088c:	2b09      	cmp	r3, #9
 801088e:	f200 8089 	bhi.w	80109a4 <_dtoa_r+0x2f4>
 8010892:	2b05      	cmp	r3, #5
 8010894:	bfc4      	itt	gt
 8010896:	3b04      	subgt	r3, #4
 8010898:	9306      	strgt	r3, [sp, #24]
 801089a:	9b06      	ldr	r3, [sp, #24]
 801089c:	f1a3 0302 	sub.w	r3, r3, #2
 80108a0:	bfcc      	ite	gt
 80108a2:	2500      	movgt	r5, #0
 80108a4:	2501      	movle	r5, #1
 80108a6:	2b03      	cmp	r3, #3
 80108a8:	f200 8087 	bhi.w	80109ba <_dtoa_r+0x30a>
 80108ac:	e8df f003 	tbb	[pc, r3]
 80108b0:	59383a2d 	.word	0x59383a2d
 80108b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80108b8:	441d      	add	r5, r3
 80108ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80108be:	2b20      	cmp	r3, #32
 80108c0:	bfc1      	itttt	gt
 80108c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80108ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80108ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80108d2:	bfda      	itte	le
 80108d4:	f1c3 0320 	rsble	r3, r3, #32
 80108d8:	fa06 f003 	lslle.w	r0, r6, r3
 80108dc:	4318      	orrgt	r0, r3
 80108de:	f7ef fe39 	bl	8000554 <__aeabi_ui2d>
 80108e2:	2301      	movs	r3, #1
 80108e4:	4606      	mov	r6, r0
 80108e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80108ea:	3d01      	subs	r5, #1
 80108ec:	930e      	str	r3, [sp, #56]	; 0x38
 80108ee:	e76a      	b.n	80107c6 <_dtoa_r+0x116>
 80108f0:	2301      	movs	r3, #1
 80108f2:	e7b2      	b.n	801085a <_dtoa_r+0x1aa>
 80108f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80108f6:	e7b1      	b.n	801085c <_dtoa_r+0x1ac>
 80108f8:	9b04      	ldr	r3, [sp, #16]
 80108fa:	9a00      	ldr	r2, [sp, #0]
 80108fc:	1a9b      	subs	r3, r3, r2
 80108fe:	9304      	str	r3, [sp, #16]
 8010900:	4253      	negs	r3, r2
 8010902:	9307      	str	r3, [sp, #28]
 8010904:	2300      	movs	r3, #0
 8010906:	930a      	str	r3, [sp, #40]	; 0x28
 8010908:	e7bf      	b.n	801088a <_dtoa_r+0x1da>
 801090a:	2300      	movs	r3, #0
 801090c:	9308      	str	r3, [sp, #32]
 801090e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010910:	2b00      	cmp	r3, #0
 8010912:	dc55      	bgt.n	80109c0 <_dtoa_r+0x310>
 8010914:	2301      	movs	r3, #1
 8010916:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801091a:	461a      	mov	r2, r3
 801091c:	9209      	str	r2, [sp, #36]	; 0x24
 801091e:	e00c      	b.n	801093a <_dtoa_r+0x28a>
 8010920:	2301      	movs	r3, #1
 8010922:	e7f3      	b.n	801090c <_dtoa_r+0x25c>
 8010924:	2300      	movs	r3, #0
 8010926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010928:	9308      	str	r3, [sp, #32]
 801092a:	9b00      	ldr	r3, [sp, #0]
 801092c:	4413      	add	r3, r2
 801092e:	9302      	str	r3, [sp, #8]
 8010930:	3301      	adds	r3, #1
 8010932:	2b01      	cmp	r3, #1
 8010934:	9303      	str	r3, [sp, #12]
 8010936:	bfb8      	it	lt
 8010938:	2301      	movlt	r3, #1
 801093a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801093c:	2200      	movs	r2, #0
 801093e:	6042      	str	r2, [r0, #4]
 8010940:	2204      	movs	r2, #4
 8010942:	f102 0614 	add.w	r6, r2, #20
 8010946:	429e      	cmp	r6, r3
 8010948:	6841      	ldr	r1, [r0, #4]
 801094a:	d93d      	bls.n	80109c8 <_dtoa_r+0x318>
 801094c:	4620      	mov	r0, r4
 801094e:	f001 fa5f 	bl	8011e10 <_Balloc>
 8010952:	9001      	str	r0, [sp, #4]
 8010954:	2800      	cmp	r0, #0
 8010956:	d13b      	bne.n	80109d0 <_dtoa_r+0x320>
 8010958:	4b11      	ldr	r3, [pc, #68]	; (80109a0 <_dtoa_r+0x2f0>)
 801095a:	4602      	mov	r2, r0
 801095c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010960:	e6c0      	b.n	80106e4 <_dtoa_r+0x34>
 8010962:	2301      	movs	r3, #1
 8010964:	e7df      	b.n	8010926 <_dtoa_r+0x276>
 8010966:	bf00      	nop
 8010968:	636f4361 	.word	0x636f4361
 801096c:	3fd287a7 	.word	0x3fd287a7
 8010970:	8b60c8b3 	.word	0x8b60c8b3
 8010974:	3fc68a28 	.word	0x3fc68a28
 8010978:	509f79fb 	.word	0x509f79fb
 801097c:	3fd34413 	.word	0x3fd34413
 8010980:	08013f50 	.word	0x08013f50
 8010984:	0801410e 	.word	0x0801410e
 8010988:	7ff00000 	.word	0x7ff00000
 801098c:	0801410a 	.word	0x0801410a
 8010990:	08014101 	.word	0x08014101
 8010994:	08013ed5 	.word	0x08013ed5
 8010998:	3ff80000 	.word	0x3ff80000
 801099c:	080142e0 	.word	0x080142e0
 80109a0:	08014169 	.word	0x08014169
 80109a4:	2501      	movs	r5, #1
 80109a6:	2300      	movs	r3, #0
 80109a8:	9306      	str	r3, [sp, #24]
 80109aa:	9508      	str	r5, [sp, #32]
 80109ac:	f04f 33ff 	mov.w	r3, #4294967295
 80109b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80109b4:	2200      	movs	r2, #0
 80109b6:	2312      	movs	r3, #18
 80109b8:	e7b0      	b.n	801091c <_dtoa_r+0x26c>
 80109ba:	2301      	movs	r3, #1
 80109bc:	9308      	str	r3, [sp, #32]
 80109be:	e7f5      	b.n	80109ac <_dtoa_r+0x2fc>
 80109c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80109c6:	e7b8      	b.n	801093a <_dtoa_r+0x28a>
 80109c8:	3101      	adds	r1, #1
 80109ca:	6041      	str	r1, [r0, #4]
 80109cc:	0052      	lsls	r2, r2, #1
 80109ce:	e7b8      	b.n	8010942 <_dtoa_r+0x292>
 80109d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109d2:	9a01      	ldr	r2, [sp, #4]
 80109d4:	601a      	str	r2, [r3, #0]
 80109d6:	9b03      	ldr	r3, [sp, #12]
 80109d8:	2b0e      	cmp	r3, #14
 80109da:	f200 809d 	bhi.w	8010b18 <_dtoa_r+0x468>
 80109de:	2d00      	cmp	r5, #0
 80109e0:	f000 809a 	beq.w	8010b18 <_dtoa_r+0x468>
 80109e4:	9b00      	ldr	r3, [sp, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	dd32      	ble.n	8010a50 <_dtoa_r+0x3a0>
 80109ea:	4ab7      	ldr	r2, [pc, #732]	; (8010cc8 <_dtoa_r+0x618>)
 80109ec:	f003 030f 	and.w	r3, r3, #15
 80109f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80109f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109f8:	9b00      	ldr	r3, [sp, #0]
 80109fa:	05d8      	lsls	r0, r3, #23
 80109fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010a00:	d516      	bpl.n	8010a30 <_dtoa_r+0x380>
 8010a02:	4bb2      	ldr	r3, [pc, #712]	; (8010ccc <_dtoa_r+0x61c>)
 8010a04:	ec51 0b19 	vmov	r0, r1, d9
 8010a08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a0c:	f7ef ff46 	bl	800089c <__aeabi_ddiv>
 8010a10:	f007 070f 	and.w	r7, r7, #15
 8010a14:	4682      	mov	sl, r0
 8010a16:	468b      	mov	fp, r1
 8010a18:	2503      	movs	r5, #3
 8010a1a:	4eac      	ldr	r6, [pc, #688]	; (8010ccc <_dtoa_r+0x61c>)
 8010a1c:	b957      	cbnz	r7, 8010a34 <_dtoa_r+0x384>
 8010a1e:	4642      	mov	r2, r8
 8010a20:	464b      	mov	r3, r9
 8010a22:	4650      	mov	r0, sl
 8010a24:	4659      	mov	r1, fp
 8010a26:	f7ef ff39 	bl	800089c <__aeabi_ddiv>
 8010a2a:	4682      	mov	sl, r0
 8010a2c:	468b      	mov	fp, r1
 8010a2e:	e028      	b.n	8010a82 <_dtoa_r+0x3d2>
 8010a30:	2502      	movs	r5, #2
 8010a32:	e7f2      	b.n	8010a1a <_dtoa_r+0x36a>
 8010a34:	07f9      	lsls	r1, r7, #31
 8010a36:	d508      	bpl.n	8010a4a <_dtoa_r+0x39a>
 8010a38:	4640      	mov	r0, r8
 8010a3a:	4649      	mov	r1, r9
 8010a3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a40:	f7ef fe02 	bl	8000648 <__aeabi_dmul>
 8010a44:	3501      	adds	r5, #1
 8010a46:	4680      	mov	r8, r0
 8010a48:	4689      	mov	r9, r1
 8010a4a:	107f      	asrs	r7, r7, #1
 8010a4c:	3608      	adds	r6, #8
 8010a4e:	e7e5      	b.n	8010a1c <_dtoa_r+0x36c>
 8010a50:	f000 809b 	beq.w	8010b8a <_dtoa_r+0x4da>
 8010a54:	9b00      	ldr	r3, [sp, #0]
 8010a56:	4f9d      	ldr	r7, [pc, #628]	; (8010ccc <_dtoa_r+0x61c>)
 8010a58:	425e      	negs	r6, r3
 8010a5a:	4b9b      	ldr	r3, [pc, #620]	; (8010cc8 <_dtoa_r+0x618>)
 8010a5c:	f006 020f 	and.w	r2, r6, #15
 8010a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a68:	ec51 0b19 	vmov	r0, r1, d9
 8010a6c:	f7ef fdec 	bl	8000648 <__aeabi_dmul>
 8010a70:	1136      	asrs	r6, r6, #4
 8010a72:	4682      	mov	sl, r0
 8010a74:	468b      	mov	fp, r1
 8010a76:	2300      	movs	r3, #0
 8010a78:	2502      	movs	r5, #2
 8010a7a:	2e00      	cmp	r6, #0
 8010a7c:	d17a      	bne.n	8010b74 <_dtoa_r+0x4c4>
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d1d3      	bne.n	8010a2a <_dtoa_r+0x37a>
 8010a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f000 8082 	beq.w	8010b8e <_dtoa_r+0x4de>
 8010a8a:	4b91      	ldr	r3, [pc, #580]	; (8010cd0 <_dtoa_r+0x620>)
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	4650      	mov	r0, sl
 8010a90:	4659      	mov	r1, fp
 8010a92:	f7f0 f84b 	bl	8000b2c <__aeabi_dcmplt>
 8010a96:	2800      	cmp	r0, #0
 8010a98:	d079      	beq.n	8010b8e <_dtoa_r+0x4de>
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d076      	beq.n	8010b8e <_dtoa_r+0x4de>
 8010aa0:	9b02      	ldr	r3, [sp, #8]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	dd36      	ble.n	8010b14 <_dtoa_r+0x464>
 8010aa6:	9b00      	ldr	r3, [sp, #0]
 8010aa8:	4650      	mov	r0, sl
 8010aaa:	4659      	mov	r1, fp
 8010aac:	1e5f      	subs	r7, r3, #1
 8010aae:	2200      	movs	r2, #0
 8010ab0:	4b88      	ldr	r3, [pc, #544]	; (8010cd4 <_dtoa_r+0x624>)
 8010ab2:	f7ef fdc9 	bl	8000648 <__aeabi_dmul>
 8010ab6:	9e02      	ldr	r6, [sp, #8]
 8010ab8:	4682      	mov	sl, r0
 8010aba:	468b      	mov	fp, r1
 8010abc:	3501      	adds	r5, #1
 8010abe:	4628      	mov	r0, r5
 8010ac0:	f7ef fd58 	bl	8000574 <__aeabi_i2d>
 8010ac4:	4652      	mov	r2, sl
 8010ac6:	465b      	mov	r3, fp
 8010ac8:	f7ef fdbe 	bl	8000648 <__aeabi_dmul>
 8010acc:	4b82      	ldr	r3, [pc, #520]	; (8010cd8 <_dtoa_r+0x628>)
 8010ace:	2200      	movs	r2, #0
 8010ad0:	f7ef fc04 	bl	80002dc <__adddf3>
 8010ad4:	46d0      	mov	r8, sl
 8010ad6:	46d9      	mov	r9, fp
 8010ad8:	4682      	mov	sl, r0
 8010ada:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010ade:	2e00      	cmp	r6, #0
 8010ae0:	d158      	bne.n	8010b94 <_dtoa_r+0x4e4>
 8010ae2:	4b7e      	ldr	r3, [pc, #504]	; (8010cdc <_dtoa_r+0x62c>)
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	4640      	mov	r0, r8
 8010ae8:	4649      	mov	r1, r9
 8010aea:	f7ef fbf5 	bl	80002d8 <__aeabi_dsub>
 8010aee:	4652      	mov	r2, sl
 8010af0:	465b      	mov	r3, fp
 8010af2:	4680      	mov	r8, r0
 8010af4:	4689      	mov	r9, r1
 8010af6:	f7f0 f837 	bl	8000b68 <__aeabi_dcmpgt>
 8010afa:	2800      	cmp	r0, #0
 8010afc:	f040 8295 	bne.w	801102a <_dtoa_r+0x97a>
 8010b00:	4652      	mov	r2, sl
 8010b02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010b06:	4640      	mov	r0, r8
 8010b08:	4649      	mov	r1, r9
 8010b0a:	f7f0 f80f 	bl	8000b2c <__aeabi_dcmplt>
 8010b0e:	2800      	cmp	r0, #0
 8010b10:	f040 8289 	bne.w	8011026 <_dtoa_r+0x976>
 8010b14:	ec5b ab19 	vmov	sl, fp, d9
 8010b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f2c0 8148 	blt.w	8010db0 <_dtoa_r+0x700>
 8010b20:	9a00      	ldr	r2, [sp, #0]
 8010b22:	2a0e      	cmp	r2, #14
 8010b24:	f300 8144 	bgt.w	8010db0 <_dtoa_r+0x700>
 8010b28:	4b67      	ldr	r3, [pc, #412]	; (8010cc8 <_dtoa_r+0x618>)
 8010b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f280 80d5 	bge.w	8010ce4 <_dtoa_r+0x634>
 8010b3a:	9b03      	ldr	r3, [sp, #12]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	f300 80d1 	bgt.w	8010ce4 <_dtoa_r+0x634>
 8010b42:	f040 826f 	bne.w	8011024 <_dtoa_r+0x974>
 8010b46:	4b65      	ldr	r3, [pc, #404]	; (8010cdc <_dtoa_r+0x62c>)
 8010b48:	2200      	movs	r2, #0
 8010b4a:	4640      	mov	r0, r8
 8010b4c:	4649      	mov	r1, r9
 8010b4e:	f7ef fd7b 	bl	8000648 <__aeabi_dmul>
 8010b52:	4652      	mov	r2, sl
 8010b54:	465b      	mov	r3, fp
 8010b56:	f7ef fffd 	bl	8000b54 <__aeabi_dcmpge>
 8010b5a:	9e03      	ldr	r6, [sp, #12]
 8010b5c:	4637      	mov	r7, r6
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f040 8245 	bne.w	8010fee <_dtoa_r+0x93e>
 8010b64:	9d01      	ldr	r5, [sp, #4]
 8010b66:	2331      	movs	r3, #49	; 0x31
 8010b68:	f805 3b01 	strb.w	r3, [r5], #1
 8010b6c:	9b00      	ldr	r3, [sp, #0]
 8010b6e:	3301      	adds	r3, #1
 8010b70:	9300      	str	r3, [sp, #0]
 8010b72:	e240      	b.n	8010ff6 <_dtoa_r+0x946>
 8010b74:	07f2      	lsls	r2, r6, #31
 8010b76:	d505      	bpl.n	8010b84 <_dtoa_r+0x4d4>
 8010b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b7c:	f7ef fd64 	bl	8000648 <__aeabi_dmul>
 8010b80:	3501      	adds	r5, #1
 8010b82:	2301      	movs	r3, #1
 8010b84:	1076      	asrs	r6, r6, #1
 8010b86:	3708      	adds	r7, #8
 8010b88:	e777      	b.n	8010a7a <_dtoa_r+0x3ca>
 8010b8a:	2502      	movs	r5, #2
 8010b8c:	e779      	b.n	8010a82 <_dtoa_r+0x3d2>
 8010b8e:	9f00      	ldr	r7, [sp, #0]
 8010b90:	9e03      	ldr	r6, [sp, #12]
 8010b92:	e794      	b.n	8010abe <_dtoa_r+0x40e>
 8010b94:	9901      	ldr	r1, [sp, #4]
 8010b96:	4b4c      	ldr	r3, [pc, #304]	; (8010cc8 <_dtoa_r+0x618>)
 8010b98:	4431      	add	r1, r6
 8010b9a:	910d      	str	r1, [sp, #52]	; 0x34
 8010b9c:	9908      	ldr	r1, [sp, #32]
 8010b9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010ba2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ba6:	2900      	cmp	r1, #0
 8010ba8:	d043      	beq.n	8010c32 <_dtoa_r+0x582>
 8010baa:	494d      	ldr	r1, [pc, #308]	; (8010ce0 <_dtoa_r+0x630>)
 8010bac:	2000      	movs	r0, #0
 8010bae:	f7ef fe75 	bl	800089c <__aeabi_ddiv>
 8010bb2:	4652      	mov	r2, sl
 8010bb4:	465b      	mov	r3, fp
 8010bb6:	f7ef fb8f 	bl	80002d8 <__aeabi_dsub>
 8010bba:	9d01      	ldr	r5, [sp, #4]
 8010bbc:	4682      	mov	sl, r0
 8010bbe:	468b      	mov	fp, r1
 8010bc0:	4649      	mov	r1, r9
 8010bc2:	4640      	mov	r0, r8
 8010bc4:	f7ef fff0 	bl	8000ba8 <__aeabi_d2iz>
 8010bc8:	4606      	mov	r6, r0
 8010bca:	f7ef fcd3 	bl	8000574 <__aeabi_i2d>
 8010bce:	4602      	mov	r2, r0
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	4640      	mov	r0, r8
 8010bd4:	4649      	mov	r1, r9
 8010bd6:	f7ef fb7f 	bl	80002d8 <__aeabi_dsub>
 8010bda:	3630      	adds	r6, #48	; 0x30
 8010bdc:	f805 6b01 	strb.w	r6, [r5], #1
 8010be0:	4652      	mov	r2, sl
 8010be2:	465b      	mov	r3, fp
 8010be4:	4680      	mov	r8, r0
 8010be6:	4689      	mov	r9, r1
 8010be8:	f7ef ffa0 	bl	8000b2c <__aeabi_dcmplt>
 8010bec:	2800      	cmp	r0, #0
 8010bee:	d163      	bne.n	8010cb8 <_dtoa_r+0x608>
 8010bf0:	4642      	mov	r2, r8
 8010bf2:	464b      	mov	r3, r9
 8010bf4:	4936      	ldr	r1, [pc, #216]	; (8010cd0 <_dtoa_r+0x620>)
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	f7ef fb6e 	bl	80002d8 <__aeabi_dsub>
 8010bfc:	4652      	mov	r2, sl
 8010bfe:	465b      	mov	r3, fp
 8010c00:	f7ef ff94 	bl	8000b2c <__aeabi_dcmplt>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	f040 80b5 	bne.w	8010d74 <_dtoa_r+0x6c4>
 8010c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c0c:	429d      	cmp	r5, r3
 8010c0e:	d081      	beq.n	8010b14 <_dtoa_r+0x464>
 8010c10:	4b30      	ldr	r3, [pc, #192]	; (8010cd4 <_dtoa_r+0x624>)
 8010c12:	2200      	movs	r2, #0
 8010c14:	4650      	mov	r0, sl
 8010c16:	4659      	mov	r1, fp
 8010c18:	f7ef fd16 	bl	8000648 <__aeabi_dmul>
 8010c1c:	4b2d      	ldr	r3, [pc, #180]	; (8010cd4 <_dtoa_r+0x624>)
 8010c1e:	4682      	mov	sl, r0
 8010c20:	468b      	mov	fp, r1
 8010c22:	4640      	mov	r0, r8
 8010c24:	4649      	mov	r1, r9
 8010c26:	2200      	movs	r2, #0
 8010c28:	f7ef fd0e 	bl	8000648 <__aeabi_dmul>
 8010c2c:	4680      	mov	r8, r0
 8010c2e:	4689      	mov	r9, r1
 8010c30:	e7c6      	b.n	8010bc0 <_dtoa_r+0x510>
 8010c32:	4650      	mov	r0, sl
 8010c34:	4659      	mov	r1, fp
 8010c36:	f7ef fd07 	bl	8000648 <__aeabi_dmul>
 8010c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c3c:	9d01      	ldr	r5, [sp, #4]
 8010c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c40:	4682      	mov	sl, r0
 8010c42:	468b      	mov	fp, r1
 8010c44:	4649      	mov	r1, r9
 8010c46:	4640      	mov	r0, r8
 8010c48:	f7ef ffae 	bl	8000ba8 <__aeabi_d2iz>
 8010c4c:	4606      	mov	r6, r0
 8010c4e:	f7ef fc91 	bl	8000574 <__aeabi_i2d>
 8010c52:	3630      	adds	r6, #48	; 0x30
 8010c54:	4602      	mov	r2, r0
 8010c56:	460b      	mov	r3, r1
 8010c58:	4640      	mov	r0, r8
 8010c5a:	4649      	mov	r1, r9
 8010c5c:	f7ef fb3c 	bl	80002d8 <__aeabi_dsub>
 8010c60:	f805 6b01 	strb.w	r6, [r5], #1
 8010c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c66:	429d      	cmp	r5, r3
 8010c68:	4680      	mov	r8, r0
 8010c6a:	4689      	mov	r9, r1
 8010c6c:	f04f 0200 	mov.w	r2, #0
 8010c70:	d124      	bne.n	8010cbc <_dtoa_r+0x60c>
 8010c72:	4b1b      	ldr	r3, [pc, #108]	; (8010ce0 <_dtoa_r+0x630>)
 8010c74:	4650      	mov	r0, sl
 8010c76:	4659      	mov	r1, fp
 8010c78:	f7ef fb30 	bl	80002dc <__adddf3>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	460b      	mov	r3, r1
 8010c80:	4640      	mov	r0, r8
 8010c82:	4649      	mov	r1, r9
 8010c84:	f7ef ff70 	bl	8000b68 <__aeabi_dcmpgt>
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	d173      	bne.n	8010d74 <_dtoa_r+0x6c4>
 8010c8c:	4652      	mov	r2, sl
 8010c8e:	465b      	mov	r3, fp
 8010c90:	4913      	ldr	r1, [pc, #76]	; (8010ce0 <_dtoa_r+0x630>)
 8010c92:	2000      	movs	r0, #0
 8010c94:	f7ef fb20 	bl	80002d8 <__aeabi_dsub>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	4640      	mov	r0, r8
 8010c9e:	4649      	mov	r1, r9
 8010ca0:	f7ef ff44 	bl	8000b2c <__aeabi_dcmplt>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	f43f af35 	beq.w	8010b14 <_dtoa_r+0x464>
 8010caa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010cac:	1e6b      	subs	r3, r5, #1
 8010cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8010cb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cb4:	2b30      	cmp	r3, #48	; 0x30
 8010cb6:	d0f8      	beq.n	8010caa <_dtoa_r+0x5fa>
 8010cb8:	9700      	str	r7, [sp, #0]
 8010cba:	e049      	b.n	8010d50 <_dtoa_r+0x6a0>
 8010cbc:	4b05      	ldr	r3, [pc, #20]	; (8010cd4 <_dtoa_r+0x624>)
 8010cbe:	f7ef fcc3 	bl	8000648 <__aeabi_dmul>
 8010cc2:	4680      	mov	r8, r0
 8010cc4:	4689      	mov	r9, r1
 8010cc6:	e7bd      	b.n	8010c44 <_dtoa_r+0x594>
 8010cc8:	080142e0 	.word	0x080142e0
 8010ccc:	080142b8 	.word	0x080142b8
 8010cd0:	3ff00000 	.word	0x3ff00000
 8010cd4:	40240000 	.word	0x40240000
 8010cd8:	401c0000 	.word	0x401c0000
 8010cdc:	40140000 	.word	0x40140000
 8010ce0:	3fe00000 	.word	0x3fe00000
 8010ce4:	9d01      	ldr	r5, [sp, #4]
 8010ce6:	4656      	mov	r6, sl
 8010ce8:	465f      	mov	r7, fp
 8010cea:	4642      	mov	r2, r8
 8010cec:	464b      	mov	r3, r9
 8010cee:	4630      	mov	r0, r6
 8010cf0:	4639      	mov	r1, r7
 8010cf2:	f7ef fdd3 	bl	800089c <__aeabi_ddiv>
 8010cf6:	f7ef ff57 	bl	8000ba8 <__aeabi_d2iz>
 8010cfa:	4682      	mov	sl, r0
 8010cfc:	f7ef fc3a 	bl	8000574 <__aeabi_i2d>
 8010d00:	4642      	mov	r2, r8
 8010d02:	464b      	mov	r3, r9
 8010d04:	f7ef fca0 	bl	8000648 <__aeabi_dmul>
 8010d08:	4602      	mov	r2, r0
 8010d0a:	460b      	mov	r3, r1
 8010d0c:	4630      	mov	r0, r6
 8010d0e:	4639      	mov	r1, r7
 8010d10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010d14:	f7ef fae0 	bl	80002d8 <__aeabi_dsub>
 8010d18:	f805 6b01 	strb.w	r6, [r5], #1
 8010d1c:	9e01      	ldr	r6, [sp, #4]
 8010d1e:	9f03      	ldr	r7, [sp, #12]
 8010d20:	1bae      	subs	r6, r5, r6
 8010d22:	42b7      	cmp	r7, r6
 8010d24:	4602      	mov	r2, r0
 8010d26:	460b      	mov	r3, r1
 8010d28:	d135      	bne.n	8010d96 <_dtoa_r+0x6e6>
 8010d2a:	f7ef fad7 	bl	80002dc <__adddf3>
 8010d2e:	4642      	mov	r2, r8
 8010d30:	464b      	mov	r3, r9
 8010d32:	4606      	mov	r6, r0
 8010d34:	460f      	mov	r7, r1
 8010d36:	f7ef ff17 	bl	8000b68 <__aeabi_dcmpgt>
 8010d3a:	b9d0      	cbnz	r0, 8010d72 <_dtoa_r+0x6c2>
 8010d3c:	4642      	mov	r2, r8
 8010d3e:	464b      	mov	r3, r9
 8010d40:	4630      	mov	r0, r6
 8010d42:	4639      	mov	r1, r7
 8010d44:	f7ef fee8 	bl	8000b18 <__aeabi_dcmpeq>
 8010d48:	b110      	cbz	r0, 8010d50 <_dtoa_r+0x6a0>
 8010d4a:	f01a 0f01 	tst.w	sl, #1
 8010d4e:	d110      	bne.n	8010d72 <_dtoa_r+0x6c2>
 8010d50:	4620      	mov	r0, r4
 8010d52:	ee18 1a10 	vmov	r1, s16
 8010d56:	f001 f89b 	bl	8011e90 <_Bfree>
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	9800      	ldr	r0, [sp, #0]
 8010d5e:	702b      	strb	r3, [r5, #0]
 8010d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d62:	3001      	adds	r0, #1
 8010d64:	6018      	str	r0, [r3, #0]
 8010d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f43f acf1 	beq.w	8010750 <_dtoa_r+0xa0>
 8010d6e:	601d      	str	r5, [r3, #0]
 8010d70:	e4ee      	b.n	8010750 <_dtoa_r+0xa0>
 8010d72:	9f00      	ldr	r7, [sp, #0]
 8010d74:	462b      	mov	r3, r5
 8010d76:	461d      	mov	r5, r3
 8010d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d7c:	2a39      	cmp	r2, #57	; 0x39
 8010d7e:	d106      	bne.n	8010d8e <_dtoa_r+0x6de>
 8010d80:	9a01      	ldr	r2, [sp, #4]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d1f7      	bne.n	8010d76 <_dtoa_r+0x6c6>
 8010d86:	9901      	ldr	r1, [sp, #4]
 8010d88:	2230      	movs	r2, #48	; 0x30
 8010d8a:	3701      	adds	r7, #1
 8010d8c:	700a      	strb	r2, [r1, #0]
 8010d8e:	781a      	ldrb	r2, [r3, #0]
 8010d90:	3201      	adds	r2, #1
 8010d92:	701a      	strb	r2, [r3, #0]
 8010d94:	e790      	b.n	8010cb8 <_dtoa_r+0x608>
 8010d96:	4ba6      	ldr	r3, [pc, #664]	; (8011030 <_dtoa_r+0x980>)
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f7ef fc55 	bl	8000648 <__aeabi_dmul>
 8010d9e:	2200      	movs	r2, #0
 8010da0:	2300      	movs	r3, #0
 8010da2:	4606      	mov	r6, r0
 8010da4:	460f      	mov	r7, r1
 8010da6:	f7ef feb7 	bl	8000b18 <__aeabi_dcmpeq>
 8010daa:	2800      	cmp	r0, #0
 8010dac:	d09d      	beq.n	8010cea <_dtoa_r+0x63a>
 8010dae:	e7cf      	b.n	8010d50 <_dtoa_r+0x6a0>
 8010db0:	9a08      	ldr	r2, [sp, #32]
 8010db2:	2a00      	cmp	r2, #0
 8010db4:	f000 80d7 	beq.w	8010f66 <_dtoa_r+0x8b6>
 8010db8:	9a06      	ldr	r2, [sp, #24]
 8010dba:	2a01      	cmp	r2, #1
 8010dbc:	f300 80ba 	bgt.w	8010f34 <_dtoa_r+0x884>
 8010dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010dc2:	2a00      	cmp	r2, #0
 8010dc4:	f000 80b2 	beq.w	8010f2c <_dtoa_r+0x87c>
 8010dc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010dcc:	9e07      	ldr	r6, [sp, #28]
 8010dce:	9d04      	ldr	r5, [sp, #16]
 8010dd0:	9a04      	ldr	r2, [sp, #16]
 8010dd2:	441a      	add	r2, r3
 8010dd4:	9204      	str	r2, [sp, #16]
 8010dd6:	9a05      	ldr	r2, [sp, #20]
 8010dd8:	2101      	movs	r1, #1
 8010dda:	441a      	add	r2, r3
 8010ddc:	4620      	mov	r0, r4
 8010dde:	9205      	str	r2, [sp, #20]
 8010de0:	f001 f958 	bl	8012094 <__i2b>
 8010de4:	4607      	mov	r7, r0
 8010de6:	2d00      	cmp	r5, #0
 8010de8:	dd0c      	ble.n	8010e04 <_dtoa_r+0x754>
 8010dea:	9b05      	ldr	r3, [sp, #20]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	dd09      	ble.n	8010e04 <_dtoa_r+0x754>
 8010df0:	42ab      	cmp	r3, r5
 8010df2:	9a04      	ldr	r2, [sp, #16]
 8010df4:	bfa8      	it	ge
 8010df6:	462b      	movge	r3, r5
 8010df8:	1ad2      	subs	r2, r2, r3
 8010dfa:	9204      	str	r2, [sp, #16]
 8010dfc:	9a05      	ldr	r2, [sp, #20]
 8010dfe:	1aed      	subs	r5, r5, r3
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	9305      	str	r3, [sp, #20]
 8010e04:	9b07      	ldr	r3, [sp, #28]
 8010e06:	b31b      	cbz	r3, 8010e50 <_dtoa_r+0x7a0>
 8010e08:	9b08      	ldr	r3, [sp, #32]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	f000 80af 	beq.w	8010f6e <_dtoa_r+0x8be>
 8010e10:	2e00      	cmp	r6, #0
 8010e12:	dd13      	ble.n	8010e3c <_dtoa_r+0x78c>
 8010e14:	4639      	mov	r1, r7
 8010e16:	4632      	mov	r2, r6
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f001 f9fb 	bl	8012214 <__pow5mult>
 8010e1e:	ee18 2a10 	vmov	r2, s16
 8010e22:	4601      	mov	r1, r0
 8010e24:	4607      	mov	r7, r0
 8010e26:	4620      	mov	r0, r4
 8010e28:	f001 f94a 	bl	80120c0 <__multiply>
 8010e2c:	ee18 1a10 	vmov	r1, s16
 8010e30:	4680      	mov	r8, r0
 8010e32:	4620      	mov	r0, r4
 8010e34:	f001 f82c 	bl	8011e90 <_Bfree>
 8010e38:	ee08 8a10 	vmov	s16, r8
 8010e3c:	9b07      	ldr	r3, [sp, #28]
 8010e3e:	1b9a      	subs	r2, r3, r6
 8010e40:	d006      	beq.n	8010e50 <_dtoa_r+0x7a0>
 8010e42:	ee18 1a10 	vmov	r1, s16
 8010e46:	4620      	mov	r0, r4
 8010e48:	f001 f9e4 	bl	8012214 <__pow5mult>
 8010e4c:	ee08 0a10 	vmov	s16, r0
 8010e50:	2101      	movs	r1, #1
 8010e52:	4620      	mov	r0, r4
 8010e54:	f001 f91e 	bl	8012094 <__i2b>
 8010e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	4606      	mov	r6, r0
 8010e5e:	f340 8088 	ble.w	8010f72 <_dtoa_r+0x8c2>
 8010e62:	461a      	mov	r2, r3
 8010e64:	4601      	mov	r1, r0
 8010e66:	4620      	mov	r0, r4
 8010e68:	f001 f9d4 	bl	8012214 <__pow5mult>
 8010e6c:	9b06      	ldr	r3, [sp, #24]
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	4606      	mov	r6, r0
 8010e72:	f340 8081 	ble.w	8010f78 <_dtoa_r+0x8c8>
 8010e76:	f04f 0800 	mov.w	r8, #0
 8010e7a:	6933      	ldr	r3, [r6, #16]
 8010e7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010e80:	6918      	ldr	r0, [r3, #16]
 8010e82:	f001 f8b7 	bl	8011ff4 <__hi0bits>
 8010e86:	f1c0 0020 	rsb	r0, r0, #32
 8010e8a:	9b05      	ldr	r3, [sp, #20]
 8010e8c:	4418      	add	r0, r3
 8010e8e:	f010 001f 	ands.w	r0, r0, #31
 8010e92:	f000 8092 	beq.w	8010fba <_dtoa_r+0x90a>
 8010e96:	f1c0 0320 	rsb	r3, r0, #32
 8010e9a:	2b04      	cmp	r3, #4
 8010e9c:	f340 808a 	ble.w	8010fb4 <_dtoa_r+0x904>
 8010ea0:	f1c0 001c 	rsb	r0, r0, #28
 8010ea4:	9b04      	ldr	r3, [sp, #16]
 8010ea6:	4403      	add	r3, r0
 8010ea8:	9304      	str	r3, [sp, #16]
 8010eaa:	9b05      	ldr	r3, [sp, #20]
 8010eac:	4403      	add	r3, r0
 8010eae:	4405      	add	r5, r0
 8010eb0:	9305      	str	r3, [sp, #20]
 8010eb2:	9b04      	ldr	r3, [sp, #16]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	dd07      	ble.n	8010ec8 <_dtoa_r+0x818>
 8010eb8:	ee18 1a10 	vmov	r1, s16
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f001 fa02 	bl	80122c8 <__lshift>
 8010ec4:	ee08 0a10 	vmov	s16, r0
 8010ec8:	9b05      	ldr	r3, [sp, #20]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	dd05      	ble.n	8010eda <_dtoa_r+0x82a>
 8010ece:	4631      	mov	r1, r6
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f001 f9f8 	bl	80122c8 <__lshift>
 8010ed8:	4606      	mov	r6, r0
 8010eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d06e      	beq.n	8010fbe <_dtoa_r+0x90e>
 8010ee0:	ee18 0a10 	vmov	r0, s16
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	f001 fa5f 	bl	80123a8 <__mcmp>
 8010eea:	2800      	cmp	r0, #0
 8010eec:	da67      	bge.n	8010fbe <_dtoa_r+0x90e>
 8010eee:	9b00      	ldr	r3, [sp, #0]
 8010ef0:	3b01      	subs	r3, #1
 8010ef2:	ee18 1a10 	vmov	r1, s16
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	220a      	movs	r2, #10
 8010efa:	2300      	movs	r3, #0
 8010efc:	4620      	mov	r0, r4
 8010efe:	f000 ffe9 	bl	8011ed4 <__multadd>
 8010f02:	9b08      	ldr	r3, [sp, #32]
 8010f04:	ee08 0a10 	vmov	s16, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f000 81b1 	beq.w	8011270 <_dtoa_r+0xbc0>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	4639      	mov	r1, r7
 8010f12:	220a      	movs	r2, #10
 8010f14:	4620      	mov	r0, r4
 8010f16:	f000 ffdd 	bl	8011ed4 <__multadd>
 8010f1a:	9b02      	ldr	r3, [sp, #8]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	4607      	mov	r7, r0
 8010f20:	f300 808e 	bgt.w	8011040 <_dtoa_r+0x990>
 8010f24:	9b06      	ldr	r3, [sp, #24]
 8010f26:	2b02      	cmp	r3, #2
 8010f28:	dc51      	bgt.n	8010fce <_dtoa_r+0x91e>
 8010f2a:	e089      	b.n	8011040 <_dtoa_r+0x990>
 8010f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f32:	e74b      	b.n	8010dcc <_dtoa_r+0x71c>
 8010f34:	9b03      	ldr	r3, [sp, #12]
 8010f36:	1e5e      	subs	r6, r3, #1
 8010f38:	9b07      	ldr	r3, [sp, #28]
 8010f3a:	42b3      	cmp	r3, r6
 8010f3c:	bfbf      	itttt	lt
 8010f3e:	9b07      	ldrlt	r3, [sp, #28]
 8010f40:	9607      	strlt	r6, [sp, #28]
 8010f42:	1af2      	sublt	r2, r6, r3
 8010f44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010f46:	bfb6      	itet	lt
 8010f48:	189b      	addlt	r3, r3, r2
 8010f4a:	1b9e      	subge	r6, r3, r6
 8010f4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010f4e:	9b03      	ldr	r3, [sp, #12]
 8010f50:	bfb8      	it	lt
 8010f52:	2600      	movlt	r6, #0
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	bfb7      	itett	lt
 8010f58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010f5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010f60:	1a9d      	sublt	r5, r3, r2
 8010f62:	2300      	movlt	r3, #0
 8010f64:	e734      	b.n	8010dd0 <_dtoa_r+0x720>
 8010f66:	9e07      	ldr	r6, [sp, #28]
 8010f68:	9d04      	ldr	r5, [sp, #16]
 8010f6a:	9f08      	ldr	r7, [sp, #32]
 8010f6c:	e73b      	b.n	8010de6 <_dtoa_r+0x736>
 8010f6e:	9a07      	ldr	r2, [sp, #28]
 8010f70:	e767      	b.n	8010e42 <_dtoa_r+0x792>
 8010f72:	9b06      	ldr	r3, [sp, #24]
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	dc18      	bgt.n	8010faa <_dtoa_r+0x8fa>
 8010f78:	f1ba 0f00 	cmp.w	sl, #0
 8010f7c:	d115      	bne.n	8010faa <_dtoa_r+0x8fa>
 8010f7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f82:	b993      	cbnz	r3, 8010faa <_dtoa_r+0x8fa>
 8010f84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010f88:	0d1b      	lsrs	r3, r3, #20
 8010f8a:	051b      	lsls	r3, r3, #20
 8010f8c:	b183      	cbz	r3, 8010fb0 <_dtoa_r+0x900>
 8010f8e:	9b04      	ldr	r3, [sp, #16]
 8010f90:	3301      	adds	r3, #1
 8010f92:	9304      	str	r3, [sp, #16]
 8010f94:	9b05      	ldr	r3, [sp, #20]
 8010f96:	3301      	adds	r3, #1
 8010f98:	9305      	str	r3, [sp, #20]
 8010f9a:	f04f 0801 	mov.w	r8, #1
 8010f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f47f af6a 	bne.w	8010e7a <_dtoa_r+0x7ca>
 8010fa6:	2001      	movs	r0, #1
 8010fa8:	e76f      	b.n	8010e8a <_dtoa_r+0x7da>
 8010faa:	f04f 0800 	mov.w	r8, #0
 8010fae:	e7f6      	b.n	8010f9e <_dtoa_r+0x8ee>
 8010fb0:	4698      	mov	r8, r3
 8010fb2:	e7f4      	b.n	8010f9e <_dtoa_r+0x8ee>
 8010fb4:	f43f af7d 	beq.w	8010eb2 <_dtoa_r+0x802>
 8010fb8:	4618      	mov	r0, r3
 8010fba:	301c      	adds	r0, #28
 8010fbc:	e772      	b.n	8010ea4 <_dtoa_r+0x7f4>
 8010fbe:	9b03      	ldr	r3, [sp, #12]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	dc37      	bgt.n	8011034 <_dtoa_r+0x984>
 8010fc4:	9b06      	ldr	r3, [sp, #24]
 8010fc6:	2b02      	cmp	r3, #2
 8010fc8:	dd34      	ble.n	8011034 <_dtoa_r+0x984>
 8010fca:	9b03      	ldr	r3, [sp, #12]
 8010fcc:	9302      	str	r3, [sp, #8]
 8010fce:	9b02      	ldr	r3, [sp, #8]
 8010fd0:	b96b      	cbnz	r3, 8010fee <_dtoa_r+0x93e>
 8010fd2:	4631      	mov	r1, r6
 8010fd4:	2205      	movs	r2, #5
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f000 ff7c 	bl	8011ed4 <__multadd>
 8010fdc:	4601      	mov	r1, r0
 8010fde:	4606      	mov	r6, r0
 8010fe0:	ee18 0a10 	vmov	r0, s16
 8010fe4:	f001 f9e0 	bl	80123a8 <__mcmp>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	f73f adbb 	bgt.w	8010b64 <_dtoa_r+0x4b4>
 8010fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ff0:	9d01      	ldr	r5, [sp, #4]
 8010ff2:	43db      	mvns	r3, r3
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	f04f 0800 	mov.w	r8, #0
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f000 ff47 	bl	8011e90 <_Bfree>
 8011002:	2f00      	cmp	r7, #0
 8011004:	f43f aea4 	beq.w	8010d50 <_dtoa_r+0x6a0>
 8011008:	f1b8 0f00 	cmp.w	r8, #0
 801100c:	d005      	beq.n	801101a <_dtoa_r+0x96a>
 801100e:	45b8      	cmp	r8, r7
 8011010:	d003      	beq.n	801101a <_dtoa_r+0x96a>
 8011012:	4641      	mov	r1, r8
 8011014:	4620      	mov	r0, r4
 8011016:	f000 ff3b 	bl	8011e90 <_Bfree>
 801101a:	4639      	mov	r1, r7
 801101c:	4620      	mov	r0, r4
 801101e:	f000 ff37 	bl	8011e90 <_Bfree>
 8011022:	e695      	b.n	8010d50 <_dtoa_r+0x6a0>
 8011024:	2600      	movs	r6, #0
 8011026:	4637      	mov	r7, r6
 8011028:	e7e1      	b.n	8010fee <_dtoa_r+0x93e>
 801102a:	9700      	str	r7, [sp, #0]
 801102c:	4637      	mov	r7, r6
 801102e:	e599      	b.n	8010b64 <_dtoa_r+0x4b4>
 8011030:	40240000 	.word	0x40240000
 8011034:	9b08      	ldr	r3, [sp, #32]
 8011036:	2b00      	cmp	r3, #0
 8011038:	f000 80ca 	beq.w	80111d0 <_dtoa_r+0xb20>
 801103c:	9b03      	ldr	r3, [sp, #12]
 801103e:	9302      	str	r3, [sp, #8]
 8011040:	2d00      	cmp	r5, #0
 8011042:	dd05      	ble.n	8011050 <_dtoa_r+0x9a0>
 8011044:	4639      	mov	r1, r7
 8011046:	462a      	mov	r2, r5
 8011048:	4620      	mov	r0, r4
 801104a:	f001 f93d 	bl	80122c8 <__lshift>
 801104e:	4607      	mov	r7, r0
 8011050:	f1b8 0f00 	cmp.w	r8, #0
 8011054:	d05b      	beq.n	801110e <_dtoa_r+0xa5e>
 8011056:	6879      	ldr	r1, [r7, #4]
 8011058:	4620      	mov	r0, r4
 801105a:	f000 fed9 	bl	8011e10 <_Balloc>
 801105e:	4605      	mov	r5, r0
 8011060:	b928      	cbnz	r0, 801106e <_dtoa_r+0x9be>
 8011062:	4b87      	ldr	r3, [pc, #540]	; (8011280 <_dtoa_r+0xbd0>)
 8011064:	4602      	mov	r2, r0
 8011066:	f240 21ea 	movw	r1, #746	; 0x2ea
 801106a:	f7ff bb3b 	b.w	80106e4 <_dtoa_r+0x34>
 801106e:	693a      	ldr	r2, [r7, #16]
 8011070:	3202      	adds	r2, #2
 8011072:	0092      	lsls	r2, r2, #2
 8011074:	f107 010c 	add.w	r1, r7, #12
 8011078:	300c      	adds	r0, #12
 801107a:	f7fd f9df 	bl	800e43c <memcpy>
 801107e:	2201      	movs	r2, #1
 8011080:	4629      	mov	r1, r5
 8011082:	4620      	mov	r0, r4
 8011084:	f001 f920 	bl	80122c8 <__lshift>
 8011088:	9b01      	ldr	r3, [sp, #4]
 801108a:	f103 0901 	add.w	r9, r3, #1
 801108e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011092:	4413      	add	r3, r2
 8011094:	9305      	str	r3, [sp, #20]
 8011096:	f00a 0301 	and.w	r3, sl, #1
 801109a:	46b8      	mov	r8, r7
 801109c:	9304      	str	r3, [sp, #16]
 801109e:	4607      	mov	r7, r0
 80110a0:	4631      	mov	r1, r6
 80110a2:	ee18 0a10 	vmov	r0, s16
 80110a6:	f7ff fa77 	bl	8010598 <quorem>
 80110aa:	4641      	mov	r1, r8
 80110ac:	9002      	str	r0, [sp, #8]
 80110ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80110b2:	ee18 0a10 	vmov	r0, s16
 80110b6:	f001 f977 	bl	80123a8 <__mcmp>
 80110ba:	463a      	mov	r2, r7
 80110bc:	9003      	str	r0, [sp, #12]
 80110be:	4631      	mov	r1, r6
 80110c0:	4620      	mov	r0, r4
 80110c2:	f001 f98d 	bl	80123e0 <__mdiff>
 80110c6:	68c2      	ldr	r2, [r0, #12]
 80110c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80110cc:	4605      	mov	r5, r0
 80110ce:	bb02      	cbnz	r2, 8011112 <_dtoa_r+0xa62>
 80110d0:	4601      	mov	r1, r0
 80110d2:	ee18 0a10 	vmov	r0, s16
 80110d6:	f001 f967 	bl	80123a8 <__mcmp>
 80110da:	4602      	mov	r2, r0
 80110dc:	4629      	mov	r1, r5
 80110de:	4620      	mov	r0, r4
 80110e0:	9207      	str	r2, [sp, #28]
 80110e2:	f000 fed5 	bl	8011e90 <_Bfree>
 80110e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80110ea:	ea43 0102 	orr.w	r1, r3, r2
 80110ee:	9b04      	ldr	r3, [sp, #16]
 80110f0:	430b      	orrs	r3, r1
 80110f2:	464d      	mov	r5, r9
 80110f4:	d10f      	bne.n	8011116 <_dtoa_r+0xa66>
 80110f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80110fa:	d02a      	beq.n	8011152 <_dtoa_r+0xaa2>
 80110fc:	9b03      	ldr	r3, [sp, #12]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	dd02      	ble.n	8011108 <_dtoa_r+0xa58>
 8011102:	9b02      	ldr	r3, [sp, #8]
 8011104:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011108:	f88b a000 	strb.w	sl, [fp]
 801110c:	e775      	b.n	8010ffa <_dtoa_r+0x94a>
 801110e:	4638      	mov	r0, r7
 8011110:	e7ba      	b.n	8011088 <_dtoa_r+0x9d8>
 8011112:	2201      	movs	r2, #1
 8011114:	e7e2      	b.n	80110dc <_dtoa_r+0xa2c>
 8011116:	9b03      	ldr	r3, [sp, #12]
 8011118:	2b00      	cmp	r3, #0
 801111a:	db04      	blt.n	8011126 <_dtoa_r+0xa76>
 801111c:	9906      	ldr	r1, [sp, #24]
 801111e:	430b      	orrs	r3, r1
 8011120:	9904      	ldr	r1, [sp, #16]
 8011122:	430b      	orrs	r3, r1
 8011124:	d122      	bne.n	801116c <_dtoa_r+0xabc>
 8011126:	2a00      	cmp	r2, #0
 8011128:	ddee      	ble.n	8011108 <_dtoa_r+0xa58>
 801112a:	ee18 1a10 	vmov	r1, s16
 801112e:	2201      	movs	r2, #1
 8011130:	4620      	mov	r0, r4
 8011132:	f001 f8c9 	bl	80122c8 <__lshift>
 8011136:	4631      	mov	r1, r6
 8011138:	ee08 0a10 	vmov	s16, r0
 801113c:	f001 f934 	bl	80123a8 <__mcmp>
 8011140:	2800      	cmp	r0, #0
 8011142:	dc03      	bgt.n	801114c <_dtoa_r+0xa9c>
 8011144:	d1e0      	bne.n	8011108 <_dtoa_r+0xa58>
 8011146:	f01a 0f01 	tst.w	sl, #1
 801114a:	d0dd      	beq.n	8011108 <_dtoa_r+0xa58>
 801114c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011150:	d1d7      	bne.n	8011102 <_dtoa_r+0xa52>
 8011152:	2339      	movs	r3, #57	; 0x39
 8011154:	f88b 3000 	strb.w	r3, [fp]
 8011158:	462b      	mov	r3, r5
 801115a:	461d      	mov	r5, r3
 801115c:	3b01      	subs	r3, #1
 801115e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011162:	2a39      	cmp	r2, #57	; 0x39
 8011164:	d071      	beq.n	801124a <_dtoa_r+0xb9a>
 8011166:	3201      	adds	r2, #1
 8011168:	701a      	strb	r2, [r3, #0]
 801116a:	e746      	b.n	8010ffa <_dtoa_r+0x94a>
 801116c:	2a00      	cmp	r2, #0
 801116e:	dd07      	ble.n	8011180 <_dtoa_r+0xad0>
 8011170:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011174:	d0ed      	beq.n	8011152 <_dtoa_r+0xaa2>
 8011176:	f10a 0301 	add.w	r3, sl, #1
 801117a:	f88b 3000 	strb.w	r3, [fp]
 801117e:	e73c      	b.n	8010ffa <_dtoa_r+0x94a>
 8011180:	9b05      	ldr	r3, [sp, #20]
 8011182:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011186:	4599      	cmp	r9, r3
 8011188:	d047      	beq.n	801121a <_dtoa_r+0xb6a>
 801118a:	ee18 1a10 	vmov	r1, s16
 801118e:	2300      	movs	r3, #0
 8011190:	220a      	movs	r2, #10
 8011192:	4620      	mov	r0, r4
 8011194:	f000 fe9e 	bl	8011ed4 <__multadd>
 8011198:	45b8      	cmp	r8, r7
 801119a:	ee08 0a10 	vmov	s16, r0
 801119e:	f04f 0300 	mov.w	r3, #0
 80111a2:	f04f 020a 	mov.w	r2, #10
 80111a6:	4641      	mov	r1, r8
 80111a8:	4620      	mov	r0, r4
 80111aa:	d106      	bne.n	80111ba <_dtoa_r+0xb0a>
 80111ac:	f000 fe92 	bl	8011ed4 <__multadd>
 80111b0:	4680      	mov	r8, r0
 80111b2:	4607      	mov	r7, r0
 80111b4:	f109 0901 	add.w	r9, r9, #1
 80111b8:	e772      	b.n	80110a0 <_dtoa_r+0x9f0>
 80111ba:	f000 fe8b 	bl	8011ed4 <__multadd>
 80111be:	4639      	mov	r1, r7
 80111c0:	4680      	mov	r8, r0
 80111c2:	2300      	movs	r3, #0
 80111c4:	220a      	movs	r2, #10
 80111c6:	4620      	mov	r0, r4
 80111c8:	f000 fe84 	bl	8011ed4 <__multadd>
 80111cc:	4607      	mov	r7, r0
 80111ce:	e7f1      	b.n	80111b4 <_dtoa_r+0xb04>
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	9302      	str	r3, [sp, #8]
 80111d4:	9d01      	ldr	r5, [sp, #4]
 80111d6:	ee18 0a10 	vmov	r0, s16
 80111da:	4631      	mov	r1, r6
 80111dc:	f7ff f9dc 	bl	8010598 <quorem>
 80111e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80111e4:	9b01      	ldr	r3, [sp, #4]
 80111e6:	f805 ab01 	strb.w	sl, [r5], #1
 80111ea:	1aea      	subs	r2, r5, r3
 80111ec:	9b02      	ldr	r3, [sp, #8]
 80111ee:	4293      	cmp	r3, r2
 80111f0:	dd09      	ble.n	8011206 <_dtoa_r+0xb56>
 80111f2:	ee18 1a10 	vmov	r1, s16
 80111f6:	2300      	movs	r3, #0
 80111f8:	220a      	movs	r2, #10
 80111fa:	4620      	mov	r0, r4
 80111fc:	f000 fe6a 	bl	8011ed4 <__multadd>
 8011200:	ee08 0a10 	vmov	s16, r0
 8011204:	e7e7      	b.n	80111d6 <_dtoa_r+0xb26>
 8011206:	9b02      	ldr	r3, [sp, #8]
 8011208:	2b00      	cmp	r3, #0
 801120a:	bfc8      	it	gt
 801120c:	461d      	movgt	r5, r3
 801120e:	9b01      	ldr	r3, [sp, #4]
 8011210:	bfd8      	it	le
 8011212:	2501      	movle	r5, #1
 8011214:	441d      	add	r5, r3
 8011216:	f04f 0800 	mov.w	r8, #0
 801121a:	ee18 1a10 	vmov	r1, s16
 801121e:	2201      	movs	r2, #1
 8011220:	4620      	mov	r0, r4
 8011222:	f001 f851 	bl	80122c8 <__lshift>
 8011226:	4631      	mov	r1, r6
 8011228:	ee08 0a10 	vmov	s16, r0
 801122c:	f001 f8bc 	bl	80123a8 <__mcmp>
 8011230:	2800      	cmp	r0, #0
 8011232:	dc91      	bgt.n	8011158 <_dtoa_r+0xaa8>
 8011234:	d102      	bne.n	801123c <_dtoa_r+0xb8c>
 8011236:	f01a 0f01 	tst.w	sl, #1
 801123a:	d18d      	bne.n	8011158 <_dtoa_r+0xaa8>
 801123c:	462b      	mov	r3, r5
 801123e:	461d      	mov	r5, r3
 8011240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011244:	2a30      	cmp	r2, #48	; 0x30
 8011246:	d0fa      	beq.n	801123e <_dtoa_r+0xb8e>
 8011248:	e6d7      	b.n	8010ffa <_dtoa_r+0x94a>
 801124a:	9a01      	ldr	r2, [sp, #4]
 801124c:	429a      	cmp	r2, r3
 801124e:	d184      	bne.n	801115a <_dtoa_r+0xaaa>
 8011250:	9b00      	ldr	r3, [sp, #0]
 8011252:	3301      	adds	r3, #1
 8011254:	9300      	str	r3, [sp, #0]
 8011256:	2331      	movs	r3, #49	; 0x31
 8011258:	7013      	strb	r3, [r2, #0]
 801125a:	e6ce      	b.n	8010ffa <_dtoa_r+0x94a>
 801125c:	4b09      	ldr	r3, [pc, #36]	; (8011284 <_dtoa_r+0xbd4>)
 801125e:	f7ff ba95 	b.w	801078c <_dtoa_r+0xdc>
 8011262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011264:	2b00      	cmp	r3, #0
 8011266:	f47f aa6e 	bne.w	8010746 <_dtoa_r+0x96>
 801126a:	4b07      	ldr	r3, [pc, #28]	; (8011288 <_dtoa_r+0xbd8>)
 801126c:	f7ff ba8e 	b.w	801078c <_dtoa_r+0xdc>
 8011270:	9b02      	ldr	r3, [sp, #8]
 8011272:	2b00      	cmp	r3, #0
 8011274:	dcae      	bgt.n	80111d4 <_dtoa_r+0xb24>
 8011276:	9b06      	ldr	r3, [sp, #24]
 8011278:	2b02      	cmp	r3, #2
 801127a:	f73f aea8 	bgt.w	8010fce <_dtoa_r+0x91e>
 801127e:	e7a9      	b.n	80111d4 <_dtoa_r+0xb24>
 8011280:	08014169 	.word	0x08014169
 8011284:	08013ed4 	.word	0x08013ed4
 8011288:	08014101 	.word	0x08014101

0801128c <__sflush_r>:
 801128c:	898a      	ldrh	r2, [r1, #12]
 801128e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011292:	4605      	mov	r5, r0
 8011294:	0710      	lsls	r0, r2, #28
 8011296:	460c      	mov	r4, r1
 8011298:	d458      	bmi.n	801134c <__sflush_r+0xc0>
 801129a:	684b      	ldr	r3, [r1, #4]
 801129c:	2b00      	cmp	r3, #0
 801129e:	dc05      	bgt.n	80112ac <__sflush_r+0x20>
 80112a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	dc02      	bgt.n	80112ac <__sflush_r+0x20>
 80112a6:	2000      	movs	r0, #0
 80112a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112ae:	2e00      	cmp	r6, #0
 80112b0:	d0f9      	beq.n	80112a6 <__sflush_r+0x1a>
 80112b2:	2300      	movs	r3, #0
 80112b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112b8:	682f      	ldr	r7, [r5, #0]
 80112ba:	602b      	str	r3, [r5, #0]
 80112bc:	d032      	beq.n	8011324 <__sflush_r+0x98>
 80112be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112c0:	89a3      	ldrh	r3, [r4, #12]
 80112c2:	075a      	lsls	r2, r3, #29
 80112c4:	d505      	bpl.n	80112d2 <__sflush_r+0x46>
 80112c6:	6863      	ldr	r3, [r4, #4]
 80112c8:	1ac0      	subs	r0, r0, r3
 80112ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112cc:	b10b      	cbz	r3, 80112d2 <__sflush_r+0x46>
 80112ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112d0:	1ac0      	subs	r0, r0, r3
 80112d2:	2300      	movs	r3, #0
 80112d4:	4602      	mov	r2, r0
 80112d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112d8:	6a21      	ldr	r1, [r4, #32]
 80112da:	4628      	mov	r0, r5
 80112dc:	47b0      	blx	r6
 80112de:	1c43      	adds	r3, r0, #1
 80112e0:	89a3      	ldrh	r3, [r4, #12]
 80112e2:	d106      	bne.n	80112f2 <__sflush_r+0x66>
 80112e4:	6829      	ldr	r1, [r5, #0]
 80112e6:	291d      	cmp	r1, #29
 80112e8:	d82c      	bhi.n	8011344 <__sflush_r+0xb8>
 80112ea:	4a2a      	ldr	r2, [pc, #168]	; (8011394 <__sflush_r+0x108>)
 80112ec:	40ca      	lsrs	r2, r1
 80112ee:	07d6      	lsls	r6, r2, #31
 80112f0:	d528      	bpl.n	8011344 <__sflush_r+0xb8>
 80112f2:	2200      	movs	r2, #0
 80112f4:	6062      	str	r2, [r4, #4]
 80112f6:	04d9      	lsls	r1, r3, #19
 80112f8:	6922      	ldr	r2, [r4, #16]
 80112fa:	6022      	str	r2, [r4, #0]
 80112fc:	d504      	bpl.n	8011308 <__sflush_r+0x7c>
 80112fe:	1c42      	adds	r2, r0, #1
 8011300:	d101      	bne.n	8011306 <__sflush_r+0x7a>
 8011302:	682b      	ldr	r3, [r5, #0]
 8011304:	b903      	cbnz	r3, 8011308 <__sflush_r+0x7c>
 8011306:	6560      	str	r0, [r4, #84]	; 0x54
 8011308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801130a:	602f      	str	r7, [r5, #0]
 801130c:	2900      	cmp	r1, #0
 801130e:	d0ca      	beq.n	80112a6 <__sflush_r+0x1a>
 8011310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011314:	4299      	cmp	r1, r3
 8011316:	d002      	beq.n	801131e <__sflush_r+0x92>
 8011318:	4628      	mov	r0, r5
 801131a:	f7fd f8a5 	bl	800e468 <_free_r>
 801131e:	2000      	movs	r0, #0
 8011320:	6360      	str	r0, [r4, #52]	; 0x34
 8011322:	e7c1      	b.n	80112a8 <__sflush_r+0x1c>
 8011324:	6a21      	ldr	r1, [r4, #32]
 8011326:	2301      	movs	r3, #1
 8011328:	4628      	mov	r0, r5
 801132a:	47b0      	blx	r6
 801132c:	1c41      	adds	r1, r0, #1
 801132e:	d1c7      	bne.n	80112c0 <__sflush_r+0x34>
 8011330:	682b      	ldr	r3, [r5, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d0c4      	beq.n	80112c0 <__sflush_r+0x34>
 8011336:	2b1d      	cmp	r3, #29
 8011338:	d001      	beq.n	801133e <__sflush_r+0xb2>
 801133a:	2b16      	cmp	r3, #22
 801133c:	d101      	bne.n	8011342 <__sflush_r+0xb6>
 801133e:	602f      	str	r7, [r5, #0]
 8011340:	e7b1      	b.n	80112a6 <__sflush_r+0x1a>
 8011342:	89a3      	ldrh	r3, [r4, #12]
 8011344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011348:	81a3      	strh	r3, [r4, #12]
 801134a:	e7ad      	b.n	80112a8 <__sflush_r+0x1c>
 801134c:	690f      	ldr	r7, [r1, #16]
 801134e:	2f00      	cmp	r7, #0
 8011350:	d0a9      	beq.n	80112a6 <__sflush_r+0x1a>
 8011352:	0793      	lsls	r3, r2, #30
 8011354:	680e      	ldr	r6, [r1, #0]
 8011356:	bf08      	it	eq
 8011358:	694b      	ldreq	r3, [r1, #20]
 801135a:	600f      	str	r7, [r1, #0]
 801135c:	bf18      	it	ne
 801135e:	2300      	movne	r3, #0
 8011360:	eba6 0807 	sub.w	r8, r6, r7
 8011364:	608b      	str	r3, [r1, #8]
 8011366:	f1b8 0f00 	cmp.w	r8, #0
 801136a:	dd9c      	ble.n	80112a6 <__sflush_r+0x1a>
 801136c:	6a21      	ldr	r1, [r4, #32]
 801136e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011370:	4643      	mov	r3, r8
 8011372:	463a      	mov	r2, r7
 8011374:	4628      	mov	r0, r5
 8011376:	47b0      	blx	r6
 8011378:	2800      	cmp	r0, #0
 801137a:	dc06      	bgt.n	801138a <__sflush_r+0xfe>
 801137c:	89a3      	ldrh	r3, [r4, #12]
 801137e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011382:	81a3      	strh	r3, [r4, #12]
 8011384:	f04f 30ff 	mov.w	r0, #4294967295
 8011388:	e78e      	b.n	80112a8 <__sflush_r+0x1c>
 801138a:	4407      	add	r7, r0
 801138c:	eba8 0800 	sub.w	r8, r8, r0
 8011390:	e7e9      	b.n	8011366 <__sflush_r+0xda>
 8011392:	bf00      	nop
 8011394:	20400001 	.word	0x20400001

08011398 <_fflush_r>:
 8011398:	b538      	push	{r3, r4, r5, lr}
 801139a:	690b      	ldr	r3, [r1, #16]
 801139c:	4605      	mov	r5, r0
 801139e:	460c      	mov	r4, r1
 80113a0:	b913      	cbnz	r3, 80113a8 <_fflush_r+0x10>
 80113a2:	2500      	movs	r5, #0
 80113a4:	4628      	mov	r0, r5
 80113a6:	bd38      	pop	{r3, r4, r5, pc}
 80113a8:	b118      	cbz	r0, 80113b2 <_fflush_r+0x1a>
 80113aa:	6983      	ldr	r3, [r0, #24]
 80113ac:	b90b      	cbnz	r3, 80113b2 <_fflush_r+0x1a>
 80113ae:	f000 f887 	bl	80114c0 <__sinit>
 80113b2:	4b14      	ldr	r3, [pc, #80]	; (8011404 <_fflush_r+0x6c>)
 80113b4:	429c      	cmp	r4, r3
 80113b6:	d11b      	bne.n	80113f0 <_fflush_r+0x58>
 80113b8:	686c      	ldr	r4, [r5, #4]
 80113ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d0ef      	beq.n	80113a2 <_fflush_r+0xa>
 80113c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113c4:	07d0      	lsls	r0, r2, #31
 80113c6:	d404      	bmi.n	80113d2 <_fflush_r+0x3a>
 80113c8:	0599      	lsls	r1, r3, #22
 80113ca:	d402      	bmi.n	80113d2 <_fflush_r+0x3a>
 80113cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113ce:	f000 fc9a 	bl	8011d06 <__retarget_lock_acquire_recursive>
 80113d2:	4628      	mov	r0, r5
 80113d4:	4621      	mov	r1, r4
 80113d6:	f7ff ff59 	bl	801128c <__sflush_r>
 80113da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113dc:	07da      	lsls	r2, r3, #31
 80113de:	4605      	mov	r5, r0
 80113e0:	d4e0      	bmi.n	80113a4 <_fflush_r+0xc>
 80113e2:	89a3      	ldrh	r3, [r4, #12]
 80113e4:	059b      	lsls	r3, r3, #22
 80113e6:	d4dd      	bmi.n	80113a4 <_fflush_r+0xc>
 80113e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113ea:	f000 fc8d 	bl	8011d08 <__retarget_lock_release_recursive>
 80113ee:	e7d9      	b.n	80113a4 <_fflush_r+0xc>
 80113f0:	4b05      	ldr	r3, [pc, #20]	; (8011408 <_fflush_r+0x70>)
 80113f2:	429c      	cmp	r4, r3
 80113f4:	d101      	bne.n	80113fa <_fflush_r+0x62>
 80113f6:	68ac      	ldr	r4, [r5, #8]
 80113f8:	e7df      	b.n	80113ba <_fflush_r+0x22>
 80113fa:	4b04      	ldr	r3, [pc, #16]	; (801140c <_fflush_r+0x74>)
 80113fc:	429c      	cmp	r4, r3
 80113fe:	bf08      	it	eq
 8011400:	68ec      	ldreq	r4, [r5, #12]
 8011402:	e7da      	b.n	80113ba <_fflush_r+0x22>
 8011404:	0801419c 	.word	0x0801419c
 8011408:	080141bc 	.word	0x080141bc
 801140c:	0801417c 	.word	0x0801417c

08011410 <std>:
 8011410:	2300      	movs	r3, #0
 8011412:	b510      	push	{r4, lr}
 8011414:	4604      	mov	r4, r0
 8011416:	e9c0 3300 	strd	r3, r3, [r0]
 801141a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801141e:	6083      	str	r3, [r0, #8]
 8011420:	8181      	strh	r1, [r0, #12]
 8011422:	6643      	str	r3, [r0, #100]	; 0x64
 8011424:	81c2      	strh	r2, [r0, #14]
 8011426:	6183      	str	r3, [r0, #24]
 8011428:	4619      	mov	r1, r3
 801142a:	2208      	movs	r2, #8
 801142c:	305c      	adds	r0, #92	; 0x5c
 801142e:	f7fd f813 	bl	800e458 <memset>
 8011432:	4b05      	ldr	r3, [pc, #20]	; (8011448 <std+0x38>)
 8011434:	6263      	str	r3, [r4, #36]	; 0x24
 8011436:	4b05      	ldr	r3, [pc, #20]	; (801144c <std+0x3c>)
 8011438:	62a3      	str	r3, [r4, #40]	; 0x28
 801143a:	4b05      	ldr	r3, [pc, #20]	; (8011450 <std+0x40>)
 801143c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801143e:	4b05      	ldr	r3, [pc, #20]	; (8011454 <std+0x44>)
 8011440:	6224      	str	r4, [r4, #32]
 8011442:	6323      	str	r3, [r4, #48]	; 0x30
 8011444:	bd10      	pop	{r4, pc}
 8011446:	bf00      	nop
 8011448:	08012dc9 	.word	0x08012dc9
 801144c:	08012deb 	.word	0x08012deb
 8011450:	08012e23 	.word	0x08012e23
 8011454:	08012e47 	.word	0x08012e47

08011458 <_cleanup_r>:
 8011458:	4901      	ldr	r1, [pc, #4]	; (8011460 <_cleanup_r+0x8>)
 801145a:	f000 b8c1 	b.w	80115e0 <_fwalk_reent>
 801145e:	bf00      	nop
 8011460:	08011399 	.word	0x08011399

08011464 <__sfmoreglue>:
 8011464:	b570      	push	{r4, r5, r6, lr}
 8011466:	2268      	movs	r2, #104	; 0x68
 8011468:	1e4d      	subs	r5, r1, #1
 801146a:	4355      	muls	r5, r2
 801146c:	460e      	mov	r6, r1
 801146e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011472:	f7fd f865 	bl	800e540 <_malloc_r>
 8011476:	4604      	mov	r4, r0
 8011478:	b140      	cbz	r0, 801148c <__sfmoreglue+0x28>
 801147a:	2100      	movs	r1, #0
 801147c:	e9c0 1600 	strd	r1, r6, [r0]
 8011480:	300c      	adds	r0, #12
 8011482:	60a0      	str	r0, [r4, #8]
 8011484:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011488:	f7fc ffe6 	bl	800e458 <memset>
 801148c:	4620      	mov	r0, r4
 801148e:	bd70      	pop	{r4, r5, r6, pc}

08011490 <__sfp_lock_acquire>:
 8011490:	4801      	ldr	r0, [pc, #4]	; (8011498 <__sfp_lock_acquire+0x8>)
 8011492:	f000 bc38 	b.w	8011d06 <__retarget_lock_acquire_recursive>
 8011496:	bf00      	nop
 8011498:	20001729 	.word	0x20001729

0801149c <__sfp_lock_release>:
 801149c:	4801      	ldr	r0, [pc, #4]	; (80114a4 <__sfp_lock_release+0x8>)
 801149e:	f000 bc33 	b.w	8011d08 <__retarget_lock_release_recursive>
 80114a2:	bf00      	nop
 80114a4:	20001729 	.word	0x20001729

080114a8 <__sinit_lock_acquire>:
 80114a8:	4801      	ldr	r0, [pc, #4]	; (80114b0 <__sinit_lock_acquire+0x8>)
 80114aa:	f000 bc2c 	b.w	8011d06 <__retarget_lock_acquire_recursive>
 80114ae:	bf00      	nop
 80114b0:	2000172a 	.word	0x2000172a

080114b4 <__sinit_lock_release>:
 80114b4:	4801      	ldr	r0, [pc, #4]	; (80114bc <__sinit_lock_release+0x8>)
 80114b6:	f000 bc27 	b.w	8011d08 <__retarget_lock_release_recursive>
 80114ba:	bf00      	nop
 80114bc:	2000172a 	.word	0x2000172a

080114c0 <__sinit>:
 80114c0:	b510      	push	{r4, lr}
 80114c2:	4604      	mov	r4, r0
 80114c4:	f7ff fff0 	bl	80114a8 <__sinit_lock_acquire>
 80114c8:	69a3      	ldr	r3, [r4, #24]
 80114ca:	b11b      	cbz	r3, 80114d4 <__sinit+0x14>
 80114cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114d0:	f7ff bff0 	b.w	80114b4 <__sinit_lock_release>
 80114d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80114d8:	6523      	str	r3, [r4, #80]	; 0x50
 80114da:	4b13      	ldr	r3, [pc, #76]	; (8011528 <__sinit+0x68>)
 80114dc:	4a13      	ldr	r2, [pc, #76]	; (801152c <__sinit+0x6c>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80114e2:	42a3      	cmp	r3, r4
 80114e4:	bf04      	itt	eq
 80114e6:	2301      	moveq	r3, #1
 80114e8:	61a3      	streq	r3, [r4, #24]
 80114ea:	4620      	mov	r0, r4
 80114ec:	f000 f820 	bl	8011530 <__sfp>
 80114f0:	6060      	str	r0, [r4, #4]
 80114f2:	4620      	mov	r0, r4
 80114f4:	f000 f81c 	bl	8011530 <__sfp>
 80114f8:	60a0      	str	r0, [r4, #8]
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 f818 	bl	8011530 <__sfp>
 8011500:	2200      	movs	r2, #0
 8011502:	60e0      	str	r0, [r4, #12]
 8011504:	2104      	movs	r1, #4
 8011506:	6860      	ldr	r0, [r4, #4]
 8011508:	f7ff ff82 	bl	8011410 <std>
 801150c:	68a0      	ldr	r0, [r4, #8]
 801150e:	2201      	movs	r2, #1
 8011510:	2109      	movs	r1, #9
 8011512:	f7ff ff7d 	bl	8011410 <std>
 8011516:	68e0      	ldr	r0, [r4, #12]
 8011518:	2202      	movs	r2, #2
 801151a:	2112      	movs	r1, #18
 801151c:	f7ff ff78 	bl	8011410 <std>
 8011520:	2301      	movs	r3, #1
 8011522:	61a3      	str	r3, [r4, #24]
 8011524:	e7d2      	b.n	80114cc <__sinit+0xc>
 8011526:	bf00      	nop
 8011528:	08013ec0 	.word	0x08013ec0
 801152c:	08011459 	.word	0x08011459

08011530 <__sfp>:
 8011530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011532:	4607      	mov	r7, r0
 8011534:	f7ff ffac 	bl	8011490 <__sfp_lock_acquire>
 8011538:	4b1e      	ldr	r3, [pc, #120]	; (80115b4 <__sfp+0x84>)
 801153a:	681e      	ldr	r6, [r3, #0]
 801153c:	69b3      	ldr	r3, [r6, #24]
 801153e:	b913      	cbnz	r3, 8011546 <__sfp+0x16>
 8011540:	4630      	mov	r0, r6
 8011542:	f7ff ffbd 	bl	80114c0 <__sinit>
 8011546:	3648      	adds	r6, #72	; 0x48
 8011548:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801154c:	3b01      	subs	r3, #1
 801154e:	d503      	bpl.n	8011558 <__sfp+0x28>
 8011550:	6833      	ldr	r3, [r6, #0]
 8011552:	b30b      	cbz	r3, 8011598 <__sfp+0x68>
 8011554:	6836      	ldr	r6, [r6, #0]
 8011556:	e7f7      	b.n	8011548 <__sfp+0x18>
 8011558:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801155c:	b9d5      	cbnz	r5, 8011594 <__sfp+0x64>
 801155e:	4b16      	ldr	r3, [pc, #88]	; (80115b8 <__sfp+0x88>)
 8011560:	60e3      	str	r3, [r4, #12]
 8011562:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011566:	6665      	str	r5, [r4, #100]	; 0x64
 8011568:	f000 fbcc 	bl	8011d04 <__retarget_lock_init_recursive>
 801156c:	f7ff ff96 	bl	801149c <__sfp_lock_release>
 8011570:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011574:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011578:	6025      	str	r5, [r4, #0]
 801157a:	61a5      	str	r5, [r4, #24]
 801157c:	2208      	movs	r2, #8
 801157e:	4629      	mov	r1, r5
 8011580:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011584:	f7fc ff68 	bl	800e458 <memset>
 8011588:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801158c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011590:	4620      	mov	r0, r4
 8011592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011594:	3468      	adds	r4, #104	; 0x68
 8011596:	e7d9      	b.n	801154c <__sfp+0x1c>
 8011598:	2104      	movs	r1, #4
 801159a:	4638      	mov	r0, r7
 801159c:	f7ff ff62 	bl	8011464 <__sfmoreglue>
 80115a0:	4604      	mov	r4, r0
 80115a2:	6030      	str	r0, [r6, #0]
 80115a4:	2800      	cmp	r0, #0
 80115a6:	d1d5      	bne.n	8011554 <__sfp+0x24>
 80115a8:	f7ff ff78 	bl	801149c <__sfp_lock_release>
 80115ac:	230c      	movs	r3, #12
 80115ae:	603b      	str	r3, [r7, #0]
 80115b0:	e7ee      	b.n	8011590 <__sfp+0x60>
 80115b2:	bf00      	nop
 80115b4:	08013ec0 	.word	0x08013ec0
 80115b8:	ffff0001 	.word	0xffff0001

080115bc <fiprintf>:
 80115bc:	b40e      	push	{r1, r2, r3}
 80115be:	b503      	push	{r0, r1, lr}
 80115c0:	4601      	mov	r1, r0
 80115c2:	ab03      	add	r3, sp, #12
 80115c4:	4805      	ldr	r0, [pc, #20]	; (80115dc <fiprintf+0x20>)
 80115c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80115ca:	6800      	ldr	r0, [r0, #0]
 80115cc:	9301      	str	r3, [sp, #4]
 80115ce:	f001 fa7b 	bl	8012ac8 <_vfiprintf_r>
 80115d2:	b002      	add	sp, #8
 80115d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80115d8:	b003      	add	sp, #12
 80115da:	4770      	bx	lr
 80115dc:	2000001c 	.word	0x2000001c

080115e0 <_fwalk_reent>:
 80115e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115e4:	4606      	mov	r6, r0
 80115e6:	4688      	mov	r8, r1
 80115e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80115ec:	2700      	movs	r7, #0
 80115ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115f2:	f1b9 0901 	subs.w	r9, r9, #1
 80115f6:	d505      	bpl.n	8011604 <_fwalk_reent+0x24>
 80115f8:	6824      	ldr	r4, [r4, #0]
 80115fa:	2c00      	cmp	r4, #0
 80115fc:	d1f7      	bne.n	80115ee <_fwalk_reent+0xe>
 80115fe:	4638      	mov	r0, r7
 8011600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011604:	89ab      	ldrh	r3, [r5, #12]
 8011606:	2b01      	cmp	r3, #1
 8011608:	d907      	bls.n	801161a <_fwalk_reent+0x3a>
 801160a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801160e:	3301      	adds	r3, #1
 8011610:	d003      	beq.n	801161a <_fwalk_reent+0x3a>
 8011612:	4629      	mov	r1, r5
 8011614:	4630      	mov	r0, r6
 8011616:	47c0      	blx	r8
 8011618:	4307      	orrs	r7, r0
 801161a:	3568      	adds	r5, #104	; 0x68
 801161c:	e7e9      	b.n	80115f2 <_fwalk_reent+0x12>

0801161e <rshift>:
 801161e:	6903      	ldr	r3, [r0, #16]
 8011620:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011628:	ea4f 1261 	mov.w	r2, r1, asr #5
 801162c:	f100 0414 	add.w	r4, r0, #20
 8011630:	dd45      	ble.n	80116be <rshift+0xa0>
 8011632:	f011 011f 	ands.w	r1, r1, #31
 8011636:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801163a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801163e:	d10c      	bne.n	801165a <rshift+0x3c>
 8011640:	f100 0710 	add.w	r7, r0, #16
 8011644:	4629      	mov	r1, r5
 8011646:	42b1      	cmp	r1, r6
 8011648:	d334      	bcc.n	80116b4 <rshift+0x96>
 801164a:	1a9b      	subs	r3, r3, r2
 801164c:	009b      	lsls	r3, r3, #2
 801164e:	1eea      	subs	r2, r5, #3
 8011650:	4296      	cmp	r6, r2
 8011652:	bf38      	it	cc
 8011654:	2300      	movcc	r3, #0
 8011656:	4423      	add	r3, r4
 8011658:	e015      	b.n	8011686 <rshift+0x68>
 801165a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801165e:	f1c1 0820 	rsb	r8, r1, #32
 8011662:	40cf      	lsrs	r7, r1
 8011664:	f105 0e04 	add.w	lr, r5, #4
 8011668:	46a1      	mov	r9, r4
 801166a:	4576      	cmp	r6, lr
 801166c:	46f4      	mov	ip, lr
 801166e:	d815      	bhi.n	801169c <rshift+0x7e>
 8011670:	1a9a      	subs	r2, r3, r2
 8011672:	0092      	lsls	r2, r2, #2
 8011674:	3a04      	subs	r2, #4
 8011676:	3501      	adds	r5, #1
 8011678:	42ae      	cmp	r6, r5
 801167a:	bf38      	it	cc
 801167c:	2200      	movcc	r2, #0
 801167e:	18a3      	adds	r3, r4, r2
 8011680:	50a7      	str	r7, [r4, r2]
 8011682:	b107      	cbz	r7, 8011686 <rshift+0x68>
 8011684:	3304      	adds	r3, #4
 8011686:	1b1a      	subs	r2, r3, r4
 8011688:	42a3      	cmp	r3, r4
 801168a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801168e:	bf08      	it	eq
 8011690:	2300      	moveq	r3, #0
 8011692:	6102      	str	r2, [r0, #16]
 8011694:	bf08      	it	eq
 8011696:	6143      	streq	r3, [r0, #20]
 8011698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801169c:	f8dc c000 	ldr.w	ip, [ip]
 80116a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80116a4:	ea4c 0707 	orr.w	r7, ip, r7
 80116a8:	f849 7b04 	str.w	r7, [r9], #4
 80116ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80116b0:	40cf      	lsrs	r7, r1
 80116b2:	e7da      	b.n	801166a <rshift+0x4c>
 80116b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80116b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80116bc:	e7c3      	b.n	8011646 <rshift+0x28>
 80116be:	4623      	mov	r3, r4
 80116c0:	e7e1      	b.n	8011686 <rshift+0x68>

080116c2 <__hexdig_fun>:
 80116c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80116c6:	2b09      	cmp	r3, #9
 80116c8:	d802      	bhi.n	80116d0 <__hexdig_fun+0xe>
 80116ca:	3820      	subs	r0, #32
 80116cc:	b2c0      	uxtb	r0, r0
 80116ce:	4770      	bx	lr
 80116d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80116d4:	2b05      	cmp	r3, #5
 80116d6:	d801      	bhi.n	80116dc <__hexdig_fun+0x1a>
 80116d8:	3847      	subs	r0, #71	; 0x47
 80116da:	e7f7      	b.n	80116cc <__hexdig_fun+0xa>
 80116dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80116e0:	2b05      	cmp	r3, #5
 80116e2:	d801      	bhi.n	80116e8 <__hexdig_fun+0x26>
 80116e4:	3827      	subs	r0, #39	; 0x27
 80116e6:	e7f1      	b.n	80116cc <__hexdig_fun+0xa>
 80116e8:	2000      	movs	r0, #0
 80116ea:	4770      	bx	lr

080116ec <__gethex>:
 80116ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f0:	ed2d 8b02 	vpush	{d8}
 80116f4:	b089      	sub	sp, #36	; 0x24
 80116f6:	ee08 0a10 	vmov	s16, r0
 80116fa:	9304      	str	r3, [sp, #16]
 80116fc:	4bb4      	ldr	r3, [pc, #720]	; (80119d0 <__gethex+0x2e4>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	9301      	str	r3, [sp, #4]
 8011702:	4618      	mov	r0, r3
 8011704:	468b      	mov	fp, r1
 8011706:	4690      	mov	r8, r2
 8011708:	f7ee fd84 	bl	8000214 <strlen>
 801170c:	9b01      	ldr	r3, [sp, #4]
 801170e:	f8db 2000 	ldr.w	r2, [fp]
 8011712:	4403      	add	r3, r0
 8011714:	4682      	mov	sl, r0
 8011716:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801171a:	9305      	str	r3, [sp, #20]
 801171c:	1c93      	adds	r3, r2, #2
 801171e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011722:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011726:	32fe      	adds	r2, #254	; 0xfe
 8011728:	18d1      	adds	r1, r2, r3
 801172a:	461f      	mov	r7, r3
 801172c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011730:	9100      	str	r1, [sp, #0]
 8011732:	2830      	cmp	r0, #48	; 0x30
 8011734:	d0f8      	beq.n	8011728 <__gethex+0x3c>
 8011736:	f7ff ffc4 	bl	80116c2 <__hexdig_fun>
 801173a:	4604      	mov	r4, r0
 801173c:	2800      	cmp	r0, #0
 801173e:	d13a      	bne.n	80117b6 <__gethex+0xca>
 8011740:	9901      	ldr	r1, [sp, #4]
 8011742:	4652      	mov	r2, sl
 8011744:	4638      	mov	r0, r7
 8011746:	f7fd fef7 	bl	800f538 <strncmp>
 801174a:	4605      	mov	r5, r0
 801174c:	2800      	cmp	r0, #0
 801174e:	d168      	bne.n	8011822 <__gethex+0x136>
 8011750:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011754:	eb07 060a 	add.w	r6, r7, sl
 8011758:	f7ff ffb3 	bl	80116c2 <__hexdig_fun>
 801175c:	2800      	cmp	r0, #0
 801175e:	d062      	beq.n	8011826 <__gethex+0x13a>
 8011760:	4633      	mov	r3, r6
 8011762:	7818      	ldrb	r0, [r3, #0]
 8011764:	2830      	cmp	r0, #48	; 0x30
 8011766:	461f      	mov	r7, r3
 8011768:	f103 0301 	add.w	r3, r3, #1
 801176c:	d0f9      	beq.n	8011762 <__gethex+0x76>
 801176e:	f7ff ffa8 	bl	80116c2 <__hexdig_fun>
 8011772:	2301      	movs	r3, #1
 8011774:	fab0 f480 	clz	r4, r0
 8011778:	0964      	lsrs	r4, r4, #5
 801177a:	4635      	mov	r5, r6
 801177c:	9300      	str	r3, [sp, #0]
 801177e:	463a      	mov	r2, r7
 8011780:	4616      	mov	r6, r2
 8011782:	3201      	adds	r2, #1
 8011784:	7830      	ldrb	r0, [r6, #0]
 8011786:	f7ff ff9c 	bl	80116c2 <__hexdig_fun>
 801178a:	2800      	cmp	r0, #0
 801178c:	d1f8      	bne.n	8011780 <__gethex+0x94>
 801178e:	9901      	ldr	r1, [sp, #4]
 8011790:	4652      	mov	r2, sl
 8011792:	4630      	mov	r0, r6
 8011794:	f7fd fed0 	bl	800f538 <strncmp>
 8011798:	b980      	cbnz	r0, 80117bc <__gethex+0xd0>
 801179a:	b94d      	cbnz	r5, 80117b0 <__gethex+0xc4>
 801179c:	eb06 050a 	add.w	r5, r6, sl
 80117a0:	462a      	mov	r2, r5
 80117a2:	4616      	mov	r6, r2
 80117a4:	3201      	adds	r2, #1
 80117a6:	7830      	ldrb	r0, [r6, #0]
 80117a8:	f7ff ff8b 	bl	80116c2 <__hexdig_fun>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d1f8      	bne.n	80117a2 <__gethex+0xb6>
 80117b0:	1bad      	subs	r5, r5, r6
 80117b2:	00ad      	lsls	r5, r5, #2
 80117b4:	e004      	b.n	80117c0 <__gethex+0xd4>
 80117b6:	2400      	movs	r4, #0
 80117b8:	4625      	mov	r5, r4
 80117ba:	e7e0      	b.n	801177e <__gethex+0x92>
 80117bc:	2d00      	cmp	r5, #0
 80117be:	d1f7      	bne.n	80117b0 <__gethex+0xc4>
 80117c0:	7833      	ldrb	r3, [r6, #0]
 80117c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80117c6:	2b50      	cmp	r3, #80	; 0x50
 80117c8:	d13b      	bne.n	8011842 <__gethex+0x156>
 80117ca:	7873      	ldrb	r3, [r6, #1]
 80117cc:	2b2b      	cmp	r3, #43	; 0x2b
 80117ce:	d02c      	beq.n	801182a <__gethex+0x13e>
 80117d0:	2b2d      	cmp	r3, #45	; 0x2d
 80117d2:	d02e      	beq.n	8011832 <__gethex+0x146>
 80117d4:	1c71      	adds	r1, r6, #1
 80117d6:	f04f 0900 	mov.w	r9, #0
 80117da:	7808      	ldrb	r0, [r1, #0]
 80117dc:	f7ff ff71 	bl	80116c2 <__hexdig_fun>
 80117e0:	1e43      	subs	r3, r0, #1
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	2b18      	cmp	r3, #24
 80117e6:	d82c      	bhi.n	8011842 <__gethex+0x156>
 80117e8:	f1a0 0210 	sub.w	r2, r0, #16
 80117ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80117f0:	f7ff ff67 	bl	80116c2 <__hexdig_fun>
 80117f4:	1e43      	subs	r3, r0, #1
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	2b18      	cmp	r3, #24
 80117fa:	d91d      	bls.n	8011838 <__gethex+0x14c>
 80117fc:	f1b9 0f00 	cmp.w	r9, #0
 8011800:	d000      	beq.n	8011804 <__gethex+0x118>
 8011802:	4252      	negs	r2, r2
 8011804:	4415      	add	r5, r2
 8011806:	f8cb 1000 	str.w	r1, [fp]
 801180a:	b1e4      	cbz	r4, 8011846 <__gethex+0x15a>
 801180c:	9b00      	ldr	r3, [sp, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	bf14      	ite	ne
 8011812:	2700      	movne	r7, #0
 8011814:	2706      	moveq	r7, #6
 8011816:	4638      	mov	r0, r7
 8011818:	b009      	add	sp, #36	; 0x24
 801181a:	ecbd 8b02 	vpop	{d8}
 801181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011822:	463e      	mov	r6, r7
 8011824:	4625      	mov	r5, r4
 8011826:	2401      	movs	r4, #1
 8011828:	e7ca      	b.n	80117c0 <__gethex+0xd4>
 801182a:	f04f 0900 	mov.w	r9, #0
 801182e:	1cb1      	adds	r1, r6, #2
 8011830:	e7d3      	b.n	80117da <__gethex+0xee>
 8011832:	f04f 0901 	mov.w	r9, #1
 8011836:	e7fa      	b.n	801182e <__gethex+0x142>
 8011838:	230a      	movs	r3, #10
 801183a:	fb03 0202 	mla	r2, r3, r2, r0
 801183e:	3a10      	subs	r2, #16
 8011840:	e7d4      	b.n	80117ec <__gethex+0x100>
 8011842:	4631      	mov	r1, r6
 8011844:	e7df      	b.n	8011806 <__gethex+0x11a>
 8011846:	1bf3      	subs	r3, r6, r7
 8011848:	3b01      	subs	r3, #1
 801184a:	4621      	mov	r1, r4
 801184c:	2b07      	cmp	r3, #7
 801184e:	dc0b      	bgt.n	8011868 <__gethex+0x17c>
 8011850:	ee18 0a10 	vmov	r0, s16
 8011854:	f000 fadc 	bl	8011e10 <_Balloc>
 8011858:	4604      	mov	r4, r0
 801185a:	b940      	cbnz	r0, 801186e <__gethex+0x182>
 801185c:	4b5d      	ldr	r3, [pc, #372]	; (80119d4 <__gethex+0x2e8>)
 801185e:	4602      	mov	r2, r0
 8011860:	21de      	movs	r1, #222	; 0xde
 8011862:	485d      	ldr	r0, [pc, #372]	; (80119d8 <__gethex+0x2ec>)
 8011864:	f7fe fe7a 	bl	801055c <__assert_func>
 8011868:	3101      	adds	r1, #1
 801186a:	105b      	asrs	r3, r3, #1
 801186c:	e7ee      	b.n	801184c <__gethex+0x160>
 801186e:	f100 0914 	add.w	r9, r0, #20
 8011872:	f04f 0b00 	mov.w	fp, #0
 8011876:	f1ca 0301 	rsb	r3, sl, #1
 801187a:	f8cd 9008 	str.w	r9, [sp, #8]
 801187e:	f8cd b000 	str.w	fp, [sp]
 8011882:	9306      	str	r3, [sp, #24]
 8011884:	42b7      	cmp	r7, r6
 8011886:	d340      	bcc.n	801190a <__gethex+0x21e>
 8011888:	9802      	ldr	r0, [sp, #8]
 801188a:	9b00      	ldr	r3, [sp, #0]
 801188c:	f840 3b04 	str.w	r3, [r0], #4
 8011890:	eba0 0009 	sub.w	r0, r0, r9
 8011894:	1080      	asrs	r0, r0, #2
 8011896:	0146      	lsls	r6, r0, #5
 8011898:	6120      	str	r0, [r4, #16]
 801189a:	4618      	mov	r0, r3
 801189c:	f000 fbaa 	bl	8011ff4 <__hi0bits>
 80118a0:	1a30      	subs	r0, r6, r0
 80118a2:	f8d8 6000 	ldr.w	r6, [r8]
 80118a6:	42b0      	cmp	r0, r6
 80118a8:	dd63      	ble.n	8011972 <__gethex+0x286>
 80118aa:	1b87      	subs	r7, r0, r6
 80118ac:	4639      	mov	r1, r7
 80118ae:	4620      	mov	r0, r4
 80118b0:	f000 ff4e 	bl	8012750 <__any_on>
 80118b4:	4682      	mov	sl, r0
 80118b6:	b1a8      	cbz	r0, 80118e4 <__gethex+0x1f8>
 80118b8:	1e7b      	subs	r3, r7, #1
 80118ba:	1159      	asrs	r1, r3, #5
 80118bc:	f003 021f 	and.w	r2, r3, #31
 80118c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80118c4:	f04f 0a01 	mov.w	sl, #1
 80118c8:	fa0a f202 	lsl.w	r2, sl, r2
 80118cc:	420a      	tst	r2, r1
 80118ce:	d009      	beq.n	80118e4 <__gethex+0x1f8>
 80118d0:	4553      	cmp	r3, sl
 80118d2:	dd05      	ble.n	80118e0 <__gethex+0x1f4>
 80118d4:	1eb9      	subs	r1, r7, #2
 80118d6:	4620      	mov	r0, r4
 80118d8:	f000 ff3a 	bl	8012750 <__any_on>
 80118dc:	2800      	cmp	r0, #0
 80118de:	d145      	bne.n	801196c <__gethex+0x280>
 80118e0:	f04f 0a02 	mov.w	sl, #2
 80118e4:	4639      	mov	r1, r7
 80118e6:	4620      	mov	r0, r4
 80118e8:	f7ff fe99 	bl	801161e <rshift>
 80118ec:	443d      	add	r5, r7
 80118ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80118f2:	42ab      	cmp	r3, r5
 80118f4:	da4c      	bge.n	8011990 <__gethex+0x2a4>
 80118f6:	ee18 0a10 	vmov	r0, s16
 80118fa:	4621      	mov	r1, r4
 80118fc:	f000 fac8 	bl	8011e90 <_Bfree>
 8011900:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011902:	2300      	movs	r3, #0
 8011904:	6013      	str	r3, [r2, #0]
 8011906:	27a3      	movs	r7, #163	; 0xa3
 8011908:	e785      	b.n	8011816 <__gethex+0x12a>
 801190a:	1e73      	subs	r3, r6, #1
 801190c:	9a05      	ldr	r2, [sp, #20]
 801190e:	9303      	str	r3, [sp, #12]
 8011910:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011914:	4293      	cmp	r3, r2
 8011916:	d019      	beq.n	801194c <__gethex+0x260>
 8011918:	f1bb 0f20 	cmp.w	fp, #32
 801191c:	d107      	bne.n	801192e <__gethex+0x242>
 801191e:	9b02      	ldr	r3, [sp, #8]
 8011920:	9a00      	ldr	r2, [sp, #0]
 8011922:	f843 2b04 	str.w	r2, [r3], #4
 8011926:	9302      	str	r3, [sp, #8]
 8011928:	2300      	movs	r3, #0
 801192a:	9300      	str	r3, [sp, #0]
 801192c:	469b      	mov	fp, r3
 801192e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011932:	f7ff fec6 	bl	80116c2 <__hexdig_fun>
 8011936:	9b00      	ldr	r3, [sp, #0]
 8011938:	f000 000f 	and.w	r0, r0, #15
 801193c:	fa00 f00b 	lsl.w	r0, r0, fp
 8011940:	4303      	orrs	r3, r0
 8011942:	9300      	str	r3, [sp, #0]
 8011944:	f10b 0b04 	add.w	fp, fp, #4
 8011948:	9b03      	ldr	r3, [sp, #12]
 801194a:	e00d      	b.n	8011968 <__gethex+0x27c>
 801194c:	9b03      	ldr	r3, [sp, #12]
 801194e:	9a06      	ldr	r2, [sp, #24]
 8011950:	4413      	add	r3, r2
 8011952:	42bb      	cmp	r3, r7
 8011954:	d3e0      	bcc.n	8011918 <__gethex+0x22c>
 8011956:	4618      	mov	r0, r3
 8011958:	9901      	ldr	r1, [sp, #4]
 801195a:	9307      	str	r3, [sp, #28]
 801195c:	4652      	mov	r2, sl
 801195e:	f7fd fdeb 	bl	800f538 <strncmp>
 8011962:	9b07      	ldr	r3, [sp, #28]
 8011964:	2800      	cmp	r0, #0
 8011966:	d1d7      	bne.n	8011918 <__gethex+0x22c>
 8011968:	461e      	mov	r6, r3
 801196a:	e78b      	b.n	8011884 <__gethex+0x198>
 801196c:	f04f 0a03 	mov.w	sl, #3
 8011970:	e7b8      	b.n	80118e4 <__gethex+0x1f8>
 8011972:	da0a      	bge.n	801198a <__gethex+0x29e>
 8011974:	1a37      	subs	r7, r6, r0
 8011976:	4621      	mov	r1, r4
 8011978:	ee18 0a10 	vmov	r0, s16
 801197c:	463a      	mov	r2, r7
 801197e:	f000 fca3 	bl	80122c8 <__lshift>
 8011982:	1bed      	subs	r5, r5, r7
 8011984:	4604      	mov	r4, r0
 8011986:	f100 0914 	add.w	r9, r0, #20
 801198a:	f04f 0a00 	mov.w	sl, #0
 801198e:	e7ae      	b.n	80118ee <__gethex+0x202>
 8011990:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011994:	42a8      	cmp	r0, r5
 8011996:	dd72      	ble.n	8011a7e <__gethex+0x392>
 8011998:	1b45      	subs	r5, r0, r5
 801199a:	42ae      	cmp	r6, r5
 801199c:	dc36      	bgt.n	8011a0c <__gethex+0x320>
 801199e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80119a2:	2b02      	cmp	r3, #2
 80119a4:	d02a      	beq.n	80119fc <__gethex+0x310>
 80119a6:	2b03      	cmp	r3, #3
 80119a8:	d02c      	beq.n	8011a04 <__gethex+0x318>
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d11c      	bne.n	80119e8 <__gethex+0x2fc>
 80119ae:	42ae      	cmp	r6, r5
 80119b0:	d11a      	bne.n	80119e8 <__gethex+0x2fc>
 80119b2:	2e01      	cmp	r6, #1
 80119b4:	d112      	bne.n	80119dc <__gethex+0x2f0>
 80119b6:	9a04      	ldr	r2, [sp, #16]
 80119b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80119bc:	6013      	str	r3, [r2, #0]
 80119be:	2301      	movs	r3, #1
 80119c0:	6123      	str	r3, [r4, #16]
 80119c2:	f8c9 3000 	str.w	r3, [r9]
 80119c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119c8:	2762      	movs	r7, #98	; 0x62
 80119ca:	601c      	str	r4, [r3, #0]
 80119cc:	e723      	b.n	8011816 <__gethex+0x12a>
 80119ce:	bf00      	nop
 80119d0:	08014244 	.word	0x08014244
 80119d4:	08014169 	.word	0x08014169
 80119d8:	080141dc 	.word	0x080141dc
 80119dc:	1e71      	subs	r1, r6, #1
 80119de:	4620      	mov	r0, r4
 80119e0:	f000 feb6 	bl	8012750 <__any_on>
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d1e6      	bne.n	80119b6 <__gethex+0x2ca>
 80119e8:	ee18 0a10 	vmov	r0, s16
 80119ec:	4621      	mov	r1, r4
 80119ee:	f000 fa4f 	bl	8011e90 <_Bfree>
 80119f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80119f4:	2300      	movs	r3, #0
 80119f6:	6013      	str	r3, [r2, #0]
 80119f8:	2750      	movs	r7, #80	; 0x50
 80119fa:	e70c      	b.n	8011816 <__gethex+0x12a>
 80119fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1f2      	bne.n	80119e8 <__gethex+0x2fc>
 8011a02:	e7d8      	b.n	80119b6 <__gethex+0x2ca>
 8011a04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d1d5      	bne.n	80119b6 <__gethex+0x2ca>
 8011a0a:	e7ed      	b.n	80119e8 <__gethex+0x2fc>
 8011a0c:	1e6f      	subs	r7, r5, #1
 8011a0e:	f1ba 0f00 	cmp.w	sl, #0
 8011a12:	d131      	bne.n	8011a78 <__gethex+0x38c>
 8011a14:	b127      	cbz	r7, 8011a20 <__gethex+0x334>
 8011a16:	4639      	mov	r1, r7
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f000 fe99 	bl	8012750 <__any_on>
 8011a1e:	4682      	mov	sl, r0
 8011a20:	117b      	asrs	r3, r7, #5
 8011a22:	2101      	movs	r1, #1
 8011a24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011a28:	f007 071f 	and.w	r7, r7, #31
 8011a2c:	fa01 f707 	lsl.w	r7, r1, r7
 8011a30:	421f      	tst	r7, r3
 8011a32:	4629      	mov	r1, r5
 8011a34:	4620      	mov	r0, r4
 8011a36:	bf18      	it	ne
 8011a38:	f04a 0a02 	orrne.w	sl, sl, #2
 8011a3c:	1b76      	subs	r6, r6, r5
 8011a3e:	f7ff fdee 	bl	801161e <rshift>
 8011a42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011a46:	2702      	movs	r7, #2
 8011a48:	f1ba 0f00 	cmp.w	sl, #0
 8011a4c:	d048      	beq.n	8011ae0 <__gethex+0x3f4>
 8011a4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011a52:	2b02      	cmp	r3, #2
 8011a54:	d015      	beq.n	8011a82 <__gethex+0x396>
 8011a56:	2b03      	cmp	r3, #3
 8011a58:	d017      	beq.n	8011a8a <__gethex+0x39e>
 8011a5a:	2b01      	cmp	r3, #1
 8011a5c:	d109      	bne.n	8011a72 <__gethex+0x386>
 8011a5e:	f01a 0f02 	tst.w	sl, #2
 8011a62:	d006      	beq.n	8011a72 <__gethex+0x386>
 8011a64:	f8d9 0000 	ldr.w	r0, [r9]
 8011a68:	ea4a 0a00 	orr.w	sl, sl, r0
 8011a6c:	f01a 0f01 	tst.w	sl, #1
 8011a70:	d10e      	bne.n	8011a90 <__gethex+0x3a4>
 8011a72:	f047 0710 	orr.w	r7, r7, #16
 8011a76:	e033      	b.n	8011ae0 <__gethex+0x3f4>
 8011a78:	f04f 0a01 	mov.w	sl, #1
 8011a7c:	e7d0      	b.n	8011a20 <__gethex+0x334>
 8011a7e:	2701      	movs	r7, #1
 8011a80:	e7e2      	b.n	8011a48 <__gethex+0x35c>
 8011a82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a84:	f1c3 0301 	rsb	r3, r3, #1
 8011a88:	9315      	str	r3, [sp, #84]	; 0x54
 8011a8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d0f0      	beq.n	8011a72 <__gethex+0x386>
 8011a90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011a94:	f104 0314 	add.w	r3, r4, #20
 8011a98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011a9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011aa0:	f04f 0c00 	mov.w	ip, #0
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aaa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011aae:	d01c      	beq.n	8011aea <__gethex+0x3fe>
 8011ab0:	3201      	adds	r2, #1
 8011ab2:	6002      	str	r2, [r0, #0]
 8011ab4:	2f02      	cmp	r7, #2
 8011ab6:	f104 0314 	add.w	r3, r4, #20
 8011aba:	d13f      	bne.n	8011b3c <__gethex+0x450>
 8011abc:	f8d8 2000 	ldr.w	r2, [r8]
 8011ac0:	3a01      	subs	r2, #1
 8011ac2:	42b2      	cmp	r2, r6
 8011ac4:	d10a      	bne.n	8011adc <__gethex+0x3f0>
 8011ac6:	1171      	asrs	r1, r6, #5
 8011ac8:	2201      	movs	r2, #1
 8011aca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011ace:	f006 061f 	and.w	r6, r6, #31
 8011ad2:	fa02 f606 	lsl.w	r6, r2, r6
 8011ad6:	421e      	tst	r6, r3
 8011ad8:	bf18      	it	ne
 8011ada:	4617      	movne	r7, r2
 8011adc:	f047 0720 	orr.w	r7, r7, #32
 8011ae0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ae2:	601c      	str	r4, [r3, #0]
 8011ae4:	9b04      	ldr	r3, [sp, #16]
 8011ae6:	601d      	str	r5, [r3, #0]
 8011ae8:	e695      	b.n	8011816 <__gethex+0x12a>
 8011aea:	4299      	cmp	r1, r3
 8011aec:	f843 cc04 	str.w	ip, [r3, #-4]
 8011af0:	d8d8      	bhi.n	8011aa4 <__gethex+0x3b8>
 8011af2:	68a3      	ldr	r3, [r4, #8]
 8011af4:	459b      	cmp	fp, r3
 8011af6:	db19      	blt.n	8011b2c <__gethex+0x440>
 8011af8:	6861      	ldr	r1, [r4, #4]
 8011afa:	ee18 0a10 	vmov	r0, s16
 8011afe:	3101      	adds	r1, #1
 8011b00:	f000 f986 	bl	8011e10 <_Balloc>
 8011b04:	4681      	mov	r9, r0
 8011b06:	b918      	cbnz	r0, 8011b10 <__gethex+0x424>
 8011b08:	4b1a      	ldr	r3, [pc, #104]	; (8011b74 <__gethex+0x488>)
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	2184      	movs	r1, #132	; 0x84
 8011b0e:	e6a8      	b.n	8011862 <__gethex+0x176>
 8011b10:	6922      	ldr	r2, [r4, #16]
 8011b12:	3202      	adds	r2, #2
 8011b14:	f104 010c 	add.w	r1, r4, #12
 8011b18:	0092      	lsls	r2, r2, #2
 8011b1a:	300c      	adds	r0, #12
 8011b1c:	f7fc fc8e 	bl	800e43c <memcpy>
 8011b20:	4621      	mov	r1, r4
 8011b22:	ee18 0a10 	vmov	r0, s16
 8011b26:	f000 f9b3 	bl	8011e90 <_Bfree>
 8011b2a:	464c      	mov	r4, r9
 8011b2c:	6923      	ldr	r3, [r4, #16]
 8011b2e:	1c5a      	adds	r2, r3, #1
 8011b30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b34:	6122      	str	r2, [r4, #16]
 8011b36:	2201      	movs	r2, #1
 8011b38:	615a      	str	r2, [r3, #20]
 8011b3a:	e7bb      	b.n	8011ab4 <__gethex+0x3c8>
 8011b3c:	6922      	ldr	r2, [r4, #16]
 8011b3e:	455a      	cmp	r2, fp
 8011b40:	dd0b      	ble.n	8011b5a <__gethex+0x46e>
 8011b42:	2101      	movs	r1, #1
 8011b44:	4620      	mov	r0, r4
 8011b46:	f7ff fd6a 	bl	801161e <rshift>
 8011b4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b4e:	3501      	adds	r5, #1
 8011b50:	42ab      	cmp	r3, r5
 8011b52:	f6ff aed0 	blt.w	80118f6 <__gethex+0x20a>
 8011b56:	2701      	movs	r7, #1
 8011b58:	e7c0      	b.n	8011adc <__gethex+0x3f0>
 8011b5a:	f016 061f 	ands.w	r6, r6, #31
 8011b5e:	d0fa      	beq.n	8011b56 <__gethex+0x46a>
 8011b60:	4453      	add	r3, sl
 8011b62:	f1c6 0620 	rsb	r6, r6, #32
 8011b66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011b6a:	f000 fa43 	bl	8011ff4 <__hi0bits>
 8011b6e:	42b0      	cmp	r0, r6
 8011b70:	dbe7      	blt.n	8011b42 <__gethex+0x456>
 8011b72:	e7f0      	b.n	8011b56 <__gethex+0x46a>
 8011b74:	08014169 	.word	0x08014169

08011b78 <L_shift>:
 8011b78:	f1c2 0208 	rsb	r2, r2, #8
 8011b7c:	0092      	lsls	r2, r2, #2
 8011b7e:	b570      	push	{r4, r5, r6, lr}
 8011b80:	f1c2 0620 	rsb	r6, r2, #32
 8011b84:	6843      	ldr	r3, [r0, #4]
 8011b86:	6804      	ldr	r4, [r0, #0]
 8011b88:	fa03 f506 	lsl.w	r5, r3, r6
 8011b8c:	432c      	orrs	r4, r5
 8011b8e:	40d3      	lsrs	r3, r2
 8011b90:	6004      	str	r4, [r0, #0]
 8011b92:	f840 3f04 	str.w	r3, [r0, #4]!
 8011b96:	4288      	cmp	r0, r1
 8011b98:	d3f4      	bcc.n	8011b84 <L_shift+0xc>
 8011b9a:	bd70      	pop	{r4, r5, r6, pc}

08011b9c <__match>:
 8011b9c:	b530      	push	{r4, r5, lr}
 8011b9e:	6803      	ldr	r3, [r0, #0]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ba6:	b914      	cbnz	r4, 8011bae <__match+0x12>
 8011ba8:	6003      	str	r3, [r0, #0]
 8011baa:	2001      	movs	r0, #1
 8011bac:	bd30      	pop	{r4, r5, pc}
 8011bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011bb6:	2d19      	cmp	r5, #25
 8011bb8:	bf98      	it	ls
 8011bba:	3220      	addls	r2, #32
 8011bbc:	42a2      	cmp	r2, r4
 8011bbe:	d0f0      	beq.n	8011ba2 <__match+0x6>
 8011bc0:	2000      	movs	r0, #0
 8011bc2:	e7f3      	b.n	8011bac <__match+0x10>

08011bc4 <__hexnan>:
 8011bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bc8:	680b      	ldr	r3, [r1, #0]
 8011bca:	115e      	asrs	r6, r3, #5
 8011bcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011bd0:	f013 031f 	ands.w	r3, r3, #31
 8011bd4:	b087      	sub	sp, #28
 8011bd6:	bf18      	it	ne
 8011bd8:	3604      	addne	r6, #4
 8011bda:	2500      	movs	r5, #0
 8011bdc:	1f37      	subs	r7, r6, #4
 8011bde:	4690      	mov	r8, r2
 8011be0:	6802      	ldr	r2, [r0, #0]
 8011be2:	9301      	str	r3, [sp, #4]
 8011be4:	4682      	mov	sl, r0
 8011be6:	f846 5c04 	str.w	r5, [r6, #-4]
 8011bea:	46b9      	mov	r9, r7
 8011bec:	463c      	mov	r4, r7
 8011bee:	9502      	str	r5, [sp, #8]
 8011bf0:	46ab      	mov	fp, r5
 8011bf2:	7851      	ldrb	r1, [r2, #1]
 8011bf4:	1c53      	adds	r3, r2, #1
 8011bf6:	9303      	str	r3, [sp, #12]
 8011bf8:	b341      	cbz	r1, 8011c4c <__hexnan+0x88>
 8011bfa:	4608      	mov	r0, r1
 8011bfc:	9205      	str	r2, [sp, #20]
 8011bfe:	9104      	str	r1, [sp, #16]
 8011c00:	f7ff fd5f 	bl	80116c2 <__hexdig_fun>
 8011c04:	2800      	cmp	r0, #0
 8011c06:	d14f      	bne.n	8011ca8 <__hexnan+0xe4>
 8011c08:	9904      	ldr	r1, [sp, #16]
 8011c0a:	9a05      	ldr	r2, [sp, #20]
 8011c0c:	2920      	cmp	r1, #32
 8011c0e:	d818      	bhi.n	8011c42 <__hexnan+0x7e>
 8011c10:	9b02      	ldr	r3, [sp, #8]
 8011c12:	459b      	cmp	fp, r3
 8011c14:	dd13      	ble.n	8011c3e <__hexnan+0x7a>
 8011c16:	454c      	cmp	r4, r9
 8011c18:	d206      	bcs.n	8011c28 <__hexnan+0x64>
 8011c1a:	2d07      	cmp	r5, #7
 8011c1c:	dc04      	bgt.n	8011c28 <__hexnan+0x64>
 8011c1e:	462a      	mov	r2, r5
 8011c20:	4649      	mov	r1, r9
 8011c22:	4620      	mov	r0, r4
 8011c24:	f7ff ffa8 	bl	8011b78 <L_shift>
 8011c28:	4544      	cmp	r4, r8
 8011c2a:	d950      	bls.n	8011cce <__hexnan+0x10a>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	f1a4 0904 	sub.w	r9, r4, #4
 8011c32:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c36:	f8cd b008 	str.w	fp, [sp, #8]
 8011c3a:	464c      	mov	r4, r9
 8011c3c:	461d      	mov	r5, r3
 8011c3e:	9a03      	ldr	r2, [sp, #12]
 8011c40:	e7d7      	b.n	8011bf2 <__hexnan+0x2e>
 8011c42:	2929      	cmp	r1, #41	; 0x29
 8011c44:	d156      	bne.n	8011cf4 <__hexnan+0x130>
 8011c46:	3202      	adds	r2, #2
 8011c48:	f8ca 2000 	str.w	r2, [sl]
 8011c4c:	f1bb 0f00 	cmp.w	fp, #0
 8011c50:	d050      	beq.n	8011cf4 <__hexnan+0x130>
 8011c52:	454c      	cmp	r4, r9
 8011c54:	d206      	bcs.n	8011c64 <__hexnan+0xa0>
 8011c56:	2d07      	cmp	r5, #7
 8011c58:	dc04      	bgt.n	8011c64 <__hexnan+0xa0>
 8011c5a:	462a      	mov	r2, r5
 8011c5c:	4649      	mov	r1, r9
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f7ff ff8a 	bl	8011b78 <L_shift>
 8011c64:	4544      	cmp	r4, r8
 8011c66:	d934      	bls.n	8011cd2 <__hexnan+0x10e>
 8011c68:	f1a8 0204 	sub.w	r2, r8, #4
 8011c6c:	4623      	mov	r3, r4
 8011c6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011c72:	f842 1f04 	str.w	r1, [r2, #4]!
 8011c76:	429f      	cmp	r7, r3
 8011c78:	d2f9      	bcs.n	8011c6e <__hexnan+0xaa>
 8011c7a:	1b3b      	subs	r3, r7, r4
 8011c7c:	f023 0303 	bic.w	r3, r3, #3
 8011c80:	3304      	adds	r3, #4
 8011c82:	3401      	adds	r4, #1
 8011c84:	3e03      	subs	r6, #3
 8011c86:	42b4      	cmp	r4, r6
 8011c88:	bf88      	it	hi
 8011c8a:	2304      	movhi	r3, #4
 8011c8c:	4443      	add	r3, r8
 8011c8e:	2200      	movs	r2, #0
 8011c90:	f843 2b04 	str.w	r2, [r3], #4
 8011c94:	429f      	cmp	r7, r3
 8011c96:	d2fb      	bcs.n	8011c90 <__hexnan+0xcc>
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	b91b      	cbnz	r3, 8011ca4 <__hexnan+0xe0>
 8011c9c:	4547      	cmp	r7, r8
 8011c9e:	d127      	bne.n	8011cf0 <__hexnan+0x12c>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	603b      	str	r3, [r7, #0]
 8011ca4:	2005      	movs	r0, #5
 8011ca6:	e026      	b.n	8011cf6 <__hexnan+0x132>
 8011ca8:	3501      	adds	r5, #1
 8011caa:	2d08      	cmp	r5, #8
 8011cac:	f10b 0b01 	add.w	fp, fp, #1
 8011cb0:	dd06      	ble.n	8011cc0 <__hexnan+0xfc>
 8011cb2:	4544      	cmp	r4, r8
 8011cb4:	d9c3      	bls.n	8011c3e <__hexnan+0x7a>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8011cbc:	2501      	movs	r5, #1
 8011cbe:	3c04      	subs	r4, #4
 8011cc0:	6822      	ldr	r2, [r4, #0]
 8011cc2:	f000 000f 	and.w	r0, r0, #15
 8011cc6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011cca:	6022      	str	r2, [r4, #0]
 8011ccc:	e7b7      	b.n	8011c3e <__hexnan+0x7a>
 8011cce:	2508      	movs	r5, #8
 8011cd0:	e7b5      	b.n	8011c3e <__hexnan+0x7a>
 8011cd2:	9b01      	ldr	r3, [sp, #4]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d0df      	beq.n	8011c98 <__hexnan+0xd4>
 8011cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8011cdc:	f1c3 0320 	rsb	r3, r3, #32
 8011ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8011ce4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011ce8:	401a      	ands	r2, r3
 8011cea:	f846 2c04 	str.w	r2, [r6, #-4]
 8011cee:	e7d3      	b.n	8011c98 <__hexnan+0xd4>
 8011cf0:	3f04      	subs	r7, #4
 8011cf2:	e7d1      	b.n	8011c98 <__hexnan+0xd4>
 8011cf4:	2004      	movs	r0, #4
 8011cf6:	b007      	add	sp, #28
 8011cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011cfc <_localeconv_r>:
 8011cfc:	4800      	ldr	r0, [pc, #0]	; (8011d00 <_localeconv_r+0x4>)
 8011cfe:	4770      	bx	lr
 8011d00:	20000174 	.word	0x20000174

08011d04 <__retarget_lock_init_recursive>:
 8011d04:	4770      	bx	lr

08011d06 <__retarget_lock_acquire_recursive>:
 8011d06:	4770      	bx	lr

08011d08 <__retarget_lock_release_recursive>:
 8011d08:	4770      	bx	lr

08011d0a <__swhatbuf_r>:
 8011d0a:	b570      	push	{r4, r5, r6, lr}
 8011d0c:	460e      	mov	r6, r1
 8011d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d12:	2900      	cmp	r1, #0
 8011d14:	b096      	sub	sp, #88	; 0x58
 8011d16:	4614      	mov	r4, r2
 8011d18:	461d      	mov	r5, r3
 8011d1a:	da08      	bge.n	8011d2e <__swhatbuf_r+0x24>
 8011d1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011d20:	2200      	movs	r2, #0
 8011d22:	602a      	str	r2, [r5, #0]
 8011d24:	061a      	lsls	r2, r3, #24
 8011d26:	d410      	bmi.n	8011d4a <__swhatbuf_r+0x40>
 8011d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d2c:	e00e      	b.n	8011d4c <__swhatbuf_r+0x42>
 8011d2e:	466a      	mov	r2, sp
 8011d30:	f001 f8c4 	bl	8012ebc <_fstat_r>
 8011d34:	2800      	cmp	r0, #0
 8011d36:	dbf1      	blt.n	8011d1c <__swhatbuf_r+0x12>
 8011d38:	9a01      	ldr	r2, [sp, #4]
 8011d3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d42:	425a      	negs	r2, r3
 8011d44:	415a      	adcs	r2, r3
 8011d46:	602a      	str	r2, [r5, #0]
 8011d48:	e7ee      	b.n	8011d28 <__swhatbuf_r+0x1e>
 8011d4a:	2340      	movs	r3, #64	; 0x40
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	6023      	str	r3, [r4, #0]
 8011d50:	b016      	add	sp, #88	; 0x58
 8011d52:	bd70      	pop	{r4, r5, r6, pc}

08011d54 <__smakebuf_r>:
 8011d54:	898b      	ldrh	r3, [r1, #12]
 8011d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d58:	079d      	lsls	r5, r3, #30
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	460c      	mov	r4, r1
 8011d5e:	d507      	bpl.n	8011d70 <__smakebuf_r+0x1c>
 8011d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d64:	6023      	str	r3, [r4, #0]
 8011d66:	6123      	str	r3, [r4, #16]
 8011d68:	2301      	movs	r3, #1
 8011d6a:	6163      	str	r3, [r4, #20]
 8011d6c:	b002      	add	sp, #8
 8011d6e:	bd70      	pop	{r4, r5, r6, pc}
 8011d70:	ab01      	add	r3, sp, #4
 8011d72:	466a      	mov	r2, sp
 8011d74:	f7ff ffc9 	bl	8011d0a <__swhatbuf_r>
 8011d78:	9900      	ldr	r1, [sp, #0]
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	f7fc fbdf 	bl	800e540 <_malloc_r>
 8011d82:	b948      	cbnz	r0, 8011d98 <__smakebuf_r+0x44>
 8011d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d88:	059a      	lsls	r2, r3, #22
 8011d8a:	d4ef      	bmi.n	8011d6c <__smakebuf_r+0x18>
 8011d8c:	f023 0303 	bic.w	r3, r3, #3
 8011d90:	f043 0302 	orr.w	r3, r3, #2
 8011d94:	81a3      	strh	r3, [r4, #12]
 8011d96:	e7e3      	b.n	8011d60 <__smakebuf_r+0xc>
 8011d98:	4b0d      	ldr	r3, [pc, #52]	; (8011dd0 <__smakebuf_r+0x7c>)
 8011d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011d9c:	89a3      	ldrh	r3, [r4, #12]
 8011d9e:	6020      	str	r0, [r4, #0]
 8011da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011da4:	81a3      	strh	r3, [r4, #12]
 8011da6:	9b00      	ldr	r3, [sp, #0]
 8011da8:	6163      	str	r3, [r4, #20]
 8011daa:	9b01      	ldr	r3, [sp, #4]
 8011dac:	6120      	str	r0, [r4, #16]
 8011dae:	b15b      	cbz	r3, 8011dc8 <__smakebuf_r+0x74>
 8011db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011db4:	4630      	mov	r0, r6
 8011db6:	f001 f893 	bl	8012ee0 <_isatty_r>
 8011dba:	b128      	cbz	r0, 8011dc8 <__smakebuf_r+0x74>
 8011dbc:	89a3      	ldrh	r3, [r4, #12]
 8011dbe:	f023 0303 	bic.w	r3, r3, #3
 8011dc2:	f043 0301 	orr.w	r3, r3, #1
 8011dc6:	81a3      	strh	r3, [r4, #12]
 8011dc8:	89a0      	ldrh	r0, [r4, #12]
 8011dca:	4305      	orrs	r5, r0
 8011dcc:	81a5      	strh	r5, [r4, #12]
 8011dce:	e7cd      	b.n	8011d6c <__smakebuf_r+0x18>
 8011dd0:	08011459 	.word	0x08011459

08011dd4 <__ascii_mbtowc>:
 8011dd4:	b082      	sub	sp, #8
 8011dd6:	b901      	cbnz	r1, 8011dda <__ascii_mbtowc+0x6>
 8011dd8:	a901      	add	r1, sp, #4
 8011dda:	b142      	cbz	r2, 8011dee <__ascii_mbtowc+0x1a>
 8011ddc:	b14b      	cbz	r3, 8011df2 <__ascii_mbtowc+0x1e>
 8011dde:	7813      	ldrb	r3, [r2, #0]
 8011de0:	600b      	str	r3, [r1, #0]
 8011de2:	7812      	ldrb	r2, [r2, #0]
 8011de4:	1e10      	subs	r0, r2, #0
 8011de6:	bf18      	it	ne
 8011de8:	2001      	movne	r0, #1
 8011dea:	b002      	add	sp, #8
 8011dec:	4770      	bx	lr
 8011dee:	4610      	mov	r0, r2
 8011df0:	e7fb      	b.n	8011dea <__ascii_mbtowc+0x16>
 8011df2:	f06f 0001 	mvn.w	r0, #1
 8011df6:	e7f8      	b.n	8011dea <__ascii_mbtowc+0x16>

08011df8 <__malloc_lock>:
 8011df8:	4801      	ldr	r0, [pc, #4]	; (8011e00 <__malloc_lock+0x8>)
 8011dfa:	f7ff bf84 	b.w	8011d06 <__retarget_lock_acquire_recursive>
 8011dfe:	bf00      	nop
 8011e00:	20001728 	.word	0x20001728

08011e04 <__malloc_unlock>:
 8011e04:	4801      	ldr	r0, [pc, #4]	; (8011e0c <__malloc_unlock+0x8>)
 8011e06:	f7ff bf7f 	b.w	8011d08 <__retarget_lock_release_recursive>
 8011e0a:	bf00      	nop
 8011e0c:	20001728 	.word	0x20001728

08011e10 <_Balloc>:
 8011e10:	b570      	push	{r4, r5, r6, lr}
 8011e12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011e14:	4604      	mov	r4, r0
 8011e16:	460d      	mov	r5, r1
 8011e18:	b976      	cbnz	r6, 8011e38 <_Balloc+0x28>
 8011e1a:	2010      	movs	r0, #16
 8011e1c:	f7fc faee 	bl	800e3fc <malloc>
 8011e20:	4602      	mov	r2, r0
 8011e22:	6260      	str	r0, [r4, #36]	; 0x24
 8011e24:	b920      	cbnz	r0, 8011e30 <_Balloc+0x20>
 8011e26:	4b18      	ldr	r3, [pc, #96]	; (8011e88 <_Balloc+0x78>)
 8011e28:	4818      	ldr	r0, [pc, #96]	; (8011e8c <_Balloc+0x7c>)
 8011e2a:	2166      	movs	r1, #102	; 0x66
 8011e2c:	f7fe fb96 	bl	801055c <__assert_func>
 8011e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e34:	6006      	str	r6, [r0, #0]
 8011e36:	60c6      	str	r6, [r0, #12]
 8011e38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011e3a:	68f3      	ldr	r3, [r6, #12]
 8011e3c:	b183      	cbz	r3, 8011e60 <_Balloc+0x50>
 8011e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011e46:	b9b8      	cbnz	r0, 8011e78 <_Balloc+0x68>
 8011e48:	2101      	movs	r1, #1
 8011e4a:	fa01 f605 	lsl.w	r6, r1, r5
 8011e4e:	1d72      	adds	r2, r6, #5
 8011e50:	0092      	lsls	r2, r2, #2
 8011e52:	4620      	mov	r0, r4
 8011e54:	f000 fc9d 	bl	8012792 <_calloc_r>
 8011e58:	b160      	cbz	r0, 8011e74 <_Balloc+0x64>
 8011e5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011e5e:	e00e      	b.n	8011e7e <_Balloc+0x6e>
 8011e60:	2221      	movs	r2, #33	; 0x21
 8011e62:	2104      	movs	r1, #4
 8011e64:	4620      	mov	r0, r4
 8011e66:	f000 fc94 	bl	8012792 <_calloc_r>
 8011e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e6c:	60f0      	str	r0, [r6, #12]
 8011e6e:	68db      	ldr	r3, [r3, #12]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d1e4      	bne.n	8011e3e <_Balloc+0x2e>
 8011e74:	2000      	movs	r0, #0
 8011e76:	bd70      	pop	{r4, r5, r6, pc}
 8011e78:	6802      	ldr	r2, [r0, #0]
 8011e7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011e7e:	2300      	movs	r3, #0
 8011e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011e84:	e7f7      	b.n	8011e76 <_Balloc+0x66>
 8011e86:	bf00      	nop
 8011e88:	08013f50 	.word	0x08013f50
 8011e8c:	08014258 	.word	0x08014258

08011e90 <_Bfree>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011e94:	4605      	mov	r5, r0
 8011e96:	460c      	mov	r4, r1
 8011e98:	b976      	cbnz	r6, 8011eb8 <_Bfree+0x28>
 8011e9a:	2010      	movs	r0, #16
 8011e9c:	f7fc faae 	bl	800e3fc <malloc>
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	6268      	str	r0, [r5, #36]	; 0x24
 8011ea4:	b920      	cbnz	r0, 8011eb0 <_Bfree+0x20>
 8011ea6:	4b09      	ldr	r3, [pc, #36]	; (8011ecc <_Bfree+0x3c>)
 8011ea8:	4809      	ldr	r0, [pc, #36]	; (8011ed0 <_Bfree+0x40>)
 8011eaa:	218a      	movs	r1, #138	; 0x8a
 8011eac:	f7fe fb56 	bl	801055c <__assert_func>
 8011eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011eb4:	6006      	str	r6, [r0, #0]
 8011eb6:	60c6      	str	r6, [r0, #12]
 8011eb8:	b13c      	cbz	r4, 8011eca <_Bfree+0x3a>
 8011eba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011ebc:	6862      	ldr	r2, [r4, #4]
 8011ebe:	68db      	ldr	r3, [r3, #12]
 8011ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ec4:	6021      	str	r1, [r4, #0]
 8011ec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011eca:	bd70      	pop	{r4, r5, r6, pc}
 8011ecc:	08013f50 	.word	0x08013f50
 8011ed0:	08014258 	.word	0x08014258

08011ed4 <__multadd>:
 8011ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed8:	690d      	ldr	r5, [r1, #16]
 8011eda:	4607      	mov	r7, r0
 8011edc:	460c      	mov	r4, r1
 8011ede:	461e      	mov	r6, r3
 8011ee0:	f101 0c14 	add.w	ip, r1, #20
 8011ee4:	2000      	movs	r0, #0
 8011ee6:	f8dc 3000 	ldr.w	r3, [ip]
 8011eea:	b299      	uxth	r1, r3
 8011eec:	fb02 6101 	mla	r1, r2, r1, r6
 8011ef0:	0c1e      	lsrs	r6, r3, #16
 8011ef2:	0c0b      	lsrs	r3, r1, #16
 8011ef4:	fb02 3306 	mla	r3, r2, r6, r3
 8011ef8:	b289      	uxth	r1, r1
 8011efa:	3001      	adds	r0, #1
 8011efc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011f00:	4285      	cmp	r5, r0
 8011f02:	f84c 1b04 	str.w	r1, [ip], #4
 8011f06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011f0a:	dcec      	bgt.n	8011ee6 <__multadd+0x12>
 8011f0c:	b30e      	cbz	r6, 8011f52 <__multadd+0x7e>
 8011f0e:	68a3      	ldr	r3, [r4, #8]
 8011f10:	42ab      	cmp	r3, r5
 8011f12:	dc19      	bgt.n	8011f48 <__multadd+0x74>
 8011f14:	6861      	ldr	r1, [r4, #4]
 8011f16:	4638      	mov	r0, r7
 8011f18:	3101      	adds	r1, #1
 8011f1a:	f7ff ff79 	bl	8011e10 <_Balloc>
 8011f1e:	4680      	mov	r8, r0
 8011f20:	b928      	cbnz	r0, 8011f2e <__multadd+0x5a>
 8011f22:	4602      	mov	r2, r0
 8011f24:	4b0c      	ldr	r3, [pc, #48]	; (8011f58 <__multadd+0x84>)
 8011f26:	480d      	ldr	r0, [pc, #52]	; (8011f5c <__multadd+0x88>)
 8011f28:	21b5      	movs	r1, #181	; 0xb5
 8011f2a:	f7fe fb17 	bl	801055c <__assert_func>
 8011f2e:	6922      	ldr	r2, [r4, #16]
 8011f30:	3202      	adds	r2, #2
 8011f32:	f104 010c 	add.w	r1, r4, #12
 8011f36:	0092      	lsls	r2, r2, #2
 8011f38:	300c      	adds	r0, #12
 8011f3a:	f7fc fa7f 	bl	800e43c <memcpy>
 8011f3e:	4621      	mov	r1, r4
 8011f40:	4638      	mov	r0, r7
 8011f42:	f7ff ffa5 	bl	8011e90 <_Bfree>
 8011f46:	4644      	mov	r4, r8
 8011f48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011f4c:	3501      	adds	r5, #1
 8011f4e:	615e      	str	r6, [r3, #20]
 8011f50:	6125      	str	r5, [r4, #16]
 8011f52:	4620      	mov	r0, r4
 8011f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f58:	08014169 	.word	0x08014169
 8011f5c:	08014258 	.word	0x08014258

08011f60 <__s2b>:
 8011f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f64:	460c      	mov	r4, r1
 8011f66:	4615      	mov	r5, r2
 8011f68:	461f      	mov	r7, r3
 8011f6a:	2209      	movs	r2, #9
 8011f6c:	3308      	adds	r3, #8
 8011f6e:	4606      	mov	r6, r0
 8011f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f74:	2100      	movs	r1, #0
 8011f76:	2201      	movs	r2, #1
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	db09      	blt.n	8011f90 <__s2b+0x30>
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	f7ff ff47 	bl	8011e10 <_Balloc>
 8011f82:	b940      	cbnz	r0, 8011f96 <__s2b+0x36>
 8011f84:	4602      	mov	r2, r0
 8011f86:	4b19      	ldr	r3, [pc, #100]	; (8011fec <__s2b+0x8c>)
 8011f88:	4819      	ldr	r0, [pc, #100]	; (8011ff0 <__s2b+0x90>)
 8011f8a:	21ce      	movs	r1, #206	; 0xce
 8011f8c:	f7fe fae6 	bl	801055c <__assert_func>
 8011f90:	0052      	lsls	r2, r2, #1
 8011f92:	3101      	adds	r1, #1
 8011f94:	e7f0      	b.n	8011f78 <__s2b+0x18>
 8011f96:	9b08      	ldr	r3, [sp, #32]
 8011f98:	6143      	str	r3, [r0, #20]
 8011f9a:	2d09      	cmp	r5, #9
 8011f9c:	f04f 0301 	mov.w	r3, #1
 8011fa0:	6103      	str	r3, [r0, #16]
 8011fa2:	dd16      	ble.n	8011fd2 <__s2b+0x72>
 8011fa4:	f104 0909 	add.w	r9, r4, #9
 8011fa8:	46c8      	mov	r8, r9
 8011faa:	442c      	add	r4, r5
 8011fac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011fb0:	4601      	mov	r1, r0
 8011fb2:	3b30      	subs	r3, #48	; 0x30
 8011fb4:	220a      	movs	r2, #10
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f7ff ff8c 	bl	8011ed4 <__multadd>
 8011fbc:	45a0      	cmp	r8, r4
 8011fbe:	d1f5      	bne.n	8011fac <__s2b+0x4c>
 8011fc0:	f1a5 0408 	sub.w	r4, r5, #8
 8011fc4:	444c      	add	r4, r9
 8011fc6:	1b2d      	subs	r5, r5, r4
 8011fc8:	1963      	adds	r3, r4, r5
 8011fca:	42bb      	cmp	r3, r7
 8011fcc:	db04      	blt.n	8011fd8 <__s2b+0x78>
 8011fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fd2:	340a      	adds	r4, #10
 8011fd4:	2509      	movs	r5, #9
 8011fd6:	e7f6      	b.n	8011fc6 <__s2b+0x66>
 8011fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011fdc:	4601      	mov	r1, r0
 8011fde:	3b30      	subs	r3, #48	; 0x30
 8011fe0:	220a      	movs	r2, #10
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	f7ff ff76 	bl	8011ed4 <__multadd>
 8011fe8:	e7ee      	b.n	8011fc8 <__s2b+0x68>
 8011fea:	bf00      	nop
 8011fec:	08014169 	.word	0x08014169
 8011ff0:	08014258 	.word	0x08014258

08011ff4 <__hi0bits>:
 8011ff4:	0c03      	lsrs	r3, r0, #16
 8011ff6:	041b      	lsls	r3, r3, #16
 8011ff8:	b9d3      	cbnz	r3, 8012030 <__hi0bits+0x3c>
 8011ffa:	0400      	lsls	r0, r0, #16
 8011ffc:	2310      	movs	r3, #16
 8011ffe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012002:	bf04      	itt	eq
 8012004:	0200      	lsleq	r0, r0, #8
 8012006:	3308      	addeq	r3, #8
 8012008:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801200c:	bf04      	itt	eq
 801200e:	0100      	lsleq	r0, r0, #4
 8012010:	3304      	addeq	r3, #4
 8012012:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012016:	bf04      	itt	eq
 8012018:	0080      	lsleq	r0, r0, #2
 801201a:	3302      	addeq	r3, #2
 801201c:	2800      	cmp	r0, #0
 801201e:	db05      	blt.n	801202c <__hi0bits+0x38>
 8012020:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012024:	f103 0301 	add.w	r3, r3, #1
 8012028:	bf08      	it	eq
 801202a:	2320      	moveq	r3, #32
 801202c:	4618      	mov	r0, r3
 801202e:	4770      	bx	lr
 8012030:	2300      	movs	r3, #0
 8012032:	e7e4      	b.n	8011ffe <__hi0bits+0xa>

08012034 <__lo0bits>:
 8012034:	6803      	ldr	r3, [r0, #0]
 8012036:	f013 0207 	ands.w	r2, r3, #7
 801203a:	4601      	mov	r1, r0
 801203c:	d00b      	beq.n	8012056 <__lo0bits+0x22>
 801203e:	07da      	lsls	r2, r3, #31
 8012040:	d423      	bmi.n	801208a <__lo0bits+0x56>
 8012042:	0798      	lsls	r0, r3, #30
 8012044:	bf49      	itett	mi
 8012046:	085b      	lsrmi	r3, r3, #1
 8012048:	089b      	lsrpl	r3, r3, #2
 801204a:	2001      	movmi	r0, #1
 801204c:	600b      	strmi	r3, [r1, #0]
 801204e:	bf5c      	itt	pl
 8012050:	600b      	strpl	r3, [r1, #0]
 8012052:	2002      	movpl	r0, #2
 8012054:	4770      	bx	lr
 8012056:	b298      	uxth	r0, r3
 8012058:	b9a8      	cbnz	r0, 8012086 <__lo0bits+0x52>
 801205a:	0c1b      	lsrs	r3, r3, #16
 801205c:	2010      	movs	r0, #16
 801205e:	b2da      	uxtb	r2, r3
 8012060:	b90a      	cbnz	r2, 8012066 <__lo0bits+0x32>
 8012062:	3008      	adds	r0, #8
 8012064:	0a1b      	lsrs	r3, r3, #8
 8012066:	071a      	lsls	r2, r3, #28
 8012068:	bf04      	itt	eq
 801206a:	091b      	lsreq	r3, r3, #4
 801206c:	3004      	addeq	r0, #4
 801206e:	079a      	lsls	r2, r3, #30
 8012070:	bf04      	itt	eq
 8012072:	089b      	lsreq	r3, r3, #2
 8012074:	3002      	addeq	r0, #2
 8012076:	07da      	lsls	r2, r3, #31
 8012078:	d403      	bmi.n	8012082 <__lo0bits+0x4e>
 801207a:	085b      	lsrs	r3, r3, #1
 801207c:	f100 0001 	add.w	r0, r0, #1
 8012080:	d005      	beq.n	801208e <__lo0bits+0x5a>
 8012082:	600b      	str	r3, [r1, #0]
 8012084:	4770      	bx	lr
 8012086:	4610      	mov	r0, r2
 8012088:	e7e9      	b.n	801205e <__lo0bits+0x2a>
 801208a:	2000      	movs	r0, #0
 801208c:	4770      	bx	lr
 801208e:	2020      	movs	r0, #32
 8012090:	4770      	bx	lr
	...

08012094 <__i2b>:
 8012094:	b510      	push	{r4, lr}
 8012096:	460c      	mov	r4, r1
 8012098:	2101      	movs	r1, #1
 801209a:	f7ff feb9 	bl	8011e10 <_Balloc>
 801209e:	4602      	mov	r2, r0
 80120a0:	b928      	cbnz	r0, 80120ae <__i2b+0x1a>
 80120a2:	4b05      	ldr	r3, [pc, #20]	; (80120b8 <__i2b+0x24>)
 80120a4:	4805      	ldr	r0, [pc, #20]	; (80120bc <__i2b+0x28>)
 80120a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80120aa:	f7fe fa57 	bl	801055c <__assert_func>
 80120ae:	2301      	movs	r3, #1
 80120b0:	6144      	str	r4, [r0, #20]
 80120b2:	6103      	str	r3, [r0, #16]
 80120b4:	bd10      	pop	{r4, pc}
 80120b6:	bf00      	nop
 80120b8:	08014169 	.word	0x08014169
 80120bc:	08014258 	.word	0x08014258

080120c0 <__multiply>:
 80120c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c4:	4691      	mov	r9, r2
 80120c6:	690a      	ldr	r2, [r1, #16]
 80120c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	bfb8      	it	lt
 80120d0:	460b      	movlt	r3, r1
 80120d2:	460c      	mov	r4, r1
 80120d4:	bfbc      	itt	lt
 80120d6:	464c      	movlt	r4, r9
 80120d8:	4699      	movlt	r9, r3
 80120da:	6927      	ldr	r7, [r4, #16]
 80120dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80120e0:	68a3      	ldr	r3, [r4, #8]
 80120e2:	6861      	ldr	r1, [r4, #4]
 80120e4:	eb07 060a 	add.w	r6, r7, sl
 80120e8:	42b3      	cmp	r3, r6
 80120ea:	b085      	sub	sp, #20
 80120ec:	bfb8      	it	lt
 80120ee:	3101      	addlt	r1, #1
 80120f0:	f7ff fe8e 	bl	8011e10 <_Balloc>
 80120f4:	b930      	cbnz	r0, 8012104 <__multiply+0x44>
 80120f6:	4602      	mov	r2, r0
 80120f8:	4b44      	ldr	r3, [pc, #272]	; (801220c <__multiply+0x14c>)
 80120fa:	4845      	ldr	r0, [pc, #276]	; (8012210 <__multiply+0x150>)
 80120fc:	f240 115d 	movw	r1, #349	; 0x15d
 8012100:	f7fe fa2c 	bl	801055c <__assert_func>
 8012104:	f100 0514 	add.w	r5, r0, #20
 8012108:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801210c:	462b      	mov	r3, r5
 801210e:	2200      	movs	r2, #0
 8012110:	4543      	cmp	r3, r8
 8012112:	d321      	bcc.n	8012158 <__multiply+0x98>
 8012114:	f104 0314 	add.w	r3, r4, #20
 8012118:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801211c:	f109 0314 	add.w	r3, r9, #20
 8012120:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012124:	9202      	str	r2, [sp, #8]
 8012126:	1b3a      	subs	r2, r7, r4
 8012128:	3a15      	subs	r2, #21
 801212a:	f022 0203 	bic.w	r2, r2, #3
 801212e:	3204      	adds	r2, #4
 8012130:	f104 0115 	add.w	r1, r4, #21
 8012134:	428f      	cmp	r7, r1
 8012136:	bf38      	it	cc
 8012138:	2204      	movcc	r2, #4
 801213a:	9201      	str	r2, [sp, #4]
 801213c:	9a02      	ldr	r2, [sp, #8]
 801213e:	9303      	str	r3, [sp, #12]
 8012140:	429a      	cmp	r2, r3
 8012142:	d80c      	bhi.n	801215e <__multiply+0x9e>
 8012144:	2e00      	cmp	r6, #0
 8012146:	dd03      	ble.n	8012150 <__multiply+0x90>
 8012148:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801214c:	2b00      	cmp	r3, #0
 801214e:	d05a      	beq.n	8012206 <__multiply+0x146>
 8012150:	6106      	str	r6, [r0, #16]
 8012152:	b005      	add	sp, #20
 8012154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012158:	f843 2b04 	str.w	r2, [r3], #4
 801215c:	e7d8      	b.n	8012110 <__multiply+0x50>
 801215e:	f8b3 a000 	ldrh.w	sl, [r3]
 8012162:	f1ba 0f00 	cmp.w	sl, #0
 8012166:	d024      	beq.n	80121b2 <__multiply+0xf2>
 8012168:	f104 0e14 	add.w	lr, r4, #20
 801216c:	46a9      	mov	r9, r5
 801216e:	f04f 0c00 	mov.w	ip, #0
 8012172:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012176:	f8d9 1000 	ldr.w	r1, [r9]
 801217a:	fa1f fb82 	uxth.w	fp, r2
 801217e:	b289      	uxth	r1, r1
 8012180:	fb0a 110b 	mla	r1, sl, fp, r1
 8012184:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012188:	f8d9 2000 	ldr.w	r2, [r9]
 801218c:	4461      	add	r1, ip
 801218e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012192:	fb0a c20b 	mla	r2, sl, fp, ip
 8012196:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801219a:	b289      	uxth	r1, r1
 801219c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80121a0:	4577      	cmp	r7, lr
 80121a2:	f849 1b04 	str.w	r1, [r9], #4
 80121a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80121aa:	d8e2      	bhi.n	8012172 <__multiply+0xb2>
 80121ac:	9a01      	ldr	r2, [sp, #4]
 80121ae:	f845 c002 	str.w	ip, [r5, r2]
 80121b2:	9a03      	ldr	r2, [sp, #12]
 80121b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80121b8:	3304      	adds	r3, #4
 80121ba:	f1b9 0f00 	cmp.w	r9, #0
 80121be:	d020      	beq.n	8012202 <__multiply+0x142>
 80121c0:	6829      	ldr	r1, [r5, #0]
 80121c2:	f104 0c14 	add.w	ip, r4, #20
 80121c6:	46ae      	mov	lr, r5
 80121c8:	f04f 0a00 	mov.w	sl, #0
 80121cc:	f8bc b000 	ldrh.w	fp, [ip]
 80121d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80121d4:	fb09 220b 	mla	r2, r9, fp, r2
 80121d8:	4492      	add	sl, r2
 80121da:	b289      	uxth	r1, r1
 80121dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80121e0:	f84e 1b04 	str.w	r1, [lr], #4
 80121e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80121e8:	f8be 1000 	ldrh.w	r1, [lr]
 80121ec:	0c12      	lsrs	r2, r2, #16
 80121ee:	fb09 1102 	mla	r1, r9, r2, r1
 80121f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80121f6:	4567      	cmp	r7, ip
 80121f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80121fc:	d8e6      	bhi.n	80121cc <__multiply+0x10c>
 80121fe:	9a01      	ldr	r2, [sp, #4]
 8012200:	50a9      	str	r1, [r5, r2]
 8012202:	3504      	adds	r5, #4
 8012204:	e79a      	b.n	801213c <__multiply+0x7c>
 8012206:	3e01      	subs	r6, #1
 8012208:	e79c      	b.n	8012144 <__multiply+0x84>
 801220a:	bf00      	nop
 801220c:	08014169 	.word	0x08014169
 8012210:	08014258 	.word	0x08014258

08012214 <__pow5mult>:
 8012214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012218:	4615      	mov	r5, r2
 801221a:	f012 0203 	ands.w	r2, r2, #3
 801221e:	4606      	mov	r6, r0
 8012220:	460f      	mov	r7, r1
 8012222:	d007      	beq.n	8012234 <__pow5mult+0x20>
 8012224:	4c25      	ldr	r4, [pc, #148]	; (80122bc <__pow5mult+0xa8>)
 8012226:	3a01      	subs	r2, #1
 8012228:	2300      	movs	r3, #0
 801222a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801222e:	f7ff fe51 	bl	8011ed4 <__multadd>
 8012232:	4607      	mov	r7, r0
 8012234:	10ad      	asrs	r5, r5, #2
 8012236:	d03d      	beq.n	80122b4 <__pow5mult+0xa0>
 8012238:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801223a:	b97c      	cbnz	r4, 801225c <__pow5mult+0x48>
 801223c:	2010      	movs	r0, #16
 801223e:	f7fc f8dd 	bl	800e3fc <malloc>
 8012242:	4602      	mov	r2, r0
 8012244:	6270      	str	r0, [r6, #36]	; 0x24
 8012246:	b928      	cbnz	r0, 8012254 <__pow5mult+0x40>
 8012248:	4b1d      	ldr	r3, [pc, #116]	; (80122c0 <__pow5mult+0xac>)
 801224a:	481e      	ldr	r0, [pc, #120]	; (80122c4 <__pow5mult+0xb0>)
 801224c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012250:	f7fe f984 	bl	801055c <__assert_func>
 8012254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012258:	6004      	str	r4, [r0, #0]
 801225a:	60c4      	str	r4, [r0, #12]
 801225c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012264:	b94c      	cbnz	r4, 801227a <__pow5mult+0x66>
 8012266:	f240 2171 	movw	r1, #625	; 0x271
 801226a:	4630      	mov	r0, r6
 801226c:	f7ff ff12 	bl	8012094 <__i2b>
 8012270:	2300      	movs	r3, #0
 8012272:	f8c8 0008 	str.w	r0, [r8, #8]
 8012276:	4604      	mov	r4, r0
 8012278:	6003      	str	r3, [r0, #0]
 801227a:	f04f 0900 	mov.w	r9, #0
 801227e:	07eb      	lsls	r3, r5, #31
 8012280:	d50a      	bpl.n	8012298 <__pow5mult+0x84>
 8012282:	4639      	mov	r1, r7
 8012284:	4622      	mov	r2, r4
 8012286:	4630      	mov	r0, r6
 8012288:	f7ff ff1a 	bl	80120c0 <__multiply>
 801228c:	4639      	mov	r1, r7
 801228e:	4680      	mov	r8, r0
 8012290:	4630      	mov	r0, r6
 8012292:	f7ff fdfd 	bl	8011e90 <_Bfree>
 8012296:	4647      	mov	r7, r8
 8012298:	106d      	asrs	r5, r5, #1
 801229a:	d00b      	beq.n	80122b4 <__pow5mult+0xa0>
 801229c:	6820      	ldr	r0, [r4, #0]
 801229e:	b938      	cbnz	r0, 80122b0 <__pow5mult+0x9c>
 80122a0:	4622      	mov	r2, r4
 80122a2:	4621      	mov	r1, r4
 80122a4:	4630      	mov	r0, r6
 80122a6:	f7ff ff0b 	bl	80120c0 <__multiply>
 80122aa:	6020      	str	r0, [r4, #0]
 80122ac:	f8c0 9000 	str.w	r9, [r0]
 80122b0:	4604      	mov	r4, r0
 80122b2:	e7e4      	b.n	801227e <__pow5mult+0x6a>
 80122b4:	4638      	mov	r0, r7
 80122b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122ba:	bf00      	nop
 80122bc:	080143a8 	.word	0x080143a8
 80122c0:	08013f50 	.word	0x08013f50
 80122c4:	08014258 	.word	0x08014258

080122c8 <__lshift>:
 80122c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122cc:	460c      	mov	r4, r1
 80122ce:	6849      	ldr	r1, [r1, #4]
 80122d0:	6923      	ldr	r3, [r4, #16]
 80122d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80122d6:	68a3      	ldr	r3, [r4, #8]
 80122d8:	4607      	mov	r7, r0
 80122da:	4691      	mov	r9, r2
 80122dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80122e0:	f108 0601 	add.w	r6, r8, #1
 80122e4:	42b3      	cmp	r3, r6
 80122e6:	db0b      	blt.n	8012300 <__lshift+0x38>
 80122e8:	4638      	mov	r0, r7
 80122ea:	f7ff fd91 	bl	8011e10 <_Balloc>
 80122ee:	4605      	mov	r5, r0
 80122f0:	b948      	cbnz	r0, 8012306 <__lshift+0x3e>
 80122f2:	4602      	mov	r2, r0
 80122f4:	4b2a      	ldr	r3, [pc, #168]	; (80123a0 <__lshift+0xd8>)
 80122f6:	482b      	ldr	r0, [pc, #172]	; (80123a4 <__lshift+0xdc>)
 80122f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80122fc:	f7fe f92e 	bl	801055c <__assert_func>
 8012300:	3101      	adds	r1, #1
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	e7ee      	b.n	80122e4 <__lshift+0x1c>
 8012306:	2300      	movs	r3, #0
 8012308:	f100 0114 	add.w	r1, r0, #20
 801230c:	f100 0210 	add.w	r2, r0, #16
 8012310:	4618      	mov	r0, r3
 8012312:	4553      	cmp	r3, sl
 8012314:	db37      	blt.n	8012386 <__lshift+0xbe>
 8012316:	6920      	ldr	r0, [r4, #16]
 8012318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801231c:	f104 0314 	add.w	r3, r4, #20
 8012320:	f019 091f 	ands.w	r9, r9, #31
 8012324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012328:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801232c:	d02f      	beq.n	801238e <__lshift+0xc6>
 801232e:	f1c9 0e20 	rsb	lr, r9, #32
 8012332:	468a      	mov	sl, r1
 8012334:	f04f 0c00 	mov.w	ip, #0
 8012338:	681a      	ldr	r2, [r3, #0]
 801233a:	fa02 f209 	lsl.w	r2, r2, r9
 801233e:	ea42 020c 	orr.w	r2, r2, ip
 8012342:	f84a 2b04 	str.w	r2, [sl], #4
 8012346:	f853 2b04 	ldr.w	r2, [r3], #4
 801234a:	4298      	cmp	r0, r3
 801234c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012350:	d8f2      	bhi.n	8012338 <__lshift+0x70>
 8012352:	1b03      	subs	r3, r0, r4
 8012354:	3b15      	subs	r3, #21
 8012356:	f023 0303 	bic.w	r3, r3, #3
 801235a:	3304      	adds	r3, #4
 801235c:	f104 0215 	add.w	r2, r4, #21
 8012360:	4290      	cmp	r0, r2
 8012362:	bf38      	it	cc
 8012364:	2304      	movcc	r3, #4
 8012366:	f841 c003 	str.w	ip, [r1, r3]
 801236a:	f1bc 0f00 	cmp.w	ip, #0
 801236e:	d001      	beq.n	8012374 <__lshift+0xac>
 8012370:	f108 0602 	add.w	r6, r8, #2
 8012374:	3e01      	subs	r6, #1
 8012376:	4638      	mov	r0, r7
 8012378:	612e      	str	r6, [r5, #16]
 801237a:	4621      	mov	r1, r4
 801237c:	f7ff fd88 	bl	8011e90 <_Bfree>
 8012380:	4628      	mov	r0, r5
 8012382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012386:	f842 0f04 	str.w	r0, [r2, #4]!
 801238a:	3301      	adds	r3, #1
 801238c:	e7c1      	b.n	8012312 <__lshift+0x4a>
 801238e:	3904      	subs	r1, #4
 8012390:	f853 2b04 	ldr.w	r2, [r3], #4
 8012394:	f841 2f04 	str.w	r2, [r1, #4]!
 8012398:	4298      	cmp	r0, r3
 801239a:	d8f9      	bhi.n	8012390 <__lshift+0xc8>
 801239c:	e7ea      	b.n	8012374 <__lshift+0xac>
 801239e:	bf00      	nop
 80123a0:	08014169 	.word	0x08014169
 80123a4:	08014258 	.word	0x08014258

080123a8 <__mcmp>:
 80123a8:	b530      	push	{r4, r5, lr}
 80123aa:	6902      	ldr	r2, [r0, #16]
 80123ac:	690c      	ldr	r4, [r1, #16]
 80123ae:	1b12      	subs	r2, r2, r4
 80123b0:	d10e      	bne.n	80123d0 <__mcmp+0x28>
 80123b2:	f100 0314 	add.w	r3, r0, #20
 80123b6:	3114      	adds	r1, #20
 80123b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80123bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80123c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80123c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80123c8:	42a5      	cmp	r5, r4
 80123ca:	d003      	beq.n	80123d4 <__mcmp+0x2c>
 80123cc:	d305      	bcc.n	80123da <__mcmp+0x32>
 80123ce:	2201      	movs	r2, #1
 80123d0:	4610      	mov	r0, r2
 80123d2:	bd30      	pop	{r4, r5, pc}
 80123d4:	4283      	cmp	r3, r0
 80123d6:	d3f3      	bcc.n	80123c0 <__mcmp+0x18>
 80123d8:	e7fa      	b.n	80123d0 <__mcmp+0x28>
 80123da:	f04f 32ff 	mov.w	r2, #4294967295
 80123de:	e7f7      	b.n	80123d0 <__mcmp+0x28>

080123e0 <__mdiff>:
 80123e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123e4:	460c      	mov	r4, r1
 80123e6:	4606      	mov	r6, r0
 80123e8:	4611      	mov	r1, r2
 80123ea:	4620      	mov	r0, r4
 80123ec:	4690      	mov	r8, r2
 80123ee:	f7ff ffdb 	bl	80123a8 <__mcmp>
 80123f2:	1e05      	subs	r5, r0, #0
 80123f4:	d110      	bne.n	8012418 <__mdiff+0x38>
 80123f6:	4629      	mov	r1, r5
 80123f8:	4630      	mov	r0, r6
 80123fa:	f7ff fd09 	bl	8011e10 <_Balloc>
 80123fe:	b930      	cbnz	r0, 801240e <__mdiff+0x2e>
 8012400:	4b3a      	ldr	r3, [pc, #232]	; (80124ec <__mdiff+0x10c>)
 8012402:	4602      	mov	r2, r0
 8012404:	f240 2132 	movw	r1, #562	; 0x232
 8012408:	4839      	ldr	r0, [pc, #228]	; (80124f0 <__mdiff+0x110>)
 801240a:	f7fe f8a7 	bl	801055c <__assert_func>
 801240e:	2301      	movs	r3, #1
 8012410:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012418:	bfa4      	itt	ge
 801241a:	4643      	movge	r3, r8
 801241c:	46a0      	movge	r8, r4
 801241e:	4630      	mov	r0, r6
 8012420:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012424:	bfa6      	itte	ge
 8012426:	461c      	movge	r4, r3
 8012428:	2500      	movge	r5, #0
 801242a:	2501      	movlt	r5, #1
 801242c:	f7ff fcf0 	bl	8011e10 <_Balloc>
 8012430:	b920      	cbnz	r0, 801243c <__mdiff+0x5c>
 8012432:	4b2e      	ldr	r3, [pc, #184]	; (80124ec <__mdiff+0x10c>)
 8012434:	4602      	mov	r2, r0
 8012436:	f44f 7110 	mov.w	r1, #576	; 0x240
 801243a:	e7e5      	b.n	8012408 <__mdiff+0x28>
 801243c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012440:	6926      	ldr	r6, [r4, #16]
 8012442:	60c5      	str	r5, [r0, #12]
 8012444:	f104 0914 	add.w	r9, r4, #20
 8012448:	f108 0514 	add.w	r5, r8, #20
 801244c:	f100 0e14 	add.w	lr, r0, #20
 8012450:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012454:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012458:	f108 0210 	add.w	r2, r8, #16
 801245c:	46f2      	mov	sl, lr
 801245e:	2100      	movs	r1, #0
 8012460:	f859 3b04 	ldr.w	r3, [r9], #4
 8012464:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012468:	fa1f f883 	uxth.w	r8, r3
 801246c:	fa11 f18b 	uxtah	r1, r1, fp
 8012470:	0c1b      	lsrs	r3, r3, #16
 8012472:	eba1 0808 	sub.w	r8, r1, r8
 8012476:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801247a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801247e:	fa1f f888 	uxth.w	r8, r8
 8012482:	1419      	asrs	r1, r3, #16
 8012484:	454e      	cmp	r6, r9
 8012486:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801248a:	f84a 3b04 	str.w	r3, [sl], #4
 801248e:	d8e7      	bhi.n	8012460 <__mdiff+0x80>
 8012490:	1b33      	subs	r3, r6, r4
 8012492:	3b15      	subs	r3, #21
 8012494:	f023 0303 	bic.w	r3, r3, #3
 8012498:	3304      	adds	r3, #4
 801249a:	3415      	adds	r4, #21
 801249c:	42a6      	cmp	r6, r4
 801249e:	bf38      	it	cc
 80124a0:	2304      	movcc	r3, #4
 80124a2:	441d      	add	r5, r3
 80124a4:	4473      	add	r3, lr
 80124a6:	469e      	mov	lr, r3
 80124a8:	462e      	mov	r6, r5
 80124aa:	4566      	cmp	r6, ip
 80124ac:	d30e      	bcc.n	80124cc <__mdiff+0xec>
 80124ae:	f10c 0203 	add.w	r2, ip, #3
 80124b2:	1b52      	subs	r2, r2, r5
 80124b4:	f022 0203 	bic.w	r2, r2, #3
 80124b8:	3d03      	subs	r5, #3
 80124ba:	45ac      	cmp	ip, r5
 80124bc:	bf38      	it	cc
 80124be:	2200      	movcc	r2, #0
 80124c0:	441a      	add	r2, r3
 80124c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80124c6:	b17b      	cbz	r3, 80124e8 <__mdiff+0x108>
 80124c8:	6107      	str	r7, [r0, #16]
 80124ca:	e7a3      	b.n	8012414 <__mdiff+0x34>
 80124cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80124d0:	fa11 f288 	uxtah	r2, r1, r8
 80124d4:	1414      	asrs	r4, r2, #16
 80124d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80124da:	b292      	uxth	r2, r2
 80124dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80124e0:	f84e 2b04 	str.w	r2, [lr], #4
 80124e4:	1421      	asrs	r1, r4, #16
 80124e6:	e7e0      	b.n	80124aa <__mdiff+0xca>
 80124e8:	3f01      	subs	r7, #1
 80124ea:	e7ea      	b.n	80124c2 <__mdiff+0xe2>
 80124ec:	08014169 	.word	0x08014169
 80124f0:	08014258 	.word	0x08014258

080124f4 <__ulp>:
 80124f4:	b082      	sub	sp, #8
 80124f6:	ed8d 0b00 	vstr	d0, [sp]
 80124fa:	9b01      	ldr	r3, [sp, #4]
 80124fc:	4912      	ldr	r1, [pc, #72]	; (8012548 <__ulp+0x54>)
 80124fe:	4019      	ands	r1, r3
 8012500:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012504:	2900      	cmp	r1, #0
 8012506:	dd05      	ble.n	8012514 <__ulp+0x20>
 8012508:	2200      	movs	r2, #0
 801250a:	460b      	mov	r3, r1
 801250c:	ec43 2b10 	vmov	d0, r2, r3
 8012510:	b002      	add	sp, #8
 8012512:	4770      	bx	lr
 8012514:	4249      	negs	r1, r1
 8012516:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801251a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801251e:	f04f 0200 	mov.w	r2, #0
 8012522:	f04f 0300 	mov.w	r3, #0
 8012526:	da04      	bge.n	8012532 <__ulp+0x3e>
 8012528:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801252c:	fa41 f300 	asr.w	r3, r1, r0
 8012530:	e7ec      	b.n	801250c <__ulp+0x18>
 8012532:	f1a0 0114 	sub.w	r1, r0, #20
 8012536:	291e      	cmp	r1, #30
 8012538:	bfda      	itte	le
 801253a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801253e:	fa20 f101 	lsrle.w	r1, r0, r1
 8012542:	2101      	movgt	r1, #1
 8012544:	460a      	mov	r2, r1
 8012546:	e7e1      	b.n	801250c <__ulp+0x18>
 8012548:	7ff00000 	.word	0x7ff00000

0801254c <__b2d>:
 801254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801254e:	6905      	ldr	r5, [r0, #16]
 8012550:	f100 0714 	add.w	r7, r0, #20
 8012554:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012558:	1f2e      	subs	r6, r5, #4
 801255a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801255e:	4620      	mov	r0, r4
 8012560:	f7ff fd48 	bl	8011ff4 <__hi0bits>
 8012564:	f1c0 0320 	rsb	r3, r0, #32
 8012568:	280a      	cmp	r0, #10
 801256a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80125e8 <__b2d+0x9c>
 801256e:	600b      	str	r3, [r1, #0]
 8012570:	dc14      	bgt.n	801259c <__b2d+0x50>
 8012572:	f1c0 0e0b 	rsb	lr, r0, #11
 8012576:	fa24 f10e 	lsr.w	r1, r4, lr
 801257a:	42b7      	cmp	r7, r6
 801257c:	ea41 030c 	orr.w	r3, r1, ip
 8012580:	bf34      	ite	cc
 8012582:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012586:	2100      	movcs	r1, #0
 8012588:	3015      	adds	r0, #21
 801258a:	fa04 f000 	lsl.w	r0, r4, r0
 801258e:	fa21 f10e 	lsr.w	r1, r1, lr
 8012592:	ea40 0201 	orr.w	r2, r0, r1
 8012596:	ec43 2b10 	vmov	d0, r2, r3
 801259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801259c:	42b7      	cmp	r7, r6
 801259e:	bf3a      	itte	cc
 80125a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80125a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80125a8:	2100      	movcs	r1, #0
 80125aa:	380b      	subs	r0, #11
 80125ac:	d017      	beq.n	80125de <__b2d+0x92>
 80125ae:	f1c0 0c20 	rsb	ip, r0, #32
 80125b2:	fa04 f500 	lsl.w	r5, r4, r0
 80125b6:	42be      	cmp	r6, r7
 80125b8:	fa21 f40c 	lsr.w	r4, r1, ip
 80125bc:	ea45 0504 	orr.w	r5, r5, r4
 80125c0:	bf8c      	ite	hi
 80125c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80125c6:	2400      	movls	r4, #0
 80125c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80125cc:	fa01 f000 	lsl.w	r0, r1, r0
 80125d0:	fa24 f40c 	lsr.w	r4, r4, ip
 80125d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80125d8:	ea40 0204 	orr.w	r2, r0, r4
 80125dc:	e7db      	b.n	8012596 <__b2d+0x4a>
 80125de:	ea44 030c 	orr.w	r3, r4, ip
 80125e2:	460a      	mov	r2, r1
 80125e4:	e7d7      	b.n	8012596 <__b2d+0x4a>
 80125e6:	bf00      	nop
 80125e8:	3ff00000 	.word	0x3ff00000

080125ec <__d2b>:
 80125ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80125f0:	4689      	mov	r9, r1
 80125f2:	2101      	movs	r1, #1
 80125f4:	ec57 6b10 	vmov	r6, r7, d0
 80125f8:	4690      	mov	r8, r2
 80125fa:	f7ff fc09 	bl	8011e10 <_Balloc>
 80125fe:	4604      	mov	r4, r0
 8012600:	b930      	cbnz	r0, 8012610 <__d2b+0x24>
 8012602:	4602      	mov	r2, r0
 8012604:	4b25      	ldr	r3, [pc, #148]	; (801269c <__d2b+0xb0>)
 8012606:	4826      	ldr	r0, [pc, #152]	; (80126a0 <__d2b+0xb4>)
 8012608:	f240 310a 	movw	r1, #778	; 0x30a
 801260c:	f7fd ffa6 	bl	801055c <__assert_func>
 8012610:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012614:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012618:	bb35      	cbnz	r5, 8012668 <__d2b+0x7c>
 801261a:	2e00      	cmp	r6, #0
 801261c:	9301      	str	r3, [sp, #4]
 801261e:	d028      	beq.n	8012672 <__d2b+0x86>
 8012620:	4668      	mov	r0, sp
 8012622:	9600      	str	r6, [sp, #0]
 8012624:	f7ff fd06 	bl	8012034 <__lo0bits>
 8012628:	9900      	ldr	r1, [sp, #0]
 801262a:	b300      	cbz	r0, 801266e <__d2b+0x82>
 801262c:	9a01      	ldr	r2, [sp, #4]
 801262e:	f1c0 0320 	rsb	r3, r0, #32
 8012632:	fa02 f303 	lsl.w	r3, r2, r3
 8012636:	430b      	orrs	r3, r1
 8012638:	40c2      	lsrs	r2, r0
 801263a:	6163      	str	r3, [r4, #20]
 801263c:	9201      	str	r2, [sp, #4]
 801263e:	9b01      	ldr	r3, [sp, #4]
 8012640:	61a3      	str	r3, [r4, #24]
 8012642:	2b00      	cmp	r3, #0
 8012644:	bf14      	ite	ne
 8012646:	2202      	movne	r2, #2
 8012648:	2201      	moveq	r2, #1
 801264a:	6122      	str	r2, [r4, #16]
 801264c:	b1d5      	cbz	r5, 8012684 <__d2b+0x98>
 801264e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012652:	4405      	add	r5, r0
 8012654:	f8c9 5000 	str.w	r5, [r9]
 8012658:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801265c:	f8c8 0000 	str.w	r0, [r8]
 8012660:	4620      	mov	r0, r4
 8012662:	b003      	add	sp, #12
 8012664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801266c:	e7d5      	b.n	801261a <__d2b+0x2e>
 801266e:	6161      	str	r1, [r4, #20]
 8012670:	e7e5      	b.n	801263e <__d2b+0x52>
 8012672:	a801      	add	r0, sp, #4
 8012674:	f7ff fcde 	bl	8012034 <__lo0bits>
 8012678:	9b01      	ldr	r3, [sp, #4]
 801267a:	6163      	str	r3, [r4, #20]
 801267c:	2201      	movs	r2, #1
 801267e:	6122      	str	r2, [r4, #16]
 8012680:	3020      	adds	r0, #32
 8012682:	e7e3      	b.n	801264c <__d2b+0x60>
 8012684:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801268c:	f8c9 0000 	str.w	r0, [r9]
 8012690:	6918      	ldr	r0, [r3, #16]
 8012692:	f7ff fcaf 	bl	8011ff4 <__hi0bits>
 8012696:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801269a:	e7df      	b.n	801265c <__d2b+0x70>
 801269c:	08014169 	.word	0x08014169
 80126a0:	08014258 	.word	0x08014258

080126a4 <__ratio>:
 80126a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a8:	4688      	mov	r8, r1
 80126aa:	4669      	mov	r1, sp
 80126ac:	4681      	mov	r9, r0
 80126ae:	f7ff ff4d 	bl	801254c <__b2d>
 80126b2:	a901      	add	r1, sp, #4
 80126b4:	4640      	mov	r0, r8
 80126b6:	ec55 4b10 	vmov	r4, r5, d0
 80126ba:	f7ff ff47 	bl	801254c <__b2d>
 80126be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80126c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80126c6:	eba3 0c02 	sub.w	ip, r3, r2
 80126ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80126ce:	1a9b      	subs	r3, r3, r2
 80126d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80126d4:	ec51 0b10 	vmov	r0, r1, d0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	bfd6      	itet	le
 80126dc:	460a      	movle	r2, r1
 80126de:	462a      	movgt	r2, r5
 80126e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80126e4:	468b      	mov	fp, r1
 80126e6:	462f      	mov	r7, r5
 80126e8:	bfd4      	ite	le
 80126ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80126ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80126f2:	4620      	mov	r0, r4
 80126f4:	ee10 2a10 	vmov	r2, s0
 80126f8:	465b      	mov	r3, fp
 80126fa:	4639      	mov	r1, r7
 80126fc:	f7ee f8ce 	bl	800089c <__aeabi_ddiv>
 8012700:	ec41 0b10 	vmov	d0, r0, r1
 8012704:	b003      	add	sp, #12
 8012706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801270a <__copybits>:
 801270a:	3901      	subs	r1, #1
 801270c:	b570      	push	{r4, r5, r6, lr}
 801270e:	1149      	asrs	r1, r1, #5
 8012710:	6914      	ldr	r4, [r2, #16]
 8012712:	3101      	adds	r1, #1
 8012714:	f102 0314 	add.w	r3, r2, #20
 8012718:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801271c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012720:	1f05      	subs	r5, r0, #4
 8012722:	42a3      	cmp	r3, r4
 8012724:	d30c      	bcc.n	8012740 <__copybits+0x36>
 8012726:	1aa3      	subs	r3, r4, r2
 8012728:	3b11      	subs	r3, #17
 801272a:	f023 0303 	bic.w	r3, r3, #3
 801272e:	3211      	adds	r2, #17
 8012730:	42a2      	cmp	r2, r4
 8012732:	bf88      	it	hi
 8012734:	2300      	movhi	r3, #0
 8012736:	4418      	add	r0, r3
 8012738:	2300      	movs	r3, #0
 801273a:	4288      	cmp	r0, r1
 801273c:	d305      	bcc.n	801274a <__copybits+0x40>
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	f853 6b04 	ldr.w	r6, [r3], #4
 8012744:	f845 6f04 	str.w	r6, [r5, #4]!
 8012748:	e7eb      	b.n	8012722 <__copybits+0x18>
 801274a:	f840 3b04 	str.w	r3, [r0], #4
 801274e:	e7f4      	b.n	801273a <__copybits+0x30>

08012750 <__any_on>:
 8012750:	f100 0214 	add.w	r2, r0, #20
 8012754:	6900      	ldr	r0, [r0, #16]
 8012756:	114b      	asrs	r3, r1, #5
 8012758:	4298      	cmp	r0, r3
 801275a:	b510      	push	{r4, lr}
 801275c:	db11      	blt.n	8012782 <__any_on+0x32>
 801275e:	dd0a      	ble.n	8012776 <__any_on+0x26>
 8012760:	f011 011f 	ands.w	r1, r1, #31
 8012764:	d007      	beq.n	8012776 <__any_on+0x26>
 8012766:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801276a:	fa24 f001 	lsr.w	r0, r4, r1
 801276e:	fa00 f101 	lsl.w	r1, r0, r1
 8012772:	428c      	cmp	r4, r1
 8012774:	d10b      	bne.n	801278e <__any_on+0x3e>
 8012776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801277a:	4293      	cmp	r3, r2
 801277c:	d803      	bhi.n	8012786 <__any_on+0x36>
 801277e:	2000      	movs	r0, #0
 8012780:	bd10      	pop	{r4, pc}
 8012782:	4603      	mov	r3, r0
 8012784:	e7f7      	b.n	8012776 <__any_on+0x26>
 8012786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801278a:	2900      	cmp	r1, #0
 801278c:	d0f5      	beq.n	801277a <__any_on+0x2a>
 801278e:	2001      	movs	r0, #1
 8012790:	e7f6      	b.n	8012780 <__any_on+0x30>

08012792 <_calloc_r>:
 8012792:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012794:	fba1 2402 	umull	r2, r4, r1, r2
 8012798:	b94c      	cbnz	r4, 80127ae <_calloc_r+0x1c>
 801279a:	4611      	mov	r1, r2
 801279c:	9201      	str	r2, [sp, #4]
 801279e:	f7fb fecf 	bl	800e540 <_malloc_r>
 80127a2:	9a01      	ldr	r2, [sp, #4]
 80127a4:	4605      	mov	r5, r0
 80127a6:	b930      	cbnz	r0, 80127b6 <_calloc_r+0x24>
 80127a8:	4628      	mov	r0, r5
 80127aa:	b003      	add	sp, #12
 80127ac:	bd30      	pop	{r4, r5, pc}
 80127ae:	220c      	movs	r2, #12
 80127b0:	6002      	str	r2, [r0, #0]
 80127b2:	2500      	movs	r5, #0
 80127b4:	e7f8      	b.n	80127a8 <_calloc_r+0x16>
 80127b6:	4621      	mov	r1, r4
 80127b8:	f7fb fe4e 	bl	800e458 <memset>
 80127bc:	e7f4      	b.n	80127a8 <_calloc_r+0x16>

080127be <__ssputs_r>:
 80127be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127c2:	688e      	ldr	r6, [r1, #8]
 80127c4:	429e      	cmp	r6, r3
 80127c6:	4682      	mov	sl, r0
 80127c8:	460c      	mov	r4, r1
 80127ca:	4690      	mov	r8, r2
 80127cc:	461f      	mov	r7, r3
 80127ce:	d838      	bhi.n	8012842 <__ssputs_r+0x84>
 80127d0:	898a      	ldrh	r2, [r1, #12]
 80127d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80127d6:	d032      	beq.n	801283e <__ssputs_r+0x80>
 80127d8:	6825      	ldr	r5, [r4, #0]
 80127da:	6909      	ldr	r1, [r1, #16]
 80127dc:	eba5 0901 	sub.w	r9, r5, r1
 80127e0:	6965      	ldr	r5, [r4, #20]
 80127e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80127e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80127ea:	3301      	adds	r3, #1
 80127ec:	444b      	add	r3, r9
 80127ee:	106d      	asrs	r5, r5, #1
 80127f0:	429d      	cmp	r5, r3
 80127f2:	bf38      	it	cc
 80127f4:	461d      	movcc	r5, r3
 80127f6:	0553      	lsls	r3, r2, #21
 80127f8:	d531      	bpl.n	801285e <__ssputs_r+0xa0>
 80127fa:	4629      	mov	r1, r5
 80127fc:	f7fb fea0 	bl	800e540 <_malloc_r>
 8012800:	4606      	mov	r6, r0
 8012802:	b950      	cbnz	r0, 801281a <__ssputs_r+0x5c>
 8012804:	230c      	movs	r3, #12
 8012806:	f8ca 3000 	str.w	r3, [sl]
 801280a:	89a3      	ldrh	r3, [r4, #12]
 801280c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012810:	81a3      	strh	r3, [r4, #12]
 8012812:	f04f 30ff 	mov.w	r0, #4294967295
 8012816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801281a:	6921      	ldr	r1, [r4, #16]
 801281c:	464a      	mov	r2, r9
 801281e:	f7fb fe0d 	bl	800e43c <memcpy>
 8012822:	89a3      	ldrh	r3, [r4, #12]
 8012824:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801282c:	81a3      	strh	r3, [r4, #12]
 801282e:	6126      	str	r6, [r4, #16]
 8012830:	6165      	str	r5, [r4, #20]
 8012832:	444e      	add	r6, r9
 8012834:	eba5 0509 	sub.w	r5, r5, r9
 8012838:	6026      	str	r6, [r4, #0]
 801283a:	60a5      	str	r5, [r4, #8]
 801283c:	463e      	mov	r6, r7
 801283e:	42be      	cmp	r6, r7
 8012840:	d900      	bls.n	8012844 <__ssputs_r+0x86>
 8012842:	463e      	mov	r6, r7
 8012844:	6820      	ldr	r0, [r4, #0]
 8012846:	4632      	mov	r2, r6
 8012848:	4641      	mov	r1, r8
 801284a:	f000 fb6b 	bl	8012f24 <memmove>
 801284e:	68a3      	ldr	r3, [r4, #8]
 8012850:	1b9b      	subs	r3, r3, r6
 8012852:	60a3      	str	r3, [r4, #8]
 8012854:	6823      	ldr	r3, [r4, #0]
 8012856:	4433      	add	r3, r6
 8012858:	6023      	str	r3, [r4, #0]
 801285a:	2000      	movs	r0, #0
 801285c:	e7db      	b.n	8012816 <__ssputs_r+0x58>
 801285e:	462a      	mov	r2, r5
 8012860:	f000 fb7a 	bl	8012f58 <_realloc_r>
 8012864:	4606      	mov	r6, r0
 8012866:	2800      	cmp	r0, #0
 8012868:	d1e1      	bne.n	801282e <__ssputs_r+0x70>
 801286a:	6921      	ldr	r1, [r4, #16]
 801286c:	4650      	mov	r0, sl
 801286e:	f7fb fdfb 	bl	800e468 <_free_r>
 8012872:	e7c7      	b.n	8012804 <__ssputs_r+0x46>

08012874 <_svfiprintf_r>:
 8012874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012878:	4698      	mov	r8, r3
 801287a:	898b      	ldrh	r3, [r1, #12]
 801287c:	061b      	lsls	r3, r3, #24
 801287e:	b09d      	sub	sp, #116	; 0x74
 8012880:	4607      	mov	r7, r0
 8012882:	460d      	mov	r5, r1
 8012884:	4614      	mov	r4, r2
 8012886:	d50e      	bpl.n	80128a6 <_svfiprintf_r+0x32>
 8012888:	690b      	ldr	r3, [r1, #16]
 801288a:	b963      	cbnz	r3, 80128a6 <_svfiprintf_r+0x32>
 801288c:	2140      	movs	r1, #64	; 0x40
 801288e:	f7fb fe57 	bl	800e540 <_malloc_r>
 8012892:	6028      	str	r0, [r5, #0]
 8012894:	6128      	str	r0, [r5, #16]
 8012896:	b920      	cbnz	r0, 80128a2 <_svfiprintf_r+0x2e>
 8012898:	230c      	movs	r3, #12
 801289a:	603b      	str	r3, [r7, #0]
 801289c:	f04f 30ff 	mov.w	r0, #4294967295
 80128a0:	e0d1      	b.n	8012a46 <_svfiprintf_r+0x1d2>
 80128a2:	2340      	movs	r3, #64	; 0x40
 80128a4:	616b      	str	r3, [r5, #20]
 80128a6:	2300      	movs	r3, #0
 80128a8:	9309      	str	r3, [sp, #36]	; 0x24
 80128aa:	2320      	movs	r3, #32
 80128ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80128b4:	2330      	movs	r3, #48	; 0x30
 80128b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012a60 <_svfiprintf_r+0x1ec>
 80128ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128be:	f04f 0901 	mov.w	r9, #1
 80128c2:	4623      	mov	r3, r4
 80128c4:	469a      	mov	sl, r3
 80128c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128ca:	b10a      	cbz	r2, 80128d0 <_svfiprintf_r+0x5c>
 80128cc:	2a25      	cmp	r2, #37	; 0x25
 80128ce:	d1f9      	bne.n	80128c4 <_svfiprintf_r+0x50>
 80128d0:	ebba 0b04 	subs.w	fp, sl, r4
 80128d4:	d00b      	beq.n	80128ee <_svfiprintf_r+0x7a>
 80128d6:	465b      	mov	r3, fp
 80128d8:	4622      	mov	r2, r4
 80128da:	4629      	mov	r1, r5
 80128dc:	4638      	mov	r0, r7
 80128de:	f7ff ff6e 	bl	80127be <__ssputs_r>
 80128e2:	3001      	adds	r0, #1
 80128e4:	f000 80aa 	beq.w	8012a3c <_svfiprintf_r+0x1c8>
 80128e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128ea:	445a      	add	r2, fp
 80128ec:	9209      	str	r2, [sp, #36]	; 0x24
 80128ee:	f89a 3000 	ldrb.w	r3, [sl]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	f000 80a2 	beq.w	8012a3c <_svfiprintf_r+0x1c8>
 80128f8:	2300      	movs	r3, #0
 80128fa:	f04f 32ff 	mov.w	r2, #4294967295
 80128fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012902:	f10a 0a01 	add.w	sl, sl, #1
 8012906:	9304      	str	r3, [sp, #16]
 8012908:	9307      	str	r3, [sp, #28]
 801290a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801290e:	931a      	str	r3, [sp, #104]	; 0x68
 8012910:	4654      	mov	r4, sl
 8012912:	2205      	movs	r2, #5
 8012914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012918:	4851      	ldr	r0, [pc, #324]	; (8012a60 <_svfiprintf_r+0x1ec>)
 801291a:	f7ed fc89 	bl	8000230 <memchr>
 801291e:	9a04      	ldr	r2, [sp, #16]
 8012920:	b9d8      	cbnz	r0, 801295a <_svfiprintf_r+0xe6>
 8012922:	06d0      	lsls	r0, r2, #27
 8012924:	bf44      	itt	mi
 8012926:	2320      	movmi	r3, #32
 8012928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801292c:	0711      	lsls	r1, r2, #28
 801292e:	bf44      	itt	mi
 8012930:	232b      	movmi	r3, #43	; 0x2b
 8012932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012936:	f89a 3000 	ldrb.w	r3, [sl]
 801293a:	2b2a      	cmp	r3, #42	; 0x2a
 801293c:	d015      	beq.n	801296a <_svfiprintf_r+0xf6>
 801293e:	9a07      	ldr	r2, [sp, #28]
 8012940:	4654      	mov	r4, sl
 8012942:	2000      	movs	r0, #0
 8012944:	f04f 0c0a 	mov.w	ip, #10
 8012948:	4621      	mov	r1, r4
 801294a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801294e:	3b30      	subs	r3, #48	; 0x30
 8012950:	2b09      	cmp	r3, #9
 8012952:	d94e      	bls.n	80129f2 <_svfiprintf_r+0x17e>
 8012954:	b1b0      	cbz	r0, 8012984 <_svfiprintf_r+0x110>
 8012956:	9207      	str	r2, [sp, #28]
 8012958:	e014      	b.n	8012984 <_svfiprintf_r+0x110>
 801295a:	eba0 0308 	sub.w	r3, r0, r8
 801295e:	fa09 f303 	lsl.w	r3, r9, r3
 8012962:	4313      	orrs	r3, r2
 8012964:	9304      	str	r3, [sp, #16]
 8012966:	46a2      	mov	sl, r4
 8012968:	e7d2      	b.n	8012910 <_svfiprintf_r+0x9c>
 801296a:	9b03      	ldr	r3, [sp, #12]
 801296c:	1d19      	adds	r1, r3, #4
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	9103      	str	r1, [sp, #12]
 8012972:	2b00      	cmp	r3, #0
 8012974:	bfbb      	ittet	lt
 8012976:	425b      	neglt	r3, r3
 8012978:	f042 0202 	orrlt.w	r2, r2, #2
 801297c:	9307      	strge	r3, [sp, #28]
 801297e:	9307      	strlt	r3, [sp, #28]
 8012980:	bfb8      	it	lt
 8012982:	9204      	strlt	r2, [sp, #16]
 8012984:	7823      	ldrb	r3, [r4, #0]
 8012986:	2b2e      	cmp	r3, #46	; 0x2e
 8012988:	d10c      	bne.n	80129a4 <_svfiprintf_r+0x130>
 801298a:	7863      	ldrb	r3, [r4, #1]
 801298c:	2b2a      	cmp	r3, #42	; 0x2a
 801298e:	d135      	bne.n	80129fc <_svfiprintf_r+0x188>
 8012990:	9b03      	ldr	r3, [sp, #12]
 8012992:	1d1a      	adds	r2, r3, #4
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	9203      	str	r2, [sp, #12]
 8012998:	2b00      	cmp	r3, #0
 801299a:	bfb8      	it	lt
 801299c:	f04f 33ff 	movlt.w	r3, #4294967295
 80129a0:	3402      	adds	r4, #2
 80129a2:	9305      	str	r3, [sp, #20]
 80129a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012a70 <_svfiprintf_r+0x1fc>
 80129a8:	7821      	ldrb	r1, [r4, #0]
 80129aa:	2203      	movs	r2, #3
 80129ac:	4650      	mov	r0, sl
 80129ae:	f7ed fc3f 	bl	8000230 <memchr>
 80129b2:	b140      	cbz	r0, 80129c6 <_svfiprintf_r+0x152>
 80129b4:	2340      	movs	r3, #64	; 0x40
 80129b6:	eba0 000a 	sub.w	r0, r0, sl
 80129ba:	fa03 f000 	lsl.w	r0, r3, r0
 80129be:	9b04      	ldr	r3, [sp, #16]
 80129c0:	4303      	orrs	r3, r0
 80129c2:	3401      	adds	r4, #1
 80129c4:	9304      	str	r3, [sp, #16]
 80129c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129ca:	4826      	ldr	r0, [pc, #152]	; (8012a64 <_svfiprintf_r+0x1f0>)
 80129cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80129d0:	2206      	movs	r2, #6
 80129d2:	f7ed fc2d 	bl	8000230 <memchr>
 80129d6:	2800      	cmp	r0, #0
 80129d8:	d038      	beq.n	8012a4c <_svfiprintf_r+0x1d8>
 80129da:	4b23      	ldr	r3, [pc, #140]	; (8012a68 <_svfiprintf_r+0x1f4>)
 80129dc:	bb1b      	cbnz	r3, 8012a26 <_svfiprintf_r+0x1b2>
 80129de:	9b03      	ldr	r3, [sp, #12]
 80129e0:	3307      	adds	r3, #7
 80129e2:	f023 0307 	bic.w	r3, r3, #7
 80129e6:	3308      	adds	r3, #8
 80129e8:	9303      	str	r3, [sp, #12]
 80129ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ec:	4433      	add	r3, r6
 80129ee:	9309      	str	r3, [sp, #36]	; 0x24
 80129f0:	e767      	b.n	80128c2 <_svfiprintf_r+0x4e>
 80129f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80129f6:	460c      	mov	r4, r1
 80129f8:	2001      	movs	r0, #1
 80129fa:	e7a5      	b.n	8012948 <_svfiprintf_r+0xd4>
 80129fc:	2300      	movs	r3, #0
 80129fe:	3401      	adds	r4, #1
 8012a00:	9305      	str	r3, [sp, #20]
 8012a02:	4619      	mov	r1, r3
 8012a04:	f04f 0c0a 	mov.w	ip, #10
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a0e:	3a30      	subs	r2, #48	; 0x30
 8012a10:	2a09      	cmp	r2, #9
 8012a12:	d903      	bls.n	8012a1c <_svfiprintf_r+0x1a8>
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d0c5      	beq.n	80129a4 <_svfiprintf_r+0x130>
 8012a18:	9105      	str	r1, [sp, #20]
 8012a1a:	e7c3      	b.n	80129a4 <_svfiprintf_r+0x130>
 8012a1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a20:	4604      	mov	r4, r0
 8012a22:	2301      	movs	r3, #1
 8012a24:	e7f0      	b.n	8012a08 <_svfiprintf_r+0x194>
 8012a26:	ab03      	add	r3, sp, #12
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	462a      	mov	r2, r5
 8012a2c:	4b0f      	ldr	r3, [pc, #60]	; (8012a6c <_svfiprintf_r+0x1f8>)
 8012a2e:	a904      	add	r1, sp, #16
 8012a30:	4638      	mov	r0, r7
 8012a32:	f7fb fe99 	bl	800e768 <_printf_float>
 8012a36:	1c42      	adds	r2, r0, #1
 8012a38:	4606      	mov	r6, r0
 8012a3a:	d1d6      	bne.n	80129ea <_svfiprintf_r+0x176>
 8012a3c:	89ab      	ldrh	r3, [r5, #12]
 8012a3e:	065b      	lsls	r3, r3, #25
 8012a40:	f53f af2c 	bmi.w	801289c <_svfiprintf_r+0x28>
 8012a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a46:	b01d      	add	sp, #116	; 0x74
 8012a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a4c:	ab03      	add	r3, sp, #12
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	462a      	mov	r2, r5
 8012a52:	4b06      	ldr	r3, [pc, #24]	; (8012a6c <_svfiprintf_r+0x1f8>)
 8012a54:	a904      	add	r1, sp, #16
 8012a56:	4638      	mov	r0, r7
 8012a58:	f7fc f92a 	bl	800ecb0 <_printf_i>
 8012a5c:	e7eb      	b.n	8012a36 <_svfiprintf_r+0x1c2>
 8012a5e:	bf00      	nop
 8012a60:	080143b4 	.word	0x080143b4
 8012a64:	080143be 	.word	0x080143be
 8012a68:	0800e769 	.word	0x0800e769
 8012a6c:	080127bf 	.word	0x080127bf
 8012a70:	080143ba 	.word	0x080143ba

08012a74 <__sfputc_r>:
 8012a74:	6893      	ldr	r3, [r2, #8]
 8012a76:	3b01      	subs	r3, #1
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	b410      	push	{r4}
 8012a7c:	6093      	str	r3, [r2, #8]
 8012a7e:	da08      	bge.n	8012a92 <__sfputc_r+0x1e>
 8012a80:	6994      	ldr	r4, [r2, #24]
 8012a82:	42a3      	cmp	r3, r4
 8012a84:	db01      	blt.n	8012a8a <__sfputc_r+0x16>
 8012a86:	290a      	cmp	r1, #10
 8012a88:	d103      	bne.n	8012a92 <__sfputc_r+0x1e>
 8012a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a8e:	f7fd bca5 	b.w	80103dc <__swbuf_r>
 8012a92:	6813      	ldr	r3, [r2, #0]
 8012a94:	1c58      	adds	r0, r3, #1
 8012a96:	6010      	str	r0, [r2, #0]
 8012a98:	7019      	strb	r1, [r3, #0]
 8012a9a:	4608      	mov	r0, r1
 8012a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012aa0:	4770      	bx	lr

08012aa2 <__sfputs_r>:
 8012aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aa4:	4606      	mov	r6, r0
 8012aa6:	460f      	mov	r7, r1
 8012aa8:	4614      	mov	r4, r2
 8012aaa:	18d5      	adds	r5, r2, r3
 8012aac:	42ac      	cmp	r4, r5
 8012aae:	d101      	bne.n	8012ab4 <__sfputs_r+0x12>
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	e007      	b.n	8012ac4 <__sfputs_r+0x22>
 8012ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ab8:	463a      	mov	r2, r7
 8012aba:	4630      	mov	r0, r6
 8012abc:	f7ff ffda 	bl	8012a74 <__sfputc_r>
 8012ac0:	1c43      	adds	r3, r0, #1
 8012ac2:	d1f3      	bne.n	8012aac <__sfputs_r+0xa>
 8012ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ac8 <_vfiprintf_r>:
 8012ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012acc:	460d      	mov	r5, r1
 8012ace:	b09d      	sub	sp, #116	; 0x74
 8012ad0:	4614      	mov	r4, r2
 8012ad2:	4698      	mov	r8, r3
 8012ad4:	4606      	mov	r6, r0
 8012ad6:	b118      	cbz	r0, 8012ae0 <_vfiprintf_r+0x18>
 8012ad8:	6983      	ldr	r3, [r0, #24]
 8012ada:	b90b      	cbnz	r3, 8012ae0 <_vfiprintf_r+0x18>
 8012adc:	f7fe fcf0 	bl	80114c0 <__sinit>
 8012ae0:	4b89      	ldr	r3, [pc, #548]	; (8012d08 <_vfiprintf_r+0x240>)
 8012ae2:	429d      	cmp	r5, r3
 8012ae4:	d11b      	bne.n	8012b1e <_vfiprintf_r+0x56>
 8012ae6:	6875      	ldr	r5, [r6, #4]
 8012ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012aea:	07d9      	lsls	r1, r3, #31
 8012aec:	d405      	bmi.n	8012afa <_vfiprintf_r+0x32>
 8012aee:	89ab      	ldrh	r3, [r5, #12]
 8012af0:	059a      	lsls	r2, r3, #22
 8012af2:	d402      	bmi.n	8012afa <_vfiprintf_r+0x32>
 8012af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012af6:	f7ff f906 	bl	8011d06 <__retarget_lock_acquire_recursive>
 8012afa:	89ab      	ldrh	r3, [r5, #12]
 8012afc:	071b      	lsls	r3, r3, #28
 8012afe:	d501      	bpl.n	8012b04 <_vfiprintf_r+0x3c>
 8012b00:	692b      	ldr	r3, [r5, #16]
 8012b02:	b9eb      	cbnz	r3, 8012b40 <_vfiprintf_r+0x78>
 8012b04:	4629      	mov	r1, r5
 8012b06:	4630      	mov	r0, r6
 8012b08:	f7fd fcba 	bl	8010480 <__swsetup_r>
 8012b0c:	b1c0      	cbz	r0, 8012b40 <_vfiprintf_r+0x78>
 8012b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b10:	07dc      	lsls	r4, r3, #31
 8012b12:	d50e      	bpl.n	8012b32 <_vfiprintf_r+0x6a>
 8012b14:	f04f 30ff 	mov.w	r0, #4294967295
 8012b18:	b01d      	add	sp, #116	; 0x74
 8012b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b1e:	4b7b      	ldr	r3, [pc, #492]	; (8012d0c <_vfiprintf_r+0x244>)
 8012b20:	429d      	cmp	r5, r3
 8012b22:	d101      	bne.n	8012b28 <_vfiprintf_r+0x60>
 8012b24:	68b5      	ldr	r5, [r6, #8]
 8012b26:	e7df      	b.n	8012ae8 <_vfiprintf_r+0x20>
 8012b28:	4b79      	ldr	r3, [pc, #484]	; (8012d10 <_vfiprintf_r+0x248>)
 8012b2a:	429d      	cmp	r5, r3
 8012b2c:	bf08      	it	eq
 8012b2e:	68f5      	ldreq	r5, [r6, #12]
 8012b30:	e7da      	b.n	8012ae8 <_vfiprintf_r+0x20>
 8012b32:	89ab      	ldrh	r3, [r5, #12]
 8012b34:	0598      	lsls	r0, r3, #22
 8012b36:	d4ed      	bmi.n	8012b14 <_vfiprintf_r+0x4c>
 8012b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b3a:	f7ff f8e5 	bl	8011d08 <__retarget_lock_release_recursive>
 8012b3e:	e7e9      	b.n	8012b14 <_vfiprintf_r+0x4c>
 8012b40:	2300      	movs	r3, #0
 8012b42:	9309      	str	r3, [sp, #36]	; 0x24
 8012b44:	2320      	movs	r3, #32
 8012b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b4e:	2330      	movs	r3, #48	; 0x30
 8012b50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012d14 <_vfiprintf_r+0x24c>
 8012b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b58:	f04f 0901 	mov.w	r9, #1
 8012b5c:	4623      	mov	r3, r4
 8012b5e:	469a      	mov	sl, r3
 8012b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b64:	b10a      	cbz	r2, 8012b6a <_vfiprintf_r+0xa2>
 8012b66:	2a25      	cmp	r2, #37	; 0x25
 8012b68:	d1f9      	bne.n	8012b5e <_vfiprintf_r+0x96>
 8012b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8012b6e:	d00b      	beq.n	8012b88 <_vfiprintf_r+0xc0>
 8012b70:	465b      	mov	r3, fp
 8012b72:	4622      	mov	r2, r4
 8012b74:	4629      	mov	r1, r5
 8012b76:	4630      	mov	r0, r6
 8012b78:	f7ff ff93 	bl	8012aa2 <__sfputs_r>
 8012b7c:	3001      	adds	r0, #1
 8012b7e:	f000 80aa 	beq.w	8012cd6 <_vfiprintf_r+0x20e>
 8012b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b84:	445a      	add	r2, fp
 8012b86:	9209      	str	r2, [sp, #36]	; 0x24
 8012b88:	f89a 3000 	ldrb.w	r3, [sl]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	f000 80a2 	beq.w	8012cd6 <_vfiprintf_r+0x20e>
 8012b92:	2300      	movs	r3, #0
 8012b94:	f04f 32ff 	mov.w	r2, #4294967295
 8012b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b9c:	f10a 0a01 	add.w	sl, sl, #1
 8012ba0:	9304      	str	r3, [sp, #16]
 8012ba2:	9307      	str	r3, [sp, #28]
 8012ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8012baa:	4654      	mov	r4, sl
 8012bac:	2205      	movs	r2, #5
 8012bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bb2:	4858      	ldr	r0, [pc, #352]	; (8012d14 <_vfiprintf_r+0x24c>)
 8012bb4:	f7ed fb3c 	bl	8000230 <memchr>
 8012bb8:	9a04      	ldr	r2, [sp, #16]
 8012bba:	b9d8      	cbnz	r0, 8012bf4 <_vfiprintf_r+0x12c>
 8012bbc:	06d1      	lsls	r1, r2, #27
 8012bbe:	bf44      	itt	mi
 8012bc0:	2320      	movmi	r3, #32
 8012bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bc6:	0713      	lsls	r3, r2, #28
 8012bc8:	bf44      	itt	mi
 8012bca:	232b      	movmi	r3, #43	; 0x2b
 8012bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8012bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8012bd6:	d015      	beq.n	8012c04 <_vfiprintf_r+0x13c>
 8012bd8:	9a07      	ldr	r2, [sp, #28]
 8012bda:	4654      	mov	r4, sl
 8012bdc:	2000      	movs	r0, #0
 8012bde:	f04f 0c0a 	mov.w	ip, #10
 8012be2:	4621      	mov	r1, r4
 8012be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012be8:	3b30      	subs	r3, #48	; 0x30
 8012bea:	2b09      	cmp	r3, #9
 8012bec:	d94e      	bls.n	8012c8c <_vfiprintf_r+0x1c4>
 8012bee:	b1b0      	cbz	r0, 8012c1e <_vfiprintf_r+0x156>
 8012bf0:	9207      	str	r2, [sp, #28]
 8012bf2:	e014      	b.n	8012c1e <_vfiprintf_r+0x156>
 8012bf4:	eba0 0308 	sub.w	r3, r0, r8
 8012bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8012bfc:	4313      	orrs	r3, r2
 8012bfe:	9304      	str	r3, [sp, #16]
 8012c00:	46a2      	mov	sl, r4
 8012c02:	e7d2      	b.n	8012baa <_vfiprintf_r+0xe2>
 8012c04:	9b03      	ldr	r3, [sp, #12]
 8012c06:	1d19      	adds	r1, r3, #4
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	9103      	str	r1, [sp, #12]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	bfbb      	ittet	lt
 8012c10:	425b      	neglt	r3, r3
 8012c12:	f042 0202 	orrlt.w	r2, r2, #2
 8012c16:	9307      	strge	r3, [sp, #28]
 8012c18:	9307      	strlt	r3, [sp, #28]
 8012c1a:	bfb8      	it	lt
 8012c1c:	9204      	strlt	r2, [sp, #16]
 8012c1e:	7823      	ldrb	r3, [r4, #0]
 8012c20:	2b2e      	cmp	r3, #46	; 0x2e
 8012c22:	d10c      	bne.n	8012c3e <_vfiprintf_r+0x176>
 8012c24:	7863      	ldrb	r3, [r4, #1]
 8012c26:	2b2a      	cmp	r3, #42	; 0x2a
 8012c28:	d135      	bne.n	8012c96 <_vfiprintf_r+0x1ce>
 8012c2a:	9b03      	ldr	r3, [sp, #12]
 8012c2c:	1d1a      	adds	r2, r3, #4
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	9203      	str	r2, [sp, #12]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	bfb8      	it	lt
 8012c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c3a:	3402      	adds	r4, #2
 8012c3c:	9305      	str	r3, [sp, #20]
 8012c3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012d24 <_vfiprintf_r+0x25c>
 8012c42:	7821      	ldrb	r1, [r4, #0]
 8012c44:	2203      	movs	r2, #3
 8012c46:	4650      	mov	r0, sl
 8012c48:	f7ed faf2 	bl	8000230 <memchr>
 8012c4c:	b140      	cbz	r0, 8012c60 <_vfiprintf_r+0x198>
 8012c4e:	2340      	movs	r3, #64	; 0x40
 8012c50:	eba0 000a 	sub.w	r0, r0, sl
 8012c54:	fa03 f000 	lsl.w	r0, r3, r0
 8012c58:	9b04      	ldr	r3, [sp, #16]
 8012c5a:	4303      	orrs	r3, r0
 8012c5c:	3401      	adds	r4, #1
 8012c5e:	9304      	str	r3, [sp, #16]
 8012c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c64:	482c      	ldr	r0, [pc, #176]	; (8012d18 <_vfiprintf_r+0x250>)
 8012c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c6a:	2206      	movs	r2, #6
 8012c6c:	f7ed fae0 	bl	8000230 <memchr>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d03f      	beq.n	8012cf4 <_vfiprintf_r+0x22c>
 8012c74:	4b29      	ldr	r3, [pc, #164]	; (8012d1c <_vfiprintf_r+0x254>)
 8012c76:	bb1b      	cbnz	r3, 8012cc0 <_vfiprintf_r+0x1f8>
 8012c78:	9b03      	ldr	r3, [sp, #12]
 8012c7a:	3307      	adds	r3, #7
 8012c7c:	f023 0307 	bic.w	r3, r3, #7
 8012c80:	3308      	adds	r3, #8
 8012c82:	9303      	str	r3, [sp, #12]
 8012c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c86:	443b      	add	r3, r7
 8012c88:	9309      	str	r3, [sp, #36]	; 0x24
 8012c8a:	e767      	b.n	8012b5c <_vfiprintf_r+0x94>
 8012c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c90:	460c      	mov	r4, r1
 8012c92:	2001      	movs	r0, #1
 8012c94:	e7a5      	b.n	8012be2 <_vfiprintf_r+0x11a>
 8012c96:	2300      	movs	r3, #0
 8012c98:	3401      	adds	r4, #1
 8012c9a:	9305      	str	r3, [sp, #20]
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	f04f 0c0a 	mov.w	ip, #10
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ca8:	3a30      	subs	r2, #48	; 0x30
 8012caa:	2a09      	cmp	r2, #9
 8012cac:	d903      	bls.n	8012cb6 <_vfiprintf_r+0x1ee>
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d0c5      	beq.n	8012c3e <_vfiprintf_r+0x176>
 8012cb2:	9105      	str	r1, [sp, #20]
 8012cb4:	e7c3      	b.n	8012c3e <_vfiprintf_r+0x176>
 8012cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cba:	4604      	mov	r4, r0
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	e7f0      	b.n	8012ca2 <_vfiprintf_r+0x1da>
 8012cc0:	ab03      	add	r3, sp, #12
 8012cc2:	9300      	str	r3, [sp, #0]
 8012cc4:	462a      	mov	r2, r5
 8012cc6:	4b16      	ldr	r3, [pc, #88]	; (8012d20 <_vfiprintf_r+0x258>)
 8012cc8:	a904      	add	r1, sp, #16
 8012cca:	4630      	mov	r0, r6
 8012ccc:	f7fb fd4c 	bl	800e768 <_printf_float>
 8012cd0:	4607      	mov	r7, r0
 8012cd2:	1c78      	adds	r0, r7, #1
 8012cd4:	d1d6      	bne.n	8012c84 <_vfiprintf_r+0x1bc>
 8012cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012cd8:	07d9      	lsls	r1, r3, #31
 8012cda:	d405      	bmi.n	8012ce8 <_vfiprintf_r+0x220>
 8012cdc:	89ab      	ldrh	r3, [r5, #12]
 8012cde:	059a      	lsls	r2, r3, #22
 8012ce0:	d402      	bmi.n	8012ce8 <_vfiprintf_r+0x220>
 8012ce2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ce4:	f7ff f810 	bl	8011d08 <__retarget_lock_release_recursive>
 8012ce8:	89ab      	ldrh	r3, [r5, #12]
 8012cea:	065b      	lsls	r3, r3, #25
 8012cec:	f53f af12 	bmi.w	8012b14 <_vfiprintf_r+0x4c>
 8012cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cf2:	e711      	b.n	8012b18 <_vfiprintf_r+0x50>
 8012cf4:	ab03      	add	r3, sp, #12
 8012cf6:	9300      	str	r3, [sp, #0]
 8012cf8:	462a      	mov	r2, r5
 8012cfa:	4b09      	ldr	r3, [pc, #36]	; (8012d20 <_vfiprintf_r+0x258>)
 8012cfc:	a904      	add	r1, sp, #16
 8012cfe:	4630      	mov	r0, r6
 8012d00:	f7fb ffd6 	bl	800ecb0 <_printf_i>
 8012d04:	e7e4      	b.n	8012cd0 <_vfiprintf_r+0x208>
 8012d06:	bf00      	nop
 8012d08:	0801419c 	.word	0x0801419c
 8012d0c:	080141bc 	.word	0x080141bc
 8012d10:	0801417c 	.word	0x0801417c
 8012d14:	080143b4 	.word	0x080143b4
 8012d18:	080143be 	.word	0x080143be
 8012d1c:	0800e769 	.word	0x0800e769
 8012d20:	08012aa3 	.word	0x08012aa3
 8012d24:	080143ba 	.word	0x080143ba

08012d28 <_putc_r>:
 8012d28:	b570      	push	{r4, r5, r6, lr}
 8012d2a:	460d      	mov	r5, r1
 8012d2c:	4614      	mov	r4, r2
 8012d2e:	4606      	mov	r6, r0
 8012d30:	b118      	cbz	r0, 8012d3a <_putc_r+0x12>
 8012d32:	6983      	ldr	r3, [r0, #24]
 8012d34:	b90b      	cbnz	r3, 8012d3a <_putc_r+0x12>
 8012d36:	f7fe fbc3 	bl	80114c0 <__sinit>
 8012d3a:	4b1c      	ldr	r3, [pc, #112]	; (8012dac <_putc_r+0x84>)
 8012d3c:	429c      	cmp	r4, r3
 8012d3e:	d124      	bne.n	8012d8a <_putc_r+0x62>
 8012d40:	6874      	ldr	r4, [r6, #4]
 8012d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d44:	07d8      	lsls	r0, r3, #31
 8012d46:	d405      	bmi.n	8012d54 <_putc_r+0x2c>
 8012d48:	89a3      	ldrh	r3, [r4, #12]
 8012d4a:	0599      	lsls	r1, r3, #22
 8012d4c:	d402      	bmi.n	8012d54 <_putc_r+0x2c>
 8012d4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d50:	f7fe ffd9 	bl	8011d06 <__retarget_lock_acquire_recursive>
 8012d54:	68a3      	ldr	r3, [r4, #8]
 8012d56:	3b01      	subs	r3, #1
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	60a3      	str	r3, [r4, #8]
 8012d5c:	da05      	bge.n	8012d6a <_putc_r+0x42>
 8012d5e:	69a2      	ldr	r2, [r4, #24]
 8012d60:	4293      	cmp	r3, r2
 8012d62:	db1c      	blt.n	8012d9e <_putc_r+0x76>
 8012d64:	b2eb      	uxtb	r3, r5
 8012d66:	2b0a      	cmp	r3, #10
 8012d68:	d019      	beq.n	8012d9e <_putc_r+0x76>
 8012d6a:	6823      	ldr	r3, [r4, #0]
 8012d6c:	1c5a      	adds	r2, r3, #1
 8012d6e:	6022      	str	r2, [r4, #0]
 8012d70:	701d      	strb	r5, [r3, #0]
 8012d72:	b2ed      	uxtb	r5, r5
 8012d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d76:	07da      	lsls	r2, r3, #31
 8012d78:	d405      	bmi.n	8012d86 <_putc_r+0x5e>
 8012d7a:	89a3      	ldrh	r3, [r4, #12]
 8012d7c:	059b      	lsls	r3, r3, #22
 8012d7e:	d402      	bmi.n	8012d86 <_putc_r+0x5e>
 8012d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d82:	f7fe ffc1 	bl	8011d08 <__retarget_lock_release_recursive>
 8012d86:	4628      	mov	r0, r5
 8012d88:	bd70      	pop	{r4, r5, r6, pc}
 8012d8a:	4b09      	ldr	r3, [pc, #36]	; (8012db0 <_putc_r+0x88>)
 8012d8c:	429c      	cmp	r4, r3
 8012d8e:	d101      	bne.n	8012d94 <_putc_r+0x6c>
 8012d90:	68b4      	ldr	r4, [r6, #8]
 8012d92:	e7d6      	b.n	8012d42 <_putc_r+0x1a>
 8012d94:	4b07      	ldr	r3, [pc, #28]	; (8012db4 <_putc_r+0x8c>)
 8012d96:	429c      	cmp	r4, r3
 8012d98:	bf08      	it	eq
 8012d9a:	68f4      	ldreq	r4, [r6, #12]
 8012d9c:	e7d1      	b.n	8012d42 <_putc_r+0x1a>
 8012d9e:	4629      	mov	r1, r5
 8012da0:	4622      	mov	r2, r4
 8012da2:	4630      	mov	r0, r6
 8012da4:	f7fd fb1a 	bl	80103dc <__swbuf_r>
 8012da8:	4605      	mov	r5, r0
 8012daa:	e7e3      	b.n	8012d74 <_putc_r+0x4c>
 8012dac:	0801419c 	.word	0x0801419c
 8012db0:	080141bc 	.word	0x080141bc
 8012db4:	0801417c 	.word	0x0801417c

08012db8 <nan>:
 8012db8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012dc0 <nan+0x8>
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	00000000 	.word	0x00000000
 8012dc4:	7ff80000 	.word	0x7ff80000

08012dc8 <__sread>:
 8012dc8:	b510      	push	{r4, lr}
 8012dca:	460c      	mov	r4, r1
 8012dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dd0:	f000 f8f2 	bl	8012fb8 <_read_r>
 8012dd4:	2800      	cmp	r0, #0
 8012dd6:	bfab      	itete	ge
 8012dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012dda:	89a3      	ldrhlt	r3, [r4, #12]
 8012ddc:	181b      	addge	r3, r3, r0
 8012dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012de2:	bfac      	ite	ge
 8012de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8012de6:	81a3      	strhlt	r3, [r4, #12]
 8012de8:	bd10      	pop	{r4, pc}

08012dea <__swrite>:
 8012dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dee:	461f      	mov	r7, r3
 8012df0:	898b      	ldrh	r3, [r1, #12]
 8012df2:	05db      	lsls	r3, r3, #23
 8012df4:	4605      	mov	r5, r0
 8012df6:	460c      	mov	r4, r1
 8012df8:	4616      	mov	r6, r2
 8012dfa:	d505      	bpl.n	8012e08 <__swrite+0x1e>
 8012dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e00:	2302      	movs	r3, #2
 8012e02:	2200      	movs	r2, #0
 8012e04:	f000 f87c 	bl	8012f00 <_lseek_r>
 8012e08:	89a3      	ldrh	r3, [r4, #12]
 8012e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e12:	81a3      	strh	r3, [r4, #12]
 8012e14:	4632      	mov	r2, r6
 8012e16:	463b      	mov	r3, r7
 8012e18:	4628      	mov	r0, r5
 8012e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e1e:	f000 b823 	b.w	8012e68 <_write_r>

08012e22 <__sseek>:
 8012e22:	b510      	push	{r4, lr}
 8012e24:	460c      	mov	r4, r1
 8012e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e2a:	f000 f869 	bl	8012f00 <_lseek_r>
 8012e2e:	1c43      	adds	r3, r0, #1
 8012e30:	89a3      	ldrh	r3, [r4, #12]
 8012e32:	bf15      	itete	ne
 8012e34:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e3e:	81a3      	strheq	r3, [r4, #12]
 8012e40:	bf18      	it	ne
 8012e42:	81a3      	strhne	r3, [r4, #12]
 8012e44:	bd10      	pop	{r4, pc}

08012e46 <__sclose>:
 8012e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e4a:	f000 b827 	b.w	8012e9c <_close_r>

08012e4e <__ascii_wctomb>:
 8012e4e:	b149      	cbz	r1, 8012e64 <__ascii_wctomb+0x16>
 8012e50:	2aff      	cmp	r2, #255	; 0xff
 8012e52:	bf85      	ittet	hi
 8012e54:	238a      	movhi	r3, #138	; 0x8a
 8012e56:	6003      	strhi	r3, [r0, #0]
 8012e58:	700a      	strbls	r2, [r1, #0]
 8012e5a:	f04f 30ff 	movhi.w	r0, #4294967295
 8012e5e:	bf98      	it	ls
 8012e60:	2001      	movls	r0, #1
 8012e62:	4770      	bx	lr
 8012e64:	4608      	mov	r0, r1
 8012e66:	4770      	bx	lr

08012e68 <_write_r>:
 8012e68:	b538      	push	{r3, r4, r5, lr}
 8012e6a:	4d07      	ldr	r5, [pc, #28]	; (8012e88 <_write_r+0x20>)
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	4608      	mov	r0, r1
 8012e70:	4611      	mov	r1, r2
 8012e72:	2200      	movs	r2, #0
 8012e74:	602a      	str	r2, [r5, #0]
 8012e76:	461a      	mov	r2, r3
 8012e78:	f7f0 ff31 	bl	8003cde <_write>
 8012e7c:	1c43      	adds	r3, r0, #1
 8012e7e:	d102      	bne.n	8012e86 <_write_r+0x1e>
 8012e80:	682b      	ldr	r3, [r5, #0]
 8012e82:	b103      	cbz	r3, 8012e86 <_write_r+0x1e>
 8012e84:	6023      	str	r3, [r4, #0]
 8012e86:	bd38      	pop	{r3, r4, r5, pc}
 8012e88:	2000172c 	.word	0x2000172c

08012e8c <abort>:
 8012e8c:	b508      	push	{r3, lr}
 8012e8e:	2006      	movs	r0, #6
 8012e90:	f000 f8cc 	bl	801302c <raise>
 8012e94:	2001      	movs	r0, #1
 8012e96:	f7f0 fefb 	bl	8003c90 <_exit>
	...

08012e9c <_close_r>:
 8012e9c:	b538      	push	{r3, r4, r5, lr}
 8012e9e:	4d06      	ldr	r5, [pc, #24]	; (8012eb8 <_close_r+0x1c>)
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	4608      	mov	r0, r1
 8012ea6:	602b      	str	r3, [r5, #0]
 8012ea8:	f7f0 ff35 	bl	8003d16 <_close>
 8012eac:	1c43      	adds	r3, r0, #1
 8012eae:	d102      	bne.n	8012eb6 <_close_r+0x1a>
 8012eb0:	682b      	ldr	r3, [r5, #0]
 8012eb2:	b103      	cbz	r3, 8012eb6 <_close_r+0x1a>
 8012eb4:	6023      	str	r3, [r4, #0]
 8012eb6:	bd38      	pop	{r3, r4, r5, pc}
 8012eb8:	2000172c 	.word	0x2000172c

08012ebc <_fstat_r>:
 8012ebc:	b538      	push	{r3, r4, r5, lr}
 8012ebe:	4d07      	ldr	r5, [pc, #28]	; (8012edc <_fstat_r+0x20>)
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	4604      	mov	r4, r0
 8012ec4:	4608      	mov	r0, r1
 8012ec6:	4611      	mov	r1, r2
 8012ec8:	602b      	str	r3, [r5, #0]
 8012eca:	f7f0 ff30 	bl	8003d2e <_fstat>
 8012ece:	1c43      	adds	r3, r0, #1
 8012ed0:	d102      	bne.n	8012ed8 <_fstat_r+0x1c>
 8012ed2:	682b      	ldr	r3, [r5, #0]
 8012ed4:	b103      	cbz	r3, 8012ed8 <_fstat_r+0x1c>
 8012ed6:	6023      	str	r3, [r4, #0]
 8012ed8:	bd38      	pop	{r3, r4, r5, pc}
 8012eda:	bf00      	nop
 8012edc:	2000172c 	.word	0x2000172c

08012ee0 <_isatty_r>:
 8012ee0:	b538      	push	{r3, r4, r5, lr}
 8012ee2:	4d06      	ldr	r5, [pc, #24]	; (8012efc <_isatty_r+0x1c>)
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	4608      	mov	r0, r1
 8012eea:	602b      	str	r3, [r5, #0]
 8012eec:	f7f0 ff2f 	bl	8003d4e <_isatty>
 8012ef0:	1c43      	adds	r3, r0, #1
 8012ef2:	d102      	bne.n	8012efa <_isatty_r+0x1a>
 8012ef4:	682b      	ldr	r3, [r5, #0]
 8012ef6:	b103      	cbz	r3, 8012efa <_isatty_r+0x1a>
 8012ef8:	6023      	str	r3, [r4, #0]
 8012efa:	bd38      	pop	{r3, r4, r5, pc}
 8012efc:	2000172c 	.word	0x2000172c

08012f00 <_lseek_r>:
 8012f00:	b538      	push	{r3, r4, r5, lr}
 8012f02:	4d07      	ldr	r5, [pc, #28]	; (8012f20 <_lseek_r+0x20>)
 8012f04:	4604      	mov	r4, r0
 8012f06:	4608      	mov	r0, r1
 8012f08:	4611      	mov	r1, r2
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	602a      	str	r2, [r5, #0]
 8012f0e:	461a      	mov	r2, r3
 8012f10:	f7f0 ff28 	bl	8003d64 <_lseek>
 8012f14:	1c43      	adds	r3, r0, #1
 8012f16:	d102      	bne.n	8012f1e <_lseek_r+0x1e>
 8012f18:	682b      	ldr	r3, [r5, #0]
 8012f1a:	b103      	cbz	r3, 8012f1e <_lseek_r+0x1e>
 8012f1c:	6023      	str	r3, [r4, #0]
 8012f1e:	bd38      	pop	{r3, r4, r5, pc}
 8012f20:	2000172c 	.word	0x2000172c

08012f24 <memmove>:
 8012f24:	4288      	cmp	r0, r1
 8012f26:	b510      	push	{r4, lr}
 8012f28:	eb01 0402 	add.w	r4, r1, r2
 8012f2c:	d902      	bls.n	8012f34 <memmove+0x10>
 8012f2e:	4284      	cmp	r4, r0
 8012f30:	4623      	mov	r3, r4
 8012f32:	d807      	bhi.n	8012f44 <memmove+0x20>
 8012f34:	1e43      	subs	r3, r0, #1
 8012f36:	42a1      	cmp	r1, r4
 8012f38:	d008      	beq.n	8012f4c <memmove+0x28>
 8012f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f42:	e7f8      	b.n	8012f36 <memmove+0x12>
 8012f44:	4402      	add	r2, r0
 8012f46:	4601      	mov	r1, r0
 8012f48:	428a      	cmp	r2, r1
 8012f4a:	d100      	bne.n	8012f4e <memmove+0x2a>
 8012f4c:	bd10      	pop	{r4, pc}
 8012f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f56:	e7f7      	b.n	8012f48 <memmove+0x24>

08012f58 <_realloc_r>:
 8012f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5c:	4680      	mov	r8, r0
 8012f5e:	4614      	mov	r4, r2
 8012f60:	460e      	mov	r6, r1
 8012f62:	b921      	cbnz	r1, 8012f6e <_realloc_r+0x16>
 8012f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f68:	4611      	mov	r1, r2
 8012f6a:	f7fb bae9 	b.w	800e540 <_malloc_r>
 8012f6e:	b92a      	cbnz	r2, 8012f7c <_realloc_r+0x24>
 8012f70:	f7fb fa7a 	bl	800e468 <_free_r>
 8012f74:	4625      	mov	r5, r4
 8012f76:	4628      	mov	r0, r5
 8012f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f7c:	f000 f872 	bl	8013064 <_malloc_usable_size_r>
 8012f80:	4284      	cmp	r4, r0
 8012f82:	4607      	mov	r7, r0
 8012f84:	d802      	bhi.n	8012f8c <_realloc_r+0x34>
 8012f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f8a:	d812      	bhi.n	8012fb2 <_realloc_r+0x5a>
 8012f8c:	4621      	mov	r1, r4
 8012f8e:	4640      	mov	r0, r8
 8012f90:	f7fb fad6 	bl	800e540 <_malloc_r>
 8012f94:	4605      	mov	r5, r0
 8012f96:	2800      	cmp	r0, #0
 8012f98:	d0ed      	beq.n	8012f76 <_realloc_r+0x1e>
 8012f9a:	42bc      	cmp	r4, r7
 8012f9c:	4622      	mov	r2, r4
 8012f9e:	4631      	mov	r1, r6
 8012fa0:	bf28      	it	cs
 8012fa2:	463a      	movcs	r2, r7
 8012fa4:	f7fb fa4a 	bl	800e43c <memcpy>
 8012fa8:	4631      	mov	r1, r6
 8012faa:	4640      	mov	r0, r8
 8012fac:	f7fb fa5c 	bl	800e468 <_free_r>
 8012fb0:	e7e1      	b.n	8012f76 <_realloc_r+0x1e>
 8012fb2:	4635      	mov	r5, r6
 8012fb4:	e7df      	b.n	8012f76 <_realloc_r+0x1e>
	...

08012fb8 <_read_r>:
 8012fb8:	b538      	push	{r3, r4, r5, lr}
 8012fba:	4d07      	ldr	r5, [pc, #28]	; (8012fd8 <_read_r+0x20>)
 8012fbc:	4604      	mov	r4, r0
 8012fbe:	4608      	mov	r0, r1
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	602a      	str	r2, [r5, #0]
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	f7f0 fe6c 	bl	8003ca4 <_read>
 8012fcc:	1c43      	adds	r3, r0, #1
 8012fce:	d102      	bne.n	8012fd6 <_read_r+0x1e>
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	b103      	cbz	r3, 8012fd6 <_read_r+0x1e>
 8012fd4:	6023      	str	r3, [r4, #0]
 8012fd6:	bd38      	pop	{r3, r4, r5, pc}
 8012fd8:	2000172c 	.word	0x2000172c

08012fdc <_raise_r>:
 8012fdc:	291f      	cmp	r1, #31
 8012fde:	b538      	push	{r3, r4, r5, lr}
 8012fe0:	4604      	mov	r4, r0
 8012fe2:	460d      	mov	r5, r1
 8012fe4:	d904      	bls.n	8012ff0 <_raise_r+0x14>
 8012fe6:	2316      	movs	r3, #22
 8012fe8:	6003      	str	r3, [r0, #0]
 8012fea:	f04f 30ff 	mov.w	r0, #4294967295
 8012fee:	bd38      	pop	{r3, r4, r5, pc}
 8012ff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012ff2:	b112      	cbz	r2, 8012ffa <_raise_r+0x1e>
 8012ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ff8:	b94b      	cbnz	r3, 801300e <_raise_r+0x32>
 8012ffa:	4620      	mov	r0, r4
 8012ffc:	f000 f830 	bl	8013060 <_getpid_r>
 8013000:	462a      	mov	r2, r5
 8013002:	4601      	mov	r1, r0
 8013004:	4620      	mov	r0, r4
 8013006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801300a:	f000 b817 	b.w	801303c <_kill_r>
 801300e:	2b01      	cmp	r3, #1
 8013010:	d00a      	beq.n	8013028 <_raise_r+0x4c>
 8013012:	1c59      	adds	r1, r3, #1
 8013014:	d103      	bne.n	801301e <_raise_r+0x42>
 8013016:	2316      	movs	r3, #22
 8013018:	6003      	str	r3, [r0, #0]
 801301a:	2001      	movs	r0, #1
 801301c:	e7e7      	b.n	8012fee <_raise_r+0x12>
 801301e:	2400      	movs	r4, #0
 8013020:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013024:	4628      	mov	r0, r5
 8013026:	4798      	blx	r3
 8013028:	2000      	movs	r0, #0
 801302a:	e7e0      	b.n	8012fee <_raise_r+0x12>

0801302c <raise>:
 801302c:	4b02      	ldr	r3, [pc, #8]	; (8013038 <raise+0xc>)
 801302e:	4601      	mov	r1, r0
 8013030:	6818      	ldr	r0, [r3, #0]
 8013032:	f7ff bfd3 	b.w	8012fdc <_raise_r>
 8013036:	bf00      	nop
 8013038:	2000001c 	.word	0x2000001c

0801303c <_kill_r>:
 801303c:	b538      	push	{r3, r4, r5, lr}
 801303e:	4d07      	ldr	r5, [pc, #28]	; (801305c <_kill_r+0x20>)
 8013040:	2300      	movs	r3, #0
 8013042:	4604      	mov	r4, r0
 8013044:	4608      	mov	r0, r1
 8013046:	4611      	mov	r1, r2
 8013048:	602b      	str	r3, [r5, #0]
 801304a:	f7f0 fe11 	bl	8003c70 <_kill>
 801304e:	1c43      	adds	r3, r0, #1
 8013050:	d102      	bne.n	8013058 <_kill_r+0x1c>
 8013052:	682b      	ldr	r3, [r5, #0]
 8013054:	b103      	cbz	r3, 8013058 <_kill_r+0x1c>
 8013056:	6023      	str	r3, [r4, #0]
 8013058:	bd38      	pop	{r3, r4, r5, pc}
 801305a:	bf00      	nop
 801305c:	2000172c 	.word	0x2000172c

08013060 <_getpid_r>:
 8013060:	f7f0 bdfe 	b.w	8003c60 <_getpid>

08013064 <_malloc_usable_size_r>:
 8013064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013068:	1f18      	subs	r0, r3, #4
 801306a:	2b00      	cmp	r3, #0
 801306c:	bfbc      	itt	lt
 801306e:	580b      	ldrlt	r3, [r1, r0]
 8013070:	18c0      	addlt	r0, r0, r3
 8013072:	4770      	bx	lr

08013074 <_init>:
 8013074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013076:	bf00      	nop
 8013078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801307a:	bc08      	pop	{r3}
 801307c:	469e      	mov	lr, r3
 801307e:	4770      	bx	lr

08013080 <_fini>:
 8013080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013082:	bf00      	nop
 8013084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013086:	bc08      	pop	{r3}
 8013088:	469e      	mov	lr, r3
 801308a:	4770      	bx	lr
