/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef GETTEMPERATURESCREENVIEWBASE_HPP
#define GETTEMPERATURESCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/gettemperaturescreen_screen/GetTemperatureScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/mixins/ClickListener.hpp>

class GetTemperatureScreenViewBase : public touchgfx::View<GetTemperatureScreenPresenter>
{
public:
    GetTemperatureScreenViewBase();
    virtual ~GetTemperatureScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage BackgroudImage;
    touchgfx::ButtonWithIcon bRightSlide;
    touchgfx::ButtonWithIcon bLeftSlide;
    touchgfx::TextAreaWithOneWildcard L_temperature;
    touchgfx::ClickListener< touchgfx::ButtonWithIcon > B_refreshTemperature;

    /*
     * Wildcard Buffers
     */
    static const uint16_t L_TEMPERATURE_SIZE = 20;
    touchgfx::Unicode::UnicodeChar L_temperatureBuffer[L_TEMPERATURE_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<GetTemperatureScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // GETTEMPERATURESCREENVIEWBASE_HPP
