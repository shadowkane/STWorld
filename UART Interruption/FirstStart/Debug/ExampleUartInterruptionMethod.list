
ExampleUartInterruptionMethod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d008  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800d1b8  0800d1b8  0001d1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d25c  0800d25c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d25c  0800d25c  0001d25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d264  0800d264  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d264  0800d264  0001d264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d268  0800d268  0001d268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00008d7c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008e10  20008e10  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bda5  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ce2  00000000  00000000  0004be69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002330  00000000  00000000  00051b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020f0  00000000  00000000  00053e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b715  00000000  00000000  00055f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c39c  00000000  00000000  00081685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f52a9  00000000  00000000  000ada21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a2cca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097b8  00000000  00000000  001a2d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d1a0 	.word	0x0800d1a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800d1a0 	.word	0x0800d1a0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200000b0 	.word	0x200000b0
 8000558:	20000108 	.word	0x20000108

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f001 f8df 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f833 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 faa1 	bl	8000ab0 <MX_GPIO_Init>
  MX_CRC_Init();
 800056e:	f000 f899 	bl	80006a4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000572:	f000 f8ab 	bl	80006cc <MX_DMA2D_Init>
  MX_FMC_Init();
 8000576:	f000 fa4b 	bl	8000a10 <MX_FMC_Init>
  MX_I2C3_Init();
 800057a:	f000 f8d9 	bl	8000730 <MX_I2C3_Init>
  MX_LTDC_Init();
 800057e:	f000 f917 	bl	80007b0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000582:	f000 f995 	bl	80008b0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000586:	f000 f9c9 	bl	800091c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800058a:	f000 fa17 	bl	80009bc <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart1, (uint8_t*)u8ReceivedData, 2);
 800058e:	2202      	movs	r2, #2
 8000590:	490b      	ldr	r1, [pc, #44]	; (80005c0 <main+0x64>)
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <main+0x68>)
 8000594:	f005 fc79 	bl	8005e8a <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <main+0x6c>)
 800059a:	1d3c      	adds	r4, r7, #4
 800059c:	461d      	mov	r5, r3
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f009 ff2b 	bl	800a40a <osThreadCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <main+0x70>)
 80005b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ba:	f009 ff1f 	bl	800a3fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005be:	e7fe      	b.n	80005be <main+0x62>
 80005c0:	20000568 	.word	0x20000568
 80005c4:	200004ec 	.word	0x200004ec
 80005c8:	0800d1c4 	.word	0x0800d1c4
 80005cc:	20000564 	.word	0x20000564

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f00c fcd8 	bl	800cf94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <SystemClock_Config+0xd0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000648:	2348      	movs	r3, #72	; 0x48
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000650:	2303      	movs	r3, #3
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f003 ff6f 	bl	800453c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000664:	f000 fbbc 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2102      	movs	r1, #2
 8000684:	4618      	mov	r0, r3
 8000686:	f004 f9d1 	bl	8004a2c <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000690:	f000 fba6 	bl	8000de0 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_CRC_Init+0x20>)
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <MX_CRC_Init+0x24>)
 80006ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_CRC_Init+0x20>)
 80006b0:	f001 f980 	bl	80019b4 <HAL_CRC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ba:	f000 fb91 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000308 	.word	0x20000308
 80006c8:	40023000 	.word	0x40023000

080006cc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <MX_DMA2D_Init+0x60>)
 80006d4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <MX_DMA2D_Init+0x5c>)
 8000702:	f001 fa05 	bl	8001b10 <HAL_DMA2D_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800070c:	f000 fb68 	bl	8000de0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000710:	2101      	movs	r1, #1
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_DMA2D_Init+0x5c>)
 8000714:	f001 fb56 	bl	8001dc4 <HAL_DMA2D_ConfigLayer>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800071e:	f000 fb5f 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000310 	.word	0x20000310
 800072c:	4002b000 	.word	0x4002b000

08000730 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_I2C3_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_I2C3_Init+0x74>)
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <MX_I2C3_Init+0x7c>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_I2C3_Init+0x74>)
 800074e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2C3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_I2C3_Init+0x74>)
 800076e:	f003 f9bd 	bl	8003aec <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000778:	f000 fb32 	bl	8000de0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000780:	f003 faf8 	bl	8003d74 <HAL_I2CEx_ConfigAnalogFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800078a:	f000 fb29 	bl	8000de0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000792:	f003 fb2b 	bl	8003dec <HAL_I2CEx_ConfigDigitalFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 fb20 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000350 	.word	0x20000350
 80007a8:	40005c00 	.word	0x40005c00
 80007ac:	000186a0 	.word	0x000186a0

080007b0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08e      	sub	sp, #56	; 0x38
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2234      	movs	r2, #52	; 0x34
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f00c fbe9 	bl	800cf94 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007c4:	4a39      	ldr	r2, [pc, #228]	; (80008ac <MX_LTDC_Init+0xfc>)
 80007c6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007e2:	2209      	movs	r2, #9
 80007e4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007ee:	221d      	movs	r2, #29
 80007f0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007fa:	f240 120d 	movw	r2, #269	; 0x10d
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000802:	f240 1243 	movw	r2, #323	; 0x143
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_LTDC_Init+0xf8>)
 800080a:	f240 1217 	movw	r2, #279	; 0x117
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000812:	f240 1247 	movw	r2, #327	; 0x147
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_LTDC_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_LTDC_Init+0xf8>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000830:	481d      	ldr	r0, [pc, #116]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000832:	f003 fb1b 	bl	8003e6c <HAL_LTDC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 fad0 	bl	8000de0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000844:	23f0      	movs	r3, #240	; 0xf0
 8000846:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800084c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000850:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000852:	2302      	movs	r3, #2
 8000854:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000856:	23ff      	movs	r3, #255	; 0xff
 8000858:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800085e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000862:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000864:	2307      	movs	r3, #7
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000868:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800086e:	23f0      	movs	r3, #240	; 0xf0
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000872:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000892:	f003 fc7d 	bl	8004190 <HAL_LTDC_ConfigLayer>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800089c:	f000 faa0 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200003a4 	.word	0x200003a4
 80008ac:	40016800 	.word	0x40016800

080008b0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_SPI5_Init+0x64>)
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <MX_SPI5_Init+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_SPI5_Init+0x64>)
 80008bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_SPI5_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_SPI5_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_SPI5_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_SPI5_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_SPI5_Init+0x64>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_SPI5_Init+0x64>)
 80008e4:	2218      	movs	r2, #24
 80008e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_SPI5_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_SPI5_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_SPI5_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_SPI5_Init+0x64>)
 80008fc:	220a      	movs	r2, #10
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_SPI5_Init+0x64>)
 8000902:	f004 fcd9 	bl	80052b8 <HAL_SPI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 fa68 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000044c 	.word	0x2000044c
 8000918:	40015000 	.word	0x40015000

0800091c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_TIM1_Init+0x98>)
 800093a:	4a1f      	ldr	r2, [pc, #124]	; (80009b8 <MX_TIM1_Init+0x9c>)
 800093c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_TIM1_Init+0x98>)
 800094c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000950:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_TIM1_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000966:	f004 fd30 	bl	80053ca <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 fa36 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000982:	f004 fee9 	bl	8005758 <HAL_TIM_ConfigClockSource>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800098c:	f000 fa28 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_TIM1_Init+0x98>)
 800099e:	f005 f905 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009a8:	f000 fa1a 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200004a4 	.word	0x200004a4
 80009b8:	40010000 	.word	0x40010000

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART1_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f005 f96a 	bl	8005ccc <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f9ef 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200004ec 	.word	0x200004ec
 8000a0c:	40011000 	.word	0x40011000

08000a10 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]
 8000a26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a2a:	4a20      	ldr	r2, [pc, #128]	; (8000aac <MX_FMC_Init+0x9c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a48:	2240      	movs	r2, #64	; 0x40
 8000a4a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a4e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a52:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a60:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a80:	2303      	movs	r3, #3
 8000a82:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a92:	f004 fbdd 	bl	8005250 <HAL_SDRAM_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a9c:	f000 f9a0 	bl	8000de0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000530 	.word	0x20000530
 8000aac:	a0000140 	.word	0xa0000140

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	; 0x38
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	4b7b      	ldr	r3, [pc, #492]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a7a      	ldr	r2, [pc, #488]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b78      	ldr	r3, [pc, #480]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	4b74      	ldr	r3, [pc, #464]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a73      	ldr	r2, [pc, #460]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b71      	ldr	r3, [pc, #452]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b6d      	ldr	r3, [pc, #436]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a6c      	ldr	r2, [pc, #432]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b6a      	ldr	r3, [pc, #424]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b66      	ldr	r3, [pc, #408]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a65      	ldr	r2, [pc, #404]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b63      	ldr	r3, [pc, #396]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b5f      	ldr	r3, [pc, #380]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a5e      	ldr	r2, [pc, #376]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b5c      	ldr	r3, [pc, #368]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b58      	ldr	r3, [pc, #352]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a57      	ldr	r2, [pc, #348]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b55      	ldr	r3, [pc, #340]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b51      	ldr	r3, [pc, #324]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a50      	ldr	r2, [pc, #320]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b78:	f043 0310 	orr.w	r3, r3, #16
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b4e      	ldr	r3, [pc, #312]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b4a      	ldr	r3, [pc, #296]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a49      	ldr	r2, [pc, #292]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b47      	ldr	r3, [pc, #284]	; (8000cb8 <MX_GPIO_Init+0x208>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2116      	movs	r1, #22
 8000baa:	4844      	ldr	r0, [pc, #272]	; (8000cbc <MX_GPIO_Init+0x20c>)
 8000bac:	f001 fb60 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	4842      	ldr	r0, [pc, #264]	; (8000cc0 <MX_GPIO_Init+0x210>)
 8000bb6:	f001 fb5b 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000bc0:	4840      	ldr	r0, [pc, #256]	; (8000cc4 <MX_GPIO_Init+0x214>)
 8000bc2:	f001 fb55 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bcc:	483e      	ldr	r0, [pc, #248]	; (8000cc8 <MX_GPIO_Init+0x218>)
 8000bce:	f001 fb4f 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bd2:	2316      	movs	r3, #22
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4834      	ldr	r0, [pc, #208]	; (8000cbc <MX_GPIO_Init+0x20c>)
 8000bea:	f001 f97d 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bee:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	482e      	ldr	r0, [pc, #184]	; (8000cc0 <MX_GPIO_Init+0x210>)
 8000c06:	f001 f96f 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4827      	ldr	r0, [pc, #156]	; (8000cc0 <MX_GPIO_Init+0x210>)
 8000c22:	f001 f961 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c26:	2320      	movs	r3, #32
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4820      	ldr	r0, [pc, #128]	; (8000cbc <MX_GPIO_Init+0x20c>)
 8000c3c:	f001 f954 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c40:	2304      	movs	r3, #4
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	481e      	ldr	r0, [pc, #120]	; (8000ccc <MX_GPIO_Init+0x21c>)
 8000c54:	f001 f948 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <MX_GPIO_Init+0x214>)
 8000c6e:	f001 f93b 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <MX_GPIO_Init+0x214>)
 8000c8c:	f001 f92c 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c90:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <MX_GPIO_Init+0x218>)
 8000caa:	f001 f91d 	bl	8001ee8 <HAL_GPIO_Init>

}
 8000cae:	bf00      	nop
 8000cb0:	3738      	adds	r7, #56	; 0x38
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020c00 	.word	0x40020c00
 8000cc8:	40021800 	.word	0x40021800
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, u8ReceivedData, sizeof(u8ReceivedData), 100);

	// if first Char is '0', then turn LED3 off
	if(u8ReceivedData[0]=='0')
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_UART_RxCpltCallback+0x44>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b30      	cmp	r3, #48	; 0x30
 8000cde:	d106      	bne.n	8000cee <HAL_UART_RxCpltCallback+0x1e>
	{
	  // turn LED3 off
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <HAL_UART_RxCpltCallback+0x48>)
 8000ce8:	f001 fac2 	bl	8002270 <HAL_GPIO_WritePin>
 8000cec:	e009      	b.n	8000d02 <HAL_UART_RxCpltCallback+0x32>
	}
	// if first Char is '1', then turn LED3 on
	else if(u8ReceivedData[0]=='1')
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_UART_RxCpltCallback+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b31      	cmp	r3, #49	; 0x31
 8000cf4:	d105      	bne.n	8000d02 <HAL_UART_RxCpltCallback+0x32>
	{
	  // turn LED3 on
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <HAL_UART_RxCpltCallback+0x48>)
 8000cfe:	f001 fab7 	bl	8002270 <HAL_GPIO_WritePin>
	}

	HAL_UART_Receive_IT (&huart1, (uint8_t*)u8ReceivedData, 2);
 8000d02:	2202      	movs	r2, #2
 8000d04:	4903      	ldr	r1, [pc, #12]	; (8000d14 <HAL_UART_RxCpltCallback+0x44>)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_UART_RxCpltCallback+0x4c>)
 8000d08:	f005 f8bf 	bl	8005e8a <HAL_UART_Receive_IT>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000568 	.word	0x20000568
 8000d18:	40021800 	.word	0x40021800
 8000d1c:	200004ec 	.word	0x200004ec

08000d20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d20:	b5b0      	push	{r4, r5, r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d28:	f00b fde4 	bl	800c8f4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	uint8_t cMsg[30]="Button clicked\r\n";
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <StartDefaultTask+0x8c>)
 8000d2e:	f107 0408 	add.w	r4, r7, #8
 8000d32:	461d      	mov	r5, r3
 8000d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d38:	682b      	ldr	r3, [r5, #0]
 8000d3a:	7023      	strb	r3, [r4, #0]
 8000d3c:	f107 0319 	add.w	r3, r7, #25
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	731a      	strb	r2, [r3, #12]
	uint8_t bButtonClicked = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Infinite loop */
	for(;;)
	{
		// if button change state to clicked, then save the new state of the button then send message and toggle LED4
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&&bButtonClicked==0)
 8000d50:	2101      	movs	r1, #1
 8000d52:	4817      	ldr	r0, [pc, #92]	; (8000db0 <StartDefaultTask+0x90>)
 8000d54:	f001 fa74 	bl	8002240 <HAL_GPIO_ReadPin>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d013      	beq.n	8000d86 <StartDefaultTask+0x66>
 8000d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10f      	bne.n	8000d86 <StartDefaultTask+0x66>
		{
			// save button state
			bButtonClicked=1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			// toggle LED4
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <StartDefaultTask+0x94>)
 8000d72:	f001 fa96 	bl	80022a2 <HAL_GPIO_TogglePin>
			// Send message
			HAL_UART_Transmit(&huart1, cMsg, sizeof(cMsg), 100);
 8000d76:	f107 0108 	add.w	r1, r7, #8
 8000d7a:	2364      	movs	r3, #100	; 0x64
 8000d7c:	221e      	movs	r2, #30
 8000d7e:	480e      	ldr	r0, [pc, #56]	; (8000db8 <StartDefaultTask+0x98>)
 8000d80:	f004 fff1 	bl	8005d66 <HAL_UART_Transmit>
 8000d84:	e00d      	b.n	8000da2 <StartDefaultTask+0x82>
		}
		// if button released then save the new state of the button
		else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0 && bButtonClicked==1)
 8000d86:	2101      	movs	r1, #1
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <StartDefaultTask+0x90>)
 8000d8a:	f001 fa59 	bl	8002240 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d106      	bne.n	8000da2 <StartDefaultTask+0x82>
 8000d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d102      	bne.n	8000da2 <StartDefaultTask+0x82>
		{
			// save button state
			bButtonClicked=0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		osDelay(10);
 8000da2:	200a      	movs	r0, #10
 8000da4:	f009 fb7d 	bl	800a4a2 <osDelay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&&bButtonClicked==0)
 8000da8:	e7d2      	b.n	8000d50 <StartDefaultTask+0x30>
 8000daa:	bf00      	nop
 8000dac:	0800d1e0 	.word	0x0800d1e0
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40021800 	.word	0x40021800
 8000db8:	200004ec 	.word	0x200004ec

08000dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dce:	f000 fccb 	bl	8001768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40001000 	.word	0x40001000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_MspInit+0x54>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <HAL_MspInit+0x54>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x54>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_MspInit+0x54>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_MspInit+0x54>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_MspInit+0x54>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	210f      	movs	r1, #15
 8000e2e:	f06f 0001 	mvn.w	r0, #1
 8000e32:	f000 fd95 	bl	8001960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_CRC_MspInit+0x3c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10d      	bne.n	8000e72 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_CRC_MspInit+0x40>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_CRC_MspInit+0x40>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_CRC_MspInit+0x40>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023000 	.word	0x40023000
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_DMA2D_MspInit+0x48>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d115      	bne.n	8000ec6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_DMA2D_MspInit+0x4c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_DMA2D_MspInit+0x4c>)
 8000ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_DMA2D_MspInit+0x4c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	205a      	movs	r0, #90	; 0x5a
 8000ebc:	f000 fd50 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ec0:	205a      	movs	r0, #90	; 0x5a
 8000ec2:	f000 fd69 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	4002b000 	.word	0x4002b000
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a29      	ldr	r2, [pc, #164]	; (8000f9c <HAL_I2C_MspInit+0xc4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d14b      	bne.n	8000f92 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f44:	2304      	movs	r3, #4
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <HAL_I2C_MspInit+0xcc>)
 8000f50:	f000 ffca 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5a:	2312      	movs	r3, #18
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f66:	2304      	movs	r3, #4
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <HAL_I2C_MspInit+0xd0>)
 8000f72:	f000 ffb9 	bl	8001ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40005c00 	.word	0x40005c00
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09a      	sub	sp, #104	; 0x68
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	2230      	movs	r2, #48	; 0x30
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00b ffe1 	bl	800cf94 <memset>
  if(hltdc->Instance==LTDC)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a85      	ldr	r2, [pc, #532]	; (80011ec <HAL_LTDC_MspInit+0x240>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	f040 8102 	bne.w	80011e2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fe2:	2332      	movs	r3, #50	; 0x32
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fea:	2300      	movs	r3, #0
 8000fec:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 ff6c 	bl	8004ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000ffe:	f7ff feef 	bl	8000de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	4b7a      	ldr	r3, [pc, #488]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a79      	ldr	r2, [pc, #484]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 800100c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b77      	ldr	r3, [pc, #476]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800101a:	623b      	str	r3, [r7, #32]
 800101c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	4b73      	ldr	r3, [pc, #460]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a72      	ldr	r2, [pc, #456]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b70      	ldr	r3, [pc, #448]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	4b6c      	ldr	r3, [pc, #432]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a6b      	ldr	r2, [pc, #428]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a64      	ldr	r2, [pc, #400]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a5d      	ldr	r2, [pc, #372]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a56      	ldr	r2, [pc, #344]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d8:	230e      	movs	r3, #14
 80010da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e0:	4619      	mov	r1, r3
 80010e2:	4844      	ldr	r0, [pc, #272]	; (80011f4 <HAL_LTDC_MspInit+0x248>)
 80010e4:	f000 ff00 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010e8:	f641 0358 	movw	r3, #6232	; 0x1858
 80010ec:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010fa:	230e      	movs	r3, #14
 80010fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001102:	4619      	mov	r1, r3
 8001104:	483c      	ldr	r0, [pc, #240]	; (80011f8 <HAL_LTDC_MspInit+0x24c>)
 8001106:	f000 feef 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800110a:	2303      	movs	r3, #3
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800111a:	2309      	movs	r3, #9
 800111c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001122:	4619      	mov	r1, r3
 8001124:	4835      	ldr	r0, [pc, #212]	; (80011fc <HAL_LTDC_MspInit+0x250>)
 8001126:	f000 fedf 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800112a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800112e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800113c:	230e      	movs	r3, #14
 800113e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001144:	4619      	mov	r1, r3
 8001146:	482d      	ldr	r0, [pc, #180]	; (80011fc <HAL_LTDC_MspInit+0x250>)
 8001148:	f000 fece 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800114c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001150:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115e:	230e      	movs	r3, #14
 8001160:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001166:	4619      	mov	r1, r3
 8001168:	4825      	ldr	r0, [pc, #148]	; (8001200 <HAL_LTDC_MspInit+0x254>)
 800116a:	f000 febd 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800116e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001172:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001180:	230e      	movs	r3, #14
 8001182:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001188:	4619      	mov	r1, r3
 800118a:	481e      	ldr	r0, [pc, #120]	; (8001204 <HAL_LTDC_MspInit+0x258>)
 800118c:	f000 feac 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001190:	2348      	movs	r3, #72	; 0x48
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a0:	230e      	movs	r3, #14
 80011a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a8:	4619      	mov	r1, r3
 80011aa:	4817      	ldr	r0, [pc, #92]	; (8001208 <HAL_LTDC_MspInit+0x25c>)
 80011ac:	f000 fe9c 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011c2:	2309      	movs	r3, #9
 80011c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <HAL_LTDC_MspInit+0x254>)
 80011ce:	f000 fe8b 	bl	8001ee8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2105      	movs	r1, #5
 80011d6:	2058      	movs	r0, #88	; 0x58
 80011d8:	f000 fbc2 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011dc:	2058      	movs	r0, #88	; 0x58
 80011de:	f000 fbdb 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3768      	adds	r7, #104	; 0x68
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40016800 	.word	0x40016800
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40021800 	.word	0x40021800
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00

0800120c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_SPI_MspInit+0x84>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12c      	bne.n	8001288 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_SPI_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001266:	f44f 7360 	mov.w	r3, #896	; 0x380
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001278:	2305      	movs	r3, #5
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_SPI_MspInit+0x8c>)
 8001284:	f000 fe30 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40015000 	.word	0x40015000
 8001294:	40023800 	.word	0x40023800
 8001298:	40021400 	.word	0x40021400

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_TIM_Base_MspInit+0x3c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10d      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40010000 	.word	0x40010000
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <HAL_UART_MspInit+0x94>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d134      	bne.n	800136c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_UART_MspInit+0x98>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800133a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800134c:	2307      	movs	r3, #7
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4809      	ldr	r0, [pc, #36]	; (800137c <HAL_UART_MspInit+0x9c>)
 8001358:	f000 fdc6 	bl	8001ee8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2105      	movs	r1, #5
 8001360:	2025      	movs	r0, #37	; 0x25
 8001362:	f000 fafd 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001366:	2025      	movs	r0, #37	; 0x25
 8001368:	f000 fb16 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40011000 	.word	0x40011000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_FMC_MspInit+0x104>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d16f      	bne.n	800147c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_FMC_MspInit+0x104>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <HAL_FMC_MspInit+0x108>)
 80013a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013aa:	4a37      	ldr	r2, [pc, #220]	; (8001488 <HAL_FMC_MspInit+0x108>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6393      	str	r3, [r2, #56]	; 0x38
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <HAL_FMC_MspInit+0x108>)
 80013b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80013c2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d0:	230c      	movs	r3, #12
 80013d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	482c      	ldr	r0, [pc, #176]	; (800148c <HAL_FMC_MspInit+0x10c>)
 80013da:	f000 fd85 	bl	8001ee8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013de:	2301      	movs	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ee:	230c      	movs	r3, #12
 80013f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4826      	ldr	r0, [pc, #152]	; (8001490 <HAL_FMC_MspInit+0x110>)
 80013f8:	f000 fd76 	bl	8001ee8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80013fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8001400:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140e:	230c      	movs	r3, #12
 8001410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	481f      	ldr	r0, [pc, #124]	; (8001494 <HAL_FMC_MspInit+0x114>)
 8001418:	f000 fd66 	bl	8001ee8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800141c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001420:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142e:	230c      	movs	r3, #12
 8001430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4818      	ldr	r0, [pc, #96]	; (8001498 <HAL_FMC_MspInit+0x118>)
 8001438:	f000 fd56 	bl	8001ee8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800143c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001440:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800144e:	230c      	movs	r3, #12
 8001450:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4811      	ldr	r0, [pc, #68]	; (800149c <HAL_FMC_MspInit+0x11c>)
 8001458:	f000 fd46 	bl	8001ee8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800145c:	2360      	movs	r3, #96	; 0x60
 800145e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146c:	230c      	movs	r3, #12
 800146e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <HAL_FMC_MspInit+0x120>)
 8001476:	f000 fd37 	bl	8001ee8 <HAL_GPIO_Init>
 800147a:	e000      	b.n	800147e <HAL_FMC_MspInit+0xfe>
    return;
 800147c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000056c 	.word	0x2000056c
 8001488:	40023800 	.word	0x40023800
 800148c:	40021400 	.word	0x40021400
 8001490:	40020800 	.word	0x40020800
 8001494:	40021800 	.word	0x40021800
 8001498:	40021000 	.word	0x40021000
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40020400 	.word	0x40020400

080014a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014ac:	f7ff ff68 	bl	8001380 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	; 0x38
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <HAL_InitTick+0xe4>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a32      	ldr	r2, [pc, #200]	; (800159c <HAL_InitTick+0xe4>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_InitTick+0xe4>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e4:	f107 0210 	add.w	r2, r7, #16
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fcbc 	bl	8004e6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d103      	bne.n	8001506 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014fe:	f003 fc8d 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8001502:	6378      	str	r0, [r7, #52]	; 0x34
 8001504:	e004      	b.n	8001510 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001506:	f003 fc89 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 800150a:	4603      	mov	r3, r0
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <HAL_InitTick+0xe8>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9b      	lsrs	r3, r3, #18
 800151a:	3b01      	subs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_InitTick+0xec>)
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <HAL_InitTick+0xf0>)
 8001522:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_InitTick+0xec>)
 8001526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800152a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_InitTick+0xec>)
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_InitTick+0xec>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_InitTick+0xec>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_InitTick+0xec>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001544:	4817      	ldr	r0, [pc, #92]	; (80015a4 <HAL_InitTick+0xec>)
 8001546:	f003 ff40 	bl	80053ca <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11b      	bne.n	8001590 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001558:	4812      	ldr	r0, [pc, #72]	; (80015a4 <HAL_InitTick+0xec>)
 800155a:	f003 ff85 	bl	8005468 <HAL_TIM_Base_Start_IT>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001568:	2b00      	cmp	r3, #0
 800156a:	d111      	bne.n	8001590 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800156c:	2036      	movs	r0, #54	; 0x36
 800156e:	f000 fa13 	bl	8001998 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d808      	bhi.n	800158a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	2036      	movs	r0, #54	; 0x36
 800157e:	f000 f9ef 	bl	8001960 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_InitTick+0xf4>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e002      	b.n	8001590 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001590:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001594:	4618      	mov	r0, r3
 8001596:	3738      	adds	r7, #56	; 0x38
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	20000570 	.word	0x20000570
 80015a8:	40001000 	.word	0x40001000
 80015ac:	20000004 	.word	0x20000004

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART1_IRQHandler+0x10>)
 80015e2:	f004 fc83 	bl	8005eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200004ec 	.word	0x200004ec

080015f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM6_DAC_IRQHandler+0x10>)
 80015f6:	f003 ffa7 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000570 	.word	0x20000570

08001604 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <OTG_HS_IRQHandler+0x10>)
 800160a:	f001 f8cf 	bl	80027ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20008afc 	.word	0x20008afc

08001618 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <LTDC_IRQHandler+0x10>)
 800161e:	f002 fcf5 	bl	800400c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200003a4 	.word	0x200003a4

0800162c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA2D_IRQHandler+0x10>)
 8001632:	f000 fab6 	bl	8001ba2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000310 	.word	0x20000310

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f00b fc48 	bl	800cf04 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20030000 	.word	0x20030000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	200005b8 	.word	0x200005b8
 80016a8:	20008e10 	.word	0x20008e10

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d6:	490e      	ldr	r1, [pc, #56]	; (8001710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ec:	4c0b      	ldr	r4, [pc, #44]	; (800171c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016fa:	f7ff ffd7 	bl	80016ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f00b fc07 	bl	800cf10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7fe ff2b 	bl	800055c <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001708:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001714:	0800d26c 	.word	0x0800d26c
  ldr r2, =_sbss
 8001718:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800171c:	20008e10 	.word	0x20008e10

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f8fc 	bl	800194a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff feb0 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fb48 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	200005bc 	.word	0x200005bc

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200005bc 	.word	0x200005bc

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff4c 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001972:	f7ff ff61 	bl	8001838 <__NVIC_GetPriorityGrouping>
 8001976:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	6978      	ldr	r0, [r7, #20]
 800197e:	f7ff ffb1 	bl	80018e4 <NVIC_EncodePriority>
 8001982:	4602      	mov	r2, r0
 8001984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff80 	bl	8001890 <__NVIC_SetPriority>
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff54 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	795b      	ldrb	r3, [r3, #5]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fa34 	bl	8000e44 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019fa:	f7ff fec9 	bl	8001790 <HAL_GetTick>
 80019fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d008      	beq.n	8001a1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e052      	b.n	8001ac4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0216 	bic.w	r2, r2, #22
 8001a2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <HAL_DMA_Abort+0x62>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0208 	bic.w	r2, r2, #8
 8001a5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6e:	e013      	b.n	8001a98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a70:	f7ff fe8e 	bl	8001790 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d90c      	bls.n	8001a98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2220      	movs	r2, #32
 8001a82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2203      	movs	r2, #3
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e015      	b.n	8001ac4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1e4      	bne.n	8001a70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	223f      	movs	r2, #63	; 0x3f
 8001aac:	409a      	lsls	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d004      	beq.n	8001aea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00c      	b.n	8001b04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2205      	movs	r2, #5
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e03b      	b.n	8001b9a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff f9a6 	bl	8000e88 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b60:	f023 0107 	bic.w	r1, r3, #7
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68d1      	ldr	r1, [r2, #12]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	430b      	orrs	r3, r1
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d026      	beq.n	8001c12 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d021      	beq.n	8001c12 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d026      	beq.n	8001c6a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d021      	beq.n	8001c6a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c34:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	f043 0202 	orr.w	r2, r3, #2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d026      	beq.n	8001cc2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d021      	beq.n	8001cc2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2208      	movs	r2, #8
 8001c94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	f043 0204 	orr.w	r2, r3, #4
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00e      	beq.n	8001cf4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2204      	movs	r2, #4
 8001cec:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f853 	bl	8001d9a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d024      	beq.n	8001d48 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01f      	beq.n	8001d48 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d16:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01f      	beq.n	8001d92 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01a      	beq.n	8001d92 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2210      	movs	r2, #16
 8001d72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f80e 	bl	8001dae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_DMA2D_ConfigLayer+0x20>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e079      	b.n	8001ed8 <HAL_DMA2D_ConfigLayer+0x114>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	3318      	adds	r3, #24
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	041b      	lsls	r3, r3, #16
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <HAL_DMA2D_ConfigLayer+0x120>)
 8001e10:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b0a      	cmp	r3, #10
 8001e18:	d003      	beq.n	8001e22 <HAL_DMA2D_ConfigLayer+0x5e>
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b09      	cmp	r3, #9
 8001e20:	d107      	bne.n	8001e32 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e005      	b.n	8001e3e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	061b      	lsls	r3, r3, #24
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d120      	bne.n	8001e86 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	ea02 0103 	and.w	r1, r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b0a      	cmp	r3, #10
 8001e6c:	d003      	beq.n	8001e76 <HAL_DMA2D_ConfigLayer+0xb2>
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	d127      	bne.n	8001ec6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
 8001e84:	e01f      	b.n	8001ec6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	ea02 0103 	and.w	r1, r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b0a      	cmp	r3, #10
 8001eae:	d003      	beq.n	8001eb8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b09      	cmp	r3, #9
 8001eb6:	d106      	bne.n	8001ec6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ec4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	ff03000f 	.word	0xff03000f

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e177      	b.n	80021f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f040 8166 	bne.w	80021ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d005      	beq.n	8001f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d130      	bne.n	8001f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f70:	2201      	movs	r2, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 0201 	and.w	r2, r3, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d017      	beq.n	8001fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d123      	bne.n	800202c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	69b9      	ldr	r1, [r7, #24]
 8002028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0203 	and.w	r2, r3, #3
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80c0 	beq.w	80021ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b66      	ldr	r3, [pc, #408]	; (800220c <HAL_GPIO_Init+0x324>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a65      	ldr	r2, [pc, #404]	; (800220c <HAL_GPIO_Init+0x324>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b63      	ldr	r3, [pc, #396]	; (800220c <HAL_GPIO_Init+0x324>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208a:	4a61      	ldr	r2, [pc, #388]	; (8002210 <HAL_GPIO_Init+0x328>)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a58      	ldr	r2, [pc, #352]	; (8002214 <HAL_GPIO_Init+0x32c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d037      	beq.n	8002126 <HAL_GPIO_Init+0x23e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_GPIO_Init+0x330>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d031      	beq.n	8002122 <HAL_GPIO_Init+0x23a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_GPIO_Init+0x334>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02b      	beq.n	800211e <HAL_GPIO_Init+0x236>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a55      	ldr	r2, [pc, #340]	; (8002220 <HAL_GPIO_Init+0x338>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d025      	beq.n	800211a <HAL_GPIO_Init+0x232>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a54      	ldr	r2, [pc, #336]	; (8002224 <HAL_GPIO_Init+0x33c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01f      	beq.n	8002116 <HAL_GPIO_Init+0x22e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a53      	ldr	r2, [pc, #332]	; (8002228 <HAL_GPIO_Init+0x340>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d019      	beq.n	8002112 <HAL_GPIO_Init+0x22a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_GPIO_Init+0x344>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_GPIO_Init+0x226>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a51      	ldr	r2, [pc, #324]	; (8002230 <HAL_GPIO_Init+0x348>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00d      	beq.n	800210a <HAL_GPIO_Init+0x222>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a50      	ldr	r2, [pc, #320]	; (8002234 <HAL_GPIO_Init+0x34c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d007      	beq.n	8002106 <HAL_GPIO_Init+0x21e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <HAL_GPIO_Init+0x350>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_GPIO_Init+0x21a>
 80020fe:	2309      	movs	r3, #9
 8002100:	e012      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002102:	230a      	movs	r3, #10
 8002104:	e010      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002106:	2308      	movs	r3, #8
 8002108:	e00e      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800210a:	2307      	movs	r3, #7
 800210c:	e00c      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800210e:	2306      	movs	r3, #6
 8002110:	e00a      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002112:	2305      	movs	r3, #5
 8002114:	e008      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002116:	2304      	movs	r3, #4
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800211a:	2303      	movs	r3, #3
 800211c:	e004      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800211e:	2302      	movs	r3, #2
 8002120:	e002      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002126:	2300      	movs	r3, #0
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	f002 0203 	and.w	r2, r2, #3
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	4093      	lsls	r3, r2
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002138:	4935      	ldr	r1, [pc, #212]	; (8002210 <HAL_GPIO_Init+0x328>)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_GPIO_Init+0x354>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_GPIO_Init+0x354>)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002170:	4b32      	ldr	r3, [pc, #200]	; (800223c <HAL_GPIO_Init+0x354>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002194:	4a29      	ldr	r2, [pc, #164]	; (800223c <HAL_GPIO_Init+0x354>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <HAL_GPIO_Init+0x354>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021be:	4a1f      	ldr	r2, [pc, #124]	; (800223c <HAL_GPIO_Init+0x354>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_GPIO_Init+0x354>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <HAL_GPIO_Init+0x354>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3301      	adds	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b0f      	cmp	r3, #15
 80021f8:	f67f ae84 	bls.w	8001f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	40013800 	.word	0x40013800
 8002214:	40020000 	.word	0x40020000
 8002218:	40020400 	.word	0x40020400
 800221c:	40020800 	.word	0x40020800
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40021000 	.word	0x40021000
 8002228:	40021400 	.word	0x40021400
 800222c:	40021800 	.word	0x40021800
 8002230:	40021c00 	.word	0x40021c00
 8002234:	40022000 	.word	0x40022000
 8002238:	40022400 	.word	0x40022400
 800223c:	40013c00 	.word	0x40013c00

08002240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e001      	b.n	8002262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	041a      	lsls	r2, r3, #16
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43d9      	mvns	r1, r3
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	400b      	ands	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80022d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d8:	b08f      	sub	sp, #60	; 0x3c
 80022da:	af0a      	add	r7, sp, #40	; 0x28
 80022dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e054      	b.n	8002392 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f00a fb4a 	bl	800c99c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2203      	movs	r2, #3
 800230c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f004 fe80 	bl	800702c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	687e      	ldr	r6, [r7, #4]
 8002334:	466d      	mov	r5, sp
 8002336:	f106 0410 	add.w	r4, r6, #16
 800233a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002342:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002346:	e885 0003 	stmia.w	r5, {r0, r1}
 800234a:	1d33      	adds	r3, r6, #4
 800234c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800234e:	6838      	ldr	r0, [r7, #0]
 8002350:	f004 fdfa 	bl	8006f48 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f004 fe77 	bl	800704e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	687e      	ldr	r6, [r7, #4]
 8002368:	466d      	mov	r5, sp
 800236a:	f106 0410 	add.w	r4, r6, #16
 800236e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002376:	e894 0003 	ldmia.w	r4, {r0, r1}
 800237a:	e885 0003 	stmia.w	r5, {r0, r1}
 800237e:	1d33      	adds	r3, r6, #4
 8002380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	f005 f800 	bl	8007388 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800239a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800239a:	b590      	push	{r4, r7, lr}
 800239c:	b089      	sub	sp, #36	; 0x24
 800239e:	af04      	add	r7, sp, #16
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	4608      	mov	r0, r1
 80023a4:	4611      	mov	r1, r2
 80023a6:	461a      	mov	r2, r3
 80023a8:	4603      	mov	r3, r0
 80023aa:	70fb      	strb	r3, [r7, #3]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70bb      	strb	r3, [r7, #2]
 80023b0:	4613      	mov	r3, r2
 80023b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_HCD_HC_Init+0x28>
 80023be:	2302      	movs	r3, #2
 80023c0:	e076      	b.n	80024b0 <HAL_HCD_HC_Init+0x116>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	333d      	adds	r3, #61	; 0x3d
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3338      	adds	r3, #56	; 0x38
 80023ea:	787a      	ldrb	r2, [r7, #1]
 80023ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3340      	adds	r3, #64	; 0x40
 80023fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023fe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3339      	adds	r3, #57	; 0x39
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	333f      	adds	r3, #63	; 0x3f
 8002420:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002424:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	78ba      	ldrb	r2, [r7, #2]
 800242a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800242e:	b2d0      	uxtb	r0, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	333a      	adds	r3, #58	; 0x3a
 800243c:	4602      	mov	r2, r0
 800243e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002440:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002444:	2b00      	cmp	r3, #0
 8002446:	da09      	bge.n	800245c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	333b      	adds	r3, #59	; 0x3b
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	e008      	b.n	800246e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	333b      	adds	r3, #59	; 0x3b
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	333c      	adds	r3, #60	; 0x3c
 800247c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002480:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	787c      	ldrb	r4, [r7, #1]
 8002488:	78ba      	ldrb	r2, [r7, #2]
 800248a:	78f9      	ldrb	r1, [r7, #3]
 800248c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800248e:	9302      	str	r3, [sp, #8]
 8002490:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	f897 3020 	ldrb.w	r3, [r7, #32]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4623      	mov	r3, r4
 800249e:	f005 f8f9 	bl	8007694 <USB_HC_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd90      	pop	{r4, r7, pc}

080024b8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_HCD_HC_Halt+0x1e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e00f      	b.n	80024f6 <HAL_HCD_HC_Halt+0x3e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f005 fb49 	bl	8007b7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	4608      	mov	r0, r1
 800250a:	4611      	mov	r1, r2
 800250c:	461a      	mov	r2, r3
 800250e:	4603      	mov	r3, r0
 8002510:	70fb      	strb	r3, [r7, #3]
 8002512:	460b      	mov	r3, r1
 8002514:	70bb      	strb	r3, [r7, #2]
 8002516:	4613      	mov	r3, r2
 8002518:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	333b      	adds	r3, #59	; 0x3b
 8002528:	78ba      	ldrb	r2, [r7, #2]
 800252a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	333f      	adds	r3, #63	; 0x3f
 800253a:	787a      	ldrb	r2, [r7, #1]
 800253c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800253e:	7c3b      	ldrb	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d112      	bne.n	800256a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3342      	adds	r3, #66	; 0x42
 8002552:	2203      	movs	r2, #3
 8002554:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	333d      	adds	r3, #61	; 0x3d
 8002564:	7f3a      	ldrb	r2, [r7, #28]
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	e008      	b.n	800257c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3342      	adds	r3, #66	; 0x42
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800257c:	787b      	ldrb	r3, [r7, #1]
 800257e:	2b03      	cmp	r3, #3
 8002580:	f200 80c6 	bhi.w	8002710 <HAL_HCD_HC_SubmitRequest+0x210>
 8002584:	a201      	add	r2, pc, #4	; (adr r2, 800258c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258a:	bf00      	nop
 800258c:	0800259d 	.word	0x0800259d
 8002590:	080026fd 	.word	0x080026fd
 8002594:	08002601 	.word	0x08002601
 8002598:	0800267f 	.word	0x0800267f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800259c:	7c3b      	ldrb	r3, [r7, #16]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 80b8 	bne.w	8002714 <HAL_HCD_HC_SubmitRequest+0x214>
 80025a4:	78bb      	ldrb	r3, [r7, #2]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 80b4 	bne.w	8002714 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80025ac:	8b3b      	ldrh	r3, [r7, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	3355      	adds	r3, #85	; 0x55
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	3355      	adds	r3, #85	; 0x55
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3342      	adds	r3, #66	; 0x42
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025ea:	e093      	b.n	8002714 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3342      	adds	r3, #66	; 0x42
 80025fa:	2202      	movs	r2, #2
 80025fc:	701a      	strb	r2, [r3, #0]
      break;
 80025fe:	e089      	b.n	8002714 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002600:	78bb      	ldrb	r3, [r7, #2]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11d      	bne.n	8002642 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	3355      	adds	r3, #85	; 0x55
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3342      	adds	r3, #66	; 0x42
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800262c:	e073      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3342      	adds	r3, #66	; 0x42
 800263c:	2202      	movs	r2, #2
 800263e:	701a      	strb	r2, [r3, #0]
      break;
 8002640:	e069      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3354      	adds	r3, #84	; 0x54
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3342      	adds	r3, #66	; 0x42
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
      break;
 8002668:	e055      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3342      	adds	r3, #66	; 0x42
 8002678:	2202      	movs	r2, #2
 800267a:	701a      	strb	r2, [r3, #0]
      break;
 800267c:	e04b      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800267e:	78bb      	ldrb	r3, [r7, #2]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11d      	bne.n	80026c0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3355      	adds	r3, #85	; 0x55
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3342      	adds	r3, #66	; 0x42
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026aa:	e034      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	3342      	adds	r3, #66	; 0x42
 80026ba:	2202      	movs	r2, #2
 80026bc:	701a      	strb	r2, [r3, #0]
      break;
 80026be:	e02a      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3354      	adds	r3, #84	; 0x54
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3342      	adds	r3, #66	; 0x42
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
      break;
 80026e6:	e016      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3342      	adds	r3, #66	; 0x42
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
      break;
 80026fa:	e00c      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3342      	adds	r3, #66	; 0x42
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
      break;
 800270e:	e002      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002710:	bf00      	nop
 8002712:	e000      	b.n	8002716 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002714:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3344      	adds	r3, #68	; 0x44
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	8b3a      	ldrh	r2, [r7, #24]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	202c      	movs	r0, #44	; 0x2c
 8002730:	fb00 f303 	mul.w	r3, r0, r3
 8002734:	440b      	add	r3, r1
 8002736:	334c      	adds	r3, #76	; 0x4c
 8002738:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3360      	adds	r3, #96	; 0x60
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3350      	adds	r3, #80	; 0x50
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3339      	adds	r3, #57	; 0x39
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3361      	adds	r3, #97	; 0x61
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	222c      	movs	r2, #44	; 0x2c
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	3338      	adds	r3, #56	; 0x38
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	18d1      	adds	r1, r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	f005 f89c 	bl	80078d8 <USB_HC_StartXfer>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop

080027ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 fd9d 	bl	8007302 <USB_GetMode>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	f040 80f6 	bne.w	80029bc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 fd81 	bl	80072dc <USB_ReadInterrupts>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80ec 	beq.w	80029ba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f004 fd78 	bl	80072dc <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f6:	d104      	bne.n	8002802 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002800:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f004 fd68 	bl	80072dc <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002816:	d104      	bne.n	8002822 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002820:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f004 fd58 	bl	80072dc <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002836:	d104      	bne.n	8002842 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002840:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f004 fd48 	bl	80072dc <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d103      	bne.n	800285e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2202      	movs	r2, #2
 800285c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fd3a 	bl	80072dc <USB_ReadInterrupts>
 8002868:	4603      	mov	r3, r0
 800286a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800286e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002872:	d11c      	bne.n	80028ae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800287c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800288e:	2110      	movs	r1, #16
 8002890:	6938      	ldr	r0, [r7, #16]
 8002892:	f004 fc29 	bl	80070e8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002896:	6938      	ldr	r0, [r7, #16]
 8002898:	f004 fc5a 	bl	8007150 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f004 fe30 	bl	8007508 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f00a f8f1 	bl	800ca90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 fd12 	bl	80072dc <USB_ReadInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c2:	d102      	bne.n	80028ca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f001 f89e 	bl	8003a06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fd04 	bl	80072dc <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d106      	bne.n	80028ec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f00a f8ba 	bl	800ca58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2208      	movs	r2, #8
 80028ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f004 fcf3 	bl	80072dc <USB_ReadInterrupts>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d101      	bne.n	8002904 <HAL_HCD_IRQHandler+0x158>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_HCD_IRQHandler+0x15a>
 8002904:	2300      	movs	r3, #0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0210 	bic.w	r2, r2, #16
 8002918:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 ffa1 	bl	8003862 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0210 	orr.w	r2, r2, #16
 800292e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fcd1 	bl	80072dc <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002944:	d13a      	bne.n	80029bc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f005 f906 	bl	8007b5c <USB_HC_ReadInterrupt>
 8002950:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e025      	b.n	80029a4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d018      	beq.n	800299e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002982:	d106      	bne.n	8002992 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8ab 	bl	8002ae6 <HCD_HC_IN_IRQHandler>
 8002990:	e005      	b.n	800299e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fbf9 	bl	8003190 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d3d4      	bcc.n	8002958 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b6:	615a      	str	r2, [r3, #20]
 80029b8:	e000      	b.n	80029bc <HAL_HCD_IRQHandler+0x210>
      return;
 80029ba:	bf00      	nop
    }
  }
}
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_HCD_Start+0x16>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e013      	b.n	8002a00 <HAL_HCD_Start+0x3e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f004 fdf2 	bl	80075d0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fb0a 	bl	800700a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_HCD_Stop+0x16>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e00d      	b.n	8002a3a <HAL_HCD_Stop+0x32>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f005 f9e0 	bl	8007df0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f004 fd94 	bl	800757c <USB_ResetPort>
 8002a54:	4603      	mov	r3, r0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3360      	adds	r3, #96	; 0x60
 8002a78:	781b      	ldrb	r3, [r3, #0]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3350      	adds	r3, #80	; 0x50
 8002aa0:	681b      	ldr	r3, [r3, #0]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fdd8 	bl	8007670 <USB_GetCurrentFrame>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 fdb3 	bl	8007642 <USB_GetHostSpeed>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d11a      	bne.n	8002b4c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	461a      	mov	r2, r3
 8002b24:	2304      	movs	r3, #4
 8002b26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3361      	adds	r3, #97	; 0x61
 8002b36:	2206      	movs	r2, #6
 8002b38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f005 f81a 	bl	8007b7e <USB_HC_Halt>
 8002b4a:	e0af      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b62:	d11b      	bne.n	8002b9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	461a      	mov	r2, r3
 8002b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3361      	adds	r3, #97	; 0x61
 8002b86:	2207      	movs	r2, #7
 8002b88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 fff2 	bl	8007b7e <USB_HC_Halt>
 8002b9a:	e087      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d109      	bne.n	8002bc6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	6093      	str	r3, [r2, #8]
 8002bc4:	e072      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d11a      	bne.n	8002c12 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	461a      	mov	r2, r3
 8002bea:	2308      	movs	r3, #8
 8002bec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3361      	adds	r3, #97	; 0x61
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 ffb7 	bl	8007b7e <USB_HC_Halt>
 8002c10:	e04c      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c28:	d11b      	bne.n	8002c62 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	461a      	mov	r2, r3
 8002c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	3361      	adds	r3, #97	; 0x61
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 ff8f 	bl	8007b7e <USB_HC_Halt>
 8002c60:	e024      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b80      	cmp	r3, #128	; 0x80
 8002c76:	d119      	bne.n	8002cac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	461a      	mov	r2, r3
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3361      	adds	r3, #97	; 0x61
 8002c98:	2206      	movs	r2, #6
 8002c9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 ff69 	bl	8007b7e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc2:	d112      	bne.n	8002cea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 ff55 	bl	8007b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ce8:	e24e      	b.n	8003188 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	f040 80df 	bne.w	8002ec0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d019      	beq.n	8002d3e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3348      	adds	r3, #72	; 0x48
 8002d18:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0159      	lsls	r1, r3, #5
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	440b      	add	r3, r1
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	202c      	movs	r0, #44	; 0x2c
 8002d34:	fb00 f303 	mul.w	r3, r0, r3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3350      	adds	r3, #80	; 0x50
 8002d3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3361      	adds	r3, #97	; 0x61
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	335c      	adds	r3, #92	; 0x5c
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2301      	movs	r3, #1
 8002d72:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	333f      	adds	r3, #63	; 0x3f
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d009      	beq.n	8002d9c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	333f      	adds	r3, #63	; 0x3f
 8002d96:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d111      	bne.n	8002dc0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 fee9 	bl	8007b7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	461a      	mov	r2, r3
 8002dba:	2310      	movs	r3, #16
 8002dbc:	6093      	str	r3, [r2, #8]
 8002dbe:	e03a      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	333f      	adds	r3, #63	; 0x3f
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d009      	beq.n	8002de8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	333f      	adds	r3, #63	; 0x3f
 8002de2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d126      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	0151      	lsls	r1, r2, #5
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	440a      	add	r2, r1
 8002dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e06:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3360      	adds	r3, #96	; 0x60
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	b2d9      	uxtb	r1, r3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	202c      	movs	r0, #44	; 0x2c
 8002e24:	fb00 f303 	mul.w	r3, r0, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3360      	adds	r3, #96	; 0x60
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f009 fe3b 	bl	800caac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d12b      	bne.n	8002e96 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3348      	adds	r3, #72	; 0x48
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	202c      	movs	r0, #44	; 0x2c
 8002e54:	fb00 f202 	mul.w	r2, r0, r2
 8002e58:	440a      	add	r2, r1
 8002e5a:	3240      	adds	r2, #64	; 0x40
 8002e5c:	8812      	ldrh	r2, [r2, #0]
 8002e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 818e 	beq.w	8003188 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3354      	adds	r3, #84	; 0x54
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	f083 0301 	eor.w	r3, r3, #1
 8002e80:	b2d8      	uxtb	r0, r3
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3354      	adds	r3, #84	; 0x54
 8002e90:	4602      	mov	r2, r0
 8002e92:	701a      	strb	r2, [r3, #0]
}
 8002e94:	e178      	b.n	8003188 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3354      	adds	r3, #84	; 0x54
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f083 0301 	eor.w	r3, r3, #1
 8002eaa:	b2d8      	uxtb	r0, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3354      	adds	r3, #84	; 0x54
 8002eba:	4602      	mov	r2, r0
 8002ebc:	701a      	strb	r2, [r3, #0]
}
 8002ebe:	e163      	b.n	8003188 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	f040 80f6 	bne.w	80030c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3361      	adds	r3, #97	; 0x61
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d109      	bne.n	8002f00 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3360      	adds	r3, #96	; 0x60
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e0c9      	b.n	8003094 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3361      	adds	r3, #97	; 0x61
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d109      	bne.n	8002f28 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3360      	adds	r3, #96	; 0x60
 8002f22:	2205      	movs	r2, #5
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e0b5      	b.n	8003094 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3361      	adds	r3, #97	; 0x61
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d009      	beq.n	8002f50 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3361      	adds	r3, #97	; 0x61
 8002f4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d150      	bne.n	8002ff2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	335c      	adds	r3, #92	; 0x5c
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	202c      	movs	r0, #44	; 0x2c
 8002f68:	fb00 f303 	mul.w	r3, r0, r3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	335c      	adds	r3, #92	; 0x5c
 8002f70:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	335c      	adds	r3, #92	; 0x5c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d912      	bls.n	8002fac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	335c      	adds	r3, #92	; 0x5c
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	212c      	movs	r1, #44	; 0x2c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3360      	adds	r3, #96	; 0x60
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002faa:	e073      	b.n	8003094 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3360      	adds	r3, #96	; 0x60
 8002fba:	2202      	movs	r2, #2
 8002fbc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fdc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fea:	461a      	mov	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ff0:	e050      	b.n	8003094 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3361      	adds	r3, #97	; 0x61
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d122      	bne.n	800304c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3360      	adds	r3, #96	; 0x60
 8003014:	2202      	movs	r2, #2
 8003016:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800302e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003036:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	461a      	mov	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e023      	b.n	8003094 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	212c      	movs	r1, #44	; 0x2c
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	4413      	add	r3, r2
 8003058:	3361      	adds	r3, #97	; 0x61
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b07      	cmp	r3, #7
 800305e:	d119      	bne.n	8003094 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	335c      	adds	r3, #92	; 0x5c
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	202c      	movs	r0, #44	; 0x2c
 8003078:	fb00 f303 	mul.w	r3, r0, r3
 800307c:	440b      	add	r3, r1
 800307e:	335c      	adds	r3, #92	; 0x5c
 8003080:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3360      	adds	r3, #96	; 0x60
 8003090:	2204      	movs	r2, #4
 8003092:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	461a      	mov	r2, r3
 80030a2:	2302      	movs	r3, #2
 80030a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	b2d9      	uxtb	r1, r3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	202c      	movs	r0, #44	; 0x2c
 80030b0:	fb00 f303 	mul.w	r3, r0, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3360      	adds	r3, #96	; 0x60
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f009 fcf5 	bl	800caac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030c2:	e061      	b.n	8003188 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d156      	bne.n	8003188 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	333f      	adds	r3, #63	; 0x3f
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d111      	bne.n	8003112 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	335c      	adds	r3, #92	; 0x5c
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f004 fd37 	bl	8007b7e <USB_HC_Halt>
 8003110:	e031      	b.n	8003176 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	333f      	adds	r3, #63	; 0x3f
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	333f      	adds	r3, #63	; 0x3f
 8003134:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003136:	2b02      	cmp	r3, #2
 8003138:	d11d      	bne.n	8003176 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	335c      	adds	r3, #92	; 0x5c
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d110      	bne.n	8003176 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3361      	adds	r3, #97	; 0x61
 8003162:	2203      	movs	r2, #3
 8003164:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f004 fd04 	bl	8007b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	461a      	mov	r2, r3
 8003184:	2310      	movs	r3, #16
 8003186:	6093      	str	r3, [r2, #8]
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d11a      	bne.n	80031f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	2304      	movs	r3, #4
 80031d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3361      	adds	r3, #97	; 0x61
 80031e0:	2206      	movs	r2, #6
 80031e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fcc5 	bl	8007b7e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80031f4:	e331      	b.n	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b20      	cmp	r3, #32
 800320a:	d12e      	bne.n	800326a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	2320      	movs	r3, #32
 800321c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	333d      	adds	r3, #61	; 0x3d
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	f040 8313 	bne.w	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	333d      	adds	r3, #61	; 0x3d
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3360      	adds	r3, #96	; 0x60
 8003254:	2202      	movs	r2, #2
 8003256:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f004 fc8b 	bl	8007b7e <USB_HC_Halt>
}
 8003268:	e2f7      	b.n	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003280:	d112      	bne.n	80032a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4413      	add	r3, r2
 800328a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328e:	461a      	mov	r2, r3
 8003290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003294:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f004 fc6c 	bl	8007b7e <USB_HC_Halt>
}
 80032a6:	e2d8      	b.n	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d140      	bne.n	8003340 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d111      	bne.n	800330a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	333d      	adds	r3, #61	; 0x3d
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	2340      	movs	r3, #64	; 0x40
 8003308:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	2301      	movs	r3, #1
 800331a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3361      	adds	r3, #97	; 0x61
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f004 fc20 	bl	8007b7e <USB_HC_Halt>
}
 800333e:	e28c      	b.n	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d12c      	bne.n	80033b0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3361      	adds	r3, #97	; 0x61
 8003364:	2204      	movs	r2, #4
 8003366:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	333d      	adds	r3, #61	; 0x3d
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	335c      	adds	r3, #92	; 0x5c
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f004 fbf1 	bl	8007b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	461a      	mov	r2, r3
 80033aa:	2340      	movs	r3, #64	; 0x40
 80033ac:	6093      	str	r3, [r2, #8]
}
 80033ae:	e254      	b.n	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d11a      	bne.n	80033fc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	461a      	mov	r2, r3
 80033d4:	2308      	movs	r3, #8
 80033d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	3361      	adds	r3, #97	; 0x61
 80033e6:	2205      	movs	r2, #5
 80033e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f004 fbc2 	bl	8007b7e <USB_HC_Halt>
}
 80033fa:	e22e      	b.n	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b10      	cmp	r3, #16
 8003410:	d140      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	335c      	adds	r3, #92	; 0x5c
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3361      	adds	r3, #97	; 0x61
 8003432:	2203      	movs	r2, #3
 8003434:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	333d      	adds	r3, #61	; 0x3d
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d112      	bne.n	8003470 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	212c      	movs	r1, #44	; 0x2c
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	4413      	add	r3, r2
 8003456:	333c      	adds	r3, #60	; 0x3c
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d108      	bne.n	8003470 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	4413      	add	r3, r2
 800346a:	333d      	adds	r3, #61	; 0x3d
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	4611      	mov	r1, r2
 800347a:	4618      	mov	r0, r3
 800347c:	f004 fb7f 	bl	8007b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348c:	461a      	mov	r2, r3
 800348e:	2310      	movs	r3, #16
 8003490:	6093      	str	r3, [r2, #8]
}
 8003492:	e1e2      	b.n	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b80      	cmp	r3, #128	; 0x80
 80034a8:	d164      	bne.n	8003574 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d111      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3361      	adds	r3, #97	; 0x61
 80034c0:	2206      	movs	r2, #6
 80034c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 fb55 	bl	8007b7e <USB_HC_Halt>
 80034d4:	e044      	b.n	8003560 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	335c      	adds	r3, #92	; 0x5c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	202c      	movs	r0, #44	; 0x2c
 80034ee:	fb00 f303 	mul.w	r3, r0, r3
 80034f2:	440b      	add	r3, r1
 80034f4:	335c      	adds	r3, #92	; 0x5c
 80034f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	335c      	adds	r3, #92	; 0x5c
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d920      	bls.n	800354e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	335c      	adds	r3, #92	; 0x5c
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	3360      	adds	r3, #96	; 0x60
 800352c:	2204      	movs	r2, #4
 800352e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	b2d9      	uxtb	r1, r3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	202c      	movs	r0, #44	; 0x2c
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	4413      	add	r3, r2
 8003540:	3360      	adds	r3, #96	; 0x60
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f009 fab0 	bl	800caac <HAL_HCD_HC_NotifyURBChange_Callback>
 800354c:	e008      	b.n	8003560 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	212c      	movs	r1, #44	; 0x2c
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	4413      	add	r3, r2
 800355a:	3360      	adds	r3, #96	; 0x60
 800355c:	2202      	movs	r2, #2
 800355e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	461a      	mov	r2, r3
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	6093      	str	r3, [r2, #8]
}
 8003572:	e172      	b.n	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358a:	d11b      	bne.n	80035c4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	3361      	adds	r3, #97	; 0x61
 800359a:	2208      	movs	r2, #8
 800359c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f004 fae8 	bl	8007b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	461a      	mov	r2, r3
 80035bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c0:	6093      	str	r3, [r2, #8]
}
 80035c2:	e14a      	b.n	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	f040 813f 	bne.w	800385a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3361      	adds	r3, #97	; 0x61
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d17d      	bne.n	80036ec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3360      	adds	r3, #96	; 0x60
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	333f      	adds	r3, #63	; 0x3f
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d00a      	beq.n	800362c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	333f      	adds	r3, #63	; 0x3f
 8003624:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003626:	2b03      	cmp	r3, #3
 8003628:	f040 8100 	bne.w	800382c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d113      	bne.n	800365c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3355      	adds	r3, #85	; 0x55
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	f083 0301 	eor.w	r3, r3, #1
 8003648:	b2d8      	uxtb	r0, r3
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	3355      	adds	r3, #85	; 0x55
 8003658:	4602      	mov	r2, r0
 800365a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b01      	cmp	r3, #1
 8003662:	f040 80e3 	bne.w	800382c <HCD_HC_OUT_IRQHandler+0x69c>
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	334c      	adds	r3, #76	; 0x4c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80d8 	beq.w	800382c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	334c      	adds	r3, #76	; 0x4c
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	202c      	movs	r0, #44	; 0x2c
 8003692:	fb00 f202 	mul.w	r2, r0, r2
 8003696:	440a      	add	r2, r1
 8003698:	3240      	adds	r2, #64	; 0x40
 800369a:	8812      	ldrh	r2, [r2, #0]
 800369c:	4413      	add	r3, r2
 800369e:	3b01      	subs	r3, #1
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	202c      	movs	r0, #44	; 0x2c
 80036a6:	fb00 f202 	mul.w	r2, r0, r2
 80036aa:	440a      	add	r2, r1
 80036ac:	3240      	adds	r2, #64	; 0x40
 80036ae:	8812      	ldrh	r2, [r2, #0]
 80036b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80b5 	beq.w	800382c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	3355      	adds	r3, #85	; 0x55
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	f083 0301 	eor.w	r3, r3, #1
 80036d6:	b2d8      	uxtb	r0, r3
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	3355      	adds	r3, #85	; 0x55
 80036e6:	4602      	mov	r2, r0
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e09f      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	3361      	adds	r3, #97	; 0x61
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d109      	bne.n	8003714 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3360      	adds	r3, #96	; 0x60
 800370e:	2202      	movs	r2, #2
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e08b      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3361      	adds	r3, #97	; 0x61
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b04      	cmp	r3, #4
 8003726:	d109      	bne.n	800373c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3360      	adds	r3, #96	; 0x60
 8003736:	2202      	movs	r2, #2
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e077      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	212c      	movs	r1, #44	; 0x2c
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	3361      	adds	r3, #97	; 0x61
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b05      	cmp	r3, #5
 800374e:	d109      	bne.n	8003764 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3360      	adds	r3, #96	; 0x60
 800375e:	2205      	movs	r2, #5
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e063      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3361      	adds	r3, #97	; 0x61
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b06      	cmp	r3, #6
 8003776:	d009      	beq.n	800378c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3361      	adds	r3, #97	; 0x61
 8003786:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003788:	2b08      	cmp	r3, #8
 800378a:	d14f      	bne.n	800382c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	335c      	adds	r3, #92	; 0x5c
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	202c      	movs	r0, #44	; 0x2c
 80037a4:	fb00 f303 	mul.w	r3, r0, r3
 80037a8:	440b      	add	r3, r1
 80037aa:	335c      	adds	r3, #92	; 0x5c
 80037ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	335c      	adds	r3, #92	; 0x5c
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d912      	bls.n	80037e8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	335c      	adds	r3, #92	; 0x5c
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	3360      	adds	r3, #96	; 0x60
 80037e2:	2204      	movs	r2, #4
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	e021      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	212c      	movs	r1, #44	; 0x2c
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	3360      	adds	r3, #96	; 0x60
 80037f6:	2202      	movs	r2, #2
 80037f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	4413      	add	r3, r2
 8003802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003810:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003818:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	461a      	mov	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003838:	461a      	mov	r2, r3
 800383a:	2302      	movs	r3, #2
 800383c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	b2d9      	uxtb	r1, r3
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	202c      	movs	r0, #44	; 0x2c
 8003848:	fb00 f303 	mul.w	r3, r0, r3
 800384c:	4413      	add	r3, r2
 800384e:	3360      	adds	r3, #96	; 0x60
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f009 f929 	bl	800caac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800385a:	bf00      	nop
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b08a      	sub	sp, #40	; 0x28
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	0c5b      	lsrs	r3, r3, #17
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003896:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d004      	beq.n	80038a8 <HCD_RXQLVL_IRQHandler+0x46>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b05      	cmp	r3, #5
 80038a2:	f000 80a9 	beq.w	80039f8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038a6:	e0aa      	b.n	80039fe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80a6 	beq.w	80039fc <HCD_RXQLVL_IRQHandler+0x19a>
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	212c      	movs	r1, #44	; 0x2c
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	3344      	adds	r3, #68	; 0x44
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 809b 	beq.w	80039fc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3350      	adds	r3, #80	; 0x50
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	441a      	add	r2, r3
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	202c      	movs	r0, #44	; 0x2c
 80038e0:	fb00 f303 	mul.w	r3, r0, r3
 80038e4:	440b      	add	r3, r1
 80038e6:	334c      	adds	r3, #76	; 0x4c
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d87a      	bhi.n	80039e4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	3344      	adds	r3, #68	; 0x44
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	b292      	uxth	r2, r2
 8003906:	4619      	mov	r1, r3
 8003908:	f003 fc90 	bl	800722c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	3344      	adds	r3, #68	; 0x44
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	441a      	add	r2, r3
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	202c      	movs	r0, #44	; 0x2c
 8003926:	fb00 f303 	mul.w	r3, r0, r3
 800392a:	440b      	add	r3, r1
 800392c:	3344      	adds	r3, #68	; 0x44
 800392e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3350      	adds	r3, #80	; 0x50
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	441a      	add	r2, r3
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	202c      	movs	r0, #44	; 0x2c
 800394a:	fb00 f303 	mul.w	r3, r0, r3
 800394e:	440b      	add	r3, r1
 8003950:	3350      	adds	r3, #80	; 0x50
 8003952:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	0cdb      	lsrs	r3, r3, #19
 8003964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003968:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	212c      	movs	r1, #44	; 0x2c
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	4413      	add	r3, r2
 8003976:	3340      	adds	r3, #64	; 0x40
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4293      	cmp	r3, r2
 8003980:	d13c      	bne.n	80039fc <HCD_RXQLVL_IRQHandler+0x19a>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d039      	beq.n	80039fc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800399e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	3354      	adds	r3, #84	; 0x54
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	f083 0301 	eor.w	r3, r3, #1
 80039ce:	b2d8      	uxtb	r0, r3
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3354      	adds	r3, #84	; 0x54
 80039de:	4602      	mov	r2, r0
 80039e0:	701a      	strb	r2, [r3, #0]
      break;
 80039e2:	e00b      	b.n	80039fc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3360      	adds	r3, #96	; 0x60
 80039f2:	2204      	movs	r2, #4
 80039f4:	701a      	strb	r2, [r3, #0]
      break;
 80039f6:	e001      	b.n	80039fc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80039fc:	bf00      	nop
  }
}
 80039fe:	bf00      	nop
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d10b      	bne.n	8003a56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d102      	bne.n	8003a4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f009 f813 	bl	800ca74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d132      	bne.n	8003ac6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f043 0308 	orr.w	r3, r3, #8
 8003a66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d126      	bne.n	8003ac0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d113      	bne.n	8003aa2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a84:	d106      	bne.n	8003a94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f003 fd3b 	bl	8007508 <USB_InitFSLSPClkSel>
 8003a92:	e011      	b.n	8003ab8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 fd34 	bl	8007508 <USB_InitFSLSPClkSel>
 8003aa0:	e00a      	b.n	8003ab8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d106      	bne.n	8003ab8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ab6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f009 f809 	bl	800cad0 <HAL_HCD_PortEnabled_Callback>
 8003abe:	e002      	b.n	8003ac6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f009 f813 	bl	800caec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d103      	bne.n	8003ad8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f043 0320 	orr.w	r3, r3, #32
 8003ad6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e12b      	b.n	8003d56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd f9e0 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2224      	movs	r2, #36	; 0x24
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b50:	f001 f964 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8003b54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4a81      	ldr	r2, [pc, #516]	; (8003d60 <HAL_I2C_Init+0x274>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d807      	bhi.n	8003b70 <HAL_I2C_Init+0x84>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a80      	ldr	r2, [pc, #512]	; (8003d64 <HAL_I2C_Init+0x278>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	bf94      	ite	ls
 8003b68:	2301      	movls	r3, #1
 8003b6a:	2300      	movhi	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e006      	b.n	8003b7e <HAL_I2C_Init+0x92>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a7d      	ldr	r2, [pc, #500]	; (8003d68 <HAL_I2C_Init+0x27c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bf94      	ite	ls
 8003b78:	2301      	movls	r3, #1
 8003b7a:	2300      	movhi	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0e7      	b.n	8003d56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a78      	ldr	r2, [pc, #480]	; (8003d6c <HAL_I2C_Init+0x280>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	0c9b      	lsrs	r3, r3, #18
 8003b90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a6a      	ldr	r2, [pc, #424]	; (8003d60 <HAL_I2C_Init+0x274>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d802      	bhi.n	8003bc0 <HAL_I2C_Init+0xd4>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	e009      	b.n	8003bd4 <HAL_I2C_Init+0xe8>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	4a69      	ldr	r2, [pc, #420]	; (8003d70 <HAL_I2C_Init+0x284>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003be6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	495c      	ldr	r1, [pc, #368]	; (8003d60 <HAL_I2C_Init+0x274>)
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	d819      	bhi.n	8003c28 <HAL_I2C_Init+0x13c>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1e59      	subs	r1, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c02:	1c59      	adds	r1, r3, #1
 8003c04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c08:	400b      	ands	r3, r1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_I2C_Init+0x138>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1e59      	subs	r1, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c22:	e051      	b.n	8003cc8 <HAL_I2C_Init+0x1dc>
 8003c24:	2304      	movs	r3, #4
 8003c26:	e04f      	b.n	8003cc8 <HAL_I2C_Init+0x1dc>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d111      	bne.n	8003c54 <HAL_I2C_Init+0x168>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e58      	subs	r0, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	440b      	add	r3, r1
 8003c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e012      	b.n	8003c7a <HAL_I2C_Init+0x18e>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1e58      	subs	r0, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	0099      	lsls	r1, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_Init+0x196>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e022      	b.n	8003cc8 <HAL_I2C_Init+0x1dc>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10e      	bne.n	8003ca8 <HAL_I2C_Init+0x1bc>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1e58      	subs	r0, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	440b      	add	r3, r1
 8003c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca6:	e00f      	b.n	8003cc8 <HAL_I2C_Init+0x1dc>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e58      	subs	r0, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	0099      	lsls	r1, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	6809      	ldr	r1, [r1, #0]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6911      	ldr	r1, [r2, #16]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68d2      	ldr	r2, [r2, #12]
 8003d02:	4311      	orrs	r1, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	000186a0 	.word	0x000186a0
 8003d64:	001e847f 	.word	0x001e847f
 8003d68:	003d08ff 	.word	0x003d08ff
 8003d6c:	431bde83 	.word	0x431bde83
 8003d70:	10624dd3 	.word	0x10624dd3

08003d74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d129      	bne.n	8003dde <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2224      	movs	r2, #36	; 0x24
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0210 	bic.w	r2, r2, #16
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d12a      	bne.n	8003e5c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2224      	movs	r2, #36	; 0x24
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e26:	89fb      	ldrh	r3, [r7, #14]
 8003e28:	f023 030f 	bic.w	r3, r3, #15
 8003e2c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	89fb      	ldrh	r3, [r7, #14]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	89fa      	ldrh	r2, [r7, #14]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e0bf      	b.n	8003ffe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd f88a 	bl	8000fac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003eae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6999      	ldr	r1, [r3, #24]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ec4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6899      	ldr	r1, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b4a      	ldr	r3, [pc, #296]	; (8004008 <HAL_LTDC_Init+0x19c>)
 8003ee0:	400b      	ands	r3, r1
 8003ee2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68d9      	ldr	r1, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <HAL_LTDC_Init+0x19c>)
 8003f0e:	400b      	ands	r3, r1
 8003f10:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68d9      	ldr	r1, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1a      	ldr	r2, [r3, #32]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6919      	ldr	r1, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b33      	ldr	r3, [pc, #204]	; (8004008 <HAL_LTDC_Init+0x19c>)
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6919      	ldr	r1, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6959      	ldr	r1, [r3, #20]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4b27      	ldr	r3, [pc, #156]	; (8004008 <HAL_LTDC_Init+0x19c>)
 8003f6a:	400b      	ands	r3, r1
 8003f6c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6959      	ldr	r1, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0206 	orr.w	r2, r2, #6
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	f000f800 	.word	0xf000f800

0800400c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d023      	beq.n	8004076 <HAL_LTDC_IRQHandler+0x6a>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01e      	beq.n	8004076 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0204 	bic.w	r2, r2, #4
 8004046:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2204      	movs	r2, #4
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004056:	f043 0201 	orr.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2204      	movs	r2, #4
 8004064:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f86f 	bl	8004154 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d023      	beq.n	80040c8 <HAL_LTDC_IRQHandler+0xbc>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01e      	beq.n	80040c8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0202 	bic.w	r2, r2, #2
 8004098:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2202      	movs	r2, #2
 80040a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040a8:	f043 0202 	orr.w	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2204      	movs	r2, #4
 80040b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f846 	bl	8004154 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01b      	beq.n	800410a <HAL_LTDC_IRQHandler+0xfe>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d016      	beq.n	800410a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2201      	movs	r2, #1
 80040f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f82f 	bl	8004168 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01b      	beq.n	800414c <HAL_LTDC_IRQHandler+0x140>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0208 	bic.w	r2, r2, #8
 800412c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2208      	movs	r2, #8
 8004134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f818 	bl	800417c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004190:	b5b0      	push	{r4, r5, r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_LTDC_ConfigLayer+0x1a>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e02c      	b.n	8004204 <HAL_LTDC_ConfigLayer+0x74>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2202      	movs	r2, #2
 80041b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2134      	movs	r1, #52	; 0x34
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4614      	mov	r4, r2
 80041ce:	461d      	mov	r5, r3
 80041d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f811 	bl	800420c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2201      	movs	r2, #1
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bdb0      	pop	{r4, r5, r7, pc}

0800420c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004228:	4413      	add	r3, r2
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	01db      	lsls	r3, r3, #7
 8004238:	4413      	add	r3, r2
 800423a:	3384      	adds	r3, #132	; 0x84
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	4611      	mov	r1, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	01d2      	lsls	r2, r2, #7
 8004248:	440a      	add	r2, r1
 800424a:	3284      	adds	r2, #132	; 0x84
 800424c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004250:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004262:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004264:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4619      	mov	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	01db      	lsls	r3, r3, #7
 8004270:	440b      	add	r3, r1
 8004272:	3384      	adds	r3, #132	; 0x84
 8004274:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800427a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800428a:	4413      	add	r3, r2
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	01db      	lsls	r3, r3, #7
 800429a:	4413      	add	r3, r2
 800429c:	3384      	adds	r3, #132	; 0x84
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	4611      	mov	r1, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	01d2      	lsls	r2, r2, #7
 80042aa:	440a      	add	r2, r1
 80042ac:	3284      	adds	r2, #132	; 0x84
 80042ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c2:	4413      	add	r3, r2
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4619      	mov	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	01db      	lsls	r3, r3, #7
 80042d0:	440b      	add	r3, r1
 80042d2:	3384      	adds	r3, #132	; 0x84
 80042d4:	4619      	mov	r1, r3
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4313      	orrs	r3, r2
 80042da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	01db      	lsls	r3, r3, #7
 80042e6:	4413      	add	r3, r2
 80042e8:	3384      	adds	r3, #132	; 0x84
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	4611      	mov	r1, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	01d2      	lsls	r2, r2, #7
 80042f6:	440a      	add	r2, r1
 80042f8:	3284      	adds	r2, #132	; 0x84
 80042fa:	f023 0307 	bic.w	r3, r3, #7
 80042fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	01db      	lsls	r3, r3, #7
 800430a:	4413      	add	r3, r2
 800430c:	3384      	adds	r3, #132	; 0x84
 800430e:	461a      	mov	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004326:	041b      	lsls	r3, r3, #16
 8004328:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	061b      	lsls	r3, r3, #24
 8004330:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	01db      	lsls	r3, r3, #7
 800433c:	4413      	add	r3, r2
 800433e:	3384      	adds	r3, #132	; 0x84
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	01db      	lsls	r3, r3, #7
 800434c:	4413      	add	r3, r2
 800434e:	3384      	adds	r3, #132	; 0x84
 8004350:	461a      	mov	r2, r3
 8004352:	2300      	movs	r3, #0
 8004354:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800435c:	461a      	mov	r2, r3
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	431a      	orrs	r2, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	431a      	orrs	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4619      	mov	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	01db      	lsls	r3, r3, #7
 8004370:	440b      	add	r3, r1
 8004372:	3384      	adds	r3, #132	; 0x84
 8004374:	4619      	mov	r1, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	01db      	lsls	r3, r3, #7
 8004386:	4413      	add	r3, r2
 8004388:	3384      	adds	r3, #132	; 0x84
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	4611      	mov	r1, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	01d2      	lsls	r2, r2, #7
 8004396:	440a      	add	r2, r1
 8004398:	3284      	adds	r2, #132	; 0x84
 800439a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800439e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	01db      	lsls	r3, r3, #7
 80043aa:	4413      	add	r3, r2
 80043ac:	3384      	adds	r3, #132	; 0x84
 80043ae:	461a      	mov	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	01db      	lsls	r3, r3, #7
 80043c0:	4413      	add	r3, r2
 80043c2:	3384      	adds	r3, #132	; 0x84
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	4611      	mov	r1, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	01d2      	lsls	r2, r2, #7
 80043d0:	440a      	add	r2, r1
 80043d2:	3284      	adds	r2, #132	; 0x84
 80043d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043d8:	f023 0307 	bic.w	r3, r3, #7
 80043dc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	6809      	ldr	r1, [r1, #0]
 80043ea:	4608      	mov	r0, r1
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	01c9      	lsls	r1, r1, #7
 80043f0:	4401      	add	r1, r0
 80043f2:	3184      	adds	r1, #132	; 0x84
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	01db      	lsls	r3, r3, #7
 8004402:	4413      	add	r3, r2
 8004404:	3384      	adds	r3, #132	; 0x84
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	01db      	lsls	r3, r3, #7
 8004412:	4413      	add	r3, r2
 8004414:	3384      	adds	r3, #132	; 0x84
 8004416:	461a      	mov	r2, r3
 8004418:	2300      	movs	r3, #0
 800441a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	01db      	lsls	r3, r3, #7
 8004426:	4413      	add	r3, r2
 8004428:	3384      	adds	r3, #132	; 0x84
 800442a:	461a      	mov	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800443a:	2304      	movs	r3, #4
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e01b      	b.n	8004478 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d102      	bne.n	800444e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004448:	2303      	movs	r3, #3
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	e014      	b.n	8004478 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b04      	cmp	r3, #4
 8004454:	d00b      	beq.n	800446e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800445a:	2b02      	cmp	r3, #2
 800445c:	d007      	beq.n	800446e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004462:	2b03      	cmp	r3, #3
 8004464:	d003      	beq.n	800446e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800446a:	2b07      	cmp	r3, #7
 800446c:	d102      	bne.n	8004474 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800446e:	2302      	movs	r3, #2
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	e001      	b.n	8004478 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004474:	2301      	movs	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	01db      	lsls	r3, r3, #7
 8004482:	4413      	add	r3, r2
 8004484:	3384      	adds	r3, #132	; 0x84
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	4611      	mov	r1, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	01d2      	lsls	r2, r2, #7
 8004492:	440a      	add	r2, r1
 8004494:	3284      	adds	r2, #132	; 0x84
 8004496:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800449a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	1acb      	subs	r3, r1, r3
 80044b2:	69f9      	ldr	r1, [r7, #28]
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	6809      	ldr	r1, [r1, #0]
 80044be:	4608      	mov	r0, r1
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	01c9      	lsls	r1, r1, #7
 80044c4:	4401      	add	r1, r0
 80044c6:	3184      	adds	r1, #132	; 0x84
 80044c8:	4313      	orrs	r3, r2
 80044ca:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	01db      	lsls	r3, r3, #7
 80044d6:	4413      	add	r3, r2
 80044d8:	3384      	adds	r3, #132	; 0x84
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	4611      	mov	r1, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	01d2      	lsls	r2, r2, #7
 80044e6:	440a      	add	r2, r1
 80044e8:	3284      	adds	r2, #132	; 0x84
 80044ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	01db      	lsls	r3, r3, #7
 80044fe:	4413      	add	r3, r2
 8004500:	3384      	adds	r3, #132	; 0x84
 8004502:	461a      	mov	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	01db      	lsls	r3, r3, #7
 8004514:	4413      	add	r3, r2
 8004516:	3384      	adds	r3, #132	; 0x84
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	4611      	mov	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	01d2      	lsls	r2, r2, #7
 8004524:	440a      	add	r2, r1
 8004526:	3284      	adds	r2, #132	; 0x84
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	6013      	str	r3, [r2, #0]
}
 800452e:	bf00      	nop
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e267      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d075      	beq.n	8004646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800455a:	4b88      	ldr	r3, [pc, #544]	; (800477c <HAL_RCC_OscConfig+0x240>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b04      	cmp	r3, #4
 8004564:	d00c      	beq.n	8004580 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004566:	4b85      	ldr	r3, [pc, #532]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800456e:	2b08      	cmp	r3, #8
 8004570:	d112      	bne.n	8004598 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004572:	4b82      	ldr	r3, [pc, #520]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457e:	d10b      	bne.n	8004598 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004580:	4b7e      	ldr	r3, [pc, #504]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d05b      	beq.n	8004644 <HAL_RCC_OscConfig+0x108>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d157      	bne.n	8004644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e242      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a0:	d106      	bne.n	80045b0 <HAL_RCC_OscConfig+0x74>
 80045a2:	4b76      	ldr	r3, [pc, #472]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a75      	ldr	r2, [pc, #468]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e01d      	b.n	80045ec <HAL_RCC_OscConfig+0xb0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x98>
 80045ba:	4b70      	ldr	r3, [pc, #448]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a6f      	ldr	r2, [pc, #444]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4b6d      	ldr	r3, [pc, #436]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6c      	ldr	r2, [pc, #432]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e00b      	b.n	80045ec <HAL_RCC_OscConfig+0xb0>
 80045d4:	4b69      	ldr	r3, [pc, #420]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a68      	ldr	r2, [pc, #416]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	4b66      	ldr	r3, [pc, #408]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a65      	ldr	r2, [pc, #404]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80045e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d013      	beq.n	800461c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fd f8cc 	bl	8001790 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fd f8c8 	bl	8001790 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e207      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b5b      	ldr	r3, [pc, #364]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0xc0>
 800461a:	e014      	b.n	8004646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fd f8b8 	bl	8001790 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004624:	f7fd f8b4 	bl	8001790 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e1f3      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004636:	4b51      	ldr	r3, [pc, #324]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0xe8>
 8004642:	e000      	b.n	8004646 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d063      	beq.n	800471a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004652:	4b4a      	ldr	r3, [pc, #296]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004666:	2b08      	cmp	r3, #8
 8004668:	d11c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800466a:	4b44      	ldr	r3, [pc, #272]	; (800477c <HAL_RCC_OscConfig+0x240>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d116      	bne.n	80046a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004676:	4b41      	ldr	r3, [pc, #260]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_RCC_OscConfig+0x152>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d001      	beq.n	800468e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e1c7      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468e:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4937      	ldr	r1, [pc, #220]	; (800477c <HAL_RCC_OscConfig+0x240>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a2:	e03a      	b.n	800471a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ac:	4b34      	ldr	r3, [pc, #208]	; (8004780 <HAL_RCC_OscConfig+0x244>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fd f86d 	bl	8001790 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ba:	f7fd f869 	bl	8001790 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e1a8      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046cc:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d8:	4b28      	ldr	r3, [pc, #160]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4925      	ldr	r1, [pc, #148]	; (800477c <HAL_RCC_OscConfig+0x240>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	600b      	str	r3, [r1, #0]
 80046ec:	e015      	b.n	800471a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ee:	4b24      	ldr	r3, [pc, #144]	; (8004780 <HAL_RCC_OscConfig+0x244>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fd f84c 	bl	8001790 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046fc:	f7fd f848 	bl	8001790 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e187      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470e:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d036      	beq.n	8004794 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d016      	beq.n	800475c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800472e:	4b15      	ldr	r3, [pc, #84]	; (8004784 <HAL_RCC_OscConfig+0x248>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fd f82c 	bl	8001790 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800473c:	f7fd f828 	bl	8001790 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e167      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474e:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_OscConfig+0x240>)
 8004750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x200>
 800475a:	e01b      	b.n	8004794 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_RCC_OscConfig+0x248>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004762:	f7fd f815 	bl	8001790 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004768:	e00e      	b.n	8004788 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800476a:	f7fd f811 	bl	8001790 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d907      	bls.n	8004788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e150      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
 800477c:	40023800 	.word	0x40023800
 8004780:	42470000 	.word	0x42470000
 8004784:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004788:	4b88      	ldr	r3, [pc, #544]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 800478a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ea      	bne.n	800476a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8097 	beq.w	80048d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a6:	4b81      	ldr	r3, [pc, #516]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10f      	bne.n	80047d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	4b7d      	ldr	r3, [pc, #500]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	4a7c      	ldr	r2, [pc, #496]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6413      	str	r3, [r2, #64]	; 0x40
 80047c2:	4b7a      	ldr	r3, [pc, #488]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	4b77      	ldr	r3, [pc, #476]	; (80049b0 <HAL_RCC_OscConfig+0x474>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d118      	bne.n	8004810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047de:	4b74      	ldr	r3, [pc, #464]	; (80049b0 <HAL_RCC_OscConfig+0x474>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a73      	ldr	r2, [pc, #460]	; (80049b0 <HAL_RCC_OscConfig+0x474>)
 80047e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ea:	f7fc ffd1 	bl	8001790 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f2:	f7fc ffcd 	bl	8001790 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e10c      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004804:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <HAL_RCC_OscConfig+0x474>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d106      	bne.n	8004826 <HAL_RCC_OscConfig+0x2ea>
 8004818:	4b64      	ldr	r3, [pc, #400]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	4a63      	ldr	r2, [pc, #396]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6713      	str	r3, [r2, #112]	; 0x70
 8004824:	e01c      	b.n	8004860 <HAL_RCC_OscConfig+0x324>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b05      	cmp	r3, #5
 800482c:	d10c      	bne.n	8004848 <HAL_RCC_OscConfig+0x30c>
 800482e:	4b5f      	ldr	r3, [pc, #380]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	4a5e      	ldr	r2, [pc, #376]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	6713      	str	r3, [r2, #112]	; 0x70
 800483a:	4b5c      	ldr	r3, [pc, #368]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483e:	4a5b      	ldr	r2, [pc, #364]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	6713      	str	r3, [r2, #112]	; 0x70
 8004846:	e00b      	b.n	8004860 <HAL_RCC_OscConfig+0x324>
 8004848:	4b58      	ldr	r3, [pc, #352]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	4a57      	ldr	r2, [pc, #348]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	6713      	str	r3, [r2, #112]	; 0x70
 8004854:	4b55      	ldr	r3, [pc, #340]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	4a54      	ldr	r2, [pc, #336]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 800485a:	f023 0304 	bic.w	r3, r3, #4
 800485e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d015      	beq.n	8004894 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fc ff92 	bl	8001790 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	e00a      	b.n	8004886 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fc ff8e 	bl	8001790 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0cb      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004886:	4b49      	ldr	r3, [pc, #292]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0ee      	beq.n	8004870 <HAL_RCC_OscConfig+0x334>
 8004892:	e014      	b.n	80048be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004894:	f7fc ff7c 	bl	8001790 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800489c:	f7fc ff78 	bl	8001790 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e0b5      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b2:	4b3e      	ldr	r3, [pc, #248]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ee      	bne.n	800489c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d105      	bne.n	80048d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c4:	4b39      	ldr	r3, [pc, #228]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	4a38      	ldr	r2, [pc, #224]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 80048ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80a1 	beq.w	8004a1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048da:	4b34      	ldr	r3, [pc, #208]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d05c      	beq.n	80049a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d141      	bne.n	8004972 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ee:	4b31      	ldr	r3, [pc, #196]	; (80049b4 <HAL_RCC_OscConfig+0x478>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fc ff4c 	bl	8001790 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048fc:	f7fc ff48 	bl	8001790 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e087      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490e:	4b27      	ldr	r3, [pc, #156]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	019b      	lsls	r3, r3, #6
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	3b01      	subs	r3, #1
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	491b      	ldr	r1, [pc, #108]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x478>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7fc ff21 	bl	8001790 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004952:	f7fc ff1d 	bl	8001790 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e05c      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x416>
 8004970:	e054      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_RCC_OscConfig+0x478>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fc ff0a 	bl	8001790 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004980:	f7fc ff06 	bl	8001790 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e045      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_RCC_OscConfig+0x470>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x444>
 800499e:	e03d      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d107      	bne.n	80049b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e038      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40007000 	.word	0x40007000
 80049b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b8:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_RCC_OscConfig+0x4ec>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d028      	beq.n	8004a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d121      	bne.n	8004a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d11a      	bne.n	8004a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e8:	4013      	ands	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d111      	bne.n	8004a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	3b01      	subs	r3, #1
 8004a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d107      	bne.n	8004a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800

08004a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0cc      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a40:	4b68      	ldr	r3, [pc, #416]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d90c      	bls.n	8004a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b65      	ldr	r3, [pc, #404]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b63      	ldr	r3, [pc, #396]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0b8      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d020      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a80:	4b59      	ldr	r3, [pc, #356]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a58      	ldr	r2, [pc, #352]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a98:	4b53      	ldr	r3, [pc, #332]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a52      	ldr	r2, [pc, #328]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa4:	4b50      	ldr	r3, [pc, #320]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	494d      	ldr	r1, [pc, #308]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d044      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d107      	bne.n	8004ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aca:	4b47      	ldr	r3, [pc, #284]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d119      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e07f      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d003      	beq.n	8004aea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aea:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e06f      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afa:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e067      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b0a:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f023 0203 	bic.w	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4934      	ldr	r1, [pc, #208]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b1c:	f7fc fe38 	bl	8001790 <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b24:	f7fc fe34 	bl	8001790 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e04f      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 020c 	and.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d1eb      	bne.n	8004b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b25      	ldr	r3, [pc, #148]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d20c      	bcs.n	8004b74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b22      	ldr	r3, [pc, #136]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e032      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b80:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4916      	ldr	r1, [pc, #88]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	490e      	ldr	r1, [pc, #56]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bb2:	f000 f821 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	490a      	ldr	r1, [pc, #40]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004bc4:	5ccb      	ldrb	r3, [r1, r3]
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fc fc70 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40023c00 	.word	0x40023c00
 8004be8:	40023800 	.word	0x40023800
 8004bec:	0800d244 	.word	0x0800d244
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	20000004 	.word	0x20000004

08004bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bfc:	b094      	sub	sp, #80	; 0x50
 8004bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	647b      	str	r3, [r7, #68]	; 0x44
 8004c04:	2300      	movs	r3, #0
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c08:	2300      	movs	r3, #0
 8004c0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c10:	4b79      	ldr	r3, [pc, #484]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d00d      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x40>
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	f200 80e1 	bhi.w	8004de4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x34>
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d003      	beq.n	8004c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c2a:	e0db      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c2c:	4b73      	ldr	r3, [pc, #460]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004c2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c30:	e0db      	b.n	8004dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c32:	4b73      	ldr	r3, [pc, #460]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c36:	e0d8      	b.n	8004dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c38:	4b6f      	ldr	r3, [pc, #444]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c42:	4b6d      	ldr	r3, [pc, #436]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d063      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4e:	4b6a      	ldr	r3, [pc, #424]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	099b      	lsrs	r3, r3, #6
 8004c54:	2200      	movs	r2, #0
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30
 8004c62:	2300      	movs	r3, #0
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
 8004c66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	f04f 0000 	mov.w	r0, #0
 8004c72:	f04f 0100 	mov.w	r1, #0
 8004c76:	0159      	lsls	r1, r3, #5
 8004c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c7c:	0150      	lsls	r0, r2, #5
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4621      	mov	r1, r4
 8004c84:	1a51      	subs	r1, r2, r1
 8004c86:	6139      	str	r1, [r7, #16]
 8004c88:	4629      	mov	r1, r5
 8004c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	018b      	lsls	r3, r1, #6
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	018a      	lsls	r2, r1, #6
 8004caa:	4651      	mov	r1, sl
 8004cac:	ebb2 0801 	subs.w	r8, r2, r1
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	eb63 0901 	sbc.w	r9, r3, r1
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cca:	4690      	mov	r8, r2
 8004ccc:	4699      	mov	r9, r3
 8004cce:	4623      	mov	r3, r4
 8004cd0:	eb18 0303 	adds.w	r3, r8, r3
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	eb49 0303 	adc.w	r3, r9, r3
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cea:	4629      	mov	r1, r5
 8004cec:	024b      	lsls	r3, r1, #9
 8004cee:	4621      	mov	r1, r4
 8004cf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	024a      	lsls	r2, r1, #9
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfe:	2200      	movs	r2, #0
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d08:	f7fb fa72 	bl	80001f0 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4613      	mov	r3, r2
 8004d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d14:	e058      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d16:	4b38      	ldr	r3, [pc, #224]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	099b      	lsrs	r3, r3, #6
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	4611      	mov	r1, r2
 8004d22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d26:	623b      	str	r3, [r7, #32]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d30:	4642      	mov	r2, r8
 8004d32:	464b      	mov	r3, r9
 8004d34:	f04f 0000 	mov.w	r0, #0
 8004d38:	f04f 0100 	mov.w	r1, #0
 8004d3c:	0159      	lsls	r1, r3, #5
 8004d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d42:	0150      	lsls	r0, r2, #5
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4641      	mov	r1, r8
 8004d4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d4e:	4649      	mov	r1, r9
 8004d50:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d68:	ebb2 040a 	subs.w	r4, r2, sl
 8004d6c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	00eb      	lsls	r3, r5, #3
 8004d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d7e:	00e2      	lsls	r2, r4, #3
 8004d80:	4614      	mov	r4, r2
 8004d82:	461d      	mov	r5, r3
 8004d84:	4643      	mov	r3, r8
 8004d86:	18e3      	adds	r3, r4, r3
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	eb45 0303 	adc.w	r3, r5, r3
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d9e:	4629      	mov	r1, r5
 8004da0:	028b      	lsls	r3, r1, #10
 8004da2:	4621      	mov	r1, r4
 8004da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004da8:	4621      	mov	r1, r4
 8004daa:	028a      	lsls	r2, r1, #10
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db2:	2200      	movs	r2, #0
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	61fa      	str	r2, [r7, #28]
 8004db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dbc:	f7fb fa18 	bl	80001f0 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004de2:	e002      	b.n	8004dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004de6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3750      	adds	r7, #80	; 0x50
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	007a1200 	.word	0x007a1200

08004e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e08:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000000 	.word	0x20000000

08004e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e20:	f7ff fff0 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0a9b      	lsrs	r3, r3, #10
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4903      	ldr	r1, [pc, #12]	; (8004e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	0800d254 	.word	0x0800d254

08004e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e48:	f7ff ffdc 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0b5b      	lsrs	r3, r3, #13
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	; (8004e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	0800d254 	.word	0x0800d254

08004e6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	220f      	movs	r2, #15
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e7c:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	08db      	lsrs	r3, r3, #3
 8004ea6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004eae:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <HAL_RCC_GetClockConfig+0x60>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 020f 	and.w	r2, r3, #15
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	601a      	str	r2, [r3, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40023c00 	.word	0x40023c00

08004ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d075      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f04:	4b91      	ldr	r3, [pc, #580]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f0a:	f7fc fc41 	bl	8001790 <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f12:	f7fc fc3d 	bl	8001790 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e189      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f24:	4b8a      	ldr	r3, [pc, #552]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	019a      	lsls	r2, r3, #6
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	071b      	lsls	r3, r3, #28
 8004f48:	4981      	ldr	r1, [pc, #516]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01f      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f5c:	4b7c      	ldr	r3, [pc, #496]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f62:	0f1b      	lsrs	r3, r3, #28
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	019a      	lsls	r2, r3, #6
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	431a      	orrs	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	071b      	lsls	r3, r3, #28
 8004f7c:	4974      	ldr	r1, [pc, #464]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f84:	4b72      	ldr	r3, [pc, #456]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f8a:	f023 021f 	bic.w	r2, r3, #31
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	496e      	ldr	r1, [pc, #440]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	019a      	lsls	r2, r3, #6
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	061b      	lsls	r3, r3, #24
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	071b      	lsls	r3, r3, #28
 8004fbc:	4964      	ldr	r1, [pc, #400]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fc4:	4b61      	ldr	r3, [pc, #388]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fca:	f7fc fbe1 	bl	8001790 <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fd2:	f7fc fbdd 	bl	8001790 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e129      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fe4:	4b5a      	ldr	r3, [pc, #360]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d105      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005004:	2b00      	cmp	r3, #0
 8005006:	d079      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005008:	4b52      	ldr	r3, [pc, #328]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800500e:	f7fc fbbf 	bl	8001790 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005016:	f7fc fbbb 	bl	8001790 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e107      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005028:	4b49      	ldr	r3, [pc, #292]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005034:	d0ef      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d020      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005042:	4b43      	ldr	r3, [pc, #268]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	0f1b      	lsrs	r3, r3, #28
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	019a      	lsls	r2, r3, #6
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	061b      	lsls	r3, r3, #24
 800505c:	431a      	orrs	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	071b      	lsls	r3, r3, #28
 8005062:	493b      	ldr	r1, [pc, #236]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800506a:	4b39      	ldr	r3, [pc, #228]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800506c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005070:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	3b01      	subs	r3, #1
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	4934      	ldr	r1, [pc, #208]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01e      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005090:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	0e1b      	lsrs	r3, r3, #24
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	019a      	lsls	r2, r3, #6
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	061b      	lsls	r3, r3, #24
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	071b      	lsls	r3, r3, #28
 80050b0:	4927      	ldr	r1, [pc, #156]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050b8:	4b25      	ldr	r3, [pc, #148]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	4922      	ldr	r1, [pc, #136]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050ce:	4b21      	ldr	r3, [pc, #132]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050d4:	f7fc fb5c 	bl	8001790 <HAL_GetTick>
 80050d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050dc:	f7fc fb58 	bl	8001790 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e0a4      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ee:	4b18      	ldr	r3, [pc, #96]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fa:	d1ef      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 808b 	beq.w	8005220 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	4b10      	ldr	r3, [pc, #64]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	4a0f      	ldr	r2, [pc, #60]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005118:	6413      	str	r3, [r2, #64]	; 0x40
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005130:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005132:	f7fc fb2d 	bl	8001790 <HAL_GetTick>
 8005136:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005138:	e010      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fc fb29 	bl	8001790 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d909      	bls.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e075      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800514c:	42470068 	.word	0x42470068
 8005150:	40023800 	.word	0x40023800
 8005154:	42470070 	.word	0x42470070
 8005158:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800515c:	4b38      	ldr	r3, [pc, #224]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0e8      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005168:	4b36      	ldr	r3, [pc, #216]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005170:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02f      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d028      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005186:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005190:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005196:	4b2c      	ldr	r3, [pc, #176]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800519c:	4a29      	ldr	r2, [pc, #164]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051a2:	4b28      	ldr	r3, [pc, #160]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d114      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051ae:	f7fc faef 	bl	8001790 <HAL_GetTick>
 80051b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b4:	e00a      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b6:	f7fc faeb 	bl	8001790 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d901      	bls.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e035      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051cc:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ee      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051e4:	d10d      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80051e6:	4b17      	ldr	r3, [pc, #92]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	4912      	ldr	r1, [pc, #72]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	608b      	str	r3, [r1, #8]
 8005200:	e005      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005202:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	4a0f      	ldr	r2, [pc, #60]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005208:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800520c:	6093      	str	r3, [r2, #8]
 800520e:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800521a:	490a      	ldr	r1, [pc, #40]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800521c:	4313      	orrs	r3, r2
 800521e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005234:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40007000 	.word	0x40007000
 8005244:	40023800 	.word	0x40023800
 8005248:	42470e40 	.word	0x42470e40
 800524c:	424711e0 	.word	0x424711e0

08005250 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e025      	b.n	80052b0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fc f913 	bl	80014a4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f001 fd93 	bl	8006dbc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	461a      	mov	r2, r3
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	f001 fde8 	bl	8006e76 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e07b      	b.n	80053c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052da:	d009      	beq.n	80052f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	61da      	str	r2, [r3, #28]
 80052e2:	e005      	b.n	80052f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fb ff7e 	bl	800120c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	ea42 0103 	orr.w	r1, r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	f003 0104 	and.w	r1, r3, #4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	f003 0210 	and.w	r2, r3, #16
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69da      	ldr	r2, [r3, #28]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e041      	b.n	8005460 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fb ff53 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3304      	adds	r3, #4
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f000 fa95 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	d001      	beq.n	8005480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e04e      	b.n	800551e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a23      	ldr	r2, [pc, #140]	; (800552c <HAL_TIM_Base_Start_IT+0xc4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d022      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x80>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d01d      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x80>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <HAL_TIM_Base_Start_IT+0xc8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d018      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x80>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <HAL_TIM_Base_Start_IT+0xcc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x80>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <HAL_TIM_Base_Start_IT+0xd0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00e      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x80>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	; (800553c <HAL_TIM_Base_Start_IT+0xd4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d009      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x80>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a19      	ldr	r2, [pc, #100]	; (8005540 <HAL_TIM_Base_Start_IT+0xd8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x80>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a18      	ldr	r2, [pc, #96]	; (8005544 <HAL_TIM_Base_Start_IT+0xdc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d111      	bne.n	800550c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b06      	cmp	r3, #6
 80054f8:	d010      	beq.n	800551c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0201 	orr.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550a:	e007      	b.n	800551c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40010400 	.word	0x40010400
 8005540:	40014000 	.word	0x40014000
 8005544:	40001800 	.word	0x40001800

08005548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d122      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d11b      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0202 	mvn.w	r2, #2
 8005574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f9b5 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9a7 	bl	80058e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f9b8 	bl	800590e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0204 	mvn.w	r2, #4
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f98b 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f97d 	bl	80058e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f98e 	bl	800590e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b08      	cmp	r3, #8
 8005604:	d122      	bne.n	800564c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b08      	cmp	r3, #8
 8005612:	d11b      	bne.n	800564c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0208 	mvn.w	r2, #8
 800561c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2204      	movs	r2, #4
 8005622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f961 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f953 	bl	80058e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f964 	bl	800590e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b10      	cmp	r3, #16
 8005658:	d122      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b10      	cmp	r3, #16
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0210 	mvn.w	r2, #16
 8005670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2208      	movs	r2, #8
 8005676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f937 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f929 	bl	80058e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f93a 	bl	800590e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d10e      	bne.n	80056cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d107      	bne.n	80056cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0201 	mvn.w	r2, #1
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fb fb78 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d10e      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fae0 	bl	8005cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d107      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f8ff 	bl	8005922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b20      	cmp	r3, #32
 8005730:	d10e      	bne.n	8005750 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b20      	cmp	r3, #32
 800573e:	d107      	bne.n	8005750 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0220 	mvn.w	r2, #32
 8005748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 faaa 	bl	8005ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_TIM_ConfigClockSource+0x1c>
 8005770:	2302      	movs	r3, #2
 8005772:	e0b4      	b.n	80058de <HAL_TIM_ConfigClockSource+0x186>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800579a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ac:	d03e      	beq.n	800582c <HAL_TIM_ConfigClockSource+0xd4>
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b2:	f200 8087 	bhi.w	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	f000 8086 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x172>
 80057be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c2:	d87f      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b70      	cmp	r3, #112	; 0x70
 80057c6:	d01a      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0xa6>
 80057c8:	2b70      	cmp	r3, #112	; 0x70
 80057ca:	d87b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b60      	cmp	r3, #96	; 0x60
 80057ce:	d050      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x11a>
 80057d0:	2b60      	cmp	r3, #96	; 0x60
 80057d2:	d877      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b50      	cmp	r3, #80	; 0x50
 80057d6:	d03c      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0xfa>
 80057d8:	2b50      	cmp	r3, #80	; 0x50
 80057da:	d873      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d058      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x13a>
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d86f      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b30      	cmp	r3, #48	; 0x30
 80057e6:	d064      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15a>
 80057e8:	2b30      	cmp	r3, #48	; 0x30
 80057ea:	d86b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d060      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15a>
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d867      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d05c      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15a>
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d05a      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x15a>
 80057fc:	e062      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6899      	ldr	r1, [r3, #8]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f000 f9ad 	bl	8005b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	609a      	str	r2, [r3, #8]
      break;
 800582a:	e04f      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6899      	ldr	r1, [r3, #8]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f000 f996 	bl	8005b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800584e:	609a      	str	r2, [r3, #8]
      break;
 8005850:	e03c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	461a      	mov	r2, r3
 8005860:	f000 f90a 	bl	8005a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2150      	movs	r1, #80	; 0x50
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f963 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 8005870:	e02c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	461a      	mov	r2, r3
 8005880:	f000 f929 	bl	8005ad6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2160      	movs	r1, #96	; 0x60
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f953 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 8005890:	e01c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 f8ea 	bl	8005a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2140      	movs	r1, #64	; 0x40
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f943 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 80058b0:	e00c      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f000 f93a 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 80058c2:	e003      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]
      break;
 80058c8:	e000      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a40      	ldr	r2, [pc, #256]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d00f      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3d      	ldr	r2, [pc, #244]	; (8005a50 <TIM_Base_SetConfig+0x118>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00b      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a3c      	ldr	r2, [pc, #240]	; (8005a54 <TIM_Base_SetConfig+0x11c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a3b      	ldr	r2, [pc, #236]	; (8005a58 <TIM_Base_SetConfig+0x120>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3a      	ldr	r2, [pc, #232]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d108      	bne.n	800598a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2f      	ldr	r2, [pc, #188]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d02b      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005998:	d027      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <TIM_Base_SetConfig+0x118>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d023      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2b      	ldr	r2, [pc, #172]	; (8005a54 <TIM_Base_SetConfig+0x11c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01f      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2a      	ldr	r2, [pc, #168]	; (8005a58 <TIM_Base_SetConfig+0x120>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01b      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d017      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a28      	ldr	r2, [pc, #160]	; (8005a60 <TIM_Base_SetConfig+0x128>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a27      	ldr	r2, [pc, #156]	; (8005a64 <TIM_Base_SetConfig+0x12c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00f      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <TIM_Base_SetConfig+0x130>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00b      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a25      	ldr	r2, [pc, #148]	; (8005a6c <TIM_Base_SetConfig+0x134>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a24      	ldr	r2, [pc, #144]	; (8005a70 <TIM_Base_SetConfig+0x138>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a23      	ldr	r2, [pc, #140]	; (8005a74 <TIM_Base_SetConfig+0x13c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d108      	bne.n	80059fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0xf8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d103      	bne.n	8005a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	615a      	str	r2, [r3, #20]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800
 8005a6c:	40001800 	.word	0x40001800
 8005a70:	40001c00 	.word	0x40001c00
 8005a74:	40002000 	.word	0x40002000

08005a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f023 0201 	bic.w	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f023 030a 	bic.w	r3, r3, #10
 8005ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	621a      	str	r2, [r3, #32]
}
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b087      	sub	sp, #28
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f023 0210 	bic.w	r2, r3, #16
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	031b      	lsls	r3, r3, #12
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f043 0307 	orr.w	r3, r3, #7
 8005b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	609a      	str	r2, [r3, #8]
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	021a      	lsls	r2, r3, #8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	609a      	str	r2, [r3, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e05a      	b.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a21      	ldr	r2, [pc, #132]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d022      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d01d      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d018      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1b      	ldr	r2, [pc, #108]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00e      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d009      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d004      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d10c      	bne.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40001800 	.word	0x40001800

08005ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e03f      	b.n	8005d5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb faf4 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2224      	movs	r2, #36	; 0x24
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fddf 	bl	80068d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b08a      	sub	sp, #40	; 0x28
 8005d6a:	af02      	add	r7, sp, #8
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d17c      	bne.n	8005e80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <HAL_UART_Transmit+0x2c>
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e075      	b.n	8005e82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_UART_Transmit+0x3e>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e06e      	b.n	8005e82 <HAL_UART_Transmit+0x11c>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2221      	movs	r2, #33	; 0x21
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dba:	f7fb fce9 	bl	8001790 <HAL_GetTick>
 8005dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	88fa      	ldrh	r2, [r7, #6]
 8005dca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd4:	d108      	bne.n	8005de8 <HAL_UART_Transmit+0x82>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d104      	bne.n	8005de8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	e003      	b.n	8005df0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005df8:	e02a      	b.n	8005e50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2200      	movs	r2, #0
 8005e02:	2180      	movs	r1, #128	; 0x80
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 fb1f 	bl	8006448 <UART_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e036      	b.n	8005e82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10b      	bne.n	8005e32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	e007      	b.n	8005e42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	781a      	ldrb	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1cf      	bne.n	8005dfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2200      	movs	r2, #0
 8005e62:	2140      	movs	r1, #64	; 0x40
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 faef 	bl	8006448 <UART_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e006      	b.n	8005e82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e000      	b.n	8005e82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e80:	2302      	movs	r3, #2
  }
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	4613      	mov	r3, r2
 8005e96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d11d      	bne.n	8005ee0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_UART_Receive_IT+0x26>
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e016      	b.n	8005ee2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Receive_IT+0x38>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e00f      	b.n	8005ee2 <HAL_UART_Receive_IT+0x58>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fb24 	bl	8006524 <UART_Start_Receive_IT>
 8005edc:	4603      	mov	r3, r0
 8005ede:	e000      	b.n	8005ee2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b0ba      	sub	sp, #232	; 0xe8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <HAL_UART_IRQHandler+0x66>
 8005f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fc07 	bl	800675e <UART_Receive_IT>
      return;
 8005f50:	e256      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 80de 	beq.w	8006118 <HAL_UART_IRQHandler+0x22c>
 8005f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80d1 	beq.w	8006118 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <HAL_UART_IRQHandler+0xae>
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f043 0201 	orr.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <HAL_UART_IRQHandler+0xd2>
 8005fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f043 0202 	orr.w	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <HAL_UART_IRQHandler+0xf6>
 8005fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f043 0204 	orr.w	r2, r3, #4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d011      	beq.n	8006012 <HAL_UART_IRQHandler+0x126>
 8005fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d105      	bne.n	8006006 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f043 0208 	orr.w	r2, r3, #8
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 81ed 	beq.w	80063f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_UART_IRQHandler+0x14e>
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fb92 	bl	800675e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <HAL_UART_IRQHandler+0x17a>
 800605e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d04f      	beq.n	8006106 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa9a 	bl	80065a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d141      	bne.n	80060fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3314      	adds	r3, #20
 80060a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1d9      	bne.n	800607a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d013      	beq.n	80060f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	4a7d      	ldr	r2, [pc, #500]	; (80062c8 <HAL_UART_IRQHandler+0x3dc>)
 80060d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fb fcf6 	bl	8001acc <HAL_DMA_Abort_IT>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d016      	beq.n	8006114 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060f0:	4610      	mov	r0, r2
 80060f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	e00e      	b.n	8006114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f990 	bl	800641c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fc:	e00a      	b.n	8006114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f98c 	bl	800641c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	e006      	b.n	8006114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f988 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006112:	e170      	b.n	80063f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006114:	bf00      	nop
    return;
 8006116:	e16e      	b.n	80063f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	f040 814a 	bne.w	80063b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8143 	beq.w	80063b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 813c 	beq.w	80063b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60bb      	str	r3, [r7, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	f040 80b4 	bne.w	80062cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8140 	beq.w	80063fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800617e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006182:	429a      	cmp	r2, r3
 8006184:	f080 8139 	bcs.w	80063fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800618e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619a:	f000 8088 	beq.w	80062ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	330c      	adds	r3, #12
 80061a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1d9      	bne.n	800619e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3314      	adds	r3, #20
 80061f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800620e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006212:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e1      	bne.n	80061ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3314      	adds	r3, #20
 800622c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3314      	adds	r3, #20
 8006246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800624a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800624c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e3      	bne.n	8006226 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800627c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800627e:	f023 0310 	bic.w	r3, r3, #16
 8006282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006290:	65ba      	str	r2, [r7, #88]	; 0x58
 8006292:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800629e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e3      	bne.n	800626c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fb fb9f 	bl	80019ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f8b6 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062c4:	e099      	b.n	80063fa <HAL_UART_IRQHandler+0x50e>
 80062c6:	bf00      	nop
 80062c8:	08006667 	.word	0x08006667
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 808b 	beq.w	80063fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8086 	beq.w	80063fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006316:	647a      	str	r2, [r7, #68]	; 0x44
 8006318:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800631c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e3      	bne.n	80062f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3314      	adds	r3, #20
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	623b      	str	r3, [r7, #32]
   return(result);
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3314      	adds	r3, #20
 800634a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800634e:	633a      	str	r2, [r7, #48]	; 0x30
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e3      	bne.n	800632a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0310 	bic.w	r3, r3, #16
 8006386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006394:	61fa      	str	r2, [r7, #28]
 8006396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	617b      	str	r3, [r7, #20]
   return(result);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e3      	bne.n	8006370 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f83e 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063b4:	e023      	b.n	80063fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <HAL_UART_IRQHandler+0x4ea>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f95d 	bl	800668e <UART_Transmit_IT>
    return;
 80063d4:	e014      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00e      	beq.n	8006400 <HAL_UART_IRQHandler+0x514>
 80063e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f99d 	bl	800672e <UART_EndTransmit_IT>
    return;
 80063f4:	e004      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
    return;
 80063f6:	bf00      	nop
 80063f8:	e002      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
      return;
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
      return;
 80063fe:	bf00      	nop
  }
}
 8006400:	37e8      	adds	r7, #232	; 0xe8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop

08006408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b090      	sub	sp, #64	; 0x40
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006458:	e050      	b.n	80064fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	d04c      	beq.n	80064fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <UART_WaitOnFlagUntilTimeout+0x30>
 8006468:	f7fb f992 	bl	8001790 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006474:	429a      	cmp	r2, r3
 8006476:	d241      	bcs.n	80064fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	330c      	adds	r3, #12
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006498:	637a      	str	r2, [r7, #52]	; 0x34
 800649a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800649e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e5      	bne.n	8006478 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3314      	adds	r3, #20
 80064b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	613b      	str	r3, [r7, #16]
   return(result);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3314      	adds	r3, #20
 80064ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064cc:	623a      	str	r2, [r7, #32]
 80064ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	69f9      	ldr	r1, [r7, #28]
 80064d2:	6a3a      	ldr	r2, [r7, #32]
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e5      	bne.n	80064ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e00f      	b.n	800651c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4013      	ands	r3, r2
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	bf0c      	ite	eq
 800650c:	2301      	moveq	r3, #1
 800650e:	2300      	movne	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	461a      	mov	r2, r3
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	429a      	cmp	r2, r3
 8006518:	d09f      	beq.n	800645a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3740      	adds	r7, #64	; 0x40
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	88fa      	ldrh	r2, [r7, #6]
 8006542:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2222      	movs	r2, #34	; 0x22
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006570:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695a      	ldr	r2, [r3, #20]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0201 	orr.w	r2, r2, #1
 8006580:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0220 	orr.w	r2, r2, #32
 8006590:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b095      	sub	sp, #84	; 0x54
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065c8:	643a      	str	r2, [r7, #64]	; 0x40
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e5      	bne.n	80065a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3314      	adds	r3, #20
 80065e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3314      	adds	r3, #20
 80065fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e5      	bne.n	80065dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	2b01      	cmp	r3, #1
 8006616:	d119      	bne.n	800664c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	60bb      	str	r3, [r7, #8]
   return(result);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f023 0310 	bic.w	r3, r3, #16
 800662e:	647b      	str	r3, [r7, #68]	; 0x44
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	330c      	adds	r3, #12
 8006636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006638:	61ba      	str	r2, [r7, #24]
 800663a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6979      	ldr	r1, [r7, #20]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	613b      	str	r3, [r7, #16]
   return(result);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e5      	bne.n	8006618 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800665a:	bf00      	nop
 800665c:	3754      	adds	r7, #84	; 0x54
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff fecb 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b21      	cmp	r3, #33	; 0x21
 80066a0:	d13e      	bne.n	8006720 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066aa:	d114      	bne.n	80066d6 <UART_Transmit_IT+0x48>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d110      	bne.n	80066d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	1c9a      	adds	r2, r3, #2
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	621a      	str	r2, [r3, #32]
 80066d4:	e008      	b.n	80066e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	1c59      	adds	r1, r3, #1
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6211      	str	r1, [r2, #32]
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4619      	mov	r1, r3
 80066f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10f      	bne.n	800671c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800670a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800671a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006720:	2302      	movs	r3, #2
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006744:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff fe5a 	bl	8006408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b08c      	sub	sp, #48	; 0x30
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b22      	cmp	r3, #34	; 0x22
 8006770:	f040 80ab 	bne.w	80068ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	d117      	bne.n	80067ae <UART_Receive_IT+0x50>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d113      	bne.n	80067ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679c:	b29a      	uxth	r2, r3
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	1c9a      	adds	r2, r3, #2
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	629a      	str	r2, [r3, #40]	; 0x28
 80067ac:	e026      	b.n	80067fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c0:	d007      	beq.n	80067d2 <UART_Receive_IT+0x74>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <UART_Receive_IT+0x82>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e008      	b.n	80067f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29b      	uxth	r3, r3
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	4619      	mov	r1, r3
 800680a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800680c:	2b00      	cmp	r3, #0
 800680e:	d15a      	bne.n	80068c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0220 	bic.w	r2, r2, #32
 800681e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800682e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695a      	ldr	r2, [r3, #20]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	2b01      	cmp	r3, #1
 800684e:	d135      	bne.n	80068bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	613b      	str	r3, [r7, #16]
   return(result);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f023 0310 	bic.w	r3, r3, #16
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
 8006874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006876:	623a      	str	r2, [r7, #32]
 8006878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	6a3a      	ldr	r2, [r7, #32]
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	61bb      	str	r3, [r7, #24]
   return(result);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b10      	cmp	r3, #16
 8006896:	d10a      	bne.n	80068ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff fdbb 	bl	8006430 <HAL_UARTEx_RxEventCallback>
 80068ba:	e002      	b.n	80068c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fa fa07 	bl	8000cd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e002      	b.n	80068cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e000      	b.n	80068cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068ca:	2302      	movs	r3, #2
  }
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3730      	adds	r7, #48	; 0x30
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068d8:	b0c0      	sub	sp, #256	; 0x100
 80068da:	af00      	add	r7, sp, #0
 80068dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	68d9      	ldr	r1, [r3, #12]
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	ea40 0301 	orr.w	r3, r0, r1
 80068fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	431a      	orrs	r2, r3
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	431a      	orrs	r2, r3
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800692c:	f021 010c 	bic.w	r1, r1, #12
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800693a:	430b      	orrs	r3, r1
 800693c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800693e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800694a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694e:	6999      	ldr	r1, [r3, #24]
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	ea40 0301 	orr.w	r3, r0, r1
 800695a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	4b8f      	ldr	r3, [pc, #572]	; (8006ba0 <UART_SetConfig+0x2cc>)
 8006964:	429a      	cmp	r2, r3
 8006966:	d005      	beq.n	8006974 <UART_SetConfig+0xa0>
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b8d      	ldr	r3, [pc, #564]	; (8006ba4 <UART_SetConfig+0x2d0>)
 8006970:	429a      	cmp	r2, r3
 8006972:	d104      	bne.n	800697e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006974:	f7fe fa66 	bl	8004e44 <HAL_RCC_GetPCLK2Freq>
 8006978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800697c:	e003      	b.n	8006986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800697e:	f7fe fa4d 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8006982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006990:	f040 810c 	bne.w	8006bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006998:	2200      	movs	r2, #0
 800699a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800699e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069a6:	4622      	mov	r2, r4
 80069a8:	462b      	mov	r3, r5
 80069aa:	1891      	adds	r1, r2, r2
 80069ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80069ae:	415b      	adcs	r3, r3
 80069b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069b6:	4621      	mov	r1, r4
 80069b8:	eb12 0801 	adds.w	r8, r2, r1
 80069bc:	4629      	mov	r1, r5
 80069be:	eb43 0901 	adc.w	r9, r3, r1
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	f04f 0300 	mov.w	r3, #0
 80069ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069d6:	4690      	mov	r8, r2
 80069d8:	4699      	mov	r9, r3
 80069da:	4623      	mov	r3, r4
 80069dc:	eb18 0303 	adds.w	r3, r8, r3
 80069e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069e4:	462b      	mov	r3, r5
 80069e6:	eb49 0303 	adc.w	r3, r9, r3
 80069ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a02:	460b      	mov	r3, r1
 8006a04:	18db      	adds	r3, r3, r3
 8006a06:	653b      	str	r3, [r7, #80]	; 0x50
 8006a08:	4613      	mov	r3, r2
 8006a0a:	eb42 0303 	adc.w	r3, r2, r3
 8006a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a18:	f7f9 fbea 	bl	80001f0 <__aeabi_uldivmod>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4b61      	ldr	r3, [pc, #388]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006a22:	fba3 2302 	umull	r2, r3, r3, r2
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	011c      	lsls	r4, r3, #4
 8006a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	464b      	mov	r3, r9
 8006a40:	1891      	adds	r1, r2, r2
 8006a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a44:	415b      	adcs	r3, r3
 8006a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a52:	4649      	mov	r1, r9
 8006a54:	eb43 0b01 	adc.w	fp, r3, r1
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	f04f 0300 	mov.w	r3, #0
 8006a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a6c:	4692      	mov	sl, r2
 8006a6e:	469b      	mov	fp, r3
 8006a70:	4643      	mov	r3, r8
 8006a72:	eb1a 0303 	adds.w	r3, sl, r3
 8006a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8006a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	18db      	adds	r3, r3, r3
 8006a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	eb42 0303 	adc.w	r3, r2, r3
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006aae:	f7f9 fb9f 	bl	80001f0 <__aeabi_uldivmod>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	4b3b      	ldr	r3, [pc, #236]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006aba:	fba3 2301 	umull	r2, r3, r3, r1
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2264      	movs	r2, #100	; 0x64
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	1acb      	subs	r3, r1, r3
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ace:	4b36      	ldr	r3, [pc, #216]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006adc:	441c      	add	r4, r3
 8006ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006af0:	4642      	mov	r2, r8
 8006af2:	464b      	mov	r3, r9
 8006af4:	1891      	adds	r1, r2, r2
 8006af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006af8:	415b      	adcs	r3, r3
 8006afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b00:	4641      	mov	r1, r8
 8006b02:	1851      	adds	r1, r2, r1
 8006b04:	6339      	str	r1, [r7, #48]	; 0x30
 8006b06:	4649      	mov	r1, r9
 8006b08:	414b      	adcs	r3, r1
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b18:	4659      	mov	r1, fp
 8006b1a:	00cb      	lsls	r3, r1, #3
 8006b1c:	4651      	mov	r1, sl
 8006b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b22:	4651      	mov	r1, sl
 8006b24:	00ca      	lsls	r2, r1, #3
 8006b26:	4610      	mov	r0, r2
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	189b      	adds	r3, r3, r2
 8006b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b34:	464b      	mov	r3, r9
 8006b36:	460a      	mov	r2, r1
 8006b38:	eb42 0303 	adc.w	r3, r2, r3
 8006b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b54:	460b      	mov	r3, r1
 8006b56:	18db      	adds	r3, r3, r3
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	eb42 0303 	adc.w	r3, r2, r3
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b6a:	f7f9 fb41 	bl	80001f0 <__aeabi_uldivmod>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006b74:	fba3 1302 	umull	r1, r3, r3, r2
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	2164      	movs	r1, #100	; 0x64
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	3332      	adds	r3, #50	; 0x32
 8006b86:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <UART_SetConfig+0x2d4>)
 8006b88:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	f003 0207 	and.w	r2, r3, #7
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4422      	add	r2, r4
 8006b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b9c:	e105      	b.n	8006daa <UART_SetConfig+0x4d6>
 8006b9e:	bf00      	nop
 8006ba0:	40011000 	.word	0x40011000
 8006ba4:	40011400 	.word	0x40011400
 8006ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bbe:	4642      	mov	r2, r8
 8006bc0:	464b      	mov	r3, r9
 8006bc2:	1891      	adds	r1, r2, r2
 8006bc4:	6239      	str	r1, [r7, #32]
 8006bc6:	415b      	adcs	r3, r3
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bce:	4641      	mov	r1, r8
 8006bd0:	1854      	adds	r4, r2, r1
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	eb43 0501 	adc.w	r5, r3, r1
 8006bd8:	f04f 0200 	mov.w	r2, #0
 8006bdc:	f04f 0300 	mov.w	r3, #0
 8006be0:	00eb      	lsls	r3, r5, #3
 8006be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006be6:	00e2      	lsls	r2, r4, #3
 8006be8:	4614      	mov	r4, r2
 8006bea:	461d      	mov	r5, r3
 8006bec:	4643      	mov	r3, r8
 8006bee:	18e3      	adds	r3, r4, r3
 8006bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	eb45 0303 	adc.w	r3, r5, r3
 8006bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	008b      	lsls	r3, r1, #2
 8006c1e:	4621      	mov	r1, r4
 8006c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c24:	4621      	mov	r1, r4
 8006c26:	008a      	lsls	r2, r1, #2
 8006c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c2c:	f7f9 fae0 	bl	80001f0 <__aeabi_uldivmod>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4b60      	ldr	r3, [pc, #384]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006c36:	fba3 2302 	umull	r2, r3, r3, r2
 8006c3a:	095b      	lsrs	r3, r3, #5
 8006c3c:	011c      	lsls	r4, r3, #4
 8006c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c50:	4642      	mov	r2, r8
 8006c52:	464b      	mov	r3, r9
 8006c54:	1891      	adds	r1, r2, r2
 8006c56:	61b9      	str	r1, [r7, #24]
 8006c58:	415b      	adcs	r3, r3
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c60:	4641      	mov	r1, r8
 8006c62:	1851      	adds	r1, r2, r1
 8006c64:	6139      	str	r1, [r7, #16]
 8006c66:	4649      	mov	r1, r9
 8006c68:	414b      	adcs	r3, r1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c78:	4659      	mov	r1, fp
 8006c7a:	00cb      	lsls	r3, r1, #3
 8006c7c:	4651      	mov	r1, sl
 8006c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c82:	4651      	mov	r1, sl
 8006c84:	00ca      	lsls	r2, r1, #3
 8006c86:	4610      	mov	r0, r2
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	189b      	adds	r3, r3, r2
 8006c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c94:	464b      	mov	r3, r9
 8006c96:	460a      	mov	r2, r1
 8006c98:	eb42 0303 	adc.w	r3, r2, r3
 8006c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cb8:	4649      	mov	r1, r9
 8006cba:	008b      	lsls	r3, r1, #2
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	008a      	lsls	r2, r1, #2
 8006cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cca:	f7f9 fa91 	bl	80001f0 <__aeabi_uldivmod>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	2164      	movs	r1, #100	; 0x64
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	3332      	adds	r3, #50	; 0x32
 8006ce6:	4a34      	ldr	r2, [pc, #208]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cf2:	441c      	add	r4, r3
 8006cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8006cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8006cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d02:	4642      	mov	r2, r8
 8006d04:	464b      	mov	r3, r9
 8006d06:	1891      	adds	r1, r2, r2
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	415b      	adcs	r3, r3
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d12:	4641      	mov	r1, r8
 8006d14:	1851      	adds	r1, r2, r1
 8006d16:	6039      	str	r1, [r7, #0]
 8006d18:	4649      	mov	r1, r9
 8006d1a:	414b      	adcs	r3, r1
 8006d1c:	607b      	str	r3, [r7, #4]
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d2a:	4659      	mov	r1, fp
 8006d2c:	00cb      	lsls	r3, r1, #3
 8006d2e:	4651      	mov	r1, sl
 8006d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d34:	4651      	mov	r1, sl
 8006d36:	00ca      	lsls	r2, r1, #3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4642      	mov	r2, r8
 8006d40:	189b      	adds	r3, r3, r2
 8006d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d44:	464b      	mov	r3, r9
 8006d46:	460a      	mov	r2, r1
 8006d48:	eb42 0303 	adc.w	r3, r2, r3
 8006d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	663b      	str	r3, [r7, #96]	; 0x60
 8006d58:	667a      	str	r2, [r7, #100]	; 0x64
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d66:	4649      	mov	r1, r9
 8006d68:	008b      	lsls	r3, r1, #2
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d70:	4641      	mov	r1, r8
 8006d72:	008a      	lsls	r2, r1, #2
 8006d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d78:	f7f9 fa3a 	bl	80001f0 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006d82:	fba3 1302 	umull	r1, r3, r3, r2
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	2164      	movs	r1, #100	; 0x64
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	3332      	adds	r3, #50	; 0x32
 8006d94:	4a08      	ldr	r2, [pc, #32]	; (8006db8 <UART_SetConfig+0x4e4>)
 8006d96:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	f003 020f 	and.w	r2, r3, #15
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4422      	add	r2, r4
 8006da8:	609a      	str	r2, [r3, #8]
}
 8006daa:	bf00      	nop
 8006dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006db0:	46bd      	mov	sp, r7
 8006db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006db6:	bf00      	nop
 8006db8:	51eb851f 	.word	0x51eb851f

08006dbc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d123      	bne.n	8006e16 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006dd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	6851      	ldr	r1, [r2, #4]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	6892      	ldr	r2, [r2, #8]
 8006de2:	4311      	orrs	r1, r2
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	68d2      	ldr	r2, [r2, #12]
 8006de8:	4311      	orrs	r1, r2
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	6912      	ldr	r2, [r2, #16]
 8006dee:	4311      	orrs	r1, r2
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	6952      	ldr	r2, [r2, #20]
 8006df4:	4311      	orrs	r1, r2
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	6992      	ldr	r2, [r2, #24]
 8006dfa:	4311      	orrs	r1, r2
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	69d2      	ldr	r2, [r2, #28]
 8006e00:	4311      	orrs	r1, r2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	6a12      	ldr	r2, [r2, #32]
 8006e06:	4311      	orrs	r1, r2
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e028      	b.n	8006e68 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	69d9      	ldr	r1, [r3, #28]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	4319      	orrs	r1, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006e3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	6851      	ldr	r1, [r2, #4]
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	6892      	ldr	r2, [r2, #8]
 8006e48:	4311      	orrs	r1, r2
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	68d2      	ldr	r2, [r2, #12]
 8006e4e:	4311      	orrs	r1, r2
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	6912      	ldr	r2, [r2, #16]
 8006e54:	4311      	orrs	r1, r2
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	6952      	ldr	r2, [r2, #20]
 8006e5a:	4311      	orrs	r1, r2
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	6992      	ldr	r2, [r2, #24]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d128      	bne.n	8006eda <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	1e59      	subs	r1, r3, #1
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	4319      	orrs	r1, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	021b      	lsls	r3, r3, #8
 8006ea8:	4319      	orrs	r1, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	031b      	lsls	r3, r3, #12
 8006eb2:	4319      	orrs	r1, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	4319      	orrs	r1, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	051b      	lsls	r3, r3, #20
 8006ec6:	4319      	orrs	r1, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	061b      	lsls	r3, r3, #24
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	609a      	str	r2, [r3, #8]
 8006ed8:	e02f      	b.n	8006f3a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	68d2      	ldr	r2, [r2, #12]
 8006eea:	3a01      	subs	r2, #1
 8006eec:	0311      	lsls	r1, r2, #12
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	6952      	ldr	r2, [r2, #20]
 8006ef2:	3a01      	subs	r2, #1
 8006ef4:	0512      	lsls	r2, r2, #20
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	1e59      	subs	r1, r3, #1
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	4319      	orrs	r1, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	4319      	orrs	r1, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	4319      	orrs	r1, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	430b      	orrs	r3, r1
 8006f34:	431a      	orrs	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f48:	b084      	sub	sp, #16
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	f107 001c 	add.w	r0, r7, #28
 8006f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d122      	bne.n	8006fa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d105      	bne.n	8006f9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9c0 	bl	8007320 <USB_CoreReset>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
 8006fa4:	e01a      	b.n	8006fdc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f9b4 	bl	8007320 <USB_CoreReset>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
 8006fce:	e005      	b.n	8006fdc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d10b      	bne.n	8006ffa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f043 0206 	orr.w	r2, r3, #6
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f043 0220 	orr.w	r2, r3, #32
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007006:	b004      	add	sp, #16
 8007008:	4770      	bx	lr

0800700a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f043 0201 	orr.w	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f023 0201 	bic.w	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d115      	bne.n	800709c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800707c:	2001      	movs	r0, #1
 800707e:	f7fa fb93 	bl	80017a8 <HAL_Delay>
      ms++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3301      	adds	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f93a 	bl	8007302 <USB_GetMode>
 800708e:	4603      	mov	r3, r0
 8007090:	2b01      	cmp	r3, #1
 8007092:	d01e      	beq.n	80070d2 <USB_SetCurrentMode+0x84>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b31      	cmp	r3, #49	; 0x31
 8007098:	d9f0      	bls.n	800707c <USB_SetCurrentMode+0x2e>
 800709a:	e01a      	b.n	80070d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d115      	bne.n	80070ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070ae:	2001      	movs	r0, #1
 80070b0:	f7fa fb7a 	bl	80017a8 <HAL_Delay>
      ms++;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f921 	bl	8007302 <USB_GetMode>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <USB_SetCurrentMode+0x84>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b31      	cmp	r3, #49	; 0x31
 80070ca:	d9f0      	bls.n	80070ae <USB_SetCurrentMode+0x60>
 80070cc:	e001      	b.n	80070d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e005      	b.n	80070de <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b32      	cmp	r3, #50	; 0x32
 80070d6:	d101      	bne.n	80070dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e000      	b.n	80070de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4a13      	ldr	r2, [pc, #76]	; (800714c <USB_FlushTxFifo+0x64>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d901      	bls.n	8007108 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e01b      	b.n	8007140 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	daf2      	bge.n	80070f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	019b      	lsls	r3, r3, #6
 8007118:	f043 0220 	orr.w	r2, r3, #32
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a08      	ldr	r2, [pc, #32]	; (800714c <USB_FlushTxFifo+0x64>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d901      	bls.n	8007132 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e006      	b.n	8007140 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b20      	cmp	r3, #32
 800713c:	d0f0      	beq.n	8007120 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	00030d40 	.word	0x00030d40

08007150 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4a11      	ldr	r2, [pc, #68]	; (80071ac <USB_FlushRxFifo+0x5c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e018      	b.n	80071a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	daf2      	bge.n	800715c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2210      	movs	r2, #16
 800717e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3301      	adds	r3, #1
 8007184:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4a08      	ldr	r2, [pc, #32]	; (80071ac <USB_FlushRxFifo+0x5c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d901      	bls.n	8007192 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e006      	b.n	80071a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b10      	cmp	r3, #16
 800719c:	d0f0      	beq.n	8007180 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	00030d40 	.word	0x00030d40

080071b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b089      	sub	sp, #36	; 0x24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	4611      	mov	r1, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	460b      	mov	r3, r1
 80071c0:	71fb      	strb	r3, [r7, #7]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d123      	bne.n	800721e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071d6:	88bb      	ldrh	r3, [r7, #4]
 80071d8:	3303      	adds	r3, #3
 80071da:	089b      	lsrs	r3, r3, #2
 80071dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071de:	2300      	movs	r3, #0
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	e018      	b.n	8007216 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	031a      	lsls	r2, r3, #12
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f0:	461a      	mov	r2, r3
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	3301      	adds	r3, #1
 80071fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	3301      	adds	r3, #1
 8007202:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	3301      	adds	r3, #1
 8007208:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	3301      	adds	r3, #1
 800720e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	3301      	adds	r3, #1
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	429a      	cmp	r2, r3
 800721c:	d3e2      	bcc.n	80071e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3724      	adds	r7, #36	; 0x24
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800722c:	b480      	push	{r7}
 800722e:	b08b      	sub	sp, #44	; 0x2c
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	089b      	lsrs	r3, r3, #2
 8007246:	b29b      	uxth	r3, r3
 8007248:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007252:	2300      	movs	r3, #0
 8007254:	623b      	str	r3, [r7, #32]
 8007256:	e014      	b.n	8007282 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	601a      	str	r2, [r3, #0]
    pDest++;
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	3301      	adds	r3, #1
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	3301      	adds	r3, #1
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	3301      	adds	r3, #1
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	3301      	adds	r3, #1
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	3301      	adds	r3, #1
 8007280:	623b      	str	r3, [r7, #32]
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	429a      	cmp	r2, r3
 8007288:	d3e6      	bcc.n	8007258 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800728a:	8bfb      	ldrh	r3, [r7, #30]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01e      	beq.n	80072ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729a:	461a      	mov	r2, r3
 800729c:	f107 0310 	add.w	r3, r7, #16
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	701a      	strb	r2, [r3, #0]
      i++;
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	3301      	adds	r3, #1
 80072ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	3301      	adds	r3, #1
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80072c2:	8bfb      	ldrh	r3, [r7, #30]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072c8:	8bfb      	ldrh	r3, [r7, #30]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1ea      	bne.n	80072a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	372c      	adds	r7, #44	; 0x2c
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4013      	ands	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072f4:	68fb      	ldr	r3, [r7, #12]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	f003 0301 	and.w	r3, r3, #1
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
	...

08007320 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a13      	ldr	r2, [pc, #76]	; (8007384 <USB_CoreReset+0x64>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d901      	bls.n	800733e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e01b      	b.n	8007376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	daf2      	bge.n	800732c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f043 0201 	orr.w	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3301      	adds	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a09      	ldr	r2, [pc, #36]	; (8007384 <USB_CoreReset+0x64>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d901      	bls.n	8007368 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e006      	b.n	8007376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b01      	cmp	r3, #1
 8007372:	d0f0      	beq.n	8007356 <USB_CoreReset+0x36>

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	00030d40 	.word	0x00030d40

08007388 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007388:	b084      	sub	sp, #16
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073a8:	461a      	mov	r2, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d018      	beq.n	8007410 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d10a      	bne.n	80073fa <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073f2:	f043 0304 	orr.w	r3, r3, #4
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	e014      	b.n	8007424 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007408:	f023 0304 	bic.w	r3, r3, #4
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	e009      	b.n	8007424 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800741e:	f023 0304 	bic.w	r3, r3, #4
 8007422:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007424:	2110      	movs	r1, #16
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fe5e 	bl	80070e8 <USB_FlushTxFifo>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff fe8a 	bl	8007150 <USB_FlushRxFifo>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	e015      	b.n	8007478 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007458:	461a      	mov	r2, r3
 800745a:	f04f 33ff 	mov.w	r3, #4294967295
 800745e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746c:	461a      	mov	r2, r3
 800746e:	2300      	movs	r3, #0
 8007470:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3301      	adds	r3, #1
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d3e5      	bcc.n	800744c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f04f 32ff 	mov.w	r2, #4294967295
 800748c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a13      	ldr	r2, [pc, #76]	; (80074f4 <USB_HostInit+0x16c>)
 80074a6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a13      	ldr	r2, [pc, #76]	; (80074f8 <USB_HostInit+0x170>)
 80074ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80074b0:	e009      	b.n	80074c6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2280      	movs	r2, #128	; 0x80
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a10      	ldr	r2, [pc, #64]	; (80074fc <USB_HostInit+0x174>)
 80074bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a0f      	ldr	r2, [pc, #60]	; (8007500 <USB_HostInit+0x178>)
 80074c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d105      	bne.n	80074d8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f043 0210 	orr.w	r2, r3, #16
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699a      	ldr	r2, [r3, #24]
 80074dc:	4b09      	ldr	r3, [pc, #36]	; (8007504 <USB_HostInit+0x17c>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074f0:	b004      	add	sp, #16
 80074f2:	4770      	bx	lr
 80074f4:	01000200 	.word	0x01000200
 80074f8:	00e00300 	.word	0x00e00300
 80074fc:	00600080 	.word	0x00600080
 8007500:	004000e0 	.word	0x004000e0
 8007504:	a3200008 	.word	0xa3200008

08007508 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007526:	f023 0303 	bic.w	r3, r3, #3
 800752a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007540:	4313      	orrs	r3, r2
 8007542:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d107      	bne.n	800755a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007550:	461a      	mov	r2, r3
 8007552:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007556:	6053      	str	r3, [r2, #4]
 8007558:	e009      	b.n	800756e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d106      	bne.n	800756e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007566:	461a      	mov	r2, r3
 8007568:	f241 7370 	movw	r3, #6000	; 0x1770
 800756c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800759c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80075ac:	2064      	movs	r0, #100	; 0x64
 80075ae:	f7fa f8fb 	bl	80017a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075be:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80075c0:	200a      	movs	r0, #10
 80075c2:	f7fa f8f1 	bl	80017a8 <HAL_Delay>

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80075f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d109      	bne.n	8007614 <USB_DriveVbus+0x44>
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d106      	bne.n	8007614 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800760e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007612:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800761a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761e:	d109      	bne.n	8007634 <USB_DriveVbus+0x64>
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800762e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007632:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	0c5b      	lsrs	r3, r3, #17
 8007660:	f003 0303 	and.w	r3, r3, #3
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	b29b      	uxth	r3, r3
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
	...

08007694 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	461a      	mov	r2, r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	70fb      	strb	r3, [r7, #3]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70bb      	strb	r3, [r7, #2]
 80076aa:	4613      	mov	r3, r2
 80076ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c2:	461a      	mov	r2, r3
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295
 80076c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80076ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d87e      	bhi.n	80077d0 <USB_HC_Init+0x13c>
 80076d2:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <USB_HC_Init+0x44>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	080076e9 	.word	0x080076e9
 80076dc:	08007793 	.word	0x08007793
 80076e0:	080076e9 	.word	0x080076e9
 80076e4:	08007755 	.word	0x08007755
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f4:	461a      	mov	r2, r3
 80076f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80076fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80076fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007700:	2b00      	cmp	r3, #0
 8007702:	da10      	bge.n	8007726 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4413      	add	r3, r2
 800770c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	78fa      	ldrb	r2, [r7, #3]
 8007714:	0151      	lsls	r1, r2, #5
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	440a      	add	r2, r1
 800771a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800771e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007722:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007724:	e057      	b.n	80077d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772e:	2b00      	cmp	r3, #0
 8007730:	d051      	beq.n	80077d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4413      	add	r3, r2
 800773a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	78fa      	ldrb	r2, [r7, #3]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	440a      	add	r2, r1
 8007748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800774c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007750:	60d3      	str	r3, [r2, #12]
      break;
 8007752:	e040      	b.n	80077d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	4413      	add	r3, r2
 800775c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007760:	461a      	mov	r2, r3
 8007762:	f240 639d 	movw	r3, #1693	; 0x69d
 8007766:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007768:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800776c:	2b00      	cmp	r3, #0
 800776e:	da34      	bge.n	80077da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	440a      	add	r2, r1
 8007786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800778a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800778e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007790:	e023      	b.n	80077da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	4413      	add	r3, r2
 800779a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800779e:	461a      	mov	r2, r3
 80077a0:	f240 2325 	movw	r3, #549	; 0x225
 80077a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	da17      	bge.n	80077de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	0151      	lsls	r1, r2, #5
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	440a      	add	r2, r1
 80077c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80077cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80077ce:	e006      	b.n	80077de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	77fb      	strb	r3, [r7, #31]
      break;
 80077d4:	e004      	b.n	80077e0 <USB_HC_Init+0x14c>
      break;
 80077d6:	bf00      	nop
 80077d8:	e002      	b.n	80077e0 <USB_HC_Init+0x14c>
      break;
 80077da:	bf00      	nop
 80077dc:	e000      	b.n	80077e0 <USB_HC_Init+0x14c>
      break;
 80077de:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	78fa      	ldrb	r2, [r7, #3]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077fa:	f043 0302 	orr.w	r3, r3, #2
 80077fe:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	2101      	movs	r1, #1
 8007810:	fa01 f303 	lsl.w	r3, r1, r3
 8007814:	6939      	ldr	r1, [r7, #16]
 8007816:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800781a:	4313      	orrs	r3, r2
 800781c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800782a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800782e:	2b00      	cmp	r3, #0
 8007830:	da03      	bge.n	800783a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	e001      	b.n	800783e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff feff 	bl	8007642 <USB_GetHostSpeed>
 8007844:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007846:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800784a:	2b02      	cmp	r3, #2
 800784c:	d106      	bne.n	800785c <USB_HC_Init+0x1c8>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d003      	beq.n	800785c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	e001      	b.n	8007860 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007860:	787b      	ldrb	r3, [r7, #1]
 8007862:	059b      	lsls	r3, r3, #22
 8007864:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007868:	78bb      	ldrb	r3, [r7, #2]
 800786a:	02db      	lsls	r3, r3, #11
 800786c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007870:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007872:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007876:	049b      	lsls	r3, r3, #18
 8007878:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800787c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800787e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007880:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007884:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	0159      	lsls	r1, r3, #5
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	440b      	add	r3, r1
 8007892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007896:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800789c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800789e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d003      	beq.n	80078ae <USB_HC_Init+0x21a>
 80078a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d10f      	bne.n	80078ce <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80078ae:	78fb      	ldrb	r3, [r7, #3]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80078ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3720      	adds	r7, #32
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	; 0x30
 80078dc:	af02      	add	r7, sp, #8
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80078f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078f4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d02d      	beq.n	800795e <USB_HC_StartXfer+0x86>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d129      	bne.n	800795e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d117      	bne.n	8007940 <USB_HC_StartXfer+0x68>
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	79db      	ldrb	r3, [r3, #7]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <USB_HC_StartXfer+0x48>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	79db      	ldrb	r3, [r3, #7]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d10f      	bne.n	8007940 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	4413      	add	r3, r2
 8007928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	0151      	lsls	r1, r2, #5
 8007932:	6a3a      	ldr	r2, [r7, #32]
 8007934:	440a      	add	r2, r1
 8007936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800793a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10b      	bne.n	800795e <USB_HC_StartXfer+0x86>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	795b      	ldrb	r3, [r3, #5]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d107      	bne.n	800795e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	4619      	mov	r1, r3
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 fa0f 	bl	8007d78 <USB_DoPing>
      return HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	e0f8      	b.n	8007b50 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d018      	beq.n	8007998 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	8912      	ldrh	r2, [r2, #8]
 800796e:	4413      	add	r3, r2
 8007970:	3b01      	subs	r3, #1
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	8912      	ldrh	r2, [r2, #8]
 8007976:	fbb3 f3f2 	udiv	r3, r3, r2
 800797a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800797c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800797e:	8b7b      	ldrh	r3, [r7, #26]
 8007980:	429a      	cmp	r2, r3
 8007982:	d90b      	bls.n	800799c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007984:	8b7b      	ldrh	r3, [r7, #26]
 8007986:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	8912      	ldrh	r2, [r2, #8]
 800798e:	fb03 f202 	mul.w	r2, r3, r2
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	611a      	str	r2, [r3, #16]
 8007996:	e001      	b.n	800799c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	78db      	ldrb	r3, [r3, #3]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d007      	beq.n	80079b4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	8912      	ldrh	r2, [r2, #8]
 80079aa:	fb03 f202 	mul.w	r2, r3, r2
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	611a      	str	r2, [r3, #16]
 80079b2:	e003      	b.n	80079bc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079c6:	04d9      	lsls	r1, r3, #19
 80079c8:	4b63      	ldr	r3, [pc, #396]	; (8007b58 <USB_HC_StartXfer+0x280>)
 80079ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	7a9b      	ldrb	r3, [r3, #10]
 80079d2:	075b      	lsls	r3, r3, #29
 80079d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079d8:	69f9      	ldr	r1, [r7, #28]
 80079da:	0148      	lsls	r0, r1, #5
 80079dc:	6a39      	ldr	r1, [r7, #32]
 80079de:	4401      	add	r1, r0
 80079e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	68d9      	ldr	r1, [r3, #12]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079fe:	460a      	mov	r2, r1
 8007a00:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bf0c      	ite	eq
 8007a12:	2301      	moveq	r3, #1
 8007a14:	2300      	movne	r3, #0
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	6a3a      	ldr	r2, [r7, #32]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a38:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	7e7b      	ldrb	r3, [r7, #25]
 8007a4a:	075b      	lsls	r3, r3, #29
 8007a4c:	69f9      	ldr	r1, [r7, #28]
 8007a4e:	0148      	lsls	r0, r1, #5
 8007a50:	6a39      	ldr	r1, [r7, #32]
 8007a52:	4401      	add	r1, r0
 8007a54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a72:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	78db      	ldrb	r3, [r3, #3]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	e003      	b.n	8007a8e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a8c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a94:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e04e      	b.n	8007b50 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	78db      	ldrb	r3, [r3, #3]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d149      	bne.n	8007b4e <USB_HC_StartXfer+0x276>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d045      	beq.n	8007b4e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	79db      	ldrb	r3, [r3, #7]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d830      	bhi.n	8007b2c <USB_HC_StartXfer+0x254>
 8007aca:	a201      	add	r2, pc, #4	; (adr r2, 8007ad0 <USB_HC_StartXfer+0x1f8>)
 8007acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad0:	08007ae1 	.word	0x08007ae1
 8007ad4:	08007b05 	.word	0x08007b05
 8007ad8:	08007ae1 	.word	0x08007ae1
 8007adc:	08007b05 	.word	0x08007b05
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	3303      	adds	r3, #3
 8007ae6:	089b      	lsrs	r3, r3, #2
 8007ae8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007aea:	8afa      	ldrh	r2, [r7, #22]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d91c      	bls.n	8007b30 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	f043 0220 	orr.w	r2, r3, #32
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b02:	e015      	b.n	8007b30 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	3303      	adds	r3, #3
 8007b0a:	089b      	lsrs	r3, r3, #2
 8007b0c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007b0e:	8afa      	ldrh	r2, [r7, #22]
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d90a      	bls.n	8007b34 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b2a:	e003      	b.n	8007b34 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007b2c:	bf00      	nop
 8007b2e:	e002      	b.n	8007b36 <USB_HC_StartXfer+0x25e>
        break;
 8007b30:	bf00      	nop
 8007b32:	e000      	b.n	8007b36 <USB_HC_StartXfer+0x25e>
        break;
 8007b34:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	68d9      	ldr	r1, [r3, #12]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	785a      	ldrb	r2, [r3, #1]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2000      	movs	r0, #0
 8007b46:	9000      	str	r0, [sp, #0]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7ff fb31 	bl	80071b0 <USB_WritePacket>
  }

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3728      	adds	r7, #40	; 0x28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	1ff80000 	.word	0x1ff80000

08007b5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	b29b      	uxth	r3, r3
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b089      	sub	sp, #36	; 0x24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	0c9b      	lsrs	r3, r3, #18
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	0fdb      	lsrs	r3, r3, #31
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d104      	bne.n	8007bd8 <USB_HC_Halt+0x5a>
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e0c8      	b.n	8007d6a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <USB_HC_Halt+0x66>
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d163      	bne.n	8007cac <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c02:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f003 0320 	and.w	r3, r3, #32
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 80ab 	bne.w	8007d68 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d133      	bne.n	8007c86 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c3c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	69fa      	ldr	r2, [r7, #28]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c5c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3301      	adds	r3, #1
 8007c62:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c6a:	d81d      	bhi.n	8007ca8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c82:	d0ec      	beq.n	8007c5e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c84:	e070      	b.n	8007d68 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	0151      	lsls	r1, r2, #5
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	440a      	add	r2, r1
 8007c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ca4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ca6:	e05f      	b.n	8007d68 <USB_HC_Halt+0x1ea>
            break;
 8007ca8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007caa:	e05d      	b.n	8007d68 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cca:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d133      	bne.n	8007d44 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cfa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d1a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d28:	d81d      	bhi.n	8007d66 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d40:	d0ec      	beq.n	8007d1c <USB_HC_Halt+0x19e>
 8007d42:	e011      	b.n	8007d68 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	e000      	b.n	8007d68 <USB_HC_Halt+0x1ea>
          break;
 8007d66:	bf00      	nop
    }
  }

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3724      	adds	r7, #36	; 0x24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
	...

08007d78 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	04da      	lsls	r2, r3, #19
 8007d94:	4b15      	ldr	r3, [pc, #84]	; (8007dec <USB_DoPing+0x74>)
 8007d96:	4013      	ands	r3, r2
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007da8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007dc0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dc8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	1ff80000 	.word	0x1ff80000

08007df0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff f911 	bl	800702c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e0a:	2110      	movs	r1, #16
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff f96b 	bl	80070e8 <USB_FlushTxFifo>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff f997 	bl	8007150 <USB_FlushRxFifo>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61bb      	str	r3, [r7, #24]
 8007e30:	e01f      	b.n	8007e72 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e66:	461a      	mov	r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	61bb      	str	r3, [r7, #24]
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b0f      	cmp	r3, #15
 8007e76:	d9dc      	bls.n	8007e32 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61bb      	str	r3, [r7, #24]
 8007e7c:	e034      	b.n	8007ee8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ea4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ec4:	d80c      	bhi.n	8007ee0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007edc:	d0ec      	beq.n	8007eb8 <USB_StopHost+0xc8>
 8007ede:	e000      	b.n	8007ee2 <USB_StopHost+0xf2>
        break;
 8007ee0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b0f      	cmp	r3, #15
 8007eec:	d9c7      	bls.n	8007e7e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8007efa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff f880 	bl	800700a <USB_EnableGlobalInt>

  return ret;
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b089      	sub	sp, #36	; 0x24
 8007f18:	af04      	add	r7, sp, #16
 8007f1a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	2202      	movs	r2, #2
 8007f20:	2102      	movs	r1, #2
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fcb8 	bl	8008898 <USBH_FindInterface>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	2bff      	cmp	r3, #255	; 0xff
 8007f30:	d002      	beq.n	8007f38 <USBH_CDC_InterfaceInit+0x24>
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d901      	bls.n	8007f3c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e13d      	b.n	80081b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fc8d 	bl	8008860 <USBH_SelectInterface>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007f50:	2302      	movs	r3, #2
 8007f52:	e131      	b.n	80081b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007f5a:	2050      	movs	r0, #80	; 0x50
 8007f5c:	f004 fffc 	bl	800cf58 <malloc>
 8007f60:	4603      	mov	r3, r0
 8007f62:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007f74:	2302      	movs	r3, #2
 8007f76:	e11f      	b.n	80081b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007f78:	2250      	movs	r2, #80	; 0x50
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	68b8      	ldr	r0, [r7, #8]
 8007f7e:	f005 f809 	bl	800cf94 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	211a      	movs	r1, #26
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	b25b      	sxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da15      	bge.n	8007fc6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	211a      	movs	r1, #26
 8007fa0:	fb01 f303 	mul.w	r3, r1, r3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007faa:	781a      	ldrb	r2, [r3, #0]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	211a      	movs	r1, #26
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007fc0:	881a      	ldrh	r2, [r3, #0]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 f988 	bl	800a2e2 <USBH_AllocPipe>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	7819      	ldrb	r1, [r3, #0]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	7858      	ldrb	r0, [r3, #1]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	8952      	ldrh	r2, [r2, #10]
 8007ff2:	9202      	str	r2, [sp, #8]
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	9201      	str	r2, [sp, #4]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	4623      	mov	r3, r4
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f002 f940 	bl	800a284 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2200      	movs	r2, #0
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f004 fef5 	bl	800cdfc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008012:	2300      	movs	r3, #0
 8008014:	2200      	movs	r2, #0
 8008016:	210a      	movs	r1, #10
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fc3d 	bl	8008898 <USBH_FindInterface>
 800801e:	4603      	mov	r3, r0
 8008020:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	2bff      	cmp	r3, #255	; 0xff
 8008026:	d002      	beq.n	800802e <USBH_CDC_InterfaceInit+0x11a>
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d901      	bls.n	8008032 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800802e:	2302      	movs	r3, #2
 8008030:	e0c2      	b.n	80081b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	211a      	movs	r1, #26
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	b25b      	sxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	da16      	bge.n	8008078 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	211a      	movs	r1, #26
 8008050:	fb01 f303 	mul.w	r3, r1, r3
 8008054:	4413      	add	r3, r2
 8008056:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	211a      	movs	r1, #26
 8008066:	fb01 f303 	mul.w	r3, r1, r3
 800806a:	4413      	add	r3, r2
 800806c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008070:	881a      	ldrh	r2, [r3, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	835a      	strh	r2, [r3, #26]
 8008076:	e015      	b.n	80080a4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	211a      	movs	r1, #26
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	4413      	add	r3, r2
 8008084:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	211a      	movs	r1, #26
 8008094:	fb01 f303 	mul.w	r3, r1, r3
 8008098:	4413      	add	r3, r2
 800809a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800809e:	881a      	ldrh	r2, [r3, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	211a      	movs	r1, #26
 80080aa:	fb01 f303 	mul.w	r3, r1, r3
 80080ae:	4413      	add	r3, r2
 80080b0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	b25b      	sxtb	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	da16      	bge.n	80080ea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	211a      	movs	r1, #26
 80080c2:	fb01 f303 	mul.w	r3, r1, r3
 80080c6:	4413      	add	r3, r2
 80080c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	211a      	movs	r1, #26
 80080d8:	fb01 f303 	mul.w	r3, r1, r3
 80080dc:	4413      	add	r3, r2
 80080de:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80080e2:	881a      	ldrh	r2, [r3, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	835a      	strh	r2, [r3, #26]
 80080e8:	e015      	b.n	8008116 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	211a      	movs	r1, #26
 80080f0:	fb01 f303 	mul.w	r3, r1, r3
 80080f4:	4413      	add	r3, r2
 80080f6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	211a      	movs	r1, #26
 8008106:	fb01 f303 	mul.w	r3, r1, r3
 800810a:	4413      	add	r3, r2
 800810c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008110:	881a      	ldrh	r2, [r3, #0]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	7b9b      	ldrb	r3, [r3, #14]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f002 f8e0 	bl	800a2e2 <USBH_AllocPipe>
 8008122:	4603      	mov	r3, r0
 8008124:	461a      	mov	r2, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	7bdb      	ldrb	r3, [r3, #15]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f002 f8d6 	bl	800a2e2 <USBH_AllocPipe>
 8008136:	4603      	mov	r3, r0
 8008138:	461a      	mov	r2, r3
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	7b59      	ldrb	r1, [r3, #13]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	7b98      	ldrb	r0, [r3, #14]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	8b12      	ldrh	r2, [r2, #24]
 8008156:	9202      	str	r2, [sp, #8]
 8008158:	2202      	movs	r2, #2
 800815a:	9201      	str	r2, [sp, #4]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4623      	mov	r3, r4
 8008160:	4602      	mov	r2, r0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f002 f88e 	bl	800a284 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	7b19      	ldrb	r1, [r3, #12]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	7bd8      	ldrb	r0, [r3, #15]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	8b52      	ldrh	r2, [r2, #26]
 8008180:	9202      	str	r2, [sp, #8]
 8008182:	2202      	movs	r2, #2
 8008184:	9201      	str	r2, [sp, #4]
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	4623      	mov	r3, r4
 800818a:	4602      	mov	r2, r0
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f002 f879 	bl	800a284 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	7b5b      	ldrb	r3, [r3, #13]
 800819e:	2200      	movs	r2, #0
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f004 fe2a 	bl	800cdfc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	7b1b      	ldrb	r3, [r3, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f004 fe23 	bl	800cdfc <USBH_LL_SetToggle>

  return USBH_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd90      	pop	{r4, r7, pc}

080081c0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f002 f86e 	bl	800a2c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f002 f899 	bl	800a324 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	7b1b      	ldrb	r3, [r3, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00e      	beq.n	800821e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	7b1b      	ldrb	r3, [r3, #12]
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f002 f85b 	bl	800a2c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	7b1b      	ldrb	r3, [r3, #12]
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f002 f886 	bl	800a324 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	7b5b      	ldrb	r3, [r3, #13]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00e      	beq.n	8008244 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	7b5b      	ldrb	r3, [r3, #13]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f002 f848 	bl	800a2c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	7b5b      	ldrb	r3, [r3, #13]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f002 f873 	bl	800a324 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	4618      	mov	r0, r3
 800825a:	f004 fe85 	bl	800cf68 <free>
    phost->pActiveClass->pData = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008264:	2200      	movs	r2, #0
 8008266:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3340      	adds	r3, #64	; 0x40
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8b1 	bl	80083f2 <GetLineCoding>
 8008290:	4603      	mov	r3, r0
 8008292:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082a0:	2102      	movs	r1, #2
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80082a6:	7afb      	ldrb	r3, [r7, #11]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80082b8:	2301      	movs	r3, #1
 80082ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d877      	bhi.n	80083c4 <USBH_CDC_Process+0x114>
 80082d4:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <USBH_CDC_Process+0x2c>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	080082f1 	.word	0x080082f1
 80082e0:	080082f7 	.word	0x080082f7
 80082e4:	08008327 	.word	0x08008327
 80082e8:	0800839b 	.word	0x0800839b
 80082ec:	080083a9 	.word	0x080083a9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
      break;
 80082f4:	e06d      	b.n	80083d2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f897 	bl	8008430 <SetLineCoding>
 8008302:	4603      	mov	r3, r0
 8008304:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d104      	bne.n	8008316 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008314:	e058      	b.n	80083c8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d055      	beq.n	80083c8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2204      	movs	r2, #4
 8008320:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008324:	e050      	b.n	80083c8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	3340      	adds	r3, #64	; 0x40
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f860 	bl	80083f2 <GetLineCoding>
 8008332:	4603      	mov	r3, r0
 8008334:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d126      	bne.n	800838a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834e:	791b      	ldrb	r3, [r3, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d13b      	bne.n	80083cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800835e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008360:	429a      	cmp	r2, r3
 8008362:	d133      	bne.n	80083cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800836e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008370:	429a      	cmp	r2, r3
 8008372:	d12b      	bne.n	80083cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800837c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800837e:	429a      	cmp	r2, r3
 8008380:	d124      	bne.n	80083cc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f982 	bl	800868c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008388:	e020      	b.n	80083cc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d01d      	beq.n	80083cc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2204      	movs	r2, #4
 8008394:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008398:	e018      	b.n	80083cc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f867 	bl	800846e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f8f6 	bl	8008592 <CDC_ProcessReception>
      break;
 80083a6:	e014      	b.n	80083d2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80083a8:	2100      	movs	r1, #0
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 f95b 	bl	8009666 <USBH_ClrFeature>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80083c2:	e005      	b.n	80083d0 <USBH_CDC_Process+0x120>

    default:
      break;
 80083c4:	bf00      	nop
 80083c6:	e004      	b.n	80083d2 <USBH_CDC_Process+0x122>
      break;
 80083c8:	bf00      	nop
 80083ca:	e002      	b.n	80083d2 <USBH_CDC_Process+0x122>
      break;
 80083cc:	bf00      	nop
 80083ce:	e000      	b.n	80083d2 <USBH_CDC_Process+0x122>
      break;
 80083d0:	bf00      	nop

  }

  return status;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	22a1      	movs	r2, #161	; 0xa1
 8008400:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2221      	movs	r2, #33	; 0x21
 8008406:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2207      	movs	r2, #7
 8008418:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2207      	movs	r2, #7
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 fbed 	bl	8009c00 <USBH_CtlReq>
 8008426:	4603      	mov	r3, r0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2221      	movs	r2, #33	; 0x21
 800843e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2207      	movs	r2, #7
 8008456:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2207      	movs	r2, #7
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fbce 	bl	8009c00 <USBH_CtlReq>
 8008464:	4603      	mov	r3, r0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b086      	sub	sp, #24
 8008472:	af02      	add	r7, sp, #8
 8008474:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008480:	2300      	movs	r3, #0
 8008482:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800848a:	2b01      	cmp	r3, #1
 800848c:	d002      	beq.n	8008494 <CDC_ProcessTransmission+0x26>
 800848e:	2b02      	cmp	r3, #2
 8008490:	d023      	beq.n	80084da <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008492:	e07a      	b.n	800858a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	8b12      	ldrh	r2, [r2, #24]
 800849c:	4293      	cmp	r3, r2
 800849e:	d90b      	bls.n	80084b8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	69d9      	ldr	r1, [r3, #28]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8b1a      	ldrh	r2, [r3, #24]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	7b5b      	ldrb	r3, [r3, #13]
 80084ac:	2001      	movs	r0, #1
 80084ae:	9000      	str	r0, [sp, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 fea4 	bl	800a1fe <USBH_BulkSendData>
 80084b6:	e00b      	b.n	80084d0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	7b5b      	ldrb	r3, [r3, #13]
 80084c6:	2001      	movs	r0, #1
 80084c8:	9000      	str	r0, [sp, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 fe97 	bl	800a1fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80084d8:	e057      	b.n	800858a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	7b5b      	ldrb	r3, [r3, #13]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f004 fc61 	bl	800cda8 <USBH_LL_GetURBState>
 80084e6:	4603      	mov	r3, r0
 80084e8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d136      	bne.n	800855e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	8b12      	ldrh	r2, [r2, #24]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d90e      	bls.n	800851a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	8b12      	ldrh	r2, [r2, #24]
 8008504:	1a9a      	subs	r2, r3, r2
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	8b12      	ldrh	r2, [r2, #24]
 8008512:	441a      	add	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	61da      	str	r2, [r3, #28]
 8008518:	e002      	b.n	8008520 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	2b00      	cmp	r3, #0
 8008526:	d004      	beq.n	8008532 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8008530:	e006      	b.n	8008540 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f892 	bl	8008664 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2204      	movs	r2, #4
 8008544:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008554:	2200      	movs	r2, #0
 8008556:	4619      	mov	r1, r3
 8008558:	f001 ffe0 	bl	800a51c <osMessagePut>
      break;
 800855c:	e014      	b.n	8008588 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d111      	bne.n	8008588 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2204      	movs	r2, #4
 8008570:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008580:	2200      	movs	r2, #0
 8008582:	4619      	mov	r1, r3
 8008584:	f001 ffca 	bl	800a51c <osMessagePut>
      break;
 8008588:	bf00      	nop
  }
}
 800858a:	bf00      	nop
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b086      	sub	sp, #24
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085a4:	2300      	movs	r3, #0
 80085a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d002      	beq.n	80085b8 <CDC_ProcessReception+0x26>
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	d00e      	beq.n	80085d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80085b6:	e051      	b.n	800865c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	6a19      	ldr	r1, [r3, #32]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	8b5a      	ldrh	r2, [r3, #26]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	7b1b      	ldrb	r3, [r3, #12]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 fe3f 	bl	800a248 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2204      	movs	r2, #4
 80085ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80085d2:	e043      	b.n	800865c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	7b1b      	ldrb	r3, [r3, #12]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f004 fbe4 	bl	800cda8 <USBH_LL_GetURBState>
 80085e0:	4603      	mov	r3, r0
 80085e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80085e4:	7cfb      	ldrb	r3, [r7, #19]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d137      	bne.n	800865a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	7b1b      	ldrb	r3, [r3, #12]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f004 fb47 	bl	800cc84 <USBH_LL_GetLastXferSize>
 80085f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d016      	beq.n	8008630 <CDC_ProcessReception+0x9e>
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	8b5b      	ldrh	r3, [r3, #26]
 8008606:	461a      	mov	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4293      	cmp	r3, r2
 800860c:	d910      	bls.n	8008630 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	1ad2      	subs	r2, r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6a1a      	ldr	r2, [r3, #32]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	441a      	add	r2, r3
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2203      	movs	r2, #3
 800862a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800862e:	e006      	b.n	800863e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f81d 	bl	8008678 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2204      	movs	r2, #4
 8008642:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008652:	2200      	movs	r2, #0
 8008654:	4619      	mov	r1, r3
 8008656:	f001 ff61 	bl	800a51c <osMessagePut>
      break;
 800865a:	bf00      	nop
  }
}
 800865c:	bf00      	nop
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80086a0:	b5b0      	push	{r4, r5, r7, lr}
 80086a2:	b090      	sub	sp, #64	; 0x40
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	4613      	mov	r3, r2
 80086ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80086b4:	2302      	movs	r3, #2
 80086b6:	e04d      	b.n	8008754 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	79fa      	ldrb	r2, [r7, #7]
 80086bc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f847 	bl	8008764 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008704:	4b15      	ldr	r3, [pc, #84]	; (800875c <USBH_Init+0xbc>)
 8008706:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800870a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800870c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008710:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008714:	2100      	movs	r1, #0
 8008716:	4618      	mov	r0, r3
 8008718:	f001 fed7 	bl	800a4ca <osMessageCreate>
 800871c:	4602      	mov	r2, r0
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008724:	4b0e      	ldr	r3, [pc, #56]	; (8008760 <USBH_Init+0xc0>)
 8008726:	f107 0414 	add.w	r4, r7, #20
 800872a:	461d      	mov	r5, r3
 800872c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800872e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008738:	f107 0314 	add.w	r3, r7, #20
 800873c:	68f9      	ldr	r1, [r7, #12]
 800873e:	4618      	mov	r0, r3
 8008740:	f001 fe63 	bl	800a40a <osThreadCreate>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f004 f9db 	bl	800cb08 <USBH_LL_Init>

  return USBH_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3740      	adds	r7, #64	; 0x40
 8008758:	46bd      	mov	sp, r7
 800875a:	bdb0      	pop	{r4, r5, r7, pc}
 800875c:	0800d210 	.word	0x0800d210
 8008760:	0800d220 	.word	0x0800d220

08008764 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	e009      	b.n	800878a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	33e0      	adds	r3, #224	; 0xe0
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	2200      	movs	r2, #0
 8008782:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3301      	adds	r3, #1
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b0f      	cmp	r3, #15
 800878e:	d9f2      	bls.n	8008776 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e009      	b.n	80087aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b0:	d3f1      	bcc.n	8008796 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2240      	movs	r2, #64	; 0x40
 80087d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d016      	beq.n	800884e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10e      	bne.n	8008848 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008830:	1c59      	adds	r1, r3, #1
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	33de      	adds	r3, #222	; 0xde
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]
 8008846:	e004      	b.n	8008852 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008848:	2302      	movs	r3, #2
 800884a:	73fb      	strb	r3, [r7, #15]
 800884c:	e001      	b.n	8008852 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800884e:	2302      	movs	r3, #2
 8008850:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008876:	78fa      	ldrb	r2, [r7, #3]
 8008878:	429a      	cmp	r2, r3
 800887a:	d204      	bcs.n	8008886 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008884:	e001      	b.n	800888a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	461a      	mov	r2, r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	70fb      	strb	r3, [r7, #3]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70bb      	strb	r3, [r7, #2]
 80088ae:	4613      	mov	r3, r2
 80088b0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80088c0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80088c2:	e025      	b.n	8008910 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	221a      	movs	r2, #26
 80088c8:	fb02 f303 	mul.w	r3, r2, r3
 80088cc:	3308      	adds	r3, #8
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4413      	add	r3, r2
 80088d2:	3302      	adds	r3, #2
 80088d4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	795b      	ldrb	r3, [r3, #5]
 80088da:	78fa      	ldrb	r2, [r7, #3]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d002      	beq.n	80088e6 <USBH_FindInterface+0x4e>
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	2bff      	cmp	r3, #255	; 0xff
 80088e4:	d111      	bne.n	800890a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80088ea:	78ba      	ldrb	r2, [r7, #2]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d002      	beq.n	80088f6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088f0:	78bb      	ldrb	r3, [r7, #2]
 80088f2:	2bff      	cmp	r3, #255	; 0xff
 80088f4:	d109      	bne.n	800890a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088fa:	787a      	ldrb	r2, [r7, #1]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d002      	beq.n	8008906 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008900:	787b      	ldrb	r3, [r7, #1]
 8008902:	2bff      	cmp	r3, #255	; 0xff
 8008904:	d101      	bne.n	800890a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	e006      	b.n	8008918 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	3301      	adds	r3, #1
 800890e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d9d6      	bls.n	80088c4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008916:	23ff      	movs	r3, #255	; 0xff
}
 8008918:	4618      	mov	r0, r3
 800891a:	371c      	adds	r7, #28
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f004 f931 	bl	800cb94 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008932:	2101      	movs	r1, #1
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f004 fa4a 	bl	800cdce <USBH_LL_DriverVBUS>

  return USBH_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af04      	add	r7, sp, #16
 800894a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800894c:	2302      	movs	r3, #2
 800894e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b01      	cmp	r3, #1
 800895e:	d102      	bne.n	8008966 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2203      	movs	r2, #3
 8008964:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b0b      	cmp	r3, #11
 800896e:	f200 8247 	bhi.w	8008e00 <USBH_Process+0x4bc>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <USBH_Process+0x34>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	080089a9 	.word	0x080089a9
 800897c:	080089f7 	.word	0x080089f7
 8008980:	08008a7b 	.word	0x08008a7b
 8008984:	08008d7f 	.word	0x08008d7f
 8008988:	08008e01 	.word	0x08008e01
 800898c:	08008b3b 	.word	0x08008b3b
 8008990:	08008d09 	.word	0x08008d09
 8008994:	08008b8d 	.word	0x08008b8d
 8008998:	08008bc9 	.word	0x08008bc9
 800899c:	08008c03 	.word	0x08008c03
 80089a0:	08008c61 	.word	0x08008c61
 80089a4:	08008d67 	.word	0x08008d67
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8227 	beq.w	8008e04 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80089bc:	20c8      	movs	r0, #200	; 0xc8
 80089be:	f004 fa4d 	bl	800ce5c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f004 f943 	bl	800cc4e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089ec:	2200      	movs	r2, #0
 80089ee:	4619      	mov	r1, r3
 80089f0:	f001 fd94 	bl	800a51c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089f4:	e206      	b.n	8008e04 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d107      	bne.n	8008a10 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	e025      	b.n	8008a5c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a1a:	d914      	bls.n	8008a46 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a22:	3301      	adds	r3, #1
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d903      	bls.n	8008a3e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	220d      	movs	r2, #13
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	e00e      	b.n	8008a5c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
 8008a44:	e00a      	b.n	8008a5c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a4c:	f103 020a 	add.w	r2, r3, #10
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008a56:	200a      	movs	r0, #10
 8008a58:	f004 fa00 	bl	800ce5c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a70:	2200      	movs	r2, #0
 8008a72:	4619      	mov	r1, r3
 8008a74:	f001 fd52 	bl	800a51c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a78:	e1cb      	b.n	8008e12 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d005      	beq.n	8008a90 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a8a:	2104      	movs	r1, #4
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008a90:	2064      	movs	r0, #100	; 0x64
 8008a92:	f004 f9e3 	bl	800ce5c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f004 f8b2 	bl	800cc00 <USBH_LL_GetSpeed>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2205      	movs	r2, #5
 8008aaa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008aac:	2100      	movs	r1, #0
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 fc17 	bl	800a2e2 <USBH_AllocPipe>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008abc:	2180      	movs	r1, #128	; 0x80
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 fc0f 	bl	800a2e2 <USBH_AllocPipe>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	7919      	ldrb	r1, [r3, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ae0:	b292      	uxth	r2, r2
 8008ae2:	9202      	str	r2, [sp, #8]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	9201      	str	r2, [sp, #4]
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	4603      	mov	r3, r0
 8008aec:	2280      	movs	r2, #128	; 0x80
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 fbc8 	bl	800a284 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	7959      	ldrb	r1, [r3, #5]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b08:	b292      	uxth	r2, r2
 8008b0a:	9202      	str	r2, [sp, #8]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	9201      	str	r2, [sp, #4]
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	4603      	mov	r3, r0
 8008b14:	2200      	movs	r2, #0
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fbb4 	bl	800a284 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b30:	2200      	movs	r2, #0
 8008b32:	4619      	mov	r1, r3
 8008b34:	f001 fcf2 	bl	800a51c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b38:	e16b      	b.n	8008e12 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f96e 	bl	8008e1c <USBH_HandleEnum>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 815d 	bne.w	8008e08 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d103      	bne.n	8008b68 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2208      	movs	r2, #8
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e002      	b.n	8008b6e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2207      	movs	r2, #7
 8008b6c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2205      	movs	r2, #5
 8008b72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b82:	2200      	movs	r2, #0
 8008b84:	4619      	mov	r1, r3
 8008b86:	f001 fcc9 	bl	800a51c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b8a:	e13d      	b.n	8008e08 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 813a 	beq.w	8008e0c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2208      	movs	r2, #8
 8008ba8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2205      	movs	r2, #5
 8008bae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	f001 fcab 	bl	800a51c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008bc6:	e121      	b.n	8008e0c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fd00 	bl	80095d8 <USBH_SetCfg>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2209      	movs	r2, #9
 8008be2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f001 fc8e 	bl	800a51c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c00:	e107      	b.n	8008e12 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d015      	beq.n	8008c3c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008c10:	2101      	movs	r1, #1
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fd03 	bl	800961e <USBH_SetFeature>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d103      	bne.n	8008c2c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	220a      	movs	r2, #10
 8008c28:	701a      	strb	r2, [r3, #0]
 8008c2a:	e00a      	b.n	8008c42 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d106      	bne.n	8008c42 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	220a      	movs	r2, #10
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	e002      	b.n	8008c42 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	220a      	movs	r2, #10
 8008c40:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c56:	2200      	movs	r2, #0
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f001 fc5f 	bl	800a51c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c5e:	e0d8      	b.n	8008e12 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d03f      	beq.n	8008cea <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]
 8008c76:	e016      	b.n	8008ca6 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008c78:	7bfa      	ldrb	r2, [r7, #15]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	32de      	adds	r2, #222	; 0xde
 8008c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c82:	791a      	ldrb	r2, [r3, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d108      	bne.n	8008ca0 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008c8e:	7bfa      	ldrb	r2, [r7, #15]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	32de      	adds	r2, #222	; 0xde
 8008c94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008c9e:	e005      	b.n	8008cac <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0e5      	beq.n	8008c78 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d016      	beq.n	8008ce4 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d109      	bne.n	8008cdc <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2206      	movs	r2, #6
 8008ccc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cd4:	2103      	movs	r1, #3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	4798      	blx	r3
 8008cda:	e006      	b.n	8008cea <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	220d      	movs	r2, #13
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	e002      	b.n	8008cea <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	220d      	movs	r2, #13
 8008ce8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2205      	movs	r2, #5
 8008cee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008cfe:	2200      	movs	r2, #0
 8008d00:	4619      	mov	r1, r3
 8008d02:	f001 fc0b 	bl	800a51c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d06:	e084      	b.n	8008e12 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d017      	beq.n	8008d42 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d103      	bne.n	8008d32 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	220b      	movs	r2, #11
 8008d2e:	701a      	strb	r2, [r3, #0]
 8008d30:	e00a      	b.n	8008d48 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d106      	bne.n	8008d48 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	220d      	movs	r2, #13
 8008d3e:	701a      	strb	r2, [r3, #0]
 8008d40:	e002      	b.n	8008d48 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	220d      	movs	r2, #13
 8008d46:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2205      	movs	r2, #5
 8008d4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4619      	mov	r1, r3
 8008d60:	f001 fbdc 	bl	800a51c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d64:	e055      	b.n	8008e12 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d04f      	beq.n	8008e10 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	4798      	blx	r3
      }
      break;
 8008d7c:	e048      	b.n	8008e10 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7ff fcec 	bl	8008764 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dba:	2105      	movs	r1, #5
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d107      	bne.n	8008ddc <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff fda5 	bl	8008924 <USBH_Start>
 8008dda:	e002      	b.n	8008de2 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f003 fed9 	bl	800cb94 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008df6:	2200      	movs	r2, #0
 8008df8:	4619      	mov	r1, r3
 8008dfa:	f001 fb8f 	bl	800a51c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dfe:	e008      	b.n	8008e12 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8008e00:	bf00      	nop
 8008e02:	e006      	b.n	8008e12 <USBH_Process+0x4ce>
      break;
 8008e04:	bf00      	nop
 8008e06:	e004      	b.n	8008e12 <USBH_Process+0x4ce>
      break;
 8008e08:	bf00      	nop
 8008e0a:	e002      	b.n	8008e12 <USBH_Process+0x4ce>
    break;
 8008e0c:	bf00      	nop
 8008e0e:	e000      	b.n	8008e12 <USBH_Process+0x4ce>
      break;
 8008e10:	bf00      	nop
  }
  return USBH_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af04      	add	r7, sp, #16
 8008e22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e24:	2301      	movs	r3, #1
 8008e26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	2b07      	cmp	r3, #7
 8008e32:	f200 8208 	bhi.w	8009246 <USBH_HandleEnum+0x42a>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <USBH_HandleEnum+0x20>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e5d 	.word	0x08008e5d
 8008e40:	08008f1b 	.word	0x08008f1b
 8008e44:	08008f85 	.word	0x08008f85
 8008e48:	08009013 	.word	0x08009013
 8008e4c:	0800907d 	.word	0x0800907d
 8008e50:	080090ed 	.word	0x080090ed
 8008e54:	08009189 	.word	0x08009189
 8008e58:	08009207 	.word	0x08009207
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e5c:	2108      	movs	r1, #8
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 faea 	bl	8009438 <USBH_Get_DevDesc>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d130      	bne.n	8008ed0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7919      	ldrb	r1, [r3, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e92:	b292      	uxth	r2, r2
 8008e94:	9202      	str	r2, [sp, #8]
 8008e96:	2200      	movs	r2, #0
 8008e98:	9201      	str	r2, [sp, #4]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2280      	movs	r2, #128	; 0x80
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 f9ef 	bl	800a284 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	7959      	ldrb	r1, [r3, #5]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008eba:	b292      	uxth	r2, r2
 8008ebc:	9202      	str	r2, [sp, #8]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	9201      	str	r2, [sp, #4]
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 f9db 	bl	800a284 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ece:	e1bc      	b.n	800924a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	f040 81b9 	bne.w	800924a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d903      	bls.n	8008efa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	220d      	movs	r2, #13
 8008ef6:	701a      	strb	r2, [r3, #0]
      break;
 8008ef8:	e1a7      	b.n	800924a <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	795b      	ldrb	r3, [r3, #5]
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 fa0f 	bl	800a324 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	791b      	ldrb	r3, [r3, #4]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fa09 	bl	800a324 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	701a      	strb	r2, [r3, #0]
      break;
 8008f18:	e197      	b.n	800924a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008f1a:	2112      	movs	r1, #18
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa8b 	bl	8009438 <USBH_Get_DevDesc>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d103      	bne.n	8008f34 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f32:	e18c      	b.n	800924e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	f040 8189 	bne.w	800924e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f42:	3301      	adds	r3, #1
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d903      	bls.n	8008f5e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	220d      	movs	r2, #13
 8008f5a:	701a      	strb	r2, [r3, #0]
      break;
 8008f5c:	e177      	b.n	800924e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	795b      	ldrb	r3, [r3, #5]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 f9dd 	bl	800a324 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	791b      	ldrb	r3, [r3, #4]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f9d7 	bl	800a324 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
      break;
 8008f82:	e164      	b.n	800924e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008f84:	2101      	movs	r1, #1
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fb02 	bl	8009590 <USBH_SetAddress>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d132      	bne.n	8008ffc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008f96:	2002      	movs	r0, #2
 8008f98:	f003 ff60 	bl	800ce5c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	7919      	ldrb	r1, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008fbe:	b292      	uxth	r2, r2
 8008fc0:	9202      	str	r2, [sp, #8]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	9201      	str	r2, [sp, #4]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2280      	movs	r2, #128	; 0x80
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f001 f959 	bl	800a284 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	7959      	ldrb	r1, [r3, #5]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fe6:	b292      	uxth	r2, r2
 8008fe8:	9202      	str	r2, [sp, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	9201      	str	r2, [sp, #4]
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 f945 	bl	800a284 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ffa:	e12a      	b.n	8009252 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	f040 8127 	bne.w	8009252 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	220d      	movs	r2, #13
 8009008:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	705a      	strb	r2, [r3, #1]
      break;
 8009010:	e11f      	b.n	8009252 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009012:	2109      	movs	r1, #9
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fa37 	bl	8009488 <USBH_Get_CfgDesc>
 800901a:	4603      	mov	r3, r0
 800901c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d103      	bne.n	800902c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2204      	movs	r2, #4
 8009028:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800902a:	e114      	b.n	8009256 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	2b03      	cmp	r3, #3
 8009030:	f040 8111 	bne.w	8009256 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800903a:	3301      	adds	r3, #1
 800903c:	b2da      	uxtb	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800904a:	2b03      	cmp	r3, #3
 800904c:	d903      	bls.n	8009056 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	220d      	movs	r2, #13
 8009052:	701a      	strb	r2, [r3, #0]
      break;
 8009054:	e0ff      	b.n	8009256 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	795b      	ldrb	r3, [r3, #5]
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f001 f961 	bl	800a324 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	791b      	ldrb	r3, [r3, #4]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 f95b 	bl	800a324 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	701a      	strb	r2, [r3, #0]
      break;
 800907a:	e0ec      	b.n	8009256 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f9ff 	bl	8009488 <USBH_Get_CfgDesc>
 800908a:	4603      	mov	r3, r0
 800908c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d103      	bne.n	800909c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2205      	movs	r2, #5
 8009098:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800909a:	e0de      	b.n	800925a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b03      	cmp	r3, #3
 80090a0:	f040 80db 	bne.w	800925a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090aa:	3301      	adds	r3, #1
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d903      	bls.n	80090c6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	220d      	movs	r2, #13
 80090c2:	701a      	strb	r2, [r3, #0]
      break;
 80090c4:	e0c9      	b.n	800925a <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	795b      	ldrb	r3, [r3, #5]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 f929 	bl	800a324 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	791b      	ldrb	r3, [r3, #4]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 f923 	bl	800a324 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
      break;
 80090ea:	e0b6      	b.n	800925a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d036      	beq.n	8009164 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009102:	23ff      	movs	r3, #255	; 0xff
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f9e3 	bl	80094d0 <USBH_Get_StringDesc>
 800910a:	4603      	mov	r3, r0
 800910c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d111      	bne.n	8009138 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2206      	movs	r2, #6
 8009118:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2205      	movs	r2, #5
 800911e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800912e:	2200      	movs	r2, #0
 8009130:	4619      	mov	r1, r3
 8009132:	f001 f9f3 	bl	800a51c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009136:	e092      	b.n	800925e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009138:	7bbb      	ldrb	r3, [r7, #14]
 800913a:	2b03      	cmp	r3, #3
 800913c:	f040 808f 	bne.w	800925e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2206      	movs	r2, #6
 8009144:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2205      	movs	r2, #5
 800914a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800915a:	2200      	movs	r2, #0
 800915c:	4619      	mov	r1, r3
 800915e:	f001 f9dd 	bl	800a51c <osMessagePut>
      break;
 8009162:	e07c      	b.n	800925e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2206      	movs	r2, #6
 8009168:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2205      	movs	r2, #5
 800916e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800917e:	2200      	movs	r2, #0
 8009180:	4619      	mov	r1, r3
 8009182:	f001 f9cb 	bl	800a51c <osMessagePut>
      break;
 8009186:	e06a      	b.n	800925e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800918e:	2b00      	cmp	r3, #0
 8009190:	d027      	beq.n	80091e2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800919e:	23ff      	movs	r3, #255	; 0xff
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f995 	bl	80094d0 <USBH_Get_StringDesc>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d103      	bne.n	80091b8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2207      	movs	r2, #7
 80091b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091b6:	e054      	b.n	8009262 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091b8:	7bbb      	ldrb	r3, [r7, #14]
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d151      	bne.n	8009262 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2207      	movs	r2, #7
 80091c2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2205      	movs	r2, #5
 80091c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091d8:	2200      	movs	r2, #0
 80091da:	4619      	mov	r1, r3
 80091dc:	f001 f99e 	bl	800a51c <osMessagePut>
      break;
 80091e0:	e03f      	b.n	8009262 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2207      	movs	r2, #7
 80091e6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2205      	movs	r2, #5
 80091ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091fc:	2200      	movs	r2, #0
 80091fe:	4619      	mov	r1, r3
 8009200:	f001 f98c 	bl	800a51c <osMessagePut>
      break;
 8009204:	e02d      	b.n	8009262 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800920c:	2b00      	cmp	r3, #0
 800920e:	d017      	beq.n	8009240 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800921c:	23ff      	movs	r3, #255	; 0xff
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f956 	bl	80094d0 <USBH_Get_StringDesc>
 8009224:	4603      	mov	r3, r0
 8009226:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d102      	bne.n	8009234 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009232:	e018      	b.n	8009266 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d115      	bne.n	8009266 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]
      break;
 800923e:	e012      	b.n	8009266 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73fb      	strb	r3, [r7, #15]
      break;
 8009244:	e00f      	b.n	8009266 <USBH_HandleEnum+0x44a>

    default:
      break;
 8009246:	bf00      	nop
 8009248:	e00e      	b.n	8009268 <USBH_HandleEnum+0x44c>
      break;
 800924a:	bf00      	nop
 800924c:	e00c      	b.n	8009268 <USBH_HandleEnum+0x44c>
      break;
 800924e:	bf00      	nop
 8009250:	e00a      	b.n	8009268 <USBH_HandleEnum+0x44c>
      break;
 8009252:	bf00      	nop
 8009254:	e008      	b.n	8009268 <USBH_HandleEnum+0x44c>
      break;
 8009256:	bf00      	nop
 8009258:	e006      	b.n	8009268 <USBH_HandleEnum+0x44c>
      break;
 800925a:	bf00      	nop
 800925c:	e004      	b.n	8009268 <USBH_HandleEnum+0x44c>
      break;
 800925e:	bf00      	nop
 8009260:	e002      	b.n	8009268 <USBH_HandleEnum+0x44c>
      break;
 8009262:	bf00      	nop
 8009264:	e000      	b.n	8009268 <USBH_HandleEnum+0x44c>
      break;
 8009266:	bf00      	nop
  }
  return Status;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop

08009274 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f804 	bl	80092b6 <USBH_HandleSof>
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b0b      	cmp	r3, #11
 80092c6:	d10a      	bne.n	80092de <USBH_HandleSof+0x28>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d005      	beq.n	80092de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
  }
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800930a:	2200      	movs	r2, #0
 800930c:	4619      	mov	r1, r3
 800930e:	f001 f905 	bl	800a51c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009312:	bf00      	nop
}
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800932a:	bf00      	nop
}
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800936a:	2200      	movs	r2, #0
 800936c:	4619      	mov	r1, r3
 800936e:	f001 f8d5 	bl	800a51c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f003 fc14 	bl	800cbca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	791b      	ldrb	r3, [r3, #4]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 ffbb 	bl	800a324 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	795b      	ldrb	r3, [r3, #5]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 ffb5 	bl	800a324 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80093ce:	2200      	movs	r2, #0
 80093d0:	4619      	mov	r1, r3
 80093d2:	f001 f8a3 	bl	800a51c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80093ee:	f107 030c 	add.w	r3, r7, #12
 80093f2:	f04f 32ff 	mov.w	r2, #4294967295
 80093f6:	4618      	mov	r0, r3
 80093f8:	f001 f8d0 	bl	800a59c <osMessageGet>
    if (event.status == osEventMessage)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b10      	cmp	r3, #16
 8009400:	d1f2      	bne.n	80093e8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff fa9e 	bl	8008944 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009408:	e7ee      	b.n	80093e8 <USBH_Process_OS+0x8>

0800940a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009426:	2200      	movs	r2, #0
 8009428:	4619      	mov	r1, r3
 800942a:	f001 f877 	bl	800a51c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af02      	add	r7, sp, #8
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	b29b      	uxth	r3, r3
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	4613      	mov	r3, r2
 8009452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009456:	2100      	movs	r1, #0
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f864 	bl	8009526 <USBH_GetDescriptor>
 800945e:	4603      	mov	r3, r0
 8009460:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10a      	bne.n	800947e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009474:	78fa      	ldrb	r2, [r7, #3]
 8009476:	b292      	uxth	r2, r2
 8009478:	4619      	mov	r1, r3
 800947a:	f000 f918 	bl	80096ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af02      	add	r7, sp, #8
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	331c      	adds	r3, #28
 8009498:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800949a:	887b      	ldrh	r3, [r7, #2]
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094a4:	2100      	movs	r1, #0
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f83d 	bl	8009526 <USBH_GetDescriptor>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d107      	bne.n	80094c6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80094b6:	887b      	ldrh	r3, [r7, #2]
 80094b8:	461a      	mov	r2, r3
 80094ba:	68b9      	ldr	r1, [r7, #8]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f987 	bl	80097d0 <USBH_ParseCfgDesc>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af02      	add	r7, sp, #8
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	461a      	mov	r2, r3
 80094dc:	460b      	mov	r3, r1
 80094de:	72fb      	strb	r3, [r7, #11]
 80094e0:	4613      	mov	r3, r2
 80094e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80094e4:	7afb      	ldrb	r3, [r7, #11]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80094ec:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80094f4:	893b      	ldrh	r3, [r7, #8]
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	460b      	mov	r3, r1
 80094fa:	2100      	movs	r1, #0
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f812 	bl	8009526 <USBH_GetDescriptor>
 8009502:	4603      	mov	r3, r0
 8009504:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d107      	bne.n	800951c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009512:	893a      	ldrh	r2, [r7, #8]
 8009514:	6879      	ldr	r1, [r7, #4]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fb24 	bl	8009b64 <USBH_ParseStringDesc>
  }

  return status;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	607b      	str	r3, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	72fb      	strb	r3, [r7, #11]
 8009534:	4613      	mov	r3, r2
 8009536:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	789b      	ldrb	r3, [r3, #2]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d11c      	bne.n	800957a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009540:	7afb      	ldrb	r3, [r7, #11]
 8009542:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009546:	b2da      	uxtb	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2206      	movs	r2, #6
 8009550:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	893a      	ldrh	r2, [r7, #8]
 8009556:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009558:	893b      	ldrh	r3, [r7, #8]
 800955a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800955e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009562:	d104      	bne.n	800956e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f240 4209 	movw	r2, #1033	; 0x409
 800956a:	829a      	strh	r2, [r3, #20]
 800956c:	e002      	b.n	8009574 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8b3a      	ldrh	r2, [r7, #24]
 8009578:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800957a:	8b3b      	ldrh	r3, [r7, #24]
 800957c:	461a      	mov	r2, r3
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 fb3d 	bl	8009c00 <USBH_CtlReq>
 8009586:	4603      	mov	r3, r0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	789b      	ldrb	r3, [r3, #2]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d10f      	bne.n	80095c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2205      	movs	r2, #5
 80095ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095c4:	2200      	movs	r2, #0
 80095c6:	2100      	movs	r1, #0
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fb19 	bl	8009c00 <USBH_CtlReq>
 80095ce:	4603      	mov	r3, r0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	789b      	ldrb	r3, [r3, #2]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d10e      	bne.n	800960a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2209      	movs	r2, #9
 80095f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	887a      	ldrh	r2, [r7, #2]
 80095fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800960a:	2200      	movs	r2, #0
 800960c:	2100      	movs	r1, #0
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 faf6 	bl	8009c00 <USBH_CtlReq>
 8009614:	4603      	mov	r3, r0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	460b      	mov	r3, r1
 8009628:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	789b      	ldrb	r3, [r3, #2]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d10f      	bne.n	8009652 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2203      	movs	r2, #3
 800963c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	b29a      	uxth	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009652:	2200      	movs	r2, #0
 8009654:	2100      	movs	r1, #0
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fad2 	bl	8009c00 <USBH_CtlReq>
 800965c:	4603      	mov	r3, r0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	789b      	ldrb	r3, [r3, #2]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d10f      	bne.n	800969a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2202      	movs	r2, #2
 800967e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	b29a      	uxth	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800969a:	2200      	movs	r2, #0
 800969c:	2100      	movs	r1, #0
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 faae 	bl	8009c00 <USBH_CtlReq>
 80096a4:	4603      	mov	r3, r0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b085      	sub	sp, #20
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	4613      	mov	r3, r2
 80096ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	781a      	ldrb	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	785a      	ldrb	r2, [r3, #1]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	3302      	adds	r3, #2
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	3303      	adds	r3, #3
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	b29b      	uxth	r3, r3
 80096e0:	4313      	orrs	r3, r2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	791a      	ldrb	r2, [r3, #4]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	795a      	ldrb	r2, [r3, #5]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	799a      	ldrb	r2, [r3, #6]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	79da      	ldrb	r2, [r3, #7]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	79db      	ldrb	r3, [r3, #7]
 800970c:	2b20      	cmp	r3, #32
 800970e:	dc11      	bgt.n	8009734 <USBH_ParseDevDesc+0x86>
 8009710:	2b08      	cmp	r3, #8
 8009712:	db16      	blt.n	8009742 <USBH_ParseDevDesc+0x94>
 8009714:	3b08      	subs	r3, #8
 8009716:	2201      	movs	r2, #1
 8009718:	fa02 f303 	lsl.w	r3, r2, r3
 800971c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009724:	2b00      	cmp	r3, #0
 8009726:	bf14      	ite	ne
 8009728:	2301      	movne	r3, #1
 800972a:	2300      	moveq	r3, #0
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <USBH_ParseDevDesc+0x8a>
 8009732:	e006      	b.n	8009742 <USBH_ParseDevDesc+0x94>
 8009734:	2b40      	cmp	r3, #64	; 0x40
 8009736:	d104      	bne.n	8009742 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	79da      	ldrb	r2, [r3, #7]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	71da      	strb	r2, [r3, #7]
      break;
 8009740:	e003      	b.n	800974a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2240      	movs	r2, #64	; 0x40
 8009746:	71da      	strb	r2, [r3, #7]
      break;
 8009748:	bf00      	nop
  }

  if (length > 8U)
 800974a:	88fb      	ldrh	r3, [r7, #6]
 800974c:	2b08      	cmp	r3, #8
 800974e:	d939      	bls.n	80097c4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	3308      	adds	r3, #8
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	b29a      	uxth	r2, r3
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	3309      	adds	r3, #9
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	021b      	lsls	r3, r3, #8
 8009762:	b29b      	uxth	r3, r3
 8009764:	4313      	orrs	r3, r2
 8009766:	b29a      	uxth	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	330a      	adds	r3, #10
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b29a      	uxth	r2, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	330b      	adds	r3, #11
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	b29b      	uxth	r3, r3
 800977c:	021b      	lsls	r3, r3, #8
 800977e:	b29b      	uxth	r3, r3
 8009780:	4313      	orrs	r3, r2
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	330c      	adds	r3, #12
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	b29a      	uxth	r2, r3
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	330d      	adds	r3, #13
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	b29b      	uxth	r3, r3
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	b29b      	uxth	r3, r3
 800979c:	4313      	orrs	r3, r2
 800979e:	b29a      	uxth	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	7b9a      	ldrb	r2, [r3, #14]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	7bda      	ldrb	r2, [r3, #15]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	7c1a      	ldrb	r2, [r3, #16]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	7c5a      	ldrb	r2, [r3, #17]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	745a      	strb	r2, [r3, #17]
  }
}
 80097c4:	bf00      	nop
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08c      	sub	sp, #48	; 0x30
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80097e4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80097f6:	2300      	movs	r3, #0
 80097f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	781a      	ldrb	r2, [r3, #0]
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	785a      	ldrb	r2, [r3, #1]
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	3302      	adds	r3, #2
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	b29a      	uxth	r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	3303      	adds	r3, #3
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	021b      	lsls	r3, r3, #8
 8009822:	b29b      	uxth	r3, r3
 8009824:	4313      	orrs	r3, r2
 8009826:	b29b      	uxth	r3, r3
 8009828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982c:	bf28      	it	cs
 800982e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009832:	b29a      	uxth	r2, r3
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	791a      	ldrb	r2, [r3, #4]
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	795a      	ldrb	r2, [r3, #5]
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	799a      	ldrb	r2, [r3, #6]
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	79da      	ldrb	r2, [r3, #7]
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	7a1a      	ldrb	r2, [r3, #8]
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2b09      	cmp	r3, #9
 8009866:	d002      	beq.n	800986e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	2209      	movs	r2, #9
 800986c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	2b09      	cmp	r3, #9
 8009872:	f240 809d 	bls.w	80099b0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009876:	2309      	movs	r3, #9
 8009878:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800987a:	2300      	movs	r3, #0
 800987c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800987e:	e081      	b.n	8009984 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009880:	f107 0316 	add.w	r3, r7, #22
 8009884:	4619      	mov	r1, r3
 8009886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009888:	f000 f99f 	bl	8009bca <USBH_GetNextDesc>
 800988c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	785b      	ldrb	r3, [r3, #1]
 8009892:	2b04      	cmp	r3, #4
 8009894:	d176      	bne.n	8009984 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b09      	cmp	r3, #9
 800989c:	d002      	beq.n	80098a4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	2209      	movs	r2, #9
 80098a2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80098a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a8:	221a      	movs	r2, #26
 80098aa:	fb02 f303 	mul.w	r3, r2, r3
 80098ae:	3308      	adds	r3, #8
 80098b0:	6a3a      	ldr	r2, [r7, #32]
 80098b2:	4413      	add	r3, r2
 80098b4:	3302      	adds	r3, #2
 80098b6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80098b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098ba:	69f8      	ldr	r0, [r7, #28]
 80098bc:	f000 f87e 	bl	80099bc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80098ca:	e043      	b.n	8009954 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80098cc:	f107 0316 	add.w	r3, r7, #22
 80098d0:	4619      	mov	r1, r3
 80098d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098d4:	f000 f979 	bl	8009bca <USBH_GetNextDesc>
 80098d8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	785b      	ldrb	r3, [r3, #1]
 80098de:	2b05      	cmp	r3, #5
 80098e0:	d138      	bne.n	8009954 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	795b      	ldrb	r3, [r3, #5]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d10f      	bne.n	800990a <USBH_ParseCfgDesc+0x13a>
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	799b      	ldrb	r3, [r3, #6]
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d10b      	bne.n	800990a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	79db      	ldrb	r3, [r3, #7]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10f      	bne.n	800991a <USBH_ParseCfgDesc+0x14a>
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b09      	cmp	r3, #9
 8009900:	d00b      	beq.n	800991a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	2209      	movs	r2, #9
 8009906:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009908:	e007      	b.n	800991a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	2b07      	cmp	r3, #7
 8009910:	d004      	beq.n	800991c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	2207      	movs	r2, #7
 8009916:	701a      	strb	r2, [r3, #0]
 8009918:	e000      	b.n	800991c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800991a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800991c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009920:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009924:	3201      	adds	r2, #1
 8009926:	00d2      	lsls	r2, r2, #3
 8009928:	211a      	movs	r1, #26
 800992a:	fb01 f303 	mul.w	r3, r1, r3
 800992e:	4413      	add	r3, r2
 8009930:	3308      	adds	r3, #8
 8009932:	6a3a      	ldr	r2, [r7, #32]
 8009934:	4413      	add	r3, r2
 8009936:	3304      	adds	r3, #4
 8009938:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800993a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800993c:	69b9      	ldr	r1, [r7, #24]
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 f86b 	bl	8009a1a <USBH_ParseEPDesc>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800994a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800994e:	3301      	adds	r3, #1
 8009950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	791b      	ldrb	r3, [r3, #4]
 8009958:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800995c:	429a      	cmp	r2, r3
 800995e:	d204      	bcs.n	800996a <USBH_ParseCfgDesc+0x19a>
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	885a      	ldrh	r2, [r3, #2]
 8009964:	8afb      	ldrh	r3, [r7, #22]
 8009966:	429a      	cmp	r2, r3
 8009968:	d8b0      	bhi.n	80098cc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	791b      	ldrb	r3, [r3, #4]
 800996e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009972:	429a      	cmp	r2, r3
 8009974:	d201      	bcs.n	800997a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009976:	2303      	movs	r3, #3
 8009978:	e01c      	b.n	80099b4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800997a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800997e:	3301      	adds	r3, #1
 8009980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009988:	2b01      	cmp	r3, #1
 800998a:	d805      	bhi.n	8009998 <USBH_ParseCfgDesc+0x1c8>
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	885a      	ldrh	r2, [r3, #2]
 8009990:	8afb      	ldrh	r3, [r7, #22]
 8009992:	429a      	cmp	r2, r3
 8009994:	f63f af74 	bhi.w	8009880 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	791b      	ldrb	r3, [r3, #4]
 800999c:	2b02      	cmp	r3, #2
 800999e:	bf28      	it	cs
 80099a0:	2302      	movcs	r3, #2
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d201      	bcs.n	80099b0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e001      	b.n	80099b4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80099b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3730      	adds	r7, #48	; 0x30
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	785a      	ldrb	r2, [r3, #1]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	789a      	ldrb	r2, [r3, #2]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	78da      	ldrb	r2, [r3, #3]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	791a      	ldrb	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	795a      	ldrb	r2, [r3, #5]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	799a      	ldrb	r2, [r3, #6]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	79da      	ldrb	r2, [r3, #7]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	7a1a      	ldrb	r2, [r3, #8]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	721a      	strb	r2, [r3, #8]
}
 8009a0e:	bf00      	nop
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b087      	sub	sp, #28
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	781a      	ldrb	r2, [r3, #0]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	785a      	ldrb	r2, [r3, #1]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	789a      	ldrb	r2, [r3, #2]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	78da      	ldrb	r2, [r3, #3]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3305      	adds	r3, #5
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	799a      	ldrb	r2, [r3, #6]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	889b      	ldrh	r3, [r3, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d102      	bne.n	8009a7c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009a76:	2303      	movs	r3, #3
 8009a78:	75fb      	strb	r3, [r7, #23]
 8009a7a:	e033      	b.n	8009ae4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	889b      	ldrh	r3, [r3, #4]
 8009a80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009a84:	f023 0307 	bic.w	r3, r3, #7
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	889b      	ldrh	r3, [r3, #4]
 8009a92:	b21a      	sxth	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3304      	adds	r3, #4
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b299      	uxth	r1, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3305      	adds	r3, #5
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	021b      	lsls	r3, r3, #8
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	430b      	orrs	r3, r1
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d110      	bne.n	8009ad6 <USBH_ParseEPDesc+0xbc>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	b299      	uxth	r1, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3305      	adds	r3, #5
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	021b      	lsls	r3, r3, #8
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	b21b      	sxth	r3, r3
 8009ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ad2:	b21b      	sxth	r3, r3
 8009ad4:	e001      	b.n	8009ada <USBH_ParseEPDesc+0xc0>
 8009ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ada:	4313      	orrs	r3, r2
 8009adc:	b21b      	sxth	r3, r3
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d116      	bne.n	8009b1c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	78db      	ldrb	r3, [r3, #3]
 8009af2:	f003 0303 	and.w	r3, r3, #3
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d005      	beq.n	8009b06 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	78db      	ldrb	r3, [r3, #3]
 8009afe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d127      	bne.n	8009b56 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	799b      	ldrb	r3, [r3, #6]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <USBH_ParseEPDesc+0xfc>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	799b      	ldrb	r3, [r3, #6]
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d91f      	bls.n	8009b56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009b16:	2303      	movs	r3, #3
 8009b18:	75fb      	strb	r3, [r7, #23]
 8009b1a:	e01c      	b.n	8009b56 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	78db      	ldrb	r3, [r3, #3]
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d10a      	bne.n	8009b3e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	799b      	ldrb	r3, [r3, #6]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <USBH_ParseEPDesc+0x11e>
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	799b      	ldrb	r3, [r3, #6]
 8009b34:	2b10      	cmp	r3, #16
 8009b36:	d90e      	bls.n	8009b56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	75fb      	strb	r3, [r7, #23]
 8009b3c:	e00b      	b.n	8009b56 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	78db      	ldrb	r3, [r3, #3]
 8009b42:	f003 0303 	and.w	r3, r3, #3
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d105      	bne.n	8009b56 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	799b      	ldrb	r3, [r3, #6]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009b52:	2303      	movs	r3, #3
 8009b54:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	371c      	adds	r7, #28
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3301      	adds	r3, #1
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d120      	bne.n	8009bbe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	1e9a      	subs	r2, r3, #2
 8009b82:	88fb      	ldrh	r3, [r7, #6]
 8009b84:	4293      	cmp	r3, r2
 8009b86:	bf28      	it	cs
 8009b88:	4613      	movcs	r3, r2
 8009b8a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3302      	adds	r3, #2
 8009b90:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009b92:	2300      	movs	r3, #0
 8009b94:	82fb      	strh	r3, [r7, #22]
 8009b96:	e00b      	b.n	8009bb0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009b98:	8afb      	ldrh	r3, [r7, #22]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	781a      	ldrb	r2, [r3, #0]
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009baa:	8afb      	ldrh	r3, [r7, #22]
 8009bac:	3302      	adds	r3, #2
 8009bae:	82fb      	strh	r3, [r7, #22]
 8009bb0:	8afa      	ldrh	r2, [r7, #22]
 8009bb2:	8abb      	ldrh	r3, [r7, #20]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d3ef      	bcc.n	8009b98 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	701a      	strb	r2, [r3, #0]
  }
}
 8009bbe:	bf00      	nop
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b085      	sub	sp, #20
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	881a      	ldrh	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	4413      	add	r3, r2
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4413      	add	r3, r2
 8009bf0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	789b      	ldrb	r3, [r3, #2]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d002      	beq.n	8009c20 <USBH_CtlReq+0x20>
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d01d      	beq.n	8009c5a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009c1e:	e043      	b.n	8009ca8 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	88fa      	ldrh	r2, [r7, #6]
 8009c2a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2202      	movs	r2, #2
 8009c36:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2203      	movs	r2, #3
 8009c40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c50:	2200      	movs	r2, #0
 8009c52:	4619      	mov	r1, r3
 8009c54:	f000 fc62 	bl	800a51c <osMessagePut>
      break;
 8009c58:	e026      	b.n	8009ca8 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f82a 	bl	8009cb4 <USBH_HandleControl>
 8009c60:	4603      	mov	r3, r0
 8009c62:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <USBH_CtlReq+0x70>
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d106      	bne.n	8009c7e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2201      	movs	r2, #1
 8009c74:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	761a      	strb	r2, [r3, #24]
 8009c7c:	e005      	b.n	8009c8a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d102      	bne.n	8009c8a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2201      	movs	r2, #1
 8009c88:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2203      	movs	r2, #3
 8009c8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	f000 fc3b 	bl	800a51c <osMessagePut>
      break;
 8009ca6:	bf00      	nop
  }
  return status;
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af02      	add	r7, sp, #8
 8009cba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	7e1b      	ldrb	r3, [r3, #24]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	2b0a      	cmp	r3, #10
 8009ccc:	f200 8229 	bhi.w	800a122 <USBH_HandleControl+0x46e>
 8009cd0:	a201      	add	r2, pc, #4	; (adr r2, 8009cd8 <USBH_HandleControl+0x24>)
 8009cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009d05 	.word	0x08009d05
 8009cdc:	08009d1f 	.word	0x08009d1f
 8009ce0:	08009dc1 	.word	0x08009dc1
 8009ce4:	08009de7 	.word	0x08009de7
 8009ce8:	08009e73 	.word	0x08009e73
 8009cec:	08009e9d 	.word	0x08009e9d
 8009cf0:	08009f5f 	.word	0x08009f5f
 8009cf4:	08009f81 	.word	0x08009f81
 8009cf8:	0800a013 	.word	0x0800a013
 8009cfc:	0800a039 	.word	0x0800a039
 8009d00:	0800a0cb 	.word	0x0800a0cb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f103 0110 	add.w	r1, r3, #16
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	795b      	ldrb	r3, [r3, #5]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fa17 	bl	800a144 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2202      	movs	r2, #2
 8009d1a:	761a      	strb	r2, [r3, #24]
      break;
 8009d1c:	e20c      	b.n	800a138 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	795b      	ldrb	r3, [r3, #5]
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f003 f83f 	bl	800cda8 <USBH_LL_GetURBState>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d12c      	bne.n	8009d8e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	7c1b      	ldrb	r3, [r3, #16]
 8009d38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d3c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	8adb      	ldrh	r3, [r3, #22]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00a      	beq.n	8009d5c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009d46:	7b7b      	ldrb	r3, [r7, #13]
 8009d48:	2b80      	cmp	r3, #128	; 0x80
 8009d4a:	d103      	bne.n	8009d54 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2203      	movs	r2, #3
 8009d50:	761a      	strb	r2, [r3, #24]
 8009d52:	e00d      	b.n	8009d70 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2205      	movs	r2, #5
 8009d58:	761a      	strb	r2, [r3, #24]
 8009d5a:	e009      	b.n	8009d70 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009d5c:	7b7b      	ldrb	r3, [r7, #13]
 8009d5e:	2b80      	cmp	r3, #128	; 0x80
 8009d60:	d103      	bne.n	8009d6a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2209      	movs	r2, #9
 8009d66:	761a      	strb	r2, [r3, #24]
 8009d68:	e002      	b.n	8009d70 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2207      	movs	r2, #7
 8009d6e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2203      	movs	r2, #3
 8009d74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d84:	2200      	movs	r2, #0
 8009d86:	4619      	mov	r1, r3
 8009d88:	f000 fbc8 	bl	800a51c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d8c:	e1cb      	b.n	800a126 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	d003      	beq.n	8009d9c <USBH_HandleControl+0xe8>
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	f040 81c5 	bne.w	800a126 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	220b      	movs	r2, #11
 8009da0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2203      	movs	r2, #3
 8009da6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009db6:	2200      	movs	r2, #0
 8009db8:	4619      	mov	r1, r3
 8009dba:	f000 fbaf 	bl	800a51c <osMessagePut>
      break;
 8009dbe:	e1b2      	b.n	800a126 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6899      	ldr	r1, [r3, #8]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	899a      	ldrh	r2, [r3, #12]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	791b      	ldrb	r3, [r3, #4]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f9f2 	bl	800a1c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2204      	movs	r2, #4
 8009de2:	761a      	strb	r2, [r3, #24]
      break;
 8009de4:	e1a8      	b.n	800a138 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	791b      	ldrb	r3, [r3, #4]
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f002 ffdb 	bl	800cda8 <USBH_LL_GetURBState>
 8009df2:	4603      	mov	r3, r0
 8009df4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009df6:	7bbb      	ldrb	r3, [r7, #14]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d110      	bne.n	8009e1e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2209      	movs	r2, #9
 8009e00:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2203      	movs	r2, #3
 8009e06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e16:	2200      	movs	r2, #0
 8009e18:	4619      	mov	r1, r3
 8009e1a:	f000 fb7f 	bl	800a51c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b05      	cmp	r3, #5
 8009e22:	d110      	bne.n	8009e46 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e24:	2303      	movs	r3, #3
 8009e26:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4619      	mov	r1, r3
 8009e40:	f000 fb6c 	bl	800a51c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e44:	e171      	b.n	800a12a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	f040 816e 	bne.w	800a12a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	220b      	movs	r2, #11
 8009e52:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2203      	movs	r2, #3
 8009e58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e68:	2200      	movs	r2, #0
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f000 fb56 	bl	800a51c <osMessagePut>
      break;
 8009e70:	e15b      	b.n	800a12a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6899      	ldr	r1, [r3, #8]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	899a      	ldrh	r2, [r3, #12]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	795b      	ldrb	r3, [r3, #5]
 8009e7e:	2001      	movs	r0, #1
 8009e80:	9000      	str	r0, [sp, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f978 	bl	800a178 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2206      	movs	r2, #6
 8009e98:	761a      	strb	r2, [r3, #24]
      break;
 8009e9a:	e14d      	b.n	800a138 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	795b      	ldrb	r3, [r3, #5]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f002 ff80 	bl	800cda8 <USBH_LL_GetURBState>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d111      	bne.n	8009ed6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2207      	movs	r2, #7
 8009eb6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2203      	movs	r2, #3
 8009ebc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ecc:	2200      	movs	r2, #0
 8009ece:	4619      	mov	r1, r3
 8009ed0:	f000 fb24 	bl	800a51c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ed4:	e12b      	b.n	800a12e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	2b05      	cmp	r3, #5
 8009eda:	d113      	bne.n	8009f04 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	220c      	movs	r2, #12
 8009ee0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2203      	movs	r2, #3
 8009eea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009efa:	2200      	movs	r2, #0
 8009efc:	4619      	mov	r1, r3
 8009efe:	f000 fb0d 	bl	800a51c <osMessagePut>
      break;
 8009f02:	e114      	b.n	800a12e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d111      	bne.n	8009f2e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2205      	movs	r2, #5
 8009f0e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2203      	movs	r2, #3
 8009f14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f24:	2200      	movs	r2, #0
 8009f26:	4619      	mov	r1, r3
 8009f28:	f000 faf8 	bl	800a51c <osMessagePut>
      break;
 8009f2c:	e0ff      	b.n	800a12e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	f040 80fc 	bne.w	800a12e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	220b      	movs	r2, #11
 8009f3a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2203      	movs	r2, #3
 8009f44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f54:	2200      	movs	r2, #0
 8009f56:	4619      	mov	r1, r3
 8009f58:	f000 fae0 	bl	800a51c <osMessagePut>
      break;
 8009f5c:	e0e7      	b.n	800a12e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	791b      	ldrb	r3, [r3, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	2100      	movs	r1, #0
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f92b 	bl	800a1c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2208      	movs	r2, #8
 8009f7c:	761a      	strb	r2, [r3, #24]

      break;
 8009f7e:	e0db      	b.n	800a138 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	791b      	ldrb	r3, [r3, #4]
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f002 ff0e 	bl	800cda8 <USBH_LL_GetURBState>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d113      	bne.n	8009fbe <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	220d      	movs	r2, #13
 8009f9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2203      	movs	r2, #3
 8009fa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	f000 fab0 	bl	800a51c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009fbc:	e0b9      	b.n	800a132 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d111      	bne.n	8009fe8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	220b      	movs	r2, #11
 8009fc8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2203      	movs	r2, #3
 8009fce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009fde:	2200      	movs	r2, #0
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	f000 fa9b 	bl	800a51c <osMessagePut>
      break;
 8009fe6:	e0a4      	b.n	800a132 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	2b05      	cmp	r3, #5
 8009fec:	f040 80a1 	bne.w	800a132 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2203      	movs	r2, #3
 8009ff8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a008:	2200      	movs	r2, #0
 800a00a:	4619      	mov	r1, r3
 800a00c:	f000 fa86 	bl	800a51c <osMessagePut>
      break;
 800a010:	e08f      	b.n	800a132 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	795b      	ldrb	r3, [r3, #5]
 800a016:	2201      	movs	r2, #1
 800a018:	9200      	str	r2, [sp, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	2100      	movs	r1, #0
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f8aa 	bl	800a178 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	220a      	movs	r2, #10
 800a034:	761a      	strb	r2, [r3, #24]
      break;
 800a036:	e07f      	b.n	800a138 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	795b      	ldrb	r3, [r3, #5]
 800a03c:	4619      	mov	r1, r3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f002 feb2 	bl	800cda8 <USBH_LL_GetURBState>
 800a044:	4603      	mov	r3, r0
 800a046:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d113      	bne.n	800a076 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	220d      	movs	r2, #13
 800a056:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2203      	movs	r2, #3
 800a05c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a06c:	2200      	movs	r2, #0
 800a06e:	4619      	mov	r1, r3
 800a070:	f000 fa54 	bl	800a51c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a074:	e05f      	b.n	800a136 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d111      	bne.n	800a0a0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2209      	movs	r2, #9
 800a080:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2203      	movs	r2, #3
 800a086:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a096:	2200      	movs	r2, #0
 800a098:	4619      	mov	r1, r3
 800a09a:	f000 fa3f 	bl	800a51c <osMessagePut>
      break;
 800a09e:	e04a      	b.n	800a136 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	2b04      	cmp	r3, #4
 800a0a4:	d147      	bne.n	800a136 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	220b      	movs	r2, #11
 800a0aa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2203      	movs	r2, #3
 800a0b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	f000 fa2a 	bl	800a51c <osMessagePut>
      break;
 800a0c8:	e035      	b.n	800a136 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	7e5b      	ldrb	r3, [r3, #25]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	765a      	strb	r2, [r3, #25]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	7e5b      	ldrb	r3, [r3, #25]
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d806      	bhi.n	800a0ec <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a0ea:	e025      	b.n	800a138 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0f2:	2106      	movs	r1, #6
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	795b      	ldrb	r3, [r3, #5]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f90d 	bl	800a324 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	791b      	ldrb	r3, [r3, #4]
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f907 	bl	800a324 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a11c:	2302      	movs	r3, #2
 800a11e:	73fb      	strb	r3, [r7, #15]
      break;
 800a120:	e00a      	b.n	800a138 <USBH_HandleControl+0x484>

    default:
      break;
 800a122:	bf00      	nop
 800a124:	e008      	b.n	800a138 <USBH_HandleControl+0x484>
      break;
 800a126:	bf00      	nop
 800a128:	e006      	b.n	800a138 <USBH_HandleControl+0x484>
      break;
 800a12a:	bf00      	nop
 800a12c:	e004      	b.n	800a138 <USBH_HandleControl+0x484>
      break;
 800a12e:	bf00      	nop
 800a130:	e002      	b.n	800a138 <USBH_HandleControl+0x484>
      break;
 800a132:	bf00      	nop
 800a134:	e000      	b.n	800a138 <USBH_HandleControl+0x484>
      break;
 800a136:	bf00      	nop
  }

  return status;
 800a138:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop

0800a144 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af04      	add	r7, sp, #16
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	4613      	mov	r3, r2
 800a150:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a152:	79f9      	ldrb	r1, [r7, #7]
 800a154:	2300      	movs	r3, #0
 800a156:	9303      	str	r3, [sp, #12]
 800a158:	2308      	movs	r3, #8
 800a15a:	9302      	str	r3, [sp, #8]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	2300      	movs	r3, #0
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	2300      	movs	r3, #0
 800a166:	2200      	movs	r2, #0
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f002 fdec 	bl	800cd46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af04      	add	r7, sp, #16
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4611      	mov	r1, r2
 800a184:	461a      	mov	r2, r3
 800a186:	460b      	mov	r3, r1
 800a188:	80fb      	strh	r3, [r7, #6]
 800a18a:	4613      	mov	r3, r2
 800a18c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a198:	2300      	movs	r3, #0
 800a19a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a19c:	7979      	ldrb	r1, [r7, #5]
 800a19e:	7e3b      	ldrb	r3, [r7, #24]
 800a1a0:	9303      	str	r3, [sp, #12]
 800a1a2:	88fb      	ldrh	r3, [r7, #6]
 800a1a4:	9302      	str	r3, [sp, #8]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f002 fdc7 	bl	800cd46 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b088      	sub	sp, #32
 800a1c6:	af04      	add	r7, sp, #16
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	80fb      	strh	r3, [r7, #6]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1d8:	7979      	ldrb	r1, [r7, #5]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9303      	str	r3, [sp, #12]
 800a1de:	88fb      	ldrh	r3, [r7, #6]
 800a1e0:	9302      	str	r3, [sp, #8]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f002 fda9 	bl	800cd46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a1f4:	2300      	movs	r3, #0

}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b088      	sub	sp, #32
 800a202:	af04      	add	r7, sp, #16
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	4611      	mov	r1, r2
 800a20a:	461a      	mov	r2, r3
 800a20c:	460b      	mov	r3, r1
 800a20e:	80fb      	strh	r3, [r7, #6]
 800a210:	4613      	mov	r3, r2
 800a212:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a21e:	2300      	movs	r3, #0
 800a220:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a222:	7979      	ldrb	r1, [r7, #5]
 800a224:	7e3b      	ldrb	r3, [r7, #24]
 800a226:	9303      	str	r3, [sp, #12]
 800a228:	88fb      	ldrh	r3, [r7, #6]
 800a22a:	9302      	str	r3, [sp, #8]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	9301      	str	r3, [sp, #4]
 800a230:	2301      	movs	r3, #1
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	2302      	movs	r3, #2
 800a236:	2200      	movs	r2, #0
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f002 fd84 	bl	800cd46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af04      	add	r7, sp, #16
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4611      	mov	r1, r2
 800a254:	461a      	mov	r2, r3
 800a256:	460b      	mov	r3, r1
 800a258:	80fb      	strh	r3, [r7, #6]
 800a25a:	4613      	mov	r3, r2
 800a25c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a25e:	7979      	ldrb	r1, [r7, #5]
 800a260:	2300      	movs	r3, #0
 800a262:	9303      	str	r3, [sp, #12]
 800a264:	88fb      	ldrh	r3, [r7, #6]
 800a266:	9302      	str	r3, [sp, #8]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	9301      	str	r3, [sp, #4]
 800a26c:	2301      	movs	r3, #1
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	2302      	movs	r3, #2
 800a272:	2201      	movs	r2, #1
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f002 fd66 	bl	800cd46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af04      	add	r7, sp, #16
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	4608      	mov	r0, r1
 800a28e:	4611      	mov	r1, r2
 800a290:	461a      	mov	r2, r3
 800a292:	4603      	mov	r3, r0
 800a294:	70fb      	strb	r3, [r7, #3]
 800a296:	460b      	mov	r3, r1
 800a298:	70bb      	strb	r3, [r7, #2]
 800a29a:	4613      	mov	r3, r2
 800a29c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a29e:	7878      	ldrb	r0, [r7, #1]
 800a2a0:	78ba      	ldrb	r2, [r7, #2]
 800a2a2:	78f9      	ldrb	r1, [r7, #3]
 800a2a4:	8b3b      	ldrh	r3, [r7, #24]
 800a2a6:	9302      	str	r3, [sp, #8]
 800a2a8:	7d3b      	ldrb	r3, [r7, #20]
 800a2aa:	9301      	str	r3, [sp, #4]
 800a2ac:	7c3b      	ldrb	r3, [r7, #16]
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f002 fcf9 	bl	800ccaa <USBH_LL_OpenPipe>

  return USBH_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f002 fd18 	bl	800cd08 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f836 	bl	800a360 <USBH_GetFreePipe>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a2f8:	89fb      	ldrh	r3, [r7, #14]
 800a2fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d00a      	beq.n	800a318 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	89fb      	ldrh	r3, [r7, #14]
 800a306:	f003 030f 	and.w	r3, r3, #15
 800a30a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a30e:	6879      	ldr	r1, [r7, #4]
 800a310:	33e0      	adds	r3, #224	; 0xe0
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a318:	89fb      	ldrh	r3, [r7, #14]
 800a31a:	b2db      	uxtb	r3, r3
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	2b0f      	cmp	r3, #15
 800a334:	d80d      	bhi.n	800a352 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	33e0      	adds	r3, #224	; 0xe0
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a348:	6879      	ldr	r1, [r7, #4]
 800a34a:	33e0      	adds	r3, #224	; 0xe0
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	440b      	add	r3, r1
 800a350:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
 800a370:	e00f      	b.n	800a392 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a372:	7bfb      	ldrb	r3, [r7, #15]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	33e0      	adds	r3, #224	; 0xe0
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	4413      	add	r3, r2
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d102      	bne.n	800a38c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	e007      	b.n	800a39c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	3301      	adds	r3, #1
 800a390:	73fb      	strb	r3, [r7, #15]
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	2b0f      	cmp	r3, #15
 800a396:	d9ec      	bls.n	800a372 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a398:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a3b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3ba:	2b84      	cmp	r3, #132	; 0x84
 800a3bc:	d005      	beq.n	800a3ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a3be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3303      	adds	r3, #3
 800a3c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3de:	f3ef 8305 	mrs	r3, IPSR
 800a3e2:	607b      	str	r3, [r7, #4]
  return(result);
 800a3e4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	bf14      	ite	ne
 800a3ea:	2301      	movne	r3, #1
 800a3ec:	2300      	moveq	r3, #0
 800a3ee:	b2db      	uxtb	r3, r3
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a400:	f001 f90a 	bl	800b618 <vTaskStartScheduler>
  
  return osOK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	bd80      	pop	{r7, pc}

0800a40a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a40a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a40c:	b089      	sub	sp, #36	; 0x24
 800a40e:	af04      	add	r7, sp, #16
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d020      	beq.n	800a45e <osThreadCreate+0x54>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d01c      	beq.n	800a45e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685c      	ldr	r4, [r3, #4]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681d      	ldr	r5, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691e      	ldr	r6, [r3, #16]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a436:	4618      	mov	r0, r3
 800a438:	f7ff ffb6 	bl	800a3a8 <makeFreeRtosPriority>
 800a43c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a446:	9202      	str	r2, [sp, #8]
 800a448:	9301      	str	r3, [sp, #4]
 800a44a:	9100      	str	r1, [sp, #0]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	4632      	mov	r2, r6
 800a450:	4629      	mov	r1, r5
 800a452:	4620      	mov	r0, r4
 800a454:	f000 ff0e 	bl	800b274 <xTaskCreateStatic>
 800a458:	4603      	mov	r3, r0
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	e01c      	b.n	800a498 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685c      	ldr	r4, [r3, #4]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a46a:	b29e      	uxth	r6, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff ff98 	bl	800a3a8 <makeFreeRtosPriority>
 800a478:	4602      	mov	r2, r0
 800a47a:	f107 030c 	add.w	r3, r7, #12
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	9200      	str	r2, [sp, #0]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	4632      	mov	r2, r6
 800a486:	4629      	mov	r1, r5
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 ff50 	bl	800b32e <xTaskCreate>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b01      	cmp	r3, #1
 800a492:	d001      	beq.n	800a498 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a494:	2300      	movs	r3, #0
 800a496:	e000      	b.n	800a49a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a498:	68fb      	ldr	r3, [r7, #12]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <osDelay+0x16>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	e000      	b.n	800a4ba <osDelay+0x18>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f001 f878 	bl	800b5b0 <vTaskDelay>
  
  return osOK;
 800a4c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a4ca:	b590      	push	{r4, r7, lr}
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	af02      	add	r7, sp, #8
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d011      	beq.n	800a500 <osMessageCreate+0x36>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00d      	beq.n	800a500 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6818      	ldr	r0, [r3, #0]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6859      	ldr	r1, [r3, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	2400      	movs	r4, #0
 800a4f6:	9400      	str	r4, [sp, #0]
 800a4f8:	f000 f9e0 	bl	800a8bc <xQueueGenericCreateStatic>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	e008      	b.n	800a512 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	4619      	mov	r1, r3
 800a50c:	f000 fa4e 	bl	800a9ac <xQueueGenericCreate>
 800a510:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	bd90      	pop	{r4, r7, pc}
	...

0800a51c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a528:	2300      	movs	r3, #0
 800a52a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <osMessagePut+0x1e>
    ticks = 1;
 800a536:	2301      	movs	r3, #1
 800a538:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a53a:	f7ff ff4d 	bl	800a3d8 <inHandlerMode>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d018      	beq.n	800a576 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a544:	f107 0210 	add.w	r2, r7, #16
 800a548:	f107 0108 	add.w	r1, r7, #8
 800a54c:	2300      	movs	r3, #0
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 fb84 	bl	800ac5c <xQueueGenericSendFromISR>
 800a554:	4603      	mov	r3, r0
 800a556:	2b01      	cmp	r3, #1
 800a558:	d001      	beq.n	800a55e <osMessagePut+0x42>
      return osErrorOS;
 800a55a:	23ff      	movs	r3, #255	; 0xff
 800a55c:	e018      	b.n	800a590 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d014      	beq.n	800a58e <osMessagePut+0x72>
 800a564:	4b0c      	ldr	r3, [pc, #48]	; (800a598 <osMessagePut+0x7c>)
 800a566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	e00b      	b.n	800a58e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a576:	f107 0108 	add.w	r1, r7, #8
 800a57a:	2300      	movs	r3, #0
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 fa6e 	bl	800aa60 <xQueueGenericSend>
 800a584:	4603      	mov	r3, r0
 800a586:	2b01      	cmp	r3, #1
 800a588:	d001      	beq.n	800a58e <osMessagePut+0x72>
      return osErrorOS;
 800a58a:	23ff      	movs	r3, #255	; 0xff
 800a58c:	e000      	b.n	800a590 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a59c:	b590      	push	{r4, r7, lr}
 800a59e:	b08b      	sub	sp, #44	; 0x2c
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10a      	bne.n	800a5cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a5b6:	2380      	movs	r3, #128	; 0x80
 800a5b8:	617b      	str	r3, [r7, #20]
    return event;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	461c      	mov	r4, r3
 800a5be:	f107 0314 	add.w	r3, r7, #20
 800a5c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a5c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a5ca:	e054      	b.n	800a676 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5da:	d103      	bne.n	800a5e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5e2:	e009      	b.n	800a5f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d006      	beq.n	800a5f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <osMessageGet+0x5c>
      ticks = 1;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a5f8:	f7ff feee 	bl	800a3d8 <inHandlerMode>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d01c      	beq.n	800a63c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a602:	f107 0220 	add.w	r2, r7, #32
 800a606:	f107 0314 	add.w	r3, r7, #20
 800a60a:	3304      	adds	r3, #4
 800a60c:	4619      	mov	r1, r3
 800a60e:	68b8      	ldr	r0, [r7, #8]
 800a610:	f000 fca0 	bl	800af54 <xQueueReceiveFromISR>
 800a614:	4603      	mov	r3, r0
 800a616:	2b01      	cmp	r3, #1
 800a618:	d102      	bne.n	800a620 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a61a:	2310      	movs	r3, #16
 800a61c:	617b      	str	r3, [r7, #20]
 800a61e:	e001      	b.n	800a624 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a620:	2300      	movs	r3, #0
 800a622:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d01d      	beq.n	800a666 <osMessageGet+0xca>
 800a62a:	4b15      	ldr	r3, [pc, #84]	; (800a680 <osMessageGet+0xe4>)
 800a62c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	e014      	b.n	800a666 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a63c:	f107 0314 	add.w	r3, r7, #20
 800a640:	3304      	adds	r3, #4
 800a642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a644:	4619      	mov	r1, r3
 800a646:	68b8      	ldr	r0, [r7, #8]
 800a648:	f000 fba4 	bl	800ad94 <xQueueReceive>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d102      	bne.n	800a658 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a652:	2310      	movs	r3, #16
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	e006      	b.n	800a666 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <osMessageGet+0xc6>
 800a65e:	2300      	movs	r3, #0
 800a660:	e000      	b.n	800a664 <osMessageGet+0xc8>
 800a662:	2340      	movs	r3, #64	; 0x40
 800a664:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	461c      	mov	r4, r3
 800a66a:	f107 0314 	add.w	r3, r7, #20
 800a66e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	372c      	adds	r7, #44	; 0x2c
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd90      	pop	{r4, r7, pc}
 800a67e:	bf00      	nop
 800a680:	e000ed04 	.word	0xe000ed04

0800a684 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f103 0208 	add.w	r2, r3, #8
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f04f 32ff 	mov.w	r2, #4294967295
 800a69c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f103 0208 	add.w	r2, r3, #8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f103 0208 	add.w	r2, r3, #8
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6d2:	bf00      	nop
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b085      	sub	sp, #20
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	601a      	str	r2, [r3, #0]
}
 800a71a:	bf00      	nop
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a726:	b480      	push	{r7}
 800a728:	b085      	sub	sp, #20
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73c:	d103      	bne.n	800a746 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	e00c      	b.n	800a760 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3308      	adds	r3, #8
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	e002      	b.n	800a754 <vListInsert+0x2e>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d2f6      	bcs.n	800a74e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	601a      	str	r2, [r3, #0]
}
 800a78c:	bf00      	nop
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	6892      	ldr	r2, [r2, #8]
 800a7ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	6852      	ldr	r2, [r2, #4]
 800a7b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d103      	bne.n	800a7cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689a      	ldr	r2, [r3, #8]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	1e5a      	subs	r2, r3, #1
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10a      	bne.n	800a816 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a816:	f001 fd5d 	bl	800c2d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a822:	68f9      	ldr	r1, [r7, #12]
 800a824:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a826:	fb01 f303 	mul.w	r3, r1, r3
 800a82a:	441a      	add	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a846:	3b01      	subs	r3, #1
 800a848:	68f9      	ldr	r1, [r7, #12]
 800a84a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a84c:	fb01 f303 	mul.w	r3, r1, r3
 800a850:	441a      	add	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	22ff      	movs	r2, #255	; 0xff
 800a85a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	22ff      	movs	r2, #255	; 0xff
 800a862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d114      	bne.n	800a896 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d01a      	beq.n	800a8aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	3310      	adds	r3, #16
 800a878:	4618      	mov	r0, r3
 800a87a:	f001 f933 	bl	800bae4 <xTaskRemoveFromEventList>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d012      	beq.n	800a8aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a884:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <xQueueGenericReset+0xcc>)
 800a886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	e009      	b.n	800a8aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3310      	adds	r3, #16
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff fef2 	bl	800a684 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3324      	adds	r3, #36	; 0x24
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff feed 	bl	800a684 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8aa:	f001 fd43 	bl	800c334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8ae:	2301      	movs	r3, #1
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08e      	sub	sp, #56	; 0x38
 800a8c0:	af02      	add	r7, sp, #8
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <xQueueGenericCreateStatic+0x52>
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <xQueueGenericCreateStatic+0x56>
 800a90e:	2301      	movs	r3, #1
 800a910:	e000      	b.n	800a914 <xQueueGenericCreateStatic+0x58>
 800a912:	2300      	movs	r3, #0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10a      	bne.n	800a92e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	623b      	str	r3, [r7, #32]
}
 800a92a:	bf00      	nop
 800a92c:	e7fe      	b.n	800a92c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d102      	bne.n	800a93a <xQueueGenericCreateStatic+0x7e>
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <xQueueGenericCreateStatic+0x82>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e000      	b.n	800a940 <xQueueGenericCreateStatic+0x84>
 800a93e:	2300      	movs	r3, #0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10a      	bne.n	800a95a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	61fb      	str	r3, [r7, #28]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a95a:	2348      	movs	r3, #72	; 0x48
 800a95c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b48      	cmp	r3, #72	; 0x48
 800a962:	d00a      	beq.n	800a97a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	61bb      	str	r3, [r7, #24]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a97a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a98e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	4613      	mov	r3, r2
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f83f 	bl	800aa20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3730      	adds	r7, #48	; 0x30
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	613b      	str	r3, [r7, #16]
}
 800a9d2:	bf00      	nop
 800a9d4:	e7fe      	b.n	800a9d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	fb02 f303 	mul.w	r3, r2, r3
 800a9de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	3348      	adds	r3, #72	; 0x48
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f001 fd97 	bl	800c518 <pvPortMalloc>
 800a9ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d011      	beq.n	800aa16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a9f2:	69bb      	ldr	r3, [r7, #24]
 800a9f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	3348      	adds	r3, #72	; 0x48
 800a9fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa04:	79fa      	ldrb	r2, [r7, #7]
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	68b9      	ldr	r1, [r7, #8]
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 f805 	bl	800aa20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa16:	69bb      	ldr	r3, [r7, #24]
	}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3720      	adds	r7, #32
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d103      	bne.n	800aa3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	e002      	b.n	800aa42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa4e:	2101      	movs	r1, #1
 800aa50:	69b8      	ldr	r0, [r7, #24]
 800aa52:	f7ff fecb 	bl	800a7ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa56:	bf00      	nop
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08e      	sub	sp, #56	; 0x38
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10a      	bne.n	800aa92 <xQueueGenericSend+0x32>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d103      	bne.n	800aaa0 <xQueueGenericSend+0x40>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d101      	bne.n	800aaa4 <xQueueGenericSend+0x44>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e000      	b.n	800aaa6 <xQueueGenericSend+0x46>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10a      	bne.n	800aac0 <xQueueGenericSend+0x60>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aabc:	bf00      	nop
 800aabe:	e7fe      	b.n	800aabe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d103      	bne.n	800aace <xQueueGenericSend+0x6e>
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d101      	bne.n	800aad2 <xQueueGenericSend+0x72>
 800aace:	2301      	movs	r3, #1
 800aad0:	e000      	b.n	800aad4 <xQueueGenericSend+0x74>
 800aad2:	2300      	movs	r3, #0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <xQueueGenericSend+0x8e>
	__asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	623b      	str	r3, [r7, #32]
}
 800aaea:	bf00      	nop
 800aaec:	e7fe      	b.n	800aaec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaee:	f001 f9b7 	bl	800be60 <xTaskGetSchedulerState>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d102      	bne.n	800aafe <xQueueGenericSend+0x9e>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <xQueueGenericSend+0xa2>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e000      	b.n	800ab04 <xQueueGenericSend+0xa4>
 800ab02:	2300      	movs	r3, #0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10a      	bne.n	800ab1e <xQueueGenericSend+0xbe>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	61fb      	str	r3, [r7, #28]
}
 800ab1a:	bf00      	nop
 800ab1c:	e7fe      	b.n	800ab1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab1e:	f001 fbd9 	bl	800c2d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d302      	bcc.n	800ab34 <xQueueGenericSend+0xd4>
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d129      	bne.n	800ab88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	68b9      	ldr	r1, [r7, #8]
 800ab38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab3a:	f000 fa8b 	bl	800b054 <prvCopyDataToQueue>
 800ab3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d010      	beq.n	800ab6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	3324      	adds	r3, #36	; 0x24
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 ffc9 	bl	800bae4 <xTaskRemoveFromEventList>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d013      	beq.n	800ab80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab58:	4b3f      	ldr	r3, [pc, #252]	; (800ac58 <xQueueGenericSend+0x1f8>)
 800ab5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	e00a      	b.n	800ab80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d007      	beq.n	800ab80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab70:	4b39      	ldr	r3, [pc, #228]	; (800ac58 <xQueueGenericSend+0x1f8>)
 800ab72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab80:	f001 fbd8 	bl	800c334 <vPortExitCritical>
				return pdPASS;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e063      	b.n	800ac50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d103      	bne.n	800ab96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab8e:	f001 fbd1 	bl	800c334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	e05c      	b.n	800ac50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d106      	bne.n	800abaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab9c:	f107 0314 	add.w	r3, r7, #20
 800aba0:	4618      	mov	r0, r3
 800aba2:	f001 f801 	bl	800bba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aba6:	2301      	movs	r3, #1
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abaa:	f001 fbc3 	bl	800c334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abae:	f000 fd93 	bl	800b6d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abb2:	f001 fb8f 	bl	800c2d4 <vPortEnterCritical>
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abbc:	b25b      	sxtb	r3, r3
 800abbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc2:	d103      	bne.n	800abcc <xQueueGenericSend+0x16c>
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abd2:	b25b      	sxtb	r3, r3
 800abd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd8:	d103      	bne.n	800abe2 <xQueueGenericSend+0x182>
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abe2:	f001 fba7 	bl	800c334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abe6:	1d3a      	adds	r2, r7, #4
 800abe8:	f107 0314 	add.w	r3, r7, #20
 800abec:	4611      	mov	r1, r2
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 fff0 	bl	800bbd4 <xTaskCheckForTimeOut>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d124      	bne.n	800ac44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abfc:	f000 fb22 	bl	800b244 <prvIsQueueFull>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d018      	beq.n	800ac38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	3310      	adds	r3, #16
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 ff44 	bl	800ba9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac16:	f000 faad 	bl	800b174 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac1a:	f000 fd6b 	bl	800b6f4 <xTaskResumeAll>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f47f af7c 	bne.w	800ab1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac26:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <xQueueGenericSend+0x1f8>)
 800ac28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	e772      	b.n	800ab1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac3a:	f000 fa9b 	bl	800b174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac3e:	f000 fd59 	bl	800b6f4 <xTaskResumeAll>
 800ac42:	e76c      	b.n	800ab1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac46:	f000 fa95 	bl	800b174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac4a:	f000 fd53 	bl	800b6f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3738      	adds	r7, #56	; 0x38
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	e000ed04 	.word	0xe000ed04

0800ac5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b090      	sub	sp, #64	; 0x40
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <xQueueGenericSendFromISR+0x3c>
 800ac90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <xQueueGenericSendFromISR+0x40>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e000      	b.n	800ac9e <xQueueGenericSendFromISR+0x42>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10a      	bne.n	800acb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acb4:	bf00      	nop
 800acb6:	e7fe      	b.n	800acb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d103      	bne.n	800acc6 <xQueueGenericSendFromISR+0x6a>
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d101      	bne.n	800acca <xQueueGenericSendFromISR+0x6e>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e000      	b.n	800accc <xQueueGenericSendFromISR+0x70>
 800acca:	2300      	movs	r3, #0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10a      	bne.n	800ace6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	623b      	str	r3, [r7, #32]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ace6:	f001 fbd7 	bl	800c498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acea:	f3ef 8211 	mrs	r2, BASEPRI
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	61fa      	str	r2, [r7, #28]
 800ad00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d302      	bcc.n	800ad18 <xQueueGenericSendFromISR+0xbc>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d12f      	bne.n	800ad78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad2e:	f000 f991 	bl	800b054 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3a:	d112      	bne.n	800ad62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d016      	beq.n	800ad72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	3324      	adds	r3, #36	; 0x24
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f000 fecb 	bl	800bae4 <xTaskRemoveFromEventList>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00e      	beq.n	800ad72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00b      	beq.n	800ad72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	e007      	b.n	800ad72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad66:	3301      	adds	r3, #1
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	b25a      	sxtb	r2, r3
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad72:	2301      	movs	r3, #1
 800ad74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ad76:	e001      	b.n	800ad7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3740      	adds	r7, #64	; 0x40
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08c      	sub	sp, #48	; 0x30
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10a      	bne.n	800adc4 <xQueueReceive+0x30>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	623b      	str	r3, [r7, #32]
}
 800adc0:	bf00      	nop
 800adc2:	e7fe      	b.n	800adc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d103      	bne.n	800add2 <xQueueReceive+0x3e>
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <xQueueReceive+0x42>
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <xQueueReceive+0x44>
 800add6:	2300      	movs	r3, #0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <xQueueReceive+0x5e>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	61fb      	str	r3, [r7, #28]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adf2:	f001 f835 	bl	800be60 <xTaskGetSchedulerState>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d102      	bne.n	800ae02 <xQueueReceive+0x6e>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <xQueueReceive+0x72>
 800ae02:	2301      	movs	r3, #1
 800ae04:	e000      	b.n	800ae08 <xQueueReceive+0x74>
 800ae06:	2300      	movs	r3, #0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <xQueueReceive+0x8e>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	61bb      	str	r3, [r7, #24]
}
 800ae1e:	bf00      	nop
 800ae20:	e7fe      	b.n	800ae20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae22:	f001 fa57 	bl	800c2d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d01f      	beq.n	800ae72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae32:	68b9      	ldr	r1, [r7, #8]
 800ae34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae36:	f000 f977 	bl	800b128 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	1e5a      	subs	r2, r3, #1
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00f      	beq.n	800ae6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	3310      	adds	r3, #16
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 fe48 	bl	800bae4 <xTaskRemoveFromEventList>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d007      	beq.n	800ae6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae5a:	4b3d      	ldr	r3, [pc, #244]	; (800af50 <xQueueReceive+0x1bc>)
 800ae5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae6a:	f001 fa63 	bl	800c334 <vPortExitCritical>
				return pdPASS;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e069      	b.n	800af46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d103      	bne.n	800ae80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae78:	f001 fa5c 	bl	800c334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	e062      	b.n	800af46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d106      	bne.n	800ae94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae86:	f107 0310 	add.w	r3, r7, #16
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fe8c 	bl	800bba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae90:	2301      	movs	r3, #1
 800ae92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae94:	f001 fa4e 	bl	800c334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae98:	f000 fc1e 	bl	800b6d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae9c:	f001 fa1a 	bl	800c2d4 <vPortEnterCritical>
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeac:	d103      	bne.n	800aeb6 <xQueueReceive+0x122>
 800aeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aebc:	b25b      	sxtb	r3, r3
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec2:	d103      	bne.n	800aecc <xQueueReceive+0x138>
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aecc:	f001 fa32 	bl	800c334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aed0:	1d3a      	adds	r2, r7, #4
 800aed2:	f107 0310 	add.w	r3, r7, #16
 800aed6:	4611      	mov	r1, r2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 fe7b 	bl	800bbd4 <xTaskCheckForTimeOut>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d123      	bne.n	800af2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee6:	f000 f997 	bl	800b218 <prvIsQueueEmpty>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d017      	beq.n	800af20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	3324      	adds	r3, #36	; 0x24
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	4611      	mov	r1, r2
 800aef8:	4618      	mov	r0, r3
 800aefa:	f000 fdcf 	bl	800ba9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aefe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af00:	f000 f938 	bl	800b174 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af04:	f000 fbf6 	bl	800b6f4 <xTaskResumeAll>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d189      	bne.n	800ae22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800af0e:	4b10      	ldr	r3, [pc, #64]	; (800af50 <xQueueReceive+0x1bc>)
 800af10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	e780      	b.n	800ae22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800af20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af22:	f000 f927 	bl	800b174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af26:	f000 fbe5 	bl	800b6f4 <xTaskResumeAll>
 800af2a:	e77a      	b.n	800ae22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af2e:	f000 f921 	bl	800b174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af32:	f000 fbdf 	bl	800b6f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af38:	f000 f96e 	bl	800b218 <prvIsQueueEmpty>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f43f af6f 	beq.w	800ae22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af46:	4618      	mov	r0, r3
 800af48:	3730      	adds	r7, #48	; 0x30
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	e000ed04 	.word	0xe000ed04

0800af54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08e      	sub	sp, #56	; 0x38
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	623b      	str	r3, [r7, #32]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d103      	bne.n	800af8e <xQueueReceiveFromISR+0x3a>
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <xQueueReceiveFromISR+0x3e>
 800af8e:	2301      	movs	r3, #1
 800af90:	e000      	b.n	800af94 <xQueueReceiveFromISR+0x40>
 800af92:	2300      	movs	r3, #0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	61fb      	str	r3, [r7, #28]
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afae:	f001 fa73 	bl	800c498 <vPortValidateInterruptPriority>
	__asm volatile
 800afb2:	f3ef 8211 	mrs	r2, BASEPRI
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	61ba      	str	r2, [r7, #24]
 800afc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800afca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d02f      	beq.n	800b03a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afe8:	f000 f89e 	bl	800b128 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	1e5a      	subs	r2, r3, #1
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affc:	d112      	bne.n	800b024 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d016      	beq.n	800b034 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	3310      	adds	r3, #16
 800b00a:	4618      	mov	r0, r3
 800b00c:	f000 fd6a 	bl	800bae4 <xTaskRemoveFromEventList>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00e      	beq.n	800b034 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	e007      	b.n	800b034 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b028:	3301      	adds	r3, #1
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	b25a      	sxtb	r2, r3
 800b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b034:	2301      	movs	r3, #1
 800b036:	637b      	str	r3, [r7, #52]	; 0x34
 800b038:	e001      	b.n	800b03e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	637b      	str	r3, [r7, #52]	; 0x34
 800b03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b040:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f383 8811 	msr	BASEPRI, r3
}
 800b048:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3738      	adds	r7, #56	; 0x38
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b060:	2300      	movs	r3, #0
 800b062:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b068:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10d      	bne.n	800b08e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d14d      	bne.n	800b116 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 ff0c 	bl	800be9c <xTaskPriorityDisinherit>
 800b084:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	609a      	str	r2, [r3, #8]
 800b08c:	e043      	b.n	800b116 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d119      	bne.n	800b0c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6858      	ldr	r0, [r3, #4]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09c:	461a      	mov	r2, r3
 800b09e:	68b9      	ldr	r1, [r7, #8]
 800b0a0:	f001 ff6a 	bl	800cf78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	685a      	ldr	r2, [r3, #4]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ac:	441a      	add	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d32b      	bcc.n	800b116 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	605a      	str	r2, [r3, #4]
 800b0c6:	e026      	b.n	800b116 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	68d8      	ldr	r0, [r3, #12]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	f001 ff50 	bl	800cf78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e0:	425b      	negs	r3, r3
 800b0e2:	441a      	add	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	68da      	ldr	r2, [r3, #12]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d207      	bcs.n	800b104 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	689a      	ldr	r2, [r3, #8]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fc:	425b      	negs	r3, r3
 800b0fe:	441a      	add	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b02      	cmp	r3, #2
 800b108:	d105      	bne.n	800b116 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	3b01      	subs	r3, #1
 800b114:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b11e:	697b      	ldr	r3, [r7, #20]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	2b00      	cmp	r3, #0
 800b138:	d018      	beq.n	800b16c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68da      	ldr	r2, [r3, #12]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b142:	441a      	add	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	429a      	cmp	r2, r3
 800b152:	d303      	bcc.n	800b15c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68d9      	ldr	r1, [r3, #12]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b164:	461a      	mov	r2, r3
 800b166:	6838      	ldr	r0, [r7, #0]
 800b168:	f001 ff06 	bl	800cf78 <memcpy>
	}
}
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b17c:	f001 f8aa 	bl	800c2d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b186:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b188:	e011      	b.n	800b1ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d012      	beq.n	800b1b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	3324      	adds	r3, #36	; 0x24
 800b196:	4618      	mov	r0, r3
 800b198:	f000 fca4 	bl	800bae4 <xTaskRemoveFromEventList>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b1a2:	f000 fd79 	bl	800bc98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	dce9      	bgt.n	800b18a <prvUnlockQueue+0x16>
 800b1b6:	e000      	b.n	800b1ba <prvUnlockQueue+0x46>
					break;
 800b1b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	22ff      	movs	r2, #255	; 0xff
 800b1be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b1c2:	f001 f8b7 	bl	800c334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b1c6:	f001 f885 	bl	800c2d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1d2:	e011      	b.n	800b1f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d012      	beq.n	800b202 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3310      	adds	r3, #16
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 fc7f 	bl	800bae4 <xTaskRemoveFromEventList>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1ec:	f000 fd54 	bl	800bc98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1f0:	7bbb      	ldrb	r3, [r7, #14]
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dce9      	bgt.n	800b1d4 <prvUnlockQueue+0x60>
 800b200:	e000      	b.n	800b204 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b202:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	22ff      	movs	r2, #255	; 0xff
 800b208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b20c:	f001 f892 	bl	800c334 <vPortExitCritical>
}
 800b210:	bf00      	nop
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b220:	f001 f858 	bl	800c2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d102      	bne.n	800b232 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b22c:	2301      	movs	r3, #1
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	e001      	b.n	800b236 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b232:	2300      	movs	r3, #0
 800b234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b236:	f001 f87d 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800b23a:	68fb      	ldr	r3, [r7, #12]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b24c:	f001 f842 	bl	800c2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b258:	429a      	cmp	r2, r3
 800b25a:	d102      	bne.n	800b262 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b25c:	2301      	movs	r3, #1
 800b25e:	60fb      	str	r3, [r7, #12]
 800b260:	e001      	b.n	800b266 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b262:	2300      	movs	r3, #0
 800b264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b266:	f001 f865 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800b26a:	68fb      	ldr	r3, [r7, #12]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08e      	sub	sp, #56	; 0x38
 800b278:	af04      	add	r7, sp, #16
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10a      	bne.n	800b29e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	623b      	str	r3, [r7, #32]
}
 800b29a:	bf00      	nop
 800b29c:	e7fe      	b.n	800b29c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10a      	bne.n	800b2ba <xTaskCreateStatic+0x46>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	61fb      	str	r3, [r7, #28]
}
 800b2b6:	bf00      	nop
 800b2b8:	e7fe      	b.n	800b2b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2ba:	2358      	movs	r3, #88	; 0x58
 800b2bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	2b58      	cmp	r3, #88	; 0x58
 800b2c2:	d00a      	beq.n	800b2da <xTaskCreateStatic+0x66>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	61bb      	str	r3, [r7, #24]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d01e      	beq.n	800b320 <xTaskCreateStatic+0xac>
 800b2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01b      	beq.n	800b320 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9303      	str	r3, [sp, #12]
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	9302      	str	r3, [sp, #8]
 800b302:	f107 0314 	add.w	r3, r7, #20
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	68b9      	ldr	r1, [r7, #8]
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 f850 	bl	800b3b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b31a:	f000 f8df 	bl	800b4dc <prvAddNewTaskToReadyList>
 800b31e:	e001      	b.n	800b324 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b320:	2300      	movs	r3, #0
 800b322:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b324:	697b      	ldr	r3, [r7, #20]
	}
 800b326:	4618      	mov	r0, r3
 800b328:	3728      	adds	r7, #40	; 0x28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b08c      	sub	sp, #48	; 0x30
 800b332:	af04      	add	r7, sp, #16
 800b334:	60f8      	str	r0, [r7, #12]
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	603b      	str	r3, [r7, #0]
 800b33a:	4613      	mov	r3, r2
 800b33c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b33e:	88fb      	ldrh	r3, [r7, #6]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4618      	mov	r0, r3
 800b344:	f001 f8e8 	bl	800c518 <pvPortMalloc>
 800b348:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00e      	beq.n	800b36e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b350:	2058      	movs	r0, #88	; 0x58
 800b352:	f001 f8e1 	bl	800c518 <pvPortMalloc>
 800b356:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	631a      	str	r2, [r3, #48]	; 0x30
 800b364:	e005      	b.n	800b372 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b366:	6978      	ldr	r0, [r7, #20]
 800b368:	f001 f9a6 	bl	800c6b8 <vPortFree>
 800b36c:	e001      	b.n	800b372 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d017      	beq.n	800b3a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b380:	88fa      	ldrh	r2, [r7, #6]
 800b382:	2300      	movs	r3, #0
 800b384:	9303      	str	r3, [sp, #12]
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	9302      	str	r3, [sp, #8]
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	68b9      	ldr	r1, [r7, #8]
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f000 f80e 	bl	800b3b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b39c:	69f8      	ldr	r0, [r7, #28]
 800b39e:	f000 f89d 	bl	800b4dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	61bb      	str	r3, [r7, #24]
 800b3a6:	e002      	b.n	800b3ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3ae:	69bb      	ldr	r3, [r7, #24]
	}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3720      	adds	r7, #32
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b088      	sub	sp, #32
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	21a5      	movs	r1, #165	; 0xa5
 800b3d2:	f001 fddf 	bl	800cf94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	f023 0307 	bic.w	r3, r3, #7
 800b3ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	f003 0307 	and.w	r3, r3, #7
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	617b      	str	r3, [r7, #20]
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d01f      	beq.n	800b456 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b416:	2300      	movs	r3, #0
 800b418:	61fb      	str	r3, [r7, #28]
 800b41a:	e012      	b.n	800b442 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	4413      	add	r3, r2
 800b422:	7819      	ldrb	r1, [r3, #0]
 800b424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	4413      	add	r3, r2
 800b42a:	3334      	adds	r3, #52	; 0x34
 800b42c:	460a      	mov	r2, r1
 800b42e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	4413      	add	r3, r2
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d006      	beq.n	800b44a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	3301      	adds	r3, #1
 800b440:	61fb      	str	r3, [r7, #28]
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	2b0f      	cmp	r3, #15
 800b446:	d9e9      	bls.n	800b41c <prvInitialiseNewTask+0x64>
 800b448:	e000      	b.n	800b44c <prvInitialiseNewTask+0x94>
			{
				break;
 800b44a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b454:	e003      	b.n	800b45e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	2b06      	cmp	r3, #6
 800b462:	d901      	bls.n	800b468 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b464:	2306      	movs	r3, #6
 800b466:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b46c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b472:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b476:	2200      	movs	r2, #0
 800b478:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	3304      	adds	r3, #4
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff f920 	bl	800a6c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	3318      	adds	r3, #24
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff f91b 	bl	800a6c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b492:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b496:	f1c3 0207 	rsb	r2, r3, #7
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4b8:	683a      	ldr	r2, [r7, #0]
 800b4ba:	68f9      	ldr	r1, [r7, #12]
 800b4bc:	69b8      	ldr	r0, [r7, #24]
 800b4be:	f000 fdd9 	bl	800c074 <pxPortInitialiseStack>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4d4:	bf00      	nop
 800b4d6:	3720      	adds	r7, #32
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4e4:	f000 fef6 	bl	800c2d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4e8:	4b2a      	ldr	r3, [pc, #168]	; (800b594 <prvAddNewTaskToReadyList+0xb8>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	4a29      	ldr	r2, [pc, #164]	; (800b594 <prvAddNewTaskToReadyList+0xb8>)
 800b4f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4f2:	4b29      	ldr	r3, [pc, #164]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d109      	bne.n	800b50e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4fa:	4a27      	ldr	r2, [pc, #156]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b500:	4b24      	ldr	r3, [pc, #144]	; (800b594 <prvAddNewTaskToReadyList+0xb8>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d110      	bne.n	800b52a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b508:	f000 fbec 	bl	800bce4 <prvInitialiseTaskLists>
 800b50c:	e00d      	b.n	800b52a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b50e:	4b23      	ldr	r3, [pc, #140]	; (800b59c <prvAddNewTaskToReadyList+0xc0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d109      	bne.n	800b52a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b516:	4b20      	ldr	r3, [pc, #128]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	429a      	cmp	r2, r3
 800b522:	d802      	bhi.n	800b52a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b524:	4a1c      	ldr	r2, [pc, #112]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b52a:	4b1d      	ldr	r3, [pc, #116]	; (800b5a0 <prvAddNewTaskToReadyList+0xc4>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3301      	adds	r3, #1
 800b530:	4a1b      	ldr	r2, [pc, #108]	; (800b5a0 <prvAddNewTaskToReadyList+0xc4>)
 800b532:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	2201      	movs	r2, #1
 800b53a:	409a      	lsls	r2, r3
 800b53c:	4b19      	ldr	r3, [pc, #100]	; (800b5a4 <prvAddNewTaskToReadyList+0xc8>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4313      	orrs	r3, r2
 800b542:	4a18      	ldr	r2, [pc, #96]	; (800b5a4 <prvAddNewTaskToReadyList+0xc8>)
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4a15      	ldr	r2, [pc, #84]	; (800b5a8 <prvAddNewTaskToReadyList+0xcc>)
 800b554:	441a      	add	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3304      	adds	r3, #4
 800b55a:	4619      	mov	r1, r3
 800b55c:	4610      	mov	r0, r2
 800b55e:	f7ff f8be 	bl	800a6de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b562:	f000 fee7 	bl	800c334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b566:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <prvAddNewTaskToReadyList+0xc0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00e      	beq.n	800b58c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b56e:	4b0a      	ldr	r3, [pc, #40]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	429a      	cmp	r2, r3
 800b57a:	d207      	bcs.n	800b58c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b57c:	4b0b      	ldr	r3, [pc, #44]	; (800b5ac <prvAddNewTaskToReadyList+0xd0>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	200006c0 	.word	0x200006c0
 800b598:	200005c0 	.word	0x200005c0
 800b59c:	200006cc 	.word	0x200006cc
 800b5a0:	200006dc 	.word	0x200006dc
 800b5a4:	200006c8 	.word	0x200006c8
 800b5a8:	200005c4 	.word	0x200005c4
 800b5ac:	e000ed04 	.word	0xe000ed04

0800b5b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d017      	beq.n	800b5f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5c2:	4b13      	ldr	r3, [pc, #76]	; (800b610 <vTaskDelay+0x60>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <vTaskDelay+0x30>
	__asm volatile
 800b5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	60bb      	str	r3, [r7, #8]
}
 800b5dc:	bf00      	nop
 800b5de:	e7fe      	b.n	800b5de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5e0:	f000 f87a 	bl	800b6d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fcde 	bl	800bfa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5ec:	f000 f882 	bl	800b6f4 <xTaskResumeAll>
 800b5f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d107      	bne.n	800b608 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5f8:	4b06      	ldr	r3, [pc, #24]	; (800b614 <vTaskDelay+0x64>)
 800b5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b608:	bf00      	nop
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	200006e8 	.word	0x200006e8
 800b614:	e000ed04 	.word	0xe000ed04

0800b618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	; 0x28
 800b61c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b622:	2300      	movs	r3, #0
 800b624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b626:	463a      	mov	r2, r7
 800b628:	1d39      	adds	r1, r7, #4
 800b62a:	f107 0308 	add.w	r3, r7, #8
 800b62e:	4618      	mov	r0, r3
 800b630:	f7f4 ff7a 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	9202      	str	r2, [sp, #8]
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	2300      	movs	r3, #0
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	2300      	movs	r3, #0
 800b644:	460a      	mov	r2, r1
 800b646:	491e      	ldr	r1, [pc, #120]	; (800b6c0 <vTaskStartScheduler+0xa8>)
 800b648:	481e      	ldr	r0, [pc, #120]	; (800b6c4 <vTaskStartScheduler+0xac>)
 800b64a:	f7ff fe13 	bl	800b274 <xTaskCreateStatic>
 800b64e:	4603      	mov	r3, r0
 800b650:	4a1d      	ldr	r2, [pc, #116]	; (800b6c8 <vTaskStartScheduler+0xb0>)
 800b652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b654:	4b1c      	ldr	r3, [pc, #112]	; (800b6c8 <vTaskStartScheduler+0xb0>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b65c:	2301      	movs	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
 800b660:	e001      	b.n	800b666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b662:	2300      	movs	r3, #0
 800b664:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d116      	bne.n	800b69a <vTaskStartScheduler+0x82>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	613b      	str	r3, [r7, #16]
}
 800b67e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b680:	4b12      	ldr	r3, [pc, #72]	; (800b6cc <vTaskStartScheduler+0xb4>)
 800b682:	f04f 32ff 	mov.w	r2, #4294967295
 800b686:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b688:	4b11      	ldr	r3, [pc, #68]	; (800b6d0 <vTaskStartScheduler+0xb8>)
 800b68a:	2201      	movs	r2, #1
 800b68c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b68e:	4b11      	ldr	r3, [pc, #68]	; (800b6d4 <vTaskStartScheduler+0xbc>)
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b694:	f000 fd7c 	bl	800c190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b698:	e00e      	b.n	800b6b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a0:	d10a      	bne.n	800b6b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	60fb      	str	r3, [r7, #12]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <vTaskStartScheduler+0x9e>
}
 800b6b8:	bf00      	nop
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	0800d23c 	.word	0x0800d23c
 800b6c4:	0800bcb1 	.word	0x0800bcb1
 800b6c8:	200006e4 	.word	0x200006e4
 800b6cc:	200006e0 	.word	0x200006e0
 800b6d0:	200006cc 	.word	0x200006cc
 800b6d4:	200006c4 	.word	0x200006c4

0800b6d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6d8:	b480      	push	{r7}
 800b6da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b6dc:	4b04      	ldr	r3, [pc, #16]	; (800b6f0 <vTaskSuspendAll+0x18>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	4a03      	ldr	r2, [pc, #12]	; (800b6f0 <vTaskSuspendAll+0x18>)
 800b6e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6e6:	bf00      	nop
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	200006e8 	.word	0x200006e8

0800b6f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6fe:	2300      	movs	r3, #0
 800b700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b702:	4b41      	ldr	r3, [pc, #260]	; (800b808 <xTaskResumeAll+0x114>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10a      	bne.n	800b720 <xTaskResumeAll+0x2c>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	603b      	str	r3, [r7, #0]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b720:	f000 fdd8 	bl	800c2d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b724:	4b38      	ldr	r3, [pc, #224]	; (800b808 <xTaskResumeAll+0x114>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3b01      	subs	r3, #1
 800b72a:	4a37      	ldr	r2, [pc, #220]	; (800b808 <xTaskResumeAll+0x114>)
 800b72c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b72e:	4b36      	ldr	r3, [pc, #216]	; (800b808 <xTaskResumeAll+0x114>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d161      	bne.n	800b7fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b736:	4b35      	ldr	r3, [pc, #212]	; (800b80c <xTaskResumeAll+0x118>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d05d      	beq.n	800b7fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b73e:	e02e      	b.n	800b79e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b740:	4b33      	ldr	r3, [pc, #204]	; (800b810 <xTaskResumeAll+0x11c>)
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	3318      	adds	r3, #24
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff f823 	bl	800a798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3304      	adds	r3, #4
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff f81e 	bl	800a798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	2201      	movs	r2, #1
 800b762:	409a      	lsls	r2, r3
 800b764:	4b2b      	ldr	r3, [pc, #172]	; (800b814 <xTaskResumeAll+0x120>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4313      	orrs	r3, r2
 800b76a:	4a2a      	ldr	r2, [pc, #168]	; (800b814 <xTaskResumeAll+0x120>)
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b772:	4613      	mov	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4413      	add	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4a27      	ldr	r2, [pc, #156]	; (800b818 <xTaskResumeAll+0x124>)
 800b77c:	441a      	add	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3304      	adds	r3, #4
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f7fe ffaa 	bl	800a6de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78e:	4b23      	ldr	r3, [pc, #140]	; (800b81c <xTaskResumeAll+0x128>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	429a      	cmp	r2, r3
 800b796:	d302      	bcc.n	800b79e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b798:	4b21      	ldr	r3, [pc, #132]	; (800b820 <xTaskResumeAll+0x12c>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b79e:	4b1c      	ldr	r3, [pc, #112]	; (800b810 <xTaskResumeAll+0x11c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1cc      	bne.n	800b740 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7ac:	f000 fb38 	bl	800be20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7b0:	4b1c      	ldr	r3, [pc, #112]	; (800b824 <xTaskResumeAll+0x130>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d010      	beq.n	800b7de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7bc:	f000 f836 	bl	800b82c <xTaskIncrementTick>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b7c6:	4b16      	ldr	r3, [pc, #88]	; (800b820 <xTaskResumeAll+0x12c>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1f1      	bne.n	800b7bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b7d8:	4b12      	ldr	r3, [pc, #72]	; (800b824 <xTaskResumeAll+0x130>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7de:	4b10      	ldr	r3, [pc, #64]	; (800b820 <xTaskResumeAll+0x12c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d009      	beq.n	800b7fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7ea:	4b0f      	ldr	r3, [pc, #60]	; (800b828 <xTaskResumeAll+0x134>)
 800b7ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7f0:	601a      	str	r2, [r3, #0]
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7fa:	f000 fd9b 	bl	800c334 <vPortExitCritical>

	return xAlreadyYielded;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	200006e8 	.word	0x200006e8
 800b80c:	200006c0 	.word	0x200006c0
 800b810:	20000680 	.word	0x20000680
 800b814:	200006c8 	.word	0x200006c8
 800b818:	200005c4 	.word	0x200005c4
 800b81c:	200005c0 	.word	0x200005c0
 800b820:	200006d4 	.word	0x200006d4
 800b824:	200006d0 	.word	0x200006d0
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b832:	2300      	movs	r3, #0
 800b834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b836:	4b4e      	ldr	r3, [pc, #312]	; (800b970 <xTaskIncrementTick+0x144>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f040 808e 	bne.w	800b95c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b840:	4b4c      	ldr	r3, [pc, #304]	; (800b974 <xTaskIncrementTick+0x148>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3301      	adds	r3, #1
 800b846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b848:	4a4a      	ldr	r2, [pc, #296]	; (800b974 <xTaskIncrementTick+0x148>)
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d120      	bne.n	800b896 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b854:	4b48      	ldr	r3, [pc, #288]	; (800b978 <xTaskIncrementTick+0x14c>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00a      	beq.n	800b874 <xTaskIncrementTick+0x48>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	603b      	str	r3, [r7, #0]
}
 800b870:	bf00      	nop
 800b872:	e7fe      	b.n	800b872 <xTaskIncrementTick+0x46>
 800b874:	4b40      	ldr	r3, [pc, #256]	; (800b978 <xTaskIncrementTick+0x14c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	60fb      	str	r3, [r7, #12]
 800b87a:	4b40      	ldr	r3, [pc, #256]	; (800b97c <xTaskIncrementTick+0x150>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a3e      	ldr	r2, [pc, #248]	; (800b978 <xTaskIncrementTick+0x14c>)
 800b880:	6013      	str	r3, [r2, #0]
 800b882:	4a3e      	ldr	r2, [pc, #248]	; (800b97c <xTaskIncrementTick+0x150>)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	4b3d      	ldr	r3, [pc, #244]	; (800b980 <xTaskIncrementTick+0x154>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3301      	adds	r3, #1
 800b88e:	4a3c      	ldr	r2, [pc, #240]	; (800b980 <xTaskIncrementTick+0x154>)
 800b890:	6013      	str	r3, [r2, #0]
 800b892:	f000 fac5 	bl	800be20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b896:	4b3b      	ldr	r3, [pc, #236]	; (800b984 <xTaskIncrementTick+0x158>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d348      	bcc.n	800b932 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8a0:	4b35      	ldr	r3, [pc, #212]	; (800b978 <xTaskIncrementTick+0x14c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d104      	bne.n	800b8b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8aa:	4b36      	ldr	r3, [pc, #216]	; (800b984 <xTaskIncrementTick+0x158>)
 800b8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b0:	601a      	str	r2, [r3, #0]
					break;
 800b8b2:	e03e      	b.n	800b932 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b4:	4b30      	ldr	r3, [pc, #192]	; (800b978 <xTaskIncrementTick+0x14c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d203      	bcs.n	800b8d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8cc:	4a2d      	ldr	r2, [pc, #180]	; (800b984 <xTaskIncrementTick+0x158>)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b8d2:	e02e      	b.n	800b932 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fe ff5d 	bl	800a798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d004      	beq.n	800b8f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	3318      	adds	r3, #24
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe ff54 	bl	800a798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	409a      	lsls	r2, r3
 800b8f8:	4b23      	ldr	r3, [pc, #140]	; (800b988 <xTaskIncrementTick+0x15c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	4a22      	ldr	r2, [pc, #136]	; (800b988 <xTaskIncrementTick+0x15c>)
 800b900:	6013      	str	r3, [r2, #0]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4a1f      	ldr	r2, [pc, #124]	; (800b98c <xTaskIncrementTick+0x160>)
 800b910:	441a      	add	r2, r3
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	3304      	adds	r3, #4
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7fe fee0 	bl	800a6de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b922:	4b1b      	ldr	r3, [pc, #108]	; (800b990 <xTaskIncrementTick+0x164>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b928:	429a      	cmp	r2, r3
 800b92a:	d3b9      	bcc.n	800b8a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b92c:	2301      	movs	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b930:	e7b6      	b.n	800b8a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b932:	4b17      	ldr	r3, [pc, #92]	; (800b990 <xTaskIncrementTick+0x164>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b938:	4914      	ldr	r1, [pc, #80]	; (800b98c <xTaskIncrementTick+0x160>)
 800b93a:	4613      	mov	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	440b      	add	r3, r1
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d901      	bls.n	800b94e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b94a:	2301      	movs	r3, #1
 800b94c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b94e:	4b11      	ldr	r3, [pc, #68]	; (800b994 <xTaskIncrementTick+0x168>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d007      	beq.n	800b966 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b956:	2301      	movs	r3, #1
 800b958:	617b      	str	r3, [r7, #20]
 800b95a:	e004      	b.n	800b966 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b95c:	4b0e      	ldr	r3, [pc, #56]	; (800b998 <xTaskIncrementTick+0x16c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	3301      	adds	r3, #1
 800b962:	4a0d      	ldr	r2, [pc, #52]	; (800b998 <xTaskIncrementTick+0x16c>)
 800b964:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b966:	697b      	ldr	r3, [r7, #20]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	200006e8 	.word	0x200006e8
 800b974:	200006c4 	.word	0x200006c4
 800b978:	20000678 	.word	0x20000678
 800b97c:	2000067c 	.word	0x2000067c
 800b980:	200006d8 	.word	0x200006d8
 800b984:	200006e0 	.word	0x200006e0
 800b988:	200006c8 	.word	0x200006c8
 800b98c:	200005c4 	.word	0x200005c4
 800b990:	200005c0 	.word	0x200005c0
 800b994:	200006d4 	.word	0x200006d4
 800b998:	200006d0 	.word	0x200006d0

0800b99c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9a2:	4b39      	ldr	r3, [pc, #228]	; (800ba88 <vTaskSwitchContext+0xec>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9aa:	4b38      	ldr	r3, [pc, #224]	; (800ba8c <vTaskSwitchContext+0xf0>)
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9b0:	e066      	b.n	800ba80 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800b9b2:	4b36      	ldr	r3, [pc, #216]	; (800ba8c <vTaskSwitchContext+0xf0>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b9b8:	4b35      	ldr	r3, [pc, #212]	; (800ba90 <vTaskSwitchContext+0xf4>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9be:	61fb      	str	r3, [r7, #28]
 800b9c0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b9c4:	61bb      	str	r3, [r7, #24]
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d111      	bne.n	800b9f4 <vTaskSwitchContext+0x58>
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	69ba      	ldr	r2, [r7, #24]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d10b      	bne.n	800b9f4 <vTaskSwitchContext+0x58>
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	3308      	adds	r3, #8
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	69ba      	ldr	r2, [r7, #24]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d105      	bne.n	800b9f4 <vTaskSwitchContext+0x58>
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	330c      	adds	r3, #12
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	69ba      	ldr	r2, [r7, #24]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d008      	beq.n	800ba06 <vTaskSwitchContext+0x6a>
 800b9f4:	4b26      	ldr	r3, [pc, #152]	; (800ba90 <vTaskSwitchContext+0xf4>)
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	4b25      	ldr	r3, [pc, #148]	; (800ba90 <vTaskSwitchContext+0xf4>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3334      	adds	r3, #52	; 0x34
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4610      	mov	r0, r2
 800ba02:	f7f4 fd7e 	bl	8000502 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba06:	4b23      	ldr	r3, [pc, #140]	; (800ba94 <vTaskSwitchContext+0xf8>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	fab3 f383 	clz	r3, r3
 800ba12:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ba14:	7afb      	ldrb	r3, [r7, #11]
 800ba16:	f1c3 031f 	rsb	r3, r3, #31
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	491e      	ldr	r1, [pc, #120]	; (800ba98 <vTaskSwitchContext+0xfc>)
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4613      	mov	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4413      	add	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	440b      	add	r3, r1
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10a      	bne.n	800ba46 <vTaskSwitchContext+0xaa>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	607b      	str	r3, [r7, #4]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <vTaskSwitchContext+0xa8>
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4a11      	ldr	r2, [pc, #68]	; (800ba98 <vTaskSwitchContext+0xfc>)
 800ba52:	4413      	add	r3, r2
 800ba54:	613b      	str	r3, [r7, #16]
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	605a      	str	r2, [r3, #4]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	3308      	adds	r3, #8
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d104      	bne.n	800ba76 <vTaskSwitchContext+0xda>
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	605a      	str	r2, [r3, #4]
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	4a04      	ldr	r2, [pc, #16]	; (800ba90 <vTaskSwitchContext+0xf4>)
 800ba7e:	6013      	str	r3, [r2, #0]
}
 800ba80:	bf00      	nop
 800ba82:	3720      	adds	r7, #32
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	200006e8 	.word	0x200006e8
 800ba8c:	200006d4 	.word	0x200006d4
 800ba90:	200005c0 	.word	0x200005c0
 800ba94:	200006c8 	.word	0x200006c8
 800ba98:	200005c4 	.word	0x200005c4

0800ba9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10a      	bne.n	800bac2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	60fb      	str	r3, [r7, #12]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bac2:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <vTaskPlaceOnEventList+0x44>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3318      	adds	r3, #24
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7fe fe2b 	bl	800a726 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bad0:	2101      	movs	r1, #1
 800bad2:	6838      	ldr	r0, [r7, #0]
 800bad4:	f000 fa68 	bl	800bfa8 <prvAddCurrentTaskToDelayedList>
}
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	200005c0 	.word	0x200005c0

0800bae4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10a      	bne.n	800bb10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	60fb      	str	r3, [r7, #12]
}
 800bb0c:	bf00      	nop
 800bb0e:	e7fe      	b.n	800bb0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	3318      	adds	r3, #24
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fe fe3f 	bl	800a798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb1a:	4b1d      	ldr	r3, [pc, #116]	; (800bb90 <xTaskRemoveFromEventList+0xac>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d11c      	bne.n	800bb5c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	3304      	adds	r3, #4
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe fe36 	bl	800a798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb30:	2201      	movs	r2, #1
 800bb32:	409a      	lsls	r2, r3
 800bb34:	4b17      	ldr	r3, [pc, #92]	; (800bb94 <xTaskRemoveFromEventList+0xb0>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	4a16      	ldr	r2, [pc, #88]	; (800bb94 <xTaskRemoveFromEventList+0xb0>)
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb42:	4613      	mov	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	4413      	add	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4a13      	ldr	r2, [pc, #76]	; (800bb98 <xTaskRemoveFromEventList+0xb4>)
 800bb4c:	441a      	add	r2, r3
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	3304      	adds	r3, #4
 800bb52:	4619      	mov	r1, r3
 800bb54:	4610      	mov	r0, r2
 800bb56:	f7fe fdc2 	bl	800a6de <vListInsertEnd>
 800bb5a:	e005      	b.n	800bb68 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	3318      	adds	r3, #24
 800bb60:	4619      	mov	r1, r3
 800bb62:	480e      	ldr	r0, [pc, #56]	; (800bb9c <xTaskRemoveFromEventList+0xb8>)
 800bb64:	f7fe fdbb 	bl	800a6de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6c:	4b0c      	ldr	r3, [pc, #48]	; (800bba0 <xTaskRemoveFromEventList+0xbc>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d905      	bls.n	800bb82 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb76:	2301      	movs	r3, #1
 800bb78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb7a:	4b0a      	ldr	r3, [pc, #40]	; (800bba4 <xTaskRemoveFromEventList+0xc0>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	601a      	str	r2, [r3, #0]
 800bb80:	e001      	b.n	800bb86 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bb82:	2300      	movs	r3, #0
 800bb84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb86:	697b      	ldr	r3, [r7, #20]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3718      	adds	r7, #24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	200006e8 	.word	0x200006e8
 800bb94:	200006c8 	.word	0x200006c8
 800bb98:	200005c4 	.word	0x200005c4
 800bb9c:	20000680 	.word	0x20000680
 800bba0:	200005c0 	.word	0x200005c0
 800bba4:	200006d4 	.word	0x200006d4

0800bba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bbb0:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <vTaskInternalSetTimeOutState+0x24>)
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbb8:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <vTaskInternalSetTimeOutState+0x28>)
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	605a      	str	r2, [r3, #4]
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	200006d8 	.word	0x200006d8
 800bbd0:	200006c4 	.word	0x200006c4

0800bbd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	613b      	str	r3, [r7, #16]
}
 800bbf6:	bf00      	nop
 800bbf8:	e7fe      	b.n	800bbf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10a      	bne.n	800bc16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	60fb      	str	r3, [r7, #12]
}
 800bc12:	bf00      	nop
 800bc14:	e7fe      	b.n	800bc14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc16:	f000 fb5d 	bl	800c2d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc1a:	4b1d      	ldr	r3, [pc, #116]	; (800bc90 <xTaskCheckForTimeOut+0xbc>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc32:	d102      	bne.n	800bc3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc34:	2300      	movs	r3, #0
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	e023      	b.n	800bc82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	4b15      	ldr	r3, [pc, #84]	; (800bc94 <xTaskCheckForTimeOut+0xc0>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d007      	beq.n	800bc56 <xTaskCheckForTimeOut+0x82>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	69ba      	ldr	r2, [r7, #24]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d302      	bcc.n	800bc56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc50:	2301      	movs	r3, #1
 800bc52:	61fb      	str	r3, [r7, #28]
 800bc54:	e015      	b.n	800bc82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	697a      	ldr	r2, [r7, #20]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d20b      	bcs.n	800bc78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	1ad2      	subs	r2, r2, r3
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff ff9b 	bl	800bba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc72:	2300      	movs	r3, #0
 800bc74:	61fb      	str	r3, [r7, #28]
 800bc76:	e004      	b.n	800bc82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc82:	f000 fb57 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800bc86:	69fb      	ldr	r3, [r7, #28]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3720      	adds	r7, #32
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	200006c4 	.word	0x200006c4
 800bc94:	200006d8 	.word	0x200006d8

0800bc98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc9c:	4b03      	ldr	r3, [pc, #12]	; (800bcac <vTaskMissedYield+0x14>)
 800bc9e:	2201      	movs	r2, #1
 800bca0:	601a      	str	r2, [r3, #0]
}
 800bca2:	bf00      	nop
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	200006d4 	.word	0x200006d4

0800bcb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bcb8:	f000 f854 	bl	800bd64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bcbc:	4b07      	ldr	r3, [pc, #28]	; (800bcdc <prvIdleTask+0x2c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d907      	bls.n	800bcd4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800bcc4:	4b06      	ldr	r3, [pc, #24]	; (800bce0 <prvIdleTask+0x30>)
 800bcc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcca:	601a      	str	r2, [r3, #0]
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800bcd4:	f7f4 fc0e 	bl	80004f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bcd8:	e7ee      	b.n	800bcb8 <prvIdleTask+0x8>
 800bcda:	bf00      	nop
 800bcdc:	200005c4 	.word	0x200005c4
 800bce0:	e000ed04 	.word	0xe000ed04

0800bce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcea:	2300      	movs	r3, #0
 800bcec:	607b      	str	r3, [r7, #4]
 800bcee:	e00c      	b.n	800bd0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4a12      	ldr	r2, [pc, #72]	; (800bd44 <prvInitialiseTaskLists+0x60>)
 800bcfc:	4413      	add	r3, r2
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fe fcc0 	bl	800a684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	3301      	adds	r3, #1
 800bd08:	607b      	str	r3, [r7, #4]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b06      	cmp	r3, #6
 800bd0e:	d9ef      	bls.n	800bcf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd10:	480d      	ldr	r0, [pc, #52]	; (800bd48 <prvInitialiseTaskLists+0x64>)
 800bd12:	f7fe fcb7 	bl	800a684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd16:	480d      	ldr	r0, [pc, #52]	; (800bd4c <prvInitialiseTaskLists+0x68>)
 800bd18:	f7fe fcb4 	bl	800a684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd1c:	480c      	ldr	r0, [pc, #48]	; (800bd50 <prvInitialiseTaskLists+0x6c>)
 800bd1e:	f7fe fcb1 	bl	800a684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd22:	480c      	ldr	r0, [pc, #48]	; (800bd54 <prvInitialiseTaskLists+0x70>)
 800bd24:	f7fe fcae 	bl	800a684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd28:	480b      	ldr	r0, [pc, #44]	; (800bd58 <prvInitialiseTaskLists+0x74>)
 800bd2a:	f7fe fcab 	bl	800a684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd2e:	4b0b      	ldr	r3, [pc, #44]	; (800bd5c <prvInitialiseTaskLists+0x78>)
 800bd30:	4a05      	ldr	r2, [pc, #20]	; (800bd48 <prvInitialiseTaskLists+0x64>)
 800bd32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd34:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <prvInitialiseTaskLists+0x7c>)
 800bd36:	4a05      	ldr	r2, [pc, #20]	; (800bd4c <prvInitialiseTaskLists+0x68>)
 800bd38:	601a      	str	r2, [r3, #0]
}
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	200005c4 	.word	0x200005c4
 800bd48:	20000650 	.word	0x20000650
 800bd4c:	20000664 	.word	0x20000664
 800bd50:	20000680 	.word	0x20000680
 800bd54:	20000694 	.word	0x20000694
 800bd58:	200006ac 	.word	0x200006ac
 800bd5c:	20000678 	.word	0x20000678
 800bd60:	2000067c 	.word	0x2000067c

0800bd64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd6a:	e019      	b.n	800bda0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd6c:	f000 fab2 	bl	800c2d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd70:	4b10      	ldr	r3, [pc, #64]	; (800bdb4 <prvCheckTasksWaitingTermination+0x50>)
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fe fd0b 	bl	800a798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd82:	4b0d      	ldr	r3, [pc, #52]	; (800bdb8 <prvCheckTasksWaitingTermination+0x54>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	4a0b      	ldr	r2, [pc, #44]	; (800bdb8 <prvCheckTasksWaitingTermination+0x54>)
 800bd8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd8c:	4b0b      	ldr	r3, [pc, #44]	; (800bdbc <prvCheckTasksWaitingTermination+0x58>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	4a0a      	ldr	r2, [pc, #40]	; (800bdbc <prvCheckTasksWaitingTermination+0x58>)
 800bd94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd96:	f000 facd 	bl	800c334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f810 	bl	800bdc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bda0:	4b06      	ldr	r3, [pc, #24]	; (800bdbc <prvCheckTasksWaitingTermination+0x58>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1e1      	bne.n	800bd6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bda8:	bf00      	nop
 800bdaa:	bf00      	nop
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20000694 	.word	0x20000694
 800bdb8:	200006c0 	.word	0x200006c0
 800bdbc:	200006a8 	.word	0x200006a8

0800bdc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d108      	bne.n	800bde4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 fc6e 	bl	800c6b8 <vPortFree>
				vPortFree( pxTCB );
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fc6b 	bl	800c6b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bde2:	e018      	b.n	800be16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d103      	bne.n	800bdf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fc62 	bl	800c6b8 <vPortFree>
	}
 800bdf4:	e00f      	b.n	800be16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d00a      	beq.n	800be16 <prvDeleteTCB+0x56>
	__asm volatile
 800be00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	60fb      	str	r3, [r7, #12]
}
 800be12:	bf00      	nop
 800be14:	e7fe      	b.n	800be14 <prvDeleteTCB+0x54>
	}
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
	...

0800be20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be26:	4b0c      	ldr	r3, [pc, #48]	; (800be58 <prvResetNextTaskUnblockTime+0x38>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d104      	bne.n	800be3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be30:	4b0a      	ldr	r3, [pc, #40]	; (800be5c <prvResetNextTaskUnblockTime+0x3c>)
 800be32:	f04f 32ff 	mov.w	r2, #4294967295
 800be36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be38:	e008      	b.n	800be4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be3a:	4b07      	ldr	r3, [pc, #28]	; (800be58 <prvResetNextTaskUnblockTime+0x38>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	4a04      	ldr	r2, [pc, #16]	; (800be5c <prvResetNextTaskUnblockTime+0x3c>)
 800be4a:	6013      	str	r3, [r2, #0]
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	20000678 	.word	0x20000678
 800be5c:	200006e0 	.word	0x200006e0

0800be60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be66:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <xTaskGetSchedulerState+0x34>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d102      	bne.n	800be74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be6e:	2301      	movs	r3, #1
 800be70:	607b      	str	r3, [r7, #4]
 800be72:	e008      	b.n	800be86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be74:	4b08      	ldr	r3, [pc, #32]	; (800be98 <xTaskGetSchedulerState+0x38>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d102      	bne.n	800be82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be7c:	2302      	movs	r3, #2
 800be7e:	607b      	str	r3, [r7, #4]
 800be80:	e001      	b.n	800be86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be82:	2300      	movs	r3, #0
 800be84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be86:	687b      	ldr	r3, [r7, #4]
	}
 800be88:	4618      	mov	r0, r3
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	200006cc 	.word	0x200006cc
 800be98:	200006e8 	.word	0x200006e8

0800be9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d06e      	beq.n	800bf90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800beb2:	4b3a      	ldr	r3, [pc, #232]	; (800bf9c <xTaskPriorityDisinherit+0x100>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d00a      	beq.n	800bed2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	60fb      	str	r3, [r7, #12]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10a      	bne.n	800bef0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	60bb      	str	r3, [r7, #8]
}
 800beec:	bf00      	nop
 800beee:	e7fe      	b.n	800beee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bef4:	1e5a      	subs	r2, r3, #1
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d044      	beq.n	800bf90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d140      	bne.n	800bf90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	3304      	adds	r3, #4
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe fc40 	bl	800a798 <uxListRemove>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d115      	bne.n	800bf4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf22:	491f      	ldr	r1, [pc, #124]	; (800bfa0 <xTaskPriorityDisinherit+0x104>)
 800bf24:	4613      	mov	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	440b      	add	r3, r1
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10a      	bne.n	800bf4a <xTaskPriorityDisinherit+0xae>
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	2201      	movs	r2, #1
 800bf3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3e:	43da      	mvns	r2, r3
 800bf40:	4b18      	ldr	r3, [pc, #96]	; (800bfa4 <xTaskPriorityDisinherit+0x108>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4013      	ands	r3, r2
 800bf46:	4a17      	ldr	r2, [pc, #92]	; (800bfa4 <xTaskPriorityDisinherit+0x108>)
 800bf48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf56:	f1c3 0207 	rsb	r2, r3, #7
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf62:	2201      	movs	r2, #1
 800bf64:	409a      	lsls	r2, r3
 800bf66:	4b0f      	ldr	r3, [pc, #60]	; (800bfa4 <xTaskPriorityDisinherit+0x108>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	4a0d      	ldr	r2, [pc, #52]	; (800bfa4 <xTaskPriorityDisinherit+0x108>)
 800bf6e:	6013      	str	r3, [r2, #0]
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf74:	4613      	mov	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	4a08      	ldr	r2, [pc, #32]	; (800bfa0 <xTaskPriorityDisinherit+0x104>)
 800bf7e:	441a      	add	r2, r3
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	3304      	adds	r3, #4
 800bf84:	4619      	mov	r1, r3
 800bf86:	4610      	mov	r0, r2
 800bf88:	f7fe fba9 	bl	800a6de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf90:	697b      	ldr	r3, [r7, #20]
	}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3718      	adds	r7, #24
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	200005c0 	.word	0x200005c0
 800bfa0:	200005c4 	.word	0x200005c4
 800bfa4:	200006c8 	.word	0x200006c8

0800bfa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfb2:	4b29      	ldr	r3, [pc, #164]	; (800c058 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfb8:	4b28      	ldr	r3, [pc, #160]	; (800c05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe fbea 	bl	800a798 <uxListRemove>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10b      	bne.n	800bfe2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bfca:	4b24      	ldr	r3, [pc, #144]	; (800c05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd6:	43da      	mvns	r2, r3
 800bfd8:	4b21      	ldr	r3, [pc, #132]	; (800c060 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4013      	ands	r3, r2
 800bfde:	4a20      	ldr	r2, [pc, #128]	; (800c060 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bfe0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe8:	d10a      	bne.n	800c000 <prvAddCurrentTaskToDelayedList+0x58>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d007      	beq.n	800c000 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bff0:	4b1a      	ldr	r3, [pc, #104]	; (800c05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3304      	adds	r3, #4
 800bff6:	4619      	mov	r1, r3
 800bff8:	481a      	ldr	r0, [pc, #104]	; (800c064 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bffa:	f7fe fb70 	bl	800a6de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bffe:	e026      	b.n	800c04e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4413      	add	r3, r2
 800c006:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c008:	4b14      	ldr	r3, [pc, #80]	; (800c05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	429a      	cmp	r2, r3
 800c016:	d209      	bcs.n	800c02c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c018:	4b13      	ldr	r3, [pc, #76]	; (800c068 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3304      	adds	r3, #4
 800c022:	4619      	mov	r1, r3
 800c024:	4610      	mov	r0, r2
 800c026:	f7fe fb7e 	bl	800a726 <vListInsert>
}
 800c02a:	e010      	b.n	800c04e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c02c:	4b0f      	ldr	r3, [pc, #60]	; (800c06c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3304      	adds	r3, #4
 800c036:	4619      	mov	r1, r3
 800c038:	4610      	mov	r0, r2
 800c03a:	f7fe fb74 	bl	800a726 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c03e:	4b0c      	ldr	r3, [pc, #48]	; (800c070 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	429a      	cmp	r2, r3
 800c046:	d202      	bcs.n	800c04e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c048:	4a09      	ldr	r2, [pc, #36]	; (800c070 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	6013      	str	r3, [r2, #0]
}
 800c04e:	bf00      	nop
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	200006c4 	.word	0x200006c4
 800c05c:	200005c0 	.word	0x200005c0
 800c060:	200006c8 	.word	0x200006c8
 800c064:	200006ac 	.word	0x200006ac
 800c068:	2000067c 	.word	0x2000067c
 800c06c:	20000678 	.word	0x20000678
 800c070:	200006e0 	.word	0x200006e0

0800c074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3b04      	subs	r3, #4
 800c084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3b04      	subs	r3, #4
 800c092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	f023 0201 	bic.w	r2, r3, #1
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3b04      	subs	r3, #4
 800c0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0a4:	4a0c      	ldr	r2, [pc, #48]	; (800c0d8 <pxPortInitialiseStack+0x64>)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3b14      	subs	r3, #20
 800c0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3b04      	subs	r3, #4
 800c0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f06f 0202 	mvn.w	r2, #2
 800c0c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3b20      	subs	r3, #32
 800c0c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	0800c0dd 	.word	0x0800c0dd

0800c0dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0e6:	4b12      	ldr	r3, [pc, #72]	; (800c130 <prvTaskExitError+0x54>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ee:	d00a      	beq.n	800c106 <prvTaskExitError+0x2a>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	60fb      	str	r3, [r7, #12]
}
 800c102:	bf00      	nop
 800c104:	e7fe      	b.n	800c104 <prvTaskExitError+0x28>
	__asm volatile
 800c106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	60bb      	str	r3, [r7, #8]
}
 800c118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c11a:	bf00      	nop
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0fc      	beq.n	800c11c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	2000002c 	.word	0x2000002c
	...

0800c140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <pxCurrentTCBConst2>)
 800c142:	6819      	ldr	r1, [r3, #0]
 800c144:	6808      	ldr	r0, [r1, #0]
 800c146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14a:	f380 8809 	msr	PSP, r0
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f04f 0000 	mov.w	r0, #0
 800c156:	f380 8811 	msr	BASEPRI, r0
 800c15a:	4770      	bx	lr
 800c15c:	f3af 8000 	nop.w

0800c160 <pxCurrentTCBConst2>:
 800c160:	200005c0 	.word	0x200005c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop

0800c168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c168:	4808      	ldr	r0, [pc, #32]	; (800c18c <prvPortStartFirstTask+0x24>)
 800c16a:	6800      	ldr	r0, [r0, #0]
 800c16c:	6800      	ldr	r0, [r0, #0]
 800c16e:	f380 8808 	msr	MSP, r0
 800c172:	f04f 0000 	mov.w	r0, #0
 800c176:	f380 8814 	msr	CONTROL, r0
 800c17a:	b662      	cpsie	i
 800c17c:	b661      	cpsie	f
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	df00      	svc	0
 800c188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c18a:	bf00      	nop
 800c18c:	e000ed08 	.word	0xe000ed08

0800c190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c196:	4b46      	ldr	r3, [pc, #280]	; (800c2b0 <xPortStartScheduler+0x120>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a46      	ldr	r2, [pc, #280]	; (800c2b4 <xPortStartScheduler+0x124>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d10a      	bne.n	800c1b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	613b      	str	r3, [r7, #16]
}
 800c1b2:	bf00      	nop
 800c1b4:	e7fe      	b.n	800c1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1b6:	4b3e      	ldr	r3, [pc, #248]	; (800c2b0 <xPortStartScheduler+0x120>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a3f      	ldr	r2, [pc, #252]	; (800c2b8 <xPortStartScheduler+0x128>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d10a      	bne.n	800c1d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1d6:	4b39      	ldr	r3, [pc, #228]	; (800c2bc <xPortStartScheduler+0x12c>)
 800c1d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	22ff      	movs	r2, #255	; 0xff
 800c1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	4b31      	ldr	r3, [pc, #196]	; (800c2c0 <xPortStartScheduler+0x130>)
 800c1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1fe:	4b31      	ldr	r3, [pc, #196]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c200:	2207      	movs	r2, #7
 800c202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c204:	e009      	b.n	800c21a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c206:	4b2f      	ldr	r3, [pc, #188]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	4a2d      	ldr	r2, [pc, #180]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c210:	78fb      	ldrb	r3, [r7, #3]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	b2db      	uxtb	r3, r3
 800c218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c21a:	78fb      	ldrb	r3, [r7, #3]
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c222:	2b80      	cmp	r3, #128	; 0x80
 800c224:	d0ef      	beq.n	800c206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c226:	4b27      	ldr	r3, [pc, #156]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f1c3 0307 	rsb	r3, r3, #7
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d00a      	beq.n	800c248 <xPortStartScheduler+0xb8>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	60bb      	str	r3, [r7, #8]
}
 800c244:	bf00      	nop
 800c246:	e7fe      	b.n	800c246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c248:	4b1e      	ldr	r3, [pc, #120]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	021b      	lsls	r3, r3, #8
 800c24e:	4a1d      	ldr	r2, [pc, #116]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c252:	4b1c      	ldr	r3, [pc, #112]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c25a:	4a1a      	ldr	r2, [pc, #104]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c25c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	b2da      	uxtb	r2, r3
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c266:	4b18      	ldr	r3, [pc, #96]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a17      	ldr	r2, [pc, #92]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c26c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c272:	4b15      	ldr	r3, [pc, #84]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a14      	ldr	r2, [pc, #80]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c27c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c27e:	f000 f8dd 	bl	800c43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c282:	4b12      	ldr	r3, [pc, #72]	; (800c2cc <xPortStartScheduler+0x13c>)
 800c284:	2200      	movs	r2, #0
 800c286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c288:	f000 f8fc 	bl	800c484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c28c:	4b10      	ldr	r3, [pc, #64]	; (800c2d0 <xPortStartScheduler+0x140>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0f      	ldr	r2, [pc, #60]	; (800c2d0 <xPortStartScheduler+0x140>)
 800c292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c298:	f7ff ff66 	bl	800c168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c29c:	f7ff fb7e 	bl	800b99c <vTaskSwitchContext>
	prvTaskExitError();
 800c2a0:	f7ff ff1c 	bl	800c0dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	e000ed00 	.word	0xe000ed00
 800c2b4:	410fc271 	.word	0x410fc271
 800c2b8:	410fc270 	.word	0x410fc270
 800c2bc:	e000e400 	.word	0xe000e400
 800c2c0:	200006ec 	.word	0x200006ec
 800c2c4:	200006f0 	.word	0x200006f0
 800c2c8:	e000ed20 	.word	0xe000ed20
 800c2cc:	2000002c 	.word	0x2000002c
 800c2d0:	e000ef34 	.word	0xe000ef34

0800c2d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	607b      	str	r3, [r7, #4]
}
 800c2ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	; (800c32c <vPortEnterCritical+0x58>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	4a0d      	ldr	r2, [pc, #52]	; (800c32c <vPortEnterCritical+0x58>)
 800c2f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2f8:	4b0c      	ldr	r3, [pc, #48]	; (800c32c <vPortEnterCritical+0x58>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d10f      	bne.n	800c320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c300:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <vPortEnterCritical+0x5c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00a      	beq.n	800c320 <vPortEnterCritical+0x4c>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	603b      	str	r3, [r7, #0]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <vPortEnterCritical+0x4a>
	}
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	2000002c 	.word	0x2000002c
 800c330:	e000ed04 	.word	0xe000ed04

0800c334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c33a:	4b12      	ldr	r3, [pc, #72]	; (800c384 <vPortExitCritical+0x50>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <vPortExitCritical+0x24>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	607b      	str	r3, [r7, #4]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c358:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <vPortExitCritical+0x50>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3b01      	subs	r3, #1
 800c35e:	4a09      	ldr	r2, [pc, #36]	; (800c384 <vPortExitCritical+0x50>)
 800c360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c362:	4b08      	ldr	r3, [pc, #32]	; (800c384 <vPortExitCritical+0x50>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d105      	bne.n	800c376 <vPortExitCritical+0x42>
 800c36a:	2300      	movs	r3, #0
 800c36c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	f383 8811 	msr	BASEPRI, r3
}
 800c374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c376:	bf00      	nop
 800c378:	370c      	adds	r7, #12
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	2000002c 	.word	0x2000002c
	...

0800c390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c390:	f3ef 8009 	mrs	r0, PSP
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	4b15      	ldr	r3, [pc, #84]	; (800c3f0 <pxCurrentTCBConst>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	f01e 0f10 	tst.w	lr, #16
 800c3a0:	bf08      	it	eq
 800c3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	6010      	str	r0, [r2, #0]
 800c3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3b4:	f380 8811 	msr	BASEPRI, r0
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f7ff faec 	bl	800b99c <vTaskSwitchContext>
 800c3c4:	f04f 0000 	mov.w	r0, #0
 800c3c8:	f380 8811 	msr	BASEPRI, r0
 800c3cc:	bc09      	pop	{r0, r3}
 800c3ce:	6819      	ldr	r1, [r3, #0]
 800c3d0:	6808      	ldr	r0, [r1, #0]
 800c3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d6:	f01e 0f10 	tst.w	lr, #16
 800c3da:	bf08      	it	eq
 800c3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3e0:	f380 8809 	msr	PSP, r0
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w

0800c3f0 <pxCurrentTCBConst>:
 800c3f0:	200005c0 	.word	0x200005c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop

0800c3f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	607b      	str	r3, [r7, #4]
}
 800c410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c412:	f7ff fa0b 	bl	800b82c <xTaskIncrementTick>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d003      	beq.n	800c424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c41c:	4b06      	ldr	r3, [pc, #24]	; (800c438 <SysTick_Handler+0x40>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	2300      	movs	r3, #0
 800c426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	f383 8811 	msr	BASEPRI, r3
}
 800c42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	e000ed04 	.word	0xe000ed04

0800c43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c43c:	b480      	push	{r7}
 800c43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <vPortSetupTimerInterrupt+0x34>)
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c446:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <vPortSetupTimerInterrupt+0x38>)
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c44c:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <vPortSetupTimerInterrupt+0x3c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a0a      	ldr	r2, [pc, #40]	; (800c47c <vPortSetupTimerInterrupt+0x40>)
 800c452:	fba2 2303 	umull	r2, r3, r2, r3
 800c456:	099b      	lsrs	r3, r3, #6
 800c458:	4a09      	ldr	r2, [pc, #36]	; (800c480 <vPortSetupTimerInterrupt+0x44>)
 800c45a:	3b01      	subs	r3, #1
 800c45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c45e:	4b04      	ldr	r3, [pc, #16]	; (800c470 <vPortSetupTimerInterrupt+0x34>)
 800c460:	2207      	movs	r2, #7
 800c462:	601a      	str	r2, [r3, #0]
}
 800c464:	bf00      	nop
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	e000e010 	.word	0xe000e010
 800c474:	e000e018 	.word	0xe000e018
 800c478:	20000000 	.word	0x20000000
 800c47c:	10624dd3 	.word	0x10624dd3
 800c480:	e000e014 	.word	0xe000e014

0800c484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c494 <vPortEnableVFP+0x10>
 800c488:	6801      	ldr	r1, [r0, #0]
 800c48a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c48e:	6001      	str	r1, [r0, #0]
 800c490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c492:	bf00      	nop
 800c494:	e000ed88 	.word	0xe000ed88

0800c498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c49e:	f3ef 8305 	mrs	r3, IPSR
 800c4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2b0f      	cmp	r3, #15
 800c4a8:	d914      	bls.n	800c4d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4aa:	4a17      	ldr	r2, [pc, #92]	; (800c508 <vPortValidateInterruptPriority+0x70>)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4b4:	4b15      	ldr	r3, [pc, #84]	; (800c50c <vPortValidateInterruptPriority+0x74>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	7afa      	ldrb	r2, [r7, #11]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d20a      	bcs.n	800c4d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	607b      	str	r3, [r7, #4]
}
 800c4d0:	bf00      	nop
 800c4d2:	e7fe      	b.n	800c4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4d4:	4b0e      	ldr	r3, [pc, #56]	; (800c510 <vPortValidateInterruptPriority+0x78>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4dc:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <vPortValidateInterruptPriority+0x7c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d90a      	bls.n	800c4fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	603b      	str	r3, [r7, #0]
}
 800c4f6:	bf00      	nop
 800c4f8:	e7fe      	b.n	800c4f8 <vPortValidateInterruptPriority+0x60>
	}
 800c4fa:	bf00      	nop
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	e000e3f0 	.word	0xe000e3f0
 800c50c:	200006ec 	.word	0x200006ec
 800c510:	e000ed0c 	.word	0xe000ed0c
 800c514:	200006f0 	.word	0x200006f0

0800c518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08a      	sub	sp, #40	; 0x28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c520:	2300      	movs	r3, #0
 800c522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c524:	f7ff f8d8 	bl	800b6d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c528:	4b5d      	ldr	r3, [pc, #372]	; (800c6a0 <pvPortMalloc+0x188>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d101      	bne.n	800c534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c530:	f000 f924 	bl	800c77c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c534:	4b5b      	ldr	r3, [pc, #364]	; (800c6a4 <pvPortMalloc+0x18c>)
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4013      	ands	r3, r2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f040 8093 	bne.w	800c668 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d01d      	beq.n	800c584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c548:	2208      	movs	r2, #8
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4413      	add	r3, r2
 800c54e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	2b00      	cmp	r3, #0
 800c558:	d014      	beq.n	800c584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f023 0307 	bic.w	r3, r3, #7
 800c560:	3308      	adds	r3, #8
 800c562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00a      	beq.n	800c584 <pvPortMalloc+0x6c>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	617b      	str	r3, [r7, #20]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d06e      	beq.n	800c668 <pvPortMalloc+0x150>
 800c58a:	4b47      	ldr	r3, [pc, #284]	; (800c6a8 <pvPortMalloc+0x190>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	429a      	cmp	r2, r3
 800c592:	d869      	bhi.n	800c668 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c594:	4b45      	ldr	r3, [pc, #276]	; (800c6ac <pvPortMalloc+0x194>)
 800c596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c598:	4b44      	ldr	r3, [pc, #272]	; (800c6ac <pvPortMalloc+0x194>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c59e:	e004      	b.n	800c5aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d903      	bls.n	800c5bc <pvPortMalloc+0xa4>
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1f1      	bne.n	800c5a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5bc:	4b38      	ldr	r3, [pc, #224]	; (800c6a0 <pvPortMalloc+0x188>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d050      	beq.n	800c668 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2208      	movs	r2, #8
 800c5cc:	4413      	add	r3, r2
 800c5ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	685a      	ldr	r2, [r3, #4]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	1ad2      	subs	r2, r2, r3
 800c5e0:	2308      	movs	r3, #8
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d91f      	bls.n	800c628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	f003 0307 	and.w	r3, r3, #7
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <pvPortMalloc+0xf8>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	613b      	str	r3, [r7, #16]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	685a      	ldr	r2, [r3, #4]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	1ad2      	subs	r2, r2, r3
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c622:	69b8      	ldr	r0, [r7, #24]
 800c624:	f000 f90c 	bl	800c840 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c628:	4b1f      	ldr	r3, [pc, #124]	; (800c6a8 <pvPortMalloc+0x190>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	4a1d      	ldr	r2, [pc, #116]	; (800c6a8 <pvPortMalloc+0x190>)
 800c634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c636:	4b1c      	ldr	r3, [pc, #112]	; (800c6a8 <pvPortMalloc+0x190>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b1d      	ldr	r3, [pc, #116]	; (800c6b0 <pvPortMalloc+0x198>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d203      	bcs.n	800c64a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c642:	4b19      	ldr	r3, [pc, #100]	; (800c6a8 <pvPortMalloc+0x190>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a1a      	ldr	r2, [pc, #104]	; (800c6b0 <pvPortMalloc+0x198>)
 800c648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	4b15      	ldr	r3, [pc, #84]	; (800c6a4 <pvPortMalloc+0x18c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	431a      	orrs	r2, r3
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c65e:	4b15      	ldr	r3, [pc, #84]	; (800c6b4 <pvPortMalloc+0x19c>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	4a13      	ldr	r2, [pc, #76]	; (800c6b4 <pvPortMalloc+0x19c>)
 800c666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c668:	f7ff f844 	bl	800b6f4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c672:	f7f3 ff51 	bl	8000518 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	f003 0307 	and.w	r3, r3, #7
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00a      	beq.n	800c696 <pvPortMalloc+0x17e>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	60fb      	str	r3, [r7, #12]
}
 800c692:	bf00      	nop
 800c694:	e7fe      	b.n	800c694 <pvPortMalloc+0x17c>
	return pvReturn;
 800c696:	69fb      	ldr	r3, [r7, #28]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3728      	adds	r7, #40	; 0x28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	200086fc 	.word	0x200086fc
 800c6a4:	20008710 	.word	0x20008710
 800c6a8:	20008700 	.word	0x20008700
 800c6ac:	200086f4 	.word	0x200086f4
 800c6b0:	20008704 	.word	0x20008704
 800c6b4:	20008708 	.word	0x20008708

0800c6b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b086      	sub	sp, #24
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d04d      	beq.n	800c766 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6ca:	2308      	movs	r3, #8
 800c6cc:	425b      	negs	r3, r3
 800c6ce:	697a      	ldr	r2, [r7, #20]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	4b24      	ldr	r3, [pc, #144]	; (800c770 <vPortFree+0xb8>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10a      	bne.n	800c6fc <vPortFree+0x44>
	__asm volatile
 800c6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	60fb      	str	r3, [r7, #12]
}
 800c6f8:	bf00      	nop
 800c6fa:	e7fe      	b.n	800c6fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00a      	beq.n	800c71a <vPortFree+0x62>
	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	60bb      	str	r3, [r7, #8]
}
 800c716:	bf00      	nop
 800c718:	e7fe      	b.n	800c718 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	4b14      	ldr	r3, [pc, #80]	; (800c770 <vPortFree+0xb8>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4013      	ands	r3, r2
 800c724:	2b00      	cmp	r3, #0
 800c726:	d01e      	beq.n	800c766 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d11a      	bne.n	800c766 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	4b0e      	ldr	r3, [pc, #56]	; (800c770 <vPortFree+0xb8>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	43db      	mvns	r3, r3
 800c73a:	401a      	ands	r2, r3
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c740:	f7fe ffca 	bl	800b6d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	685a      	ldr	r2, [r3, #4]
 800c748:	4b0a      	ldr	r3, [pc, #40]	; (800c774 <vPortFree+0xbc>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4413      	add	r3, r2
 800c74e:	4a09      	ldr	r2, [pc, #36]	; (800c774 <vPortFree+0xbc>)
 800c750:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c752:	6938      	ldr	r0, [r7, #16]
 800c754:	f000 f874 	bl	800c840 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c758:	4b07      	ldr	r3, [pc, #28]	; (800c778 <vPortFree+0xc0>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3301      	adds	r3, #1
 800c75e:	4a06      	ldr	r2, [pc, #24]	; (800c778 <vPortFree+0xc0>)
 800c760:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c762:	f7fe ffc7 	bl	800b6f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c766:	bf00      	nop
 800c768:	3718      	adds	r7, #24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20008710 	.word	0x20008710
 800c774:	20008700 	.word	0x20008700
 800c778:	2000870c 	.word	0x2000870c

0800c77c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c786:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c788:	4b27      	ldr	r3, [pc, #156]	; (800c828 <prvHeapInit+0xac>)
 800c78a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f003 0307 	and.w	r3, r3, #7
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00c      	beq.n	800c7b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3307      	adds	r3, #7
 800c79a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f023 0307 	bic.w	r3, r3, #7
 800c7a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	4a1f      	ldr	r2, [pc, #124]	; (800c828 <prvHeapInit+0xac>)
 800c7ac:	4413      	add	r3, r2
 800c7ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7b4:	4a1d      	ldr	r2, [pc, #116]	; (800c82c <prvHeapInit+0xb0>)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7ba:	4b1c      	ldr	r3, [pc, #112]	; (800c82c <prvHeapInit+0xb0>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	68ba      	ldr	r2, [r7, #8]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7c8:	2208      	movs	r2, #8
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	1a9b      	subs	r3, r3, r2
 800c7ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f023 0307 	bic.w	r3, r3, #7
 800c7d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	4a15      	ldr	r2, [pc, #84]	; (800c830 <prvHeapInit+0xb4>)
 800c7dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7de:	4b14      	ldr	r3, [pc, #80]	; (800c830 <prvHeapInit+0xb4>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7e6:	4b12      	ldr	r3, [pc, #72]	; (800c830 <prvHeapInit+0xb4>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	1ad2      	subs	r2, r2, r3
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7fc:	4b0c      	ldr	r3, [pc, #48]	; (800c830 <prvHeapInit+0xb4>)
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	4a0a      	ldr	r2, [pc, #40]	; (800c834 <prvHeapInit+0xb8>)
 800c80a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	4a09      	ldr	r2, [pc, #36]	; (800c838 <prvHeapInit+0xbc>)
 800c812:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c814:	4b09      	ldr	r3, [pc, #36]	; (800c83c <prvHeapInit+0xc0>)
 800c816:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c81a:	601a      	str	r2, [r3, #0]
}
 800c81c:	bf00      	nop
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	200006f4 	.word	0x200006f4
 800c82c:	200086f4 	.word	0x200086f4
 800c830:	200086fc 	.word	0x200086fc
 800c834:	20008704 	.word	0x20008704
 800c838:	20008700 	.word	0x20008700
 800c83c:	20008710 	.word	0x20008710

0800c840 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c848:	4b28      	ldr	r3, [pc, #160]	; (800c8ec <prvInsertBlockIntoFreeList+0xac>)
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	e002      	b.n	800c854 <prvInsertBlockIntoFreeList+0x14>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	60fb      	str	r3, [r7, #12]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d8f7      	bhi.n	800c84e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	4413      	add	r3, r2
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d108      	bne.n	800c882 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	441a      	add	r2, r3
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	441a      	add	r2, r3
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	429a      	cmp	r2, r3
 800c894:	d118      	bne.n	800c8c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	4b15      	ldr	r3, [pc, #84]	; (800c8f0 <prvInsertBlockIntoFreeList+0xb0>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d00d      	beq.n	800c8be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	441a      	add	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	601a      	str	r2, [r3, #0]
 800c8bc:	e008      	b.n	800c8d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8be:	4b0c      	ldr	r3, [pc, #48]	; (800c8f0 <prvInsertBlockIntoFreeList+0xb0>)
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	601a      	str	r2, [r3, #0]
 800c8c6:	e003      	b.n	800c8d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d002      	beq.n	800c8de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8de:	bf00      	nop
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	200086f4 	.word	0x200086f4
 800c8f0:	200086fc 	.word	0x200086fc

0800c8f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	490e      	ldr	r1, [pc, #56]	; (800c934 <MX_USB_HOST_Init+0x40>)
 800c8fc:	480e      	ldr	r0, [pc, #56]	; (800c938 <MX_USB_HOST_Init+0x44>)
 800c8fe:	f7fb fecf 	bl	80086a0 <USBH_Init>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d001      	beq.n	800c90c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c908:	f7f4 fa6a 	bl	8000de0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800c90c:	490b      	ldr	r1, [pc, #44]	; (800c93c <MX_USB_HOST_Init+0x48>)
 800c90e:	480a      	ldr	r0, [pc, #40]	; (800c938 <MX_USB_HOST_Init+0x44>)
 800c910:	f7fb ff7c 	bl	800880c <USBH_RegisterClass>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d001      	beq.n	800c91e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c91a:	f7f4 fa61 	bl	8000de0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c91e:	4806      	ldr	r0, [pc, #24]	; (800c938 <MX_USB_HOST_Init+0x44>)
 800c920:	f7fc f800 	bl	8008924 <USBH_Start>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c92a:	f7f4 fa59 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c92e:	bf00      	nop
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	0800c941 	.word	0x0800c941
 800c938:	20008714 	.word	0x20008714
 800c93c:	2000000c 	.word	0x2000000c

0800c940 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	460b      	mov	r3, r1
 800c94a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c94c:	78fb      	ldrb	r3, [r7, #3]
 800c94e:	3b01      	subs	r3, #1
 800c950:	2b04      	cmp	r3, #4
 800c952:	d819      	bhi.n	800c988 <USBH_UserProcess+0x48>
 800c954:	a201      	add	r2, pc, #4	; (adr r2, 800c95c <USBH_UserProcess+0x1c>)
 800c956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95a:	bf00      	nop
 800c95c:	0800c989 	.word	0x0800c989
 800c960:	0800c979 	.word	0x0800c979
 800c964:	0800c989 	.word	0x0800c989
 800c968:	0800c981 	.word	0x0800c981
 800c96c:	0800c971 	.word	0x0800c971
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c970:	4b09      	ldr	r3, [pc, #36]	; (800c998 <USBH_UserProcess+0x58>)
 800c972:	2203      	movs	r2, #3
 800c974:	701a      	strb	r2, [r3, #0]
  break;
 800c976:	e008      	b.n	800c98a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c978:	4b07      	ldr	r3, [pc, #28]	; (800c998 <USBH_UserProcess+0x58>)
 800c97a:	2202      	movs	r2, #2
 800c97c:	701a      	strb	r2, [r3, #0]
  break;
 800c97e:	e004      	b.n	800c98a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c980:	4b05      	ldr	r3, [pc, #20]	; (800c998 <USBH_UserProcess+0x58>)
 800c982:	2201      	movs	r2, #1
 800c984:	701a      	strb	r2, [r3, #0]
  break;
 800c986:	e000      	b.n	800c98a <USBH_UserProcess+0x4a>

  default:
  break;
 800c988:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c98a:	bf00      	nop
 800c98c:	370c      	adds	r7, #12
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop
 800c998:	20008af8 	.word	0x20008af8

0800c99c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08a      	sub	sp, #40	; 0x28
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9a4:	f107 0314 	add.w	r3, r7, #20
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	601a      	str	r2, [r3, #0]
 800c9ac:	605a      	str	r2, [r3, #4]
 800c9ae:	609a      	str	r2, [r3, #8]
 800c9b0:	60da      	str	r2, [r3, #12]
 800c9b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a24      	ldr	r2, [pc, #144]	; (800ca4c <HAL_HCD_MspInit+0xb0>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d141      	bne.n	800ca42 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9be:	2300      	movs	r3, #0
 800c9c0:	613b      	str	r3, [r7, #16]
 800c9c2:	4b23      	ldr	r3, [pc, #140]	; (800ca50 <HAL_HCD_MspInit+0xb4>)
 800c9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c6:	4a22      	ldr	r2, [pc, #136]	; (800ca50 <HAL_HCD_MspInit+0xb4>)
 800c9c8:	f043 0302 	orr.w	r3, r3, #2
 800c9cc:	6313      	str	r3, [r2, #48]	; 0x30
 800c9ce:	4b20      	ldr	r3, [pc, #128]	; (800ca50 <HAL_HCD_MspInit+0xb4>)
 800c9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d2:	f003 0302 	and.w	r3, r3, #2
 800c9d6:	613b      	str	r3, [r7, #16]
 800c9d8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800c9da:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800c9de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800c9ec:	230c      	movs	r3, #12
 800c9ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9f0:	f107 0314 	add.w	r3, r7, #20
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	4817      	ldr	r0, [pc, #92]	; (800ca54 <HAL_HCD_MspInit+0xb8>)
 800c9f8:	f7f5 fa76 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800c9fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca02:	2300      	movs	r3, #0
 800ca04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ca0a:	f107 0314 	add.w	r3, r7, #20
 800ca0e:	4619      	mov	r1, r3
 800ca10:	4810      	ldr	r0, [pc, #64]	; (800ca54 <HAL_HCD_MspInit+0xb8>)
 800ca12:	f7f5 fa69 	bl	8001ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ca16:	2300      	movs	r3, #0
 800ca18:	60fb      	str	r3, [r7, #12]
 800ca1a:	4b0d      	ldr	r3, [pc, #52]	; (800ca50 <HAL_HCD_MspInit+0xb4>)
 800ca1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca1e:	4a0c      	ldr	r2, [pc, #48]	; (800ca50 <HAL_HCD_MspInit+0xb4>)
 800ca20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca24:	6313      	str	r3, [r2, #48]	; 0x30
 800ca26:	4b0a      	ldr	r3, [pc, #40]	; (800ca50 <HAL_HCD_MspInit+0xb4>)
 800ca28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ca32:	2200      	movs	r2, #0
 800ca34:	2105      	movs	r1, #5
 800ca36:	204d      	movs	r0, #77	; 0x4d
 800ca38:	f7f4 ff92 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ca3c:	204d      	movs	r0, #77	; 0x4d
 800ca3e:	f7f4 ffab 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ca42:	bf00      	nop
 800ca44:	3728      	adds	r7, #40	; 0x28
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	40040000 	.word	0x40040000
 800ca50:	40023800 	.word	0x40023800
 800ca54:	40020400 	.word	0x40020400

0800ca58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fc fc13 	bl	8009292 <USBH_LL_IncTimer>
}
 800ca6c:	bf00      	nop
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fc fc57 	bl	8009336 <USBH_LL_Connect>
}
 800ca88:	bf00      	nop
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fc fc6c 	bl	800937c <USBH_LL_Disconnect>
}
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	460b      	mov	r3, r1
 800cab6:	70fb      	strb	r3, [r7, #3]
 800cab8:	4613      	mov	r3, r2
 800caba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fc fca1 	bl	800940a <USBH_LL_NotifyURBChange>
#endif
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fc fc01 	bl	80092e6 <USBH_LL_PortEnabled>
}
 800cae4:	bf00      	nop
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fc fc0d 	bl	800931a <USBH_LL_PortDisabled>
}
 800cb00:	bf00      	nop
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d132      	bne.n	800cb80 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800cb1a:	4a1c      	ldr	r2, [pc, #112]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a19      	ldr	r2, [pc, #100]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cb2a:	4b18      	ldr	r3, [pc, #96]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb2c:	4a18      	ldr	r2, [pc, #96]	; (800cb90 <USBH_LL_Init+0x88>)
 800cb2e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800cb30:	4b16      	ldr	r3, [pc, #88]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb32:	220c      	movs	r2, #12
 800cb34:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800cb36:	4b15      	ldr	r3, [pc, #84]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb38:	2201      	movs	r2, #1
 800cb3a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800cb3c:	4b13      	ldr	r3, [pc, #76]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cb42:	4b12      	ldr	r3, [pc, #72]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb44:	2202      	movs	r2, #2
 800cb46:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cb48:	4b10      	ldr	r3, [pc, #64]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cb4e:	4b0f      	ldr	r3, [pc, #60]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800cb54:	4b0d      	ldr	r3, [pc, #52]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cb5a:	4b0c      	ldr	r3, [pc, #48]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800cb60:	480a      	ldr	r0, [pc, #40]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb62:	f7f5 fbb8 	bl	80022d6 <HAL_HCD_Init>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800cb6c:	f7f4 f938 	bl	8000de0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cb70:	4806      	ldr	r0, [pc, #24]	; (800cb8c <USBH_LL_Init+0x84>)
 800cb72:	f7f5 ff9c 	bl	8002aae <HAL_HCD_GetCurrentFrame>
 800cb76:	4603      	mov	r3, r0
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7fc fb7a 	bl	8009274 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20008afc 	.word	0x20008afc
 800cb90:	40040000 	.word	0x40040000

0800cb94 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7f5 ff09 	bl	80029c2 <HAL_HCD_Start>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbb4:	7bfb      	ldrb	r3, [r7, #15]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 f95c 	bl	800ce74 <USBH_Get_USB_Status>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b084      	sub	sp, #16
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7f5 ff11 	bl	8002a08 <HAL_HCD_Stop>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 f941 	bl	800ce74 <USBH_Get_USB_Status>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7f5 ff59 	bl	8002aca <HAL_HCD_GetCurrentSpeed>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d00c      	beq.n	800cc38 <USBH_LL_GetSpeed+0x38>
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d80d      	bhi.n	800cc3e <USBH_LL_GetSpeed+0x3e>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <USBH_LL_GetSpeed+0x2c>
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d003      	beq.n	800cc32 <USBH_LL_GetSpeed+0x32>
 800cc2a:	e008      	b.n	800cc3e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc30:	e008      	b.n	800cc44 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cc32:	2301      	movs	r3, #1
 800cc34:	73fb      	strb	r3, [r7, #15]
    break;
 800cc36:	e005      	b.n	800cc44 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cc38:	2302      	movs	r3, #2
 800cc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc3c:	e002      	b.n	800cc44 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	73fb      	strb	r3, [r7, #15]
    break;
 800cc42:	bf00      	nop
  }
  return  speed;
 800cc44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b084      	sub	sp, #16
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc56:	2300      	movs	r3, #0
 800cc58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7f5 feec 	bl	8002a42 <HAL_HCD_ResetPort>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f000 f8ff 	bl	800ce74 <USBH_Get_USB_Status>
 800cc76:	4603      	mov	r3, r0
 800cc78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc96:	78fa      	ldrb	r2, [r7, #3]
 800cc98:	4611      	mov	r1, r2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7f5 fef3 	bl	8002a86 <HAL_HCD_HC_GetXferCount>
 800cca0:	4603      	mov	r3, r0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ccaa:	b590      	push	{r4, r7, lr}
 800ccac:	b089      	sub	sp, #36	; 0x24
 800ccae:	af04      	add	r7, sp, #16
 800ccb0:	6078      	str	r0, [r7, #4]
 800ccb2:	4608      	mov	r0, r1
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	4603      	mov	r3, r0
 800ccba:	70fb      	strb	r3, [r7, #3]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	70bb      	strb	r3, [r7, #2]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ccd2:	787c      	ldrb	r4, [r7, #1]
 800ccd4:	78ba      	ldrb	r2, [r7, #2]
 800ccd6:	78f9      	ldrb	r1, [r7, #3]
 800ccd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ccda:	9302      	str	r3, [sp, #8]
 800ccdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	4623      	mov	r3, r4
 800ccea:	f7f5 fb56 	bl	800239a <HAL_HCD_HC_Init>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 f8bd 	bl	800ce74 <USBH_Get_USB_Status>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd90      	pop	{r4, r7, pc}

0800cd08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	460b      	mov	r3, r1
 800cd12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd22:	78fa      	ldrb	r2, [r7, #3]
 800cd24:	4611      	mov	r1, r2
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7f5 fbc6 	bl	80024b8 <HAL_HCD_HC_Halt>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd30:	7bfb      	ldrb	r3, [r7, #15]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f000 f89e 	bl	800ce74 <USBH_Get_USB_Status>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cd46:	b590      	push	{r4, r7, lr}
 800cd48:	b089      	sub	sp, #36	; 0x24
 800cd4a:	af04      	add	r7, sp, #16
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	4608      	mov	r0, r1
 800cd50:	4611      	mov	r1, r2
 800cd52:	461a      	mov	r2, r3
 800cd54:	4603      	mov	r3, r0
 800cd56:	70fb      	strb	r3, [r7, #3]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	70bb      	strb	r3, [r7, #2]
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cd6e:	787c      	ldrb	r4, [r7, #1]
 800cd70:	78ba      	ldrb	r2, [r7, #2]
 800cd72:	78f9      	ldrb	r1, [r7, #3]
 800cd74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd78:	9303      	str	r3, [sp, #12]
 800cd7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd7c:	9302      	str	r3, [sp, #8]
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd80:	9301      	str	r3, [sp, #4]
 800cd82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	4623      	mov	r3, r4
 800cd8a:	f7f5 fbb9 	bl	8002500 <HAL_HCD_HC_SubmitRequest>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f000 f86d 	bl	800ce74 <USBH_Get_USB_Status>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd90      	pop	{r4, r7, pc}

0800cda8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdba:	78fa      	ldrb	r2, [r7, #3]
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7f5 fe4d 	bl	8002a5e <HAL_HCD_HC_GetURBState>
 800cdc4:	4603      	mov	r3, r0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d103      	bne.n	800cdec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cde4:	78fb      	ldrb	r3, [r7, #3]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 f870 	bl	800cecc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cdec:	20c8      	movs	r0, #200	; 0xc8
 800cdee:	f7f4 fcdb 	bl	80017a8 <HAL_Delay>
  return USBH_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	70fb      	strb	r3, [r7, #3]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce12:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ce14:	78fb      	ldrb	r3, [r7, #3]
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	212c      	movs	r1, #44	; 0x2c
 800ce1a:	fb01 f303 	mul.w	r3, r1, r3
 800ce1e:	4413      	add	r3, r2
 800ce20:	333b      	adds	r3, #59	; 0x3b
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d009      	beq.n	800ce3c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ce28:	78fb      	ldrb	r3, [r7, #3]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	212c      	movs	r1, #44	; 0x2c
 800ce2e:	fb01 f303 	mul.w	r3, r1, r3
 800ce32:	4413      	add	r3, r2
 800ce34:	3354      	adds	r3, #84	; 0x54
 800ce36:	78ba      	ldrb	r2, [r7, #2]
 800ce38:	701a      	strb	r2, [r3, #0]
 800ce3a:	e008      	b.n	800ce4e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ce3c:	78fb      	ldrb	r3, [r7, #3]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	212c      	movs	r1, #44	; 0x2c
 800ce42:	fb01 f303 	mul.w	r3, r1, r3
 800ce46:	4413      	add	r3, r2
 800ce48:	3355      	adds	r3, #85	; 0x55
 800ce4a:	78ba      	ldrb	r2, [r7, #2]
 800ce4c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7f4 fc9f 	bl	80017a8 <HAL_Delay>
}
 800ce6a:	bf00      	nop
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
	...

0800ce74 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce82:	79fb      	ldrb	r3, [r7, #7]
 800ce84:	2b03      	cmp	r3, #3
 800ce86:	d817      	bhi.n	800ceb8 <USBH_Get_USB_Status+0x44>
 800ce88:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <USBH_Get_USB_Status+0x1c>)
 800ce8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8e:	bf00      	nop
 800ce90:	0800cea1 	.word	0x0800cea1
 800ce94:	0800cea7 	.word	0x0800cea7
 800ce98:	0800cead 	.word	0x0800cead
 800ce9c:	0800ceb3 	.word	0x0800ceb3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	73fb      	strb	r3, [r7, #15]
    break;
 800cea4:	e00b      	b.n	800cebe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cea6:	2302      	movs	r3, #2
 800cea8:	73fb      	strb	r3, [r7, #15]
    break;
 800ceaa:	e008      	b.n	800cebe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ceac:	2301      	movs	r3, #1
 800ceae:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb0:	e005      	b.n	800cebe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ceb2:	2302      	movs	r3, #2
 800ceb4:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb6:	e002      	b.n	800cebe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ceb8:	2302      	movs	r3, #2
 800ceba:	73fb      	strb	r3, [r7, #15]
    break;
 800cebc:	bf00      	nop
  }
  return usb_status;
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3714      	adds	r7, #20
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ced6:	79fb      	ldrb	r3, [r7, #7]
 800ced8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ceda:	79fb      	ldrb	r3, [r7, #7]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d102      	bne.n	800cee6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cee0:	2301      	movs	r3, #1
 800cee2:	73fb      	strb	r3, [r7, #15]
 800cee4:	e001      	b.n	800ceea <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cee6:	2300      	movs	r3, #0
 800cee8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ceea:	7bfb      	ldrb	r3, [r7, #15]
 800ceec:	461a      	mov	r2, r3
 800ceee:	2110      	movs	r1, #16
 800cef0:	4803      	ldr	r0, [pc, #12]	; (800cf00 <MX_DriverVbusHS+0x34>)
 800cef2:	f7f5 f9bd 	bl	8002270 <HAL_GPIO_WritePin>
}
 800cef6:	bf00      	nop
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	40020800 	.word	0x40020800

0800cf04 <__errno>:
 800cf04:	4b01      	ldr	r3, [pc, #4]	; (800cf0c <__errno+0x8>)
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	20000030 	.word	0x20000030

0800cf10 <__libc_init_array>:
 800cf10:	b570      	push	{r4, r5, r6, lr}
 800cf12:	4d0d      	ldr	r5, [pc, #52]	; (800cf48 <__libc_init_array+0x38>)
 800cf14:	4c0d      	ldr	r4, [pc, #52]	; (800cf4c <__libc_init_array+0x3c>)
 800cf16:	1b64      	subs	r4, r4, r5
 800cf18:	10a4      	asrs	r4, r4, #2
 800cf1a:	2600      	movs	r6, #0
 800cf1c:	42a6      	cmp	r6, r4
 800cf1e:	d109      	bne.n	800cf34 <__libc_init_array+0x24>
 800cf20:	4d0b      	ldr	r5, [pc, #44]	; (800cf50 <__libc_init_array+0x40>)
 800cf22:	4c0c      	ldr	r4, [pc, #48]	; (800cf54 <__libc_init_array+0x44>)
 800cf24:	f000 f93c 	bl	800d1a0 <_init>
 800cf28:	1b64      	subs	r4, r4, r5
 800cf2a:	10a4      	asrs	r4, r4, #2
 800cf2c:	2600      	movs	r6, #0
 800cf2e:	42a6      	cmp	r6, r4
 800cf30:	d105      	bne.n	800cf3e <__libc_init_array+0x2e>
 800cf32:	bd70      	pop	{r4, r5, r6, pc}
 800cf34:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf38:	4798      	blx	r3
 800cf3a:	3601      	adds	r6, #1
 800cf3c:	e7ee      	b.n	800cf1c <__libc_init_array+0xc>
 800cf3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf42:	4798      	blx	r3
 800cf44:	3601      	adds	r6, #1
 800cf46:	e7f2      	b.n	800cf2e <__libc_init_array+0x1e>
 800cf48:	0800d264 	.word	0x0800d264
 800cf4c:	0800d264 	.word	0x0800d264
 800cf50:	0800d264 	.word	0x0800d264
 800cf54:	0800d268 	.word	0x0800d268

0800cf58 <malloc>:
 800cf58:	4b02      	ldr	r3, [pc, #8]	; (800cf64 <malloc+0xc>)
 800cf5a:	4601      	mov	r1, r0
 800cf5c:	6818      	ldr	r0, [r3, #0]
 800cf5e:	f000 b88d 	b.w	800d07c <_malloc_r>
 800cf62:	bf00      	nop
 800cf64:	20000030 	.word	0x20000030

0800cf68 <free>:
 800cf68:	4b02      	ldr	r3, [pc, #8]	; (800cf74 <free+0xc>)
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	f000 b819 	b.w	800cfa4 <_free_r>
 800cf72:	bf00      	nop
 800cf74:	20000030 	.word	0x20000030

0800cf78 <memcpy>:
 800cf78:	440a      	add	r2, r1
 800cf7a:	4291      	cmp	r1, r2
 800cf7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf80:	d100      	bne.n	800cf84 <memcpy+0xc>
 800cf82:	4770      	bx	lr
 800cf84:	b510      	push	{r4, lr}
 800cf86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf8e:	4291      	cmp	r1, r2
 800cf90:	d1f9      	bne.n	800cf86 <memcpy+0xe>
 800cf92:	bd10      	pop	{r4, pc}

0800cf94 <memset>:
 800cf94:	4402      	add	r2, r0
 800cf96:	4603      	mov	r3, r0
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d100      	bne.n	800cf9e <memset+0xa>
 800cf9c:	4770      	bx	lr
 800cf9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cfa2:	e7f9      	b.n	800cf98 <memset+0x4>

0800cfa4 <_free_r>:
 800cfa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfa6:	2900      	cmp	r1, #0
 800cfa8:	d044      	beq.n	800d034 <_free_r+0x90>
 800cfaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfae:	9001      	str	r0, [sp, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f1a1 0404 	sub.w	r4, r1, #4
 800cfb6:	bfb8      	it	lt
 800cfb8:	18e4      	addlt	r4, r4, r3
 800cfba:	f000 f8e3 	bl	800d184 <__malloc_lock>
 800cfbe:	4a1e      	ldr	r2, [pc, #120]	; (800d038 <_free_r+0x94>)
 800cfc0:	9801      	ldr	r0, [sp, #4]
 800cfc2:	6813      	ldr	r3, [r2, #0]
 800cfc4:	b933      	cbnz	r3, 800cfd4 <_free_r+0x30>
 800cfc6:	6063      	str	r3, [r4, #4]
 800cfc8:	6014      	str	r4, [r2, #0]
 800cfca:	b003      	add	sp, #12
 800cfcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfd0:	f000 b8de 	b.w	800d190 <__malloc_unlock>
 800cfd4:	42a3      	cmp	r3, r4
 800cfd6:	d908      	bls.n	800cfea <_free_r+0x46>
 800cfd8:	6825      	ldr	r5, [r4, #0]
 800cfda:	1961      	adds	r1, r4, r5
 800cfdc:	428b      	cmp	r3, r1
 800cfde:	bf01      	itttt	eq
 800cfe0:	6819      	ldreq	r1, [r3, #0]
 800cfe2:	685b      	ldreq	r3, [r3, #4]
 800cfe4:	1949      	addeq	r1, r1, r5
 800cfe6:	6021      	streq	r1, [r4, #0]
 800cfe8:	e7ed      	b.n	800cfc6 <_free_r+0x22>
 800cfea:	461a      	mov	r2, r3
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	b10b      	cbz	r3, 800cff4 <_free_r+0x50>
 800cff0:	42a3      	cmp	r3, r4
 800cff2:	d9fa      	bls.n	800cfea <_free_r+0x46>
 800cff4:	6811      	ldr	r1, [r2, #0]
 800cff6:	1855      	adds	r5, r2, r1
 800cff8:	42a5      	cmp	r5, r4
 800cffa:	d10b      	bne.n	800d014 <_free_r+0x70>
 800cffc:	6824      	ldr	r4, [r4, #0]
 800cffe:	4421      	add	r1, r4
 800d000:	1854      	adds	r4, r2, r1
 800d002:	42a3      	cmp	r3, r4
 800d004:	6011      	str	r1, [r2, #0]
 800d006:	d1e0      	bne.n	800cfca <_free_r+0x26>
 800d008:	681c      	ldr	r4, [r3, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	6053      	str	r3, [r2, #4]
 800d00e:	4421      	add	r1, r4
 800d010:	6011      	str	r1, [r2, #0]
 800d012:	e7da      	b.n	800cfca <_free_r+0x26>
 800d014:	d902      	bls.n	800d01c <_free_r+0x78>
 800d016:	230c      	movs	r3, #12
 800d018:	6003      	str	r3, [r0, #0]
 800d01a:	e7d6      	b.n	800cfca <_free_r+0x26>
 800d01c:	6825      	ldr	r5, [r4, #0]
 800d01e:	1961      	adds	r1, r4, r5
 800d020:	428b      	cmp	r3, r1
 800d022:	bf04      	itt	eq
 800d024:	6819      	ldreq	r1, [r3, #0]
 800d026:	685b      	ldreq	r3, [r3, #4]
 800d028:	6063      	str	r3, [r4, #4]
 800d02a:	bf04      	itt	eq
 800d02c:	1949      	addeq	r1, r1, r5
 800d02e:	6021      	streq	r1, [r4, #0]
 800d030:	6054      	str	r4, [r2, #4]
 800d032:	e7ca      	b.n	800cfca <_free_r+0x26>
 800d034:	b003      	add	sp, #12
 800d036:	bd30      	pop	{r4, r5, pc}
 800d038:	20008e00 	.word	0x20008e00

0800d03c <sbrk_aligned>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	4e0e      	ldr	r6, [pc, #56]	; (800d078 <sbrk_aligned+0x3c>)
 800d040:	460c      	mov	r4, r1
 800d042:	6831      	ldr	r1, [r6, #0]
 800d044:	4605      	mov	r5, r0
 800d046:	b911      	cbnz	r1, 800d04e <sbrk_aligned+0x12>
 800d048:	f000 f88c 	bl	800d164 <_sbrk_r>
 800d04c:	6030      	str	r0, [r6, #0]
 800d04e:	4621      	mov	r1, r4
 800d050:	4628      	mov	r0, r5
 800d052:	f000 f887 	bl	800d164 <_sbrk_r>
 800d056:	1c43      	adds	r3, r0, #1
 800d058:	d00a      	beq.n	800d070 <sbrk_aligned+0x34>
 800d05a:	1cc4      	adds	r4, r0, #3
 800d05c:	f024 0403 	bic.w	r4, r4, #3
 800d060:	42a0      	cmp	r0, r4
 800d062:	d007      	beq.n	800d074 <sbrk_aligned+0x38>
 800d064:	1a21      	subs	r1, r4, r0
 800d066:	4628      	mov	r0, r5
 800d068:	f000 f87c 	bl	800d164 <_sbrk_r>
 800d06c:	3001      	adds	r0, #1
 800d06e:	d101      	bne.n	800d074 <sbrk_aligned+0x38>
 800d070:	f04f 34ff 	mov.w	r4, #4294967295
 800d074:	4620      	mov	r0, r4
 800d076:	bd70      	pop	{r4, r5, r6, pc}
 800d078:	20008e04 	.word	0x20008e04

0800d07c <_malloc_r>:
 800d07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d080:	1ccd      	adds	r5, r1, #3
 800d082:	f025 0503 	bic.w	r5, r5, #3
 800d086:	3508      	adds	r5, #8
 800d088:	2d0c      	cmp	r5, #12
 800d08a:	bf38      	it	cc
 800d08c:	250c      	movcc	r5, #12
 800d08e:	2d00      	cmp	r5, #0
 800d090:	4607      	mov	r7, r0
 800d092:	db01      	blt.n	800d098 <_malloc_r+0x1c>
 800d094:	42a9      	cmp	r1, r5
 800d096:	d905      	bls.n	800d0a4 <_malloc_r+0x28>
 800d098:	230c      	movs	r3, #12
 800d09a:	603b      	str	r3, [r7, #0]
 800d09c:	2600      	movs	r6, #0
 800d09e:	4630      	mov	r0, r6
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a4:	4e2e      	ldr	r6, [pc, #184]	; (800d160 <_malloc_r+0xe4>)
 800d0a6:	f000 f86d 	bl	800d184 <__malloc_lock>
 800d0aa:	6833      	ldr	r3, [r6, #0]
 800d0ac:	461c      	mov	r4, r3
 800d0ae:	bb34      	cbnz	r4, 800d0fe <_malloc_r+0x82>
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	4638      	mov	r0, r7
 800d0b4:	f7ff ffc2 	bl	800d03c <sbrk_aligned>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	d14d      	bne.n	800d15a <_malloc_r+0xde>
 800d0be:	6834      	ldr	r4, [r6, #0]
 800d0c0:	4626      	mov	r6, r4
 800d0c2:	2e00      	cmp	r6, #0
 800d0c4:	d140      	bne.n	800d148 <_malloc_r+0xcc>
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	eb04 0803 	add.w	r8, r4, r3
 800d0d0:	f000 f848 	bl	800d164 <_sbrk_r>
 800d0d4:	4580      	cmp	r8, r0
 800d0d6:	d13a      	bne.n	800d14e <_malloc_r+0xd2>
 800d0d8:	6821      	ldr	r1, [r4, #0]
 800d0da:	3503      	adds	r5, #3
 800d0dc:	1a6d      	subs	r5, r5, r1
 800d0de:	f025 0503 	bic.w	r5, r5, #3
 800d0e2:	3508      	adds	r5, #8
 800d0e4:	2d0c      	cmp	r5, #12
 800d0e6:	bf38      	it	cc
 800d0e8:	250c      	movcc	r5, #12
 800d0ea:	4629      	mov	r1, r5
 800d0ec:	4638      	mov	r0, r7
 800d0ee:	f7ff ffa5 	bl	800d03c <sbrk_aligned>
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	d02b      	beq.n	800d14e <_malloc_r+0xd2>
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	442b      	add	r3, r5
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	e00e      	b.n	800d11c <_malloc_r+0xa0>
 800d0fe:	6822      	ldr	r2, [r4, #0]
 800d100:	1b52      	subs	r2, r2, r5
 800d102:	d41e      	bmi.n	800d142 <_malloc_r+0xc6>
 800d104:	2a0b      	cmp	r2, #11
 800d106:	d916      	bls.n	800d136 <_malloc_r+0xba>
 800d108:	1961      	adds	r1, r4, r5
 800d10a:	42a3      	cmp	r3, r4
 800d10c:	6025      	str	r5, [r4, #0]
 800d10e:	bf18      	it	ne
 800d110:	6059      	strne	r1, [r3, #4]
 800d112:	6863      	ldr	r3, [r4, #4]
 800d114:	bf08      	it	eq
 800d116:	6031      	streq	r1, [r6, #0]
 800d118:	5162      	str	r2, [r4, r5]
 800d11a:	604b      	str	r3, [r1, #4]
 800d11c:	4638      	mov	r0, r7
 800d11e:	f104 060b 	add.w	r6, r4, #11
 800d122:	f000 f835 	bl	800d190 <__malloc_unlock>
 800d126:	f026 0607 	bic.w	r6, r6, #7
 800d12a:	1d23      	adds	r3, r4, #4
 800d12c:	1af2      	subs	r2, r6, r3
 800d12e:	d0b6      	beq.n	800d09e <_malloc_r+0x22>
 800d130:	1b9b      	subs	r3, r3, r6
 800d132:	50a3      	str	r3, [r4, r2]
 800d134:	e7b3      	b.n	800d09e <_malloc_r+0x22>
 800d136:	6862      	ldr	r2, [r4, #4]
 800d138:	42a3      	cmp	r3, r4
 800d13a:	bf0c      	ite	eq
 800d13c:	6032      	streq	r2, [r6, #0]
 800d13e:	605a      	strne	r2, [r3, #4]
 800d140:	e7ec      	b.n	800d11c <_malloc_r+0xa0>
 800d142:	4623      	mov	r3, r4
 800d144:	6864      	ldr	r4, [r4, #4]
 800d146:	e7b2      	b.n	800d0ae <_malloc_r+0x32>
 800d148:	4634      	mov	r4, r6
 800d14a:	6876      	ldr	r6, [r6, #4]
 800d14c:	e7b9      	b.n	800d0c2 <_malloc_r+0x46>
 800d14e:	230c      	movs	r3, #12
 800d150:	603b      	str	r3, [r7, #0]
 800d152:	4638      	mov	r0, r7
 800d154:	f000 f81c 	bl	800d190 <__malloc_unlock>
 800d158:	e7a1      	b.n	800d09e <_malloc_r+0x22>
 800d15a:	6025      	str	r5, [r4, #0]
 800d15c:	e7de      	b.n	800d11c <_malloc_r+0xa0>
 800d15e:	bf00      	nop
 800d160:	20008e00 	.word	0x20008e00

0800d164 <_sbrk_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4d06      	ldr	r5, [pc, #24]	; (800d180 <_sbrk_r+0x1c>)
 800d168:	2300      	movs	r3, #0
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	602b      	str	r3, [r5, #0]
 800d170:	f7f4 fa66 	bl	8001640 <_sbrk>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d102      	bne.n	800d17e <_sbrk_r+0x1a>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	b103      	cbz	r3, 800d17e <_sbrk_r+0x1a>
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	bd38      	pop	{r3, r4, r5, pc}
 800d180:	20008e08 	.word	0x20008e08

0800d184 <__malloc_lock>:
 800d184:	4801      	ldr	r0, [pc, #4]	; (800d18c <__malloc_lock+0x8>)
 800d186:	f000 b809 	b.w	800d19c <__retarget_lock_acquire_recursive>
 800d18a:	bf00      	nop
 800d18c:	20008e0c 	.word	0x20008e0c

0800d190 <__malloc_unlock>:
 800d190:	4801      	ldr	r0, [pc, #4]	; (800d198 <__malloc_unlock+0x8>)
 800d192:	f000 b804 	b.w	800d19e <__retarget_lock_release_recursive>
 800d196:	bf00      	nop
 800d198:	20008e0c 	.word	0x20008e0c

0800d19c <__retarget_lock_acquire_recursive>:
 800d19c:	4770      	bx	lr

0800d19e <__retarget_lock_release_recursive>:
 800d19e:	4770      	bx	lr

0800d1a0 <_init>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	bf00      	nop
 800d1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a6:	bc08      	pop	{r3}
 800d1a8:	469e      	mov	lr, r3
 800d1aa:	4770      	bx	lr

0800d1ac <_fini>:
 800d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ae:	bf00      	nop
 800d1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1b2:	bc08      	pop	{r3}
 800d1b4:	469e      	mov	lr, r3
 800d1b6:	4770      	bx	lr
