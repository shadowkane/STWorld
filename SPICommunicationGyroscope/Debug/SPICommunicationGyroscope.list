
SPICommunicationGyroscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08010998  08010998  00020998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f34  08010f34  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08010f34  08010f34  00020f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f3c  08010f3c  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f3c  08010f3c  00020f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f40  08010f40  00020f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08010f44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00008d7c  20000200  20000200  00030200  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008f7c  20008f7c  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c358  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e4b  00000000  00000000  0005c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002380  00000000  00000000  000623d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002130  00000000  00000000  00064758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf7f  00000000  00000000  00066888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c7dc  00000000  00000000  00093807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6dd9  00000000  00000000  000bffe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b6dbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a764  00000000  00000000  001b6e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010980 	.word	0x08010980

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	08010980 	.word	0x08010980

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <vApplicationGetIdleTaskMemory+0x30>)
 8000f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000021c 	.word	0x2000021c
 8000f30:	20000274 	.word	0x20000274

08000f34 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f3c:	1d39      	adds	r1, r7, #4
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	2201      	movs	r2, #1
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <__io_putchar+0x20>)
 8000f46:	f006 f95c 	bl	8007202 <HAL_UART_Transmit>
  return ch;
 8000f4a:	687b      	ldr	r3, [r7, #4]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000658 	.word	0x20000658

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b08e      	sub	sp, #56	; 0x38
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f001 f9a1 	bl	80022a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f841 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 faaf 	bl	80014c8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f6a:	f000 f8a7 	bl	80010bc <MX_CRC_Init>
  MX_DMA2D_Init();
 8000f6e:	f000 f8b9 	bl	80010e4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f72:	f000 fa59 	bl	8001428 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f76:	f000 f8e7 	bl	8001148 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f7a:	f000 f925 	bl	80011c8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f7e:	f000 f9a3 	bl	80012c8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f82:	f000 f9d7 	bl	8001334 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f86:	f000 fa25 	bl	80013d4 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096/4);
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <main+0x80>)
 8000f8c:	f107 041c 	add.w	r4, r7, #28
 8000f90:	461d      	mov	r5, r3
 8000f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00a f996 	bl	800b2d6 <osThreadCreate>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <main+0x84>)
 8000fae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(GyroTask, StartGyroTask, osPriorityNormal, 0, 4096/4);
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <main+0x88>)
 8000fb2:	463c      	mov	r4, r7
 8000fb4:	461d      	mov	r5, r3
 8000fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GyroTaskHandle = osThreadCreate(osThread(GyroTask), NULL);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00a f985 	bl	800b2d6 <osThreadCreate>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <main+0x8c>)
 8000fd0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fd2:	f00a f979 	bl	800b2c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <main+0x7e>
 8000fd8:	080109b0 	.word	0x080109b0
 8000fdc:	200006d0 	.word	0x200006d0
 8000fe0:	080109cc 	.word	0x080109cc
 8000fe4:	200006d4 	.word	0x200006d4

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	; 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00c ff2c 	bl	800de54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <SystemClock_Config+0xcc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <SystemClock_Config+0xcc>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <SystemClock_Config+0xcc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <SystemClock_Config+0xd0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001034:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <SystemClock_Config+0xd0>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001048:	2301      	movs	r3, #1
 800104a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800104c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800105c:	2304      	movs	r3, #4
 800105e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001060:	2348      	movs	r3, #72	; 0x48
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001064:	2302      	movs	r3, #2
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001068:	2303      	movs	r3, #3
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4618      	mov	r0, r3
 8001072:	f003 ff91 	bl	8004f98 <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800107c:	f000 fbf2 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2302      	movs	r3, #2
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2102      	movs	r1, #2
 800109c:	4618      	mov	r0, r3
 800109e:	f004 f9f3 	bl	8005488 <HAL_RCC_ClockConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010a8:	f000 fbdc 	bl	8001864 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3750      	adds	r7, #80	; 0x50
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_CRC_Init+0x20>)
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <MX_CRC_Init+0x24>)
 80010c4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_CRC_Init+0x20>)
 80010c8:	f001 fa34 	bl	8002534 <HAL_CRC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80010d2:	f000 fbc7 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000474 	.word	0x20000474
 80010e0:	40023000 	.word	0x40023000

080010e4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_DMA2D_Init+0x5c>)
 80010ea:	4a16      	ldr	r2, [pc, #88]	; (8001144 <MX_DMA2D_Init+0x60>)
 80010ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_DMA2D_Init+0x5c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_DMA2D_Init+0x5c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_DMA2D_Init+0x5c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_DMA2D_Init+0x5c>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_DMA2D_Init+0x5c>)
 8001108:	2200      	movs	r2, #0
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_DMA2D_Init+0x5c>)
 800110e:	2200      	movs	r2, #0
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_DMA2D_Init+0x5c>)
 8001114:	2200      	movs	r2, #0
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_DMA2D_Init+0x5c>)
 800111a:	f001 fa27 	bl	800256c <HAL_DMA2D_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001124:	f000 fb9e 	bl	8001864 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001128:	2101      	movs	r1, #1
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_DMA2D_Init+0x5c>)
 800112c:	f001 fb78 	bl	8002820 <HAL_DMA2D_ConfigLayer>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001136:	f000 fb95 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000047c 	.word	0x2000047c
 8001144:	4002b000 	.word	0x4002b000

08001148 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <MX_I2C3_Init+0x74>)
 800114e:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <MX_I2C3_Init+0x78>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_I2C3_Init+0x74>)
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <MX_I2C3_Init+0x7c>)
 8001156:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_I2C3_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_I2C3_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_I2C3_Init+0x74>)
 8001166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_I2C3_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_I2C3_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_I2C3_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_I2C3_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_I2C3_Init+0x74>)
 8001186:	f003 f9df 	bl	8004548 <HAL_I2C_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001190:	f000 fb68 	bl	8001864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <MX_I2C3_Init+0x74>)
 8001198:	f003 fb1a 	bl	80047d0 <HAL_I2CEx_ConfigAnalogFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80011a2:	f000 fb5f 	bl	8001864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_I2C3_Init+0x74>)
 80011aa:	f003 fb4d 	bl	8004848 <HAL_I2CEx_ConfigDigitalFilter>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80011b4:	f000 fb56 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200004bc 	.word	0x200004bc
 80011c0:	40005c00 	.word	0x40005c00
 80011c4:	000186a0 	.word	0x000186a0

080011c8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2234      	movs	r2, #52	; 0x34
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00c fe3d 	bl	800de54 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <MX_LTDC_Init+0xf8>)
 80011dc:	4a39      	ldr	r2, [pc, #228]	; (80012c4 <MX_LTDC_Init+0xfc>)
 80011de:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <MX_LTDC_Init+0xf8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <MX_LTDC_Init+0xf8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <MX_LTDC_Init+0xf8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <MX_LTDC_Init+0xf8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <MX_LTDC_Init+0xf8>)
 80011fa:	2209      	movs	r2, #9
 80011fc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <MX_LTDC_Init+0xf8>)
 8001200:	2201      	movs	r2, #1
 8001202:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <MX_LTDC_Init+0xf8>)
 8001206:	221d      	movs	r2, #29
 8001208:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <MX_LTDC_Init+0xf8>)
 800120c:	2203      	movs	r2, #3
 800120e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <MX_LTDC_Init+0xf8>)
 8001212:	f240 120d 	movw	r2, #269	; 0x10d
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <MX_LTDC_Init+0xf8>)
 800121a:	f240 1243 	movw	r2, #323	; 0x143
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <MX_LTDC_Init+0xf8>)
 8001222:	f240 1217 	movw	r2, #279	; 0x117
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MX_LTDC_Init+0xf8>)
 800122a:	f240 1247 	movw	r2, #327	; 0x147
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <MX_LTDC_Init+0xf8>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_LTDC_Init+0xf8>)
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_LTDC_Init+0xf8>)
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001248:	481d      	ldr	r0, [pc, #116]	; (80012c0 <MX_LTDC_Init+0xf8>)
 800124a:	f003 fb3d 	bl	80048c8 <HAL_LTDC_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001254:	f000 fb06 	bl	8001864 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800125c:	23f0      	movs	r3, #240	; 0xf0
 800125e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001264:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001268:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800126a:	2302      	movs	r3, #2
 800126c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800126e:	23ff      	movs	r3, #255	; 0xff
 8001270:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001276:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800127a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800127c:	2307      	movs	r3, #7
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001280:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001286:	23f0      	movs	r3, #240	; 0xf0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800128a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_LTDC_Init+0xf8>)
 80012aa:	f003 fc9f 	bl	8004bec <HAL_LTDC_ConfigLayer>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80012b4:	f000 fad6 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	; 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000510 	.word	0x20000510
 80012c4:	40016800 	.word	0x40016800

080012c8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_SPI5_Init+0x64>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <MX_SPI5_Init+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_SPI5_Init+0x64>)
 80012d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_SPI5_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_SPI5_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_SPI5_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_SPI5_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_SPI5_Init+0x64>)
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SPI5_Init+0x64>)
 80012fc:	2218      	movs	r2, #24
 80012fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MX_SPI5_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SPI5_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <MX_SPI5_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_SPI5_Init+0x64>)
 8001314:	220a      	movs	r2, #10
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_SPI5_Init+0x64>)
 800131a:	f004 fcfb 	bl	8005d14 <HAL_SPI_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001324:	f000 fa9e 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200005b8 	.word	0x200005b8
 8001330:	40015000 	.word	0x40015000

08001334 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_TIM1_Init+0x98>)
 8001352:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <MX_TIM1_Init+0x9c>)
 8001354:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_TIM1_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_TIM1_Init+0x98>)
 8001364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001368:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_TIM1_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_TIM1_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_TIM1_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800137c:	4813      	ldr	r0, [pc, #76]	; (80013cc <MX_TIM1_Init+0x98>)
 800137e:	f005 fa71 	bl	8006864 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001388:	f000 fa6c 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_TIM1_Init+0x98>)
 800139a:	f005 fc2b 	bl	8006bf4 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013a4:	f000 fa5e 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM1_Init+0x98>)
 80013b6:	f005 fe47 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fa50 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000610 	.word	0x20000610
 80013d0:	40010000 	.word	0x40010000

080013d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_USART1_UART_Init+0x50>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 800140c:	f005 feac 	bl	8007168 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001416:	f000 fa25 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000658 	.word	0x20000658
 8001424:	40011000 	.word	0x40011000

08001428 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_FMC_Init+0x98>)
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <MX_FMC_Init+0x9c>)
 8001444:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <MX_FMC_Init+0x98>)
 8001448:	2201      	movs	r2, #1
 800144a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_FMC_Init+0x98>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_FMC_Init+0x98>)
 8001454:	2204      	movs	r2, #4
 8001456:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_FMC_Init+0x98>)
 800145a:	2210      	movs	r2, #16
 800145c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_FMC_Init+0x98>)
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_FMC_Init+0x98>)
 8001466:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800146a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_FMC_Init+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_FMC_Init+0x98>)
 8001474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001478:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_FMC_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_FMC_Init+0x98>)
 8001482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001488:	2302      	movs	r3, #2
 800148a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800148c:	2307      	movs	r3, #7
 800148e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001490:	2304      	movs	r3, #4
 8001492:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001494:	2307      	movs	r3, #7
 8001496:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001498:	2303      	movs	r3, #3
 800149a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_FMC_Init+0x98>)
 80014aa:	f004 fbff 	bl	8005cac <HAL_SDRAM_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80014b4:	f000 f9d6 	bl	8001864 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000069c 	.word	0x2000069c
 80014c4:	a0000140 	.word	0xa0000140

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
 80014e2:	4b7b      	ldr	r3, [pc, #492]	; (80016d0 <MX_GPIO_Init+0x208>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a7a      	ldr	r2, [pc, #488]	; (80016d0 <MX_GPIO_Init+0x208>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <MX_GPIO_Init+0x208>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	4b74      	ldr	r3, [pc, #464]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a73      	ldr	r2, [pc, #460]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b71      	ldr	r3, [pc, #452]	; (80016d0 <MX_GPIO_Init+0x208>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <MX_GPIO_Init+0x208>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a6c      	ldr	r2, [pc, #432]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a65      	ldr	r2, [pc, #404]	; (80016d0 <MX_GPIO_Init+0x208>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a5e      	ldr	r2, [pc, #376]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <MX_GPIO_Init+0x208>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <MX_GPIO_Init+0x208>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a50      	ldr	r2, [pc, #320]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001590:	f043 0310 	orr.w	r3, r3, #16
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <MX_GPIO_Init+0x208>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <MX_GPIO_Init+0x208>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a49      	ldr	r2, [pc, #292]	; (80016d0 <MX_GPIO_Init+0x208>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <MX_GPIO_Init+0x208>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2116      	movs	r1, #22
 80015c2:	4844      	ldr	r0, [pc, #272]	; (80016d4 <MX_GPIO_Init+0x20c>)
 80015c4:	f001 fb82 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	4842      	ldr	r0, [pc, #264]	; (80016d8 <MX_GPIO_Init+0x210>)
 80015ce:	f001 fb7d 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80015d8:	4840      	ldr	r0, [pc, #256]	; (80016dc <MX_GPIO_Init+0x214>)
 80015da:	f001 fb77 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80015e4:	483e      	ldr	r0, [pc, #248]	; (80016e0 <MX_GPIO_Init+0x218>)
 80015e6:	f001 fb71 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80015ea:	2316      	movs	r3, #22
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4834      	ldr	r0, [pc, #208]	; (80016d4 <MX_GPIO_Init+0x20c>)
 8001602:	f001 f99f 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001606:	f248 0307 	movw	r3, #32775	; 0x8007
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800160c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	4619      	mov	r1, r3
 800161c:	482e      	ldr	r0, [pc, #184]	; (80016d8 <MX_GPIO_Init+0x210>)
 800161e:	f001 f991 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	4827      	ldr	r0, [pc, #156]	; (80016d8 <MX_GPIO_Init+0x210>)
 800163a:	f001 f983 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800163e:	2320      	movs	r3, #32
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001642:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <MX_GPIO_Init+0x20c>)
 8001654:	f001 f976 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001658:	2304      	movs	r3, #4
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	481e      	ldr	r0, [pc, #120]	; (80016e4 <MX_GPIO_Init+0x21c>)
 800166c:	f001 f96a 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001676:	2300      	movs	r3, #0
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	4815      	ldr	r0, [pc, #84]	; (80016dc <MX_GPIO_Init+0x214>)
 8001686:	f001 f95d 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800168a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a0:	4619      	mov	r1, r3
 80016a2:	480e      	ldr	r0, [pc, #56]	; (80016dc <MX_GPIO_Init+0x214>)
 80016a4:	f001 f94e 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80016a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_GPIO_Init+0x218>)
 80016c2:	f001 f93f 	bl	8002944 <HAL_GPIO_Init>

}
 80016c6:	bf00      	nop
 80016c8:	3738      	adds	r7, #56	; 0x38
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021800 	.word	0x40021800
 80016e4:	40020400 	.word	0x40020400

080016e8 <StartGyroTask>:

/* USER CODE BEGIN 4 */
void StartGyroTask(void const * argument)
{
 80016e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016ec:	b08a      	sub	sp, #40	; 0x28
 80016ee:	af04      	add	r7, sp, #16
 80016f0:	6078      	str	r0, [r7, #4]
	float x;
	float y;
	float z;

	if(bGyroIsExist(&hspi5))
 80016f2:	4825      	ldr	r0, [pc, #148]	; (8001788 <StartGyroTask+0xa0>)
 80016f4:	f007 fa3e 	bl	8008b74 <bGyroIsExist>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <StartGyroTask+0x1e>
	{
		printf("Gyroscope exist\r\n");
 80016fe:	4823      	ldr	r0, [pc, #140]	; (800178c <StartGyroTask+0xa4>)
 8001700:	f00d f980 	bl	800ea04 <puts>
 8001704:	e002      	b.n	800170c <StartGyroTask+0x24>
	}
	else
	{
		printf("Gyroscope wasn't found\r\n");
 8001706:	4822      	ldr	r0, [pc, #136]	; (8001790 <StartGyroTask+0xa8>)
 8001708:	f00d f97c 	bl	800ea04 <puts>
	}

	if(bGyroConfiguration(&hspi5))
 800170c:	481e      	ldr	r0, [pc, #120]	; (8001788 <StartGyroTask+0xa0>)
 800170e:	f007 fa69 	bl	8008be4 <bGyroConfiguration>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <StartGyroTask+0x38>
	{
		printf("Gyroscope config: success\r\n");
 8001718:	481e      	ldr	r0, [pc, #120]	; (8001794 <StartGyroTask+0xac>)
 800171a:	f00d f973 	bl	800ea04 <puts>
 800171e:	e002      	b.n	8001726 <StartGyroTask+0x3e>
	}
	else
	{
		printf("Gyroscope config: failed\r\n");
 8001720:	481d      	ldr	r0, [pc, #116]	; (8001798 <StartGyroTask+0xb0>)
 8001722:	f00d f96f 	bl	800ea04 <puts>
	}

	for(;;)
	{
		if(bGayroGetXYZ(&hspi5, &x, &y, &z))
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	f107 0210 	add.w	r2, r7, #16
 800172e:	f107 0114 	add.w	r1, r7, #20
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <StartGyroTask+0xa0>)
 8001734:	f007 fa86 	bl	8008c44 <bGayroGetXYZ>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d01b      	beq.n	8001776 <StartGyroTask+0x8e>
		{
			printf("Gyroscope measurement => X:%f | Y:%f | Z:%f\r\n",x, y, z);
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff11 	bl	8000568 <__aeabi_f2d>
 8001746:	4680      	mov	r8, r0
 8001748:	4689      	mov	r9, r1
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff0b 	bl	8000568 <__aeabi_f2d>
 8001752:	4604      	mov	r4, r0
 8001754:	460d      	mov	r5, r1
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe ff05 	bl	8000568 <__aeabi_f2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001766:	e9cd 4500 	strd	r4, r5, [sp]
 800176a:	4642      	mov	r2, r8
 800176c:	464b      	mov	r3, r9
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <StartGyroTask+0xb4>)
 8001770:	f00d f8c2 	bl	800e8f8 <iprintf>
 8001774:	e002      	b.n	800177c <StartGyroTask+0x94>
		}
		else
		{
			printf("Gyroscope failed to read measurement\r\n");
 8001776:	480a      	ldr	r0, [pc, #40]	; (80017a0 <StartGyroTask+0xb8>)
 8001778:	f00d f944 	bl	800ea04 <puts>
		}

		osDelay(1000);
 800177c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001780:	f009 fdf5 	bl	800b36e <osDelay>
		if(bGayroGetXYZ(&hspi5, &x, &y, &z))
 8001784:	e7cf      	b.n	8001726 <StartGyroTask+0x3e>
 8001786:	bf00      	nop
 8001788:	200005b8 	.word	0x200005b8
 800178c:	080109e8 	.word	0x080109e8
 8001790:	080109fc 	.word	0x080109fc
 8001794:	08010a14 	.word	0x08010a14
 8001798:	08010a30 	.word	0x08010a30
 800179c:	08010a4c 	.word	0x08010a4c
 80017a0:	08010a7c 	.word	0x08010a7c

080017a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80017ac:	f00c f802 	bl	800d7b4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  uint8_t cMsg[30]="Button clicked\r\n";
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <StartDefaultTask+0x8c>)
 80017b2:	f107 0408 	add.w	r4, r7, #8
 80017b6:	461d      	mov	r5, r3
 80017b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	7023      	strb	r3, [r4, #0]
 80017c0:	f107 0319 	add.w	r3, r7, #25
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	731a      	strb	r2, [r3, #12]
  uint8_t bButtonClicked = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Infinite loop */
  for(;;)
  {
	// if button change state to clicked, then save the new state of the button then send message and toggle LED4
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&&bButtonClicked==0)
 80017d4:	2101      	movs	r1, #1
 80017d6:	4817      	ldr	r0, [pc, #92]	; (8001834 <StartDefaultTask+0x90>)
 80017d8:	f001 fa60 	bl	8002c9c <HAL_GPIO_ReadPin>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d013      	beq.n	800180a <StartDefaultTask+0x66>
 80017e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10f      	bne.n	800180a <StartDefaultTask+0x66>
	{
		// save button state
		bButtonClicked=1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		// toggle LED4
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80017f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f4:	4810      	ldr	r0, [pc, #64]	; (8001838 <StartDefaultTask+0x94>)
 80017f6:	f001 fa82 	bl	8002cfe <HAL_GPIO_TogglePin>
		// Send message
		HAL_UART_Transmit(&huart1, cMsg, sizeof(cMsg), 100);
 80017fa:	f107 0108 	add.w	r1, r7, #8
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	221e      	movs	r2, #30
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <StartDefaultTask+0x98>)
 8001804:	f005 fcfd 	bl	8007202 <HAL_UART_Transmit>
 8001808:	e00d      	b.n	8001826 <StartDefaultTask+0x82>
	}
	// if button released then save the new state of the button
	else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0 && bButtonClicked==1)
 800180a:	2101      	movs	r1, #1
 800180c:	4809      	ldr	r0, [pc, #36]	; (8001834 <StartDefaultTask+0x90>)
 800180e:	f001 fa45 	bl	8002c9c <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d106      	bne.n	8001826 <StartDefaultTask+0x82>
 8001818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800181c:	2b01      	cmp	r3, #1
 800181e:	d102      	bne.n	8001826 <StartDefaultTask+0x82>
	{
		// save button state
		bButtonClicked=0;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    osDelay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f009 fda1 	bl	800b36e <osDelay>
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)&&bButtonClicked==0)
 800182c:	e7d2      	b.n	80017d4 <StartDefaultTask+0x30>
 800182e:	bf00      	nop
 8001830:	08010aa4 	.word	0x08010aa4
 8001834:	40020000 	.word	0x40020000
 8001838:	40021800 	.word	0x40021800
 800183c:	20000658 	.word	0x20000658

08001840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001852:	f000 fd49 	bl	80022e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40001000 	.word	0x40001000

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	e7fe      	b.n	800186c <Error_Handler+0x8>
	...

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_MspInit+0x54>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <HAL_MspInit+0x54>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_MspInit+0x54>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_MspInit+0x54>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_MspInit+0x54>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_MspInit+0x54>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	210f      	movs	r1, #15
 80018b2:	f06f 0001 	mvn.w	r0, #1
 80018b6:	f000 fe13 	bl	80024e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_CRC_MspInit+0x3c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10d      	bne.n	80018f6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_CRC_MspInit+0x40>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_CRC_MspInit+0x40>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_CRC_MspInit+0x40>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023000 	.word	0x40023000
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_DMA2D_MspInit+0x48>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d115      	bne.n	800194a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_DMA2D_MspInit+0x4c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_DMA2D_MspInit+0x4c>)
 8001928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_DMA2D_MspInit+0x4c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2105      	movs	r1, #5
 800193e:	205a      	movs	r0, #90	; 0x5a
 8001940:	f000 fdce 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001944:	205a      	movs	r0, #90	; 0x5a
 8001946:	f000 fde7 	bl	8002518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	4002b000 	.word	0x4002b000
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <HAL_I2C_MspInit+0xc4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d14b      	bne.n	8001a16 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <HAL_I2C_MspInit+0xc8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <HAL_I2C_MspInit+0xc8>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_I2C_MspInit+0xc8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_I2C_MspInit+0xc8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_I2C_MspInit+0xc8>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_I2C_MspInit+0xc8>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80019b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019bc:	2312      	movs	r3, #18
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019c8:	2304      	movs	r3, #4
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4815      	ldr	r0, [pc, #84]	; (8001a28 <HAL_I2C_MspInit+0xcc>)
 80019d4:	f000 ffb6 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80019d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019de:	2312      	movs	r3, #18
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019ea:	2304      	movs	r3, #4
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <HAL_I2C_MspInit+0xd0>)
 80019f6:	f000 ffa5 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_I2C_MspInit+0xc8>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_I2C_MspInit+0xc8>)
 8001a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_I2C_MspInit+0xc8>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40005c00 	.word	0x40005c00
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020000 	.word	0x40020000

08001a30 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b09a      	sub	sp, #104	; 0x68
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4c:	2230      	movs	r2, #48	; 0x30
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00c f9ff 	bl	800de54 <memset>
  if(hltdc->Instance==LTDC)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a85      	ldr	r2, [pc, #532]	; (8001c70 <HAL_LTDC_MspInit+0x240>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	f040 8102 	bne.w	8001c66 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a62:	2308      	movs	r3, #8
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001a66:	2332      	movs	r3, #50	; 0x32
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 ff58 	bl	800592c <HAL_RCCEx_PeriphCLKConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001a82:	f7ff feef 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	4b7a      	ldr	r3, [pc, #488]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a79      	ldr	r2, [pc, #484]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001a90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b77      	ldr	r3, [pc, #476]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a72      	ldr	r2, [pc, #456]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001aac:	f043 0320 	orr.w	r3, r3, #32
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a6b      	ldr	r2, [pc, #428]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b69      	ldr	r3, [pc, #420]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a64      	ldr	r2, [pc, #400]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a5d      	ldr	r2, [pc, #372]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b5b      	ldr	r3, [pc, #364]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a56      	ldr	r2, [pc, #344]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b54      	ldr	r3, [pc, #336]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a4f      	ldr	r2, [pc, #316]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <HAL_LTDC_MspInit+0x244>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b5c:	230e      	movs	r3, #14
 8001b5e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b64:	4619      	mov	r1, r3
 8001b66:	4844      	ldr	r0, [pc, #272]	; (8001c78 <HAL_LTDC_MspInit+0x248>)
 8001b68:	f000 feec 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001b6c:	f641 0358 	movw	r3, #6232	; 0x1858
 8001b70:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b7e:	230e      	movs	r3, #14
 8001b80:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b86:	4619      	mov	r1, r3
 8001b88:	483c      	ldr	r0, [pc, #240]	; (8001c7c <HAL_LTDC_MspInit+0x24c>)
 8001b8a:	f000 fedb 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b9e:	2309      	movs	r3, #9
 8001ba0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4835      	ldr	r0, [pc, #212]	; (8001c80 <HAL_LTDC_MspInit+0x250>)
 8001baa:	f000 fecb 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001bae:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bb2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bc0:	230e      	movs	r3, #14
 8001bc2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc8:	4619      	mov	r1, r3
 8001bca:	482d      	ldr	r0, [pc, #180]	; (8001c80 <HAL_LTDC_MspInit+0x250>)
 8001bcc:	f000 feba 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001bd0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001bd4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001be2:	230e      	movs	r3, #14
 8001be4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001be6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bea:	4619      	mov	r1, r3
 8001bec:	4825      	ldr	r0, [pc, #148]	; (8001c84 <HAL_LTDC_MspInit+0x254>)
 8001bee:	f000 fea9 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001bf2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001bf6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c04:	230e      	movs	r3, #14
 8001c06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	481e      	ldr	r0, [pc, #120]	; (8001c88 <HAL_LTDC_MspInit+0x258>)
 8001c10:	f000 fe98 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001c14:	2348      	movs	r3, #72	; 0x48
 8001c16:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c24:	230e      	movs	r3, #14
 8001c26:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4817      	ldr	r0, [pc, #92]	; (8001c8c <HAL_LTDC_MspInit+0x25c>)
 8001c30:	f000 fe88 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001c34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c38:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c46:	2309      	movs	r3, #9
 8001c48:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480c      	ldr	r0, [pc, #48]	; (8001c84 <HAL_LTDC_MspInit+0x254>)
 8001c52:	f000 fe77 	bl	8002944 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	2058      	movs	r0, #88	; 0x58
 8001c5c:	f000 fc40 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c60:	2058      	movs	r0, #88	; 0x58
 8001c62:	f000 fc59 	bl	8002518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001c66:	bf00      	nop
 8001c68:	3768      	adds	r7, #104	; 0x68
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40016800 	.word	0x40016800
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40021400 	.word	0x40021400
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40021800 	.word	0x40021800
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00

08001c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_SPI_MspInit+0x84>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12c      	bne.n	8001d0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_SPI_MspInit+0x88>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <HAL_SPI_MspInit+0x88>)
 8001cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_SPI_MspInit+0x88>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_SPI_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_SPI_MspInit+0x88>)
 8001cd8:	f043 0320 	orr.w	r3, r3, #32
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_SPI_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001cea:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <HAL_SPI_MspInit+0x8c>)
 8001d08:	f000 fe1c 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40015000 	.word	0x40015000
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40021400 	.word	0x40021400

08001d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <HAL_TIM_Base_MspInit+0x3c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10d      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_TIM_Base_MspInit+0x40>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_TIM_Base_MspInit+0x40>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_TIM_Base_MspInit+0x40>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40023800 	.word	0x40023800

08001d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_UART_MspInit+0x84>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d12c      	bne.n	8001de0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_UART_MspInit+0x88>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4a17      	ldr	r2, [pc, #92]	; (8001dec <HAL_UART_MspInit+0x88>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	6453      	str	r3, [r2, #68]	; 0x44
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_UART_MspInit+0x88>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_UART_MspInit+0x88>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HAL_UART_MspInit+0x88>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_UART_MspInit+0x88>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001dbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dd0:	2307      	movs	r3, #7
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <HAL_UART_MspInit+0x8c>)
 8001ddc:	f000 fdb2 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000

08001df4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e08:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_FMC_MspInit+0x104>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d16f      	bne.n	8001ef0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001e10:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <HAL_FMC_MspInit+0x104>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_FMC_MspInit+0x108>)
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1e:	4a37      	ldr	r2, [pc, #220]	; (8001efc <HAL_FMC_MspInit+0x108>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6393      	str	r3, [r2, #56]	; 0x38
 8001e26:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_FMC_MspInit+0x108>)
 8001e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001e32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001e36:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e44:	230c      	movs	r3, #12
 8001e46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	482c      	ldr	r0, [pc, #176]	; (8001f00 <HAL_FMC_MspInit+0x10c>)
 8001e4e:	f000 fd79 	bl	8002944 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001e52:	2301      	movs	r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e62:	230c      	movs	r3, #12
 8001e64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4826      	ldr	r0, [pc, #152]	; (8001f04 <HAL_FMC_MspInit+0x110>)
 8001e6c:	f000 fd6a 	bl	8002944 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001e70:	f248 1333 	movw	r3, #33075	; 0x8133
 8001e74:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e82:	230c      	movs	r3, #12
 8001e84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	481f      	ldr	r0, [pc, #124]	; (8001f08 <HAL_FMC_MspInit+0x114>)
 8001e8c:	f000 fd5a 	bl	8002944 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001e90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e94:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4818      	ldr	r0, [pc, #96]	; (8001f0c <HAL_FMC_MspInit+0x118>)
 8001eac:	f000 fd4a 	bl	8002944 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001eb0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001eb4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4811      	ldr	r0, [pc, #68]	; (8001f10 <HAL_FMC_MspInit+0x11c>)
 8001ecc:	f000 fd3a 	bl	8002944 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001ed0:	2360      	movs	r3, #96	; 0x60
 8001ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480a      	ldr	r0, [pc, #40]	; (8001f14 <HAL_FMC_MspInit+0x120>)
 8001eea:	f000 fd2b 	bl	8002944 <HAL_GPIO_Init>
 8001eee:	e000      	b.n	8001ef2 <HAL_FMC_MspInit+0xfe>
    return;
 8001ef0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200006d8 	.word	0x200006d8
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40021400 	.word	0x40021400
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40021800 	.word	0x40021800
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40020400 	.word	0x40020400

08001f18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f20:	f7ff ff68 	bl	8001df4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	4b33      	ldr	r3, [pc, #204]	; (8002010 <HAL_InitTick+0xe4>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	4a32      	ldr	r2, [pc, #200]	; (8002010 <HAL_InitTick+0xe4>)
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4c:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_InitTick+0xe4>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f58:	f107 0210 	add.w	r2, r7, #16
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fcb0 	bl	80058c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d103      	bne.n	8001f7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f72:	f003 fc81 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8001f76:	6378      	str	r0, [r7, #52]	; 0x34
 8001f78:	e004      	b.n	8001f84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f7a:	f003 fc7d 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	4a23      	ldr	r2, [pc, #140]	; (8002014 <HAL_InitTick+0xe8>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	0c9b      	lsrs	r3, r3, #18
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_InitTick+0xec>)
 8001f94:	4a21      	ldr	r2, [pc, #132]	; (800201c <HAL_InitTick+0xf0>)
 8001f96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f98:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_InitTick+0xec>)
 8001f9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_InitTick+0xec>)
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_InitTick+0xec>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_InitTick+0xec>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_InitTick+0xec>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001fb8:	4817      	ldr	r0, [pc, #92]	; (8002018 <HAL_InitTick+0xec>)
 8001fba:	f004 fc53 	bl	8006864 <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11b      	bne.n	8002004 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001fcc:	4812      	ldr	r0, [pc, #72]	; (8002018 <HAL_InitTick+0xec>)
 8001fce:	f004 fc99 	bl	8006904 <HAL_TIM_Base_Start_IT>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d111      	bne.n	8002004 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fe0:	2036      	movs	r0, #54	; 0x36
 8001fe2:	f000 fa99 	bl	8002518 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	d808      	bhi.n	8001ffe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fec:	2200      	movs	r2, #0
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	2036      	movs	r0, #54	; 0x36
 8001ff2:	f000 fa75 	bl	80024e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <HAL_InitTick+0xf4>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e002      	b.n	8002004 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002004:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002008:	4618      	mov	r0, r3
 800200a:	3738      	adds	r7, #56	; 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	431bde83 	.word	0x431bde83
 8002018:	200006dc 	.word	0x200006dc
 800201c:	40001000 	.word	0x40001000
 8002020:	20000004 	.word	0x20000004

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <NMI_Handler+0x4>

0800202a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <MemManage_Handler+0x4>

08002036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <UsageFault_Handler+0x4>

08002042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <TIM6_DAC_IRQHandler+0x10>)
 8002056:	f004 fcc5 	bl	80069e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200006dc 	.word	0x200006dc

08002064 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <OTG_HS_IRQHandler+0x10>)
 800206a:	f001 f8cd 	bl	8003208 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20008c68 	.word	0x20008c68

08002078 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <LTDC_IRQHandler+0x10>)
 800207e:	f002 fcf3 	bl	8004a68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000510 	.word	0x20000510

0800208c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA2D_IRQHandler+0x10>)
 8002092:	f000 fab4 	bl	80025fe <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000047c 	.word	0x2000047c

080020a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
	return 1;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_kill>:

int _kill(int pid, int sig)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020ba:	f00b fe83 	bl	800ddc4 <__errno>
 80020be:	4603      	mov	r3, r0
 80020c0:	2216      	movs	r2, #22
 80020c2:	601a      	str	r2, [r3, #0]
	return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_exit>:

void _exit (int status)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffe7 	bl	80020b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020e2:	e7fe      	b.n	80020e2 <_exit+0x12>

080020e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e00a      	b.n	800210c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020f6:	f3af 8000 	nop.w
 80020fa:	4601      	mov	r1, r0
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	60ba      	str	r2, [r7, #8]
 8002102:	b2ca      	uxtb	r2, r1
 8002104:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	dbf0      	blt.n	80020f6 <_read+0x12>
	}

return len;
 8002114:	687b      	ldr	r3, [r7, #4]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e009      	b.n	8002144 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	60ba      	str	r2, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fefb 	bl	8000f34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	dbf1      	blt.n	8002130 <_write+0x12>
	}
	return len;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <_close>:

int _close(int file)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
	return -1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800217e:	605a      	str	r2, [r3, #4]
	return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_isatty>:

int _isatty(int file)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	return 1;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
	return 0;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <_sbrk+0x5c>)
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <_sbrk+0x60>)
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <_sbrk+0x64>)
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <_sbrk+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d207      	bcs.n	8002200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f0:	f00b fde8 	bl	800ddc4 <__errno>
 80021f4:	4603      	mov	r3, r0
 80021f6:	220c      	movs	r2, #12
 80021f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	e009      	b.n	8002214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <_sbrk+0x64>)
 8002210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20030000 	.word	0x20030000
 8002220:	00000400 	.word	0x00000400
 8002224:	20000724 	.word	0x20000724
 8002228:	20008f80 	.word	0x20008f80

0800222c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <SystemInit+0x20>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <SystemInit+0x20>)
 8002238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002288 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002256:	490e      	ldr	r1, [pc, #56]	; (8002290 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002258:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800225c:	e002      	b.n	8002264 <LoopCopyDataInit>

0800225e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002262:	3304      	adds	r3, #4

08002264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002268:	d3f9      	bcc.n	800225e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800226c:	4c0b      	ldr	r4, [pc, #44]	; (800229c <LoopFillZerobss+0x26>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002270:	e001      	b.n	8002276 <LoopFillZerobss>

08002272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002274:	3204      	adds	r2, #4

08002276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002278:	d3fb      	bcc.n	8002272 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800227a:	f7ff ffd7 	bl	800222c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227e:	f00b fda7 	bl	800ddd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002282:	f7fe fe69 	bl	8000f58 <main>
  bx  lr    
 8002286:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002288:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002290:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002294:	08010f44 	.word	0x08010f44
  ldr r2, =_sbss
 8002298:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800229c:	20008f7c 	.word	0x20008f7c

080022a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC_IRQHandler>
	...

080022a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <HAL_Init+0x40>)
 80022ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_Init+0x40>)
 80022ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <HAL_Init+0x40>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f000 f8fc 	bl	80024ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7ff fe2a 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d8:	f7ff faca 	bl	8001870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023c00 	.word	0x40023c00

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000008 	.word	0x20000008
 800230c:	20000728 	.word	0x20000728

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000728 	.word	0x20000728

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000008 	.word	0x20000008

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ff4c 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f2:	f7ff ff61 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 80024f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	6978      	ldr	r0, [r7, #20]
 80024fe:	f7ff ffb1 	bl	8002464 <NVIC_EncodePriority>
 8002502:	4602      	mov	r2, r0
 8002504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff80 	bl	8002410 <__NVIC_SetPriority>
}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff54 	bl	80023d4 <__NVIC_EnableIRQ>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00e      	b.n	8002564 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	795b      	ldrb	r3, [r3, #5]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff f9b6 	bl	80018c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e03b      	b.n	80025f6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff f9ba 	bl	800190c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	f023 0107 	bic.w	r1, r3, #7
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68d1      	ldr	r1, [r2, #12]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	430b      	orrs	r3, r1
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d026      	beq.n	800266e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d021      	beq.n	800266e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002638:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d026      	beq.n	80026c6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d021      	beq.n	80026c6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002690:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2220      	movs	r2, #32
 8002698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	f043 0202 	orr.w	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2204      	movs	r2, #4
 80026aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d026      	beq.n	800271e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d021      	beq.n	800271e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2208      	movs	r2, #8
 80026f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	f043 0204 	orr.w	r2, r3, #4
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2204      	movs	r2, #4
 8002702:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00e      	beq.n	8002750 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002740:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2204      	movs	r2, #4
 8002748:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f853 	bl	80027f6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d024      	beq.n	80027a4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01f      	beq.n	80027a4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002772:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2202      	movs	r2, #2
 800277a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01f      	beq.n	80027ee <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01a      	beq.n	80027ee <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027c6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2210      	movs	r2, #16
 80027ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f80e 	bl	800280a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_DMA2D_ConfigLayer+0x20>
 800283c:	2302      	movs	r3, #2
 800283e:	e079      	b.n	8002934 <HAL_DMA2D_ConfigLayer+0x114>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	3318      	adds	r3, #24
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800286a:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HAL_DMA2D_ConfigLayer+0x120>)
 800286c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b0a      	cmp	r3, #10
 8002874:	d003      	beq.n	800287e <HAL_DMA2D_ConfigLayer+0x5e>
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b09      	cmp	r3, #9
 800287c:	d107      	bne.n	800288e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e005      	b.n	800289a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	061b      	lsls	r3, r3, #24
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d120      	bne.n	80028e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	ea02 0103 	and.w	r1, r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b0a      	cmp	r3, #10
 80028c8:	d003      	beq.n	80028d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b09      	cmp	r3, #9
 80028d0:	d127      	bne.n	8002922 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
 80028e0:	e01f      	b.n	8002922 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	ea02 0103 	and.w	r1, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b0a      	cmp	r3, #10
 800290a:	d003      	beq.n	8002914 <HAL_DMA2D_ConfigLayer+0xf4>
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b09      	cmp	r3, #9
 8002912:	d106      	bne.n	8002922 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002920:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	ff03000f 	.word	0xff03000f

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e177      	b.n	8002c50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 8166 	bne.w	8002c4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	2b02      	cmp	r3, #2
 8002994:	d130      	bne.n	80029f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d017      	beq.n	8002a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d123      	bne.n	8002a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80c0 	beq.w	8002c4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae6:	4a61      	ldr	r2, [pc, #388]	; (8002c6c <HAL_GPIO_Init+0x328>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_GPIO_Init+0x32c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d037      	beq.n	8002b82 <HAL_GPIO_Init+0x23e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_GPIO_Init+0x330>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_GPIO_Init+0x23a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a56      	ldr	r2, [pc, #344]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02b      	beq.n	8002b7a <HAL_GPIO_Init+0x236>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <HAL_GPIO_Init+0x338>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d025      	beq.n	8002b76 <HAL_GPIO_Init+0x232>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a54      	ldr	r2, [pc, #336]	; (8002c80 <HAL_GPIO_Init+0x33c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01f      	beq.n	8002b72 <HAL_GPIO_Init+0x22e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a53      	ldr	r2, [pc, #332]	; (8002c84 <HAL_GPIO_Init+0x340>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d019      	beq.n	8002b6e <HAL_GPIO_Init+0x22a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_GPIO_Init+0x344>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x226>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <HAL_GPIO_Init+0x348>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x222>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a50      	ldr	r2, [pc, #320]	; (8002c90 <HAL_GPIO_Init+0x34c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x21e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4f      	ldr	r2, [pc, #316]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x21a>
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	e012      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b5e:	230a      	movs	r3, #10
 8002b60:	e010      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b62:	2308      	movs	r3, #8
 8002b64:	e00e      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b66:	2307      	movs	r3, #7
 8002b68:	e00c      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e00a      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6e:	2305      	movs	r3, #5
 8002b70:	e008      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b72:	2304      	movs	r3, #4
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b76:	2303      	movs	r3, #3
 8002b78:	e004      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b82:	2300      	movs	r3, #0
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f002 0203 	and.w	r2, r2, #3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4093      	lsls	r3, r2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b94:	4935      	ldr	r1, [pc, #212]	; (8002c6c <HAL_GPIO_Init+0x328>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc6:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bcc:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf0:	4a29      	ldr	r2, [pc, #164]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	f67f ae84 	bls.w	8002960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40022400 	.word	0x40022400
 8002c98:	40013c00 	.word	0x40013c00

08002c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e001      	b.n	8002cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d10:	887a      	ldrh	r2, [r7, #2]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4013      	ands	r3, r2
 8002d16:	041a      	lsls	r2, r3, #16
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	400b      	ands	r3, r1
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d34:	b08f      	sub	sp, #60	; 0x3c
 8002d36:	af0a      	add	r7, sp, #40	; 0x28
 8002d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e054      	b.n	8002dee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f00a fd7c 	bl	800d85c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2203      	movs	r2, #3
 8002d68:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 feea 	bl	8007b5c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	687e      	ldr	r6, [r7, #4]
 8002d90:	466d      	mov	r5, sp
 8002d92:	f106 0410 	add.w	r4, r6, #16
 8002d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002da6:	1d33      	adds	r3, r6, #4
 8002da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002daa:	6838      	ldr	r0, [r7, #0]
 8002dac:	f004 fe64 	bl	8007a78 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2101      	movs	r1, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 fee1 	bl	8007b7e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	687e      	ldr	r6, [r7, #4]
 8002dc4:	466d      	mov	r5, sp
 8002dc6:	f106 0410 	add.w	r4, r6, #16
 8002dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dda:	1d33      	adds	r3, r6, #4
 8002ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dde:	6838      	ldr	r0, [r7, #0]
 8002de0:	f005 f86a 	bl	8007eb8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002df6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002df6:	b590      	push	{r4, r7, lr}
 8002df8:	b089      	sub	sp, #36	; 0x24
 8002dfa:	af04      	add	r7, sp, #16
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	4608      	mov	r0, r1
 8002e00:	4611      	mov	r1, r2
 8002e02:	461a      	mov	r2, r3
 8002e04:	4603      	mov	r3, r0
 8002e06:	70fb      	strb	r3, [r7, #3]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70bb      	strb	r3, [r7, #2]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_HCD_HC_Init+0x28>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e076      	b.n	8002f0c <HAL_HCD_HC_Init+0x116>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	333d      	adds	r3, #61	; 0x3d
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3338      	adds	r3, #56	; 0x38
 8002e46:	787a      	ldrb	r2, [r7, #1]
 8002e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3340      	adds	r3, #64	; 0x40
 8002e58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e5a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3339      	adds	r3, #57	; 0x39
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	333f      	adds	r3, #63	; 0x3f
 8002e7c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	78ba      	ldrb	r2, [r7, #2]
 8002e86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e8a:	b2d0      	uxtb	r0, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	333a      	adds	r3, #58	; 0x3a
 8002e98:	4602      	mov	r2, r0
 8002e9a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	da09      	bge.n	8002eb8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	333b      	adds	r3, #59	; 0x3b
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e008      	b.n	8002eca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	333b      	adds	r3, #59	; 0x3b
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	333c      	adds	r3, #60	; 0x3c
 8002ed8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002edc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	787c      	ldrb	r4, [r7, #1]
 8002ee4:	78ba      	ldrb	r2, [r7, #2]
 8002ee6:	78f9      	ldrb	r1, [r7, #3]
 8002ee8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4623      	mov	r3, r4
 8002efa:	f005 f963 	bl	80081c4 <USB_HC_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd90      	pop	{r4, r7, pc}

08002f14 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_HCD_HC_Halt+0x1e>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e00f      	b.n	8002f52 <HAL_HCD_HC_Halt+0x3e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f005 fbb3 	bl	80086ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	70fb      	strb	r3, [r7, #3]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	70bb      	strb	r3, [r7, #2]
 8002f72:	4613      	mov	r3, r2
 8002f74:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	333b      	adds	r3, #59	; 0x3b
 8002f84:	78ba      	ldrb	r2, [r7, #2]
 8002f86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	333f      	adds	r3, #63	; 0x3f
 8002f96:	787a      	ldrb	r2, [r7, #1]
 8002f98:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f9a:	7c3b      	ldrb	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d112      	bne.n	8002fc6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	212c      	movs	r1, #44	; 0x2c
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	3342      	adds	r3, #66	; 0x42
 8002fae:	2203      	movs	r2, #3
 8002fb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	333d      	adds	r3, #61	; 0x3d
 8002fc0:	7f3a      	ldrb	r2, [r7, #28]
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e008      	b.n	8002fd8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3342      	adds	r3, #66	; 0x42
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	f200 80c6 	bhi.w	800316c <HAL_HCD_HC_SubmitRequest+0x210>
 8002fe0:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003159 	.word	0x08003159
 8002ff0:	0800305d 	.word	0x0800305d
 8002ff4:	080030db 	.word	0x080030db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002ff8:	7c3b      	ldrb	r3, [r7, #16]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	f040 80b8 	bne.w	8003170 <HAL_HCD_HC_SubmitRequest+0x214>
 8003000:	78bb      	ldrb	r3, [r7, #2]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 80b4 	bne.w	8003170 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003008:	8b3b      	ldrh	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	3355      	adds	r3, #85	; 0x55
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3355      	adds	r3, #85	; 0x55
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3342      	adds	r3, #66	; 0x42
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003046:	e093      	b.n	8003170 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3342      	adds	r3, #66	; 0x42
 8003056:	2202      	movs	r2, #2
 8003058:	701a      	strb	r2, [r3, #0]
      break;
 800305a:	e089      	b.n	8003170 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800305c:	78bb      	ldrb	r3, [r7, #2]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11d      	bne.n	800309e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3355      	adds	r3, #85	; 0x55
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3342      	adds	r3, #66	; 0x42
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003088:	e073      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3342      	adds	r3, #66	; 0x42
 8003098:	2202      	movs	r2, #2
 800309a:	701a      	strb	r2, [r3, #0]
      break;
 800309c:	e069      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3354      	adds	r3, #84	; 0x54
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3342      	adds	r3, #66	; 0x42
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
      break;
 80030c4:	e055      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3342      	adds	r3, #66	; 0x42
 80030d4:	2202      	movs	r2, #2
 80030d6:	701a      	strb	r2, [r3, #0]
      break;
 80030d8:	e04b      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030da:	78bb      	ldrb	r3, [r7, #2]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11d      	bne.n	800311c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3355      	adds	r3, #85	; 0x55
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3342      	adds	r3, #66	; 0x42
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003106:	e034      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3342      	adds	r3, #66	; 0x42
 8003116:	2202      	movs	r2, #2
 8003118:	701a      	strb	r2, [r3, #0]
      break;
 800311a:	e02a      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3354      	adds	r3, #84	; 0x54
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3342      	adds	r3, #66	; 0x42
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
      break;
 8003142:	e016      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3342      	adds	r3, #66	; 0x42
 8003152:	2202      	movs	r2, #2
 8003154:	701a      	strb	r2, [r3, #0]
      break;
 8003156:	e00c      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3342      	adds	r3, #66	; 0x42
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
      break;
 800316a:	e002      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800316c:	bf00      	nop
 800316e:	e000      	b.n	8003172 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003170:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	3344      	adds	r3, #68	; 0x44
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	8b3a      	ldrh	r2, [r7, #24]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	202c      	movs	r0, #44	; 0x2c
 800318c:	fb00 f303 	mul.w	r3, r0, r3
 8003190:	440b      	add	r3, r1
 8003192:	334c      	adds	r3, #76	; 0x4c
 8003194:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3360      	adds	r3, #96	; 0x60
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3350      	adds	r3, #80	; 0x50
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3339      	adds	r3, #57	; 0x39
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3361      	adds	r3, #97	; 0x61
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	222c      	movs	r2, #44	; 0x2c
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	3338      	adds	r3, #56	; 0x38
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	18d1      	adds	r1, r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	f005 f906 	bl	8008408 <USB_HC_StartXfer>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop

08003208 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f004 fe07 	bl	8007e32 <USB_GetMode>
 8003224:	4603      	mov	r3, r0
 8003226:	2b01      	cmp	r3, #1
 8003228:	f040 80f6 	bne.w	8003418 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f004 fdeb 	bl	8007e0c <USB_ReadInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80ec 	beq.w	8003416 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f004 fde2 	bl	8007e0c <USB_ReadInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003252:	d104      	bne.n	800325e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800325c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f004 fdd2 	bl	8007e0c <USB_ReadInterrupts>
 8003268:	4603      	mov	r3, r0
 800326a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003272:	d104      	bne.n	800327e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800327c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fdc2 	bl	8007e0c <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800328e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003292:	d104      	bne.n	800329e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800329c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f004 fdb2 	bl	8007e0c <USB_ReadInterrupts>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d103      	bne.n	80032ba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2202      	movs	r2, #2
 80032b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 fda4 	bl	8007e0c <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ce:	d11c      	bne.n	800330a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032d8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10f      	bne.n	800330a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80032ea:	2110      	movs	r1, #16
 80032ec:	6938      	ldr	r0, [r7, #16]
 80032ee:	f004 fc93 	bl	8007c18 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032f2:	6938      	ldr	r0, [r7, #16]
 80032f4:	f004 fcc4 	bl	8007c80 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 fe9a 	bl	8008038 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f00a fb23 	bl	800d950 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f004 fd7c 	bl	8007e0c <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331e:	d102      	bne.n	8003326 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f001 f89e 	bl	8004462 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fd6e 	bl	8007e0c <USB_ReadInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b08      	cmp	r3, #8
 8003338:	d106      	bne.n	8003348 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f00a faec 	bl	800d918 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2208      	movs	r2, #8
 8003346:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fd5d 	bl	8007e0c <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b10      	cmp	r3, #16
 800335a:	d101      	bne.n	8003360 <HAL_HCD_IRQHandler+0x158>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_HCD_IRQHandler+0x15a>
 8003360:	2300      	movs	r3, #0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0210 	bic.w	r2, r2, #16
 8003374:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 ffa1 	bl	80042be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0210 	orr.w	r2, r2, #16
 800338a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fd3b 	bl	8007e0c <USB_ReadInterrupts>
 8003396:	4603      	mov	r3, r0
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033a0:	d13a      	bne.n	8003418 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 f970 	bl	800868c <USB_HC_ReadInterrupt>
 80033ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e025      	b.n	8003400 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d018      	beq.n	80033fa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033de:	d106      	bne.n	80033ee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8ab 	bl	8003542 <HCD_HC_IN_IRQHandler>
 80033ec:	e005      	b.n	80033fa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	4619      	mov	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fbf9 	bl	8003bec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	3301      	adds	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	429a      	cmp	r2, r3
 8003408:	d3d4      	bcc.n	80033b4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003412:	615a      	str	r2, [r3, #20]
 8003414:	e000      	b.n	8003418 <HAL_HCD_IRQHandler+0x210>
      return;
 8003416:	bf00      	nop
    }
  }
}
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_HCD_Start+0x16>
 8003430:	2302      	movs	r3, #2
 8003432:	e013      	b.n	800345c <HAL_HCD_Start+0x3e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	4618      	mov	r0, r3
 8003444:	f004 fe5c 	bl	8008100 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f004 fb74 	bl	8007b3a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_HCD_Stop+0x16>
 8003476:	2302      	movs	r3, #2
 8003478:	e00d      	b.n	8003496 <HAL_HCD_Stop+0x32>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f005 fa4a 	bl	8008920 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f004 fdfe 	bl	80080ac <USB_ResetPort>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	3360      	adds	r3, #96	; 0x60
 80034d4:	781b      	ldrb	r3, [r3, #0]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3350      	adds	r3, #80	; 0x50
 80034fc:	681b      	ldr	r3, [r3, #0]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f004 fe42 	bl	80081a0 <USB_GetCurrentFrame>
 800351c:	4603      	mov	r3, r0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f004 fe1d 	bl	8008172 <USB_GetHostSpeed>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b04      	cmp	r3, #4
 8003570:	d11a      	bne.n	80035a8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357e:	461a      	mov	r2, r3
 8003580:	2304      	movs	r3, #4
 8003582:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3361      	adds	r3, #97	; 0x61
 8003592:	2206      	movs	r2, #6
 8003594:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f005 f884 	bl	80086ae <USB_HC_Halt>
 80035a6:	e0af      	b.n	8003708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035be:	d11b      	bne.n	80035f8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3361      	adds	r3, #97	; 0x61
 80035e2:	2207      	movs	r2, #7
 80035e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f005 f85c 	bl	80086ae <USB_HC_Halt>
 80035f6:	e087      	b.n	8003708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d109      	bne.n	8003622 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	461a      	mov	r2, r3
 800361c:	2320      	movs	r3, #32
 800361e:	6093      	str	r3, [r2, #8]
 8003620:	e072      	b.n	8003708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b08      	cmp	r3, #8
 8003636:	d11a      	bne.n	800366e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	2308      	movs	r3, #8
 8003648:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	3361      	adds	r3, #97	; 0x61
 8003658:	2205      	movs	r2, #5
 800365a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f005 f821 	bl	80086ae <USB_HC_Halt>
 800366c:	e04c      	b.n	8003708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d11b      	bne.n	80036be <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4413      	add	r3, r2
 800368e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003692:	461a      	mov	r2, r3
 8003694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003698:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	3361      	adds	r3, #97	; 0x61
 80036a8:	2208      	movs	r2, #8
 80036aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 fff9 	bl	80086ae <USB_HC_Halt>
 80036bc:	e024      	b.n	8003708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	2b80      	cmp	r3, #128	; 0x80
 80036d2:	d119      	bne.n	8003708 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3361      	adds	r3, #97	; 0x61
 80036f4:	2206      	movs	r2, #6
 80036f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f004 ffd3 	bl	80086ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371e:	d112      	bne.n	8003746 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f004 ffbf 	bl	80086ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4413      	add	r3, r2
 8003738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373c:	461a      	mov	r2, r3
 800373e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003742:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003744:	e24e      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	f040 80df 	bne.w	800391c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d019      	beq.n	800379a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3348      	adds	r3, #72	; 0x48
 8003774:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	0159      	lsls	r1, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	440b      	add	r3, r1
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003788:	1ad2      	subs	r2, r2, r3
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	202c      	movs	r0, #44	; 0x2c
 8003790:	fb00 f303 	mul.w	r3, r0, r3
 8003794:	440b      	add	r3, r1
 8003796:	3350      	adds	r3, #80	; 0x50
 8003798:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	3361      	adds	r3, #97	; 0x61
 80037a8:	2201      	movs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	212c      	movs	r1, #44	; 0x2c
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	335c      	adds	r3, #92	; 0x5c
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ca:	461a      	mov	r2, r3
 80037cc:	2301      	movs	r3, #1
 80037ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	333f      	adds	r3, #63	; 0x3f
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	333f      	adds	r3, #63	; 0x3f
 80037f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d111      	bne.n	800381c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f004 ff53 	bl	80086ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	461a      	mov	r2, r3
 8003816:	2310      	movs	r3, #16
 8003818:	6093      	str	r3, [r2, #8]
 800381a:	e03a      	b.n	8003892 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	333f      	adds	r3, #63	; 0x3f
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d009      	beq.n	8003844 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	333f      	adds	r3, #63	; 0x3f
 800383e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003840:	2b01      	cmp	r3, #1
 8003842:	d126      	bne.n	8003892 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	0151      	lsls	r1, r2, #5
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	440a      	add	r2, r1
 800385a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800385e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003862:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	3360      	adds	r3, #96	; 0x60
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	b2d9      	uxtb	r1, r3
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	202c      	movs	r0, #44	; 0x2c
 8003880:	fb00 f303 	mul.w	r3, r0, r3
 8003884:	4413      	add	r3, r2
 8003886:	3360      	adds	r3, #96	; 0x60
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f00a f86d 	bl	800d96c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d12b      	bne.n	80038f2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3348      	adds	r3, #72	; 0x48
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	202c      	movs	r0, #44	; 0x2c
 80038b0:	fb00 f202 	mul.w	r2, r0, r2
 80038b4:	440a      	add	r2, r1
 80038b6:	3240      	adds	r2, #64	; 0x40
 80038b8:	8812      	ldrh	r2, [r2, #0]
 80038ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 818e 	beq.w	8003be4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3354      	adds	r3, #84	; 0x54
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	f083 0301 	eor.w	r3, r3, #1
 80038dc:	b2d8      	uxtb	r0, r3
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	212c      	movs	r1, #44	; 0x2c
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	3354      	adds	r3, #84	; 0x54
 80038ec:	4602      	mov	r2, r0
 80038ee:	701a      	strb	r2, [r3, #0]
}
 80038f0:	e178      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	3354      	adds	r3, #84	; 0x54
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	f083 0301 	eor.w	r3, r3, #1
 8003906:	b2d8      	uxtb	r0, r3
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	212c      	movs	r1, #44	; 0x2c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	3354      	adds	r3, #84	; 0x54
 8003916:	4602      	mov	r2, r0
 8003918:	701a      	strb	r2, [r3, #0]
}
 800391a:	e163      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4413      	add	r3, r2
 8003924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b02      	cmp	r3, #2
 8003930:	f040 80f6 	bne.w	8003b20 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3361      	adds	r3, #97	; 0x61
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d109      	bne.n	800395c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	3360      	adds	r3, #96	; 0x60
 8003956:	2201      	movs	r2, #1
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e0c9      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b05      	cmp	r3, #5
 800396e:	d109      	bne.n	8003984 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3360      	adds	r3, #96	; 0x60
 800397e:	2205      	movs	r2, #5
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e0b5      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	3361      	adds	r3, #97	; 0x61
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b06      	cmp	r3, #6
 8003996:	d009      	beq.n	80039ac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	212c      	movs	r1, #44	; 0x2c
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	3361      	adds	r3, #97	; 0x61
 80039a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d150      	bne.n	8003a4e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	335c      	adds	r3, #92	; 0x5c
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	202c      	movs	r0, #44	; 0x2c
 80039c4:	fb00 f303 	mul.w	r3, r0, r3
 80039c8:	440b      	add	r3, r1
 80039ca:	335c      	adds	r3, #92	; 0x5c
 80039cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	335c      	adds	r3, #92	; 0x5c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d912      	bls.n	8003a08 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	335c      	adds	r3, #92	; 0x5c
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3360      	adds	r3, #96	; 0x60
 8003a02:	2204      	movs	r2, #4
 8003a04:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a06:	e073      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	3360      	adds	r3, #96	; 0x60
 8003a16:	2202      	movs	r2, #2
 8003a18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a30:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a38:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a46:	461a      	mov	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a4c:	e050      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	212c      	movs	r1, #44	; 0x2c
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	4413      	add	r3, r2
 8003a5a:	3361      	adds	r3, #97	; 0x61
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d122      	bne.n	8003aa8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	212c      	movs	r1, #44	; 0x2c
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3360      	adds	r3, #96	; 0x60
 8003a70:	2202      	movs	r2, #2
 8003a72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e023      	b.n	8003af0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3361      	adds	r3, #97	; 0x61
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b07      	cmp	r3, #7
 8003aba:	d119      	bne.n	8003af0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	335c      	adds	r3, #92	; 0x5c
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	202c      	movs	r0, #44	; 0x2c
 8003ad4:	fb00 f303 	mul.w	r3, r0, r3
 8003ad8:	440b      	add	r3, r1
 8003ada:	335c      	adds	r3, #92	; 0x5c
 8003adc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	212c      	movs	r1, #44	; 0x2c
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	3360      	adds	r3, #96	; 0x60
 8003aec:	2204      	movs	r2, #4
 8003aee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	461a      	mov	r2, r3
 8003afe:	2302      	movs	r3, #2
 8003b00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	b2d9      	uxtb	r1, r3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	202c      	movs	r0, #44	; 0x2c
 8003b0c:	fb00 f303 	mul.w	r3, r0, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	3360      	adds	r3, #96	; 0x60
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f009 ff27 	bl	800d96c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b1e:	e061      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d156      	bne.n	8003be4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	333f      	adds	r3, #63	; 0x3f
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d111      	bne.n	8003b6e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	335c      	adds	r3, #92	; 0x5c
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 fda1 	bl	80086ae <USB_HC_Halt>
 8003b6c:	e031      	b.n	8003bd2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	212c      	movs	r1, #44	; 0x2c
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	333f      	adds	r3, #63	; 0x3f
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	333f      	adds	r3, #63	; 0x3f
 8003b90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d11d      	bne.n	8003bd2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	335c      	adds	r3, #92	; 0x5c
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d110      	bne.n	8003bd2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3361      	adds	r3, #97	; 0x61
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f004 fd6e 	bl	80086ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	461a      	mov	r2, r3
 8003be0:	2310      	movs	r3, #16
 8003be2:	6093      	str	r3, [r2, #8]
}
 8003be4:	bf00      	nop
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d11a      	bne.n	8003c52 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3361      	adds	r3, #97	; 0x61
 8003c3c:	2206      	movs	r2, #6
 8003c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 fd2f 	bl	80086ae <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003c50:	e331      	b.n	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d12e      	bne.n	8003cc6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	461a      	mov	r2, r3
 8003c76:	2320      	movs	r3, #32
 8003c78:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	333d      	adds	r3, #61	; 0x3d
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	f040 8313 	bne.w	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	333d      	adds	r3, #61	; 0x3d
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	3360      	adds	r3, #96	; 0x60
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f004 fcf5 	bl	80086ae <USB_HC_Halt>
}
 8003cc4:	e2f7      	b.n	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cdc:	d112      	bne.n	8003d04 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cea:	461a      	mov	r2, r3
 8003cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f004 fcd6 	bl	80086ae <USB_HC_Halt>
}
 8003d02:	e2d8      	b.n	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d140      	bne.n	8003d9c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	335c      	adds	r3, #92	; 0x5c
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b40      	cmp	r3, #64	; 0x40
 8003d40:	d111      	bne.n	8003d66 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	333d      	adds	r3, #61	; 0x3d
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d60:	461a      	mov	r2, r3
 8003d62:	2340      	movs	r3, #64	; 0x40
 8003d64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d72:	461a      	mov	r2, r3
 8003d74:	2301      	movs	r3, #1
 8003d76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	3361      	adds	r3, #97	; 0x61
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f004 fc8a 	bl	80086ae <USB_HC_Halt>
}
 8003d9a:	e28c      	b.n	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d12c      	bne.n	8003e0c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3361      	adds	r3, #97	; 0x61
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	212c      	movs	r1, #44	; 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	333d      	adds	r3, #61	; 0x3d
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	212c      	movs	r1, #44	; 0x2c
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	335c      	adds	r3, #92	; 0x5c
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f004 fc5b 	bl	80086ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	461a      	mov	r2, r3
 8003e06:	2340      	movs	r3, #64	; 0x40
 8003e08:	6093      	str	r3, [r2, #8]
}
 8003e0a:	e254      	b.n	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d11a      	bne.n	8003e58 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2308      	movs	r3, #8
 8003e32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3361      	adds	r3, #97	; 0x61
 8003e42:	2205      	movs	r2, #5
 8003e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f004 fc2c 	bl	80086ae <USB_HC_Halt>
}
 8003e56:	e22e      	b.n	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d140      	bne.n	8003ef0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	335c      	adds	r3, #92	; 0x5c
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	212c      	movs	r1, #44	; 0x2c
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3361      	adds	r3, #97	; 0x61
 8003e8e:	2203      	movs	r2, #3
 8003e90:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	333d      	adds	r3, #61	; 0x3d
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d112      	bne.n	8003ecc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	333c      	adds	r3, #60	; 0x3c
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d108      	bne.n	8003ecc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	333d      	adds	r3, #61	; 0x3d
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 fbe9 	bl	80086ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2310      	movs	r3, #16
 8003eec:	6093      	str	r3, [r2, #8]
}
 8003eee:	e1e2      	b.n	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d164      	bne.n	8003fd0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d111      	bne.n	8003f32 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3361      	adds	r3, #97	; 0x61
 8003f1c:	2206      	movs	r2, #6
 8003f1e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f004 fbbf 	bl	80086ae <USB_HC_Halt>
 8003f30:	e044      	b.n	8003fbc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	212c      	movs	r1, #44	; 0x2c
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	335c      	adds	r3, #92	; 0x5c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	202c      	movs	r0, #44	; 0x2c
 8003f4a:	fb00 f303 	mul.w	r3, r0, r3
 8003f4e:	440b      	add	r3, r1
 8003f50:	335c      	adds	r3, #92	; 0x5c
 8003f52:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	212c      	movs	r1, #44	; 0x2c
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	335c      	adds	r3, #92	; 0x5c
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d920      	bls.n	8003faa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	335c      	adds	r3, #92	; 0x5c
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	212c      	movs	r1, #44	; 0x2c
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	4413      	add	r3, r2
 8003f86:	3360      	adds	r3, #96	; 0x60
 8003f88:	2204      	movs	r2, #4
 8003f8a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	b2d9      	uxtb	r1, r3
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	202c      	movs	r0, #44	; 0x2c
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3360      	adds	r3, #96	; 0x60
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f009 fce2 	bl	800d96c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fa8:	e008      	b.n	8003fbc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3360      	adds	r3, #96	; 0x60
 8003fb8:	2202      	movs	r2, #2
 8003fba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	6093      	str	r3, [r2, #8]
}
 8003fce:	e172      	b.n	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe6:	d11b      	bne.n	8004020 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3361      	adds	r3, #97	; 0x61
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f004 fb52 	bl	80086ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	461a      	mov	r2, r3
 8004018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800401c:	6093      	str	r3, [r2, #8]
}
 800401e:	e14a      	b.n	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	4413      	add	r3, r2
 8004028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b02      	cmp	r3, #2
 8004034:	f040 813f 	bne.w	80042b6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3361      	adds	r3, #97	; 0x61
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d17d      	bne.n	8004148 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	3360      	adds	r3, #96	; 0x60
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	333f      	adds	r3, #63	; 0x3f
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d00a      	beq.n	8004088 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	333f      	adds	r3, #63	; 0x3f
 8004080:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004082:	2b03      	cmp	r3, #3
 8004084:	f040 8100 	bne.w	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d113      	bne.n	80040b8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3355      	adds	r3, #85	; 0x55
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	f083 0301 	eor.w	r3, r3, #1
 80040a4:	b2d8      	uxtb	r0, r3
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	212c      	movs	r1, #44	; 0x2c
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	4413      	add	r3, r2
 80040b2:	3355      	adds	r3, #85	; 0x55
 80040b4:	4602      	mov	r2, r0
 80040b6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	f040 80e3 	bne.w	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	334c      	adds	r3, #76	; 0x4c
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80d8 	beq.w	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	334c      	adds	r3, #76	; 0x4c
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	202c      	movs	r0, #44	; 0x2c
 80040ee:	fb00 f202 	mul.w	r2, r0, r2
 80040f2:	440a      	add	r2, r1
 80040f4:	3240      	adds	r2, #64	; 0x40
 80040f6:	8812      	ldrh	r2, [r2, #0]
 80040f8:	4413      	add	r3, r2
 80040fa:	3b01      	subs	r3, #1
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	202c      	movs	r0, #44	; 0x2c
 8004102:	fb00 f202 	mul.w	r2, r0, r2
 8004106:	440a      	add	r2, r1
 8004108:	3240      	adds	r2, #64	; 0x40
 800410a:	8812      	ldrh	r2, [r2, #0]
 800410c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80b5 	beq.w	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	212c      	movs	r1, #44	; 0x2c
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	3355      	adds	r3, #85	; 0x55
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	f083 0301 	eor.w	r3, r3, #1
 8004132:	b2d8      	uxtb	r0, r3
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3355      	adds	r3, #85	; 0x55
 8004142:	4602      	mov	r2, r0
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e09f      	b.n	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3361      	adds	r3, #97	; 0x61
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d109      	bne.n	8004170 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	212c      	movs	r1, #44	; 0x2c
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4413      	add	r3, r2
 8004168:	3360      	adds	r3, #96	; 0x60
 800416a:	2202      	movs	r2, #2
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e08b      	b.n	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	212c      	movs	r1, #44	; 0x2c
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	3361      	adds	r3, #97	; 0x61
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d109      	bne.n	8004198 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	212c      	movs	r1, #44	; 0x2c
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	3360      	adds	r3, #96	; 0x60
 8004192:	2202      	movs	r2, #2
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e077      	b.n	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3361      	adds	r3, #97	; 0x61
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	d109      	bne.n	80041c0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3360      	adds	r3, #96	; 0x60
 80041ba:	2205      	movs	r2, #5
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e063      	b.n	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3361      	adds	r3, #97	; 0x61
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b06      	cmp	r3, #6
 80041d2:	d009      	beq.n	80041e8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	212c      	movs	r1, #44	; 0x2c
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	4413      	add	r3, r2
 80041e0:	3361      	adds	r3, #97	; 0x61
 80041e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d14f      	bne.n	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	212c      	movs	r1, #44	; 0x2c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	335c      	adds	r3, #92	; 0x5c
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	202c      	movs	r0, #44	; 0x2c
 8004200:	fb00 f303 	mul.w	r3, r0, r3
 8004204:	440b      	add	r3, r1
 8004206:	335c      	adds	r3, #92	; 0x5c
 8004208:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	335c      	adds	r3, #92	; 0x5c
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d912      	bls.n	8004244 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	335c      	adds	r3, #92	; 0x5c
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3360      	adds	r3, #96	; 0x60
 800423e:	2204      	movs	r2, #4
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	e021      	b.n	8004288 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	3360      	adds	r3, #96	; 0x60
 8004252:	2202      	movs	r2, #2
 8004254:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	4413      	add	r3, r2
 800425e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800426c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004274:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	461a      	mov	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	4413      	add	r3, r2
 8004290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004294:	461a      	mov	r2, r3
 8004296:	2302      	movs	r3, #2
 8004298:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	b2d9      	uxtb	r1, r3
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	202c      	movs	r0, #44	; 0x2c
 80042a4:	fb00 f303 	mul.w	r3, r0, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	3360      	adds	r3, #96	; 0x60
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f009 fb5b 	bl	800d96c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80042b6:	bf00      	nop
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b08a      	sub	sp, #40	; 0x28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	0c5b      	lsrs	r3, r3, #17
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d004      	beq.n	8004304 <HCD_RXQLVL_IRQHandler+0x46>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b05      	cmp	r3, #5
 80042fe:	f000 80a9 	beq.w	8004454 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004302:	e0aa      	b.n	800445a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80a6 	beq.w	8004458 <HCD_RXQLVL_IRQHandler+0x19a>
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3344      	adds	r3, #68	; 0x44
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 809b 	beq.w	8004458 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3350      	adds	r3, #80	; 0x50
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	441a      	add	r2, r3
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	202c      	movs	r0, #44	; 0x2c
 800433c:	fb00 f303 	mul.w	r3, r0, r3
 8004340:	440b      	add	r3, r1
 8004342:	334c      	adds	r3, #76	; 0x4c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d87a      	bhi.n	8004440 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	3344      	adds	r3, #68	; 0x44
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	b292      	uxth	r2, r2
 8004362:	4619      	mov	r1, r3
 8004364:	f003 fcfa 	bl	8007d5c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	3344      	adds	r3, #68	; 0x44
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	441a      	add	r2, r3
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	202c      	movs	r0, #44	; 0x2c
 8004382:	fb00 f303 	mul.w	r3, r0, r3
 8004386:	440b      	add	r3, r1
 8004388:	3344      	adds	r3, #68	; 0x44
 800438a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3350      	adds	r3, #80	; 0x50
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	441a      	add	r2, r3
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	202c      	movs	r0, #44	; 0x2c
 80043a6:	fb00 f303 	mul.w	r3, r0, r3
 80043aa:	440b      	add	r3, r1
 80043ac:	3350      	adds	r3, #80	; 0x50
 80043ae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	0cdb      	lsrs	r3, r3, #19
 80043c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	212c      	movs	r1, #44	; 0x2c
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	3340      	adds	r3, #64	; 0x40
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4293      	cmp	r3, r2
 80043dc:	d13c      	bne.n	8004458 <HCD_RXQLVL_IRQHandler+0x19a>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d039      	beq.n	8004458 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004402:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	212c      	movs	r1, #44	; 0x2c
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	4413      	add	r3, r2
 8004422:	3354      	adds	r3, #84	; 0x54
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	f083 0301 	eor.w	r3, r3, #1
 800442a:	b2d8      	uxtb	r0, r3
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	212c      	movs	r1, #44	; 0x2c
 8004432:	fb01 f303 	mul.w	r3, r1, r3
 8004436:	4413      	add	r3, r2
 8004438:	3354      	adds	r3, #84	; 0x54
 800443a:	4602      	mov	r2, r0
 800443c:	701a      	strb	r2, [r3, #0]
      break;
 800443e:	e00b      	b.n	8004458 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	212c      	movs	r1, #44	; 0x2c
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	3360      	adds	r3, #96	; 0x60
 800444e:	2204      	movs	r2, #4
 8004450:	701a      	strb	r2, [r3, #0]
      break;
 8004452:	e001      	b.n	8004458 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004458:	bf00      	nop
  }
}
 800445a:	bf00      	nop
 800445c:	3728      	adds	r7, #40	; 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800448e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b02      	cmp	r3, #2
 8004498:	d10b      	bne.n	80044b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d102      	bne.n	80044aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f009 fa45 	bl	800d934 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d132      	bne.n	8004522 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f043 0308 	orr.w	r3, r3, #8
 80044c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d126      	bne.n	800451c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d113      	bne.n	80044fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80044dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044e0:	d106      	bne.n	80044f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2102      	movs	r1, #2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f003 fda5 	bl	8008038 <USB_InitFSLSPClkSel>
 80044ee:	e011      	b.n	8004514 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f003 fd9e 	bl	8008038 <USB_InitFSLSPClkSel>
 80044fc:	e00a      	b.n	8004514 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d106      	bne.n	8004514 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800450c:	461a      	mov	r2, r3
 800450e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004512:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f009 fa3b 	bl	800d990 <HAL_HCD_PortEnabled_Callback>
 800451a:	e002      	b.n	8004522 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f009 fa45 	bl	800d9ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d103      	bne.n	8004534 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f043 0320 	orr.w	r3, r3, #32
 8004532:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6013      	str	r3, [r2, #0]
}
 8004540:	bf00      	nop
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e12b      	b.n	80047b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fd f9f4 	bl	800195c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	; 0x24
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800459a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045ac:	f001 f964 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 80045b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4a81      	ldr	r2, [pc, #516]	; (80047bc <HAL_I2C_Init+0x274>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d807      	bhi.n	80045cc <HAL_I2C_Init+0x84>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a80      	ldr	r2, [pc, #512]	; (80047c0 <HAL_I2C_Init+0x278>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	bf94      	ite	ls
 80045c4:	2301      	movls	r3, #1
 80045c6:	2300      	movhi	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e006      	b.n	80045da <HAL_I2C_Init+0x92>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a7d      	ldr	r2, [pc, #500]	; (80047c4 <HAL_I2C_Init+0x27c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	bf94      	ite	ls
 80045d4:	2301      	movls	r3, #1
 80045d6:	2300      	movhi	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e0e7      	b.n	80047b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a78      	ldr	r2, [pc, #480]	; (80047c8 <HAL_I2C_Init+0x280>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	0c9b      	lsrs	r3, r3, #18
 80045ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a6a      	ldr	r2, [pc, #424]	; (80047bc <HAL_I2C_Init+0x274>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d802      	bhi.n	800461c <HAL_I2C_Init+0xd4>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	3301      	adds	r3, #1
 800461a:	e009      	b.n	8004630 <HAL_I2C_Init+0xe8>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	4a69      	ldr	r2, [pc, #420]	; (80047cc <HAL_I2C_Init+0x284>)
 8004628:	fba2 2303 	umull	r2, r3, r2, r3
 800462c:	099b      	lsrs	r3, r3, #6
 800462e:	3301      	adds	r3, #1
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	430b      	orrs	r3, r1
 8004636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004642:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	495c      	ldr	r1, [pc, #368]	; (80047bc <HAL_I2C_Init+0x274>)
 800464c:	428b      	cmp	r3, r1
 800464e:	d819      	bhi.n	8004684 <HAL_I2C_Init+0x13c>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1e59      	subs	r1, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	fbb1 f3f3 	udiv	r3, r1, r3
 800465e:	1c59      	adds	r1, r3, #1
 8004660:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004664:	400b      	ands	r3, r1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_I2C_Init+0x138>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1e59      	subs	r1, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	fbb1 f3f3 	udiv	r3, r1, r3
 8004678:	3301      	adds	r3, #1
 800467a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467e:	e051      	b.n	8004724 <HAL_I2C_Init+0x1dc>
 8004680:	2304      	movs	r3, #4
 8004682:	e04f      	b.n	8004724 <HAL_I2C_Init+0x1dc>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d111      	bne.n	80046b0 <HAL_I2C_Init+0x168>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1e58      	subs	r0, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	440b      	add	r3, r1
 800469a:	fbb0 f3f3 	udiv	r3, r0, r3
 800469e:	3301      	adds	r3, #1
 80046a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e012      	b.n	80046d6 <HAL_I2C_Init+0x18e>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1e58      	subs	r0, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	0099      	lsls	r1, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c6:	3301      	adds	r3, #1
 80046c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_I2C_Init+0x196>
 80046da:	2301      	movs	r3, #1
 80046dc:	e022      	b.n	8004724 <HAL_I2C_Init+0x1dc>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10e      	bne.n	8004704 <HAL_I2C_Init+0x1bc>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1e58      	subs	r0, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6859      	ldr	r1, [r3, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	440b      	add	r3, r1
 80046f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f8:	3301      	adds	r3, #1
 80046fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004702:	e00f      	b.n	8004724 <HAL_I2C_Init+0x1dc>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	1e58      	subs	r0, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	0099      	lsls	r1, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	fbb0 f3f3 	udiv	r3, r0, r3
 800471a:	3301      	adds	r3, #1
 800471c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	6809      	ldr	r1, [r1, #0]
 8004728:	4313      	orrs	r3, r2
 800472a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6911      	ldr	r1, [r2, #16]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68d2      	ldr	r2, [r2, #12]
 800475e:	4311      	orrs	r1, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	430b      	orrs	r3, r1
 8004766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	000186a0 	.word	0x000186a0
 80047c0:	001e847f 	.word	0x001e847f
 80047c4:	003d08ff 	.word	0x003d08ff
 80047c8:	431bde83 	.word	0x431bde83
 80047cc:	10624dd3 	.word	0x10624dd3

080047d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d129      	bne.n	800483a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2224      	movs	r2, #36	; 0x24
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0201 	bic.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0210 	bic.w	r2, r2, #16
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e000      	b.n	800483c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800483a:	2302      	movs	r3, #2
  }
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b20      	cmp	r3, #32
 8004860:	d12a      	bne.n	80048b8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2224      	movs	r2, #36	; 0x24
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004882:	89fb      	ldrh	r3, [r7, #14]
 8004884:	f023 030f 	bic.w	r3, r3, #15
 8004888:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b29a      	uxth	r2, r3
 800488e:	89fb      	ldrh	r3, [r7, #14]
 8004890:	4313      	orrs	r3, r2
 8004892:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	89fa      	ldrh	r2, [r7, #14]
 800489a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0bf      	b.n	8004a5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd f89e 	bl	8001a30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800490a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6999      	ldr	r1, [r3, #24]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004920:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b4a      	ldr	r3, [pc, #296]	; (8004a64 <HAL_LTDC_Init+0x19c>)
 800493c:	400b      	ands	r3, r1
 800493e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68d9      	ldr	r1, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b3e      	ldr	r3, [pc, #248]	; (8004a64 <HAL_LTDC_Init+0x19c>)
 800496a:	400b      	ands	r3, r1
 800496c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68d9      	ldr	r1, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1a      	ldr	r2, [r3, #32]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6919      	ldr	r1, [r3, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <HAL_LTDC_Init+0x19c>)
 8004998:	400b      	ands	r3, r1
 800499a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	041b      	lsls	r3, r3, #16
 80049a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6919      	ldr	r1, [r3, #16]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6959      	ldr	r1, [r3, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <HAL_LTDC_Init+0x19c>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6959      	ldr	r1, [r3, #20]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0206 	orr.w	r2, r2, #6
 8004a36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	f000f800 	.word	0xf000f800

08004a68 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d023      	beq.n	8004ad2 <HAL_LTDC_IRQHandler+0x6a>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01e      	beq.n	8004ad2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0204 	bic.w	r2, r2, #4
 8004aa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ab2:	f043 0201 	orr.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f86f 	bl	8004bb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d023      	beq.n	8004b24 <HAL_LTDC_IRQHandler+0xbc>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01e      	beq.n	8004b24 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0202 	bic.w	r2, r2, #2
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2202      	movs	r2, #2
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b04:	f043 0202 	orr.w	r2, r3, #2
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2204      	movs	r2, #4
 8004b12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f846 	bl	8004bb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01b      	beq.n	8004b66 <HAL_LTDC_IRQHandler+0xfe>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d016      	beq.n	8004b66 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f82f 	bl	8004bc4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <HAL_LTDC_IRQHandler+0x140>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d016      	beq.n	8004ba8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0208 	bic.w	r2, r2, #8
 8004b88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2208      	movs	r2, #8
 8004b90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f818 	bl	8004bd8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004bec:	b5b0      	push	{r4, r5, r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_LTDC_ConfigLayer+0x1a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e02c      	b.n	8004c60 <HAL_LTDC_ConfigLayer+0x74>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2134      	movs	r1, #52	; 0x34
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4614      	mov	r4, r2
 8004c2a:	461d      	mov	r5, r3
 8004c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f811 	bl	8004c68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bdb0      	pop	{r4, r5, r7, pc}

08004c68 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c84:	4413      	add	r3, r2
 8004c86:	041b      	lsls	r3, r3, #16
 8004c88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	01db      	lsls	r3, r3, #7
 8004c94:	4413      	add	r3, r2
 8004c96:	3384      	adds	r3, #132	; 0x84
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	01d2      	lsls	r2, r2, #7
 8004ca4:	440a      	add	r2, r1
 8004ca6:	3284      	adds	r2, #132	; 0x84
 8004ca8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004cac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	0c1b      	lsrs	r3, r3, #16
 8004cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004cbe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cc0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	01db      	lsls	r3, r3, #7
 8004ccc:	440b      	add	r3, r1
 8004cce:	3384      	adds	r3, #132	; 0x84
 8004cd0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004cd6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ce6:	4413      	add	r3, r2
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	01db      	lsls	r3, r3, #7
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3384      	adds	r3, #132	; 0x84
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	4611      	mov	r1, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	01d2      	lsls	r2, r2, #7
 8004d06:	440a      	add	r2, r1
 8004d08:	3284      	adds	r2, #132	; 0x84
 8004d0a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004d0e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d1e:	4413      	add	r3, r2
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	01db      	lsls	r3, r3, #7
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3384      	adds	r3, #132	; 0x84
 8004d30:	4619      	mov	r1, r3
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	01db      	lsls	r3, r3, #7
 8004d42:	4413      	add	r3, r2
 8004d44:	3384      	adds	r3, #132	; 0x84
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	01d2      	lsls	r2, r2, #7
 8004d52:	440a      	add	r2, r1
 8004d54:	3284      	adds	r2, #132	; 0x84
 8004d56:	f023 0307 	bic.w	r3, r3, #7
 8004d5a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	01db      	lsls	r3, r3, #7
 8004d66:	4413      	add	r3, r2
 8004d68:	3384      	adds	r3, #132	; 0x84
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d82:	041b      	lsls	r3, r3, #16
 8004d84:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	01db      	lsls	r3, r3, #7
 8004d98:	4413      	add	r3, r2
 8004d9a:	3384      	adds	r3, #132	; 0x84
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	01db      	lsls	r3, r3, #7
 8004da8:	4413      	add	r3, r2
 8004daa:	3384      	adds	r3, #132	; 0x84
 8004dac:	461a      	mov	r2, r3
 8004dae:	2300      	movs	r3, #0
 8004db0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004db8:	461a      	mov	r2, r3
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	01db      	lsls	r3, r3, #7
 8004dcc:	440b      	add	r3, r1
 8004dce:	3384      	adds	r3, #132	; 0x84
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	01db      	lsls	r3, r3, #7
 8004de2:	4413      	add	r3, r2
 8004de4:	3384      	adds	r3, #132	; 0x84
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	4611      	mov	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	01d2      	lsls	r2, r2, #7
 8004df2:	440a      	add	r2, r1
 8004df4:	3284      	adds	r2, #132	; 0x84
 8004df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dfa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	01db      	lsls	r3, r3, #7
 8004e06:	4413      	add	r3, r2
 8004e08:	3384      	adds	r3, #132	; 0x84
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	01db      	lsls	r3, r3, #7
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3384      	adds	r3, #132	; 0x84
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	4611      	mov	r1, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	01d2      	lsls	r2, r2, #7
 8004e2c:	440a      	add	r2, r1
 8004e2e:	3284      	adds	r2, #132	; 0x84
 8004e30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e34:	f023 0307 	bic.w	r3, r3, #7
 8004e38:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	6809      	ldr	r1, [r1, #0]
 8004e46:	4608      	mov	r0, r1
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	01c9      	lsls	r1, r1, #7
 8004e4c:	4401      	add	r1, r0
 8004e4e:	3184      	adds	r1, #132	; 0x84
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	01db      	lsls	r3, r3, #7
 8004e5e:	4413      	add	r3, r2
 8004e60:	3384      	adds	r3, #132	; 0x84
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	01db      	lsls	r3, r3, #7
 8004e6e:	4413      	add	r3, r2
 8004e70:	3384      	adds	r3, #132	; 0x84
 8004e72:	461a      	mov	r2, r3
 8004e74:	2300      	movs	r3, #0
 8004e76:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	01db      	lsls	r3, r3, #7
 8004e82:	4413      	add	r3, r2
 8004e84:	3384      	adds	r3, #132	; 0x84
 8004e86:	461a      	mov	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004e96:	2304      	movs	r3, #4
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	e01b      	b.n	8004ed4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d102      	bne.n	8004eaa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	e014      	b.n	8004ed4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d00b      	beq.n	8004eca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d007      	beq.n	8004eca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d003      	beq.n	8004eca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	d102      	bne.n	8004ed0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e001      	b.n	8004ed4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	01db      	lsls	r3, r3, #7
 8004ede:	4413      	add	r3, r2
 8004ee0:	3384      	adds	r3, #132	; 0x84
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	01d2      	lsls	r2, r2, #7
 8004eee:	440a      	add	r2, r1
 8004ef0:	3284      	adds	r2, #132	; 0x84
 8004ef2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	1acb      	subs	r3, r1, r3
 8004f0e:	69f9      	ldr	r1, [r7, #28]
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	6809      	ldr	r1, [r1, #0]
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	01c9      	lsls	r1, r1, #7
 8004f20:	4401      	add	r1, r0
 8004f22:	3184      	adds	r1, #132	; 0x84
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	01db      	lsls	r3, r3, #7
 8004f32:	4413      	add	r3, r2
 8004f34:	3384      	adds	r3, #132	; 0x84
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	01d2      	lsls	r2, r2, #7
 8004f42:	440a      	add	r2, r1
 8004f44:	3284      	adds	r2, #132	; 0x84
 8004f46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f4a:	f023 0307 	bic.w	r3, r3, #7
 8004f4e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	01db      	lsls	r3, r3, #7
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3384      	adds	r3, #132	; 0x84
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	01db      	lsls	r3, r3, #7
 8004f70:	4413      	add	r3, r2
 8004f72:	3384      	adds	r3, #132	; 0x84
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	01d2      	lsls	r2, r2, #7
 8004f80:	440a      	add	r2, r1
 8004f82:	3284      	adds	r2, #132	; 0x84
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6013      	str	r3, [r2, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	3724      	adds	r7, #36	; 0x24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e267      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d075      	beq.n	80050a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fb6:	4b88      	ldr	r3, [pc, #544]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d00c      	beq.n	8004fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc2:	4b85      	ldr	r3, [pc, #532]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d112      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fce:	4b82      	ldr	r3, [pc, #520]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fda:	d10b      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fdc:	4b7e      	ldr	r3, [pc, #504]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d05b      	beq.n	80050a0 <HAL_RCC_OscConfig+0x108>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d157      	bne.n	80050a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e242      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffc:	d106      	bne.n	800500c <HAL_RCC_OscConfig+0x74>
 8004ffe:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a75      	ldr	r2, [pc, #468]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	e01d      	b.n	8005048 <HAL_RCC_OscConfig+0xb0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0x98>
 8005016:	4b70      	ldr	r3, [pc, #448]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6f      	ldr	r2, [pc, #444]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 800501c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	4b6d      	ldr	r3, [pc, #436]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6c      	ldr	r2, [pc, #432]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e00b      	b.n	8005048 <HAL_RCC_OscConfig+0xb0>
 8005030:	4b69      	ldr	r3, [pc, #420]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a68      	ldr	r2, [pc, #416]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4b66      	ldr	r3, [pc, #408]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a65      	ldr	r2, [pc, #404]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d013      	beq.n	8005078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005050:	f7fd f95e 	bl	8002310 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005058:	f7fd f95a 	bl	8002310 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	; 0x64
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e207      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	4b5b      	ldr	r3, [pc, #364]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0xc0>
 8005076:	e014      	b.n	80050a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7fd f94a 	bl	8002310 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005080:	f7fd f946 	bl	8002310 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	; 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e1f3      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005092:	4b51      	ldr	r3, [pc, #324]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0xe8>
 800509e:	e000      	b.n	80050a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d063      	beq.n	8005176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050ae:	4b4a      	ldr	r3, [pc, #296]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ba:	4b47      	ldr	r3, [pc, #284]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d11c      	bne.n	8005100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c6:	4b44      	ldr	r3, [pc, #272]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d116      	bne.n	8005100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d2:	4b41      	ldr	r3, [pc, #260]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <HAL_RCC_OscConfig+0x152>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d001      	beq.n	80050ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e1c7      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ea:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4937      	ldr	r1, [pc, #220]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fe:	e03a      	b.n	8005176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d020      	beq.n	800514a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005108:	4b34      	ldr	r3, [pc, #208]	; (80051dc <HAL_RCC_OscConfig+0x244>)
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510e:	f7fd f8ff 	bl	8002310 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005116:	f7fd f8fb 	bl	8002310 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e1a8      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005128:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005134:	4b28      	ldr	r3, [pc, #160]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4925      	ldr	r1, [pc, #148]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005144:	4313      	orrs	r3, r2
 8005146:	600b      	str	r3, [r1, #0]
 8005148:	e015      	b.n	8005176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800514a:	4b24      	ldr	r3, [pc, #144]	; (80051dc <HAL_RCC_OscConfig+0x244>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fd f8de 	bl	8002310 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005158:	f7fd f8da 	bl	8002310 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e187      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d036      	beq.n	80051f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518a:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <HAL_RCC_OscConfig+0x248>)
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005190:	f7fd f8be 	bl	8002310 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005198:	f7fd f8ba 	bl	8002310 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e167      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051aa:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_RCC_OscConfig+0x240>)
 80051ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0f0      	beq.n	8005198 <HAL_RCC_OscConfig+0x200>
 80051b6:	e01b      	b.n	80051f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b8:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <HAL_RCC_OscConfig+0x248>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051be:	f7fd f8a7 	bl	8002310 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c4:	e00e      	b.n	80051e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c6:	f7fd f8a3 	bl	8002310 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d907      	bls.n	80051e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e150      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
 80051d8:	40023800 	.word	0x40023800
 80051dc:	42470000 	.word	0x42470000
 80051e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e4:	4b88      	ldr	r3, [pc, #544]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 80051e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1ea      	bne.n	80051c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8097 	beq.w	800532c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fe:	2300      	movs	r3, #0
 8005200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005202:	4b81      	ldr	r3, [pc, #516]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10f      	bne.n	800522e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	4b7d      	ldr	r3, [pc, #500]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	4a7c      	ldr	r2, [pc, #496]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521c:	6413      	str	r3, [r2, #64]	; 0x40
 800521e:	4b7a      	ldr	r3, [pc, #488]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005226:	60bb      	str	r3, [r7, #8]
 8005228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522e:	4b77      	ldr	r3, [pc, #476]	; (800540c <HAL_RCC_OscConfig+0x474>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d118      	bne.n	800526c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800523a:	4b74      	ldr	r3, [pc, #464]	; (800540c <HAL_RCC_OscConfig+0x474>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a73      	ldr	r2, [pc, #460]	; (800540c <HAL_RCC_OscConfig+0x474>)
 8005240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005246:	f7fd f863 	bl	8002310 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524e:	f7fd f85f 	bl	8002310 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e10c      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005260:	4b6a      	ldr	r3, [pc, #424]	; (800540c <HAL_RCC_OscConfig+0x474>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x2ea>
 8005274:	4b64      	ldr	r3, [pc, #400]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	4a63      	ldr	r2, [pc, #396]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 800527a:	f043 0301 	orr.w	r3, r3, #1
 800527e:	6713      	str	r3, [r2, #112]	; 0x70
 8005280:	e01c      	b.n	80052bc <HAL_RCC_OscConfig+0x324>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b05      	cmp	r3, #5
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x30c>
 800528a:	4b5f      	ldr	r3, [pc, #380]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	4a5e      	ldr	r2, [pc, #376]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005290:	f043 0304 	orr.w	r3, r3, #4
 8005294:	6713      	str	r3, [r2, #112]	; 0x70
 8005296:	4b5c      	ldr	r3, [pc, #368]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	4a5b      	ldr	r2, [pc, #364]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6713      	str	r3, [r2, #112]	; 0x70
 80052a2:	e00b      	b.n	80052bc <HAL_RCC_OscConfig+0x324>
 80052a4:	4b58      	ldr	r3, [pc, #352]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a57      	ldr	r2, [pc, #348]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
 80052b0:	4b55      	ldr	r3, [pc, #340]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	4a54      	ldr	r2, [pc, #336]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 80052b6:	f023 0304 	bic.w	r3, r3, #4
 80052ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fd f824 	bl	8002310 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ca:	e00a      	b.n	80052e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052cc:	f7fd f820 	bl	8002310 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e0cb      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e2:	4b49      	ldr	r3, [pc, #292]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0ee      	beq.n	80052cc <HAL_RCC_OscConfig+0x334>
 80052ee:	e014      	b.n	800531a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f0:	f7fd f80e 	bl	8002310 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f8:	f7fd f80a 	bl	8002310 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	; 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0b5      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530e:	4b3e      	ldr	r3, [pc, #248]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ee      	bne.n	80052f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d105      	bne.n	800532c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005320:	4b39      	ldr	r3, [pc, #228]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	4a38      	ldr	r2, [pc, #224]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80a1 	beq.w	8005478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005336:	4b34      	ldr	r3, [pc, #208]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 030c 	and.w	r3, r3, #12
 800533e:	2b08      	cmp	r3, #8
 8005340:	d05c      	beq.n	80053fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d141      	bne.n	80053ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534a:	4b31      	ldr	r3, [pc, #196]	; (8005410 <HAL_RCC_OscConfig+0x478>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fc ffde 	bl	8002310 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005358:	f7fc ffda 	bl	8002310 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e087      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	4b27      	ldr	r3, [pc, #156]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69da      	ldr	r2, [r3, #28]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	3b01      	subs	r3, #1
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	061b      	lsls	r3, r3, #24
 800539a:	491b      	ldr	r1, [pc, #108]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 800539c:	4313      	orrs	r3, r2
 800539e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <HAL_RCC_OscConfig+0x478>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a6:	f7fc ffb3 	bl	8002310 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ae:	f7fc ffaf 	bl	8002310 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e05c      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c0:	4b11      	ldr	r3, [pc, #68]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x416>
 80053cc:	e054      	b.n	8005478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <HAL_RCC_OscConfig+0x478>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fc ff9c 	bl	8002310 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc ff98 	bl	8002310 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e045      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_RCC_OscConfig+0x470>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x444>
 80053fa:	e03d      	b.n	8005478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e038      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
 8005408:	40023800 	.word	0x40023800
 800540c:	40007000 	.word	0x40007000
 8005410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005414:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <HAL_RCC_OscConfig+0x4ec>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d028      	beq.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542c:	429a      	cmp	r2, r3
 800542e:	d121      	bne.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d11a      	bne.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800544a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800544c:	4293      	cmp	r3, r2
 800544e:	d111      	bne.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	3b01      	subs	r3, #1
 800545e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d107      	bne.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005470:	429a      	cmp	r2, r3
 8005472:	d001      	beq.n	8005478 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800

08005488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0cc      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800549c:	4b68      	ldr	r3, [pc, #416]	; (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d90c      	bls.n	80054c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b65      	ldr	r3, [pc, #404]	; (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b63      	ldr	r3, [pc, #396]	; (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0b8      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d020      	beq.n	8005512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054dc:	4b59      	ldr	r3, [pc, #356]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a58      	ldr	r2, [pc, #352]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054f4:	4b53      	ldr	r3, [pc, #332]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	4a52      	ldr	r2, [pc, #328]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005500:	4b50      	ldr	r3, [pc, #320]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	494d      	ldr	r1, [pc, #308]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	4313      	orrs	r3, r2
 8005510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d044      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d107      	bne.n	8005536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005526:	4b47      	ldr	r3, [pc, #284]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d119      	bne.n	8005566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e07f      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d003      	beq.n	8005546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005542:	2b03      	cmp	r3, #3
 8005544:	d107      	bne.n	8005556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005546:	4b3f      	ldr	r3, [pc, #252]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e06f      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005556:	4b3b      	ldr	r3, [pc, #236]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e067      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005566:	4b37      	ldr	r3, [pc, #220]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f023 0203 	bic.w	r2, r3, #3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4934      	ldr	r1, [pc, #208]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	4313      	orrs	r3, r2
 8005576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005578:	f7fc feca 	bl	8002310 <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557e:	e00a      	b.n	8005596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005580:	f7fc fec6 	bl	8002310 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f241 3288 	movw	r2, #5000	; 0x1388
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e04f      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005596:	4b2b      	ldr	r3, [pc, #172]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 020c 	and.w	r2, r3, #12
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d1eb      	bne.n	8005580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055a8:	4b25      	ldr	r3, [pc, #148]	; (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d20c      	bcs.n	80055d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b6:	4b22      	ldr	r3, [pc, #136]	; (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055be:	4b20      	ldr	r3, [pc, #128]	; (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d001      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e032      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055dc:	4b19      	ldr	r3, [pc, #100]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	4916      	ldr	r1, [pc, #88]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055fa:	4b12      	ldr	r3, [pc, #72]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	490e      	ldr	r1, [pc, #56]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	4313      	orrs	r3, r2
 800560c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800560e:	f000 f821 	bl	8005654 <HAL_RCC_GetSysClockFreq>
 8005612:	4602      	mov	r2, r0
 8005614:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	490a      	ldr	r1, [pc, #40]	; (8005648 <HAL_RCC_ClockConfig+0x1c0>)
 8005620:	5ccb      	ldrb	r3, [r1, r3]
 8005622:	fa22 f303 	lsr.w	r3, r2, r3
 8005626:	4a09      	ldr	r2, [pc, #36]	; (800564c <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800562a:	4b09      	ldr	r3, [pc, #36]	; (8005650 <HAL_RCC_ClockConfig+0x1c8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f7fc fc7c 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40023c00 	.word	0x40023c00
 8005644:	40023800 	.word	0x40023800
 8005648:	08010b44 	.word	0x08010b44
 800564c:	20000000 	.word	0x20000000
 8005650:	20000004 	.word	0x20000004

08005654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005658:	b094      	sub	sp, #80	; 0x50
 800565a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	647b      	str	r3, [r7, #68]	; 0x44
 8005660:	2300      	movs	r3, #0
 8005662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005664:	2300      	movs	r3, #0
 8005666:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800566c:	4b79      	ldr	r3, [pc, #484]	; (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 030c 	and.w	r3, r3, #12
 8005674:	2b08      	cmp	r3, #8
 8005676:	d00d      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x40>
 8005678:	2b08      	cmp	r3, #8
 800567a:	f200 80e1 	bhi.w	8005840 <HAL_RCC_GetSysClockFreq+0x1ec>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_RCC_GetSysClockFreq+0x34>
 8005682:	2b04      	cmp	r3, #4
 8005684:	d003      	beq.n	800568e <HAL_RCC_GetSysClockFreq+0x3a>
 8005686:	e0db      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005688:	4b73      	ldr	r3, [pc, #460]	; (8005858 <HAL_RCC_GetSysClockFreq+0x204>)
 800568a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800568c:	e0db      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800568e:	4b73      	ldr	r3, [pc, #460]	; (800585c <HAL_RCC_GetSysClockFreq+0x208>)
 8005690:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005692:	e0d8      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005694:	4b6f      	ldr	r3, [pc, #444]	; (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800569c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800569e:	4b6d      	ldr	r3, [pc, #436]	; (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d063      	beq.n	8005772 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056aa:	4b6a      	ldr	r3, [pc, #424]	; (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	099b      	lsrs	r3, r3, #6
 80056b0:	2200      	movs	r2, #0
 80056b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056bc:	633b      	str	r3, [r7, #48]	; 0x30
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056c6:	4622      	mov	r2, r4
 80056c8:	462b      	mov	r3, r5
 80056ca:	f04f 0000 	mov.w	r0, #0
 80056ce:	f04f 0100 	mov.w	r1, #0
 80056d2:	0159      	lsls	r1, r3, #5
 80056d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056d8:	0150      	lsls	r0, r2, #5
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4621      	mov	r1, r4
 80056e0:	1a51      	subs	r1, r2, r1
 80056e2:	6139      	str	r1, [r7, #16]
 80056e4:	4629      	mov	r1, r5
 80056e6:	eb63 0301 	sbc.w	r3, r3, r1
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056f8:	4659      	mov	r1, fp
 80056fa:	018b      	lsls	r3, r1, #6
 80056fc:	4651      	mov	r1, sl
 80056fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005702:	4651      	mov	r1, sl
 8005704:	018a      	lsls	r2, r1, #6
 8005706:	4651      	mov	r1, sl
 8005708:	ebb2 0801 	subs.w	r8, r2, r1
 800570c:	4659      	mov	r1, fp
 800570e:	eb63 0901 	sbc.w	r9, r3, r1
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800571e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005726:	4690      	mov	r8, r2
 8005728:	4699      	mov	r9, r3
 800572a:	4623      	mov	r3, r4
 800572c:	eb18 0303 	adds.w	r3, r8, r3
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	462b      	mov	r3, r5
 8005734:	eb49 0303 	adc.w	r3, r9, r3
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005746:	4629      	mov	r1, r5
 8005748:	024b      	lsls	r3, r1, #9
 800574a:	4621      	mov	r1, r4
 800574c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005750:	4621      	mov	r1, r4
 8005752:	024a      	lsls	r2, r1, #9
 8005754:	4610      	mov	r0, r2
 8005756:	4619      	mov	r1, r3
 8005758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575a:	2200      	movs	r2, #0
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
 800575e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005764:	f7fb fa30 	bl	8000bc8 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4613      	mov	r3, r2
 800576e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005770:	e058      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005772:	4b38      	ldr	r3, [pc, #224]	; (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	2200      	movs	r2, #0
 800577a:	4618      	mov	r0, r3
 800577c:	4611      	mov	r1, r2
 800577e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005782:	623b      	str	r3, [r7, #32]
 8005784:	2300      	movs	r3, #0
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
 8005788:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	f04f 0000 	mov.w	r0, #0
 8005794:	f04f 0100 	mov.w	r1, #0
 8005798:	0159      	lsls	r1, r3, #5
 800579a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800579e:	0150      	lsls	r0, r2, #5
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4641      	mov	r1, r8
 80057a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80057aa:	4649      	mov	r1, r9
 80057ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057c4:	ebb2 040a 	subs.w	r4, r2, sl
 80057c8:	eb63 050b 	sbc.w	r5, r3, fp
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	00eb      	lsls	r3, r5, #3
 80057d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057da:	00e2      	lsls	r2, r4, #3
 80057dc:	4614      	mov	r4, r2
 80057de:	461d      	mov	r5, r3
 80057e0:	4643      	mov	r3, r8
 80057e2:	18e3      	adds	r3, r4, r3
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	464b      	mov	r3, r9
 80057e8:	eb45 0303 	adc.w	r3, r5, r3
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057fa:	4629      	mov	r1, r5
 80057fc:	028b      	lsls	r3, r1, #10
 80057fe:	4621      	mov	r1, r4
 8005800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005804:	4621      	mov	r1, r4
 8005806:	028a      	lsls	r2, r1, #10
 8005808:	4610      	mov	r0, r2
 800580a:	4619      	mov	r1, r3
 800580c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580e:	2200      	movs	r2, #0
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	61fa      	str	r2, [r7, #28]
 8005814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005818:	f7fb f9d6 	bl	8000bc8 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4613      	mov	r3, r2
 8005822:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	3301      	adds	r3, #1
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800583e:	e002      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_RCC_GetSysClockFreq+0x204>)
 8005842:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005848:	4618      	mov	r0, r3
 800584a:	3750      	adds	r7, #80	; 0x50
 800584c:	46bd      	mov	sp, r7
 800584e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800
 8005858:	00f42400 	.word	0x00f42400
 800585c:	007a1200 	.word	0x007a1200

08005860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005864:	4b03      	ldr	r3, [pc, #12]	; (8005874 <HAL_RCC_GetHCLKFreq+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000000 	.word	0x20000000

08005878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800587c:	f7ff fff0 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8005880:	4602      	mov	r2, r0
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	0a9b      	lsrs	r3, r3, #10
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	4903      	ldr	r1, [pc, #12]	; (800589c <HAL_RCC_GetPCLK1Freq+0x24>)
 800588e:	5ccb      	ldrb	r3, [r1, r3]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40023800 	.word	0x40023800
 800589c:	08010b54 	.word	0x08010b54

080058a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058a4:	f7ff ffdc 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80058a8:	4602      	mov	r2, r0
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	0b5b      	lsrs	r3, r3, #13
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	4903      	ldr	r1, [pc, #12]	; (80058c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b6:	5ccb      	ldrb	r3, [r1, r3]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40023800 	.word	0x40023800
 80058c4:	08010b54 	.word	0x08010b54

080058c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	220f      	movs	r2, #15
 80058d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_RCC_GetClockConfig+0x5c>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0203 	and.w	r2, r3, #3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058e4:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <HAL_RCC_GetClockConfig+0x5c>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <HAL_RCC_GetClockConfig+0x5c>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058fc:	4b09      	ldr	r3, [pc, #36]	; (8005924 <HAL_RCC_GetClockConfig+0x5c>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800590a:	4b07      	ldr	r3, [pc, #28]	; (8005928 <HAL_RCC_GetClockConfig+0x60>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 020f 	and.w	r2, r3, #15
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	601a      	str	r2, [r3, #0]
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40023800 	.word	0x40023800
 8005928:	40023c00 	.word	0x40023c00

0800592c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800595c:	2b00      	cmp	r3, #0
 800595e:	d075      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005960:	4b91      	ldr	r3, [pc, #580]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005966:	f7fc fcd3 	bl	8002310 <HAL_GetTick>
 800596a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800596e:	f7fc fccf 	bl	8002310 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e189      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005980:	4b8a      	ldr	r3, [pc, #552]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f0      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	019a      	lsls	r2, r3, #6
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	071b      	lsls	r3, r3, #28
 80059a4:	4981      	ldr	r1, [pc, #516]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01f      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059b8:	4b7c      	ldr	r3, [pc, #496]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059be:	0f1b      	lsrs	r3, r3, #28
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	019a      	lsls	r2, r3, #6
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	431a      	orrs	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	071b      	lsls	r3, r3, #28
 80059d8:	4974      	ldr	r1, [pc, #464]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059e0:	4b72      	ldr	r3, [pc, #456]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e6:	f023 021f 	bic.w	r2, r3, #31
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	496e      	ldr	r1, [pc, #440]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00d      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	019a      	lsls	r2, r3, #6
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	071b      	lsls	r3, r3, #28
 8005a18:	4964      	ldr	r1, [pc, #400]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a20:	4b61      	ldr	r3, [pc, #388]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a26:	f7fc fc73 	bl	8002310 <HAL_GetTick>
 8005a2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a2e:	f7fc fc6f 	bl	8002310 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e129      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a40:	4b5a      	ldr	r3, [pc, #360]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d105      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d079      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a64:	4b52      	ldr	r3, [pc, #328]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a6a:	f7fc fc51 	bl	8002310 <HAL_GetTick>
 8005a6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a70:	e008      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a72:	f7fc fc4d 	bl	8002310 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e107      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a84:	4b49      	ldr	r3, [pc, #292]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a90:	d0ef      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d020      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a9e:	4b43      	ldr	r3, [pc, #268]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	0f1b      	lsrs	r3, r3, #28
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	019a      	lsls	r2, r3, #6
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	061b      	lsls	r3, r3, #24
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	071b      	lsls	r3, r3, #28
 8005abe:	493b      	ldr	r1, [pc, #236]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ac6:	4b39      	ldr	r3, [pc, #228]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005acc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	4934      	ldr	r1, [pc, #208]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01e      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aec:	4b2f      	ldr	r3, [pc, #188]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	0e1b      	lsrs	r3, r3, #24
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	019a      	lsls	r2, r3, #6
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	061b      	lsls	r3, r3, #24
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	071b      	lsls	r3, r3, #28
 8005b0c:	4927      	ldr	r1, [pc, #156]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	4922      	ldr	r1, [pc, #136]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b2a:	4b21      	ldr	r3, [pc, #132]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b30:	f7fc fbee 	bl	8002310 <HAL_GetTick>
 8005b34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b38:	f7fc fbea 	bl	8002310 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e0a4      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b4a:	4b18      	ldr	r3, [pc, #96]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b56:	d1ef      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 808b 	beq.w	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	4b10      	ldr	r3, [pc, #64]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4a0f      	ldr	r2, [pc, #60]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b74:	6413      	str	r3, [r2, #64]	; 0x40
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b8e:	f7fc fbbf 	bl	8002310 <HAL_GetTick>
 8005b92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b94:	e010      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b96:	f7fc fbbb 	bl	8002310 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d909      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e075      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005ba8:	42470068 	.word	0x42470068
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	42470070 	.word	0x42470070
 8005bb4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bb8:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0e8      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bc4:	4b36      	ldr	r3, [pc, #216]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bcc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d02f      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d028      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005be2:	4b2f      	ldr	r3, [pc, #188]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bec:	4b2d      	ldr	r3, [pc, #180]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bf2:	4b2c      	ldr	r3, [pc, #176]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005bf8:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bfe:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d114      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c0a:	f7fc fb81 	bl	8002310 <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c10:	e00a      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c12:	f7fc fb7d 	bl	8002310 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e035      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c28:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0ee      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c40:	d10d      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c42:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c56:	4912      	ldr	r1, [pc, #72]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	608b      	str	r3, [r1, #8]
 8005c5c:	e005      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005c5e:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c68:	6093      	str	r3, [r2, #8]
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c76:	490a      	ldr	r1, [pc, #40]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c90:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40007000 	.word	0x40007000
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	42470e40 	.word	0x42470e40
 8005ca8:	424711e0 	.word	0x424711e0

08005cac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e025      	b.n	8005d0c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7fc f91f 	bl	8001f18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f001 fdfd 	bl	80078ec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	f001 fe52 	bl	80079a6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e07b      	b.n	8005e1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d108      	bne.n	8005d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d36:	d009      	beq.n	8005d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	61da      	str	r2, [r3, #28]
 8005d3e:	e005      	b.n	8005d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fb ff92 	bl	8001c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd0:	ea42 0103 	orr.w	r1, r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	0c1b      	lsrs	r3, r3, #16
 8005dea:	f003 0104 	and.w	r1, r3, #4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	f003 0210 	and.w	r2, r3, #16
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b088      	sub	sp, #32
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	603b      	str	r3, [r7, #0]
 8005e32:	4613      	mov	r3, r2
 8005e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_SPI_Transmit+0x22>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e126      	b.n	8006096 <HAL_SPI_Transmit+0x270>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e50:	f7fc fa5e 	bl	8002310 <HAL_GetTick>
 8005e54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d002      	beq.n	8005e6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
 8005e68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e6a:	e10b      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_SPI_Transmit+0x52>
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e7c:	e102      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2203      	movs	r2, #3
 8005e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	88fa      	ldrh	r2, [r7, #6]
 8005e96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	88fa      	ldrh	r2, [r7, #6]
 8005e9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec4:	d10f      	bne.n	8005ee6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ee4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d007      	beq.n	8005f04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0c:	d14b      	bne.n	8005fa6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_SPI_Transmit+0xf6>
 8005f16:	8afb      	ldrh	r3, [r7, #22]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d13e      	bne.n	8005f9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	1c9a      	adds	r2, r3, #2
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f40:	e02b      	b.n	8005f9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d112      	bne.n	8005f76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	881a      	ldrh	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f74:	e011      	b.n	8005f9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f76:	f7fc f9cb 	bl	8002310 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d803      	bhi.n	8005f8e <HAL_SPI_Transmit+0x168>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8c:	d102      	bne.n	8005f94 <HAL_SPI_Transmit+0x16e>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f98:	e074      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1ce      	bne.n	8005f42 <HAL_SPI_Transmit+0x11c>
 8005fa4:	e04c      	b.n	8006040 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Transmit+0x18e>
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d140      	bne.n	8006036 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fda:	e02c      	b.n	8006036 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d113      	bne.n	8006012 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	7812      	ldrb	r2, [r2, #0]
 8005ff6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006010:	e011      	b.n	8006036 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006012:	f7fc f97d 	bl	8002310 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d803      	bhi.n	800602a <HAL_SPI_Transmit+0x204>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d102      	bne.n	8006030 <HAL_SPI_Transmit+0x20a>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006034:	e026      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1cd      	bne.n	8005fdc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fbcb 	bl	80067e0 <SPI_EndRxTxTransaction>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e000      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006082:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006094:	7ffb      	ldrb	r3, [r7, #31]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b088      	sub	sp, #32
 80060a2:	af02      	add	r7, sp, #8
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ba:	d112      	bne.n	80060e2 <HAL_SPI_Receive+0x44>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10e      	bne.n	80060e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2204      	movs	r2, #4
 80060c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80060cc:	88fa      	ldrh	r2, [r7, #6]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	4613      	mov	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f8f1 	bl	80062c0 <HAL_SPI_TransmitReceive>
 80060de:	4603      	mov	r3, r0
 80060e0:	e0ea      	b.n	80062b8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_SPI_Receive+0x52>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e0e3      	b.n	80062b8 <HAL_SPI_Receive+0x21a>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060f8:	f7fc f90a 	bl	8002310 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b01      	cmp	r3, #1
 8006108:	d002      	beq.n	8006110 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800610a:	2302      	movs	r3, #2
 800610c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800610e:	e0ca      	b.n	80062a6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_SPI_Receive+0x7e>
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006120:	e0c1      	b.n	80062a6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2204      	movs	r2, #4
 8006126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006168:	d10f      	bne.n	800618a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006178:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006188:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006194:	2b40      	cmp	r3, #64	; 0x40
 8006196:	d007      	beq.n	80061a8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d162      	bne.n	8006276 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061b0:	e02e      	b.n	8006210 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d115      	bne.n	80061ec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f103 020c 	add.w	r2, r3, #12
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061ea:	e011      	b.n	8006210 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ec:	f7fc f890 	bl	8002310 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d803      	bhi.n	8006204 <HAL_SPI_Receive+0x166>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d102      	bne.n	800620a <HAL_SPI_Receive+0x16c>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800620e:	e04a      	b.n	80062a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1cb      	bne.n	80061b2 <HAL_SPI_Receive+0x114>
 800621a:	e031      	b.n	8006280 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d113      	bne.n	8006252 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	b292      	uxth	r2, r2
 8006236:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	1c9a      	adds	r2, r3, #2
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006250:	e011      	b.n	8006276 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006252:	f7fc f85d 	bl	8002310 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d803      	bhi.n	800626a <HAL_SPI_Receive+0x1cc>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d102      	bne.n	8006270 <HAL_SPI_Receive+0x1d2>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006274:	e017      	b.n	80062a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1cd      	bne.n	800621c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fa45 	bl	8006714 <SPI_EndRxTransaction>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	75fb      	strb	r3, [r7, #23]
 80062a2:	e000      	b.n	80062a6 <HAL_SPI_Receive+0x208>
  }

error :
 80062a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08c      	sub	sp, #48	; 0x30
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062ce:	2301      	movs	r3, #1
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_SPI_TransmitReceive+0x26>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e18a      	b.n	80065fc <HAL_SPI_TransmitReceive+0x33c>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ee:	f7fc f80f 	bl	8002310 <HAL_GetTick>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006304:	887b      	ldrh	r3, [r7, #2]
 8006306:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800630c:	2b01      	cmp	r3, #1
 800630e:	d00f      	beq.n	8006330 <HAL_SPI_TransmitReceive+0x70>
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006316:	d107      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d103      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x68>
 8006320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006324:	2b04      	cmp	r3, #4
 8006326:	d003      	beq.n	8006330 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006328:	2302      	movs	r3, #2
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800632e:	e15b      	b.n	80065e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_SPI_TransmitReceive+0x82>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_SPI_TransmitReceive+0x82>
 800633c:	887b      	ldrh	r3, [r7, #2]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d103      	bne.n	800634a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006348:	e14e      	b.n	80065e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b04      	cmp	r3, #4
 8006354:	d003      	beq.n	800635e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2205      	movs	r2, #5
 800635a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	887a      	ldrh	r2, [r7, #2]
 800636e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	887a      	ldrh	r2, [r7, #2]
 8006374:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	887a      	ldrh	r2, [r7, #2]
 8006380:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	887a      	ldrh	r2, [r7, #2]
 8006386:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b40      	cmp	r3, #64	; 0x40
 80063a0:	d007      	beq.n	80063b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ba:	d178      	bne.n	80064ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_SPI_TransmitReceive+0x10a>
 80063c4:	8b7b      	ldrh	r3, [r7, #26]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d166      	bne.n	8006498 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	1c9a      	adds	r2, r3, #2
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ee:	e053      	b.n	8006498 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d11b      	bne.n	8006436 <HAL_SPI_TransmitReceive+0x176>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d016      	beq.n	8006436 <HAL_SPI_TransmitReceive+0x176>
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	2b01      	cmp	r3, #1
 800640c:	d113      	bne.n	8006436 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	881a      	ldrh	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	1c9a      	adds	r2, r3, #2
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b01      	cmp	r3, #1
 8006442:	d119      	bne.n	8006478 <HAL_SPI_TransmitReceive+0x1b8>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d014      	beq.n	8006478 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	b292      	uxth	r2, r2
 800645a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	1c9a      	adds	r2, r3, #2
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006474:	2301      	movs	r3, #1
 8006476:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006478:	f7fb ff4a 	bl	8002310 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006484:	429a      	cmp	r2, r3
 8006486:	d807      	bhi.n	8006498 <HAL_SPI_TransmitReceive+0x1d8>
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d003      	beq.n	8006498 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006496:	e0a7      	b.n	80065e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1a6      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x130>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1a1      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x130>
 80064ac:	e07c      	b.n	80065a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_SPI_TransmitReceive+0x1fc>
 80064b6:	8b7b      	ldrh	r3, [r7, #26]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d16b      	bne.n	8006594 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	330c      	adds	r3, #12
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064e2:	e057      	b.n	8006594 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d11c      	bne.n	800652c <HAL_SPI_TransmitReceive+0x26c>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <HAL_SPI_TransmitReceive+0x26c>
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d114      	bne.n	800652c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	7812      	ldrb	r2, [r2, #0]
 800650e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b01      	cmp	r3, #1
 8006538:	d119      	bne.n	800656e <HAL_SPI_TransmitReceive+0x2ae>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d014      	beq.n	800656e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006560:	b29b      	uxth	r3, r3
 8006562:	3b01      	subs	r3, #1
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800656a:	2301      	movs	r3, #1
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800656e:	f7fb fecf 	bl	8002310 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800657a:	429a      	cmp	r2, r3
 800657c:	d803      	bhi.n	8006586 <HAL_SPI_TransmitReceive+0x2c6>
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d102      	bne.n	800658c <HAL_SPI_TransmitReceive+0x2cc>
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	2b00      	cmp	r3, #0
 800658a:	d103      	bne.n	8006594 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006592:	e029      	b.n	80065e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1a2      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x224>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d19d      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f917 	bl	80067e0 <SPI_EndRxTxTransaction>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d006      	beq.n	80065c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065c4:	e010      	b.n	80065e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10b      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	e000      	b.n	80065e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80065e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3730      	adds	r7, #48	; 0x30
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	4613      	mov	r3, r2
 8006612:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006614:	f7fb fe7c 	bl	8002310 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	4413      	add	r3, r2
 8006622:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006624:	f7fb fe74 	bl	8002310 <HAL_GetTick>
 8006628:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800662a:	4b39      	ldr	r3, [pc, #228]	; (8006710 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	015b      	lsls	r3, r3, #5
 8006630:	0d1b      	lsrs	r3, r3, #20
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800663a:	e054      	b.n	80066e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	d050      	beq.n	80066e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006644:	f7fb fe64 	bl	8002310 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	429a      	cmp	r2, r3
 8006652:	d902      	bls.n	800665a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d13d      	bne.n	80066d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006672:	d111      	bne.n	8006698 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667c:	d004      	beq.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006686:	d107      	bne.n	8006698 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a0:	d10f      	bne.n	80066c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e017      	b.n	8006706 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	429a      	cmp	r2, r3
 8006702:	d19b      	bne.n	800663c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3720      	adds	r7, #32
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000000 	.word	0x20000000

08006714 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006728:	d111      	bne.n	800674e <SPI_EndRxTransaction+0x3a>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006732:	d004      	beq.n	800673e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800673c:	d107      	bne.n	800674e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800674c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006756:	d12a      	bne.n	80067ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006760:	d012      	beq.n	8006788 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2200      	movs	r2, #0
 800676a:	2180      	movs	r1, #128	; 0x80
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff ff49 	bl	8006604 <SPI_WaitFlagStateUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d02d      	beq.n	80067d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e026      	b.n	80067d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2200      	movs	r2, #0
 8006790:	2101      	movs	r1, #1
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ff36 	bl	8006604 <SPI_WaitFlagStateUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01a      	beq.n	80067d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e013      	b.n	80067d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	2101      	movs	r1, #1
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f7ff ff23 	bl	8006604 <SPI_WaitFlagStateUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e000      	b.n	80067d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <SPI_EndRxTxTransaction+0x7c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <SPI_EndRxTxTransaction+0x80>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	0d5b      	lsrs	r3, r3, #21
 80067f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800680a:	d112      	bne.n	8006832 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2200      	movs	r2, #0
 8006814:	2180      	movs	r1, #128	; 0x80
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f7ff fef4 	bl	8006604 <SPI_WaitFlagStateUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d016      	beq.n	8006850 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006826:	f043 0220 	orr.w	r2, r3, #32
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e00f      	b.n	8006852 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	3b01      	subs	r3, #1
 800683c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006848:	2b80      	cmp	r3, #128	; 0x80
 800684a:	d0f2      	beq.n	8006832 <SPI_EndRxTxTransaction+0x52>
 800684c:	e000      	b.n	8006850 <SPI_EndRxTxTransaction+0x70>
        break;
 800684e:	bf00      	nop
  }

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000000 	.word	0x20000000
 8006860:	165e9f81 	.word	0x165e9f81

08006864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e041      	b.n	80068fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fb fa48 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f000 fa96 	bl	8006dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d001      	beq.n	800691c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e04e      	b.n	80069ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a23      	ldr	r2, [pc, #140]	; (80069c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d022      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d01d      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <HAL_TIM_Base_Start_IT+0xc8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d018      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1c      	ldr	r2, [pc, #112]	; (80069d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00e      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a19      	ldr	r2, [pc, #100]	; (80069dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d111      	bne.n	80069a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b06      	cmp	r3, #6
 8006994:	d010      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a6:	e007      	b.n	80069b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40010000 	.word	0x40010000
 80069cc:	40000400 	.word	0x40000400
 80069d0:	40000800 	.word	0x40000800
 80069d4:	40000c00 	.word	0x40000c00
 80069d8:	40010400 	.word	0x40010400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40001800 	.word	0x40001800

080069e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d122      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d11b      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0202 	mvn.w	r2, #2
 8006a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f9b5 	bl	8006d96 <HAL_TIM_IC_CaptureCallback>
 8006a2c:	e005      	b.n	8006a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9a7 	bl	8006d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f9b8 	bl	8006daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d122      	bne.n	8006a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d11b      	bne.n	8006a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0204 	mvn.w	r2, #4
 8006a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f98b 	bl	8006d96 <HAL_TIM_IC_CaptureCallback>
 8006a80:	e005      	b.n	8006a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f97d 	bl	8006d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f98e 	bl	8006daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d122      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d11b      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0208 	mvn.w	r2, #8
 8006ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2204      	movs	r2, #4
 8006abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f961 	bl	8006d96 <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f953 	bl	8006d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f964 	bl	8006daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b10      	cmp	r3, #16
 8006af4:	d122      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d11b      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0210 	mvn.w	r2, #16
 8006b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2208      	movs	r2, #8
 8006b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f937 	bl	8006d96 <HAL_TIM_IC_CaptureCallback>
 8006b28:	e005      	b.n	8006b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f929 	bl	8006d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f93a 	bl	8006daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d10e      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d107      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0201 	mvn.w	r2, #1
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fa fe6c 	bl	8001840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b72:	2b80      	cmp	r3, #128	; 0x80
 8006b74:	d10e      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b80:	2b80      	cmp	r3, #128	; 0x80
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fae0 	bl	8007154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	d10e      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d107      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f8ff 	bl	8006dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d10e      	bne.n	8006bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d107      	bne.n	8006bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0220 	mvn.w	r2, #32
 8006be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 faaa 	bl	8007140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIM_ConfigClockSource+0x1c>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e0b4      	b.n	8006d7a <HAL_TIM_ConfigClockSource+0x186>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c48:	d03e      	beq.n	8006cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8006c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4e:	f200 8087 	bhi.w	8006d60 <HAL_TIM_ConfigClockSource+0x16c>
 8006c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c56:	f000 8086 	beq.w	8006d66 <HAL_TIM_ConfigClockSource+0x172>
 8006c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5e:	d87f      	bhi.n	8006d60 <HAL_TIM_ConfigClockSource+0x16c>
 8006c60:	2b70      	cmp	r3, #112	; 0x70
 8006c62:	d01a      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0xa6>
 8006c64:	2b70      	cmp	r3, #112	; 0x70
 8006c66:	d87b      	bhi.n	8006d60 <HAL_TIM_ConfigClockSource+0x16c>
 8006c68:	2b60      	cmp	r3, #96	; 0x60
 8006c6a:	d050      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x11a>
 8006c6c:	2b60      	cmp	r3, #96	; 0x60
 8006c6e:	d877      	bhi.n	8006d60 <HAL_TIM_ConfigClockSource+0x16c>
 8006c70:	2b50      	cmp	r3, #80	; 0x50
 8006c72:	d03c      	beq.n	8006cee <HAL_TIM_ConfigClockSource+0xfa>
 8006c74:	2b50      	cmp	r3, #80	; 0x50
 8006c76:	d873      	bhi.n	8006d60 <HAL_TIM_ConfigClockSource+0x16c>
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d058      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x13a>
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d86f      	bhi.n	8006d60 <HAL_TIM_ConfigClockSource+0x16c>
 8006c80:	2b30      	cmp	r3, #48	; 0x30
 8006c82:	d064      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x15a>
 8006c84:	2b30      	cmp	r3, #48	; 0x30
 8006c86:	d86b      	bhi.n	8006d60 <HAL_TIM_ConfigClockSource+0x16c>
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d060      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x15a>
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d867      	bhi.n	8006d60 <HAL_TIM_ConfigClockSource+0x16c>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d05c      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x15a>
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d05a      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x15a>
 8006c98:	e062      	b.n	8006d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6899      	ldr	r1, [r3, #8]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f000 f9ad 	bl	8007008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	609a      	str	r2, [r3, #8]
      break;
 8006cc6:	e04f      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	6899      	ldr	r1, [r3, #8]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f000 f996 	bl	8007008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cea:	609a      	str	r2, [r3, #8]
      break;
 8006cec:	e03c      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6859      	ldr	r1, [r3, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f000 f90a 	bl	8006f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2150      	movs	r1, #80	; 0x50
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 f963 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 8006d0c:	e02c      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6859      	ldr	r1, [r3, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f000 f929 	bl	8006f72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2160      	movs	r1, #96	; 0x60
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 f953 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 8006d2c:	e01c      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6859      	ldr	r1, [r3, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f000 f8ea 	bl	8006f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2140      	movs	r1, #64	; 0x40
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f943 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 8006d4c:	e00c      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4619      	mov	r1, r3
 8006d58:	4610      	mov	r0, r2
 8006d5a:	f000 f93a 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 8006d5e:	e003      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
      break;
 8006d64:	e000      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
	...

08006dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a40      	ldr	r2, [pc, #256]	; (8006ee8 <TIM_Base_SetConfig+0x114>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d013      	beq.n	8006e14 <TIM_Base_SetConfig+0x40>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df2:	d00f      	beq.n	8006e14 <TIM_Base_SetConfig+0x40>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a3d      	ldr	r2, [pc, #244]	; (8006eec <TIM_Base_SetConfig+0x118>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00b      	beq.n	8006e14 <TIM_Base_SetConfig+0x40>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a3c      	ldr	r2, [pc, #240]	; (8006ef0 <TIM_Base_SetConfig+0x11c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d007      	beq.n	8006e14 <TIM_Base_SetConfig+0x40>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a3b      	ldr	r2, [pc, #236]	; (8006ef4 <TIM_Base_SetConfig+0x120>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d003      	beq.n	8006e14 <TIM_Base_SetConfig+0x40>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a3a      	ldr	r2, [pc, #232]	; (8006ef8 <TIM_Base_SetConfig+0x124>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d108      	bne.n	8006e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a2f      	ldr	r2, [pc, #188]	; (8006ee8 <TIM_Base_SetConfig+0x114>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d02b      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e34:	d027      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a2c      	ldr	r2, [pc, #176]	; (8006eec <TIM_Base_SetConfig+0x118>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d023      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a2b      	ldr	r2, [pc, #172]	; (8006ef0 <TIM_Base_SetConfig+0x11c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d01f      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2a      	ldr	r2, [pc, #168]	; (8006ef4 <TIM_Base_SetConfig+0x120>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d01b      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a29      	ldr	r2, [pc, #164]	; (8006ef8 <TIM_Base_SetConfig+0x124>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d017      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a28      	ldr	r2, [pc, #160]	; (8006efc <TIM_Base_SetConfig+0x128>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d013      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a27      	ldr	r2, [pc, #156]	; (8006f00 <TIM_Base_SetConfig+0x12c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00f      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a26      	ldr	r2, [pc, #152]	; (8006f04 <TIM_Base_SetConfig+0x130>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00b      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a25      	ldr	r2, [pc, #148]	; (8006f08 <TIM_Base_SetConfig+0x134>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d007      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a24      	ldr	r2, [pc, #144]	; (8006f0c <TIM_Base_SetConfig+0x138>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d003      	beq.n	8006e86 <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a23      	ldr	r2, [pc, #140]	; (8006f10 <TIM_Base_SetConfig+0x13c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d108      	bne.n	8006e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a0a      	ldr	r2, [pc, #40]	; (8006ee8 <TIM_Base_SetConfig+0x114>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_Base_SetConfig+0xf8>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a0c      	ldr	r2, [pc, #48]	; (8006ef8 <TIM_Base_SetConfig+0x124>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d103      	bne.n	8006ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	691a      	ldr	r2, [r3, #16]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	615a      	str	r2, [r3, #20]
}
 8006eda:	bf00      	nop
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	40010000 	.word	0x40010000
 8006eec:	40000400 	.word	0x40000400
 8006ef0:	40000800 	.word	0x40000800
 8006ef4:	40000c00 	.word	0x40000c00
 8006ef8:	40010400 	.word	0x40010400
 8006efc:	40014000 	.word	0x40014000
 8006f00:	40014400 	.word	0x40014400
 8006f04:	40014800 	.word	0x40014800
 8006f08:	40001800 	.word	0x40001800
 8006f0c:	40001c00 	.word	0x40001c00
 8006f10:	40002000 	.word	0x40002000

08006f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f023 0201 	bic.w	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f023 030a 	bic.w	r3, r3, #10
 8006f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0210 	bic.w	r2, r3, #16
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	031b      	lsls	r3, r3, #12
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f043 0307 	orr.w	r3, r3, #7
 8006ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	609a      	str	r2, [r3, #8]
}
 8006ffc:	bf00      	nop
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	021a      	lsls	r2, r3, #8
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	431a      	orrs	r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4313      	orrs	r3, r2
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	609a      	str	r2, [r3, #8]
}
 800703c:	bf00      	nop
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e05a      	b.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a21      	ldr	r2, [pc, #132]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d022      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ac:	d01d      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d018      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1b      	ldr	r2, [pc, #108]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1a      	ldr	r2, [pc, #104]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00e      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a18      	ldr	r2, [pc, #96]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d009      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a17      	ldr	r2, [pc, #92]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d004      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a15      	ldr	r2, [pc, #84]	; (800713c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d10c      	bne.n	8007104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40010000 	.word	0x40010000
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	40010400 	.word	0x40010400
 8007138:	40014000 	.word	0x40014000
 800713c:	40001800 	.word	0x40001800

08007140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e03f      	b.n	80071fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fa fde8 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2224      	movs	r2, #36	; 0x24
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f929 	bl	8007404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695a      	ldr	r2, [r3, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b08a      	sub	sp, #40	; 0x28
 8007206:	af02      	add	r7, sp, #8
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b20      	cmp	r3, #32
 8007220:	d17c      	bne.n	800731c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_UART_Transmit+0x2c>
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e075      	b.n	800731e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_UART_Transmit+0x3e>
 800723c:	2302      	movs	r3, #2
 800723e:	e06e      	b.n	800731e <HAL_UART_Transmit+0x11c>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2221      	movs	r2, #33	; 0x21
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007256:	f7fb f85b 	bl	8002310 <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	88fa      	ldrh	r2, [r7, #6]
 8007266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007270:	d108      	bne.n	8007284 <HAL_UART_Transmit+0x82>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d104      	bne.n	8007284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	e003      	b.n	800728c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007294:	e02a      	b.n	80072ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	2180      	movs	r1, #128	; 0x80
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f840 	bl	8007326 <UART_WaitOnFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e036      	b.n	800731e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	3302      	adds	r3, #2
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e007      	b.n	80072de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	3301      	adds	r3, #1
 80072dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1cf      	bne.n	8007296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2200      	movs	r2, #0
 80072fe:	2140      	movs	r1, #64	; 0x40
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f810 	bl	8007326 <UART_WaitOnFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e006      	b.n	800731e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e000      	b.n	800731e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b090      	sub	sp, #64	; 0x40
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	603b      	str	r3, [r7, #0]
 8007332:	4613      	mov	r3, r2
 8007334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007336:	e050      	b.n	80073da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733e:	d04c      	beq.n	80073da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <UART_WaitOnFlagUntilTimeout+0x30>
 8007346:	f7fa ffe3 	bl	8002310 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007352:	429a      	cmp	r2, r3
 8007354:	d241      	bcs.n	80073da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800736c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007376:	637a      	str	r2, [r7, #52]	; 0x34
 8007378:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800737c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e5      	bne.n	8007356 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3314      	adds	r3, #20
 8007390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	613b      	str	r3, [r7, #16]
   return(result);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f023 0301 	bic.w	r3, r3, #1
 80073a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3314      	adds	r3, #20
 80073a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073aa:	623a      	str	r2, [r7, #32]
 80073ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	69f9      	ldr	r1, [r7, #28]
 80073b0:	6a3a      	ldr	r2, [r7, #32]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e5      	bne.n	800738a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e00f      	b.n	80073fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	4013      	ands	r3, r2
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	bf0c      	ite	eq
 80073ea:	2301      	moveq	r3, #1
 80073ec:	2300      	movne	r3, #0
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d09f      	beq.n	8007338 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3740      	adds	r7, #64	; 0x40
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007408:	b0c0      	sub	sp, #256	; 0x100
 800740a:	af00      	add	r7, sp, #0
 800740c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	68d9      	ldr	r1, [r3, #12]
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	ea40 0301 	orr.w	r3, r0, r1
 800742c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	431a      	orrs	r2, r3
 800743c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	431a      	orrs	r2, r3
 8007444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800745c:	f021 010c 	bic.w	r1, r1, #12
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800746a:	430b      	orrs	r3, r1
 800746c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800747a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747e:	6999      	ldr	r1, [r3, #24]
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	ea40 0301 	orr.w	r3, r0, r1
 800748a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b8f      	ldr	r3, [pc, #572]	; (80076d0 <UART_SetConfig+0x2cc>)
 8007494:	429a      	cmp	r2, r3
 8007496:	d005      	beq.n	80074a4 <UART_SetConfig+0xa0>
 8007498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4b8d      	ldr	r3, [pc, #564]	; (80076d4 <UART_SetConfig+0x2d0>)
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d104      	bne.n	80074ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074a4:	f7fe f9fc 	bl	80058a0 <HAL_RCC_GetPCLK2Freq>
 80074a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80074ac:	e003      	b.n	80074b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074ae:	f7fe f9e3 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 80074b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074c0:	f040 810c 	bne.w	80076dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80074d6:	4622      	mov	r2, r4
 80074d8:	462b      	mov	r3, r5
 80074da:	1891      	adds	r1, r2, r2
 80074dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80074de:	415b      	adcs	r3, r3
 80074e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074e6:	4621      	mov	r1, r4
 80074e8:	eb12 0801 	adds.w	r8, r2, r1
 80074ec:	4629      	mov	r1, r5
 80074ee:	eb43 0901 	adc.w	r9, r3, r1
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	f04f 0300 	mov.w	r3, #0
 80074fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007506:	4690      	mov	r8, r2
 8007508:	4699      	mov	r9, r3
 800750a:	4623      	mov	r3, r4
 800750c:	eb18 0303 	adds.w	r3, r8, r3
 8007510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007514:	462b      	mov	r3, r5
 8007516:	eb49 0303 	adc.w	r3, r9, r3
 800751a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800752a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800752e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007532:	460b      	mov	r3, r1
 8007534:	18db      	adds	r3, r3, r3
 8007536:	653b      	str	r3, [r7, #80]	; 0x50
 8007538:	4613      	mov	r3, r2
 800753a:	eb42 0303 	adc.w	r3, r2, r3
 800753e:	657b      	str	r3, [r7, #84]	; 0x54
 8007540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007548:	f7f9 fb3e 	bl	8000bc8 <__aeabi_uldivmod>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4b61      	ldr	r3, [pc, #388]	; (80076d8 <UART_SetConfig+0x2d4>)
 8007552:	fba3 2302 	umull	r2, r3, r3, r2
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	011c      	lsls	r4, r3, #4
 800755a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800755e:	2200      	movs	r2, #0
 8007560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800756c:	4642      	mov	r2, r8
 800756e:	464b      	mov	r3, r9
 8007570:	1891      	adds	r1, r2, r2
 8007572:	64b9      	str	r1, [r7, #72]	; 0x48
 8007574:	415b      	adcs	r3, r3
 8007576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800757c:	4641      	mov	r1, r8
 800757e:	eb12 0a01 	adds.w	sl, r2, r1
 8007582:	4649      	mov	r1, r9
 8007584:	eb43 0b01 	adc.w	fp, r3, r1
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800759c:	4692      	mov	sl, r2
 800759e:	469b      	mov	fp, r3
 80075a0:	4643      	mov	r3, r8
 80075a2:	eb1a 0303 	adds.w	r3, sl, r3
 80075a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075aa:	464b      	mov	r3, r9
 80075ac:	eb4b 0303 	adc.w	r3, fp, r3
 80075b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80075c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075c8:	460b      	mov	r3, r1
 80075ca:	18db      	adds	r3, r3, r3
 80075cc:	643b      	str	r3, [r7, #64]	; 0x40
 80075ce:	4613      	mov	r3, r2
 80075d0:	eb42 0303 	adc.w	r3, r2, r3
 80075d4:	647b      	str	r3, [r7, #68]	; 0x44
 80075d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075de:	f7f9 faf3 	bl	8000bc8 <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4611      	mov	r1, r2
 80075e8:	4b3b      	ldr	r3, [pc, #236]	; (80076d8 <UART_SetConfig+0x2d4>)
 80075ea:	fba3 2301 	umull	r2, r3, r3, r1
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	2264      	movs	r2, #100	; 0x64
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	1acb      	subs	r3, r1, r3
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075fe:	4b36      	ldr	r3, [pc, #216]	; (80076d8 <UART_SetConfig+0x2d4>)
 8007600:	fba3 2302 	umull	r2, r3, r3, r2
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800760c:	441c      	add	r4, r3
 800760e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007612:	2200      	movs	r2, #0
 8007614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800761c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007620:	4642      	mov	r2, r8
 8007622:	464b      	mov	r3, r9
 8007624:	1891      	adds	r1, r2, r2
 8007626:	63b9      	str	r1, [r7, #56]	; 0x38
 8007628:	415b      	adcs	r3, r3
 800762a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800762c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007630:	4641      	mov	r1, r8
 8007632:	1851      	adds	r1, r2, r1
 8007634:	6339      	str	r1, [r7, #48]	; 0x30
 8007636:	4649      	mov	r1, r9
 8007638:	414b      	adcs	r3, r1
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007648:	4659      	mov	r1, fp
 800764a:	00cb      	lsls	r3, r1, #3
 800764c:	4651      	mov	r1, sl
 800764e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007652:	4651      	mov	r1, sl
 8007654:	00ca      	lsls	r2, r1, #3
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	4603      	mov	r3, r0
 800765c:	4642      	mov	r2, r8
 800765e:	189b      	adds	r3, r3, r2
 8007660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007664:	464b      	mov	r3, r9
 8007666:	460a      	mov	r2, r1
 8007668:	eb42 0303 	adc.w	r3, r2, r3
 800766c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800767c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007684:	460b      	mov	r3, r1
 8007686:	18db      	adds	r3, r3, r3
 8007688:	62bb      	str	r3, [r7, #40]	; 0x28
 800768a:	4613      	mov	r3, r2
 800768c:	eb42 0303 	adc.w	r3, r2, r3
 8007690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800769a:	f7f9 fa95 	bl	8000bc8 <__aeabi_uldivmod>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <UART_SetConfig+0x2d4>)
 80076a4:	fba3 1302 	umull	r1, r3, r3, r2
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	2164      	movs	r1, #100	; 0x64
 80076ac:	fb01 f303 	mul.w	r3, r1, r3
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	3332      	adds	r3, #50	; 0x32
 80076b6:	4a08      	ldr	r2, [pc, #32]	; (80076d8 <UART_SetConfig+0x2d4>)
 80076b8:	fba2 2303 	umull	r2, r3, r2, r3
 80076bc:	095b      	lsrs	r3, r3, #5
 80076be:	f003 0207 	and.w	r2, r3, #7
 80076c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4422      	add	r2, r4
 80076ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076cc:	e105      	b.n	80078da <UART_SetConfig+0x4d6>
 80076ce:	bf00      	nop
 80076d0:	40011000 	.word	0x40011000
 80076d4:	40011400 	.word	0x40011400
 80076d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076ee:	4642      	mov	r2, r8
 80076f0:	464b      	mov	r3, r9
 80076f2:	1891      	adds	r1, r2, r2
 80076f4:	6239      	str	r1, [r7, #32]
 80076f6:	415b      	adcs	r3, r3
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
 80076fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076fe:	4641      	mov	r1, r8
 8007700:	1854      	adds	r4, r2, r1
 8007702:	4649      	mov	r1, r9
 8007704:	eb43 0501 	adc.w	r5, r3, r1
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	f04f 0300 	mov.w	r3, #0
 8007710:	00eb      	lsls	r3, r5, #3
 8007712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007716:	00e2      	lsls	r2, r4, #3
 8007718:	4614      	mov	r4, r2
 800771a:	461d      	mov	r5, r3
 800771c:	4643      	mov	r3, r8
 800771e:	18e3      	adds	r3, r4, r3
 8007720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007724:	464b      	mov	r3, r9
 8007726:	eb45 0303 	adc.w	r3, r5, r3
 800772a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800773a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800773e:	f04f 0200 	mov.w	r2, #0
 8007742:	f04f 0300 	mov.w	r3, #0
 8007746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800774a:	4629      	mov	r1, r5
 800774c:	008b      	lsls	r3, r1, #2
 800774e:	4621      	mov	r1, r4
 8007750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007754:	4621      	mov	r1, r4
 8007756:	008a      	lsls	r2, r1, #2
 8007758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800775c:	f7f9 fa34 	bl	8000bc8 <__aeabi_uldivmod>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4b60      	ldr	r3, [pc, #384]	; (80078e8 <UART_SetConfig+0x4e4>)
 8007766:	fba3 2302 	umull	r2, r3, r3, r2
 800776a:	095b      	lsrs	r3, r3, #5
 800776c:	011c      	lsls	r4, r3, #4
 800776e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800777c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007780:	4642      	mov	r2, r8
 8007782:	464b      	mov	r3, r9
 8007784:	1891      	adds	r1, r2, r2
 8007786:	61b9      	str	r1, [r7, #24]
 8007788:	415b      	adcs	r3, r3
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007790:	4641      	mov	r1, r8
 8007792:	1851      	adds	r1, r2, r1
 8007794:	6139      	str	r1, [r7, #16]
 8007796:	4649      	mov	r1, r9
 8007798:	414b      	adcs	r3, r1
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077a8:	4659      	mov	r1, fp
 80077aa:	00cb      	lsls	r3, r1, #3
 80077ac:	4651      	mov	r1, sl
 80077ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077b2:	4651      	mov	r1, sl
 80077b4:	00ca      	lsls	r2, r1, #3
 80077b6:	4610      	mov	r0, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	4642      	mov	r2, r8
 80077be:	189b      	adds	r3, r3, r2
 80077c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077c4:	464b      	mov	r3, r9
 80077c6:	460a      	mov	r2, r1
 80077c8:	eb42 0303 	adc.w	r3, r2, r3
 80077cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80077da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077e8:	4649      	mov	r1, r9
 80077ea:	008b      	lsls	r3, r1, #2
 80077ec:	4641      	mov	r1, r8
 80077ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077f2:	4641      	mov	r1, r8
 80077f4:	008a      	lsls	r2, r1, #2
 80077f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077fa:	f7f9 f9e5 	bl	8000bc8 <__aeabi_uldivmod>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4b39      	ldr	r3, [pc, #228]	; (80078e8 <UART_SetConfig+0x4e4>)
 8007804:	fba3 1302 	umull	r1, r3, r3, r2
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	2164      	movs	r1, #100	; 0x64
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	3332      	adds	r3, #50	; 0x32
 8007816:	4a34      	ldr	r2, [pc, #208]	; (80078e8 <UART_SetConfig+0x4e4>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007822:	441c      	add	r4, r3
 8007824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007828:	2200      	movs	r2, #0
 800782a:	673b      	str	r3, [r7, #112]	; 0x70
 800782c:	677a      	str	r2, [r7, #116]	; 0x74
 800782e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007832:	4642      	mov	r2, r8
 8007834:	464b      	mov	r3, r9
 8007836:	1891      	adds	r1, r2, r2
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	415b      	adcs	r3, r3
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007842:	4641      	mov	r1, r8
 8007844:	1851      	adds	r1, r2, r1
 8007846:	6039      	str	r1, [r7, #0]
 8007848:	4649      	mov	r1, r9
 800784a:	414b      	adcs	r3, r1
 800784c:	607b      	str	r3, [r7, #4]
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800785a:	4659      	mov	r1, fp
 800785c:	00cb      	lsls	r3, r1, #3
 800785e:	4651      	mov	r1, sl
 8007860:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007864:	4651      	mov	r1, sl
 8007866:	00ca      	lsls	r2, r1, #3
 8007868:	4610      	mov	r0, r2
 800786a:	4619      	mov	r1, r3
 800786c:	4603      	mov	r3, r0
 800786e:	4642      	mov	r2, r8
 8007870:	189b      	adds	r3, r3, r2
 8007872:	66bb      	str	r3, [r7, #104]	; 0x68
 8007874:	464b      	mov	r3, r9
 8007876:	460a      	mov	r2, r1
 8007878:	eb42 0303 	adc.w	r3, r2, r3
 800787c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	663b      	str	r3, [r7, #96]	; 0x60
 8007888:	667a      	str	r2, [r7, #100]	; 0x64
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	f04f 0300 	mov.w	r3, #0
 8007892:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007896:	4649      	mov	r1, r9
 8007898:	008b      	lsls	r3, r1, #2
 800789a:	4641      	mov	r1, r8
 800789c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078a0:	4641      	mov	r1, r8
 80078a2:	008a      	lsls	r2, r1, #2
 80078a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80078a8:	f7f9 f98e 	bl	8000bc8 <__aeabi_uldivmod>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <UART_SetConfig+0x4e4>)
 80078b2:	fba3 1302 	umull	r1, r3, r3, r2
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	2164      	movs	r1, #100	; 0x64
 80078ba:	fb01 f303 	mul.w	r3, r1, r3
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	3332      	adds	r3, #50	; 0x32
 80078c4:	4a08      	ldr	r2, [pc, #32]	; (80078e8 <UART_SetConfig+0x4e4>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	f003 020f 	and.w	r2, r3, #15
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4422      	add	r2, r4
 80078d8:	609a      	str	r2, [r3, #8]
}
 80078da:	bf00      	nop
 80078dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078e0:	46bd      	mov	sp, r7
 80078e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078e6:	bf00      	nop
 80078e8:	51eb851f 	.word	0x51eb851f

080078ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d123      	bne.n	8007946 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007906:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	6851      	ldr	r1, [r2, #4]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	6892      	ldr	r2, [r2, #8]
 8007912:	4311      	orrs	r1, r2
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	68d2      	ldr	r2, [r2, #12]
 8007918:	4311      	orrs	r1, r2
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	6912      	ldr	r2, [r2, #16]
 800791e:	4311      	orrs	r1, r2
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	6952      	ldr	r2, [r2, #20]
 8007924:	4311      	orrs	r1, r2
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	6992      	ldr	r2, [r2, #24]
 800792a:	4311      	orrs	r1, r2
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	69d2      	ldr	r2, [r2, #28]
 8007930:	4311      	orrs	r1, r2
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	6a12      	ldr	r2, [r2, #32]
 8007936:	4311      	orrs	r1, r2
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800793c:	430a      	orrs	r2, r1
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	e028      	b.n	8007998 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	69d9      	ldr	r1, [r3, #28]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	4319      	orrs	r1, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	430b      	orrs	r3, r1
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800796c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	6851      	ldr	r1, [r2, #4]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	6892      	ldr	r2, [r2, #8]
 8007978:	4311      	orrs	r1, r2
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	68d2      	ldr	r2, [r2, #12]
 800797e:	4311      	orrs	r1, r2
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	6912      	ldr	r2, [r2, #16]
 8007984:	4311      	orrs	r1, r2
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	6952      	ldr	r2, [r2, #20]
 800798a:	4311      	orrs	r1, r2
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	6992      	ldr	r2, [r2, #24]
 8007990:	430a      	orrs	r2, r1
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d128      	bne.n	8007a0a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	1e59      	subs	r1, r3, #1
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	4319      	orrs	r1, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	4319      	orrs	r1, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	3b01      	subs	r3, #1
 80079e0:	031b      	lsls	r3, r3, #12
 80079e2:	4319      	orrs	r1, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	041b      	lsls	r3, r3, #16
 80079ec:	4319      	orrs	r1, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	051b      	lsls	r3, r3, #20
 80079f6:	4319      	orrs	r1, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	061b      	lsls	r3, r3, #24
 8007a00:	430b      	orrs	r3, r1
 8007a02:	431a      	orrs	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	609a      	str	r2, [r3, #8]
 8007a08:	e02f      	b.n	8007a6a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	68d2      	ldr	r2, [r2, #12]
 8007a1a:	3a01      	subs	r2, #1
 8007a1c:	0311      	lsls	r1, r2, #12
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	6952      	ldr	r2, [r2, #20]
 8007a22:	3a01      	subs	r2, #1
 8007a24:	0512      	lsls	r2, r2, #20
 8007a26:	430a      	orrs	r2, r1
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	1e59      	subs	r1, r3, #1
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	011b      	lsls	r3, r3, #4
 8007a44:	4319      	orrs	r1, r3
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	4319      	orrs	r1, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	041b      	lsls	r3, r3, #16
 8007a58:	4319      	orrs	r1, r3
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	061b      	lsls	r3, r3, #24
 8007a62:	430b      	orrs	r3, r1
 8007a64:	431a      	orrs	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a78:	b084      	sub	sp, #16
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	f107 001c 	add.w	r0, r7, #28
 8007a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d122      	bne.n	8007ad6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d105      	bne.n	8007aca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f9c0 	bl	8007e50 <USB_CoreReset>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
 8007ad4:	e01a      	b.n	8007b0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f9b4 	bl	8007e50 <USB_CoreReset>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	639a      	str	r2, [r3, #56]	; 0x38
 8007afe:	e005      	b.n	8007b0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d10b      	bne.n	8007b2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f043 0206 	orr.w	r2, r3, #6
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f043 0220 	orr.w	r2, r3, #32
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b36:	b004      	add	sp, #16
 8007b38:	4770      	bx	lr

08007b3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f043 0201 	orr.w	r2, r3, #1
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f023 0201 	bic.w	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d115      	bne.n	8007bcc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bac:	2001      	movs	r0, #1
 8007bae:	f7fa fbbb 	bl	8002328 <HAL_Delay>
      ms++;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f93a 	bl	8007e32 <USB_GetMode>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d01e      	beq.n	8007c02 <USB_SetCurrentMode+0x84>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b31      	cmp	r3, #49	; 0x31
 8007bc8:	d9f0      	bls.n	8007bac <USB_SetCurrentMode+0x2e>
 8007bca:	e01a      	b.n	8007c02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d115      	bne.n	8007bfe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bde:	2001      	movs	r0, #1
 8007be0:	f7fa fba2 	bl	8002328 <HAL_Delay>
      ms++;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3301      	adds	r3, #1
 8007be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f921 	bl	8007e32 <USB_GetMode>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <USB_SetCurrentMode+0x84>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b31      	cmp	r3, #49	; 0x31
 8007bfa:	d9f0      	bls.n	8007bde <USB_SetCurrentMode+0x60>
 8007bfc:	e001      	b.n	8007c02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e005      	b.n	8007c0e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b32      	cmp	r3, #50	; 0x32
 8007c06:	d101      	bne.n	8007c0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e000      	b.n	8007c0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a13      	ldr	r2, [pc, #76]	; (8007c7c <USB_FlushTxFifo+0x64>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d901      	bls.n	8007c38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e01b      	b.n	8007c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	daf2      	bge.n	8007c26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	019b      	lsls	r3, r3, #6
 8007c48:	f043 0220 	orr.w	r2, r3, #32
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4a08      	ldr	r2, [pc, #32]	; (8007c7c <USB_FlushTxFifo+0x64>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d901      	bls.n	8007c62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e006      	b.n	8007c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d0f0      	beq.n	8007c50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	00030d40 	.word	0x00030d40

08007c80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <USB_FlushRxFifo+0x5c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d901      	bls.n	8007c9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e018      	b.n	8007cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	daf2      	bge.n	8007c8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2210      	movs	r2, #16
 8007cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4a08      	ldr	r2, [pc, #32]	; (8007cdc <USB_FlushRxFifo+0x5c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d901      	bls.n	8007cc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e006      	b.n	8007cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	2b10      	cmp	r3, #16
 8007ccc:	d0f0      	beq.n	8007cb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	00030d40 	.word	0x00030d40

08007ce0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b089      	sub	sp, #36	; 0x24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4611      	mov	r1, r2
 8007cec:	461a      	mov	r2, r3
 8007cee:	460b      	mov	r3, r1
 8007cf0:	71fb      	strb	r3, [r7, #7]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d123      	bne.n	8007d4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d06:	88bb      	ldrh	r3, [r7, #4]
 8007d08:	3303      	adds	r3, #3
 8007d0a:	089b      	lsrs	r3, r3, #2
 8007d0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61bb      	str	r3, [r7, #24]
 8007d12:	e018      	b.n	8007d46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	031a      	lsls	r2, r3, #12
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d20:	461a      	mov	r2, r3
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	3301      	adds	r3, #1
 8007d32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	3301      	adds	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	3301      	adds	r3, #1
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d3e2      	bcc.n	8007d14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3724      	adds	r7, #36	; 0x24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b08b      	sub	sp, #44	; 0x2c
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	089b      	lsrs	r3, r3, #2
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d82:	2300      	movs	r3, #0
 8007d84:	623b      	str	r3, [r7, #32]
 8007d86:	e014      	b.n	8007db2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	3301      	adds	r3, #1
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	3301      	adds	r3, #1
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	3301      	adds	r3, #1
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	3301      	adds	r3, #1
 8007db0:	623b      	str	r3, [r7, #32]
 8007db2:	6a3a      	ldr	r2, [r7, #32]
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d3e6      	bcc.n	8007d88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dba:	8bfb      	ldrh	r3, [r7, #30]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01e      	beq.n	8007dfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f107 0310 	add.w	r3, r7, #16
 8007dd0:	6812      	ldr	r2, [r2, #0]
 8007dd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	701a      	strb	r2, [r3, #0]
      i++;
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	3301      	adds	r3, #1
 8007dea:	623b      	str	r3, [r7, #32]
      pDest++;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	3301      	adds	r3, #1
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007df2:	8bfb      	ldrh	r3, [r7, #30]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007df8:	8bfb      	ldrh	r3, [r7, #30]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1ea      	bne.n	8007dd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	372c      	adds	r7, #44	; 0x2c
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	4013      	ands	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e24:	68fb      	ldr	r3, [r7, #12]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4a13      	ldr	r2, [pc, #76]	; (8007eb4 <USB_CoreReset+0x64>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d901      	bls.n	8007e6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e01b      	b.n	8007ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	daf2      	bge.n	8007e5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f043 0201 	orr.w	r2, r3, #1
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4a09      	ldr	r2, [pc, #36]	; (8007eb4 <USB_CoreReset+0x64>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d901      	bls.n	8007e98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e006      	b.n	8007ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d0f0      	beq.n	8007e86 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	00030d40 	.word	0x00030d40

08007eb8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007eb8:	b084      	sub	sp, #16
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b086      	sub	sp, #24
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ed8:	461a      	mov	r2, r3
 8007eda:	2300      	movs	r3, #0
 8007edc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d018      	beq.n	8007f40 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d10a      	bne.n	8007f2a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f22:	f043 0304 	orr.w	r3, r3, #4
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	e014      	b.n	8007f54 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f38:	f023 0304 	bic.w	r3, r3, #4
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	e009      	b.n	8007f54 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f4e:	f023 0304 	bic.w	r3, r3, #4
 8007f52:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f54:	2110      	movs	r1, #16
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff fe5e 	bl	8007c18 <USB_FlushTxFifo>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff fe8a 	bl	8007c80 <USB_FlushRxFifo>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f76:	2300      	movs	r3, #0
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	e015      	b.n	8007fa8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	613b      	str	r3, [r7, #16]
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d3e5      	bcc.n	8007f7c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fbc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00b      	beq.n	8007fe2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fd0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a13      	ldr	r2, [pc, #76]	; (8008024 <USB_HostInit+0x16c>)
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a13      	ldr	r2, [pc, #76]	; (8008028 <USB_HostInit+0x170>)
 8007fdc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007fe0:	e009      	b.n	8007ff6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2280      	movs	r2, #128	; 0x80
 8007fe6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a10      	ldr	r2, [pc, #64]	; (800802c <USB_HostInit+0x174>)
 8007fec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <USB_HostInit+0x178>)
 8007ff2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d105      	bne.n	8008008 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	f043 0210 	orr.w	r2, r3, #16
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <USB_HostInit+0x17c>)
 800800e:	4313      	orrs	r3, r2
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008020:	b004      	add	sp, #16
 8008022:	4770      	bx	lr
 8008024:	01000200 	.word	0x01000200
 8008028:	00e00300 	.word	0x00e00300
 800802c:	00600080 	.word	0x00600080
 8008030:	004000e0 	.word	0x004000e0
 8008034:	a3200008 	.word	0xa3200008

08008038 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008056:	f023 0303 	bic.w	r3, r3, #3
 800805a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008070:	4313      	orrs	r3, r2
 8008072:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d107      	bne.n	800808a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008080:	461a      	mov	r2, r3
 8008082:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008086:	6053      	str	r3, [r2, #4]
 8008088:	e009      	b.n	800809e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d106      	bne.n	800809e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008096:	461a      	mov	r2, r3
 8008098:	f241 7370 	movw	r3, #6000	; 0x1770
 800809c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080da:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80080dc:	2064      	movs	r0, #100	; 0x64
 80080de:	f7fa f923 	bl	8002328 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80080f0:	200a      	movs	r0, #10
 80080f2:	f7fa f919 	bl	8002328 <HAL_Delay>

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008124:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d109      	bne.n	8008144 <USB_DriveVbus+0x44>
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d106      	bne.n	8008144 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800813e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008142:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800814a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814e:	d109      	bne.n	8008164 <USB_DriveVbus+0x64>
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d106      	bne.n	8008164 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800815e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008162:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	0c5b      	lsrs	r3, r3, #17
 8008190:	f003 0303 	and.w	r3, r3, #3
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	b29b      	uxth	r3, r3
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
	...

080081c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	4608      	mov	r0, r1
 80081ce:	4611      	mov	r1, r2
 80081d0:	461a      	mov	r2, r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	70fb      	strb	r3, [r7, #3]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70bb      	strb	r3, [r7, #2]
 80081da:	4613      	mov	r3, r2
 80081dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80081e6:	78fb      	ldrb	r3, [r7, #3]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f2:	461a      	mov	r2, r3
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295
 80081f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80081fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d87e      	bhi.n	8008300 <USB_HC_Init+0x13c>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <USB_HC_Init+0x44>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008219 	.word	0x08008219
 800820c:	080082c3 	.word	0x080082c3
 8008210:	08008219 	.word	0x08008219
 8008214:	08008285 	.word	0x08008285
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	4413      	add	r3, r2
 8008220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008224:	461a      	mov	r2, r3
 8008226:	f240 439d 	movw	r3, #1181	; 0x49d
 800822a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800822c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008230:	2b00      	cmp	r3, #0
 8008232:	da10      	bge.n	8008256 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	4413      	add	r3, r2
 800823c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	78fa      	ldrb	r2, [r7, #3]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	440a      	add	r2, r1
 800824a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800824e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008252:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008254:	e057      	b.n	8008306 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825e:	2b00      	cmp	r3, #0
 8008260:	d051      	beq.n	8008306 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008262:	78fb      	ldrb	r3, [r7, #3]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	4413      	add	r3, r2
 800826a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	78fa      	ldrb	r2, [r7, #3]
 8008272:	0151      	lsls	r1, r2, #5
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	440a      	add	r2, r1
 8008278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800827c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008280:	60d3      	str	r3, [r2, #12]
      break;
 8008282:	e040      	b.n	8008306 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	4413      	add	r3, r2
 800828c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008290:	461a      	mov	r2, r3
 8008292:	f240 639d 	movw	r3, #1693	; 0x69d
 8008296:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008298:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800829c:	2b00      	cmp	r3, #0
 800829e:	da34      	bge.n	800830a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	78fa      	ldrb	r2, [r7, #3]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80082c0:	e023      	b.n	800830a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ce:	461a      	mov	r2, r3
 80082d0:	f240 2325 	movw	r3, #549	; 0x225
 80082d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da17      	bge.n	800830e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	78fa      	ldrb	r2, [r7, #3]
 80082ee:	0151      	lsls	r1, r2, #5
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	440a      	add	r2, r1
 80082f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80082fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80082fe:	e006      	b.n	800830e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	77fb      	strb	r3, [r7, #31]
      break;
 8008304:	e004      	b.n	8008310 <USB_HC_Init+0x14c>
      break;
 8008306:	bf00      	nop
 8008308:	e002      	b.n	8008310 <USB_HC_Init+0x14c>
      break;
 800830a:	bf00      	nop
 800830c:	e000      	b.n	8008310 <USB_HC_Init+0x14c>
      break;
 800830e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	4413      	add	r3, r2
 8008318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	0151      	lsls	r1, r2, #5
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	440a      	add	r2, r1
 8008326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800832a:	f043 0302 	orr.w	r3, r3, #2
 800832e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	2101      	movs	r1, #1
 8008340:	fa01 f303 	lsl.w	r3, r1, r3
 8008344:	6939      	ldr	r1, [r7, #16]
 8008346:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800834a:	4313      	orrs	r3, r2
 800834c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800835a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800835e:	2b00      	cmp	r3, #0
 8008360:	da03      	bge.n	800836a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008366:	61bb      	str	r3, [r7, #24]
 8008368:	e001      	b.n	800836e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff feff 	bl	8008172 <USB_GetHostSpeed>
 8008374:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008376:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800837a:	2b02      	cmp	r3, #2
 800837c:	d106      	bne.n	800838c <USB_HC_Init+0x1c8>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b02      	cmp	r3, #2
 8008382:	d003      	beq.n	800838c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	e001      	b.n	8008390 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008390:	787b      	ldrb	r3, [r7, #1]
 8008392:	059b      	lsls	r3, r3, #22
 8008394:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008398:	78bb      	ldrb	r3, [r7, #2]
 800839a:	02db      	lsls	r3, r3, #11
 800839c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083a0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083a6:	049b      	lsls	r3, r3, #18
 80083a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80083b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	0159      	lsls	r1, r3, #5
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	440b      	add	r3, r1
 80083c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083cc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80083ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d003      	beq.n	80083de <USB_HC_Init+0x21a>
 80083d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d10f      	bne.n	80083fe <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	78fa      	ldrb	r2, [r7, #3]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80083fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3720      	adds	r7, #32
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08c      	sub	sp, #48	; 0x30
 800840c:	af02      	add	r7, sp, #8
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	4613      	mov	r3, r2
 8008414:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008424:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842e:	2b00      	cmp	r3, #0
 8008430:	d02d      	beq.n	800848e <USB_HC_StartXfer+0x86>
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	791b      	ldrb	r3, [r3, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d129      	bne.n	800848e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d117      	bne.n	8008470 <USB_HC_StartXfer+0x68>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	79db      	ldrb	r3, [r3, #7]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <USB_HC_StartXfer+0x48>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	79db      	ldrb	r3, [r3, #7]
 800844c:	2b02      	cmp	r3, #2
 800844e:	d10f      	bne.n	8008470 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	4413      	add	r3, r2
 8008458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	6a3a      	ldr	r2, [r7, #32]
 8008464:	440a      	add	r2, r1
 8008466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800846a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <USB_HC_StartXfer+0x86>
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	795b      	ldrb	r3, [r3, #5]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d107      	bne.n	800848e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	4619      	mov	r1, r3
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 fa0f 	bl	80088a8 <USB_DoPing>
      return HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	e0f8      	b.n	8008680 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d018      	beq.n	80084c8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	8912      	ldrh	r2, [r2, #8]
 800849e:	4413      	add	r3, r2
 80084a0:	3b01      	subs	r3, #1
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	8912      	ldrh	r2, [r2, #8]
 80084a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084aa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80084ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084ae:	8b7b      	ldrh	r3, [r7, #26]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d90b      	bls.n	80084cc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80084b4:	8b7b      	ldrh	r3, [r7, #26]
 80084b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	8912      	ldrh	r2, [r2, #8]
 80084be:	fb03 f202 	mul.w	r2, r3, r2
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	611a      	str	r2, [r3, #16]
 80084c6:	e001      	b.n	80084cc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80084c8:	2301      	movs	r3, #1
 80084ca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	78db      	ldrb	r3, [r3, #3]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	8912      	ldrh	r2, [r2, #8]
 80084da:	fb03 f202 	mul.w	r2, r3, r2
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	611a      	str	r2, [r3, #16]
 80084e2:	e003      	b.n	80084ec <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	695a      	ldr	r2, [r3, #20]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084f6:	04d9      	lsls	r1, r3, #19
 80084f8:	4b63      	ldr	r3, [pc, #396]	; (8008688 <USB_HC_StartXfer+0x280>)
 80084fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	7a9b      	ldrb	r3, [r3, #10]
 8008502:	075b      	lsls	r3, r3, #29
 8008504:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008508:	69f9      	ldr	r1, [r7, #28]
 800850a:	0148      	lsls	r0, r1, #5
 800850c:	6a39      	ldr	r1, [r7, #32]
 800850e:	4401      	add	r1, r0
 8008510:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008514:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008516:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d009      	beq.n	8008532 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	68d9      	ldr	r1, [r3, #12]
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	4413      	add	r3, r2
 800852a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852e:	460a      	mov	r2, r1
 8008530:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	bf0c      	ite	eq
 8008542:	2301      	moveq	r3, #1
 8008544:	2300      	movne	r3, #0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	4413      	add	r3, r2
 8008552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	0151      	lsls	r1, r2, #5
 800855c:	6a3a      	ldr	r2, [r7, #32]
 800855e:	440a      	add	r2, r1
 8008560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008564:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008568:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	4413      	add	r3, r2
 8008572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	7e7b      	ldrb	r3, [r7, #25]
 800857a:	075b      	lsls	r3, r3, #29
 800857c:	69f9      	ldr	r1, [r7, #28]
 800857e:	0148      	lsls	r0, r1, #5
 8008580:	6a39      	ldr	r1, [r7, #32]
 8008582:	4401      	add	r1, r0
 8008584:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008588:	4313      	orrs	r3, r2
 800858a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	4413      	add	r3, r2
 8008594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085a2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	78db      	ldrb	r3, [r3, #3]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d004      	beq.n	80085b6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	e003      	b.n	80085be <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085bc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085c4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d2:	461a      	mov	r2, r3
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e04e      	b.n	8008680 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	78db      	ldrb	r3, [r3, #3]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d149      	bne.n	800867e <USB_HC_StartXfer+0x276>
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d045      	beq.n	800867e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	79db      	ldrb	r3, [r3, #7]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d830      	bhi.n	800865c <USB_HC_StartXfer+0x254>
 80085fa:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <USB_HC_StartXfer+0x1f8>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	08008611 	.word	0x08008611
 8008604:	08008635 	.word	0x08008635
 8008608:	08008611 	.word	0x08008611
 800860c:	08008635 	.word	0x08008635
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	3303      	adds	r3, #3
 8008616:	089b      	lsrs	r3, r3, #2
 8008618:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800861a:	8afa      	ldrh	r2, [r7, #22]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	b29b      	uxth	r3, r3
 8008622:	429a      	cmp	r2, r3
 8008624:	d91c      	bls.n	8008660 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f043 0220 	orr.w	r2, r3, #32
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	619a      	str	r2, [r3, #24]
        }
        break;
 8008632:	e015      	b.n	8008660 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	3303      	adds	r3, #3
 800863a:	089b      	lsrs	r3, r3, #2
 800863c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800863e:	8afa      	ldrh	r2, [r7, #22]
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	b29b      	uxth	r3, r3
 800864a:	429a      	cmp	r2, r3
 800864c:	d90a      	bls.n	8008664 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	619a      	str	r2, [r3, #24]
        }
        break;
 800865a:	e003      	b.n	8008664 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800865c:	bf00      	nop
 800865e:	e002      	b.n	8008666 <USB_HC_StartXfer+0x25e>
        break;
 8008660:	bf00      	nop
 8008662:	e000      	b.n	8008666 <USB_HC_StartXfer+0x25e>
        break;
 8008664:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	68d9      	ldr	r1, [r3, #12]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	785a      	ldrb	r2, [r3, #1]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	b29b      	uxth	r3, r3
 8008674:	2000      	movs	r0, #0
 8008676:	9000      	str	r0, [sp, #0]
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f7ff fb31 	bl	8007ce0 <USB_WritePacket>
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3728      	adds	r7, #40	; 0x28
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	1ff80000 	.word	0x1ff80000

0800868c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	b29b      	uxth	r3, r3
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b089      	sub	sp, #36	; 0x24
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	0c9b      	lsrs	r3, r3, #18
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	0fdb      	lsrs	r3, r3, #31
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b20      	cmp	r3, #32
 80086fc:	d104      	bne.n	8008708 <USB_HC_Halt+0x5a>
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	e0c8      	b.n	800889a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <USB_HC_Halt+0x66>
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d163      	bne.n	80087dc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	440a      	add	r2, r1
 800872a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008732:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f003 0320 	and.w	r3, r3, #32
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 80ab 	bne.w	8008898 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d133      	bne.n	80087b6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	4413      	add	r3, r2
 8008756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	69fa      	ldr	r2, [r7, #28]
 8008762:	440a      	add	r2, r1
 8008764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800876c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	4413      	add	r3, r2
 8008776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	0151      	lsls	r1, r2, #5
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	440a      	add	r2, r1
 8008784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800878c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3301      	adds	r3, #1
 8008792:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800879a:	d81d      	bhi.n	80087d8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b2:	d0ec      	beq.n	800878e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087b4:	e070      	b.n	8008898 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	0151      	lsls	r1, r2, #5
 80087c8:	69fa      	ldr	r2, [r7, #28]
 80087ca:	440a      	add	r2, r1
 80087cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087d4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087d6:	e05f      	b.n	8008898 <USB_HC_Halt+0x1ea>
            break;
 80087d8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087da:	e05d      	b.n	8008898 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	0151      	lsls	r1, r2, #5
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	440a      	add	r2, r1
 80087f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087fa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d133      	bne.n	8008874 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	4413      	add	r3, r2
 8008814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	0151      	lsls	r1, r2, #5
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	440a      	add	r2, r1
 8008822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800882a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	4413      	add	r3, r2
 8008834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	0151      	lsls	r1, r2, #5
 800883e:	69fa      	ldr	r2, [r7, #28]
 8008840:	440a      	add	r2, r1
 8008842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800884a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3301      	adds	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008858:	d81d      	bhi.n	8008896 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	4413      	add	r3, r2
 8008862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800886c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008870:	d0ec      	beq.n	800884c <USB_HC_Halt+0x19e>
 8008872:	e011      	b.n	8008898 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	0151      	lsls	r1, r2, #5
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	440a      	add	r2, r1
 800888a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800888e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	e000      	b.n	8008898 <USB_HC_Halt+0x1ea>
          break;
 8008896:	bf00      	nop
    }
  }

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3724      	adds	r7, #36	; 0x24
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
	...

080088a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80088bc:	2301      	movs	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	04da      	lsls	r2, r3, #19
 80088c4:	4b15      	ldr	r3, [pc, #84]	; (800891c <USB_DoPing+0x74>)
 80088c6:	4013      	ands	r3, r2
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	4413      	add	r3, r2
 8008902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008906:	461a      	mov	r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	1ff80000 	.word	0x1ff80000

08008920 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff f911 	bl	8007b5c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800893a:	2110      	movs	r1, #16
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7ff f96b 	bl	8007c18 <USB_FlushTxFifo>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7ff f997 	bl	8007c80 <USB_FlushRxFifo>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800895c:	2300      	movs	r3, #0
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	e01f      	b.n	80089a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	4413      	add	r3, r2
 800896a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008978:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008980:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008988:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008996:	461a      	mov	r2, r3
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	3301      	adds	r3, #1
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	2b0f      	cmp	r3, #15
 80089a6:	d9dc      	bls.n	8008962 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	61bb      	str	r3, [r7, #24]
 80089ac:	e034      	b.n	8008a18 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e2:	461a      	mov	r2, r3
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089f4:	d80c      	bhi.n	8008a10 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a0c:	d0ec      	beq.n	80089e8 <USB_StopHost+0xc8>
 8008a0e:	e000      	b.n	8008a12 <USB_StopHost+0xf2>
        break;
 8008a10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	3301      	adds	r3, #1
 8008a16:	61bb      	str	r3, [r7, #24]
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	2b0f      	cmp	r3, #15
 8008a1c:	d9c7      	bls.n	80089ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a24:	461a      	mov	r2, r3
 8008a26:	f04f 33ff 	mov.w	r3, #4294967295
 8008a2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff f880 	bl	8007b3a <USB_EnableGlobalInt>

  return ret;
 8008a3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3720      	adds	r7, #32
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <bWriteDataInGyro>:

bool bWriteDataInGyro(SPI_HandleTypeDef* hspi, uint8_t u8Address, uint8_t* pu8DataIn, uint16_t u16NbrData, bool bIsDoubleCheckEnabled);


bool bWriteDataInGyro(SPI_HandleTypeDef* hspi, uint8_t u8Address, uint8_t* pu8DataIn, uint16_t u16NbrData, bool bIsDoubleCheckEnabled)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	607a      	str	r2, [r7, #4]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	460b      	mov	r3, r1
 8008a52:	72fb      	strb	r3, [r7, #11]
 8008a54:	4613      	mov	r3, r2
 8008a56:	813b      	strh	r3, [r7, #8]
	bool bRetValue=false;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	75fb      	strb	r3, [r7, #23]
	uint8_t u8TmpAddress;
	uint8_t u8RxData;
	uint16_t i;

	u8TmpAddress = u8Address | GYROSCOPE_WRITE_CMD; // register address to write to
 8008a5c:	7afb      	ldrb	r3, [r7, #11]
 8008a5e:	74fb      	strb	r3, [r7, #19]
	if(u16NbrData>1)
 8008a60:	893b      	ldrh	r3, [r7, #8]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d905      	bls.n	8008a72 <bWriteDataInGyro+0x2e>
	{
		u8TmpAddress |= GYROSCOPE_RW_MULTIPLE_ADDR_CMD;
 8008a66:	7cfb      	ldrb	r3, [r7, #19]
 8008a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	74fb      	strb	r3, [r7, #19]
 8008a70:	e001      	b.n	8008a76 <bWriteDataInGyro+0x32>
	}
	else
	{
		u8TmpAddress |= GYROSCOPE_RW_SINGLE_ADDR_CMD;
 8008a72:	7cfb      	ldrb	r3, [r7, #19]
 8008a74:	74fb      	strb	r3, [r7, #19]
	}

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8008a76:	2200      	movs	r2, #0
 8008a78:	2102      	movs	r1, #2
 8008a7a:	483c      	ldr	r0, [pc, #240]	; (8008b6c <bWriteDataInGyro+0x128>)
 8008a7c:	f7fa f926 	bl	8002ccc <HAL_GPIO_WritePin>
	osDelay(1);// wait before communicate with sensor
 8008a80:	2001      	movs	r0, #1
 8008a82:	f002 fc74 	bl	800b36e <osDelay>

	if(HAL_SPI_Transmit(hspi, &u8TmpAddress, 1, 100) == HAL_OK)
 8008a86:	f107 0113 	add.w	r1, r7, #19
 8008a8a:	2364      	movs	r3, #100	; 0x64
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f7fd f9c9 	bl	8005e26 <HAL_SPI_Transmit>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d15e      	bne.n	8008b58 <bWriteDataInGyro+0x114>
	{
		if(HAL_SPI_Transmit(hspi, pu8DataIn, u16NbrData, 100) == HAL_OK)
 8008a9a:	893a      	ldrh	r2, [r7, #8]
 8008a9c:	2364      	movs	r3, #100	; 0x64
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7fd f9c0 	bl	8005e26 <HAL_SPI_Transmit>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d155      	bne.n	8008b58 <bWriteDataInGyro+0x114>
		{
			bRetValue = true;
 8008aac:	2301      	movs	r3, #1
 8008aae:	75fb      	strb	r3, [r7, #23]
			if(bIsDoubleCheckEnabled)
 8008ab0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d04f      	beq.n	8008b58 <bWriteDataInGyro+0x114>
			{
				// check if configuration is correctly done
				// we need to release the gyroscope and select it again to manage to set the address we want to Read(/Write) from(/in)
				HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8008ab8:	2201      	movs	r2, #1
 8008aba:	2102      	movs	r1, #2
 8008abc:	482b      	ldr	r0, [pc, #172]	; (8008b6c <bWriteDataInGyro+0x128>)
 8008abe:	f7fa f905 	bl	8002ccc <HAL_GPIO_WritePin>
				u8TmpAddress = u8Address | GYROSCOPE_READ_CMD; // register address to read from
 8008ac2:	7afb      	ldrb	r3, [r7, #11]
 8008ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	74fb      	strb	r3, [r7, #19]
				if(u16NbrData>1)
 8008acc:	893b      	ldrh	r3, [r7, #8]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d905      	bls.n	8008ade <bWriteDataInGyro+0x9a>
				{
					u8TmpAddress |= GYROSCOPE_RW_MULTIPLE_ADDR_CMD;
 8008ad2:	7cfb      	ldrb	r3, [r7, #19]
 8008ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	74fb      	strb	r3, [r7, #19]
 8008adc:	e001      	b.n	8008ae2 <bWriteDataInGyro+0x9e>
				}
				else
				{
					u8TmpAddress |= GYROSCOPE_RW_SINGLE_ADDR_CMD;
 8008ade:	7cfb      	ldrb	r3, [r7, #19]
 8008ae0:	74fb      	strb	r3, [r7, #19]
				}
				HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2102      	movs	r1, #2
 8008ae6:	4821      	ldr	r0, [pc, #132]	; (8008b6c <bWriteDataInGyro+0x128>)
 8008ae8:	f7fa f8f0 	bl	8002ccc <HAL_GPIO_WritePin>
				osDelay(1);// wait before communicate with sensor
 8008aec:	2001      	movs	r0, #1
 8008aee:	f002 fc3e 	bl	800b36e <osDelay>
				if(HAL_SPI_Transmit(hspi, &u8TmpAddress, 1, 100) == HAL_OK)
 8008af2:	f107 0113 	add.w	r1, r7, #19
 8008af6:	2364      	movs	r3, #100	; 0x64
 8008af8:	2201      	movs	r2, #1
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f7fd f993 	bl	8005e26 <HAL_SPI_Transmit>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d128      	bne.n	8008b58 <bWriteDataInGyro+0x114>
				{
					for(i=0; i<u16NbrData; i++)
 8008b06:	2300      	movs	r3, #0
 8008b08:	82bb      	strh	r3, [r7, #20]
 8008b0a:	e021      	b.n	8008b50 <bWriteDataInGyro+0x10c>
					{
						if(HAL_SPI_Receive(hspi, &u8RxData, 1, 100) == HAL_OK)
 8008b0c:	f107 0112 	add.w	r1, r7, #18
 8008b10:	2364      	movs	r3, #100	; 0x64
 8008b12:	2201      	movs	r2, #1
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7fd fac2 	bl	800609e <HAL_SPI_Receive>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d114      	bne.n	8008b4a <bWriteDataInGyro+0x106>
						{
							printf("register addr = %x, send data(%x) == received data(%x)\r\n", u8TmpAddress, pu8DataIn[i], u8RxData);
 8008b20:	7cfb      	ldrb	r3, [r7, #19]
 8008b22:	4619      	mov	r1, r3
 8008b24:	8abb      	ldrh	r3, [r7, #20]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	7cbb      	ldrb	r3, [r7, #18]
 8008b30:	480f      	ldr	r0, [pc, #60]	; (8008b70 <bWriteDataInGyro+0x12c>)
 8008b32:	f005 fee1 	bl	800e8f8 <iprintf>
							if(u8RxData != pu8DataIn[i])
 8008b36:	8abb      	ldrh	r3, [r7, #20]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	7cbb      	ldrb	r3, [r7, #18]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d002      	beq.n	8008b4a <bWriteDataInGyro+0x106>
							{
								bRetValue = false;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
								break; // exit loop since one data was incorrect
 8008b48:	e006      	b.n	8008b58 <bWriteDataInGyro+0x114>
					for(i=0; i<u16NbrData; i++)
 8008b4a:	8abb      	ldrh	r3, [r7, #20]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	82bb      	strh	r3, [r7, #20]
 8008b50:	8aba      	ldrh	r2, [r7, #20]
 8008b52:	893b      	ldrh	r3, [r7, #8]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d3d9      	bcc.n	8008b0c <bWriteDataInGyro+0xc8>
					}
				}
			}
		}
	}
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8008b58:	2201      	movs	r2, #1
 8008b5a:	2102      	movs	r1, #2
 8008b5c:	4803      	ldr	r0, [pc, #12]	; (8008b6c <bWriteDataInGyro+0x128>)
 8008b5e:	f7fa f8b5 	bl	8002ccc <HAL_GPIO_WritePin>

	return bRetValue;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40020800 	.word	0x40020800
 8008b70:	08010ac4 	.word	0x08010ac4

08008b74 <bGyroIsExist>:


bool bGyroIsExist(SPI_HandleTypeDef* hspi)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	bool bRetValue=false;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
	uint8_t u8TxData = GYROSCOPE_REG_ADDR_WHO_AM_I | GYROSCOPE_READ_CMD;
 8008b80:	238f      	movs	r3, #143	; 0x8f
 8008b82:	73bb      	strb	r3, [r7, #14]
	uint8_t u8RxData;

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8008b84:	2200      	movs	r2, #0
 8008b86:	2102      	movs	r1, #2
 8008b88:	4815      	ldr	r0, [pc, #84]	; (8008be0 <bGyroIsExist+0x6c>)
 8008b8a:	f7fa f89f 	bl	8002ccc <HAL_GPIO_WritePin>
	osDelay(1);// wait before communiate with sensor
 8008b8e:	2001      	movs	r0, #1
 8008b90:	f002 fbed 	bl	800b36e <osDelay>
	if(HAL_SPI_Transmit(hspi, &u8TxData, 1, 1000) == HAL_OK)
 8008b94:	f107 010e 	add.w	r1, r7, #14
 8008b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fd f941 	bl	8005e26 <HAL_SPI_Transmit>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10f      	bne.n	8008bca <bGyroIsExist+0x56>
	{
		if(HAL_SPI_Receive(hspi, &u8RxData, 1, 1000) == HAL_OK)
 8008baa:	f107 010d 	add.w	r1, r7, #13
 8008bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7fd fa72 	bl	800609e <HAL_SPI_Receive>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d104      	bne.n	8008bca <bGyroIsExist+0x56>
		{
			if(u8RxData==GYROSCOPE_REG_DEFAULT_WHO_AM_I)
 8008bc0:	7b7b      	ldrb	r3, [r7, #13]
 8008bc2:	2bd4      	cmp	r3, #212	; 0xd4
 8008bc4:	d101      	bne.n	8008bca <bGyroIsExist+0x56>
			{
				bRetValue = true;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8008bca:	2201      	movs	r2, #1
 8008bcc:	2102      	movs	r1, #2
 8008bce:	4804      	ldr	r0, [pc, #16]	; (8008be0 <bGyroIsExist+0x6c>)
 8008bd0:	f7fa f87c 	bl	8002ccc <HAL_GPIO_WritePin>

	return bRetValue;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	40020800 	.word	0x40020800

08008be4 <bGyroConfiguration>:
//
//	return bRetValue;
//}

bool bGyroConfiguration(SPI_HandleTypeDef* hspi)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	6078      	str	r0, [r7, #4]
	bool bRetValue;
	uint8_t u8Configuration;

	// CTRL REG1 register config
	u8Configuration = GYROSCOPE_CTRL_REG1_PD_DISABLE | GYROSCOPE_CTRL_REG1_X_ENABLE | GYROSCOPE_CTRL_REG1_Y_ENABLE | GYROSCOPE_CTRL_REG1_Z_ENABLE;
 8008bec:	230f      	movs	r3, #15
 8008bee:	73bb      	strb	r3, [r7, #14]
	bRetValue = bWriteDataInGyro(hspi, GYROSCOPE_REG_ADDR_CTRL_REG1, &u8Configuration, 1, true);
 8008bf0:	f107 020e 	add.w	r2, r7, #14
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	2120      	movs	r1, #32
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff ff21 	bl	8008a44 <bWriteDataInGyro>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]

	// CTRL REG4 register config
	u8Configuration = GYROSCOPE_CTRL_REG4_BDU_ENABLE | GYROSCOPE_CTRL_REG4_BLE_LITTLE_ENDIAN | GYROSCOPE_CTRL_REG4_FS_250_DPS | GYROSCOPE_CTRL_REG4_SIM_4_WIRE;
 8008c06:	2380      	movs	r3, #128	; 0x80
 8008c08:	73bb      	strb	r3, [r7, #14]
	bRetValue = bWriteDataInGyro(hspi, GYROSCOPE_REG_ADDR_CTRL_REG4, &u8Configuration, 1, true);
 8008c0a:	f107 020e 	add.w	r2, r7, #14
 8008c0e:	2301      	movs	r3, #1
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	2301      	movs	r3, #1
 8008c14:	2123      	movs	r1, #35	; 0x23
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff ff14 	bl	8008a44 <bWriteDataInGyro>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]

	// FIFO register config
	u8Configuration = GYROSCOPE_FIFO_MODE_CONFI_BYPASS;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73bb      	strb	r3, [r7, #14]
	bRetValue = bWriteDataInGyro(hspi, GYROSCOPE_REG_ADDR_FIFO_CTRL_REG, &u8Configuration, 1, true);
 8008c24:	f107 020e 	add.w	r2, r7, #14
 8008c28:	2301      	movs	r3, #1
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	212e      	movs	r1, #46	; 0x2e
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff ff07 	bl	8008a44 <bWriteDataInGyro>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]
}
 8008c3a:	bf00      	nop
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <bGayroGetXYZ>:

bool bGayroGetXYZ(SPI_HandleTypeDef* hspi, float* x, float* y, float* z)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b088      	sub	sp, #32
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	603b      	str	r3, [r7, #0]
	bool bRetValue = true;
 8008c52:	2301      	movs	r3, #1
 8008c54:	77fb      	strb	r3, [r7, #31]
	uint8_t u8RxData[2];
	int16_t i16TmpX;
	int16_t i16TmpY;
	int16_t i16TmpZ;

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET); // this line, just in case the CS was low
 8008c56:	2201      	movs	r2, #1
 8008c58:	2102      	movs	r1, #2
 8008c5a:	485f      	ldr	r0, [pc, #380]	; (8008dd8 <bGayroGetXYZ+0x194>)
 8008c5c:	f7fa f836 	bl	8002ccc <HAL_GPIO_WritePin>

	// read X
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8008c60:	2200      	movs	r2, #0
 8008c62:	2102      	movs	r1, #2
 8008c64:	485c      	ldr	r0, [pc, #368]	; (8008dd8 <bGayroGetXYZ+0x194>)
 8008c66:	f7fa f831 	bl	8002ccc <HAL_GPIO_WritePin>
	osDelay(1);// wait before communicate with sensor
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	f002 fb7f 	bl	800b36e <osDelay>
	u8TxData = GYROSCOPE_REG_ADDR_OUT_X_L | GYROSCOPE_READ_CMD | GYROSCOPE_RW_MULTIPLE_ADDR_CMD;
 8008c70:	23e8      	movs	r3, #232	; 0xe8
 8008c72:	75fb      	strb	r3, [r7, #23]
	if(HAL_SPI_Transmit(hspi, &u8TxData, 1, 100) == HAL_OK)
 8008c74:	f107 0117 	add.w	r1, r7, #23
 8008c78:	2364      	movs	r3, #100	; 0x64
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7fd f8d2 	bl	8005e26 <HAL_SPI_Transmit>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d114      	bne.n	8008cb2 <bGayroGetXYZ+0x6e>
	{
		if(HAL_SPI_Receive(hspi, u8RxData, 2, 100) == HAL_OK)
 8008c88:	f107 0114 	add.w	r1, r7, #20
 8008c8c:	2364      	movs	r3, #100	; 0x64
 8008c8e:	2202      	movs	r2, #2
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7fd fa04 	bl	800609e <HAL_SPI_Receive>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d107      	bne.n	8008cac <bGayroGetXYZ+0x68>
		{
			i16TmpX = u8RxData[1]<<8 | u8RxData[0];
 8008c9c:	7d7b      	ldrb	r3, [r7, #21]
 8008c9e:	021b      	lsls	r3, r3, #8
 8008ca0:	b21a      	sxth	r2, r3
 8008ca2:	7d3b      	ldrb	r3, [r7, #20]
 8008ca4:	b21b      	sxth	r3, r3
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	83bb      	strh	r3, [r7, #28]
 8008caa:	e004      	b.n	8008cb6 <bGayroGetXYZ+0x72>
		}
		else
		{
			bRetValue = false;
 8008cac:	2300      	movs	r3, #0
 8008cae:	77fb      	strb	r3, [r7, #31]
 8008cb0:	e001      	b.n	8008cb6 <bGayroGetXYZ+0x72>
		}
	}
	else
	{
		bRetValue = false;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	77fb      	strb	r3, [r7, #31]
	}
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	2102      	movs	r1, #2
 8008cba:	4847      	ldr	r0, [pc, #284]	; (8008dd8 <bGayroGetXYZ+0x194>)
 8008cbc:	f7fa f806 	bl	8002ccc <HAL_GPIO_WritePin>
	*x = i16TmpX * GYROSCOPE_SENSITIVITY_FS_250;
 8008cc0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ccc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8008ddc <bGayroGetXYZ+0x198>
 8008cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	edc3 7a00 	vstr	s15, [r3]

	// read Y
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2102      	movs	r1, #2
 8008cde:	483e      	ldr	r0, [pc, #248]	; (8008dd8 <bGayroGetXYZ+0x194>)
 8008ce0:	f7f9 fff4 	bl	8002ccc <HAL_GPIO_WritePin>
	osDelay(1);// wait before communicate with sensor
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	f002 fb42 	bl	800b36e <osDelay>
	u8TxData = GYROSCOPE_REG_ADDR_OUT_Y_L | GYROSCOPE_READ_CMD | GYROSCOPE_RW_MULTIPLE_ADDR_CMD;
 8008cea:	23ea      	movs	r3, #234	; 0xea
 8008cec:	75fb      	strb	r3, [r7, #23]
	if(HAL_SPI_Transmit(hspi, &u8TxData, 1, 100) == HAL_OK)
 8008cee:	f107 0117 	add.w	r1, r7, #23
 8008cf2:	2364      	movs	r3, #100	; 0x64
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7fd f895 	bl	8005e26 <HAL_SPI_Transmit>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d114      	bne.n	8008d2c <bGayroGetXYZ+0xe8>
	{
		if(HAL_SPI_Receive(hspi, u8RxData, 2, 100) == HAL_OK)
 8008d02:	f107 0114 	add.w	r1, r7, #20
 8008d06:	2364      	movs	r3, #100	; 0x64
 8008d08:	2202      	movs	r2, #2
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7fd f9c7 	bl	800609e <HAL_SPI_Receive>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d107      	bne.n	8008d26 <bGayroGetXYZ+0xe2>
		{
			i16TmpY = u8RxData[1]<<8 | u8RxData[0];
 8008d16:	7d7b      	ldrb	r3, [r7, #21]
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	b21a      	sxth	r2, r3
 8008d1c:	7d3b      	ldrb	r3, [r7, #20]
 8008d1e:	b21b      	sxth	r3, r3
 8008d20:	4313      	orrs	r3, r2
 8008d22:	837b      	strh	r3, [r7, #26]
 8008d24:	e004      	b.n	8008d30 <bGayroGetXYZ+0xec>
		}
		else
		{
			bRetValue = false;
 8008d26:	2300      	movs	r3, #0
 8008d28:	77fb      	strb	r3, [r7, #31]
 8008d2a:	e001      	b.n	8008d30 <bGayroGetXYZ+0xec>
		}
	}
	else
	{
		bRetValue = false;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	77fb      	strb	r3, [r7, #31]
	}
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8008d30:	2201      	movs	r2, #1
 8008d32:	2102      	movs	r1, #2
 8008d34:	4828      	ldr	r0, [pc, #160]	; (8008dd8 <bGayroGetXYZ+0x194>)
 8008d36:	f7f9 ffc9 	bl	8002ccc <HAL_GPIO_WritePin>
	*y = i16TmpY * GYROSCOPE_SENSITIVITY_FS_250;
 8008d3a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d46:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008ddc <bGayroGetXYZ+0x198>
 8008d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	edc3 7a00 	vstr	s15, [r3]

	// read Z
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8008d54:	2200      	movs	r2, #0
 8008d56:	2102      	movs	r1, #2
 8008d58:	481f      	ldr	r0, [pc, #124]	; (8008dd8 <bGayroGetXYZ+0x194>)
 8008d5a:	f7f9 ffb7 	bl	8002ccc <HAL_GPIO_WritePin>
	osDelay(1);// wait before communicate with sensor
 8008d5e:	2001      	movs	r0, #1
 8008d60:	f002 fb05 	bl	800b36e <osDelay>
	u8TxData = GYROSCOPE_REG_ADDR_OUT_Z_L | GYROSCOPE_READ_CMD | GYROSCOPE_RW_MULTIPLE_ADDR_CMD;
 8008d64:	23ec      	movs	r3, #236	; 0xec
 8008d66:	75fb      	strb	r3, [r7, #23]
	if(HAL_SPI_Transmit(hspi, &u8TxData, 1, 100) == HAL_OK)
 8008d68:	f107 0117 	add.w	r1, r7, #23
 8008d6c:	2364      	movs	r3, #100	; 0x64
 8008d6e:	2201      	movs	r2, #1
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7fd f858 	bl	8005e26 <HAL_SPI_Transmit>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d114      	bne.n	8008da6 <bGayroGetXYZ+0x162>
	{
		if(HAL_SPI_Receive(hspi, u8RxData, 2, 100) == HAL_OK)
 8008d7c:	f107 0114 	add.w	r1, r7, #20
 8008d80:	2364      	movs	r3, #100	; 0x64
 8008d82:	2202      	movs	r2, #2
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7fd f98a 	bl	800609e <HAL_SPI_Receive>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d107      	bne.n	8008da0 <bGayroGetXYZ+0x15c>
		{
			i16TmpZ = u8RxData[1]<<8 | u8RxData[0];
 8008d90:	7d7b      	ldrb	r3, [r7, #21]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	b21a      	sxth	r2, r3
 8008d96:	7d3b      	ldrb	r3, [r7, #20]
 8008d98:	b21b      	sxth	r3, r3
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	833b      	strh	r3, [r7, #24]
 8008d9e:	e004      	b.n	8008daa <bGayroGetXYZ+0x166>
		}
		else
		{
			bRetValue = false;
 8008da0:	2300      	movs	r3, #0
 8008da2:	77fb      	strb	r3, [r7, #31]
 8008da4:	e001      	b.n	8008daa <bGayroGetXYZ+0x166>
		}
	}
	else
	{
		bRetValue = false;
 8008da6:	2300      	movs	r3, #0
 8008da8:	77fb      	strb	r3, [r7, #31]
	}

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8008daa:	2201      	movs	r2, #1
 8008dac:	2102      	movs	r1, #2
 8008dae:	480a      	ldr	r0, [pc, #40]	; (8008dd8 <bGayroGetXYZ+0x194>)
 8008db0:	f7f9 ff8c 	bl	8002ccc <HAL_GPIO_WritePin>
	*z = i16TmpZ * GYROSCOPE_SENSITIVITY_FS_250;
 8008db4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008db8:	ee07 3a90 	vmov	s15, r3
 8008dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dc0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8008ddc <bGayroGetXYZ+0x198>
 8008dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	edc3 7a00 	vstr	s15, [r3]

	return bRetValue;
 8008dce:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3720      	adds	r7, #32
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	40020800 	.word	0x40020800
 8008ddc:	3c0f5c29 	.word	0x3c0f5c29

08008de0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008de0:	b590      	push	{r4, r7, lr}
 8008de2:	b089      	sub	sp, #36	; 0x24
 8008de4:	af04      	add	r7, sp, #16
 8008de6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008de8:	2301      	movs	r3, #1
 8008dea:	2202      	movs	r2, #2
 8008dec:	2102      	movs	r1, #2
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fcb8 	bl	8009764 <USBH_FindInterface>
 8008df4:	4603      	mov	r3, r0
 8008df6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	2bff      	cmp	r3, #255	; 0xff
 8008dfc:	d002      	beq.n	8008e04 <USBH_CDC_InterfaceInit+0x24>
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d901      	bls.n	8008e08 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e04:	2302      	movs	r3, #2
 8008e06:	e13d      	b.n	8009084 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fc8d 	bl	800972c <USBH_SelectInterface>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e131      	b.n	8009084 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008e26:	2050      	movs	r0, #80	; 0x50
 8008e28:	f004 fff6 	bl	800de18 <malloc>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008e40:	2302      	movs	r3, #2
 8008e42:	e11f      	b.n	8009084 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008e44:	2250      	movs	r2, #80	; 0x50
 8008e46:	2100      	movs	r1, #0
 8008e48:	68b8      	ldr	r0, [r7, #8]
 8008e4a:	f005 f803 	bl	800de54 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	211a      	movs	r1, #26
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	4413      	add	r3, r2
 8008e5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	b25b      	sxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da15      	bge.n	8008e92 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	211a      	movs	r1, #26
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	4413      	add	r3, r2
 8008e72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	211a      	movs	r1, #26
 8008e82:	fb01 f303 	mul.w	r3, r1, r3
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e8c:	881a      	ldrh	r2, [r3, #0]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	785b      	ldrb	r3, [r3, #1]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f002 f988 	bl	800b1ae <USBH_AllocPipe>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	7819      	ldrb	r1, [r3, #0]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	7858      	ldrb	r0, [r3, #1]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	8952      	ldrh	r2, [r2, #10]
 8008ebe:	9202      	str	r2, [sp, #8]
 8008ec0:	2203      	movs	r2, #3
 8008ec2:	9201      	str	r2, [sp, #4]
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	4623      	mov	r3, r4
 8008ec8:	4602      	mov	r2, r0
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f002 f940 	bl	800b150 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f004 feef 	bl	800dcbc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008ede:	2300      	movs	r3, #0
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	210a      	movs	r1, #10
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fc3d 	bl	8009764 <USBH_FindInterface>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	2bff      	cmp	r3, #255	; 0xff
 8008ef2:	d002      	beq.n	8008efa <USBH_CDC_InterfaceInit+0x11a>
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d901      	bls.n	8008efe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008efa:	2302      	movs	r3, #2
 8008efc:	e0c2      	b.n	8009084 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	211a      	movs	r1, #26
 8008f04:	fb01 f303 	mul.w	r3, r1, r3
 8008f08:	4413      	add	r3, r2
 8008f0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	b25b      	sxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	da16      	bge.n	8008f44 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	211a      	movs	r1, #26
 8008f1c:	fb01 f303 	mul.w	r3, r1, r3
 8008f20:	4413      	add	r3, r2
 8008f22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f26:	781a      	ldrb	r2, [r3, #0]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	211a      	movs	r1, #26
 8008f32:	fb01 f303 	mul.w	r3, r1, r3
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008f3c:	881a      	ldrh	r2, [r3, #0]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	835a      	strh	r2, [r3, #26]
 8008f42:	e015      	b.n	8008f70 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	211a      	movs	r1, #26
 8008f4a:	fb01 f303 	mul.w	r3, r1, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	211a      	movs	r1, #26
 8008f60:	fb01 f303 	mul.w	r3, r1, r3
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008f6a:	881a      	ldrh	r2, [r3, #0]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	211a      	movs	r1, #26
 8008f76:	fb01 f303 	mul.w	r3, r1, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	b25b      	sxtb	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	da16      	bge.n	8008fb6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	211a      	movs	r1, #26
 8008f8e:	fb01 f303 	mul.w	r3, r1, r3
 8008f92:	4413      	add	r3, r2
 8008f94:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f98:	781a      	ldrb	r2, [r3, #0]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	211a      	movs	r1, #26
 8008fa4:	fb01 f303 	mul.w	r3, r1, r3
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008fae:	881a      	ldrh	r2, [r3, #0]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	835a      	strh	r2, [r3, #26]
 8008fb4:	e015      	b.n	8008fe2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	211a      	movs	r1, #26
 8008fbc:	fb01 f303 	mul.w	r3, r1, r3
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	211a      	movs	r1, #26
 8008fd2:	fb01 f303 	mul.w	r3, r1, r3
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008fdc:	881a      	ldrh	r2, [r3, #0]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	7b9b      	ldrb	r3, [r3, #14]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f002 f8e0 	bl	800b1ae <USBH_AllocPipe>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	7bdb      	ldrb	r3, [r3, #15]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f002 f8d6 	bl	800b1ae <USBH_AllocPipe>
 8009002:	4603      	mov	r3, r0
 8009004:	461a      	mov	r2, r3
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	7b59      	ldrb	r1, [r3, #13]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	7b98      	ldrb	r0, [r3, #14]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	8b12      	ldrh	r2, [r2, #24]
 8009022:	9202      	str	r2, [sp, #8]
 8009024:	2202      	movs	r2, #2
 8009026:	9201      	str	r2, [sp, #4]
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	4623      	mov	r3, r4
 800902c:	4602      	mov	r2, r0
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f002 f88e 	bl	800b150 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	7b19      	ldrb	r1, [r3, #12]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	7bd8      	ldrb	r0, [r3, #15]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	8b52      	ldrh	r2, [r2, #26]
 800904c:	9202      	str	r2, [sp, #8]
 800904e:	2202      	movs	r2, #2
 8009050:	9201      	str	r2, [sp, #4]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	4623      	mov	r3, r4
 8009056:	4602      	mov	r2, r0
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f002 f879 	bl	800b150 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	7b5b      	ldrb	r3, [r3, #13]
 800906a:	2200      	movs	r2, #0
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f004 fe24 	bl	800dcbc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	7b1b      	ldrb	r3, [r3, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f004 fe1d 	bl	800dcbc <USBH_LL_SetToggle>

  return USBH_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	bd90      	pop	{r4, r7, pc}

0800908c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00e      	beq.n	80090c4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f002 f86e 	bl	800b18e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f002 f899 	bl	800b1f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	7b1b      	ldrb	r3, [r3, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00e      	beq.n	80090ea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	7b1b      	ldrb	r3, [r3, #12]
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f002 f85b 	bl	800b18e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	7b1b      	ldrb	r3, [r3, #12]
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f002 f886 	bl	800b1f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	7b5b      	ldrb	r3, [r3, #13]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00e      	beq.n	8009110 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	7b5b      	ldrb	r3, [r3, #13]
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f002 f848 	bl	800b18e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	7b5b      	ldrb	r3, [r3, #13]
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f002 f873 	bl	800b1f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	4618      	mov	r0, r3
 8009126:	f004 fe7f 	bl	800de28 <free>
    phost->pActiveClass->pData = 0U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009130:	2200      	movs	r2, #0
 8009132:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3340      	adds	r3, #64	; 0x40
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f8b1 	bl	80092be <GetLineCoding>
 800915c:	4603      	mov	r3, r0
 800915e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009160:	7afb      	ldrb	r3, [r7, #11]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800916c:	2102      	movs	r1, #2
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009172:	7afb      	ldrb	r3, [r7, #11]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009184:	2301      	movs	r3, #1
 8009186:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800919c:	2b04      	cmp	r3, #4
 800919e:	d877      	bhi.n	8009290 <USBH_CDC_Process+0x114>
 80091a0:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <USBH_CDC_Process+0x2c>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	080091bd 	.word	0x080091bd
 80091ac:	080091c3 	.word	0x080091c3
 80091b0:	080091f3 	.word	0x080091f3
 80091b4:	08009267 	.word	0x08009267
 80091b8:	08009275 	.word	0x08009275
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]
      break;
 80091c0:	e06d      	b.n	800929e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f897 	bl	80092fc <SetLineCoding>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80091e0:	e058      	b.n	8009294 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d055      	beq.n	8009294 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2204      	movs	r2, #4
 80091ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80091f0:	e050      	b.n	8009294 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	3340      	adds	r3, #64	; 0x40
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f860 	bl	80092be <GetLineCoding>
 80091fe:	4603      	mov	r3, r0
 8009200:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d126      	bne.n	8009256 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800921a:	791b      	ldrb	r3, [r3, #4]
 800921c:	429a      	cmp	r2, r3
 800921e:	d13b      	bne.n	8009298 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800922a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800922c:	429a      	cmp	r2, r3
 800922e:	d133      	bne.n	8009298 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800923a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800923c:	429a      	cmp	r2, r3
 800923e:	d12b      	bne.n	8009298 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009248:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800924a:	429a      	cmp	r2, r3
 800924c:	d124      	bne.n	8009298 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f982 	bl	8009558 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009254:	e020      	b.n	8009298 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d01d      	beq.n	8009298 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2204      	movs	r2, #4
 8009260:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009264:	e018      	b.n	8009298 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f867 	bl	800933a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f8f6 	bl	800945e <CDC_ProcessReception>
      break;
 8009272:	e014      	b.n	800929e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009274:	2100      	movs	r1, #0
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f95b 	bl	800a532 <USBH_ClrFeature>
 800927c:	4603      	mov	r3, r0
 800927e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10a      	bne.n	800929c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800928e:	e005      	b.n	800929c <USBH_CDC_Process+0x120>

    default:
      break;
 8009290:	bf00      	nop
 8009292:	e004      	b.n	800929e <USBH_CDC_Process+0x122>
      break;
 8009294:	bf00      	nop
 8009296:	e002      	b.n	800929e <USBH_CDC_Process+0x122>
      break;
 8009298:	bf00      	nop
 800929a:	e000      	b.n	800929e <USBH_CDC_Process+0x122>
      break;
 800929c:	bf00      	nop

  }

  return status;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b082      	sub	sp, #8
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	22a1      	movs	r2, #161	; 0xa1
 80092cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2221      	movs	r2, #33	; 0x21
 80092d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2207      	movs	r2, #7
 80092e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2207      	movs	r2, #7
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 fbed 	bl	800aacc <USBH_CtlReq>
 80092f2:	4603      	mov	r3, r0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2221      	movs	r2, #33	; 0x21
 800930a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2220      	movs	r2, #32
 8009310:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2207      	movs	r2, #7
 8009322:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2207      	movs	r2, #7
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 fbce 	bl	800aacc <USBH_CtlReq>
 8009330:	4603      	mov	r3, r0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af02      	add	r7, sp, #8
 8009340:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800934c:	2300      	movs	r3, #0
 800934e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009356:	2b01      	cmp	r3, #1
 8009358:	d002      	beq.n	8009360 <CDC_ProcessTransmission+0x26>
 800935a:	2b02      	cmp	r3, #2
 800935c:	d023      	beq.n	80093a6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800935e:	e07a      	b.n	8009456 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	8b12      	ldrh	r2, [r2, #24]
 8009368:	4293      	cmp	r3, r2
 800936a:	d90b      	bls.n	8009384 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	69d9      	ldr	r1, [r3, #28]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8b1a      	ldrh	r2, [r3, #24]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	7b5b      	ldrb	r3, [r3, #13]
 8009378:	2001      	movs	r0, #1
 800937a:	9000      	str	r0, [sp, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 fea4 	bl	800b0ca <USBH_BulkSendData>
 8009382:	e00b      	b.n	800939c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800938c:	b29a      	uxth	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	7b5b      	ldrb	r3, [r3, #13]
 8009392:	2001      	movs	r0, #1
 8009394:	9000      	str	r0, [sp, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 fe97 	bl	800b0ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80093a4:	e057      	b.n	8009456 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	7b5b      	ldrb	r3, [r3, #13]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f004 fc5b 	bl	800dc68 <USBH_LL_GetURBState>
 80093b2:	4603      	mov	r3, r0
 80093b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80093b6:	7afb      	ldrb	r3, [r7, #11]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d136      	bne.n	800942a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	8b12      	ldrh	r2, [r2, #24]
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d90e      	bls.n	80093e6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	8b12      	ldrh	r2, [r2, #24]
 80093d0:	1a9a      	subs	r2, r3, r2
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	8b12      	ldrh	r2, [r2, #24]
 80093de:	441a      	add	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	61da      	str	r2, [r3, #28]
 80093e4:	e002      	b.n	80093ec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d004      	beq.n	80093fe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80093fc:	e006      	b.n	800940c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f892 	bl	8009530 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2204      	movs	r2, #4
 8009410:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009420:	2200      	movs	r2, #0
 8009422:	4619      	mov	r1, r3
 8009424:	f001 ffe0 	bl	800b3e8 <osMessagePut>
      break;
 8009428:	e014      	b.n	8009454 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800942a:	7afb      	ldrb	r3, [r7, #11]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d111      	bne.n	8009454 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2204      	movs	r2, #4
 800943c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800944c:	2200      	movs	r2, #0
 800944e:	4619      	mov	r1, r3
 8009450:	f001 ffca 	bl	800b3e8 <osMessagePut>
      break;
 8009454:	bf00      	nop
  }
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009470:	2300      	movs	r3, #0
 8009472:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800947a:	2b03      	cmp	r3, #3
 800947c:	d002      	beq.n	8009484 <CDC_ProcessReception+0x26>
 800947e:	2b04      	cmp	r3, #4
 8009480:	d00e      	beq.n	80094a0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009482:	e051      	b.n	8009528 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	6a19      	ldr	r1, [r3, #32]
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	8b5a      	ldrh	r2, [r3, #26]
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	7b1b      	ldrb	r3, [r3, #12]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 fe3f 	bl	800b114 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2204      	movs	r2, #4
 800949a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800949e:	e043      	b.n	8009528 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	7b1b      	ldrb	r3, [r3, #12]
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f004 fbde 	bl	800dc68 <USBH_LL_GetURBState>
 80094ac:	4603      	mov	r3, r0
 80094ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80094b0:	7cfb      	ldrb	r3, [r7, #19]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d137      	bne.n	8009526 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	7b1b      	ldrb	r3, [r3, #12]
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f004 fb41 	bl	800db44 <USBH_LL_GetLastXferSize>
 80094c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d016      	beq.n	80094fc <CDC_ProcessReception+0x9e>
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	8b5b      	ldrh	r3, [r3, #26]
 80094d2:	461a      	mov	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d910      	bls.n	80094fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1ad2      	subs	r2, r2, r3
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	6a1a      	ldr	r2, [r3, #32]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	441a      	add	r2, r3
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2203      	movs	r2, #3
 80094f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80094fa:	e006      	b.n	800950a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f81d 	bl	8009544 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2204      	movs	r2, #4
 800950e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800951e:	2200      	movs	r2, #0
 8009520:	4619      	mov	r1, r3
 8009522:	f001 ff61 	bl	800b3e8 <osMessagePut>
      break;
 8009526:	bf00      	nop
  }
}
 8009528:	bf00      	nop
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800956c:	b5b0      	push	{r4, r5, r7, lr}
 800956e:	b090      	sub	sp, #64	; 0x40
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009580:	2302      	movs	r3, #2
 8009582:	e04d      	b.n	8009620 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	79fa      	ldrb	r2, [r7, #7]
 8009588:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 f847 	bl	8009630 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d003      	beq.n	80095d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80095d0:	4b15      	ldr	r3, [pc, #84]	; (8009628 <USBH_Init+0xbc>)
 80095d2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80095d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80095dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095e0:	2100      	movs	r1, #0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f001 fed7 	bl	800b396 <osMessageCreate>
 80095e8:	4602      	mov	r2, r0
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80095f0:	4b0e      	ldr	r3, [pc, #56]	; (800962c <USBH_Init+0xc0>)
 80095f2:	f107 0414 	add.w	r4, r7, #20
 80095f6:	461d      	mov	r5, r3
 80095f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009604:	f107 0314 	add.w	r3, r7, #20
 8009608:	68f9      	ldr	r1, [r7, #12]
 800960a:	4618      	mov	r0, r3
 800960c:	f001 fe63 	bl	800b2d6 <osThreadCreate>
 8009610:	4602      	mov	r2, r0
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f004 f9d5 	bl	800d9c8 <USBH_LL_Init>

  return USBH_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3740      	adds	r7, #64	; 0x40
 8009624:	46bd      	mov	sp, r7
 8009626:	bdb0      	pop	{r4, r5, r7, pc}
 8009628:	08010b10 	.word	0x08010b10
 800962c:	08010b20 	.word	0x08010b20

08009630 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800963c:	2300      	movs	r3, #0
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	e009      	b.n	8009656 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	33e0      	adds	r3, #224	; 0xe0
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	2200      	movs	r2, #0
 800964e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	3301      	adds	r3, #1
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b0f      	cmp	r3, #15
 800965a:	d9f2      	bls.n	8009642 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e009      	b.n	8009676 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4413      	add	r3, r2
 8009668:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800966c:	2200      	movs	r2, #0
 800966e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3301      	adds	r3, #1
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800967c:	d3f1      	bcc.n	8009662 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2240      	movs	r2, #64	; 0x40
 80096a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d016      	beq.n	800971a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10e      	bne.n	8009714 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80096fc:	1c59      	adds	r1, r3, #1
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	33de      	adds	r3, #222	; 0xde
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
 8009712:	e004      	b.n	800971e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009714:	2302      	movs	r3, #2
 8009716:	73fb      	strb	r3, [r7, #15]
 8009718:	e001      	b.n	800971e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800971a:	2302      	movs	r3, #2
 800971c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	429a      	cmp	r2, r3
 8009746:	d204      	bcs.n	8009752 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009750:	e001      	b.n	8009756 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009752:	2302      	movs	r3, #2
 8009754:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	461a      	mov	r2, r3
 8009772:	4603      	mov	r3, r0
 8009774:	70fb      	strb	r3, [r7, #3]
 8009776:	460b      	mov	r3, r1
 8009778:	70bb      	strb	r3, [r7, #2]
 800977a:	4613      	mov	r3, r2
 800977c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800977e:	2300      	movs	r3, #0
 8009780:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800978c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800978e:	e025      	b.n	80097dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	221a      	movs	r2, #26
 8009794:	fb02 f303 	mul.w	r3, r2, r3
 8009798:	3308      	adds	r3, #8
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4413      	add	r3, r2
 800979e:	3302      	adds	r3, #2
 80097a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	795b      	ldrb	r3, [r3, #5]
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d002      	beq.n	80097b2 <USBH_FindInterface+0x4e>
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	2bff      	cmp	r3, #255	; 0xff
 80097b0:	d111      	bne.n	80097d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80097b6:	78ba      	ldrb	r2, [r7, #2]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d002      	beq.n	80097c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097bc:	78bb      	ldrb	r3, [r7, #2]
 80097be:	2bff      	cmp	r3, #255	; 0xff
 80097c0:	d109      	bne.n	80097d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097c6:	787a      	ldrb	r2, [r7, #1]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d002      	beq.n	80097d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80097cc:	787b      	ldrb	r3, [r7, #1]
 80097ce:	2bff      	cmp	r3, #255	; 0xff
 80097d0:	d101      	bne.n	80097d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	e006      	b.n	80097e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	3301      	adds	r3, #1
 80097da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80097dc:	7dfb      	ldrb	r3, [r7, #23]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d9d6      	bls.n	8009790 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80097e2:	23ff      	movs	r3, #255	; 0xff
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f004 f92b 	bl	800da54 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80097fe:	2101      	movs	r1, #1
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f004 fa44 	bl	800dc8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af04      	add	r7, sp, #16
 8009816:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009818:	2302      	movs	r3, #2
 800981a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b01      	cmp	r3, #1
 800982a:	d102      	bne.n	8009832 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2203      	movs	r2, #3
 8009830:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b0b      	cmp	r3, #11
 800983a:	f200 8247 	bhi.w	8009ccc <USBH_Process+0x4bc>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <USBH_Process+0x34>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009875 	.word	0x08009875
 8009848:	080098c3 	.word	0x080098c3
 800984c:	08009947 	.word	0x08009947
 8009850:	08009c4b 	.word	0x08009c4b
 8009854:	08009ccd 	.word	0x08009ccd
 8009858:	08009a07 	.word	0x08009a07
 800985c:	08009bd5 	.word	0x08009bd5
 8009860:	08009a59 	.word	0x08009a59
 8009864:	08009a95 	.word	0x08009a95
 8009868:	08009acf 	.word	0x08009acf
 800986c:	08009b2d 	.word	0x08009b2d
 8009870:	08009c33 	.word	0x08009c33
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8227 	beq.w	8009cd0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009888:	20c8      	movs	r0, #200	; 0xc8
 800988a:	f004 fa47 	bl	800dd1c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f004 f93d 	bl	800db0e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80098b8:	2200      	movs	r2, #0
 80098ba:	4619      	mov	r1, r3
 80098bc:	f001 fd94 	bl	800b3e8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80098c0:	e206      	b.n	8009cd0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d107      	bne.n	80098dc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	e025      	b.n	8009928 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098e6:	d914      	bls.n	8009912 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80098ee:	3301      	adds	r3, #1
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d903      	bls.n	800990a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	220d      	movs	r2, #13
 8009906:	701a      	strb	r2, [r3, #0]
 8009908:	e00e      	b.n	8009928 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	e00a      	b.n	8009928 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009918:	f103 020a 	add.w	r2, r3, #10
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009922:	200a      	movs	r0, #10
 8009924:	f004 f9fa 	bl	800dd1c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800993c:	2200      	movs	r2, #0
 800993e:	4619      	mov	r1, r3
 8009940:	f001 fd52 	bl	800b3e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009944:	e1cb      	b.n	8009cde <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800994c:	2b00      	cmp	r3, #0
 800994e:	d005      	beq.n	800995c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009956:	2104      	movs	r1, #4
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800995c:	2064      	movs	r0, #100	; 0x64
 800995e:	f004 f9dd 	bl	800dd1c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f004 f8ac 	bl	800dac0 <USBH_LL_GetSpeed>
 8009968:	4603      	mov	r3, r0
 800996a:	461a      	mov	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2205      	movs	r2, #5
 8009976:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009978:	2100      	movs	r1, #0
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f001 fc17 	bl	800b1ae <USBH_AllocPipe>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009988:	2180      	movs	r1, #128	; 0x80
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 fc0f 	bl	800b1ae <USBH_AllocPipe>
 8009990:	4603      	mov	r3, r0
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	7919      	ldrb	r1, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80099ac:	b292      	uxth	r2, r2
 80099ae:	9202      	str	r2, [sp, #8]
 80099b0:	2200      	movs	r2, #0
 80099b2:	9201      	str	r2, [sp, #4]
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	4603      	mov	r3, r0
 80099b8:	2280      	movs	r2, #128	; 0x80
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f001 fbc8 	bl	800b150 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	7959      	ldrb	r1, [r3, #5]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099d4:	b292      	uxth	r2, r2
 80099d6:	9202      	str	r2, [sp, #8]
 80099d8:	2200      	movs	r2, #0
 80099da:	9201      	str	r2, [sp, #4]
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	4603      	mov	r3, r0
 80099e0:	2200      	movs	r2, #0
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f001 fbb4 	bl	800b150 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80099fc:	2200      	movs	r2, #0
 80099fe:	4619      	mov	r1, r3
 8009a00:	f001 fcf2 	bl	800b3e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a04:	e16b      	b.n	8009cde <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f96e 	bl	8009ce8 <USBH_HandleEnum>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f040 815d 	bne.w	8009cd4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d103      	bne.n	8009a34 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2208      	movs	r2, #8
 8009a30:	701a      	strb	r2, [r3, #0]
 8009a32:	e002      	b.n	8009a3a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2207      	movs	r2, #7
 8009a38:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2205      	movs	r2, #5
 8009a3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4619      	mov	r1, r3
 8009a52:	f001 fcc9 	bl	800b3e8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a56:	e13d      	b.n	8009cd4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 813a 	beq.w	8009cd8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2208      	movs	r2, #8
 8009a74:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2205      	movs	r2, #5
 8009a7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	f001 fcab 	bl	800b3e8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009a92:	e121      	b.n	8009cd8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fd00 	bl	800a4a4 <USBH_SetCfg>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2209      	movs	r2, #9
 8009aae:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	f001 fc8e 	bl	800b3e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009acc:	e107      	b.n	8009cde <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d015      	beq.n	8009b08 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009adc:	2101      	movs	r1, #1
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fd03 	bl	800a4ea <USBH_SetFeature>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d103      	bne.n	8009af8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	220a      	movs	r2, #10
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	e00a      	b.n	8009b0e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d106      	bne.n	8009b0e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	220a      	movs	r2, #10
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	e002      	b.n	8009b0e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	220a      	movs	r2, #10
 8009b0c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009b22:	2200      	movs	r2, #0
 8009b24:	4619      	mov	r1, r3
 8009b26:	f001 fc5f 	bl	800b3e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b2a:	e0d8      	b.n	8009cde <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d03f      	beq.n	8009bb6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b3e:	2300      	movs	r3, #0
 8009b40:	73fb      	strb	r3, [r7, #15]
 8009b42:	e016      	b.n	8009b72 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009b44:	7bfa      	ldrb	r2, [r7, #15]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	32de      	adds	r2, #222	; 0xde
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	791a      	ldrb	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d108      	bne.n	8009b6c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009b5a:	7bfa      	ldrb	r2, [r7, #15]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	32de      	adds	r2, #222	; 0xde
 8009b60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009b6a:	e005      	b.n	8009b78 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	73fb      	strb	r3, [r7, #15]
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0e5      	beq.n	8009b44 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d016      	beq.n	8009bb0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	4798      	blx	r3
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d109      	bne.n	8009ba8 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2206      	movs	r2, #6
 8009b98:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ba0:	2103      	movs	r1, #3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
 8009ba6:	e006      	b.n	8009bb6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	220d      	movs	r2, #13
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	e002      	b.n	8009bb6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	220d      	movs	r2, #13
 8009bb4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2205      	movs	r2, #5
 8009bba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009bca:	2200      	movs	r2, #0
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f001 fc0b 	bl	800b3e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bd2:	e084      	b.n	8009cde <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d017      	beq.n	8009c0e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	4798      	blx	r3
 8009bea:	4603      	mov	r3, r0
 8009bec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	220b      	movs	r2, #11
 8009bfa:	701a      	strb	r2, [r3, #0]
 8009bfc:	e00a      	b.n	8009c14 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8009bfe:	7bbb      	ldrb	r3, [r7, #14]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d106      	bne.n	8009c14 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	220d      	movs	r2, #13
 8009c0a:	701a      	strb	r2, [r3, #0]
 8009c0c:	e002      	b.n	8009c14 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	220d      	movs	r2, #13
 8009c12:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2205      	movs	r2, #5
 8009c18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f001 fbdc 	bl	800b3e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c30:	e055      	b.n	8009cde <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d04f      	beq.n	8009cdc <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	4798      	blx	r3
      }
      break;
 8009c48:	e048      	b.n	8009cdc <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff fcec 	bl	8009630 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d005      	beq.n	8009c8c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c86:	2105      	movs	r1, #5
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d107      	bne.n	8009ca8 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7ff fda5 	bl	80097f0 <USBH_Start>
 8009ca6:	e002      	b.n	8009cae <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f003 fed3 	bl	800da54 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	f001 fb8f 	bl	800b3e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cca:	e008      	b.n	8009cde <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8009ccc:	bf00      	nop
 8009cce:	e006      	b.n	8009cde <USBH_Process+0x4ce>
      break;
 8009cd0:	bf00      	nop
 8009cd2:	e004      	b.n	8009cde <USBH_Process+0x4ce>
      break;
 8009cd4:	bf00      	nop
 8009cd6:	e002      	b.n	8009cde <USBH_Process+0x4ce>
    break;
 8009cd8:	bf00      	nop
 8009cda:	e000      	b.n	8009cde <USBH_Process+0x4ce>
      break;
 8009cdc:	bf00      	nop
  }
  return USBH_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af04      	add	r7, sp, #16
 8009cee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	2b07      	cmp	r3, #7
 8009cfe:	f200 8208 	bhi.w	800a112 <USBH_HandleEnum+0x42a>
 8009d02:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <USBH_HandleEnum+0x20>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009d29 	.word	0x08009d29
 8009d0c:	08009de7 	.word	0x08009de7
 8009d10:	08009e51 	.word	0x08009e51
 8009d14:	08009edf 	.word	0x08009edf
 8009d18:	08009f49 	.word	0x08009f49
 8009d1c:	08009fb9 	.word	0x08009fb9
 8009d20:	0800a055 	.word	0x0800a055
 8009d24:	0800a0d3 	.word	0x0800a0d3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009d28:	2108      	movs	r1, #8
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 faea 	bl	800a304 <USBH_Get_DevDesc>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d130      	bne.n	8009d9c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	7919      	ldrb	r1, [r3, #4]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d5e:	b292      	uxth	r2, r2
 8009d60:	9202      	str	r2, [sp, #8]
 8009d62:	2200      	movs	r2, #0
 8009d64:	9201      	str	r2, [sp, #4]
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2280      	movs	r2, #128	; 0x80
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 f9ef 	bl	800b150 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7959      	ldrb	r1, [r3, #5]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d86:	b292      	uxth	r2, r2
 8009d88:	9202      	str	r2, [sp, #8]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	9201      	str	r2, [sp, #4]
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	4603      	mov	r3, r0
 8009d92:	2200      	movs	r2, #0
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 f9db 	bl	800b150 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009d9a:	e1bc      	b.n	800a116 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	f040 81b9 	bne.w	800a116 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009daa:	3301      	adds	r3, #1
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d903      	bls.n	8009dc6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	220d      	movs	r2, #13
 8009dc2:	701a      	strb	r2, [r3, #0]
      break;
 8009dc4:	e1a7      	b.n	800a116 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	795b      	ldrb	r3, [r3, #5]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f001 fa0f 	bl	800b1f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	791b      	ldrb	r3, [r3, #4]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 fa09 	bl	800b1f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	701a      	strb	r2, [r3, #0]
      break;
 8009de4:	e197      	b.n	800a116 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009de6:	2112      	movs	r1, #18
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fa8b 	bl	800a304 <USBH_Get_DevDesc>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d103      	bne.n	8009e00 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009dfe:	e18c      	b.n	800a11a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e00:	7bbb      	ldrb	r3, [r7, #14]
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	f040 8189 	bne.w	800a11a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e0e:	3301      	adds	r3, #1
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d903      	bls.n	8009e2a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	220d      	movs	r2, #13
 8009e26:	701a      	strb	r2, [r3, #0]
      break;
 8009e28:	e177      	b.n	800a11a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	795b      	ldrb	r3, [r3, #5]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 f9dd 	bl	800b1f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	791b      	ldrb	r3, [r3, #4]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 f9d7 	bl	800b1f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	701a      	strb	r2, [r3, #0]
      break;
 8009e4e:	e164      	b.n	800a11a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009e50:	2101      	movs	r1, #1
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fb02 	bl	800a45c <USBH_SetAddress>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d132      	bne.n	8009ec8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009e62:	2002      	movs	r0, #2
 8009e64:	f003 ff5a 	bl	800dd1c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2203      	movs	r2, #3
 8009e74:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	7919      	ldrb	r1, [r3, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e8a:	b292      	uxth	r2, r2
 8009e8c:	9202      	str	r2, [sp, #8]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	9201      	str	r2, [sp, #4]
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	4603      	mov	r3, r0
 8009e96:	2280      	movs	r2, #128	; 0x80
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 f959 	bl	800b150 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	7959      	ldrb	r1, [r3, #5]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009eb2:	b292      	uxth	r2, r2
 8009eb4:	9202      	str	r2, [sp, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	9201      	str	r2, [sp, #4]
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 f945 	bl	800b150 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ec6:	e12a      	b.n	800a11e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ec8:	7bbb      	ldrb	r3, [r7, #14]
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	f040 8127 	bne.w	800a11e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	220d      	movs	r2, #13
 8009ed4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	705a      	strb	r2, [r3, #1]
      break;
 8009edc:	e11f      	b.n	800a11e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009ede:	2109      	movs	r1, #9
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fa37 	bl	800a354 <USBH_Get_CfgDesc>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d103      	bne.n	8009ef8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2204      	movs	r2, #4
 8009ef4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ef6:	e114      	b.n	800a122 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	f040 8111 	bne.w	800a122 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f06:	3301      	adds	r3, #1
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d903      	bls.n	8009f22 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	220d      	movs	r2, #13
 8009f1e:	701a      	strb	r2, [r3, #0]
      break;
 8009f20:	e0ff      	b.n	800a122 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	795b      	ldrb	r3, [r3, #5]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 f961 	bl	800b1f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	791b      	ldrb	r3, [r3, #4]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 f95b 	bl	800b1f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	701a      	strb	r2, [r3, #0]
      break;
 8009f46:	e0ec      	b.n	800a122 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f9ff 	bl	800a354 <USBH_Get_CfgDesc>
 8009f56:	4603      	mov	r3, r0
 8009f58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f5a:	7bbb      	ldrb	r3, [r7, #14]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d103      	bne.n	8009f68 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2205      	movs	r2, #5
 8009f64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f66:	e0de      	b.n	800a126 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	f040 80db 	bne.w	800a126 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f76:	3301      	adds	r3, #1
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d903      	bls.n	8009f92 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	220d      	movs	r2, #13
 8009f8e:	701a      	strb	r2, [r3, #0]
      break;
 8009f90:	e0c9      	b.n	800a126 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	795b      	ldrb	r3, [r3, #5]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 f929 	bl	800b1f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	791b      	ldrb	r3, [r3, #4]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 f923 	bl	800b1f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	701a      	strb	r2, [r3, #0]
      break;
 8009fb6:	e0b6      	b.n	800a126 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d036      	beq.n	800a030 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009fce:	23ff      	movs	r3, #255	; 0xff
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f9e3 	bl	800a39c <USBH_Get_StringDesc>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d111      	bne.n	800a004 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2206      	movs	r2, #6
 8009fe4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2205      	movs	r2, #5
 8009fea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	f001 f9f3 	bl	800b3e8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a002:	e092      	b.n	800a12a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a004:	7bbb      	ldrb	r3, [r7, #14]
 800a006:	2b03      	cmp	r3, #3
 800a008:	f040 808f 	bne.w	800a12a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2206      	movs	r2, #6
 800a010:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2205      	movs	r2, #5
 800a016:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a026:	2200      	movs	r2, #0
 800a028:	4619      	mov	r1, r3
 800a02a:	f001 f9dd 	bl	800b3e8 <osMessagePut>
      break;
 800a02e:	e07c      	b.n	800a12a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2206      	movs	r2, #6
 800a034:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2205      	movs	r2, #5
 800a03a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a04a:	2200      	movs	r2, #0
 800a04c:	4619      	mov	r1, r3
 800a04e:	f001 f9cb 	bl	800b3e8 <osMessagePut>
      break;
 800a052:	e06a      	b.n	800a12a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d027      	beq.n	800a0ae <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a06a:	23ff      	movs	r3, #255	; 0xff
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f995 	bl	800a39c <USBH_Get_StringDesc>
 800a072:	4603      	mov	r3, r0
 800a074:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2207      	movs	r2, #7
 800a080:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a082:	e054      	b.n	800a12e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	2b03      	cmp	r3, #3
 800a088:	d151      	bne.n	800a12e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2207      	movs	r2, #7
 800a08e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2205      	movs	r2, #5
 800a094:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f001 f99e 	bl	800b3e8 <osMessagePut>
      break;
 800a0ac:	e03f      	b.n	800a12e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2207      	movs	r2, #7
 800a0b2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2205      	movs	r2, #5
 800a0b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	f001 f98c 	bl	800b3e8 <osMessagePut>
      break;
 800a0d0:	e02d      	b.n	800a12e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d017      	beq.n	800a10c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0e8:	23ff      	movs	r3, #255	; 0xff
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f956 	bl	800a39c <USBH_Get_StringDesc>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d102      	bne.n	800a100 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a0fe:	e018      	b.n	800a132 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a100:	7bbb      	ldrb	r3, [r7, #14]
 800a102:	2b03      	cmp	r3, #3
 800a104:	d115      	bne.n	800a132 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]
      break;
 800a10a:	e012      	b.n	800a132 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]
      break;
 800a110:	e00f      	b.n	800a132 <USBH_HandleEnum+0x44a>

    default:
      break;
 800a112:	bf00      	nop
 800a114:	e00e      	b.n	800a134 <USBH_HandleEnum+0x44c>
      break;
 800a116:	bf00      	nop
 800a118:	e00c      	b.n	800a134 <USBH_HandleEnum+0x44c>
      break;
 800a11a:	bf00      	nop
 800a11c:	e00a      	b.n	800a134 <USBH_HandleEnum+0x44c>
      break;
 800a11e:	bf00      	nop
 800a120:	e008      	b.n	800a134 <USBH_HandleEnum+0x44c>
      break;
 800a122:	bf00      	nop
 800a124:	e006      	b.n	800a134 <USBH_HandleEnum+0x44c>
      break;
 800a126:	bf00      	nop
 800a128:	e004      	b.n	800a134 <USBH_HandleEnum+0x44c>
      break;
 800a12a:	bf00      	nop
 800a12c:	e002      	b.n	800a134 <USBH_HandleEnum+0x44c>
      break;
 800a12e:	bf00      	nop
 800a130:	e000      	b.n	800a134 <USBH_HandleEnum+0x44c>
      break;
 800a132:	bf00      	nop
  }
  return Status;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop

0800a140 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a152:	bf00      	nop
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b082      	sub	sp, #8
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f804 	bl	800a182 <USBH_HandleSof>
}
 800a17a:	bf00      	nop
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b082      	sub	sp, #8
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b0b      	cmp	r3, #11
 800a192:	d10a      	bne.n	800a1aa <USBH_HandleSof+0x28>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d005      	beq.n	800a1aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	4798      	blx	r3
  }
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f001 f905 	bl	800b3e8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a1de:	bf00      	nop
}
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a1f6:	bf00      	nop
}
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a236:	2200      	movs	r2, #0
 800a238:	4619      	mov	r1, r3
 800a23a:	f001 f8d5 	bl	800b3e8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f003 fc0e 	bl	800da8a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	791b      	ldrb	r3, [r3, #4]
 800a272:	4619      	mov	r1, r3
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 ffbb 	bl	800b1f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	795b      	ldrb	r3, [r3, #5]
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 ffb5 	bl	800b1f0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a29a:	2200      	movs	r2, #0
 800a29c:	4619      	mov	r1, r3
 800a29e:	f001 f8a3 	bl	800b3e8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800a2ba:	f107 030c 	add.w	r3, r7, #12
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f001 f8d0 	bl	800b468 <osMessageGet>
    if (event.status == osEventMessage)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b10      	cmp	r3, #16
 800a2cc:	d1f2      	bne.n	800a2b4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fa9e 	bl	8009810 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a2d4:	e7ee      	b.n	800a2b4 <USBH_Process_OS+0x8>

0800a2d6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f001 f877 	bl	800b3e8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af02      	add	r7, sp, #8
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a316:	78fb      	ldrb	r3, [r7, #3]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	4613      	mov	r3, r2
 800a31e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a322:	2100      	movs	r1, #0
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f864 	bl	800a3f2 <USBH_GetDescriptor>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a340:	78fa      	ldrb	r2, [r7, #3]
 800a342:	b292      	uxth	r2, r2
 800a344:	4619      	mov	r1, r3
 800a346:	f000 f918 	bl	800a57a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af02      	add	r7, sp, #8
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	331c      	adds	r3, #28
 800a364:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a366:	887b      	ldrh	r3, [r7, #2]
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a370:	2100      	movs	r1, #0
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f83d 	bl	800a3f2 <USBH_GetDescriptor>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d107      	bne.n	800a392 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a382:	887b      	ldrh	r3, [r7, #2]
 800a384:	461a      	mov	r2, r3
 800a386:	68b9      	ldr	r1, [r7, #8]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f987 	bl	800a69c <USBH_ParseCfgDesc>
 800a38e:	4603      	mov	r3, r0
 800a390:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a392:	7bfb      	ldrb	r3, [r7, #15]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af02      	add	r7, sp, #8
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	607a      	str	r2, [r7, #4]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	72fb      	strb	r3, [r7, #11]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a3b0:	7afb      	ldrb	r3, [r7, #11]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a3b8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a3c0:	893b      	ldrh	r3, [r7, #8]
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 f812 	bl	800a3f2 <USBH_GetDescriptor>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d107      	bne.n	800a3e8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a3de:	893a      	ldrh	r2, [r7, #8]
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fb24 	bl	800aa30 <USBH_ParseStringDesc>
  }

  return status;
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	607b      	str	r3, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	72fb      	strb	r3, [r7, #11]
 800a400:	4613      	mov	r3, r2
 800a402:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	789b      	ldrb	r3, [r3, #2]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d11c      	bne.n	800a446 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a40c:	7afb      	ldrb	r3, [r7, #11]
 800a40e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a412:	b2da      	uxtb	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2206      	movs	r2, #6
 800a41c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	893a      	ldrh	r2, [r7, #8]
 800a422:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a424:	893b      	ldrh	r3, [r7, #8]
 800a426:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a42a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a42e:	d104      	bne.n	800a43a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f240 4209 	movw	r2, #1033	; 0x409
 800a436:	829a      	strh	r2, [r3, #20]
 800a438:	e002      	b.n	800a440 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8b3a      	ldrh	r2, [r7, #24]
 800a444:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a446:	8b3b      	ldrh	r3, [r7, #24]
 800a448:	461a      	mov	r2, r3
 800a44a:	6879      	ldr	r1, [r7, #4]
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 fb3d 	bl	800aacc <USBH_CtlReq>
 800a452:	4603      	mov	r3, r0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	789b      	ldrb	r3, [r3, #2]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d10f      	bne.n	800a490 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2205      	movs	r2, #5
 800a47a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	b29a      	uxth	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a490:	2200      	movs	r2, #0
 800a492:	2100      	movs	r1, #0
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fb19 	bl	800aacc <USBH_CtlReq>
 800a49a:	4603      	mov	r3, r0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	789b      	ldrb	r3, [r3, #2]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d10e      	bne.n	800a4d6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2209      	movs	r2, #9
 800a4c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	887a      	ldrh	r2, [r7, #2]
 800a4c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2100      	movs	r1, #0
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 faf6 	bl	800aacc <USBH_CtlReq>
 800a4e0:	4603      	mov	r3, r0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	789b      	ldrb	r3, [r3, #2]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d10f      	bne.n	800a51e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2203      	movs	r2, #3
 800a508:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a51e:	2200      	movs	r2, #0
 800a520:	2100      	movs	r1, #0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fad2 	bl	800aacc <USBH_CtlReq>
 800a528:	4603      	mov	r3, r0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	460b      	mov	r3, r1
 800a53c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	789b      	ldrb	r3, [r3, #2]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d10f      	bne.n	800a566 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2202      	movs	r2, #2
 800a54a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a566:	2200      	movs	r2, #0
 800a568:	2100      	movs	r1, #0
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 faae 	bl	800aacc <USBH_CtlReq>
 800a570:	4603      	mov	r3, r0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b085      	sub	sp, #20
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	4613      	mov	r3, r2
 800a586:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	781a      	ldrb	r2, [r3, #0]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	785a      	ldrb	r2, [r3, #1]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	3302      	adds	r3, #2
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	3303      	adds	r3, #3
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	021b      	lsls	r3, r3, #8
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	791a      	ldrb	r2, [r3, #4]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	795a      	ldrb	r2, [r3, #5]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	799a      	ldrb	r2, [r3, #6]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	79da      	ldrb	r2, [r3, #7]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	79db      	ldrb	r3, [r3, #7]
 800a5d8:	2b20      	cmp	r3, #32
 800a5da:	dc11      	bgt.n	800a600 <USBH_ParseDevDesc+0x86>
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	db16      	blt.n	800a60e <USBH_ParseDevDesc+0x94>
 800a5e0:	3b08      	subs	r3, #8
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a5ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	bf14      	ite	ne
 800a5f4:	2301      	movne	r3, #1
 800a5f6:	2300      	moveq	r3, #0
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d102      	bne.n	800a604 <USBH_ParseDevDesc+0x8a>
 800a5fe:	e006      	b.n	800a60e <USBH_ParseDevDesc+0x94>
 800a600:	2b40      	cmp	r3, #64	; 0x40
 800a602:	d104      	bne.n	800a60e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	79da      	ldrb	r2, [r3, #7]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	71da      	strb	r2, [r3, #7]
      break;
 800a60c:	e003      	b.n	800a616 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2240      	movs	r2, #64	; 0x40
 800a612:	71da      	strb	r2, [r3, #7]
      break;
 800a614:	bf00      	nop
  }

  if (length > 8U)
 800a616:	88fb      	ldrh	r3, [r7, #6]
 800a618:	2b08      	cmp	r3, #8
 800a61a:	d939      	bls.n	800a690 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	3308      	adds	r3, #8
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	b29a      	uxth	r2, r3
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	3309      	adds	r3, #9
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	021b      	lsls	r3, r3, #8
 800a62e:	b29b      	uxth	r3, r3
 800a630:	4313      	orrs	r3, r2
 800a632:	b29a      	uxth	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	330a      	adds	r3, #10
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	b29a      	uxth	r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	330b      	adds	r3, #11
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	b29b      	uxth	r3, r3
 800a648:	021b      	lsls	r3, r3, #8
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	4313      	orrs	r3, r2
 800a64e:	b29a      	uxth	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	330c      	adds	r3, #12
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	330d      	adds	r3, #13
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	b29b      	uxth	r3, r3
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	b29b      	uxth	r3, r3
 800a668:	4313      	orrs	r3, r2
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	7b9a      	ldrb	r2, [r3, #14]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	7bda      	ldrb	r2, [r3, #15]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	7c1a      	ldrb	r2, [r3, #16]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	7c5a      	ldrb	r2, [r3, #17]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	745a      	strb	r2, [r3, #17]
  }
}
 800a690:	bf00      	nop
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08c      	sub	sp, #48	; 0x30
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a6b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	781a      	ldrb	r2, [r3, #0]
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	785a      	ldrb	r2, [r3, #1]
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	3302      	adds	r3, #2
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	3303      	adds	r3, #3
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	021b      	lsls	r3, r3, #8
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6f8:	bf28      	it	cs
 800a6fa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	791a      	ldrb	r2, [r3, #4]
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	795a      	ldrb	r2, [r3, #5]
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	799a      	ldrb	r2, [r3, #6]
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	79da      	ldrb	r2, [r3, #7]
 800a720:	6a3b      	ldr	r3, [r7, #32]
 800a722:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	7a1a      	ldrb	r2, [r3, #8]
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	2b09      	cmp	r3, #9
 800a732:	d002      	beq.n	800a73a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	2209      	movs	r2, #9
 800a738:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a73a:	88fb      	ldrh	r3, [r7, #6]
 800a73c:	2b09      	cmp	r3, #9
 800a73e:	f240 809d 	bls.w	800a87c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a742:	2309      	movs	r3, #9
 800a744:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a74a:	e081      	b.n	800a850 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a74c:	f107 0316 	add.w	r3, r7, #22
 800a750:	4619      	mov	r1, r3
 800a752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a754:	f000 f99f 	bl	800aa96 <USBH_GetNextDesc>
 800a758:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75c:	785b      	ldrb	r3, [r3, #1]
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d176      	bne.n	800a850 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b09      	cmp	r3, #9
 800a768:	d002      	beq.n	800a770 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	2209      	movs	r2, #9
 800a76e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a774:	221a      	movs	r2, #26
 800a776:	fb02 f303 	mul.w	r3, r2, r3
 800a77a:	3308      	adds	r3, #8
 800a77c:	6a3a      	ldr	r2, [r7, #32]
 800a77e:	4413      	add	r3, r2
 800a780:	3302      	adds	r3, #2
 800a782:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a786:	69f8      	ldr	r0, [r7, #28]
 800a788:	f000 f87e 	bl	800a888 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a78c:	2300      	movs	r3, #0
 800a78e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a792:	2300      	movs	r3, #0
 800a794:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a796:	e043      	b.n	800a820 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a798:	f107 0316 	add.w	r3, r7, #22
 800a79c:	4619      	mov	r1, r3
 800a79e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a0:	f000 f979 	bl	800aa96 <USBH_GetNextDesc>
 800a7a4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	785b      	ldrb	r3, [r3, #1]
 800a7aa:	2b05      	cmp	r3, #5
 800a7ac:	d138      	bne.n	800a820 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	795b      	ldrb	r3, [r3, #5]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d10f      	bne.n	800a7d6 <USBH_ParseCfgDesc+0x13a>
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	799b      	ldrb	r3, [r3, #6]
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d10b      	bne.n	800a7d6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	79db      	ldrb	r3, [r3, #7]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10f      	bne.n	800a7e6 <USBH_ParseCfgDesc+0x14a>
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	2b09      	cmp	r3, #9
 800a7cc:	d00b      	beq.n	800a7e6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	2209      	movs	r2, #9
 800a7d2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a7d4:	e007      	b.n	800a7e6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b07      	cmp	r3, #7
 800a7dc:	d004      	beq.n	800a7e8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	2207      	movs	r2, #7
 800a7e2:	701a      	strb	r2, [r3, #0]
 800a7e4:	e000      	b.n	800a7e8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a7e6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a7e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a7f0:	3201      	adds	r2, #1
 800a7f2:	00d2      	lsls	r2, r2, #3
 800a7f4:	211a      	movs	r1, #26
 800a7f6:	fb01 f303 	mul.w	r3, r1, r3
 800a7fa:	4413      	add	r3, r2
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	6a3a      	ldr	r2, [r7, #32]
 800a800:	4413      	add	r3, r2
 800a802:	3304      	adds	r3, #4
 800a804:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a808:	69b9      	ldr	r1, [r7, #24]
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f000 f86b 	bl	800a8e6 <USBH_ParseEPDesc>
 800a810:	4603      	mov	r3, r0
 800a812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a816:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a81a:	3301      	adds	r3, #1
 800a81c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	791b      	ldrb	r3, [r3, #4]
 800a824:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a828:	429a      	cmp	r2, r3
 800a82a:	d204      	bcs.n	800a836 <USBH_ParseCfgDesc+0x19a>
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	885a      	ldrh	r2, [r3, #2]
 800a830:	8afb      	ldrh	r3, [r7, #22]
 800a832:	429a      	cmp	r2, r3
 800a834:	d8b0      	bhi.n	800a798 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	791b      	ldrb	r3, [r3, #4]
 800a83a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a83e:	429a      	cmp	r2, r3
 800a840:	d201      	bcs.n	800a846 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a842:	2303      	movs	r3, #3
 800a844:	e01c      	b.n	800a880 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a84a:	3301      	adds	r3, #1
 800a84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a854:	2b01      	cmp	r3, #1
 800a856:	d805      	bhi.n	800a864 <USBH_ParseCfgDesc+0x1c8>
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	885a      	ldrh	r2, [r3, #2]
 800a85c:	8afb      	ldrh	r3, [r7, #22]
 800a85e:	429a      	cmp	r2, r3
 800a860:	f63f af74 	bhi.w	800a74c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	791b      	ldrb	r3, [r3, #4]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	bf28      	it	cs
 800a86c:	2302      	movcs	r3, #2
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a874:	429a      	cmp	r2, r3
 800a876:	d201      	bcs.n	800a87c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a878:	2303      	movs	r3, #3
 800a87a:	e001      	b.n	800a880 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a87c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a880:	4618      	mov	r0, r3
 800a882:	3730      	adds	r7, #48	; 0x30
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781a      	ldrb	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	785a      	ldrb	r2, [r3, #1]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	789a      	ldrb	r2, [r3, #2]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	78da      	ldrb	r2, [r3, #3]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	791a      	ldrb	r2, [r3, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	795a      	ldrb	r2, [r3, #5]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	799a      	ldrb	r2, [r3, #6]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	79da      	ldrb	r2, [r3, #7]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	7a1a      	ldrb	r2, [r3, #8]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	721a      	strb	r2, [r3, #8]
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b087      	sub	sp, #28
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	781a      	ldrb	r2, [r3, #0]
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	785a      	ldrb	r2, [r3, #1]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	789a      	ldrb	r2, [r3, #2]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	78da      	ldrb	r2, [r3, #3]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3304      	adds	r3, #4
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3305      	adds	r3, #5
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	021b      	lsls	r3, r3, #8
 800a928:	b29b      	uxth	r3, r3
 800a92a:	4313      	orrs	r3, r2
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	799a      	ldrb	r2, [r3, #6]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	889b      	ldrh	r3, [r3, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a942:	2303      	movs	r3, #3
 800a944:	75fb      	strb	r3, [r7, #23]
 800a946:	e033      	b.n	800a9b0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	889b      	ldrh	r3, [r3, #4]
 800a94c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a950:	f023 0307 	bic.w	r3, r3, #7
 800a954:	b29a      	uxth	r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	889b      	ldrh	r3, [r3, #4]
 800a95e:	b21a      	sxth	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3304      	adds	r3, #4
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	b299      	uxth	r1, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3305      	adds	r3, #5
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	b29b      	uxth	r3, r3
 800a974:	430b      	orrs	r3, r1
 800a976:	b29b      	uxth	r3, r3
 800a978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d110      	bne.n	800a9a2 <USBH_ParseEPDesc+0xbc>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	b299      	uxth	r1, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3305      	adds	r3, #5
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	021b      	lsls	r3, r3, #8
 800a992:	b29b      	uxth	r3, r3
 800a994:	430b      	orrs	r3, r1
 800a996:	b29b      	uxth	r3, r3
 800a998:	b21b      	sxth	r3, r3
 800a99a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a99e:	b21b      	sxth	r3, r3
 800a9a0:	e001      	b.n	800a9a6 <USBH_ParseEPDesc+0xc0>
 800a9a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	b21b      	sxth	r3, r3
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d116      	bne.n	800a9e8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	78db      	ldrb	r3, [r3, #3]
 800a9be:	f003 0303 	and.w	r3, r3, #3
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d005      	beq.n	800a9d2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	78db      	ldrb	r3, [r3, #3]
 800a9ca:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d127      	bne.n	800aa22 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	799b      	ldrb	r3, [r3, #6]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <USBH_ParseEPDesc+0xfc>
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	799b      	ldrb	r3, [r3, #6]
 800a9de:	2b10      	cmp	r3, #16
 800a9e0:	d91f      	bls.n	800aa22 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	75fb      	strb	r3, [r7, #23]
 800a9e6:	e01c      	b.n	800aa22 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	78db      	ldrb	r3, [r3, #3]
 800a9ec:	f003 0303 	and.w	r3, r3, #3
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d10a      	bne.n	800aa0a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	799b      	ldrb	r3, [r3, #6]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d003      	beq.n	800aa04 <USBH_ParseEPDesc+0x11e>
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	799b      	ldrb	r3, [r3, #6]
 800aa00:	2b10      	cmp	r3, #16
 800aa02:	d90e      	bls.n	800aa22 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800aa04:	2303      	movs	r3, #3
 800aa06:	75fb      	strb	r3, [r7, #23]
 800aa08:	e00b      	b.n	800aa22 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	78db      	ldrb	r3, [r3, #3]
 800aa0e:	f003 0303 	and.w	r3, r3, #3
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d105      	bne.n	800aa22 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	799b      	ldrb	r3, [r3, #6]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800aa22:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	371c      	adds	r7, #28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b087      	sub	sp, #28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3301      	adds	r3, #1
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2b03      	cmp	r3, #3
 800aa46:	d120      	bne.n	800aa8a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	1e9a      	subs	r2, r3, #2
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	4293      	cmp	r3, r2
 800aa52:	bf28      	it	cs
 800aa54:	4613      	movcs	r3, r2
 800aa56:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3302      	adds	r3, #2
 800aa5c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aa5e:	2300      	movs	r3, #0
 800aa60:	82fb      	strh	r3, [r7, #22]
 800aa62:	e00b      	b.n	800aa7c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aa64:	8afb      	ldrh	r3, [r7, #22]
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	4413      	add	r3, r2
 800aa6a:	781a      	ldrb	r2, [r3, #0]
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	3301      	adds	r3, #1
 800aa74:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aa76:	8afb      	ldrh	r3, [r7, #22]
 800aa78:	3302      	adds	r3, #2
 800aa7a:	82fb      	strh	r3, [r7, #22]
 800aa7c:	8afa      	ldrh	r2, [r7, #22]
 800aa7e:	8abb      	ldrh	r3, [r7, #20]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d3ef      	bcc.n	800aa64 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2200      	movs	r2, #0
 800aa88:	701a      	strb	r2, [r3, #0]
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	881a      	ldrh	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	4413      	add	r3, r2
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4413      	add	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aabe:	68fb      	ldr	r3, [r7, #12]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	4613      	mov	r3, r2
 800aad8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aada:	2301      	movs	r3, #1
 800aadc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	789b      	ldrb	r3, [r3, #2]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d002      	beq.n	800aaec <USBH_CtlReq+0x20>
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d01d      	beq.n	800ab26 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800aaea:	e043      	b.n	800ab74 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	88fa      	ldrh	r2, [r7, #6]
 800aaf6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2201      	movs	r2, #1
 800aafc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2202      	movs	r2, #2
 800ab02:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ab04:	2301      	movs	r3, #1
 800ab06:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2203      	movs	r2, #3
 800ab0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4619      	mov	r1, r3
 800ab20:	f000 fc62 	bl	800b3e8 <osMessagePut>
      break;
 800ab24:	e026      	b.n	800ab74 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 f82a 	bl	800ab80 <USBH_HandleControl>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d002      	beq.n	800ab3c <USBH_CtlReq+0x70>
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	d106      	bne.n	800ab4a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	761a      	strb	r2, [r3, #24]
 800ab48:	e005      	b.n	800ab56 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d102      	bne.n	800ab56 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2201      	movs	r2, #1
 800ab54:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2203      	movs	r2, #3
 800ab5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	f000 fc3b 	bl	800b3e8 <osMessagePut>
      break;
 800ab72:	bf00      	nop
  }
  return status;
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7e1b      	ldrb	r3, [r3, #24]
 800ab94:	3b01      	subs	r3, #1
 800ab96:	2b0a      	cmp	r3, #10
 800ab98:	f200 8229 	bhi.w	800afee <USBH_HandleControl+0x46e>
 800ab9c:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <USBH_HandleControl+0x24>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800abd1 	.word	0x0800abd1
 800aba8:	0800abeb 	.word	0x0800abeb
 800abac:	0800ac8d 	.word	0x0800ac8d
 800abb0:	0800acb3 	.word	0x0800acb3
 800abb4:	0800ad3f 	.word	0x0800ad3f
 800abb8:	0800ad69 	.word	0x0800ad69
 800abbc:	0800ae2b 	.word	0x0800ae2b
 800abc0:	0800ae4d 	.word	0x0800ae4d
 800abc4:	0800aedf 	.word	0x0800aedf
 800abc8:	0800af05 	.word	0x0800af05
 800abcc:	0800af97 	.word	0x0800af97
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f103 0110 	add.w	r1, r3, #16
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	795b      	ldrb	r3, [r3, #5]
 800abda:	461a      	mov	r2, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fa17 	bl	800b010 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2202      	movs	r2, #2
 800abe6:	761a      	strb	r2, [r3, #24]
      break;
 800abe8:	e20c      	b.n	800b004 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	795b      	ldrb	r3, [r3, #5]
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f003 f839 	bl	800dc68 <USBH_LL_GetURBState>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d12c      	bne.n	800ac5a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	7c1b      	ldrb	r3, [r3, #16]
 800ac04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac08:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	8adb      	ldrh	r3, [r3, #22]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ac12:	7b7b      	ldrb	r3, [r7, #13]
 800ac14:	2b80      	cmp	r3, #128	; 0x80
 800ac16:	d103      	bne.n	800ac20 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2203      	movs	r2, #3
 800ac1c:	761a      	strb	r2, [r3, #24]
 800ac1e:	e00d      	b.n	800ac3c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2205      	movs	r2, #5
 800ac24:	761a      	strb	r2, [r3, #24]
 800ac26:	e009      	b.n	800ac3c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800ac28:	7b7b      	ldrb	r3, [r7, #13]
 800ac2a:	2b80      	cmp	r3, #128	; 0x80
 800ac2c:	d103      	bne.n	800ac36 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2209      	movs	r2, #9
 800ac32:	761a      	strb	r2, [r3, #24]
 800ac34:	e002      	b.n	800ac3c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2207      	movs	r2, #7
 800ac3a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2203      	movs	r2, #3
 800ac40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac50:	2200      	movs	r2, #0
 800ac52:	4619      	mov	r1, r3
 800ac54:	f000 fbc8 	bl	800b3e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac58:	e1cb      	b.n	800aff2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d003      	beq.n	800ac68 <USBH_HandleControl+0xe8>
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	f040 81c5 	bne.w	800aff2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	220b      	movs	r2, #11
 800ac6c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2203      	movs	r2, #3
 800ac72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac82:	2200      	movs	r2, #0
 800ac84:	4619      	mov	r1, r3
 800ac86:	f000 fbaf 	bl	800b3e8 <osMessagePut>
      break;
 800ac8a:	e1b2      	b.n	800aff2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6899      	ldr	r1, [r3, #8]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	899a      	ldrh	r2, [r3, #12]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	791b      	ldrb	r3, [r3, #4]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f9f2 	bl	800b08e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2204      	movs	r2, #4
 800acae:	761a      	strb	r2, [r3, #24]
      break;
 800acb0:	e1a8      	b.n	800b004 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	791b      	ldrb	r3, [r3, #4]
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f002 ffd5 	bl	800dc68 <USBH_LL_GetURBState>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800acc2:	7bbb      	ldrb	r3, [r7, #14]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d110      	bne.n	800acea <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2209      	movs	r2, #9
 800accc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2203      	movs	r2, #3
 800acd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ace2:	2200      	movs	r2, #0
 800ace4:	4619      	mov	r1, r3
 800ace6:	f000 fb7f 	bl	800b3e8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	2b05      	cmp	r3, #5
 800acee:	d110      	bne.n	800ad12 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800acf0:	2303      	movs	r3, #3
 800acf2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2203      	movs	r2, #3
 800acf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad08:	2200      	movs	r2, #0
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	f000 fb6c 	bl	800b3e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad10:	e171      	b.n	800aff6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	f040 816e 	bne.w	800aff6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	220b      	movs	r2, #11
 800ad1e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2203      	movs	r2, #3
 800ad24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad34:	2200      	movs	r2, #0
 800ad36:	4619      	mov	r1, r3
 800ad38:	f000 fb56 	bl	800b3e8 <osMessagePut>
      break;
 800ad3c:	e15b      	b.n	800aff6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6899      	ldr	r1, [r3, #8]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	899a      	ldrh	r2, [r3, #12]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	795b      	ldrb	r3, [r3, #5]
 800ad4a:	2001      	movs	r0, #1
 800ad4c:	9000      	str	r0, [sp, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f978 	bl	800b044 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2206      	movs	r2, #6
 800ad64:	761a      	strb	r2, [r3, #24]
      break;
 800ad66:	e14d      	b.n	800b004 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	795b      	ldrb	r3, [r3, #5]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f002 ff7a 	bl	800dc68 <USBH_LL_GetURBState>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d111      	bne.n	800ada2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2207      	movs	r2, #7
 800ad82:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2203      	movs	r2, #3
 800ad88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad98:	2200      	movs	r2, #0
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	f000 fb24 	bl	800b3e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ada0:	e12b      	b.n	800affa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
 800ada4:	2b05      	cmp	r3, #5
 800ada6:	d113      	bne.n	800add0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	220c      	movs	r2, #12
 800adac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800adae:	2303      	movs	r3, #3
 800adb0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2203      	movs	r2, #3
 800adb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800adc6:	2200      	movs	r2, #0
 800adc8:	4619      	mov	r1, r3
 800adca:	f000 fb0d 	bl	800b3e8 <osMessagePut>
      break;
 800adce:	e114      	b.n	800affa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800add0:	7bbb      	ldrb	r3, [r7, #14]
 800add2:	2b02      	cmp	r3, #2
 800add4:	d111      	bne.n	800adfa <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2205      	movs	r2, #5
 800adda:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2203      	movs	r2, #3
 800ade0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800adf0:	2200      	movs	r2, #0
 800adf2:	4619      	mov	r1, r3
 800adf4:	f000 faf8 	bl	800b3e8 <osMessagePut>
      break;
 800adf8:	e0ff      	b.n	800affa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	2b04      	cmp	r3, #4
 800adfe:	f040 80fc 	bne.w	800affa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	220b      	movs	r2, #11
 800ae06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2203      	movs	r2, #3
 800ae10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae20:	2200      	movs	r2, #0
 800ae22:	4619      	mov	r1, r3
 800ae24:	f000 fae0 	bl	800b3e8 <osMessagePut>
      break;
 800ae28:	e0e7      	b.n	800affa <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	791b      	ldrb	r3, [r3, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2100      	movs	r1, #0
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f92b 	bl	800b08e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2208      	movs	r2, #8
 800ae48:	761a      	strb	r2, [r3, #24]

      break;
 800ae4a:	e0db      	b.n	800b004 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	791b      	ldrb	r3, [r3, #4]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f002 ff08 	bl	800dc68 <USBH_LL_GetURBState>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae5c:	7bbb      	ldrb	r3, [r7, #14]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d113      	bne.n	800ae8a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	220d      	movs	r2, #13
 800ae66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2203      	movs	r2, #3
 800ae70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae80:	2200      	movs	r2, #0
 800ae82:	4619      	mov	r1, r3
 800ae84:	f000 fab0 	bl	800b3e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae88:	e0b9      	b.n	800affe <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	2b04      	cmp	r3, #4
 800ae8e:	d111      	bne.n	800aeb4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	220b      	movs	r2, #11
 800ae94:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2203      	movs	r2, #3
 800ae9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aeaa:	2200      	movs	r2, #0
 800aeac:	4619      	mov	r1, r3
 800aeae:	f000 fa9b 	bl	800b3e8 <osMessagePut>
      break;
 800aeb2:	e0a4      	b.n	800affe <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
 800aeb6:	2b05      	cmp	r3, #5
 800aeb8:	f040 80a1 	bne.w	800affe <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800aebc:	2303      	movs	r3, #3
 800aebe:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2203      	movs	r2, #3
 800aec4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aed4:	2200      	movs	r2, #0
 800aed6:	4619      	mov	r1, r3
 800aed8:	f000 fa86 	bl	800b3e8 <osMessagePut>
      break;
 800aedc:	e08f      	b.n	800affe <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	795b      	ldrb	r3, [r3, #5]
 800aee2:	2201      	movs	r2, #1
 800aee4:	9200      	str	r2, [sp, #0]
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f8aa 	bl	800b044 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	220a      	movs	r2, #10
 800af00:	761a      	strb	r2, [r3, #24]
      break;
 800af02:	e07f      	b.n	800b004 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	795b      	ldrb	r3, [r3, #5]
 800af08:	4619      	mov	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f002 feac 	bl	800dc68 <USBH_LL_GetURBState>
 800af10:	4603      	mov	r3, r0
 800af12:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800af14:	7bbb      	ldrb	r3, [r7, #14]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d113      	bne.n	800af42 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	220d      	movs	r2, #13
 800af22:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2203      	movs	r2, #3
 800af28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af38:	2200      	movs	r2, #0
 800af3a:	4619      	mov	r1, r3
 800af3c:	f000 fa54 	bl	800b3e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af40:	e05f      	b.n	800b002 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	2b02      	cmp	r3, #2
 800af46:	d111      	bne.n	800af6c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2209      	movs	r2, #9
 800af4c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2203      	movs	r2, #3
 800af52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af62:	2200      	movs	r2, #0
 800af64:	4619      	mov	r1, r3
 800af66:	f000 fa3f 	bl	800b3e8 <osMessagePut>
      break;
 800af6a:	e04a      	b.n	800b002 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d147      	bne.n	800b002 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	220b      	movs	r2, #11
 800af76:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2203      	movs	r2, #3
 800af7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af8c:	2200      	movs	r2, #0
 800af8e:	4619      	mov	r1, r3
 800af90:	f000 fa2a 	bl	800b3e8 <osMessagePut>
      break;
 800af94:	e035      	b.n	800b002 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	7e5b      	ldrb	r3, [r3, #25]
 800af9a:	3301      	adds	r3, #1
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	765a      	strb	r2, [r3, #25]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	7e5b      	ldrb	r3, [r3, #25]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d806      	bhi.n	800afb8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800afb6:	e025      	b.n	800b004 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afbe:	2106      	movs	r1, #6
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	795b      	ldrb	r3, [r3, #5]
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f90d 	bl	800b1f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	791b      	ldrb	r3, [r3, #4]
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f907 	bl	800b1f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800afe8:	2302      	movs	r3, #2
 800afea:	73fb      	strb	r3, [r7, #15]
      break;
 800afec:	e00a      	b.n	800b004 <USBH_HandleControl+0x484>

    default:
      break;
 800afee:	bf00      	nop
 800aff0:	e008      	b.n	800b004 <USBH_HandleControl+0x484>
      break;
 800aff2:	bf00      	nop
 800aff4:	e006      	b.n	800b004 <USBH_HandleControl+0x484>
      break;
 800aff6:	bf00      	nop
 800aff8:	e004      	b.n	800b004 <USBH_HandleControl+0x484>
      break;
 800affa:	bf00      	nop
 800affc:	e002      	b.n	800b004 <USBH_HandleControl+0x484>
      break;
 800affe:	bf00      	nop
 800b000:	e000      	b.n	800b004 <USBH_HandleControl+0x484>
      break;
 800b002:	bf00      	nop
  }

  return status;
 800b004:	7bfb      	ldrb	r3, [r7, #15]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop

0800b010 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af04      	add	r7, sp, #16
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	4613      	mov	r3, r2
 800b01c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b01e:	79f9      	ldrb	r1, [r7, #7]
 800b020:	2300      	movs	r3, #0
 800b022:	9303      	str	r3, [sp, #12]
 800b024:	2308      	movs	r3, #8
 800b026:	9302      	str	r3, [sp, #8]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	9301      	str	r3, [sp, #4]
 800b02c:	2300      	movs	r3, #0
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	2300      	movs	r3, #0
 800b032:	2200      	movs	r2, #0
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f002 fde6 	bl	800dc06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b088      	sub	sp, #32
 800b048:	af04      	add	r7, sp, #16
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	4611      	mov	r1, r2
 800b050:	461a      	mov	r2, r3
 800b052:	460b      	mov	r3, r1
 800b054:	80fb      	strh	r3, [r7, #6]
 800b056:	4613      	mov	r3, r2
 800b058:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b068:	7979      	ldrb	r1, [r7, #5]
 800b06a:	7e3b      	ldrb	r3, [r7, #24]
 800b06c:	9303      	str	r3, [sp, #12]
 800b06e:	88fb      	ldrh	r3, [r7, #6]
 800b070:	9302      	str	r3, [sp, #8]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	2301      	movs	r3, #1
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	2300      	movs	r3, #0
 800b07c:	2200      	movs	r2, #0
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f002 fdc1 	bl	800dc06 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b088      	sub	sp, #32
 800b092:	af04      	add	r7, sp, #16
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	4611      	mov	r1, r2
 800b09a:	461a      	mov	r2, r3
 800b09c:	460b      	mov	r3, r1
 800b09e:	80fb      	strh	r3, [r7, #6]
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0a4:	7979      	ldrb	r1, [r7, #5]
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	9303      	str	r3, [sp, #12]
 800b0aa:	88fb      	ldrh	r3, [r7, #6]
 800b0ac:	9302      	str	r3, [sp, #8]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f002 fda3 	bl	800dc06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b0c0:	2300      	movs	r3, #0

}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b088      	sub	sp, #32
 800b0ce:	af04      	add	r7, sp, #16
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	460b      	mov	r3, r1
 800b0da:	80fb      	strh	r3, [r7, #6]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0ee:	7979      	ldrb	r1, [r7, #5]
 800b0f0:	7e3b      	ldrb	r3, [r7, #24]
 800b0f2:	9303      	str	r3, [sp, #12]
 800b0f4:	88fb      	ldrh	r3, [r7, #6]
 800b0f6:	9302      	str	r3, [sp, #8]
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	9301      	str	r3, [sp, #4]
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	2302      	movs	r3, #2
 800b102:	2200      	movs	r2, #0
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f002 fd7e 	bl	800dc06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af04      	add	r7, sp, #16
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	4611      	mov	r1, r2
 800b120:	461a      	mov	r2, r3
 800b122:	460b      	mov	r3, r1
 800b124:	80fb      	strh	r3, [r7, #6]
 800b126:	4613      	mov	r3, r2
 800b128:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b12a:	7979      	ldrb	r1, [r7, #5]
 800b12c:	2300      	movs	r3, #0
 800b12e:	9303      	str	r3, [sp, #12]
 800b130:	88fb      	ldrh	r3, [r7, #6]
 800b132:	9302      	str	r3, [sp, #8]
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	9301      	str	r3, [sp, #4]
 800b138:	2301      	movs	r3, #1
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	2302      	movs	r3, #2
 800b13e:	2201      	movs	r2, #1
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f002 fd60 	bl	800dc06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af04      	add	r7, sp, #16
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	4608      	mov	r0, r1
 800b15a:	4611      	mov	r1, r2
 800b15c:	461a      	mov	r2, r3
 800b15e:	4603      	mov	r3, r0
 800b160:	70fb      	strb	r3, [r7, #3]
 800b162:	460b      	mov	r3, r1
 800b164:	70bb      	strb	r3, [r7, #2]
 800b166:	4613      	mov	r3, r2
 800b168:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b16a:	7878      	ldrb	r0, [r7, #1]
 800b16c:	78ba      	ldrb	r2, [r7, #2]
 800b16e:	78f9      	ldrb	r1, [r7, #3]
 800b170:	8b3b      	ldrh	r3, [r7, #24]
 800b172:	9302      	str	r3, [sp, #8]
 800b174:	7d3b      	ldrb	r3, [r7, #20]
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	7c3b      	ldrb	r3, [r7, #16]
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	4603      	mov	r3, r0
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f002 fcf3 	bl	800db6a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	460b      	mov	r3, r1
 800b198:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b19a:	78fb      	ldrb	r3, [r7, #3]
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f002 fd12 	bl	800dbc8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f836 	bl	800b22c <USBH_GetFreePipe>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b1c4:	89fb      	ldrh	r3, [r7, #14]
 800b1c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d00a      	beq.n	800b1e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b1ce:	78fa      	ldrb	r2, [r7, #3]
 800b1d0:	89fb      	ldrh	r3, [r7, #14]
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1da:	6879      	ldr	r1, [r7, #4]
 800b1dc:	33e0      	adds	r3, #224	; 0xe0
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	440b      	add	r3, r1
 800b1e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b1e4:	89fb      	ldrh	r3, [r7, #14]
 800b1e6:	b2db      	uxtb	r3, r3
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b1fc:	78fb      	ldrb	r3, [r7, #3]
 800b1fe:	2b0f      	cmp	r3, #15
 800b200:	d80d      	bhi.n	800b21e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b202:	78fb      	ldrb	r3, [r7, #3]
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	33e0      	adds	r3, #224	; 0xe0
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	78fb      	ldrb	r3, [r7, #3]
 800b210:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b214:	6879      	ldr	r1, [r7, #4]
 800b216:	33e0      	adds	r3, #224	; 0xe0
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	440b      	add	r3, r1
 800b21c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b234:	2300      	movs	r3, #0
 800b236:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b238:	2300      	movs	r3, #0
 800b23a:	73fb      	strb	r3, [r7, #15]
 800b23c:	e00f      	b.n	800b25e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	33e0      	adds	r3, #224	; 0xe0
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d102      	bne.n	800b258 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	b29b      	uxth	r3, r3
 800b256:	e007      	b.n	800b268 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b258:	7bfb      	ldrb	r3, [r7, #15]
 800b25a:	3301      	adds	r3, #1
 800b25c:	73fb      	strb	r3, [r7, #15]
 800b25e:	7bfb      	ldrb	r3, [r7, #15]
 800b260:	2b0f      	cmp	r3, #15
 800b262:	d9ec      	bls.n	800b23e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b264:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b27e:	2300      	movs	r3, #0
 800b280:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b286:	2b84      	cmp	r3, #132	; 0x84
 800b288:	d005      	beq.n	800b296 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b28a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	4413      	add	r3, r2
 800b292:	3303      	adds	r3, #3
 800b294:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b296:	68fb      	ldr	r3, [r7, #12]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2aa:	f3ef 8305 	mrs	r3, IPSR
 800b2ae:	607b      	str	r3, [r7, #4]
  return(result);
 800b2b0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	bf14      	ite	ne
 800b2b6:	2301      	movne	r3, #1
 800b2b8:	2300      	moveq	r3, #0
 800b2ba:	b2db      	uxtb	r3, r3
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b2cc:	f001 f90a 	bl	800c4e4 <vTaskStartScheduler>
  
  return osOK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2d8:	b089      	sub	sp, #36	; 0x24
 800b2da:	af04      	add	r7, sp, #16
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d020      	beq.n	800b32a <osThreadCreate+0x54>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d01c      	beq.n	800b32a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685c      	ldr	r4, [r3, #4]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681d      	ldr	r5, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	691e      	ldr	r6, [r3, #16]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff ffb6 	bl	800b274 <makeFreeRtosPriority>
 800b308:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b312:	9202      	str	r2, [sp, #8]
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	9100      	str	r1, [sp, #0]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	4632      	mov	r2, r6
 800b31c:	4629      	mov	r1, r5
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 ff0e 	bl	800c140 <xTaskCreateStatic>
 800b324:	4603      	mov	r3, r0
 800b326:	60fb      	str	r3, [r7, #12]
 800b328:	e01c      	b.n	800b364 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	685c      	ldr	r4, [r3, #4]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b336:	b29e      	uxth	r6, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff ff98 	bl	800b274 <makeFreeRtosPriority>
 800b344:	4602      	mov	r2, r0
 800b346:	f107 030c 	add.w	r3, r7, #12
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	9200      	str	r2, [sp, #0]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	4632      	mov	r2, r6
 800b352:	4629      	mov	r1, r5
 800b354:	4620      	mov	r0, r4
 800b356:	f000 ff50 	bl	800c1fa <xTaskCreate>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d001      	beq.n	800b364 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	e000      	b.n	800b366 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b364:	68fb      	ldr	r3, [r7, #12]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b36e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b084      	sub	sp, #16
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <osDelay+0x16>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	e000      	b.n	800b386 <osDelay+0x18>
 800b384:	2301      	movs	r3, #1
 800b386:	4618      	mov	r0, r3
 800b388:	f001 f878 	bl	800c47c <vTaskDelay>
  
  return osOK;
 800b38c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b396:	b590      	push	{r4, r7, lr}
 800b398:	b085      	sub	sp, #20
 800b39a:	af02      	add	r7, sp, #8
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d011      	beq.n	800b3cc <osMessageCreate+0x36>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00d      	beq.n	800b3cc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6818      	ldr	r0, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6859      	ldr	r1, [r3, #4]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	2400      	movs	r4, #0
 800b3c2:	9400      	str	r4, [sp, #0]
 800b3c4:	f000 f9e0 	bl	800b788 <xQueueGenericCreateStatic>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	e008      	b.n	800b3de <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6818      	ldr	r0, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	f000 fa4e 	bl	800b878 <xQueueGenericCreate>
 800b3dc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd90      	pop	{r4, r7, pc}
	...

0800b3e8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <osMessagePut+0x1e>
    ticks = 1;
 800b402:	2301      	movs	r3, #1
 800b404:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b406:	f7ff ff4d 	bl	800b2a4 <inHandlerMode>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d018      	beq.n	800b442 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b410:	f107 0210 	add.w	r2, r7, #16
 800b414:	f107 0108 	add.w	r1, r7, #8
 800b418:	2300      	movs	r3, #0
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 fb84 	bl	800bb28 <xQueueGenericSendFromISR>
 800b420:	4603      	mov	r3, r0
 800b422:	2b01      	cmp	r3, #1
 800b424:	d001      	beq.n	800b42a <osMessagePut+0x42>
      return osErrorOS;
 800b426:	23ff      	movs	r3, #255	; 0xff
 800b428:	e018      	b.n	800b45c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d014      	beq.n	800b45a <osMessagePut+0x72>
 800b430:	4b0c      	ldr	r3, [pc, #48]	; (800b464 <osMessagePut+0x7c>)
 800b432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	e00b      	b.n	800b45a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b442:	f107 0108 	add.w	r1, r7, #8
 800b446:	2300      	movs	r3, #0
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f000 fa6e 	bl	800b92c <xQueueGenericSend>
 800b450:	4603      	mov	r3, r0
 800b452:	2b01      	cmp	r3, #1
 800b454:	d001      	beq.n	800b45a <osMessagePut+0x72>
      return osErrorOS;
 800b456:	23ff      	movs	r3, #255	; 0xff
 800b458:	e000      	b.n	800b45c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b468:	b590      	push	{r4, r7, lr}
 800b46a:	b08b      	sub	sp, #44	; 0x2c
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10a      	bne.n	800b498 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b482:	2380      	movs	r3, #128	; 0x80
 800b484:	617b      	str	r3, [r7, #20]
    return event;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	461c      	mov	r4, r3
 800b48a:	f107 0314 	add.w	r3, r7, #20
 800b48e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b496:	e054      	b.n	800b542 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b498:	2300      	movs	r3, #0
 800b49a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a6:	d103      	bne.n	800b4b0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ae:	e009      	b.n	800b4c4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d006      	beq.n	800b4c4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <osMessageGet+0x5c>
      ticks = 1;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b4c4:	f7ff feee 	bl	800b2a4 <inHandlerMode>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d01c      	beq.n	800b508 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b4ce:	f107 0220 	add.w	r2, r7, #32
 800b4d2:	f107 0314 	add.w	r3, r7, #20
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	68b8      	ldr	r0, [r7, #8]
 800b4dc:	f000 fca0 	bl	800be20 <xQueueReceiveFromISR>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d102      	bne.n	800b4ec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b4e6:	2310      	movs	r3, #16
 800b4e8:	617b      	str	r3, [r7, #20]
 800b4ea:	e001      	b.n	800b4f0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b4f0:	6a3b      	ldr	r3, [r7, #32]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d01d      	beq.n	800b532 <osMessageGet+0xca>
 800b4f6:	4b15      	ldr	r3, [pc, #84]	; (800b54c <osMessageGet+0xe4>)
 800b4f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4fc:	601a      	str	r2, [r3, #0]
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	e014      	b.n	800b532 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b508:	f107 0314 	add.w	r3, r7, #20
 800b50c:	3304      	adds	r3, #4
 800b50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b510:	4619      	mov	r1, r3
 800b512:	68b8      	ldr	r0, [r7, #8]
 800b514:	f000 fba4 	bl	800bc60 <xQueueReceive>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d102      	bne.n	800b524 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b51e:	2310      	movs	r3, #16
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	e006      	b.n	800b532 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b526:	2b00      	cmp	r3, #0
 800b528:	d101      	bne.n	800b52e <osMessageGet+0xc6>
 800b52a:	2300      	movs	r3, #0
 800b52c:	e000      	b.n	800b530 <osMessageGet+0xc8>
 800b52e:	2340      	movs	r3, #64	; 0x40
 800b530:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	461c      	mov	r4, r3
 800b536:	f107 0314 	add.w	r3, r7, #20
 800b53a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b53e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	372c      	adds	r7, #44	; 0x2c
 800b546:	46bd      	mov	sp, r7
 800b548:	bd90      	pop	{r4, r7, pc}
 800b54a:	bf00      	nop
 800b54c:	e000ed04 	.word	0xe000ed04

0800b550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f103 0208 	add.w	r2, r3, #8
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f04f 32ff 	mov.w	r2, #4294967295
 800b568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f103 0208 	add.w	r2, r3, #8
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f103 0208 	add.w	r2, r3, #8
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b59e:	bf00      	nop
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b085      	sub	sp, #20
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	689a      	ldr	r2, [r3, #8]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	601a      	str	r2, [r3, #0]
}
 800b5e6:	bf00      	nop
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b085      	sub	sp, #20
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b608:	d103      	bne.n	800b612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	e00c      	b.n	800b62c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3308      	adds	r3, #8
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	e002      	b.n	800b620 <vListInsert+0x2e>
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	60fb      	str	r3, [r7, #12]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d2f6      	bcs.n	800b61a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	685a      	ldr	r2, [r3, #4]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	601a      	str	r2, [r3, #0]
}
 800b658:	bf00      	nop
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	6892      	ldr	r2, [r2, #8]
 800b67a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	6852      	ldr	r2, [r2, #4]
 800b684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d103      	bne.n	800b698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	689a      	ldr	r2, [r3, #8]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	1e5a      	subs	r2, r3, #1
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10a      	bne.n	800b6e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b6de:	bf00      	nop
 800b6e0:	e7fe      	b.n	800b6e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b6e2:	f001 fd57 	bl	800d194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ee:	68f9      	ldr	r1, [r7, #12]
 800b6f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6f2:	fb01 f303 	mul.w	r3, r1, r3
 800b6f6:	441a      	add	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b712:	3b01      	subs	r3, #1
 800b714:	68f9      	ldr	r1, [r7, #12]
 800b716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b718:	fb01 f303 	mul.w	r3, r1, r3
 800b71c:	441a      	add	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	22ff      	movs	r2, #255	; 0xff
 800b726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	22ff      	movs	r2, #255	; 0xff
 800b72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d114      	bne.n	800b762 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d01a      	beq.n	800b776 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	3310      	adds	r3, #16
 800b744:	4618      	mov	r0, r3
 800b746:	f001 f933 	bl	800c9b0 <xTaskRemoveFromEventList>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d012      	beq.n	800b776 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b750:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <xQueueGenericReset+0xcc>)
 800b752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	e009      	b.n	800b776 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	3310      	adds	r3, #16
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff fef2 	bl	800b550 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	3324      	adds	r3, #36	; 0x24
 800b770:	4618      	mov	r0, r3
 800b772:	f7ff feed 	bl	800b550 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b776:	f001 fd3d 	bl	800d1f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b77a:	2301      	movs	r3, #1
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	e000ed04 	.word	0xe000ed04

0800b788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08e      	sub	sp, #56	; 0x38
 800b78c:	af02      	add	r7, sp, #8
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10a      	bne.n	800b7ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7ca:	bf00      	nop
 800b7cc:	e7fe      	b.n	800b7cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <xQueueGenericCreateStatic+0x52>
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <xQueueGenericCreateStatic+0x56>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e000      	b.n	800b7e0 <xQueueGenericCreateStatic+0x58>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	623b      	str	r3, [r7, #32]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d102      	bne.n	800b806 <xQueueGenericCreateStatic+0x7e>
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <xQueueGenericCreateStatic+0x82>
 800b806:	2301      	movs	r3, #1
 800b808:	e000      	b.n	800b80c <xQueueGenericCreateStatic+0x84>
 800b80a:	2300      	movs	r3, #0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10a      	bne.n	800b826 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	61fb      	str	r3, [r7, #28]
}
 800b822:	bf00      	nop
 800b824:	e7fe      	b.n	800b824 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b826:	2348      	movs	r3, #72	; 0x48
 800b828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b48      	cmp	r3, #72	; 0x48
 800b82e:	d00a      	beq.n	800b846 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	61bb      	str	r3, [r7, #24]
}
 800b842:	bf00      	nop
 800b844:	e7fe      	b.n	800b844 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b846:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00d      	beq.n	800b86e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	2201      	movs	r2, #1
 800b856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b85a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	4613      	mov	r3, r2
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	68b9      	ldr	r1, [r7, #8]
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 f83f 	bl	800b8ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b870:	4618      	mov	r0, r3
 800b872:	3730      	adds	r7, #48	; 0x30
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08a      	sub	sp, #40	; 0x28
 800b87c:	af02      	add	r7, sp, #8
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	4613      	mov	r3, r2
 800b884:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10a      	bne.n	800b8a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	613b      	str	r3, [r7, #16]
}
 800b89e:	bf00      	nop
 800b8a0:	e7fe      	b.n	800b8a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	fb02 f303 	mul.w	r3, r2, r3
 800b8aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	3348      	adds	r3, #72	; 0x48
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f001 fd91 	bl	800d3d8 <pvPortMalloc>
 800b8b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d011      	beq.n	800b8e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	3348      	adds	r3, #72	; 0x48
 800b8c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8d0:	79fa      	ldrb	r2, [r7, #7]
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f805 	bl	800b8ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8e2:	69bb      	ldr	r3, [r7, #24]
	}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3720      	adds	r7, #32
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
 800b8f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d103      	bne.n	800b908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	69ba      	ldr	r2, [r7, #24]
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	e002      	b.n	800b90e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b91a:	2101      	movs	r1, #1
 800b91c:	69b8      	ldr	r0, [r7, #24]
 800b91e:	f7ff fecb 	bl	800b6b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b922:	bf00      	nop
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08e      	sub	sp, #56	; 0x38
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b93a:	2300      	movs	r3, #0
 800b93c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xQueueGenericSend+0x32>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d103      	bne.n	800b96c <xQueueGenericSend+0x40>
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d101      	bne.n	800b970 <xQueueGenericSend+0x44>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e000      	b.n	800b972 <xQueueGenericSend+0x46>
 800b970:	2300      	movs	r3, #0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <xQueueGenericSend+0x60>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b988:	bf00      	nop
 800b98a:	e7fe      	b.n	800b98a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d103      	bne.n	800b99a <xQueueGenericSend+0x6e>
 800b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b996:	2b01      	cmp	r3, #1
 800b998:	d101      	bne.n	800b99e <xQueueGenericSend+0x72>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e000      	b.n	800b9a0 <xQueueGenericSend+0x74>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10a      	bne.n	800b9ba <xQueueGenericSend+0x8e>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	623b      	str	r3, [r7, #32]
}
 800b9b6:	bf00      	nop
 800b9b8:	e7fe      	b.n	800b9b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9ba:	f001 f9b7 	bl	800cd2c <xTaskGetSchedulerState>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <xQueueGenericSend+0x9e>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <xQueueGenericSend+0xa2>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <xQueueGenericSend+0xa4>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10a      	bne.n	800b9ea <xQueueGenericSend+0xbe>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	61fb      	str	r3, [r7, #28]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ea:	f001 fbd3 	bl	800d194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d302      	bcc.n	800ba00 <xQueueGenericSend+0xd4>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d129      	bne.n	800ba54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba06:	f000 fa8b 	bl	800bf20 <prvCopyDataToQueue>
 800ba0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d010      	beq.n	800ba36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	3324      	adds	r3, #36	; 0x24
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 ffc9 	bl	800c9b0 <xTaskRemoveFromEventList>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d013      	beq.n	800ba4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba24:	4b3f      	ldr	r3, [pc, #252]	; (800bb24 <xQueueGenericSend+0x1f8>)
 800ba26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	e00a      	b.n	800ba4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d007      	beq.n	800ba4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba3c:	4b39      	ldr	r3, [pc, #228]	; (800bb24 <xQueueGenericSend+0x1f8>)
 800ba3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba4c:	f001 fbd2 	bl	800d1f4 <vPortExitCritical>
				return pdPASS;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e063      	b.n	800bb1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d103      	bne.n	800ba62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba5a:	f001 fbcb 	bl	800d1f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e05c      	b.n	800bb1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d106      	bne.n	800ba76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba68:	f107 0314 	add.w	r3, r7, #20
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f001 f801 	bl	800ca74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba72:	2301      	movs	r3, #1
 800ba74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba76:	f001 fbbd 	bl	800d1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba7a:	f000 fd93 	bl	800c5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba7e:	f001 fb89 	bl	800d194 <vPortEnterCritical>
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba88:	b25b      	sxtb	r3, r3
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8e:	d103      	bne.n	800ba98 <xQueueGenericSend+0x16c>
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba9e:	b25b      	sxtb	r3, r3
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa4:	d103      	bne.n	800baae <xQueueGenericSend+0x182>
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baae:	f001 fba1 	bl	800d1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bab2:	1d3a      	adds	r2, r7, #4
 800bab4:	f107 0314 	add.w	r3, r7, #20
 800bab8:	4611      	mov	r1, r2
 800baba:	4618      	mov	r0, r3
 800babc:	f000 fff0 	bl	800caa0 <xTaskCheckForTimeOut>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d124      	bne.n	800bb10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bac8:	f000 fb22 	bl	800c110 <prvIsQueueFull>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d018      	beq.n	800bb04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	3310      	adds	r3, #16
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	4611      	mov	r1, r2
 800bada:	4618      	mov	r0, r3
 800badc:	f000 ff44 	bl	800c968 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae2:	f000 faad 	bl	800c040 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bae6:	f000 fd6b 	bl	800c5c0 <xTaskResumeAll>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	f47f af7c 	bne.w	800b9ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800baf2:	4b0c      	ldr	r3, [pc, #48]	; (800bb24 <xQueueGenericSend+0x1f8>)
 800baf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	e772      	b.n	800b9ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb06:	f000 fa9b 	bl	800c040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb0a:	f000 fd59 	bl	800c5c0 <xTaskResumeAll>
 800bb0e:	e76c      	b.n	800b9ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb12:	f000 fa95 	bl	800c040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb16:	f000 fd53 	bl	800c5c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3738      	adds	r7, #56	; 0x38
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	e000ed04 	.word	0xe000ed04

0800bb28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b090      	sub	sp, #64	; 0x40
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
 800bb34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d103      	bne.n	800bb64 <xQueueGenericSendFromISR+0x3c>
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d101      	bne.n	800bb68 <xQueueGenericSendFromISR+0x40>
 800bb64:	2301      	movs	r3, #1
 800bb66:	e000      	b.n	800bb6a <xQueueGenericSendFromISR+0x42>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d103      	bne.n	800bb92 <xQueueGenericSendFromISR+0x6a>
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d101      	bne.n	800bb96 <xQueueGenericSendFromISR+0x6e>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e000      	b.n	800bb98 <xQueueGenericSendFromISR+0x70>
 800bb96:	2300      	movs	r3, #0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	623b      	str	r3, [r7, #32]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbb2:	f001 fbd1 	bl	800d358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bbb6:	f3ef 8211 	mrs	r2, BASEPRI
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	61fa      	str	r2, [r7, #28]
 800bbcc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbd0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d302      	bcc.n	800bbe4 <xQueueGenericSendFromISR+0xbc>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d12f      	bne.n	800bc44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	68b9      	ldr	r1, [r7, #8]
 800bbf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbfa:	f000 f991 	bl	800bf20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbfe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc06:	d112      	bne.n	800bc2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d016      	beq.n	800bc3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	3324      	adds	r3, #36	; 0x24
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 fecb 	bl	800c9b0 <xTaskRemoveFromEventList>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00e      	beq.n	800bc3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00b      	beq.n	800bc3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	e007      	b.n	800bc3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc32:	3301      	adds	r3, #1
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	b25a      	sxtb	r2, r3
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bc42:	e001      	b.n	800bc48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3740      	adds	r7, #64	; 0x40
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
	...

0800bc60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08c      	sub	sp, #48	; 0x30
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10a      	bne.n	800bc90 <xQueueReceive+0x30>
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	623b      	str	r3, [r7, #32]
}
 800bc8c:	bf00      	nop
 800bc8e:	e7fe      	b.n	800bc8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d103      	bne.n	800bc9e <xQueueReceive+0x3e>
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <xQueueReceive+0x42>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e000      	b.n	800bca4 <xQueueReceive+0x44>
 800bca2:	2300      	movs	r3, #0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10a      	bne.n	800bcbe <xQueueReceive+0x5e>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	61fb      	str	r3, [r7, #28]
}
 800bcba:	bf00      	nop
 800bcbc:	e7fe      	b.n	800bcbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcbe:	f001 f835 	bl	800cd2c <xTaskGetSchedulerState>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d102      	bne.n	800bcce <xQueueReceive+0x6e>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d101      	bne.n	800bcd2 <xQueueReceive+0x72>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e000      	b.n	800bcd4 <xQueueReceive+0x74>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10a      	bne.n	800bcee <xQueueReceive+0x8e>
	__asm volatile
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	61bb      	str	r3, [r7, #24]
}
 800bcea:	bf00      	nop
 800bcec:	e7fe      	b.n	800bcec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcee:	f001 fa51 	bl	800d194 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d01f      	beq.n	800bd3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcfe:	68b9      	ldr	r1, [r7, #8]
 800bd00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd02:	f000 f977 	bl	800bff4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	1e5a      	subs	r2, r3, #1
 800bd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00f      	beq.n	800bd36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	3310      	adds	r3, #16
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 fe48 	bl	800c9b0 <xTaskRemoveFromEventList>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d007      	beq.n	800bd36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd26:	4b3d      	ldr	r3, [pc, #244]	; (800be1c <xQueueReceive+0x1bc>)
 800bd28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd36:	f001 fa5d 	bl	800d1f4 <vPortExitCritical>
				return pdPASS;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e069      	b.n	800be12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d103      	bne.n	800bd4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd44:	f001 fa56 	bl	800d1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	e062      	b.n	800be12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d106      	bne.n	800bd60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd52:	f107 0310 	add.w	r3, r7, #16
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 fe8c 	bl	800ca74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd60:	f001 fa48 	bl	800d1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd64:	f000 fc1e 	bl	800c5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd68:	f001 fa14 	bl	800d194 <vPortEnterCritical>
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd72:	b25b      	sxtb	r3, r3
 800bd74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd78:	d103      	bne.n	800bd82 <xQueueReceive+0x122>
 800bd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd88:	b25b      	sxtb	r3, r3
 800bd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8e:	d103      	bne.n	800bd98 <xQueueReceive+0x138>
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd98:	f001 fa2c 	bl	800d1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd9c:	1d3a      	adds	r2, r7, #4
 800bd9e:	f107 0310 	add.w	r3, r7, #16
 800bda2:	4611      	mov	r1, r2
 800bda4:	4618      	mov	r0, r3
 800bda6:	f000 fe7b 	bl	800caa0 <xTaskCheckForTimeOut>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d123      	bne.n	800bdf8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb2:	f000 f997 	bl	800c0e4 <prvIsQueueEmpty>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d017      	beq.n	800bdec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	3324      	adds	r3, #36	; 0x24
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 fdcf 	bl	800c968 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdcc:	f000 f938 	bl	800c040 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdd0:	f000 fbf6 	bl	800c5c0 <xTaskResumeAll>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d189      	bne.n	800bcee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bdda:	4b10      	ldr	r3, [pc, #64]	; (800be1c <xQueueReceive+0x1bc>)
 800bddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	e780      	b.n	800bcee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bdec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdee:	f000 f927 	bl	800c040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdf2:	f000 fbe5 	bl	800c5c0 <xTaskResumeAll>
 800bdf6:	e77a      	b.n	800bcee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bdf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdfa:	f000 f921 	bl	800c040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdfe:	f000 fbdf 	bl	800c5c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be04:	f000 f96e 	bl	800c0e4 <prvIsQueueEmpty>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f43f af6f 	beq.w	800bcee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be12:	4618      	mov	r0, r3
 800be14:	3730      	adds	r7, #48	; 0x30
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	e000ed04 	.word	0xe000ed04

0800be20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	; 0x38
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10a      	bne.n	800be4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	623b      	str	r3, [r7, #32]
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d103      	bne.n	800be5a <xQueueReceiveFromISR+0x3a>
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be56:	2b00      	cmp	r3, #0
 800be58:	d101      	bne.n	800be5e <xQueueReceiveFromISR+0x3e>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e000      	b.n	800be60 <xQueueReceiveFromISR+0x40>
 800be5e:	2300      	movs	r3, #0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10a      	bne.n	800be7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	61fb      	str	r3, [r7, #28]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be7a:	f001 fa6d 	bl	800d358 <vPortValidateInterruptPriority>
	__asm volatile
 800be7e:	f3ef 8211 	mrs	r2, BASEPRI
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	61ba      	str	r2, [r7, #24]
 800be94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800be96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d02f      	beq.n	800bf06 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800beac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800beb0:	68b9      	ldr	r1, [r7, #8]
 800beb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beb4:	f000 f89e 	bl	800bff4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	1e5a      	subs	r2, r3, #1
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec8:	d112      	bne.n	800bef0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d016      	beq.n	800bf00 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	3310      	adds	r3, #16
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 fd6a 	bl	800c9b0 <xTaskRemoveFromEventList>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00e      	beq.n	800bf00 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00b      	beq.n	800bf00 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	e007      	b.n	800bf00 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bef4:	3301      	adds	r3, #1
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	b25a      	sxtb	r2, r3
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bf00:	2301      	movs	r3, #1
 800bf02:	637b      	str	r3, [r7, #52]	; 0x34
 800bf04:	e001      	b.n	800bf0a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bf06:	2300      	movs	r3, #0
 800bf08:	637b      	str	r3, [r7, #52]	; 0x34
 800bf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f383 8811 	msr	BASEPRI, r3
}
 800bf14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3738      	adds	r7, #56	; 0x38
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10d      	bne.n	800bf5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d14d      	bne.n	800bfe2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 ff0c 	bl	800cd68 <xTaskPriorityDisinherit>
 800bf50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	609a      	str	r2, [r3, #8]
 800bf58:	e043      	b.n	800bfe2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d119      	bne.n	800bf94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6858      	ldr	r0, [r3, #4]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf68:	461a      	mov	r2, r3
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	f001 ff64 	bl	800de38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf78:	441a      	add	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d32b      	bcc.n	800bfe2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	605a      	str	r2, [r3, #4]
 800bf92:	e026      	b.n	800bfe2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	68d8      	ldr	r0, [r3, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	68b9      	ldr	r1, [r7, #8]
 800bfa0:	f001 ff4a 	bl	800de38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68da      	ldr	r2, [r3, #12]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfac:	425b      	negs	r3, r3
 800bfae:	441a      	add	r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d207      	bcs.n	800bfd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	689a      	ldr	r2, [r3, #8]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc8:	425b      	negs	r3, r3
 800bfca:	441a      	add	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d105      	bne.n	800bfe2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfea:	697b      	ldr	r3, [r7, #20]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3718      	adds	r7, #24
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c002:	2b00      	cmp	r3, #0
 800c004:	d018      	beq.n	800c038 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68da      	ldr	r2, [r3, #12]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00e:	441a      	add	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68da      	ldr	r2, [r3, #12]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d303      	bcc.n	800c028 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68d9      	ldr	r1, [r3, #12]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c030:	461a      	mov	r2, r3
 800c032:	6838      	ldr	r0, [r7, #0]
 800c034:	f001 ff00 	bl	800de38 <memcpy>
	}
}
 800c038:	bf00      	nop
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c048:	f001 f8a4 	bl	800d194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c052:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c054:	e011      	b.n	800c07a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d012      	beq.n	800c084 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3324      	adds	r3, #36	; 0x24
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fca4 	bl	800c9b0 <xTaskRemoveFromEventList>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c06e:	f000 fd79 	bl	800cb64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c072:	7bfb      	ldrb	r3, [r7, #15]
 800c074:	3b01      	subs	r3, #1
 800c076:	b2db      	uxtb	r3, r3
 800c078:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dce9      	bgt.n	800c056 <prvUnlockQueue+0x16>
 800c082:	e000      	b.n	800c086 <prvUnlockQueue+0x46>
					break;
 800c084:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	22ff      	movs	r2, #255	; 0xff
 800c08a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c08e:	f001 f8b1 	bl	800d1f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c092:	f001 f87f 	bl	800d194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c09c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c09e:	e011      	b.n	800c0c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d012      	beq.n	800c0ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3310      	adds	r3, #16
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f000 fc7f 	bl	800c9b0 <xTaskRemoveFromEventList>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d001      	beq.n	800c0bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0b8:	f000 fd54 	bl	800cb64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	dce9      	bgt.n	800c0a0 <prvUnlockQueue+0x60>
 800c0cc:	e000      	b.n	800c0d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	22ff      	movs	r2, #255	; 0xff
 800c0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0d8:	f001 f88c 	bl	800d1f4 <vPortExitCritical>
}
 800c0dc:	bf00      	nop
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0ec:	f001 f852 	bl	800d194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d102      	bne.n	800c0fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	e001      	b.n	800c102 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c102:	f001 f877 	bl	800d1f4 <vPortExitCritical>

	return xReturn;
 800c106:	68fb      	ldr	r3, [r7, #12]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c118:	f001 f83c 	bl	800d194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c124:	429a      	cmp	r2, r3
 800c126:	d102      	bne.n	800c12e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c128:	2301      	movs	r3, #1
 800c12a:	60fb      	str	r3, [r7, #12]
 800c12c:	e001      	b.n	800c132 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c12e:	2300      	movs	r3, #0
 800c130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c132:	f001 f85f 	bl	800d1f4 <vPortExitCritical>

	return xReturn;
 800c136:	68fb      	ldr	r3, [r7, #12]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c140:	b580      	push	{r7, lr}
 800c142:	b08e      	sub	sp, #56	; 0x38
 800c144:	af04      	add	r7, sp, #16
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10a      	bne.n	800c16a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	623b      	str	r3, [r7, #32]
}
 800c166:	bf00      	nop
 800c168:	e7fe      	b.n	800c168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <xTaskCreateStatic+0x46>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	61fb      	str	r3, [r7, #28]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c186:	2358      	movs	r3, #88	; 0x58
 800c188:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b58      	cmp	r3, #88	; 0x58
 800c18e:	d00a      	beq.n	800c1a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	61bb      	str	r3, [r7, #24]
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d01e      	beq.n	800c1ec <xTaskCreateStatic+0xac>
 800c1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d01b      	beq.n	800c1ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	9303      	str	r3, [sp, #12]
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	9302      	str	r3, [sp, #8]
 800c1ce:	f107 0314 	add.w	r3, r7, #20
 800c1d2:	9301      	str	r3, [sp, #4]
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	68b9      	ldr	r1, [r7, #8]
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f000 f850 	bl	800c284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1e6:	f000 f8df 	bl	800c3a8 <prvAddNewTaskToReadyList>
 800c1ea:	e001      	b.n	800c1f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1f0:	697b      	ldr	r3, [r7, #20]
	}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3728      	adds	r7, #40	; 0x28
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b08c      	sub	sp, #48	; 0x30
 800c1fe:	af04      	add	r7, sp, #16
 800c200:	60f8      	str	r0, [r7, #12]
 800c202:	60b9      	str	r1, [r7, #8]
 800c204:	603b      	str	r3, [r7, #0]
 800c206:	4613      	mov	r3, r2
 800c208:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c20a:	88fb      	ldrh	r3, [r7, #6]
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4618      	mov	r0, r3
 800c210:	f001 f8e2 	bl	800d3d8 <pvPortMalloc>
 800c214:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00e      	beq.n	800c23a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c21c:	2058      	movs	r0, #88	; 0x58
 800c21e:	f001 f8db 	bl	800d3d8 <pvPortMalloc>
 800c222:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	631a      	str	r2, [r3, #48]	; 0x30
 800c230:	e005      	b.n	800c23e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c232:	6978      	ldr	r0, [r7, #20]
 800c234:	f001 f9a0 	bl	800d578 <vPortFree>
 800c238:	e001      	b.n	800c23e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d017      	beq.n	800c274 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c24c:	88fa      	ldrh	r2, [r7, #6]
 800c24e:	2300      	movs	r3, #0
 800c250:	9303      	str	r3, [sp, #12]
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	9302      	str	r3, [sp, #8]
 800c256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25c:	9300      	str	r3, [sp, #0]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	68b9      	ldr	r1, [r7, #8]
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 f80e 	bl	800c284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c268:	69f8      	ldr	r0, [r7, #28]
 800c26a:	f000 f89d 	bl	800c3a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c26e:	2301      	movs	r3, #1
 800c270:	61bb      	str	r3, [r7, #24]
 800c272:	e002      	b.n	800c27a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c274:	f04f 33ff 	mov.w	r3, #4294967295
 800c278:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c27a:	69bb      	ldr	r3, [r7, #24]
	}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3720      	adds	r7, #32
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c294:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	461a      	mov	r2, r3
 800c29c:	21a5      	movs	r1, #165	; 0xa5
 800c29e:	f001 fdd9 	bl	800de54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	f023 0307 	bic.w	r3, r3, #7
 800c2ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00a      	beq.n	800c2dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	617b      	str	r3, [r7, #20]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01f      	beq.n	800c322 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	61fb      	str	r3, [r7, #28]
 800c2e6:	e012      	b.n	800c30e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	7819      	ldrb	r1, [r3, #0]
 800c2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	3334      	adds	r3, #52	; 0x34
 800c2f8:	460a      	mov	r2, r1
 800c2fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	4413      	add	r3, r2
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d006      	beq.n	800c316 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	3301      	adds	r3, #1
 800c30c:	61fb      	str	r3, [r7, #28]
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	2b0f      	cmp	r3, #15
 800c312:	d9e9      	bls.n	800c2e8 <prvInitialiseNewTask+0x64>
 800c314:	e000      	b.n	800c318 <prvInitialiseNewTask+0x94>
			{
				break;
 800c316:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c320:	e003      	b.n	800c32a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32c:	2b06      	cmp	r3, #6
 800c32e:	d901      	bls.n	800c334 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c330:	2306      	movs	r3, #6
 800c332:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c338:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c33e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	2200      	movs	r2, #0
 800c344:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c348:	3304      	adds	r3, #4
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7ff f920 	bl	800b590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	3318      	adds	r3, #24
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff f91b 	bl	800b590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c35e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	f1c3 0207 	rsb	r2, r3, #7
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c36e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	2200      	movs	r2, #0
 800c374:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	2200      	movs	r2, #0
 800c37a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	68f9      	ldr	r1, [r7, #12]
 800c388:	69b8      	ldr	r0, [r7, #24]
 800c38a:	f000 fdd9 	bl	800cf40 <pxPortInitialiseStack>
 800c38e:	4602      	mov	r2, r0
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c39e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3a0:	bf00      	nop
 800c3a2:	3720      	adds	r7, #32
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3b0:	f000 fef0 	bl	800d194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c3b4:	4b2a      	ldr	r3, [pc, #168]	; (800c460 <prvAddNewTaskToReadyList+0xb8>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	4a29      	ldr	r2, [pc, #164]	; (800c460 <prvAddNewTaskToReadyList+0xb8>)
 800c3bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3be:	4b29      	ldr	r3, [pc, #164]	; (800c464 <prvAddNewTaskToReadyList+0xbc>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d109      	bne.n	800c3da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3c6:	4a27      	ldr	r2, [pc, #156]	; (800c464 <prvAddNewTaskToReadyList+0xbc>)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3cc:	4b24      	ldr	r3, [pc, #144]	; (800c460 <prvAddNewTaskToReadyList+0xb8>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d110      	bne.n	800c3f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3d4:	f000 fbec 	bl	800cbb0 <prvInitialiseTaskLists>
 800c3d8:	e00d      	b.n	800c3f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3da:	4b23      	ldr	r3, [pc, #140]	; (800c468 <prvAddNewTaskToReadyList+0xc0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d109      	bne.n	800c3f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3e2:	4b20      	ldr	r3, [pc, #128]	; (800c464 <prvAddNewTaskToReadyList+0xbc>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d802      	bhi.n	800c3f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3f0:	4a1c      	ldr	r2, [pc, #112]	; (800c464 <prvAddNewTaskToReadyList+0xbc>)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3f6:	4b1d      	ldr	r3, [pc, #116]	; (800c46c <prvAddNewTaskToReadyList+0xc4>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	4a1b      	ldr	r2, [pc, #108]	; (800c46c <prvAddNewTaskToReadyList+0xc4>)
 800c3fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	2201      	movs	r2, #1
 800c406:	409a      	lsls	r2, r3
 800c408:	4b19      	ldr	r3, [pc, #100]	; (800c470 <prvAddNewTaskToReadyList+0xc8>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	4a18      	ldr	r2, [pc, #96]	; (800c470 <prvAddNewTaskToReadyList+0xc8>)
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c416:	4613      	mov	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4a15      	ldr	r2, [pc, #84]	; (800c474 <prvAddNewTaskToReadyList+0xcc>)
 800c420:	441a      	add	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	3304      	adds	r3, #4
 800c426:	4619      	mov	r1, r3
 800c428:	4610      	mov	r0, r2
 800c42a:	f7ff f8be 	bl	800b5aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c42e:	f000 fee1 	bl	800d1f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c432:	4b0d      	ldr	r3, [pc, #52]	; (800c468 <prvAddNewTaskToReadyList+0xc0>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00e      	beq.n	800c458 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c43a:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <prvAddNewTaskToReadyList+0xbc>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c444:	429a      	cmp	r2, r3
 800c446:	d207      	bcs.n	800c458 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c448:	4b0b      	ldr	r3, [pc, #44]	; (800c478 <prvAddNewTaskToReadyList+0xd0>)
 800c44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44e:	601a      	str	r2, [r3, #0]
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c458:	bf00      	nop
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	2000082c 	.word	0x2000082c
 800c464:	2000072c 	.word	0x2000072c
 800c468:	20000838 	.word	0x20000838
 800c46c:	20000848 	.word	0x20000848
 800c470:	20000834 	.word	0x20000834
 800c474:	20000730 	.word	0x20000730
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c484:	2300      	movs	r3, #0
 800c486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d017      	beq.n	800c4be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c48e:	4b13      	ldr	r3, [pc, #76]	; (800c4dc <vTaskDelay+0x60>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00a      	beq.n	800c4ac <vTaskDelay+0x30>
	__asm volatile
 800c496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49a:	f383 8811 	msr	BASEPRI, r3
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f3bf 8f4f 	dsb	sy
 800c4a6:	60bb      	str	r3, [r7, #8]
}
 800c4a8:	bf00      	nop
 800c4aa:	e7fe      	b.n	800c4aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c4ac:	f000 f87a 	bl	800c5a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fcde 	bl	800ce74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c4b8:	f000 f882 	bl	800c5c0 <xTaskResumeAll>
 800c4bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d107      	bne.n	800c4d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c4c4:	4b06      	ldr	r3, [pc, #24]	; (800c4e0 <vTaskDelay+0x64>)
 800c4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	20000854 	.word	0x20000854
 800c4e0:	e000ed04 	.word	0xe000ed04

0800c4e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08a      	sub	sp, #40	; 0x28
 800c4e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4f2:	463a      	mov	r2, r7
 800c4f4:	1d39      	adds	r1, r7, #4
 800c4f6:	f107 0308 	add.w	r3, r7, #8
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7f4 fd00 	bl	8000f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	9202      	str	r2, [sp, #8]
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	2300      	movs	r3, #0
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	2300      	movs	r3, #0
 800c510:	460a      	mov	r2, r1
 800c512:	491e      	ldr	r1, [pc, #120]	; (800c58c <vTaskStartScheduler+0xa8>)
 800c514:	481e      	ldr	r0, [pc, #120]	; (800c590 <vTaskStartScheduler+0xac>)
 800c516:	f7ff fe13 	bl	800c140 <xTaskCreateStatic>
 800c51a:	4603      	mov	r3, r0
 800c51c:	4a1d      	ldr	r2, [pc, #116]	; (800c594 <vTaskStartScheduler+0xb0>)
 800c51e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c520:	4b1c      	ldr	r3, [pc, #112]	; (800c594 <vTaskStartScheduler+0xb0>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c528:	2301      	movs	r3, #1
 800c52a:	617b      	str	r3, [r7, #20]
 800c52c:	e001      	b.n	800c532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c52e:	2300      	movs	r3, #0
 800c530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d116      	bne.n	800c566 <vTaskStartScheduler+0x82>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	613b      	str	r3, [r7, #16]
}
 800c54a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c54c:	4b12      	ldr	r3, [pc, #72]	; (800c598 <vTaskStartScheduler+0xb4>)
 800c54e:	f04f 32ff 	mov.w	r2, #4294967295
 800c552:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c554:	4b11      	ldr	r3, [pc, #68]	; (800c59c <vTaskStartScheduler+0xb8>)
 800c556:	2201      	movs	r2, #1
 800c558:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c55a:	4b11      	ldr	r3, [pc, #68]	; (800c5a0 <vTaskStartScheduler+0xbc>)
 800c55c:	2200      	movs	r2, #0
 800c55e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c560:	f000 fd76 	bl	800d050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c564:	e00e      	b.n	800c584 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56c:	d10a      	bne.n	800c584 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	60fb      	str	r3, [r7, #12]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <vTaskStartScheduler+0x9e>
}
 800c584:	bf00      	nop
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	08010b3c 	.word	0x08010b3c
 800c590:	0800cb7d 	.word	0x0800cb7d
 800c594:	20000850 	.word	0x20000850
 800c598:	2000084c 	.word	0x2000084c
 800c59c:	20000838 	.word	0x20000838
 800c5a0:	20000830 	.word	0x20000830

0800c5a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c5a8:	4b04      	ldr	r3, [pc, #16]	; (800c5bc <vTaskSuspendAll+0x18>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	4a03      	ldr	r2, [pc, #12]	; (800c5bc <vTaskSuspendAll+0x18>)
 800c5b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c5b2:	bf00      	nop
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	20000854 	.word	0x20000854

0800c5c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5ce:	4b41      	ldr	r3, [pc, #260]	; (800c6d4 <xTaskResumeAll+0x114>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10a      	bne.n	800c5ec <xTaskResumeAll+0x2c>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	603b      	str	r3, [r7, #0]
}
 800c5e8:	bf00      	nop
 800c5ea:	e7fe      	b.n	800c5ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5ec:	f000 fdd2 	bl	800d194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5f0:	4b38      	ldr	r3, [pc, #224]	; (800c6d4 <xTaskResumeAll+0x114>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	4a37      	ldr	r2, [pc, #220]	; (800c6d4 <xTaskResumeAll+0x114>)
 800c5f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5fa:	4b36      	ldr	r3, [pc, #216]	; (800c6d4 <xTaskResumeAll+0x114>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d161      	bne.n	800c6c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c602:	4b35      	ldr	r3, [pc, #212]	; (800c6d8 <xTaskResumeAll+0x118>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d05d      	beq.n	800c6c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c60a:	e02e      	b.n	800c66a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c60c:	4b33      	ldr	r3, [pc, #204]	; (800c6dc <xTaskResumeAll+0x11c>)
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	3318      	adds	r3, #24
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff f823 	bl	800b664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3304      	adds	r3, #4
 800c622:	4618      	mov	r0, r3
 800c624:	f7ff f81e 	bl	800b664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62c:	2201      	movs	r2, #1
 800c62e:	409a      	lsls	r2, r3
 800c630:	4b2b      	ldr	r3, [pc, #172]	; (800c6e0 <xTaskResumeAll+0x120>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4313      	orrs	r3, r2
 800c636:	4a2a      	ldr	r2, [pc, #168]	; (800c6e0 <xTaskResumeAll+0x120>)
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63e:	4613      	mov	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4a27      	ldr	r2, [pc, #156]	; (800c6e4 <xTaskResumeAll+0x124>)
 800c648:	441a      	add	r2, r3
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	3304      	adds	r3, #4
 800c64e:	4619      	mov	r1, r3
 800c650:	4610      	mov	r0, r2
 800c652:	f7fe ffaa 	bl	800b5aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c65a:	4b23      	ldr	r3, [pc, #140]	; (800c6e8 <xTaskResumeAll+0x128>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c660:	429a      	cmp	r2, r3
 800c662:	d302      	bcc.n	800c66a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c664:	4b21      	ldr	r3, [pc, #132]	; (800c6ec <xTaskResumeAll+0x12c>)
 800c666:	2201      	movs	r2, #1
 800c668:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c66a:	4b1c      	ldr	r3, [pc, #112]	; (800c6dc <xTaskResumeAll+0x11c>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1cc      	bne.n	800c60c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d001      	beq.n	800c67c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c678:	f000 fb38 	bl	800ccec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c67c:	4b1c      	ldr	r3, [pc, #112]	; (800c6f0 <xTaskResumeAll+0x130>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d010      	beq.n	800c6aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c688:	f000 f836 	bl	800c6f8 <xTaskIncrementTick>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c692:	4b16      	ldr	r3, [pc, #88]	; (800c6ec <xTaskResumeAll+0x12c>)
 800c694:	2201      	movs	r2, #1
 800c696:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	3b01      	subs	r3, #1
 800c69c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1f1      	bne.n	800c688 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c6a4:	4b12      	ldr	r3, [pc, #72]	; (800c6f0 <xTaskResumeAll+0x130>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6aa:	4b10      	ldr	r3, [pc, #64]	; (800c6ec <xTaskResumeAll+0x12c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d009      	beq.n	800c6c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6b6:	4b0f      	ldr	r3, [pc, #60]	; (800c6f4 <xTaskResumeAll+0x134>)
 800c6b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6c6:	f000 fd95 	bl	800d1f4 <vPortExitCritical>

	return xAlreadyYielded;
 800c6ca:	68bb      	ldr	r3, [r7, #8]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20000854 	.word	0x20000854
 800c6d8:	2000082c 	.word	0x2000082c
 800c6dc:	200007ec 	.word	0x200007ec
 800c6e0:	20000834 	.word	0x20000834
 800c6e4:	20000730 	.word	0x20000730
 800c6e8:	2000072c 	.word	0x2000072c
 800c6ec:	20000840 	.word	0x20000840
 800c6f0:	2000083c 	.word	0x2000083c
 800c6f4:	e000ed04 	.word	0xe000ed04

0800c6f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c6fe:	2300      	movs	r3, #0
 800c700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c702:	4b4e      	ldr	r3, [pc, #312]	; (800c83c <xTaskIncrementTick+0x144>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f040 808e 	bne.w	800c828 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c70c:	4b4c      	ldr	r3, [pc, #304]	; (800c840 <xTaskIncrementTick+0x148>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3301      	adds	r3, #1
 800c712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c714:	4a4a      	ldr	r2, [pc, #296]	; (800c840 <xTaskIncrementTick+0x148>)
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d120      	bne.n	800c762 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c720:	4b48      	ldr	r3, [pc, #288]	; (800c844 <xTaskIncrementTick+0x14c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00a      	beq.n	800c740 <xTaskIncrementTick+0x48>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	603b      	str	r3, [r7, #0]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <xTaskIncrementTick+0x46>
 800c740:	4b40      	ldr	r3, [pc, #256]	; (800c844 <xTaskIncrementTick+0x14c>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	60fb      	str	r3, [r7, #12]
 800c746:	4b40      	ldr	r3, [pc, #256]	; (800c848 <xTaskIncrementTick+0x150>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a3e      	ldr	r2, [pc, #248]	; (800c844 <xTaskIncrementTick+0x14c>)
 800c74c:	6013      	str	r3, [r2, #0]
 800c74e:	4a3e      	ldr	r2, [pc, #248]	; (800c848 <xTaskIncrementTick+0x150>)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6013      	str	r3, [r2, #0]
 800c754:	4b3d      	ldr	r3, [pc, #244]	; (800c84c <xTaskIncrementTick+0x154>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3301      	adds	r3, #1
 800c75a:	4a3c      	ldr	r2, [pc, #240]	; (800c84c <xTaskIncrementTick+0x154>)
 800c75c:	6013      	str	r3, [r2, #0]
 800c75e:	f000 fac5 	bl	800ccec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c762:	4b3b      	ldr	r3, [pc, #236]	; (800c850 <xTaskIncrementTick+0x158>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d348      	bcc.n	800c7fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c76c:	4b35      	ldr	r3, [pc, #212]	; (800c844 <xTaskIncrementTick+0x14c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d104      	bne.n	800c780 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c776:	4b36      	ldr	r3, [pc, #216]	; (800c850 <xTaskIncrementTick+0x158>)
 800c778:	f04f 32ff 	mov.w	r2, #4294967295
 800c77c:	601a      	str	r2, [r3, #0]
					break;
 800c77e:	e03e      	b.n	800c7fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c780:	4b30      	ldr	r3, [pc, #192]	; (800c844 <xTaskIncrementTick+0x14c>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c790:	693a      	ldr	r2, [r7, #16]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	429a      	cmp	r2, r3
 800c796:	d203      	bcs.n	800c7a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c798:	4a2d      	ldr	r2, [pc, #180]	; (800c850 <xTaskIncrementTick+0x158>)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c79e:	e02e      	b.n	800c7fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fe ff5d 	bl	800b664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d004      	beq.n	800c7bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	3318      	adds	r3, #24
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fe ff54 	bl	800b664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	409a      	lsls	r2, r3
 800c7c4:	4b23      	ldr	r3, [pc, #140]	; (800c854 <xTaskIncrementTick+0x15c>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	4a22      	ldr	r2, [pc, #136]	; (800c854 <xTaskIncrementTick+0x15c>)
 800c7cc:	6013      	str	r3, [r2, #0]
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4a1f      	ldr	r2, [pc, #124]	; (800c858 <xTaskIncrementTick+0x160>)
 800c7dc:	441a      	add	r2, r3
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	f7fe fee0 	bl	800b5aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ee:	4b1b      	ldr	r3, [pc, #108]	; (800c85c <xTaskIncrementTick+0x164>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d3b9      	bcc.n	800c76c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7fc:	e7b6      	b.n	800c76c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c7fe:	4b17      	ldr	r3, [pc, #92]	; (800c85c <xTaskIncrementTick+0x164>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c804:	4914      	ldr	r1, [pc, #80]	; (800c858 <xTaskIncrementTick+0x160>)
 800c806:	4613      	mov	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	440b      	add	r3, r1
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d901      	bls.n	800c81a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c816:	2301      	movs	r3, #1
 800c818:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c81a:	4b11      	ldr	r3, [pc, #68]	; (800c860 <xTaskIncrementTick+0x168>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d007      	beq.n	800c832 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c822:	2301      	movs	r3, #1
 800c824:	617b      	str	r3, [r7, #20]
 800c826:	e004      	b.n	800c832 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c828:	4b0e      	ldr	r3, [pc, #56]	; (800c864 <xTaskIncrementTick+0x16c>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3301      	adds	r3, #1
 800c82e:	4a0d      	ldr	r2, [pc, #52]	; (800c864 <xTaskIncrementTick+0x16c>)
 800c830:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c832:	697b      	ldr	r3, [r7, #20]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3718      	adds	r7, #24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	20000854 	.word	0x20000854
 800c840:	20000830 	.word	0x20000830
 800c844:	200007e4 	.word	0x200007e4
 800c848:	200007e8 	.word	0x200007e8
 800c84c:	20000844 	.word	0x20000844
 800c850:	2000084c 	.word	0x2000084c
 800c854:	20000834 	.word	0x20000834
 800c858:	20000730 	.word	0x20000730
 800c85c:	2000072c 	.word	0x2000072c
 800c860:	20000840 	.word	0x20000840
 800c864:	2000083c 	.word	0x2000083c

0800c868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b088      	sub	sp, #32
 800c86c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c86e:	4b39      	ldr	r3, [pc, #228]	; (800c954 <vTaskSwitchContext+0xec>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c876:	4b38      	ldr	r3, [pc, #224]	; (800c958 <vTaskSwitchContext+0xf0>)
 800c878:	2201      	movs	r2, #1
 800c87a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c87c:	e066      	b.n	800c94c <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800c87e:	4b36      	ldr	r3, [pc, #216]	; (800c958 <vTaskSwitchContext+0xf0>)
 800c880:	2200      	movs	r2, #0
 800c882:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c884:	4b35      	ldr	r3, [pc, #212]	; (800c95c <vTaskSwitchContext+0xf4>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88a:	61fb      	str	r3, [r7, #28]
 800c88c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c890:	61bb      	str	r3, [r7, #24]
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	69ba      	ldr	r2, [r7, #24]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d111      	bne.n	800c8c0 <vTaskSwitchContext+0x58>
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	3304      	adds	r3, #4
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	69ba      	ldr	r2, [r7, #24]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d10b      	bne.n	800c8c0 <vTaskSwitchContext+0x58>
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	3308      	adds	r3, #8
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	69ba      	ldr	r2, [r7, #24]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d105      	bne.n	800c8c0 <vTaskSwitchContext+0x58>
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	330c      	adds	r3, #12
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	69ba      	ldr	r2, [r7, #24]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d008      	beq.n	800c8d2 <vTaskSwitchContext+0x6a>
 800c8c0:	4b26      	ldr	r3, [pc, #152]	; (800c95c <vTaskSwitchContext+0xf4>)
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	4b25      	ldr	r3, [pc, #148]	; (800c95c <vTaskSwitchContext+0xf4>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3334      	adds	r3, #52	; 0x34
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	f7f4 fb04 	bl	8000eda <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8d2:	4b23      	ldr	r3, [pc, #140]	; (800c960 <vTaskSwitchContext+0xf8>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	fab3 f383 	clz	r3, r3
 800c8de:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c8e0:	7afb      	ldrb	r3, [r7, #11]
 800c8e2:	f1c3 031f 	rsb	r3, r3, #31
 800c8e6:	617b      	str	r3, [r7, #20]
 800c8e8:	491e      	ldr	r1, [pc, #120]	; (800c964 <vTaskSwitchContext+0xfc>)
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	440b      	add	r3, r1
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10a      	bne.n	800c912 <vTaskSwitchContext+0xaa>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	607b      	str	r3, [r7, #4]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <vTaskSwitchContext+0xa8>
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	4613      	mov	r3, r2
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4413      	add	r3, r2
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	4a11      	ldr	r2, [pc, #68]	; (800c964 <vTaskSwitchContext+0xfc>)
 800c91e:	4413      	add	r3, r2
 800c920:	613b      	str	r3, [r7, #16]
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	685a      	ldr	r2, [r3, #4]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	605a      	str	r2, [r3, #4]
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	685a      	ldr	r2, [r3, #4]
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	3308      	adds	r3, #8
 800c934:	429a      	cmp	r2, r3
 800c936:	d104      	bne.n	800c942 <vTaskSwitchContext+0xda>
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	685a      	ldr	r2, [r3, #4]
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	605a      	str	r2, [r3, #4]
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	4a04      	ldr	r2, [pc, #16]	; (800c95c <vTaskSwitchContext+0xf4>)
 800c94a:	6013      	str	r3, [r2, #0]
}
 800c94c:	bf00      	nop
 800c94e:	3720      	adds	r7, #32
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	20000854 	.word	0x20000854
 800c958:	20000840 	.word	0x20000840
 800c95c:	2000072c 	.word	0x2000072c
 800c960:	20000834 	.word	0x20000834
 800c964:	20000730 	.word	0x20000730

0800c968 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10a      	bne.n	800c98e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	60fb      	str	r3, [r7, #12]
}
 800c98a:	bf00      	nop
 800c98c:	e7fe      	b.n	800c98c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c98e:	4b07      	ldr	r3, [pc, #28]	; (800c9ac <vTaskPlaceOnEventList+0x44>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	3318      	adds	r3, #24
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7fe fe2b 	bl	800b5f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c99c:	2101      	movs	r1, #1
 800c99e:	6838      	ldr	r0, [r7, #0]
 800c9a0:	f000 fa68 	bl	800ce74 <prvAddCurrentTaskToDelayedList>
}
 800c9a4:	bf00      	nop
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	2000072c 	.word	0x2000072c

0800c9b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10a      	bne.n	800c9dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	60fb      	str	r3, [r7, #12]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	3318      	adds	r3, #24
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fe fe3f 	bl	800b664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9e6:	4b1d      	ldr	r3, [pc, #116]	; (800ca5c <xTaskRemoveFromEventList+0xac>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d11c      	bne.n	800ca28 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	3304      	adds	r3, #4
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fe fe36 	bl	800b664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	409a      	lsls	r2, r3
 800ca00:	4b17      	ldr	r3, [pc, #92]	; (800ca60 <xTaskRemoveFromEventList+0xb0>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	4a16      	ldr	r2, [pc, #88]	; (800ca60 <xTaskRemoveFromEventList+0xb0>)
 800ca08:	6013      	str	r3, [r2, #0]
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4a13      	ldr	r2, [pc, #76]	; (800ca64 <xTaskRemoveFromEventList+0xb4>)
 800ca18:	441a      	add	r2, r3
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	4619      	mov	r1, r3
 800ca20:	4610      	mov	r0, r2
 800ca22:	f7fe fdc2 	bl	800b5aa <vListInsertEnd>
 800ca26:	e005      	b.n	800ca34 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	3318      	adds	r3, #24
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	480e      	ldr	r0, [pc, #56]	; (800ca68 <xTaskRemoveFromEventList+0xb8>)
 800ca30:	f7fe fdbb 	bl	800b5aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca38:	4b0c      	ldr	r3, [pc, #48]	; (800ca6c <xTaskRemoveFromEventList+0xbc>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d905      	bls.n	800ca4e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca42:	2301      	movs	r3, #1
 800ca44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca46:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <xTaskRemoveFromEventList+0xc0>)
 800ca48:	2201      	movs	r2, #1
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	e001      	b.n	800ca52 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca52:	697b      	ldr	r3, [r7, #20]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	20000854 	.word	0x20000854
 800ca60:	20000834 	.word	0x20000834
 800ca64:	20000730 	.word	0x20000730
 800ca68:	200007ec 	.word	0x200007ec
 800ca6c:	2000072c 	.word	0x2000072c
 800ca70:	20000840 	.word	0x20000840

0800ca74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca7c:	4b06      	ldr	r3, [pc, #24]	; (800ca98 <vTaskInternalSetTimeOutState+0x24>)
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca84:	4b05      	ldr	r3, [pc, #20]	; (800ca9c <vTaskInternalSetTimeOutState+0x28>)
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	605a      	str	r2, [r3, #4]
}
 800ca8c:	bf00      	nop
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	20000844 	.word	0x20000844
 800ca9c:	20000830 	.word	0x20000830

0800caa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b088      	sub	sp, #32
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10a      	bne.n	800cac6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	613b      	str	r3, [r7, #16]
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10a      	bne.n	800cae2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	60fb      	str	r3, [r7, #12]
}
 800cade:	bf00      	nop
 800cae0:	e7fe      	b.n	800cae0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cae2:	f000 fb57 	bl	800d194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cae6:	4b1d      	ldr	r3, [pc, #116]	; (800cb5c <xTaskCheckForTimeOut+0xbc>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafe:	d102      	bne.n	800cb06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb00:	2300      	movs	r3, #0
 800cb02:	61fb      	str	r3, [r7, #28]
 800cb04:	e023      	b.n	800cb4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	4b15      	ldr	r3, [pc, #84]	; (800cb60 <xTaskCheckForTimeOut+0xc0>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d007      	beq.n	800cb22 <xTaskCheckForTimeOut+0x82>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	69ba      	ldr	r2, [r7, #24]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d302      	bcc.n	800cb22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	61fb      	str	r3, [r7, #28]
 800cb20:	e015      	b.n	800cb4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d20b      	bcs.n	800cb44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	1ad2      	subs	r2, r2, r3
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7ff ff9b 	bl	800ca74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	61fb      	str	r3, [r7, #28]
 800cb42:	e004      	b.n	800cb4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb4e:	f000 fb51 	bl	800d1f4 <vPortExitCritical>

	return xReturn;
 800cb52:	69fb      	ldr	r3, [r7, #28]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3720      	adds	r7, #32
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	20000830 	.word	0x20000830
 800cb60:	20000844 	.word	0x20000844

0800cb64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb64:	b480      	push	{r7}
 800cb66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb68:	4b03      	ldr	r3, [pc, #12]	; (800cb78 <vTaskMissedYield+0x14>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]
}
 800cb6e:	bf00      	nop
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr
 800cb78:	20000840 	.word	0x20000840

0800cb7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb84:	f000 f854 	bl	800cc30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb88:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <prvIdleTask+0x2c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d907      	bls.n	800cba0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800cb90:	4b06      	ldr	r3, [pc, #24]	; (800cbac <prvIdleTask+0x30>)
 800cb92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb96:	601a      	str	r2, [r3, #0]
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800cba0:	f7f4 f994 	bl	8000ecc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800cba4:	e7ee      	b.n	800cb84 <prvIdleTask+0x8>
 800cba6:	bf00      	nop
 800cba8:	20000730 	.word	0x20000730
 800cbac:	e000ed04 	.word	0xe000ed04

0800cbb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	607b      	str	r3, [r7, #4]
 800cbba:	e00c      	b.n	800cbd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	4a12      	ldr	r2, [pc, #72]	; (800cc10 <prvInitialiseTaskLists+0x60>)
 800cbc8:	4413      	add	r3, r2
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe fcc0 	bl	800b550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	607b      	str	r3, [r7, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b06      	cmp	r3, #6
 800cbda:	d9ef      	bls.n	800cbbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cbdc:	480d      	ldr	r0, [pc, #52]	; (800cc14 <prvInitialiseTaskLists+0x64>)
 800cbde:	f7fe fcb7 	bl	800b550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cbe2:	480d      	ldr	r0, [pc, #52]	; (800cc18 <prvInitialiseTaskLists+0x68>)
 800cbe4:	f7fe fcb4 	bl	800b550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cbe8:	480c      	ldr	r0, [pc, #48]	; (800cc1c <prvInitialiseTaskLists+0x6c>)
 800cbea:	f7fe fcb1 	bl	800b550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cbee:	480c      	ldr	r0, [pc, #48]	; (800cc20 <prvInitialiseTaskLists+0x70>)
 800cbf0:	f7fe fcae 	bl	800b550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cbf4:	480b      	ldr	r0, [pc, #44]	; (800cc24 <prvInitialiseTaskLists+0x74>)
 800cbf6:	f7fe fcab 	bl	800b550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cbfa:	4b0b      	ldr	r3, [pc, #44]	; (800cc28 <prvInitialiseTaskLists+0x78>)
 800cbfc:	4a05      	ldr	r2, [pc, #20]	; (800cc14 <prvInitialiseTaskLists+0x64>)
 800cbfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc00:	4b0a      	ldr	r3, [pc, #40]	; (800cc2c <prvInitialiseTaskLists+0x7c>)
 800cc02:	4a05      	ldr	r2, [pc, #20]	; (800cc18 <prvInitialiseTaskLists+0x68>)
 800cc04:	601a      	str	r2, [r3, #0]
}
 800cc06:	bf00      	nop
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000730 	.word	0x20000730
 800cc14:	200007bc 	.word	0x200007bc
 800cc18:	200007d0 	.word	0x200007d0
 800cc1c:	200007ec 	.word	0x200007ec
 800cc20:	20000800 	.word	0x20000800
 800cc24:	20000818 	.word	0x20000818
 800cc28:	200007e4 	.word	0x200007e4
 800cc2c:	200007e8 	.word	0x200007e8

0800cc30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc36:	e019      	b.n	800cc6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc38:	f000 faac 	bl	800d194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc3c:	4b10      	ldr	r3, [pc, #64]	; (800cc80 <prvCheckTasksWaitingTermination+0x50>)
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	3304      	adds	r3, #4
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fe fd0b 	bl	800b664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc4e:	4b0d      	ldr	r3, [pc, #52]	; (800cc84 <prvCheckTasksWaitingTermination+0x54>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	3b01      	subs	r3, #1
 800cc54:	4a0b      	ldr	r2, [pc, #44]	; (800cc84 <prvCheckTasksWaitingTermination+0x54>)
 800cc56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc58:	4b0b      	ldr	r3, [pc, #44]	; (800cc88 <prvCheckTasksWaitingTermination+0x58>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	4a0a      	ldr	r2, [pc, #40]	; (800cc88 <prvCheckTasksWaitingTermination+0x58>)
 800cc60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc62:	f000 fac7 	bl	800d1f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f810 	bl	800cc8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc6c:	4b06      	ldr	r3, [pc, #24]	; (800cc88 <prvCheckTasksWaitingTermination+0x58>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1e1      	bne.n	800cc38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20000800 	.word	0x20000800
 800cc84:	2000082c 	.word	0x2000082c
 800cc88:	20000814 	.word	0x20000814

0800cc8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d108      	bne.n	800ccb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 fc68 	bl	800d578 <vPortFree>
				vPortFree( pxTCB );
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fc65 	bl	800d578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ccae:	e018      	b.n	800cce2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d103      	bne.n	800ccc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fc5c 	bl	800d578 <vPortFree>
	}
 800ccc0:	e00f      	b.n	800cce2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d00a      	beq.n	800cce2 <prvDeleteTCB+0x56>
	__asm volatile
 800cccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd0:	f383 8811 	msr	BASEPRI, r3
 800ccd4:	f3bf 8f6f 	isb	sy
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	60fb      	str	r3, [r7, #12]
}
 800ccde:	bf00      	nop
 800cce0:	e7fe      	b.n	800cce0 <prvDeleteTCB+0x54>
	}
 800cce2:	bf00      	nop
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
	...

0800ccec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccf2:	4b0c      	ldr	r3, [pc, #48]	; (800cd24 <prvResetNextTaskUnblockTime+0x38>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d104      	bne.n	800cd06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ccfc:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <prvResetNextTaskUnblockTime+0x3c>)
 800ccfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cd02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd04:	e008      	b.n	800cd18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd06:	4b07      	ldr	r3, [pc, #28]	; (800cd24 <prvResetNextTaskUnblockTime+0x38>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	4a04      	ldr	r2, [pc, #16]	; (800cd28 <prvResetNextTaskUnblockTime+0x3c>)
 800cd16:	6013      	str	r3, [r2, #0]
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	200007e4 	.word	0x200007e4
 800cd28:	2000084c 	.word	0x2000084c

0800cd2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd32:	4b0b      	ldr	r3, [pc, #44]	; (800cd60 <xTaskGetSchedulerState+0x34>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d102      	bne.n	800cd40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	607b      	str	r3, [r7, #4]
 800cd3e:	e008      	b.n	800cd52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd40:	4b08      	ldr	r3, [pc, #32]	; (800cd64 <xTaskGetSchedulerState+0x38>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd48:	2302      	movs	r3, #2
 800cd4a:	607b      	str	r3, [r7, #4]
 800cd4c:	e001      	b.n	800cd52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd52:	687b      	ldr	r3, [r7, #4]
	}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	20000838 	.word	0x20000838
 800cd64:	20000854 	.word	0x20000854

0800cd68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d06e      	beq.n	800ce5c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd7e:	4b3a      	ldr	r3, [pc, #232]	; (800ce68 <xTaskPriorityDisinherit+0x100>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	693a      	ldr	r2, [r7, #16]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d00a      	beq.n	800cd9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	60fb      	str	r3, [r7, #12]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10a      	bne.n	800cdbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	60bb      	str	r3, [r7, #8]
}
 800cdb8:	bf00      	nop
 800cdba:	e7fe      	b.n	800cdba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdc0:	1e5a      	subs	r2, r3, #1
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d044      	beq.n	800ce5c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d140      	bne.n	800ce5c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	3304      	adds	r3, #4
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fe fc40 	bl	800b664 <uxListRemove>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d115      	bne.n	800ce16 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdee:	491f      	ldr	r1, [pc, #124]	; (800ce6c <xTaskPriorityDisinherit+0x104>)
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4413      	add	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	440b      	add	r3, r1
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10a      	bne.n	800ce16 <xTaskPriorityDisinherit+0xae>
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce04:	2201      	movs	r2, #1
 800ce06:	fa02 f303 	lsl.w	r3, r2, r3
 800ce0a:	43da      	mvns	r2, r3
 800ce0c:	4b18      	ldr	r3, [pc, #96]	; (800ce70 <xTaskPriorityDisinherit+0x108>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4013      	ands	r3, r2
 800ce12:	4a17      	ldr	r2, [pc, #92]	; (800ce70 <xTaskPriorityDisinherit+0x108>)
 800ce14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce22:	f1c3 0207 	rsb	r2, r3, #7
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	2201      	movs	r2, #1
 800ce30:	409a      	lsls	r2, r3
 800ce32:	4b0f      	ldr	r3, [pc, #60]	; (800ce70 <xTaskPriorityDisinherit+0x108>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	4a0d      	ldr	r2, [pc, #52]	; (800ce70 <xTaskPriorityDisinherit+0x108>)
 800ce3a:	6013      	str	r3, [r2, #0]
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce40:	4613      	mov	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4a08      	ldr	r2, [pc, #32]	; (800ce6c <xTaskPriorityDisinherit+0x104>)
 800ce4a:	441a      	add	r2, r3
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	3304      	adds	r3, #4
 800ce50:	4619      	mov	r1, r3
 800ce52:	4610      	mov	r0, r2
 800ce54:	f7fe fba9 	bl	800b5aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce5c:	697b      	ldr	r3, [r7, #20]
	}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	2000072c 	.word	0x2000072c
 800ce6c:	20000730 	.word	0x20000730
 800ce70:	20000834 	.word	0x20000834

0800ce74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce7e:	4b29      	ldr	r3, [pc, #164]	; (800cf24 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce84:	4b28      	ldr	r3, [pc, #160]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3304      	adds	r3, #4
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe fbea 	bl	800b664 <uxListRemove>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10b      	bne.n	800ceae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ce96:	4b24      	ldr	r3, [pc, #144]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cea2:	43da      	mvns	r2, r3
 800cea4:	4b21      	ldr	r3, [pc, #132]	; (800cf2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4013      	ands	r3, r2
 800ceaa:	4a20      	ldr	r2, [pc, #128]	; (800cf2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ceac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb4:	d10a      	bne.n	800cecc <prvAddCurrentTaskToDelayedList+0x58>
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d007      	beq.n	800cecc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cebc:	4b1a      	ldr	r3, [pc, #104]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	3304      	adds	r3, #4
 800cec2:	4619      	mov	r1, r3
 800cec4:	481a      	ldr	r0, [pc, #104]	; (800cf30 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cec6:	f7fe fb70 	bl	800b5aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ceca:	e026      	b.n	800cf1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4413      	add	r3, r2
 800ced2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ced4:	4b14      	ldr	r3, [pc, #80]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d209      	bcs.n	800cef8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cee4:	4b13      	ldr	r3, [pc, #76]	; (800cf34 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3304      	adds	r3, #4
 800ceee:	4619      	mov	r1, r3
 800cef0:	4610      	mov	r0, r2
 800cef2:	f7fe fb7e 	bl	800b5f2 <vListInsert>
}
 800cef6:	e010      	b.n	800cf1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cef8:	4b0f      	ldr	r3, [pc, #60]	; (800cf38 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3304      	adds	r3, #4
 800cf02:	4619      	mov	r1, r3
 800cf04:	4610      	mov	r0, r2
 800cf06:	f7fe fb74 	bl	800b5f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf0a:	4b0c      	ldr	r3, [pc, #48]	; (800cf3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d202      	bcs.n	800cf1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cf14:	4a09      	ldr	r2, [pc, #36]	; (800cf3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	6013      	str	r3, [r2, #0]
}
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	20000830 	.word	0x20000830
 800cf28:	2000072c 	.word	0x2000072c
 800cf2c:	20000834 	.word	0x20000834
 800cf30:	20000818 	.word	0x20000818
 800cf34:	200007e8 	.word	0x200007e8
 800cf38:	200007e4 	.word	0x200007e4
 800cf3c:	2000084c 	.word	0x2000084c

0800cf40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	3b04      	subs	r3, #4
 800cf50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	3b04      	subs	r3, #4
 800cf5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	f023 0201 	bic.w	r2, r3, #1
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	3b04      	subs	r3, #4
 800cf6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf70:	4a0c      	ldr	r2, [pc, #48]	; (800cfa4 <pxPortInitialiseStack+0x64>)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	3b14      	subs	r3, #20
 800cf7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	3b04      	subs	r3, #4
 800cf86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f06f 0202 	mvn.w	r2, #2
 800cf8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	3b20      	subs	r3, #32
 800cf94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf96:	68fb      	ldr	r3, [r7, #12]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3714      	adds	r7, #20
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	0800cfa9 	.word	0x0800cfa9

0800cfa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cfb2:	4b12      	ldr	r3, [pc, #72]	; (800cffc <prvTaskExitError+0x54>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d00a      	beq.n	800cfd2 <prvTaskExitError+0x2a>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	60fb      	str	r3, [r7, #12]
}
 800cfce:	bf00      	nop
 800cfd0:	e7fe      	b.n	800cfd0 <prvTaskExitError+0x28>
	__asm volatile
 800cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	60bb      	str	r3, [r7, #8]
}
 800cfe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cfe6:	bf00      	nop
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d0fc      	beq.n	800cfe8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cfee:	bf00      	nop
 800cff0:	bf00      	nop
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	2000002c 	.word	0x2000002c

0800d000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d000:	4b07      	ldr	r3, [pc, #28]	; (800d020 <pxCurrentTCBConst2>)
 800d002:	6819      	ldr	r1, [r3, #0]
 800d004:	6808      	ldr	r0, [r1, #0]
 800d006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00a:	f380 8809 	msr	PSP, r0
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f04f 0000 	mov.w	r0, #0
 800d016:	f380 8811 	msr	BASEPRI, r0
 800d01a:	4770      	bx	lr
 800d01c:	f3af 8000 	nop.w

0800d020 <pxCurrentTCBConst2>:
 800d020:	2000072c 	.word	0x2000072c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d024:	bf00      	nop
 800d026:	bf00      	nop

0800d028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d028:	4808      	ldr	r0, [pc, #32]	; (800d04c <prvPortStartFirstTask+0x24>)
 800d02a:	6800      	ldr	r0, [r0, #0]
 800d02c:	6800      	ldr	r0, [r0, #0]
 800d02e:	f380 8808 	msr	MSP, r0
 800d032:	f04f 0000 	mov.w	r0, #0
 800d036:	f380 8814 	msr	CONTROL, r0
 800d03a:	b662      	cpsie	i
 800d03c:	b661      	cpsie	f
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	df00      	svc	0
 800d048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d04a:	bf00      	nop
 800d04c:	e000ed08 	.word	0xe000ed08

0800d050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d056:	4b46      	ldr	r3, [pc, #280]	; (800d170 <xPortStartScheduler+0x120>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a46      	ldr	r2, [pc, #280]	; (800d174 <xPortStartScheduler+0x124>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d10a      	bne.n	800d076 <xPortStartScheduler+0x26>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	613b      	str	r3, [r7, #16]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d076:	4b3e      	ldr	r3, [pc, #248]	; (800d170 <xPortStartScheduler+0x120>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a3f      	ldr	r2, [pc, #252]	; (800d178 <xPortStartScheduler+0x128>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d10a      	bne.n	800d096 <xPortStartScheduler+0x46>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	60fb      	str	r3, [r7, #12]
}
 800d092:	bf00      	nop
 800d094:	e7fe      	b.n	800d094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d096:	4b39      	ldr	r3, [pc, #228]	; (800d17c <xPortStartScheduler+0x12c>)
 800d098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	22ff      	movs	r2, #255	; 0xff
 800d0a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	4b31      	ldr	r3, [pc, #196]	; (800d180 <xPortStartScheduler+0x130>)
 800d0bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0be:	4b31      	ldr	r3, [pc, #196]	; (800d184 <xPortStartScheduler+0x134>)
 800d0c0:	2207      	movs	r2, #7
 800d0c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0c4:	e009      	b.n	800d0da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d0c6:	4b2f      	ldr	r3, [pc, #188]	; (800d184 <xPortStartScheduler+0x134>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	4a2d      	ldr	r2, [pc, #180]	; (800d184 <xPortStartScheduler+0x134>)
 800d0ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0da:	78fb      	ldrb	r3, [r7, #3]
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0e2:	2b80      	cmp	r3, #128	; 0x80
 800d0e4:	d0ef      	beq.n	800d0c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d0e6:	4b27      	ldr	r3, [pc, #156]	; (800d184 <xPortStartScheduler+0x134>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f1c3 0307 	rsb	r3, r3, #7
 800d0ee:	2b04      	cmp	r3, #4
 800d0f0:	d00a      	beq.n	800d108 <xPortStartScheduler+0xb8>
	__asm volatile
 800d0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f6:	f383 8811 	msr	BASEPRI, r3
 800d0fa:	f3bf 8f6f 	isb	sy
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	60bb      	str	r3, [r7, #8]
}
 800d104:	bf00      	nop
 800d106:	e7fe      	b.n	800d106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d108:	4b1e      	ldr	r3, [pc, #120]	; (800d184 <xPortStartScheduler+0x134>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	4a1d      	ldr	r2, [pc, #116]	; (800d184 <xPortStartScheduler+0x134>)
 800d110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d112:	4b1c      	ldr	r3, [pc, #112]	; (800d184 <xPortStartScheduler+0x134>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d11a:	4a1a      	ldr	r2, [pc, #104]	; (800d184 <xPortStartScheduler+0x134>)
 800d11c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	b2da      	uxtb	r2, r3
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d126:	4b18      	ldr	r3, [pc, #96]	; (800d188 <xPortStartScheduler+0x138>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a17      	ldr	r2, [pc, #92]	; (800d188 <xPortStartScheduler+0x138>)
 800d12c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d132:	4b15      	ldr	r3, [pc, #84]	; (800d188 <xPortStartScheduler+0x138>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4a14      	ldr	r2, [pc, #80]	; (800d188 <xPortStartScheduler+0x138>)
 800d138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d13c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d13e:	f000 f8dd 	bl	800d2fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d142:	4b12      	ldr	r3, [pc, #72]	; (800d18c <xPortStartScheduler+0x13c>)
 800d144:	2200      	movs	r2, #0
 800d146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d148:	f000 f8fc 	bl	800d344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d14c:	4b10      	ldr	r3, [pc, #64]	; (800d190 <xPortStartScheduler+0x140>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a0f      	ldr	r2, [pc, #60]	; (800d190 <xPortStartScheduler+0x140>)
 800d152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d158:	f7ff ff66 	bl	800d028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d15c:	f7ff fb84 	bl	800c868 <vTaskSwitchContext>
	prvTaskExitError();
 800d160:	f7ff ff22 	bl	800cfa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3718      	adds	r7, #24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	e000ed00 	.word	0xe000ed00
 800d174:	410fc271 	.word	0x410fc271
 800d178:	410fc270 	.word	0x410fc270
 800d17c:	e000e400 	.word	0xe000e400
 800d180:	20000858 	.word	0x20000858
 800d184:	2000085c 	.word	0x2000085c
 800d188:	e000ed20 	.word	0xe000ed20
 800d18c:	2000002c 	.word	0x2000002c
 800d190:	e000ef34 	.word	0xe000ef34

0800d194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	607b      	str	r3, [r7, #4]
}
 800d1ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d1ae:	4b0f      	ldr	r3, [pc, #60]	; (800d1ec <vPortEnterCritical+0x58>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	4a0d      	ldr	r2, [pc, #52]	; (800d1ec <vPortEnterCritical+0x58>)
 800d1b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1b8:	4b0c      	ldr	r3, [pc, #48]	; (800d1ec <vPortEnterCritical+0x58>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d10f      	bne.n	800d1e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d1c0:	4b0b      	ldr	r3, [pc, #44]	; (800d1f0 <vPortEnterCritical+0x5c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	603b      	str	r3, [r7, #0]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <vPortEnterCritical+0x4a>
	}
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	2000002c 	.word	0x2000002c
 800d1f0:	e000ed04 	.word	0xe000ed04

0800d1f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d1fa:	4b12      	ldr	r3, [pc, #72]	; (800d244 <vPortExitCritical+0x50>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10a      	bne.n	800d218 <vPortExitCritical+0x24>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	607b      	str	r3, [r7, #4]
}
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d218:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <vPortExitCritical+0x50>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	4a09      	ldr	r2, [pc, #36]	; (800d244 <vPortExitCritical+0x50>)
 800d220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d222:	4b08      	ldr	r3, [pc, #32]	; (800d244 <vPortExitCritical+0x50>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d105      	bne.n	800d236 <vPortExitCritical+0x42>
 800d22a:	2300      	movs	r3, #0
 800d22c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	f383 8811 	msr	BASEPRI, r3
}
 800d234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d236:	bf00      	nop
 800d238:	370c      	adds	r7, #12
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	2000002c 	.word	0x2000002c
	...

0800d250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d250:	f3ef 8009 	mrs	r0, PSP
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	4b15      	ldr	r3, [pc, #84]	; (800d2b0 <pxCurrentTCBConst>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	f01e 0f10 	tst.w	lr, #16
 800d260:	bf08      	it	eq
 800d262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26a:	6010      	str	r0, [r2, #0]
 800d26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d270:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d274:	f380 8811 	msr	BASEPRI, r0
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f7ff faf2 	bl	800c868 <vTaskSwitchContext>
 800d284:	f04f 0000 	mov.w	r0, #0
 800d288:	f380 8811 	msr	BASEPRI, r0
 800d28c:	bc09      	pop	{r0, r3}
 800d28e:	6819      	ldr	r1, [r3, #0]
 800d290:	6808      	ldr	r0, [r1, #0]
 800d292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d296:	f01e 0f10 	tst.w	lr, #16
 800d29a:	bf08      	it	eq
 800d29c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d2a0:	f380 8809 	msr	PSP, r0
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w

0800d2b0 <pxCurrentTCBConst>:
 800d2b0:	2000072c 	.word	0x2000072c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop

0800d2b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	607b      	str	r3, [r7, #4]
}
 800d2d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d2d2:	f7ff fa11 	bl	800c6f8 <xTaskIncrementTick>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d2dc:	4b06      	ldr	r3, [pc, #24]	; (800d2f8 <SysTick_Handler+0x40>)
 800d2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	f383 8811 	msr	BASEPRI, r3
}
 800d2ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d2f0:	bf00      	nop
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	e000ed04 	.word	0xe000ed04

0800d2fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d300:	4b0b      	ldr	r3, [pc, #44]	; (800d330 <vPortSetupTimerInterrupt+0x34>)
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d306:	4b0b      	ldr	r3, [pc, #44]	; (800d334 <vPortSetupTimerInterrupt+0x38>)
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d30c:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <vPortSetupTimerInterrupt+0x3c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a0a      	ldr	r2, [pc, #40]	; (800d33c <vPortSetupTimerInterrupt+0x40>)
 800d312:	fba2 2303 	umull	r2, r3, r2, r3
 800d316:	099b      	lsrs	r3, r3, #6
 800d318:	4a09      	ldr	r2, [pc, #36]	; (800d340 <vPortSetupTimerInterrupt+0x44>)
 800d31a:	3b01      	subs	r3, #1
 800d31c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d31e:	4b04      	ldr	r3, [pc, #16]	; (800d330 <vPortSetupTimerInterrupt+0x34>)
 800d320:	2207      	movs	r2, #7
 800d322:	601a      	str	r2, [r3, #0]
}
 800d324:	bf00      	nop
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	e000e010 	.word	0xe000e010
 800d334:	e000e018 	.word	0xe000e018
 800d338:	20000000 	.word	0x20000000
 800d33c:	10624dd3 	.word	0x10624dd3
 800d340:	e000e014 	.word	0xe000e014

0800d344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d354 <vPortEnableVFP+0x10>
 800d348:	6801      	ldr	r1, [r0, #0]
 800d34a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d34e:	6001      	str	r1, [r0, #0]
 800d350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d352:	bf00      	nop
 800d354:	e000ed88 	.word	0xe000ed88

0800d358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d35e:	f3ef 8305 	mrs	r3, IPSR
 800d362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b0f      	cmp	r3, #15
 800d368:	d914      	bls.n	800d394 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d36a:	4a17      	ldr	r2, [pc, #92]	; (800d3c8 <vPortValidateInterruptPriority+0x70>)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	4413      	add	r3, r2
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d374:	4b15      	ldr	r3, [pc, #84]	; (800d3cc <vPortValidateInterruptPriority+0x74>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	7afa      	ldrb	r2, [r7, #11]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d20a      	bcs.n	800d394 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	607b      	str	r3, [r7, #4]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d394:	4b0e      	ldr	r3, [pc, #56]	; (800d3d0 <vPortValidateInterruptPriority+0x78>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d39c:	4b0d      	ldr	r3, [pc, #52]	; (800d3d4 <vPortValidateInterruptPriority+0x7c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d90a      	bls.n	800d3ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	603b      	str	r3, [r7, #0]
}
 800d3b6:	bf00      	nop
 800d3b8:	e7fe      	b.n	800d3b8 <vPortValidateInterruptPriority+0x60>
	}
 800d3ba:	bf00      	nop
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	e000e3f0 	.word	0xe000e3f0
 800d3cc:	20000858 	.word	0x20000858
 800d3d0:	e000ed0c 	.word	0xe000ed0c
 800d3d4:	2000085c 	.word	0x2000085c

0800d3d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b08a      	sub	sp, #40	; 0x28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d3e4:	f7ff f8de 	bl	800c5a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d3e8:	4b5d      	ldr	r3, [pc, #372]	; (800d560 <pvPortMalloc+0x188>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d101      	bne.n	800d3f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3f0:	f000 f924 	bl	800d63c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3f4:	4b5b      	ldr	r3, [pc, #364]	; (800d564 <pvPortMalloc+0x18c>)
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f040 8093 	bne.w	800d528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01d      	beq.n	800d444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d408:	2208      	movs	r2, #8
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4413      	add	r3, r2
 800d40e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f003 0307 	and.w	r3, r3, #7
 800d416:	2b00      	cmp	r3, #0
 800d418:	d014      	beq.n	800d444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f023 0307 	bic.w	r3, r3, #7
 800d420:	3308      	adds	r3, #8
 800d422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f003 0307 	and.w	r3, r3, #7
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00a      	beq.n	800d444 <pvPortMalloc+0x6c>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	617b      	str	r3, [r7, #20]
}
 800d440:	bf00      	nop
 800d442:	e7fe      	b.n	800d442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d06e      	beq.n	800d528 <pvPortMalloc+0x150>
 800d44a:	4b47      	ldr	r3, [pc, #284]	; (800d568 <pvPortMalloc+0x190>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	429a      	cmp	r2, r3
 800d452:	d869      	bhi.n	800d528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d454:	4b45      	ldr	r3, [pc, #276]	; (800d56c <pvPortMalloc+0x194>)
 800d456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d458:	4b44      	ldr	r3, [pc, #272]	; (800d56c <pvPortMalloc+0x194>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d45e:	e004      	b.n	800d46a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	429a      	cmp	r2, r3
 800d472:	d903      	bls.n	800d47c <pvPortMalloc+0xa4>
 800d474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1f1      	bne.n	800d460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d47c:	4b38      	ldr	r3, [pc, #224]	; (800d560 <pvPortMalloc+0x188>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d482:	429a      	cmp	r2, r3
 800d484:	d050      	beq.n	800d528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2208      	movs	r2, #8
 800d48c:	4413      	add	r3, r2
 800d48e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	1ad2      	subs	r2, r2, r3
 800d4a0:	2308      	movs	r3, #8
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d91f      	bls.n	800d4e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	f003 0307 	and.w	r3, r3, #7
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	613b      	str	r3, [r7, #16]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	1ad2      	subs	r2, r2, r3
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d4e2:	69b8      	ldr	r0, [r7, #24]
 800d4e4:	f000 f90c 	bl	800d700 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d4e8:	4b1f      	ldr	r3, [pc, #124]	; (800d568 <pvPortMalloc+0x190>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	4a1d      	ldr	r2, [pc, #116]	; (800d568 <pvPortMalloc+0x190>)
 800d4f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4f6:	4b1c      	ldr	r3, [pc, #112]	; (800d568 <pvPortMalloc+0x190>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	4b1d      	ldr	r3, [pc, #116]	; (800d570 <pvPortMalloc+0x198>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d203      	bcs.n	800d50a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d502:	4b19      	ldr	r3, [pc, #100]	; (800d568 <pvPortMalloc+0x190>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a1a      	ldr	r2, [pc, #104]	; (800d570 <pvPortMalloc+0x198>)
 800d508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	4b15      	ldr	r3, [pc, #84]	; (800d564 <pvPortMalloc+0x18c>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	431a      	orrs	r2, r3
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	2200      	movs	r2, #0
 800d51c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d51e:	4b15      	ldr	r3, [pc, #84]	; (800d574 <pvPortMalloc+0x19c>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	4a13      	ldr	r2, [pc, #76]	; (800d574 <pvPortMalloc+0x19c>)
 800d526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d528:	f7ff f84a 	bl	800c5c0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d101      	bne.n	800d536 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d532:	f7f3 fcdd 	bl	8000ef0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	f003 0307 	and.w	r3, r3, #7
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00a      	beq.n	800d556 <pvPortMalloc+0x17e>
	__asm volatile
 800d540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d544:	f383 8811 	msr	BASEPRI, r3
 800d548:	f3bf 8f6f 	isb	sy
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	60fb      	str	r3, [r7, #12]
}
 800d552:	bf00      	nop
 800d554:	e7fe      	b.n	800d554 <pvPortMalloc+0x17c>
	return pvReturn;
 800d556:	69fb      	ldr	r3, [r7, #28]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3728      	adds	r7, #40	; 0x28
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20008868 	.word	0x20008868
 800d564:	2000887c 	.word	0x2000887c
 800d568:	2000886c 	.word	0x2000886c
 800d56c:	20008860 	.word	0x20008860
 800d570:	20008870 	.word	0x20008870
 800d574:	20008874 	.word	0x20008874

0800d578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d04d      	beq.n	800d626 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d58a:	2308      	movs	r3, #8
 800d58c:	425b      	negs	r3, r3
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	4413      	add	r3, r2
 800d592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	4b24      	ldr	r3, [pc, #144]	; (800d630 <vPortFree+0xb8>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10a      	bne.n	800d5bc <vPortFree+0x44>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	60fb      	str	r3, [r7, #12]
}
 800d5b8:	bf00      	nop
 800d5ba:	e7fe      	b.n	800d5ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00a      	beq.n	800d5da <vPortFree+0x62>
	__asm volatile
 800d5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	60bb      	str	r3, [r7, #8]
}
 800d5d6:	bf00      	nop
 800d5d8:	e7fe      	b.n	800d5d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	685a      	ldr	r2, [r3, #4]
 800d5de:	4b14      	ldr	r3, [pc, #80]	; (800d630 <vPortFree+0xb8>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d01e      	beq.n	800d626 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d11a      	bne.n	800d626 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	4b0e      	ldr	r3, [pc, #56]	; (800d630 <vPortFree+0xb8>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	43db      	mvns	r3, r3
 800d5fa:	401a      	ands	r2, r3
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d600:	f7fe ffd0 	bl	800c5a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	685a      	ldr	r2, [r3, #4]
 800d608:	4b0a      	ldr	r3, [pc, #40]	; (800d634 <vPortFree+0xbc>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4413      	add	r3, r2
 800d60e:	4a09      	ldr	r2, [pc, #36]	; (800d634 <vPortFree+0xbc>)
 800d610:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d612:	6938      	ldr	r0, [r7, #16]
 800d614:	f000 f874 	bl	800d700 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d618:	4b07      	ldr	r3, [pc, #28]	; (800d638 <vPortFree+0xc0>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3301      	adds	r3, #1
 800d61e:	4a06      	ldr	r2, [pc, #24]	; (800d638 <vPortFree+0xc0>)
 800d620:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d622:	f7fe ffcd 	bl	800c5c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d626:	bf00      	nop
 800d628:	3718      	adds	r7, #24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	2000887c 	.word	0x2000887c
 800d634:	2000886c 	.word	0x2000886c
 800d638:	20008878 	.word	0x20008878

0800d63c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d646:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d648:	4b27      	ldr	r3, [pc, #156]	; (800d6e8 <prvHeapInit+0xac>)
 800d64a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f003 0307 	and.w	r3, r3, #7
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00c      	beq.n	800d670 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3307      	adds	r3, #7
 800d65a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f023 0307 	bic.w	r3, r3, #7
 800d662:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	4a1f      	ldr	r2, [pc, #124]	; (800d6e8 <prvHeapInit+0xac>)
 800d66c:	4413      	add	r3, r2
 800d66e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d674:	4a1d      	ldr	r2, [pc, #116]	; (800d6ec <prvHeapInit+0xb0>)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d67a:	4b1c      	ldr	r3, [pc, #112]	; (800d6ec <prvHeapInit+0xb0>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	4413      	add	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d688:	2208      	movs	r2, #8
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	1a9b      	subs	r3, r3, r2
 800d68e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f023 0307 	bic.w	r3, r3, #7
 800d696:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	4a15      	ldr	r2, [pc, #84]	; (800d6f0 <prvHeapInit+0xb4>)
 800d69c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d69e:	4b14      	ldr	r3, [pc, #80]	; (800d6f0 <prvHeapInit+0xb4>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d6a6:	4b12      	ldr	r3, [pc, #72]	; (800d6f0 <prvHeapInit+0xb4>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	1ad2      	subs	r2, r2, r3
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6bc:	4b0c      	ldr	r3, [pc, #48]	; (800d6f0 <prvHeapInit+0xb4>)
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	4a0a      	ldr	r2, [pc, #40]	; (800d6f4 <prvHeapInit+0xb8>)
 800d6ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	4a09      	ldr	r2, [pc, #36]	; (800d6f8 <prvHeapInit+0xbc>)
 800d6d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6d4:	4b09      	ldr	r3, [pc, #36]	; (800d6fc <prvHeapInit+0xc0>)
 800d6d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6da:	601a      	str	r2, [r3, #0]
}
 800d6dc:	bf00      	nop
 800d6de:	3714      	adds	r7, #20
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr
 800d6e8:	20000860 	.word	0x20000860
 800d6ec:	20008860 	.word	0x20008860
 800d6f0:	20008868 	.word	0x20008868
 800d6f4:	20008870 	.word	0x20008870
 800d6f8:	2000886c 	.word	0x2000886c
 800d6fc:	2000887c 	.word	0x2000887c

0800d700 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d708:	4b28      	ldr	r3, [pc, #160]	; (800d7ac <prvInsertBlockIntoFreeList+0xac>)
 800d70a:	60fb      	str	r3, [r7, #12]
 800d70c:	e002      	b.n	800d714 <prvInsertBlockIntoFreeList+0x14>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	60fb      	str	r3, [r7, #12]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d8f7      	bhi.n	800d70e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	4413      	add	r3, r2
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d108      	bne.n	800d742 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	685a      	ldr	r2, [r3, #4]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	441a      	add	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	441a      	add	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	429a      	cmp	r2, r3
 800d754:	d118      	bne.n	800d788 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	4b15      	ldr	r3, [pc, #84]	; (800d7b0 <prvInsertBlockIntoFreeList+0xb0>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d00d      	beq.n	800d77e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	441a      	add	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	601a      	str	r2, [r3, #0]
 800d77c:	e008      	b.n	800d790 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d77e:	4b0c      	ldr	r3, [pc, #48]	; (800d7b0 <prvInsertBlockIntoFreeList+0xb0>)
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	e003      	b.n	800d790 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	429a      	cmp	r2, r3
 800d796:	d002      	beq.n	800d79e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d79e:	bf00      	nop
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	20008860 	.word	0x20008860
 800d7b0:	20008868 	.word	0x20008868

0800d7b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	490e      	ldr	r1, [pc, #56]	; (800d7f4 <MX_USB_HOST_Init+0x40>)
 800d7bc:	480e      	ldr	r0, [pc, #56]	; (800d7f8 <MX_USB_HOST_Init+0x44>)
 800d7be:	f7fb fed5 	bl	800956c <USBH_Init>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d001      	beq.n	800d7cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d7c8:	f7f4 f84c 	bl	8001864 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800d7cc:	490b      	ldr	r1, [pc, #44]	; (800d7fc <MX_USB_HOST_Init+0x48>)
 800d7ce:	480a      	ldr	r0, [pc, #40]	; (800d7f8 <MX_USB_HOST_Init+0x44>)
 800d7d0:	f7fb ff82 	bl	80096d8 <USBH_RegisterClass>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d001      	beq.n	800d7de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d7da:	f7f4 f843 	bl	8001864 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d7de:	4806      	ldr	r0, [pc, #24]	; (800d7f8 <MX_USB_HOST_Init+0x44>)
 800d7e0:	f7fc f806 	bl	80097f0 <USBH_Start>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d001      	beq.n	800d7ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d7ea:	f7f4 f83b 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d7ee:	bf00      	nop
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	0800d801 	.word	0x0800d801
 800d7f8:	20008880 	.word	0x20008880
 800d7fc:	2000000c 	.word	0x2000000c

0800d800 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	460b      	mov	r3, r1
 800d80a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d80c:	78fb      	ldrb	r3, [r7, #3]
 800d80e:	3b01      	subs	r3, #1
 800d810:	2b04      	cmp	r3, #4
 800d812:	d819      	bhi.n	800d848 <USBH_UserProcess+0x48>
 800d814:	a201      	add	r2, pc, #4	; (adr r2, 800d81c <USBH_UserProcess+0x1c>)
 800d816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81a:	bf00      	nop
 800d81c:	0800d849 	.word	0x0800d849
 800d820:	0800d839 	.word	0x0800d839
 800d824:	0800d849 	.word	0x0800d849
 800d828:	0800d841 	.word	0x0800d841
 800d82c:	0800d831 	.word	0x0800d831
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d830:	4b09      	ldr	r3, [pc, #36]	; (800d858 <USBH_UserProcess+0x58>)
 800d832:	2203      	movs	r2, #3
 800d834:	701a      	strb	r2, [r3, #0]
  break;
 800d836:	e008      	b.n	800d84a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d838:	4b07      	ldr	r3, [pc, #28]	; (800d858 <USBH_UserProcess+0x58>)
 800d83a:	2202      	movs	r2, #2
 800d83c:	701a      	strb	r2, [r3, #0]
  break;
 800d83e:	e004      	b.n	800d84a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d840:	4b05      	ldr	r3, [pc, #20]	; (800d858 <USBH_UserProcess+0x58>)
 800d842:	2201      	movs	r2, #1
 800d844:	701a      	strb	r2, [r3, #0]
  break;
 800d846:	e000      	b.n	800d84a <USBH_UserProcess+0x4a>

  default:
  break;
 800d848:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d84a:	bf00      	nop
 800d84c:	370c      	adds	r7, #12
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop
 800d858:	20008c64 	.word	0x20008c64

0800d85c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b08a      	sub	sp, #40	; 0x28
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d864:	f107 0314 	add.w	r3, r7, #20
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]
 800d86c:	605a      	str	r2, [r3, #4]
 800d86e:	609a      	str	r2, [r3, #8]
 800d870:	60da      	str	r2, [r3, #12]
 800d872:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a24      	ldr	r2, [pc, #144]	; (800d90c <HAL_HCD_MspInit+0xb0>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d141      	bne.n	800d902 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d87e:	2300      	movs	r3, #0
 800d880:	613b      	str	r3, [r7, #16]
 800d882:	4b23      	ldr	r3, [pc, #140]	; (800d910 <HAL_HCD_MspInit+0xb4>)
 800d884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d886:	4a22      	ldr	r2, [pc, #136]	; (800d910 <HAL_HCD_MspInit+0xb4>)
 800d888:	f043 0302 	orr.w	r3, r3, #2
 800d88c:	6313      	str	r3, [r2, #48]	; 0x30
 800d88e:	4b20      	ldr	r3, [pc, #128]	; (800d910 <HAL_HCD_MspInit+0xb4>)
 800d890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d892:	f003 0302 	and.w	r3, r3, #2
 800d896:	613b      	str	r3, [r7, #16]
 800d898:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d89a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800d89e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8a0:	2302      	movs	r3, #2
 800d8a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d8ac:	230c      	movs	r3, #12
 800d8ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8b0:	f107 0314 	add.w	r3, r7, #20
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	4817      	ldr	r0, [pc, #92]	; (800d914 <HAL_HCD_MspInit+0xb8>)
 800d8b8:	f7f5 f844 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d8bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d8c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d8ca:	f107 0314 	add.w	r3, r7, #20
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	4810      	ldr	r0, [pc, #64]	; (800d914 <HAL_HCD_MspInit+0xb8>)
 800d8d2:	f7f5 f837 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	60fb      	str	r3, [r7, #12]
 800d8da:	4b0d      	ldr	r3, [pc, #52]	; (800d910 <HAL_HCD_MspInit+0xb4>)
 800d8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8de:	4a0c      	ldr	r2, [pc, #48]	; (800d910 <HAL_HCD_MspInit+0xb4>)
 800d8e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8e4:	6313      	str	r3, [r2, #48]	; 0x30
 800d8e6:	4b0a      	ldr	r3, [pc, #40]	; (800d910 <HAL_HCD_MspInit+0xb4>)
 800d8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8ee:	60fb      	str	r3, [r7, #12]
 800d8f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	2105      	movs	r1, #5
 800d8f6:	204d      	movs	r0, #77	; 0x4d
 800d8f8:	f7f4 fdf2 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d8fc:	204d      	movs	r0, #77	; 0x4d
 800d8fe:	f7f4 fe0b 	bl	8002518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d902:	bf00      	nop
 800d904:	3728      	adds	r7, #40	; 0x28
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	40040000 	.word	0x40040000
 800d910:	40023800 	.word	0x40023800
 800d914:	40020400 	.word	0x40020400

0800d918 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d926:	4618      	mov	r0, r3
 800d928:	f7fc fc19 	bl	800a15e <USBH_LL_IncTimer>
}
 800d92c:	bf00      	nop
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d942:	4618      	mov	r0, r3
 800d944:	f7fc fc5d 	bl	800a202 <USBH_LL_Connect>
}
 800d948:	bf00      	nop
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fc fc72 	bl	800a248 <USBH_LL_Disconnect>
}
 800d964:	bf00      	nop
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	70fb      	strb	r3, [r7, #3]
 800d978:	4613      	mov	r3, r2
 800d97a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d982:	4618      	mov	r0, r3
 800d984:	f7fc fca7 	bl	800a2d6 <USBH_LL_NotifyURBChange>
#endif
}
 800d988:	bf00      	nop
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fc fc07 	bl	800a1b2 <USBH_LL_PortEnabled>
}
 800d9a4:	bf00      	nop
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fc fc13 	bl	800a1e6 <USBH_LL_PortDisabled>
}
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d132      	bne.n	800da40 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d9da:	4a1c      	ldr	r2, [pc, #112]	; (800da4c <USBH_LL_Init+0x84>)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a19      	ldr	r2, [pc, #100]	; (800da4c <USBH_LL_Init+0x84>)
 800d9e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d9ea:	4b18      	ldr	r3, [pc, #96]	; (800da4c <USBH_LL_Init+0x84>)
 800d9ec:	4a18      	ldr	r2, [pc, #96]	; (800da50 <USBH_LL_Init+0x88>)
 800d9ee:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d9f0:	4b16      	ldr	r3, [pc, #88]	; (800da4c <USBH_LL_Init+0x84>)
 800d9f2:	220c      	movs	r2, #12
 800d9f4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d9f6:	4b15      	ldr	r3, [pc, #84]	; (800da4c <USBH_LL_Init+0x84>)
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d9fc:	4b13      	ldr	r3, [pc, #76]	; (800da4c <USBH_LL_Init+0x84>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800da02:	4b12      	ldr	r3, [pc, #72]	; (800da4c <USBH_LL_Init+0x84>)
 800da04:	2202      	movs	r2, #2
 800da06:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800da08:	4b10      	ldr	r3, [pc, #64]	; (800da4c <USBH_LL_Init+0x84>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800da0e:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <USBH_LL_Init+0x84>)
 800da10:	2200      	movs	r2, #0
 800da12:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800da14:	4b0d      	ldr	r3, [pc, #52]	; (800da4c <USBH_LL_Init+0x84>)
 800da16:	2200      	movs	r2, #0
 800da18:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800da1a:	4b0c      	ldr	r3, [pc, #48]	; (800da4c <USBH_LL_Init+0x84>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800da20:	480a      	ldr	r0, [pc, #40]	; (800da4c <USBH_LL_Init+0x84>)
 800da22:	f7f5 f986 	bl	8002d32 <HAL_HCD_Init>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800da2c:	f7f3 ff1a 	bl	8001864 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800da30:	4806      	ldr	r0, [pc, #24]	; (800da4c <USBH_LL_Init+0x84>)
 800da32:	f7f5 fd6a 	bl	800350a <HAL_HCD_GetCurrentFrame>
 800da36:	4603      	mov	r3, r0
 800da38:	4619      	mov	r1, r3
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7fc fb80 	bl	800a140 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3708      	adds	r7, #8
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	20008c68 	.word	0x20008c68
 800da50:	40040000 	.word	0x40040000

0800da54 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7f5 fcd7 	bl	800341e <HAL_HCD_Start>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	4618      	mov	r0, r3
 800da78:	f000 f95c 	bl	800dd34 <USBH_Get_USB_Status>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da80:	7bbb      	ldrb	r3, [r7, #14]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b084      	sub	sp, #16
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da92:	2300      	movs	r3, #0
 800da94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da96:	2300      	movs	r3, #0
 800da98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7f5 fcdf 	bl	8003464 <HAL_HCD_Stop>
 800daa6:	4603      	mov	r3, r0
 800daa8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800daaa:	7bfb      	ldrb	r3, [r7, #15]
 800daac:	4618      	mov	r0, r3
 800daae:	f000 f941 	bl	800dd34 <USBH_Get_USB_Status>
 800dab2:	4603      	mov	r3, r0
 800dab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dab6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dac8:	2301      	movs	r3, #1
 800daca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7f5 fd27 	bl	8003526 <HAL_HCD_GetCurrentSpeed>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d00c      	beq.n	800daf8 <USBH_LL_GetSpeed+0x38>
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d80d      	bhi.n	800dafe <USBH_LL_GetSpeed+0x3e>
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d002      	beq.n	800daec <USBH_LL_GetSpeed+0x2c>
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d003      	beq.n	800daf2 <USBH_LL_GetSpeed+0x32>
 800daea:	e008      	b.n	800dafe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800daec:	2300      	movs	r3, #0
 800daee:	73fb      	strb	r3, [r7, #15]
    break;
 800daf0:	e008      	b.n	800db04 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800daf2:	2301      	movs	r3, #1
 800daf4:	73fb      	strb	r3, [r7, #15]
    break;
 800daf6:	e005      	b.n	800db04 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800daf8:	2302      	movs	r3, #2
 800dafa:	73fb      	strb	r3, [r7, #15]
    break;
 800dafc:	e002      	b.n	800db04 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dafe:	2301      	movs	r3, #1
 800db00:	73fb      	strb	r3, [r7, #15]
    break;
 800db02:	bf00      	nop
  }
  return  speed;
 800db04:	7bfb      	ldrb	r3, [r7, #15]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b084      	sub	sp, #16
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db1a:	2300      	movs	r3, #0
 800db1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db24:	4618      	mov	r0, r3
 800db26:	f7f5 fcba 	bl	800349e <HAL_HCD_ResetPort>
 800db2a:	4603      	mov	r3, r0
 800db2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
 800db30:	4618      	mov	r0, r3
 800db32:	f000 f8ff 	bl	800dd34 <USBH_Get_USB_Status>
 800db36:	4603      	mov	r3, r0
 800db38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	460b      	mov	r3, r1
 800db4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db56:	78fa      	ldrb	r2, [r7, #3]
 800db58:	4611      	mov	r1, r2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7f5 fcc1 	bl	80034e2 <HAL_HCD_HC_GetXferCount>
 800db60:	4603      	mov	r3, r0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800db6a:	b590      	push	{r4, r7, lr}
 800db6c:	b089      	sub	sp, #36	; 0x24
 800db6e:	af04      	add	r7, sp, #16
 800db70:	6078      	str	r0, [r7, #4]
 800db72:	4608      	mov	r0, r1
 800db74:	4611      	mov	r1, r2
 800db76:	461a      	mov	r2, r3
 800db78:	4603      	mov	r3, r0
 800db7a:	70fb      	strb	r3, [r7, #3]
 800db7c:	460b      	mov	r3, r1
 800db7e:	70bb      	strb	r3, [r7, #2]
 800db80:	4613      	mov	r3, r2
 800db82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db84:	2300      	movs	r3, #0
 800db86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db88:	2300      	movs	r3, #0
 800db8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800db92:	787c      	ldrb	r4, [r7, #1]
 800db94:	78ba      	ldrb	r2, [r7, #2]
 800db96:	78f9      	ldrb	r1, [r7, #3]
 800db98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800db9a:	9302      	str	r3, [sp, #8]
 800db9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dba0:	9301      	str	r3, [sp, #4]
 800dba2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	4623      	mov	r3, r4
 800dbaa:	f7f5 f924 	bl	8002df6 <HAL_HCD_HC_Init>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbb2:	7bfb      	ldrb	r3, [r7, #15]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 f8bd 	bl	800dd34 <USBH_Get_USB_Status>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd90      	pop	{r4, r7, pc}

0800dbc8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dbe2:	78fa      	ldrb	r2, [r7, #3]
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7f5 f994 	bl	8002f14 <HAL_HCD_HC_Halt>
 800dbec:	4603      	mov	r3, r0
 800dbee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbf0:	7bfb      	ldrb	r3, [r7, #15]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 f89e 	bl	800dd34 <USBH_Get_USB_Status>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dc06:	b590      	push	{r4, r7, lr}
 800dc08:	b089      	sub	sp, #36	; 0x24
 800dc0a:	af04      	add	r7, sp, #16
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	4608      	mov	r0, r1
 800dc10:	4611      	mov	r1, r2
 800dc12:	461a      	mov	r2, r3
 800dc14:	4603      	mov	r3, r0
 800dc16:	70fb      	strb	r3, [r7, #3]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	70bb      	strb	r3, [r7, #2]
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc20:	2300      	movs	r3, #0
 800dc22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dc2e:	787c      	ldrb	r4, [r7, #1]
 800dc30:	78ba      	ldrb	r2, [r7, #2]
 800dc32:	78f9      	ldrb	r1, [r7, #3]
 800dc34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dc38:	9303      	str	r3, [sp, #12]
 800dc3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc3c:	9302      	str	r3, [sp, #8]
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc40:	9301      	str	r3, [sp, #4]
 800dc42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	4623      	mov	r3, r4
 800dc4a:	f7f5 f987 	bl	8002f5c <HAL_HCD_HC_SubmitRequest>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dc52:	7bfb      	ldrb	r3, [r7, #15]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 f86d 	bl	800dd34 <USBH_Get_USB_Status>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3714      	adds	r7, #20
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd90      	pop	{r4, r7, pc}

0800dc68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	460b      	mov	r3, r1
 800dc72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc7a:	78fa      	ldrb	r2, [r7, #3]
 800dc7c:	4611      	mov	r1, r2
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7f5 fc1b 	bl	80034ba <HAL_HCD_HC_GetURBState>
 800dc84:	4603      	mov	r3, r0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b082      	sub	sp, #8
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
 800dc96:	460b      	mov	r3, r1
 800dc98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d103      	bne.n	800dcac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800dca4:	78fb      	ldrb	r3, [r7, #3]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 f870 	bl	800dd8c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dcac:	20c8      	movs	r0, #200	; 0xc8
 800dcae:	f7f4 fb3b 	bl	8002328 <HAL_Delay>
  return USBH_OK;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	70fb      	strb	r3, [r7, #3]
 800dcc8:	4613      	mov	r3, r2
 800dcca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dcd2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dcd4:	78fb      	ldrb	r3, [r7, #3]
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	212c      	movs	r1, #44	; 0x2c
 800dcda:	fb01 f303 	mul.w	r3, r1, r3
 800dcde:	4413      	add	r3, r2
 800dce0:	333b      	adds	r3, #59	; 0x3b
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d009      	beq.n	800dcfc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dce8:	78fb      	ldrb	r3, [r7, #3]
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	212c      	movs	r1, #44	; 0x2c
 800dcee:	fb01 f303 	mul.w	r3, r1, r3
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3354      	adds	r3, #84	; 0x54
 800dcf6:	78ba      	ldrb	r2, [r7, #2]
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	e008      	b.n	800dd0e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dcfc:	78fb      	ldrb	r3, [r7, #3]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	212c      	movs	r1, #44	; 0x2c
 800dd02:	fb01 f303 	mul.w	r3, r1, r3
 800dd06:	4413      	add	r3, r2
 800dd08:	3355      	adds	r3, #85	; 0x55
 800dd0a:	78ba      	ldrb	r2, [r7, #2]
 800dd0c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3714      	adds	r7, #20
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7f4 faff 	bl	8002328 <HAL_Delay>
}
 800dd2a:	bf00      	nop
 800dd2c:	3708      	adds	r7, #8
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
	...

0800dd34 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b085      	sub	sp, #20
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd42:	79fb      	ldrb	r3, [r7, #7]
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d817      	bhi.n	800dd78 <USBH_Get_USB_Status+0x44>
 800dd48:	a201      	add	r2, pc, #4	; (adr r2, 800dd50 <USBH_Get_USB_Status+0x1c>)
 800dd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4e:	bf00      	nop
 800dd50:	0800dd61 	.word	0x0800dd61
 800dd54:	0800dd67 	.word	0x0800dd67
 800dd58:	0800dd6d 	.word	0x0800dd6d
 800dd5c:	0800dd73 	.word	0x0800dd73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dd60:	2300      	movs	r3, #0
 800dd62:	73fb      	strb	r3, [r7, #15]
    break;
 800dd64:	e00b      	b.n	800dd7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dd66:	2302      	movs	r3, #2
 800dd68:	73fb      	strb	r3, [r7, #15]
    break;
 800dd6a:	e008      	b.n	800dd7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd70:	e005      	b.n	800dd7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dd72:	2302      	movs	r3, #2
 800dd74:	73fb      	strb	r3, [r7, #15]
    break;
 800dd76:	e002      	b.n	800dd7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dd78:	2302      	movs	r3, #2
 800dd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd7c:	bf00      	nop
  }
  return usb_status;
 800dd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3714      	adds	r7, #20
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	4603      	mov	r3, r0
 800dd94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800dd96:	79fb      	ldrb	r3, [r7, #7]
 800dd98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800dd9a:	79fb      	ldrb	r3, [r7, #7]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d102      	bne.n	800dda6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800dda0:	2301      	movs	r3, #1
 800dda2:	73fb      	strb	r3, [r7, #15]
 800dda4:	e001      	b.n	800ddaa <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800dda6:	2300      	movs	r3, #0
 800dda8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ddaa:	7bfb      	ldrb	r3, [r7, #15]
 800ddac:	461a      	mov	r2, r3
 800ddae:	2110      	movs	r1, #16
 800ddb0:	4803      	ldr	r0, [pc, #12]	; (800ddc0 <MX_DriverVbusHS+0x34>)
 800ddb2:	f7f4 ff8b 	bl	8002ccc <HAL_GPIO_WritePin>
}
 800ddb6:	bf00      	nop
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	40020800 	.word	0x40020800

0800ddc4 <__errno>:
 800ddc4:	4b01      	ldr	r3, [pc, #4]	; (800ddcc <__errno+0x8>)
 800ddc6:	6818      	ldr	r0, [r3, #0]
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	20000030 	.word	0x20000030

0800ddd0 <__libc_init_array>:
 800ddd0:	b570      	push	{r4, r5, r6, lr}
 800ddd2:	4d0d      	ldr	r5, [pc, #52]	; (800de08 <__libc_init_array+0x38>)
 800ddd4:	4c0d      	ldr	r4, [pc, #52]	; (800de0c <__libc_init_array+0x3c>)
 800ddd6:	1b64      	subs	r4, r4, r5
 800ddd8:	10a4      	asrs	r4, r4, #2
 800ddda:	2600      	movs	r6, #0
 800dddc:	42a6      	cmp	r6, r4
 800ddde:	d109      	bne.n	800ddf4 <__libc_init_array+0x24>
 800dde0:	4d0b      	ldr	r5, [pc, #44]	; (800de10 <__libc_init_array+0x40>)
 800dde2:	4c0c      	ldr	r4, [pc, #48]	; (800de14 <__libc_init_array+0x44>)
 800dde4:	f002 fdcc 	bl	8010980 <_init>
 800dde8:	1b64      	subs	r4, r4, r5
 800ddea:	10a4      	asrs	r4, r4, #2
 800ddec:	2600      	movs	r6, #0
 800ddee:	42a6      	cmp	r6, r4
 800ddf0:	d105      	bne.n	800ddfe <__libc_init_array+0x2e>
 800ddf2:	bd70      	pop	{r4, r5, r6, pc}
 800ddf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddf8:	4798      	blx	r3
 800ddfa:	3601      	adds	r6, #1
 800ddfc:	e7ee      	b.n	800dddc <__libc_init_array+0xc>
 800ddfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800de02:	4798      	blx	r3
 800de04:	3601      	adds	r6, #1
 800de06:	e7f2      	b.n	800ddee <__libc_init_array+0x1e>
 800de08:	08010f3c 	.word	0x08010f3c
 800de0c:	08010f3c 	.word	0x08010f3c
 800de10:	08010f3c 	.word	0x08010f3c
 800de14:	08010f40 	.word	0x08010f40

0800de18 <malloc>:
 800de18:	4b02      	ldr	r3, [pc, #8]	; (800de24 <malloc+0xc>)
 800de1a:	4601      	mov	r1, r0
 800de1c:	6818      	ldr	r0, [r3, #0]
 800de1e:	f000 b88d 	b.w	800df3c <_malloc_r>
 800de22:	bf00      	nop
 800de24:	20000030 	.word	0x20000030

0800de28 <free>:
 800de28:	4b02      	ldr	r3, [pc, #8]	; (800de34 <free+0xc>)
 800de2a:	4601      	mov	r1, r0
 800de2c:	6818      	ldr	r0, [r3, #0]
 800de2e:	f000 b819 	b.w	800de64 <_free_r>
 800de32:	bf00      	nop
 800de34:	20000030 	.word	0x20000030

0800de38 <memcpy>:
 800de38:	440a      	add	r2, r1
 800de3a:	4291      	cmp	r1, r2
 800de3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800de40:	d100      	bne.n	800de44 <memcpy+0xc>
 800de42:	4770      	bx	lr
 800de44:	b510      	push	{r4, lr}
 800de46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de4e:	4291      	cmp	r1, r2
 800de50:	d1f9      	bne.n	800de46 <memcpy+0xe>
 800de52:	bd10      	pop	{r4, pc}

0800de54 <memset>:
 800de54:	4402      	add	r2, r0
 800de56:	4603      	mov	r3, r0
 800de58:	4293      	cmp	r3, r2
 800de5a:	d100      	bne.n	800de5e <memset+0xa>
 800de5c:	4770      	bx	lr
 800de5e:	f803 1b01 	strb.w	r1, [r3], #1
 800de62:	e7f9      	b.n	800de58 <memset+0x4>

0800de64 <_free_r>:
 800de64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de66:	2900      	cmp	r1, #0
 800de68:	d044      	beq.n	800def4 <_free_r+0x90>
 800de6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de6e:	9001      	str	r0, [sp, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	f1a1 0404 	sub.w	r4, r1, #4
 800de76:	bfb8      	it	lt
 800de78:	18e4      	addlt	r4, r4, r3
 800de7a:	f001 ff3b 	bl	800fcf4 <__malloc_lock>
 800de7e:	4a1e      	ldr	r2, [pc, #120]	; (800def8 <_free_r+0x94>)
 800de80:	9801      	ldr	r0, [sp, #4]
 800de82:	6813      	ldr	r3, [r2, #0]
 800de84:	b933      	cbnz	r3, 800de94 <_free_r+0x30>
 800de86:	6063      	str	r3, [r4, #4]
 800de88:	6014      	str	r4, [r2, #0]
 800de8a:	b003      	add	sp, #12
 800de8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de90:	f001 bf36 	b.w	800fd00 <__malloc_unlock>
 800de94:	42a3      	cmp	r3, r4
 800de96:	d908      	bls.n	800deaa <_free_r+0x46>
 800de98:	6825      	ldr	r5, [r4, #0]
 800de9a:	1961      	adds	r1, r4, r5
 800de9c:	428b      	cmp	r3, r1
 800de9e:	bf01      	itttt	eq
 800dea0:	6819      	ldreq	r1, [r3, #0]
 800dea2:	685b      	ldreq	r3, [r3, #4]
 800dea4:	1949      	addeq	r1, r1, r5
 800dea6:	6021      	streq	r1, [r4, #0]
 800dea8:	e7ed      	b.n	800de86 <_free_r+0x22>
 800deaa:	461a      	mov	r2, r3
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	b10b      	cbz	r3, 800deb4 <_free_r+0x50>
 800deb0:	42a3      	cmp	r3, r4
 800deb2:	d9fa      	bls.n	800deaa <_free_r+0x46>
 800deb4:	6811      	ldr	r1, [r2, #0]
 800deb6:	1855      	adds	r5, r2, r1
 800deb8:	42a5      	cmp	r5, r4
 800deba:	d10b      	bne.n	800ded4 <_free_r+0x70>
 800debc:	6824      	ldr	r4, [r4, #0]
 800debe:	4421      	add	r1, r4
 800dec0:	1854      	adds	r4, r2, r1
 800dec2:	42a3      	cmp	r3, r4
 800dec4:	6011      	str	r1, [r2, #0]
 800dec6:	d1e0      	bne.n	800de8a <_free_r+0x26>
 800dec8:	681c      	ldr	r4, [r3, #0]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	6053      	str	r3, [r2, #4]
 800dece:	4421      	add	r1, r4
 800ded0:	6011      	str	r1, [r2, #0]
 800ded2:	e7da      	b.n	800de8a <_free_r+0x26>
 800ded4:	d902      	bls.n	800dedc <_free_r+0x78>
 800ded6:	230c      	movs	r3, #12
 800ded8:	6003      	str	r3, [r0, #0]
 800deda:	e7d6      	b.n	800de8a <_free_r+0x26>
 800dedc:	6825      	ldr	r5, [r4, #0]
 800dede:	1961      	adds	r1, r4, r5
 800dee0:	428b      	cmp	r3, r1
 800dee2:	bf04      	itt	eq
 800dee4:	6819      	ldreq	r1, [r3, #0]
 800dee6:	685b      	ldreq	r3, [r3, #4]
 800dee8:	6063      	str	r3, [r4, #4]
 800deea:	bf04      	itt	eq
 800deec:	1949      	addeq	r1, r1, r5
 800deee:	6021      	streq	r1, [r4, #0]
 800def0:	6054      	str	r4, [r2, #4]
 800def2:	e7ca      	b.n	800de8a <_free_r+0x26>
 800def4:	b003      	add	sp, #12
 800def6:	bd30      	pop	{r4, r5, pc}
 800def8:	20008f6c 	.word	0x20008f6c

0800defc <sbrk_aligned>:
 800defc:	b570      	push	{r4, r5, r6, lr}
 800defe:	4e0e      	ldr	r6, [pc, #56]	; (800df38 <sbrk_aligned+0x3c>)
 800df00:	460c      	mov	r4, r1
 800df02:	6831      	ldr	r1, [r6, #0]
 800df04:	4605      	mov	r5, r0
 800df06:	b911      	cbnz	r1, 800df0e <sbrk_aligned+0x12>
 800df08:	f000 fd84 	bl	800ea14 <_sbrk_r>
 800df0c:	6030      	str	r0, [r6, #0]
 800df0e:	4621      	mov	r1, r4
 800df10:	4628      	mov	r0, r5
 800df12:	f000 fd7f 	bl	800ea14 <_sbrk_r>
 800df16:	1c43      	adds	r3, r0, #1
 800df18:	d00a      	beq.n	800df30 <sbrk_aligned+0x34>
 800df1a:	1cc4      	adds	r4, r0, #3
 800df1c:	f024 0403 	bic.w	r4, r4, #3
 800df20:	42a0      	cmp	r0, r4
 800df22:	d007      	beq.n	800df34 <sbrk_aligned+0x38>
 800df24:	1a21      	subs	r1, r4, r0
 800df26:	4628      	mov	r0, r5
 800df28:	f000 fd74 	bl	800ea14 <_sbrk_r>
 800df2c:	3001      	adds	r0, #1
 800df2e:	d101      	bne.n	800df34 <sbrk_aligned+0x38>
 800df30:	f04f 34ff 	mov.w	r4, #4294967295
 800df34:	4620      	mov	r0, r4
 800df36:	bd70      	pop	{r4, r5, r6, pc}
 800df38:	20008f70 	.word	0x20008f70

0800df3c <_malloc_r>:
 800df3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df40:	1ccd      	adds	r5, r1, #3
 800df42:	f025 0503 	bic.w	r5, r5, #3
 800df46:	3508      	adds	r5, #8
 800df48:	2d0c      	cmp	r5, #12
 800df4a:	bf38      	it	cc
 800df4c:	250c      	movcc	r5, #12
 800df4e:	2d00      	cmp	r5, #0
 800df50:	4607      	mov	r7, r0
 800df52:	db01      	blt.n	800df58 <_malloc_r+0x1c>
 800df54:	42a9      	cmp	r1, r5
 800df56:	d905      	bls.n	800df64 <_malloc_r+0x28>
 800df58:	230c      	movs	r3, #12
 800df5a:	603b      	str	r3, [r7, #0]
 800df5c:	2600      	movs	r6, #0
 800df5e:	4630      	mov	r0, r6
 800df60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df64:	4e2e      	ldr	r6, [pc, #184]	; (800e020 <_malloc_r+0xe4>)
 800df66:	f001 fec5 	bl	800fcf4 <__malloc_lock>
 800df6a:	6833      	ldr	r3, [r6, #0]
 800df6c:	461c      	mov	r4, r3
 800df6e:	bb34      	cbnz	r4, 800dfbe <_malloc_r+0x82>
 800df70:	4629      	mov	r1, r5
 800df72:	4638      	mov	r0, r7
 800df74:	f7ff ffc2 	bl	800defc <sbrk_aligned>
 800df78:	1c43      	adds	r3, r0, #1
 800df7a:	4604      	mov	r4, r0
 800df7c:	d14d      	bne.n	800e01a <_malloc_r+0xde>
 800df7e:	6834      	ldr	r4, [r6, #0]
 800df80:	4626      	mov	r6, r4
 800df82:	2e00      	cmp	r6, #0
 800df84:	d140      	bne.n	800e008 <_malloc_r+0xcc>
 800df86:	6823      	ldr	r3, [r4, #0]
 800df88:	4631      	mov	r1, r6
 800df8a:	4638      	mov	r0, r7
 800df8c:	eb04 0803 	add.w	r8, r4, r3
 800df90:	f000 fd40 	bl	800ea14 <_sbrk_r>
 800df94:	4580      	cmp	r8, r0
 800df96:	d13a      	bne.n	800e00e <_malloc_r+0xd2>
 800df98:	6821      	ldr	r1, [r4, #0]
 800df9a:	3503      	adds	r5, #3
 800df9c:	1a6d      	subs	r5, r5, r1
 800df9e:	f025 0503 	bic.w	r5, r5, #3
 800dfa2:	3508      	adds	r5, #8
 800dfa4:	2d0c      	cmp	r5, #12
 800dfa6:	bf38      	it	cc
 800dfa8:	250c      	movcc	r5, #12
 800dfaa:	4629      	mov	r1, r5
 800dfac:	4638      	mov	r0, r7
 800dfae:	f7ff ffa5 	bl	800defc <sbrk_aligned>
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	d02b      	beq.n	800e00e <_malloc_r+0xd2>
 800dfb6:	6823      	ldr	r3, [r4, #0]
 800dfb8:	442b      	add	r3, r5
 800dfba:	6023      	str	r3, [r4, #0]
 800dfbc:	e00e      	b.n	800dfdc <_malloc_r+0xa0>
 800dfbe:	6822      	ldr	r2, [r4, #0]
 800dfc0:	1b52      	subs	r2, r2, r5
 800dfc2:	d41e      	bmi.n	800e002 <_malloc_r+0xc6>
 800dfc4:	2a0b      	cmp	r2, #11
 800dfc6:	d916      	bls.n	800dff6 <_malloc_r+0xba>
 800dfc8:	1961      	adds	r1, r4, r5
 800dfca:	42a3      	cmp	r3, r4
 800dfcc:	6025      	str	r5, [r4, #0]
 800dfce:	bf18      	it	ne
 800dfd0:	6059      	strne	r1, [r3, #4]
 800dfd2:	6863      	ldr	r3, [r4, #4]
 800dfd4:	bf08      	it	eq
 800dfd6:	6031      	streq	r1, [r6, #0]
 800dfd8:	5162      	str	r2, [r4, r5]
 800dfda:	604b      	str	r3, [r1, #4]
 800dfdc:	4638      	mov	r0, r7
 800dfde:	f104 060b 	add.w	r6, r4, #11
 800dfe2:	f001 fe8d 	bl	800fd00 <__malloc_unlock>
 800dfe6:	f026 0607 	bic.w	r6, r6, #7
 800dfea:	1d23      	adds	r3, r4, #4
 800dfec:	1af2      	subs	r2, r6, r3
 800dfee:	d0b6      	beq.n	800df5e <_malloc_r+0x22>
 800dff0:	1b9b      	subs	r3, r3, r6
 800dff2:	50a3      	str	r3, [r4, r2]
 800dff4:	e7b3      	b.n	800df5e <_malloc_r+0x22>
 800dff6:	6862      	ldr	r2, [r4, #4]
 800dff8:	42a3      	cmp	r3, r4
 800dffa:	bf0c      	ite	eq
 800dffc:	6032      	streq	r2, [r6, #0]
 800dffe:	605a      	strne	r2, [r3, #4]
 800e000:	e7ec      	b.n	800dfdc <_malloc_r+0xa0>
 800e002:	4623      	mov	r3, r4
 800e004:	6864      	ldr	r4, [r4, #4]
 800e006:	e7b2      	b.n	800df6e <_malloc_r+0x32>
 800e008:	4634      	mov	r4, r6
 800e00a:	6876      	ldr	r6, [r6, #4]
 800e00c:	e7b9      	b.n	800df82 <_malloc_r+0x46>
 800e00e:	230c      	movs	r3, #12
 800e010:	603b      	str	r3, [r7, #0]
 800e012:	4638      	mov	r0, r7
 800e014:	f001 fe74 	bl	800fd00 <__malloc_unlock>
 800e018:	e7a1      	b.n	800df5e <_malloc_r+0x22>
 800e01a:	6025      	str	r5, [r4, #0]
 800e01c:	e7de      	b.n	800dfdc <_malloc_r+0xa0>
 800e01e:	bf00      	nop
 800e020:	20008f6c 	.word	0x20008f6c

0800e024 <__cvt>:
 800e024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e028:	ec55 4b10 	vmov	r4, r5, d0
 800e02c:	2d00      	cmp	r5, #0
 800e02e:	460e      	mov	r6, r1
 800e030:	4619      	mov	r1, r3
 800e032:	462b      	mov	r3, r5
 800e034:	bfbb      	ittet	lt
 800e036:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e03a:	461d      	movlt	r5, r3
 800e03c:	2300      	movge	r3, #0
 800e03e:	232d      	movlt	r3, #45	; 0x2d
 800e040:	700b      	strb	r3, [r1, #0]
 800e042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e044:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e048:	4691      	mov	r9, r2
 800e04a:	f023 0820 	bic.w	r8, r3, #32
 800e04e:	bfbc      	itt	lt
 800e050:	4622      	movlt	r2, r4
 800e052:	4614      	movlt	r4, r2
 800e054:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e058:	d005      	beq.n	800e066 <__cvt+0x42>
 800e05a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e05e:	d100      	bne.n	800e062 <__cvt+0x3e>
 800e060:	3601      	adds	r6, #1
 800e062:	2102      	movs	r1, #2
 800e064:	e000      	b.n	800e068 <__cvt+0x44>
 800e066:	2103      	movs	r1, #3
 800e068:	ab03      	add	r3, sp, #12
 800e06a:	9301      	str	r3, [sp, #4]
 800e06c:	ab02      	add	r3, sp, #8
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	ec45 4b10 	vmov	d0, r4, r5
 800e074:	4653      	mov	r3, sl
 800e076:	4632      	mov	r2, r6
 800e078:	f000 fe2a 	bl	800ecd0 <_dtoa_r>
 800e07c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e080:	4607      	mov	r7, r0
 800e082:	d102      	bne.n	800e08a <__cvt+0x66>
 800e084:	f019 0f01 	tst.w	r9, #1
 800e088:	d022      	beq.n	800e0d0 <__cvt+0xac>
 800e08a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e08e:	eb07 0906 	add.w	r9, r7, r6
 800e092:	d110      	bne.n	800e0b6 <__cvt+0x92>
 800e094:	783b      	ldrb	r3, [r7, #0]
 800e096:	2b30      	cmp	r3, #48	; 0x30
 800e098:	d10a      	bne.n	800e0b0 <__cvt+0x8c>
 800e09a:	2200      	movs	r2, #0
 800e09c:	2300      	movs	r3, #0
 800e09e:	4620      	mov	r0, r4
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	f7f2 fd21 	bl	8000ae8 <__aeabi_dcmpeq>
 800e0a6:	b918      	cbnz	r0, 800e0b0 <__cvt+0x8c>
 800e0a8:	f1c6 0601 	rsb	r6, r6, #1
 800e0ac:	f8ca 6000 	str.w	r6, [sl]
 800e0b0:	f8da 3000 	ldr.w	r3, [sl]
 800e0b4:	4499      	add	r9, r3
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	4629      	mov	r1, r5
 800e0be:	f7f2 fd13 	bl	8000ae8 <__aeabi_dcmpeq>
 800e0c2:	b108      	cbz	r0, 800e0c8 <__cvt+0xa4>
 800e0c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0c8:	2230      	movs	r2, #48	; 0x30
 800e0ca:	9b03      	ldr	r3, [sp, #12]
 800e0cc:	454b      	cmp	r3, r9
 800e0ce:	d307      	bcc.n	800e0e0 <__cvt+0xbc>
 800e0d0:	9b03      	ldr	r3, [sp, #12]
 800e0d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0d4:	1bdb      	subs	r3, r3, r7
 800e0d6:	4638      	mov	r0, r7
 800e0d8:	6013      	str	r3, [r2, #0]
 800e0da:	b004      	add	sp, #16
 800e0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0e0:	1c59      	adds	r1, r3, #1
 800e0e2:	9103      	str	r1, [sp, #12]
 800e0e4:	701a      	strb	r2, [r3, #0]
 800e0e6:	e7f0      	b.n	800e0ca <__cvt+0xa6>

0800e0e8 <__exponent>:
 800e0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2900      	cmp	r1, #0
 800e0ee:	bfb8      	it	lt
 800e0f0:	4249      	neglt	r1, r1
 800e0f2:	f803 2b02 	strb.w	r2, [r3], #2
 800e0f6:	bfb4      	ite	lt
 800e0f8:	222d      	movlt	r2, #45	; 0x2d
 800e0fa:	222b      	movge	r2, #43	; 0x2b
 800e0fc:	2909      	cmp	r1, #9
 800e0fe:	7042      	strb	r2, [r0, #1]
 800e100:	dd2a      	ble.n	800e158 <__exponent+0x70>
 800e102:	f10d 0407 	add.w	r4, sp, #7
 800e106:	46a4      	mov	ip, r4
 800e108:	270a      	movs	r7, #10
 800e10a:	46a6      	mov	lr, r4
 800e10c:	460a      	mov	r2, r1
 800e10e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e112:	fb07 1516 	mls	r5, r7, r6, r1
 800e116:	3530      	adds	r5, #48	; 0x30
 800e118:	2a63      	cmp	r2, #99	; 0x63
 800e11a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e11e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e122:	4631      	mov	r1, r6
 800e124:	dcf1      	bgt.n	800e10a <__exponent+0x22>
 800e126:	3130      	adds	r1, #48	; 0x30
 800e128:	f1ae 0502 	sub.w	r5, lr, #2
 800e12c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e130:	1c44      	adds	r4, r0, #1
 800e132:	4629      	mov	r1, r5
 800e134:	4561      	cmp	r1, ip
 800e136:	d30a      	bcc.n	800e14e <__exponent+0x66>
 800e138:	f10d 0209 	add.w	r2, sp, #9
 800e13c:	eba2 020e 	sub.w	r2, r2, lr
 800e140:	4565      	cmp	r5, ip
 800e142:	bf88      	it	hi
 800e144:	2200      	movhi	r2, #0
 800e146:	4413      	add	r3, r2
 800e148:	1a18      	subs	r0, r3, r0
 800e14a:	b003      	add	sp, #12
 800e14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e152:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e156:	e7ed      	b.n	800e134 <__exponent+0x4c>
 800e158:	2330      	movs	r3, #48	; 0x30
 800e15a:	3130      	adds	r1, #48	; 0x30
 800e15c:	7083      	strb	r3, [r0, #2]
 800e15e:	70c1      	strb	r1, [r0, #3]
 800e160:	1d03      	adds	r3, r0, #4
 800e162:	e7f1      	b.n	800e148 <__exponent+0x60>

0800e164 <_printf_float>:
 800e164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e168:	ed2d 8b02 	vpush	{d8}
 800e16c:	b08d      	sub	sp, #52	; 0x34
 800e16e:	460c      	mov	r4, r1
 800e170:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e174:	4616      	mov	r6, r2
 800e176:	461f      	mov	r7, r3
 800e178:	4605      	mov	r5, r0
 800e17a:	f001 fd4f 	bl	800fc1c <_localeconv_r>
 800e17e:	f8d0 a000 	ldr.w	sl, [r0]
 800e182:	4650      	mov	r0, sl
 800e184:	f7f2 f834 	bl	80001f0 <strlen>
 800e188:	2300      	movs	r3, #0
 800e18a:	930a      	str	r3, [sp, #40]	; 0x28
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	9305      	str	r3, [sp, #20]
 800e190:	f8d8 3000 	ldr.w	r3, [r8]
 800e194:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e198:	3307      	adds	r3, #7
 800e19a:	f023 0307 	bic.w	r3, r3, #7
 800e19e:	f103 0208 	add.w	r2, r3, #8
 800e1a2:	f8c8 2000 	str.w	r2, [r8]
 800e1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e1ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e1b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1b6:	9307      	str	r3, [sp, #28]
 800e1b8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e1bc:	ee08 0a10 	vmov	s16, r0
 800e1c0:	4b9f      	ldr	r3, [pc, #636]	; (800e440 <_printf_float+0x2dc>)
 800e1c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ca:	f7f2 fcbf 	bl	8000b4c <__aeabi_dcmpun>
 800e1ce:	bb88      	cbnz	r0, 800e234 <_printf_float+0xd0>
 800e1d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1d4:	4b9a      	ldr	r3, [pc, #616]	; (800e440 <_printf_float+0x2dc>)
 800e1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1da:	f7f2 fc99 	bl	8000b10 <__aeabi_dcmple>
 800e1de:	bb48      	cbnz	r0, 800e234 <_printf_float+0xd0>
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	4649      	mov	r1, r9
 800e1e8:	f7f2 fc88 	bl	8000afc <__aeabi_dcmplt>
 800e1ec:	b110      	cbz	r0, 800e1f4 <_printf_float+0x90>
 800e1ee:	232d      	movs	r3, #45	; 0x2d
 800e1f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1f4:	4b93      	ldr	r3, [pc, #588]	; (800e444 <_printf_float+0x2e0>)
 800e1f6:	4894      	ldr	r0, [pc, #592]	; (800e448 <_printf_float+0x2e4>)
 800e1f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e1fc:	bf94      	ite	ls
 800e1fe:	4698      	movls	r8, r3
 800e200:	4680      	movhi	r8, r0
 800e202:	2303      	movs	r3, #3
 800e204:	6123      	str	r3, [r4, #16]
 800e206:	9b05      	ldr	r3, [sp, #20]
 800e208:	f023 0204 	bic.w	r2, r3, #4
 800e20c:	6022      	str	r2, [r4, #0]
 800e20e:	f04f 0900 	mov.w	r9, #0
 800e212:	9700      	str	r7, [sp, #0]
 800e214:	4633      	mov	r3, r6
 800e216:	aa0b      	add	r2, sp, #44	; 0x2c
 800e218:	4621      	mov	r1, r4
 800e21a:	4628      	mov	r0, r5
 800e21c:	f000 f9d8 	bl	800e5d0 <_printf_common>
 800e220:	3001      	adds	r0, #1
 800e222:	f040 8090 	bne.w	800e346 <_printf_float+0x1e2>
 800e226:	f04f 30ff 	mov.w	r0, #4294967295
 800e22a:	b00d      	add	sp, #52	; 0x34
 800e22c:	ecbd 8b02 	vpop	{d8}
 800e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e234:	4642      	mov	r2, r8
 800e236:	464b      	mov	r3, r9
 800e238:	4640      	mov	r0, r8
 800e23a:	4649      	mov	r1, r9
 800e23c:	f7f2 fc86 	bl	8000b4c <__aeabi_dcmpun>
 800e240:	b140      	cbz	r0, 800e254 <_printf_float+0xf0>
 800e242:	464b      	mov	r3, r9
 800e244:	2b00      	cmp	r3, #0
 800e246:	bfbc      	itt	lt
 800e248:	232d      	movlt	r3, #45	; 0x2d
 800e24a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e24e:	487f      	ldr	r0, [pc, #508]	; (800e44c <_printf_float+0x2e8>)
 800e250:	4b7f      	ldr	r3, [pc, #508]	; (800e450 <_printf_float+0x2ec>)
 800e252:	e7d1      	b.n	800e1f8 <_printf_float+0x94>
 800e254:	6863      	ldr	r3, [r4, #4]
 800e256:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e25a:	9206      	str	r2, [sp, #24]
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	d13f      	bne.n	800e2e0 <_printf_float+0x17c>
 800e260:	2306      	movs	r3, #6
 800e262:	6063      	str	r3, [r4, #4]
 800e264:	9b05      	ldr	r3, [sp, #20]
 800e266:	6861      	ldr	r1, [r4, #4]
 800e268:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e26c:	2300      	movs	r3, #0
 800e26e:	9303      	str	r3, [sp, #12]
 800e270:	ab0a      	add	r3, sp, #40	; 0x28
 800e272:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e276:	ab09      	add	r3, sp, #36	; 0x24
 800e278:	ec49 8b10 	vmov	d0, r8, r9
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	6022      	str	r2, [r4, #0]
 800e280:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e284:	4628      	mov	r0, r5
 800e286:	f7ff fecd 	bl	800e024 <__cvt>
 800e28a:	9b06      	ldr	r3, [sp, #24]
 800e28c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e28e:	2b47      	cmp	r3, #71	; 0x47
 800e290:	4680      	mov	r8, r0
 800e292:	d108      	bne.n	800e2a6 <_printf_float+0x142>
 800e294:	1cc8      	adds	r0, r1, #3
 800e296:	db02      	blt.n	800e29e <_printf_float+0x13a>
 800e298:	6863      	ldr	r3, [r4, #4]
 800e29a:	4299      	cmp	r1, r3
 800e29c:	dd41      	ble.n	800e322 <_printf_float+0x1be>
 800e29e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e2a2:	fa5f fb8b 	uxtb.w	fp, fp
 800e2a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e2aa:	d820      	bhi.n	800e2ee <_printf_float+0x18a>
 800e2ac:	3901      	subs	r1, #1
 800e2ae:	465a      	mov	r2, fp
 800e2b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e2b4:	9109      	str	r1, [sp, #36]	; 0x24
 800e2b6:	f7ff ff17 	bl	800e0e8 <__exponent>
 800e2ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2bc:	1813      	adds	r3, r2, r0
 800e2be:	2a01      	cmp	r2, #1
 800e2c0:	4681      	mov	r9, r0
 800e2c2:	6123      	str	r3, [r4, #16]
 800e2c4:	dc02      	bgt.n	800e2cc <_printf_float+0x168>
 800e2c6:	6822      	ldr	r2, [r4, #0]
 800e2c8:	07d2      	lsls	r2, r2, #31
 800e2ca:	d501      	bpl.n	800e2d0 <_printf_float+0x16c>
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	6123      	str	r3, [r4, #16]
 800e2d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d09c      	beq.n	800e212 <_printf_float+0xae>
 800e2d8:	232d      	movs	r3, #45	; 0x2d
 800e2da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2de:	e798      	b.n	800e212 <_printf_float+0xae>
 800e2e0:	9a06      	ldr	r2, [sp, #24]
 800e2e2:	2a47      	cmp	r2, #71	; 0x47
 800e2e4:	d1be      	bne.n	800e264 <_printf_float+0x100>
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1bc      	bne.n	800e264 <_printf_float+0x100>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e7b9      	b.n	800e262 <_printf_float+0xfe>
 800e2ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e2f2:	d118      	bne.n	800e326 <_printf_float+0x1c2>
 800e2f4:	2900      	cmp	r1, #0
 800e2f6:	6863      	ldr	r3, [r4, #4]
 800e2f8:	dd0b      	ble.n	800e312 <_printf_float+0x1ae>
 800e2fa:	6121      	str	r1, [r4, #16]
 800e2fc:	b913      	cbnz	r3, 800e304 <_printf_float+0x1a0>
 800e2fe:	6822      	ldr	r2, [r4, #0]
 800e300:	07d0      	lsls	r0, r2, #31
 800e302:	d502      	bpl.n	800e30a <_printf_float+0x1a6>
 800e304:	3301      	adds	r3, #1
 800e306:	440b      	add	r3, r1
 800e308:	6123      	str	r3, [r4, #16]
 800e30a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e30c:	f04f 0900 	mov.w	r9, #0
 800e310:	e7de      	b.n	800e2d0 <_printf_float+0x16c>
 800e312:	b913      	cbnz	r3, 800e31a <_printf_float+0x1b6>
 800e314:	6822      	ldr	r2, [r4, #0]
 800e316:	07d2      	lsls	r2, r2, #31
 800e318:	d501      	bpl.n	800e31e <_printf_float+0x1ba>
 800e31a:	3302      	adds	r3, #2
 800e31c:	e7f4      	b.n	800e308 <_printf_float+0x1a4>
 800e31e:	2301      	movs	r3, #1
 800e320:	e7f2      	b.n	800e308 <_printf_float+0x1a4>
 800e322:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e328:	4299      	cmp	r1, r3
 800e32a:	db05      	blt.n	800e338 <_printf_float+0x1d4>
 800e32c:	6823      	ldr	r3, [r4, #0]
 800e32e:	6121      	str	r1, [r4, #16]
 800e330:	07d8      	lsls	r0, r3, #31
 800e332:	d5ea      	bpl.n	800e30a <_printf_float+0x1a6>
 800e334:	1c4b      	adds	r3, r1, #1
 800e336:	e7e7      	b.n	800e308 <_printf_float+0x1a4>
 800e338:	2900      	cmp	r1, #0
 800e33a:	bfd4      	ite	le
 800e33c:	f1c1 0202 	rsble	r2, r1, #2
 800e340:	2201      	movgt	r2, #1
 800e342:	4413      	add	r3, r2
 800e344:	e7e0      	b.n	800e308 <_printf_float+0x1a4>
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	055a      	lsls	r2, r3, #21
 800e34a:	d407      	bmi.n	800e35c <_printf_float+0x1f8>
 800e34c:	6923      	ldr	r3, [r4, #16]
 800e34e:	4642      	mov	r2, r8
 800e350:	4631      	mov	r1, r6
 800e352:	4628      	mov	r0, r5
 800e354:	47b8      	blx	r7
 800e356:	3001      	adds	r0, #1
 800e358:	d12c      	bne.n	800e3b4 <_printf_float+0x250>
 800e35a:	e764      	b.n	800e226 <_printf_float+0xc2>
 800e35c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e360:	f240 80e0 	bls.w	800e524 <_printf_float+0x3c0>
 800e364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e368:	2200      	movs	r2, #0
 800e36a:	2300      	movs	r3, #0
 800e36c:	f7f2 fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 800e370:	2800      	cmp	r0, #0
 800e372:	d034      	beq.n	800e3de <_printf_float+0x27a>
 800e374:	4a37      	ldr	r2, [pc, #220]	; (800e454 <_printf_float+0x2f0>)
 800e376:	2301      	movs	r3, #1
 800e378:	4631      	mov	r1, r6
 800e37a:	4628      	mov	r0, r5
 800e37c:	47b8      	blx	r7
 800e37e:	3001      	adds	r0, #1
 800e380:	f43f af51 	beq.w	800e226 <_printf_float+0xc2>
 800e384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e388:	429a      	cmp	r2, r3
 800e38a:	db02      	blt.n	800e392 <_printf_float+0x22e>
 800e38c:	6823      	ldr	r3, [r4, #0]
 800e38e:	07d8      	lsls	r0, r3, #31
 800e390:	d510      	bpl.n	800e3b4 <_printf_float+0x250>
 800e392:	ee18 3a10 	vmov	r3, s16
 800e396:	4652      	mov	r2, sl
 800e398:	4631      	mov	r1, r6
 800e39a:	4628      	mov	r0, r5
 800e39c:	47b8      	blx	r7
 800e39e:	3001      	adds	r0, #1
 800e3a0:	f43f af41 	beq.w	800e226 <_printf_float+0xc2>
 800e3a4:	f04f 0800 	mov.w	r8, #0
 800e3a8:	f104 091a 	add.w	r9, r4, #26
 800e3ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	4543      	cmp	r3, r8
 800e3b2:	dc09      	bgt.n	800e3c8 <_printf_float+0x264>
 800e3b4:	6823      	ldr	r3, [r4, #0]
 800e3b6:	079b      	lsls	r3, r3, #30
 800e3b8:	f100 8105 	bmi.w	800e5c6 <_printf_float+0x462>
 800e3bc:	68e0      	ldr	r0, [r4, #12]
 800e3be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3c0:	4298      	cmp	r0, r3
 800e3c2:	bfb8      	it	lt
 800e3c4:	4618      	movlt	r0, r3
 800e3c6:	e730      	b.n	800e22a <_printf_float+0xc6>
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	464a      	mov	r2, r9
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	47b8      	blx	r7
 800e3d2:	3001      	adds	r0, #1
 800e3d4:	f43f af27 	beq.w	800e226 <_printf_float+0xc2>
 800e3d8:	f108 0801 	add.w	r8, r8, #1
 800e3dc:	e7e6      	b.n	800e3ac <_printf_float+0x248>
 800e3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	dc39      	bgt.n	800e458 <_printf_float+0x2f4>
 800e3e4:	4a1b      	ldr	r2, [pc, #108]	; (800e454 <_printf_float+0x2f0>)
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	47b8      	blx	r7
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	f43f af19 	beq.w	800e226 <_printf_float+0xc2>
 800e3f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	d102      	bne.n	800e402 <_printf_float+0x29e>
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	07d9      	lsls	r1, r3, #31
 800e400:	d5d8      	bpl.n	800e3b4 <_printf_float+0x250>
 800e402:	ee18 3a10 	vmov	r3, s16
 800e406:	4652      	mov	r2, sl
 800e408:	4631      	mov	r1, r6
 800e40a:	4628      	mov	r0, r5
 800e40c:	47b8      	blx	r7
 800e40e:	3001      	adds	r0, #1
 800e410:	f43f af09 	beq.w	800e226 <_printf_float+0xc2>
 800e414:	f04f 0900 	mov.w	r9, #0
 800e418:	f104 0a1a 	add.w	sl, r4, #26
 800e41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e41e:	425b      	negs	r3, r3
 800e420:	454b      	cmp	r3, r9
 800e422:	dc01      	bgt.n	800e428 <_printf_float+0x2c4>
 800e424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e426:	e792      	b.n	800e34e <_printf_float+0x1ea>
 800e428:	2301      	movs	r3, #1
 800e42a:	4652      	mov	r2, sl
 800e42c:	4631      	mov	r1, r6
 800e42e:	4628      	mov	r0, r5
 800e430:	47b8      	blx	r7
 800e432:	3001      	adds	r0, #1
 800e434:	f43f aef7 	beq.w	800e226 <_printf_float+0xc2>
 800e438:	f109 0901 	add.w	r9, r9, #1
 800e43c:	e7ee      	b.n	800e41c <_printf_float+0x2b8>
 800e43e:	bf00      	nop
 800e440:	7fefffff 	.word	0x7fefffff
 800e444:	08010b60 	.word	0x08010b60
 800e448:	08010b64 	.word	0x08010b64
 800e44c:	08010b6c 	.word	0x08010b6c
 800e450:	08010b68 	.word	0x08010b68
 800e454:	08010b70 	.word	0x08010b70
 800e458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e45a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e45c:	429a      	cmp	r2, r3
 800e45e:	bfa8      	it	ge
 800e460:	461a      	movge	r2, r3
 800e462:	2a00      	cmp	r2, #0
 800e464:	4691      	mov	r9, r2
 800e466:	dc37      	bgt.n	800e4d8 <_printf_float+0x374>
 800e468:	f04f 0b00 	mov.w	fp, #0
 800e46c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e470:	f104 021a 	add.w	r2, r4, #26
 800e474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e476:	9305      	str	r3, [sp, #20]
 800e478:	eba3 0309 	sub.w	r3, r3, r9
 800e47c:	455b      	cmp	r3, fp
 800e47e:	dc33      	bgt.n	800e4e8 <_printf_float+0x384>
 800e480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e484:	429a      	cmp	r2, r3
 800e486:	db3b      	blt.n	800e500 <_printf_float+0x39c>
 800e488:	6823      	ldr	r3, [r4, #0]
 800e48a:	07da      	lsls	r2, r3, #31
 800e48c:	d438      	bmi.n	800e500 <_printf_float+0x39c>
 800e48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e490:	9a05      	ldr	r2, [sp, #20]
 800e492:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e494:	1a9a      	subs	r2, r3, r2
 800e496:	eba3 0901 	sub.w	r9, r3, r1
 800e49a:	4591      	cmp	r9, r2
 800e49c:	bfa8      	it	ge
 800e49e:	4691      	movge	r9, r2
 800e4a0:	f1b9 0f00 	cmp.w	r9, #0
 800e4a4:	dc35      	bgt.n	800e512 <_printf_float+0x3ae>
 800e4a6:	f04f 0800 	mov.w	r8, #0
 800e4aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4ae:	f104 0a1a 	add.w	sl, r4, #26
 800e4b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4b6:	1a9b      	subs	r3, r3, r2
 800e4b8:	eba3 0309 	sub.w	r3, r3, r9
 800e4bc:	4543      	cmp	r3, r8
 800e4be:	f77f af79 	ble.w	800e3b4 <_printf_float+0x250>
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	4652      	mov	r2, sl
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	47b8      	blx	r7
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	f43f aeaa 	beq.w	800e226 <_printf_float+0xc2>
 800e4d2:	f108 0801 	add.w	r8, r8, #1
 800e4d6:	e7ec      	b.n	800e4b2 <_printf_float+0x34e>
 800e4d8:	4613      	mov	r3, r2
 800e4da:	4631      	mov	r1, r6
 800e4dc:	4642      	mov	r2, r8
 800e4de:	4628      	mov	r0, r5
 800e4e0:	47b8      	blx	r7
 800e4e2:	3001      	adds	r0, #1
 800e4e4:	d1c0      	bne.n	800e468 <_printf_float+0x304>
 800e4e6:	e69e      	b.n	800e226 <_printf_float+0xc2>
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	4631      	mov	r1, r6
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	9205      	str	r2, [sp, #20]
 800e4f0:	47b8      	blx	r7
 800e4f2:	3001      	adds	r0, #1
 800e4f4:	f43f ae97 	beq.w	800e226 <_printf_float+0xc2>
 800e4f8:	9a05      	ldr	r2, [sp, #20]
 800e4fa:	f10b 0b01 	add.w	fp, fp, #1
 800e4fe:	e7b9      	b.n	800e474 <_printf_float+0x310>
 800e500:	ee18 3a10 	vmov	r3, s16
 800e504:	4652      	mov	r2, sl
 800e506:	4631      	mov	r1, r6
 800e508:	4628      	mov	r0, r5
 800e50a:	47b8      	blx	r7
 800e50c:	3001      	adds	r0, #1
 800e50e:	d1be      	bne.n	800e48e <_printf_float+0x32a>
 800e510:	e689      	b.n	800e226 <_printf_float+0xc2>
 800e512:	9a05      	ldr	r2, [sp, #20]
 800e514:	464b      	mov	r3, r9
 800e516:	4442      	add	r2, r8
 800e518:	4631      	mov	r1, r6
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b8      	blx	r7
 800e51e:	3001      	adds	r0, #1
 800e520:	d1c1      	bne.n	800e4a6 <_printf_float+0x342>
 800e522:	e680      	b.n	800e226 <_printf_float+0xc2>
 800e524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e526:	2a01      	cmp	r2, #1
 800e528:	dc01      	bgt.n	800e52e <_printf_float+0x3ca>
 800e52a:	07db      	lsls	r3, r3, #31
 800e52c:	d538      	bpl.n	800e5a0 <_printf_float+0x43c>
 800e52e:	2301      	movs	r3, #1
 800e530:	4642      	mov	r2, r8
 800e532:	4631      	mov	r1, r6
 800e534:	4628      	mov	r0, r5
 800e536:	47b8      	blx	r7
 800e538:	3001      	adds	r0, #1
 800e53a:	f43f ae74 	beq.w	800e226 <_printf_float+0xc2>
 800e53e:	ee18 3a10 	vmov	r3, s16
 800e542:	4652      	mov	r2, sl
 800e544:	4631      	mov	r1, r6
 800e546:	4628      	mov	r0, r5
 800e548:	47b8      	blx	r7
 800e54a:	3001      	adds	r0, #1
 800e54c:	f43f ae6b 	beq.w	800e226 <_printf_float+0xc2>
 800e550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e554:	2200      	movs	r2, #0
 800e556:	2300      	movs	r3, #0
 800e558:	f7f2 fac6 	bl	8000ae8 <__aeabi_dcmpeq>
 800e55c:	b9d8      	cbnz	r0, 800e596 <_printf_float+0x432>
 800e55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e560:	f108 0201 	add.w	r2, r8, #1
 800e564:	3b01      	subs	r3, #1
 800e566:	4631      	mov	r1, r6
 800e568:	4628      	mov	r0, r5
 800e56a:	47b8      	blx	r7
 800e56c:	3001      	adds	r0, #1
 800e56e:	d10e      	bne.n	800e58e <_printf_float+0x42a>
 800e570:	e659      	b.n	800e226 <_printf_float+0xc2>
 800e572:	2301      	movs	r3, #1
 800e574:	4652      	mov	r2, sl
 800e576:	4631      	mov	r1, r6
 800e578:	4628      	mov	r0, r5
 800e57a:	47b8      	blx	r7
 800e57c:	3001      	adds	r0, #1
 800e57e:	f43f ae52 	beq.w	800e226 <_printf_float+0xc2>
 800e582:	f108 0801 	add.w	r8, r8, #1
 800e586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e588:	3b01      	subs	r3, #1
 800e58a:	4543      	cmp	r3, r8
 800e58c:	dcf1      	bgt.n	800e572 <_printf_float+0x40e>
 800e58e:	464b      	mov	r3, r9
 800e590:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e594:	e6dc      	b.n	800e350 <_printf_float+0x1ec>
 800e596:	f04f 0800 	mov.w	r8, #0
 800e59a:	f104 0a1a 	add.w	sl, r4, #26
 800e59e:	e7f2      	b.n	800e586 <_printf_float+0x422>
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	4642      	mov	r2, r8
 800e5a4:	e7df      	b.n	800e566 <_printf_float+0x402>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	464a      	mov	r2, r9
 800e5aa:	4631      	mov	r1, r6
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	47b8      	blx	r7
 800e5b0:	3001      	adds	r0, #1
 800e5b2:	f43f ae38 	beq.w	800e226 <_printf_float+0xc2>
 800e5b6:	f108 0801 	add.w	r8, r8, #1
 800e5ba:	68e3      	ldr	r3, [r4, #12]
 800e5bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5be:	1a5b      	subs	r3, r3, r1
 800e5c0:	4543      	cmp	r3, r8
 800e5c2:	dcf0      	bgt.n	800e5a6 <_printf_float+0x442>
 800e5c4:	e6fa      	b.n	800e3bc <_printf_float+0x258>
 800e5c6:	f04f 0800 	mov.w	r8, #0
 800e5ca:	f104 0919 	add.w	r9, r4, #25
 800e5ce:	e7f4      	b.n	800e5ba <_printf_float+0x456>

0800e5d0 <_printf_common>:
 800e5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5d4:	4616      	mov	r6, r2
 800e5d6:	4699      	mov	r9, r3
 800e5d8:	688a      	ldr	r2, [r1, #8]
 800e5da:	690b      	ldr	r3, [r1, #16]
 800e5dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	bfb8      	it	lt
 800e5e4:	4613      	movlt	r3, r2
 800e5e6:	6033      	str	r3, [r6, #0]
 800e5e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5ec:	4607      	mov	r7, r0
 800e5ee:	460c      	mov	r4, r1
 800e5f0:	b10a      	cbz	r2, 800e5f6 <_printf_common+0x26>
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	6033      	str	r3, [r6, #0]
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	0699      	lsls	r1, r3, #26
 800e5fa:	bf42      	ittt	mi
 800e5fc:	6833      	ldrmi	r3, [r6, #0]
 800e5fe:	3302      	addmi	r3, #2
 800e600:	6033      	strmi	r3, [r6, #0]
 800e602:	6825      	ldr	r5, [r4, #0]
 800e604:	f015 0506 	ands.w	r5, r5, #6
 800e608:	d106      	bne.n	800e618 <_printf_common+0x48>
 800e60a:	f104 0a19 	add.w	sl, r4, #25
 800e60e:	68e3      	ldr	r3, [r4, #12]
 800e610:	6832      	ldr	r2, [r6, #0]
 800e612:	1a9b      	subs	r3, r3, r2
 800e614:	42ab      	cmp	r3, r5
 800e616:	dc26      	bgt.n	800e666 <_printf_common+0x96>
 800e618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e61c:	1e13      	subs	r3, r2, #0
 800e61e:	6822      	ldr	r2, [r4, #0]
 800e620:	bf18      	it	ne
 800e622:	2301      	movne	r3, #1
 800e624:	0692      	lsls	r2, r2, #26
 800e626:	d42b      	bmi.n	800e680 <_printf_common+0xb0>
 800e628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e62c:	4649      	mov	r1, r9
 800e62e:	4638      	mov	r0, r7
 800e630:	47c0      	blx	r8
 800e632:	3001      	adds	r0, #1
 800e634:	d01e      	beq.n	800e674 <_printf_common+0xa4>
 800e636:	6823      	ldr	r3, [r4, #0]
 800e638:	68e5      	ldr	r5, [r4, #12]
 800e63a:	6832      	ldr	r2, [r6, #0]
 800e63c:	f003 0306 	and.w	r3, r3, #6
 800e640:	2b04      	cmp	r3, #4
 800e642:	bf08      	it	eq
 800e644:	1aad      	subeq	r5, r5, r2
 800e646:	68a3      	ldr	r3, [r4, #8]
 800e648:	6922      	ldr	r2, [r4, #16]
 800e64a:	bf0c      	ite	eq
 800e64c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e650:	2500      	movne	r5, #0
 800e652:	4293      	cmp	r3, r2
 800e654:	bfc4      	itt	gt
 800e656:	1a9b      	subgt	r3, r3, r2
 800e658:	18ed      	addgt	r5, r5, r3
 800e65a:	2600      	movs	r6, #0
 800e65c:	341a      	adds	r4, #26
 800e65e:	42b5      	cmp	r5, r6
 800e660:	d11a      	bne.n	800e698 <_printf_common+0xc8>
 800e662:	2000      	movs	r0, #0
 800e664:	e008      	b.n	800e678 <_printf_common+0xa8>
 800e666:	2301      	movs	r3, #1
 800e668:	4652      	mov	r2, sl
 800e66a:	4649      	mov	r1, r9
 800e66c:	4638      	mov	r0, r7
 800e66e:	47c0      	blx	r8
 800e670:	3001      	adds	r0, #1
 800e672:	d103      	bne.n	800e67c <_printf_common+0xac>
 800e674:	f04f 30ff 	mov.w	r0, #4294967295
 800e678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e67c:	3501      	adds	r5, #1
 800e67e:	e7c6      	b.n	800e60e <_printf_common+0x3e>
 800e680:	18e1      	adds	r1, r4, r3
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	2030      	movs	r0, #48	; 0x30
 800e686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e68a:	4422      	add	r2, r4
 800e68c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e694:	3302      	adds	r3, #2
 800e696:	e7c7      	b.n	800e628 <_printf_common+0x58>
 800e698:	2301      	movs	r3, #1
 800e69a:	4622      	mov	r2, r4
 800e69c:	4649      	mov	r1, r9
 800e69e:	4638      	mov	r0, r7
 800e6a0:	47c0      	blx	r8
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	d0e6      	beq.n	800e674 <_printf_common+0xa4>
 800e6a6:	3601      	adds	r6, #1
 800e6a8:	e7d9      	b.n	800e65e <_printf_common+0x8e>
	...

0800e6ac <_printf_i>:
 800e6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b0:	7e0f      	ldrb	r7, [r1, #24]
 800e6b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e6b4:	2f78      	cmp	r7, #120	; 0x78
 800e6b6:	4691      	mov	r9, r2
 800e6b8:	4680      	mov	r8, r0
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	469a      	mov	sl, r3
 800e6be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e6c2:	d807      	bhi.n	800e6d4 <_printf_i+0x28>
 800e6c4:	2f62      	cmp	r7, #98	; 0x62
 800e6c6:	d80a      	bhi.n	800e6de <_printf_i+0x32>
 800e6c8:	2f00      	cmp	r7, #0
 800e6ca:	f000 80d8 	beq.w	800e87e <_printf_i+0x1d2>
 800e6ce:	2f58      	cmp	r7, #88	; 0x58
 800e6d0:	f000 80a3 	beq.w	800e81a <_printf_i+0x16e>
 800e6d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6dc:	e03a      	b.n	800e754 <_printf_i+0xa8>
 800e6de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6e2:	2b15      	cmp	r3, #21
 800e6e4:	d8f6      	bhi.n	800e6d4 <_printf_i+0x28>
 800e6e6:	a101      	add	r1, pc, #4	; (adr r1, 800e6ec <_printf_i+0x40>)
 800e6e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6ec:	0800e745 	.word	0x0800e745
 800e6f0:	0800e759 	.word	0x0800e759
 800e6f4:	0800e6d5 	.word	0x0800e6d5
 800e6f8:	0800e6d5 	.word	0x0800e6d5
 800e6fc:	0800e6d5 	.word	0x0800e6d5
 800e700:	0800e6d5 	.word	0x0800e6d5
 800e704:	0800e759 	.word	0x0800e759
 800e708:	0800e6d5 	.word	0x0800e6d5
 800e70c:	0800e6d5 	.word	0x0800e6d5
 800e710:	0800e6d5 	.word	0x0800e6d5
 800e714:	0800e6d5 	.word	0x0800e6d5
 800e718:	0800e865 	.word	0x0800e865
 800e71c:	0800e789 	.word	0x0800e789
 800e720:	0800e847 	.word	0x0800e847
 800e724:	0800e6d5 	.word	0x0800e6d5
 800e728:	0800e6d5 	.word	0x0800e6d5
 800e72c:	0800e887 	.word	0x0800e887
 800e730:	0800e6d5 	.word	0x0800e6d5
 800e734:	0800e789 	.word	0x0800e789
 800e738:	0800e6d5 	.word	0x0800e6d5
 800e73c:	0800e6d5 	.word	0x0800e6d5
 800e740:	0800e84f 	.word	0x0800e84f
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	1d1a      	adds	r2, r3, #4
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	602a      	str	r2, [r5, #0]
 800e74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e754:	2301      	movs	r3, #1
 800e756:	e0a3      	b.n	800e8a0 <_printf_i+0x1f4>
 800e758:	6820      	ldr	r0, [r4, #0]
 800e75a:	6829      	ldr	r1, [r5, #0]
 800e75c:	0606      	lsls	r6, r0, #24
 800e75e:	f101 0304 	add.w	r3, r1, #4
 800e762:	d50a      	bpl.n	800e77a <_printf_i+0xce>
 800e764:	680e      	ldr	r6, [r1, #0]
 800e766:	602b      	str	r3, [r5, #0]
 800e768:	2e00      	cmp	r6, #0
 800e76a:	da03      	bge.n	800e774 <_printf_i+0xc8>
 800e76c:	232d      	movs	r3, #45	; 0x2d
 800e76e:	4276      	negs	r6, r6
 800e770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e774:	485e      	ldr	r0, [pc, #376]	; (800e8f0 <_printf_i+0x244>)
 800e776:	230a      	movs	r3, #10
 800e778:	e019      	b.n	800e7ae <_printf_i+0x102>
 800e77a:	680e      	ldr	r6, [r1, #0]
 800e77c:	602b      	str	r3, [r5, #0]
 800e77e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e782:	bf18      	it	ne
 800e784:	b236      	sxthne	r6, r6
 800e786:	e7ef      	b.n	800e768 <_printf_i+0xbc>
 800e788:	682b      	ldr	r3, [r5, #0]
 800e78a:	6820      	ldr	r0, [r4, #0]
 800e78c:	1d19      	adds	r1, r3, #4
 800e78e:	6029      	str	r1, [r5, #0]
 800e790:	0601      	lsls	r1, r0, #24
 800e792:	d501      	bpl.n	800e798 <_printf_i+0xec>
 800e794:	681e      	ldr	r6, [r3, #0]
 800e796:	e002      	b.n	800e79e <_printf_i+0xf2>
 800e798:	0646      	lsls	r6, r0, #25
 800e79a:	d5fb      	bpl.n	800e794 <_printf_i+0xe8>
 800e79c:	881e      	ldrh	r6, [r3, #0]
 800e79e:	4854      	ldr	r0, [pc, #336]	; (800e8f0 <_printf_i+0x244>)
 800e7a0:	2f6f      	cmp	r7, #111	; 0x6f
 800e7a2:	bf0c      	ite	eq
 800e7a4:	2308      	moveq	r3, #8
 800e7a6:	230a      	movne	r3, #10
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7ae:	6865      	ldr	r5, [r4, #4]
 800e7b0:	60a5      	str	r5, [r4, #8]
 800e7b2:	2d00      	cmp	r5, #0
 800e7b4:	bfa2      	ittt	ge
 800e7b6:	6821      	ldrge	r1, [r4, #0]
 800e7b8:	f021 0104 	bicge.w	r1, r1, #4
 800e7bc:	6021      	strge	r1, [r4, #0]
 800e7be:	b90e      	cbnz	r6, 800e7c4 <_printf_i+0x118>
 800e7c0:	2d00      	cmp	r5, #0
 800e7c2:	d04d      	beq.n	800e860 <_printf_i+0x1b4>
 800e7c4:	4615      	mov	r5, r2
 800e7c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e7ca:	fb03 6711 	mls	r7, r3, r1, r6
 800e7ce:	5dc7      	ldrb	r7, [r0, r7]
 800e7d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e7d4:	4637      	mov	r7, r6
 800e7d6:	42bb      	cmp	r3, r7
 800e7d8:	460e      	mov	r6, r1
 800e7da:	d9f4      	bls.n	800e7c6 <_printf_i+0x11a>
 800e7dc:	2b08      	cmp	r3, #8
 800e7de:	d10b      	bne.n	800e7f8 <_printf_i+0x14c>
 800e7e0:	6823      	ldr	r3, [r4, #0]
 800e7e2:	07de      	lsls	r6, r3, #31
 800e7e4:	d508      	bpl.n	800e7f8 <_printf_i+0x14c>
 800e7e6:	6923      	ldr	r3, [r4, #16]
 800e7e8:	6861      	ldr	r1, [r4, #4]
 800e7ea:	4299      	cmp	r1, r3
 800e7ec:	bfde      	ittt	le
 800e7ee:	2330      	movle	r3, #48	; 0x30
 800e7f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e7f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e7f8:	1b52      	subs	r2, r2, r5
 800e7fa:	6122      	str	r2, [r4, #16]
 800e7fc:	f8cd a000 	str.w	sl, [sp]
 800e800:	464b      	mov	r3, r9
 800e802:	aa03      	add	r2, sp, #12
 800e804:	4621      	mov	r1, r4
 800e806:	4640      	mov	r0, r8
 800e808:	f7ff fee2 	bl	800e5d0 <_printf_common>
 800e80c:	3001      	adds	r0, #1
 800e80e:	d14c      	bne.n	800e8aa <_printf_i+0x1fe>
 800e810:	f04f 30ff 	mov.w	r0, #4294967295
 800e814:	b004      	add	sp, #16
 800e816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e81a:	4835      	ldr	r0, [pc, #212]	; (800e8f0 <_printf_i+0x244>)
 800e81c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e820:	6829      	ldr	r1, [r5, #0]
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	f851 6b04 	ldr.w	r6, [r1], #4
 800e828:	6029      	str	r1, [r5, #0]
 800e82a:	061d      	lsls	r5, r3, #24
 800e82c:	d514      	bpl.n	800e858 <_printf_i+0x1ac>
 800e82e:	07df      	lsls	r7, r3, #31
 800e830:	bf44      	itt	mi
 800e832:	f043 0320 	orrmi.w	r3, r3, #32
 800e836:	6023      	strmi	r3, [r4, #0]
 800e838:	b91e      	cbnz	r6, 800e842 <_printf_i+0x196>
 800e83a:	6823      	ldr	r3, [r4, #0]
 800e83c:	f023 0320 	bic.w	r3, r3, #32
 800e840:	6023      	str	r3, [r4, #0]
 800e842:	2310      	movs	r3, #16
 800e844:	e7b0      	b.n	800e7a8 <_printf_i+0xfc>
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	f043 0320 	orr.w	r3, r3, #32
 800e84c:	6023      	str	r3, [r4, #0]
 800e84e:	2378      	movs	r3, #120	; 0x78
 800e850:	4828      	ldr	r0, [pc, #160]	; (800e8f4 <_printf_i+0x248>)
 800e852:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e856:	e7e3      	b.n	800e820 <_printf_i+0x174>
 800e858:	0659      	lsls	r1, r3, #25
 800e85a:	bf48      	it	mi
 800e85c:	b2b6      	uxthmi	r6, r6
 800e85e:	e7e6      	b.n	800e82e <_printf_i+0x182>
 800e860:	4615      	mov	r5, r2
 800e862:	e7bb      	b.n	800e7dc <_printf_i+0x130>
 800e864:	682b      	ldr	r3, [r5, #0]
 800e866:	6826      	ldr	r6, [r4, #0]
 800e868:	6961      	ldr	r1, [r4, #20]
 800e86a:	1d18      	adds	r0, r3, #4
 800e86c:	6028      	str	r0, [r5, #0]
 800e86e:	0635      	lsls	r5, r6, #24
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	d501      	bpl.n	800e878 <_printf_i+0x1cc>
 800e874:	6019      	str	r1, [r3, #0]
 800e876:	e002      	b.n	800e87e <_printf_i+0x1d2>
 800e878:	0670      	lsls	r0, r6, #25
 800e87a:	d5fb      	bpl.n	800e874 <_printf_i+0x1c8>
 800e87c:	8019      	strh	r1, [r3, #0]
 800e87e:	2300      	movs	r3, #0
 800e880:	6123      	str	r3, [r4, #16]
 800e882:	4615      	mov	r5, r2
 800e884:	e7ba      	b.n	800e7fc <_printf_i+0x150>
 800e886:	682b      	ldr	r3, [r5, #0]
 800e888:	1d1a      	adds	r2, r3, #4
 800e88a:	602a      	str	r2, [r5, #0]
 800e88c:	681d      	ldr	r5, [r3, #0]
 800e88e:	6862      	ldr	r2, [r4, #4]
 800e890:	2100      	movs	r1, #0
 800e892:	4628      	mov	r0, r5
 800e894:	f7f1 fcb4 	bl	8000200 <memchr>
 800e898:	b108      	cbz	r0, 800e89e <_printf_i+0x1f2>
 800e89a:	1b40      	subs	r0, r0, r5
 800e89c:	6060      	str	r0, [r4, #4]
 800e89e:	6863      	ldr	r3, [r4, #4]
 800e8a0:	6123      	str	r3, [r4, #16]
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8a8:	e7a8      	b.n	800e7fc <_printf_i+0x150>
 800e8aa:	6923      	ldr	r3, [r4, #16]
 800e8ac:	462a      	mov	r2, r5
 800e8ae:	4649      	mov	r1, r9
 800e8b0:	4640      	mov	r0, r8
 800e8b2:	47d0      	blx	sl
 800e8b4:	3001      	adds	r0, #1
 800e8b6:	d0ab      	beq.n	800e810 <_printf_i+0x164>
 800e8b8:	6823      	ldr	r3, [r4, #0]
 800e8ba:	079b      	lsls	r3, r3, #30
 800e8bc:	d413      	bmi.n	800e8e6 <_printf_i+0x23a>
 800e8be:	68e0      	ldr	r0, [r4, #12]
 800e8c0:	9b03      	ldr	r3, [sp, #12]
 800e8c2:	4298      	cmp	r0, r3
 800e8c4:	bfb8      	it	lt
 800e8c6:	4618      	movlt	r0, r3
 800e8c8:	e7a4      	b.n	800e814 <_printf_i+0x168>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	4632      	mov	r2, r6
 800e8ce:	4649      	mov	r1, r9
 800e8d0:	4640      	mov	r0, r8
 800e8d2:	47d0      	blx	sl
 800e8d4:	3001      	adds	r0, #1
 800e8d6:	d09b      	beq.n	800e810 <_printf_i+0x164>
 800e8d8:	3501      	adds	r5, #1
 800e8da:	68e3      	ldr	r3, [r4, #12]
 800e8dc:	9903      	ldr	r1, [sp, #12]
 800e8de:	1a5b      	subs	r3, r3, r1
 800e8e0:	42ab      	cmp	r3, r5
 800e8e2:	dcf2      	bgt.n	800e8ca <_printf_i+0x21e>
 800e8e4:	e7eb      	b.n	800e8be <_printf_i+0x212>
 800e8e6:	2500      	movs	r5, #0
 800e8e8:	f104 0619 	add.w	r6, r4, #25
 800e8ec:	e7f5      	b.n	800e8da <_printf_i+0x22e>
 800e8ee:	bf00      	nop
 800e8f0:	08010b72 	.word	0x08010b72
 800e8f4:	08010b83 	.word	0x08010b83

0800e8f8 <iprintf>:
 800e8f8:	b40f      	push	{r0, r1, r2, r3}
 800e8fa:	4b0a      	ldr	r3, [pc, #40]	; (800e924 <iprintf+0x2c>)
 800e8fc:	b513      	push	{r0, r1, r4, lr}
 800e8fe:	681c      	ldr	r4, [r3, #0]
 800e900:	b124      	cbz	r4, 800e90c <iprintf+0x14>
 800e902:	69a3      	ldr	r3, [r4, #24]
 800e904:	b913      	cbnz	r3, 800e90c <iprintf+0x14>
 800e906:	4620      	mov	r0, r4
 800e908:	f001 f8ea 	bl	800fae0 <__sinit>
 800e90c:	ab05      	add	r3, sp, #20
 800e90e:	9a04      	ldr	r2, [sp, #16]
 800e910:	68a1      	ldr	r1, [r4, #8]
 800e912:	9301      	str	r3, [sp, #4]
 800e914:	4620      	mov	r0, r4
 800e916:	f001 fdbd 	bl	8010494 <_vfiprintf_r>
 800e91a:	b002      	add	sp, #8
 800e91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e920:	b004      	add	sp, #16
 800e922:	4770      	bx	lr
 800e924:	20000030 	.word	0x20000030

0800e928 <_puts_r>:
 800e928:	b570      	push	{r4, r5, r6, lr}
 800e92a:	460e      	mov	r6, r1
 800e92c:	4605      	mov	r5, r0
 800e92e:	b118      	cbz	r0, 800e938 <_puts_r+0x10>
 800e930:	6983      	ldr	r3, [r0, #24]
 800e932:	b90b      	cbnz	r3, 800e938 <_puts_r+0x10>
 800e934:	f001 f8d4 	bl	800fae0 <__sinit>
 800e938:	69ab      	ldr	r3, [r5, #24]
 800e93a:	68ac      	ldr	r4, [r5, #8]
 800e93c:	b913      	cbnz	r3, 800e944 <_puts_r+0x1c>
 800e93e:	4628      	mov	r0, r5
 800e940:	f001 f8ce 	bl	800fae0 <__sinit>
 800e944:	4b2c      	ldr	r3, [pc, #176]	; (800e9f8 <_puts_r+0xd0>)
 800e946:	429c      	cmp	r4, r3
 800e948:	d120      	bne.n	800e98c <_puts_r+0x64>
 800e94a:	686c      	ldr	r4, [r5, #4]
 800e94c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e94e:	07db      	lsls	r3, r3, #31
 800e950:	d405      	bmi.n	800e95e <_puts_r+0x36>
 800e952:	89a3      	ldrh	r3, [r4, #12]
 800e954:	0598      	lsls	r0, r3, #22
 800e956:	d402      	bmi.n	800e95e <_puts_r+0x36>
 800e958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e95a:	f001 f964 	bl	800fc26 <__retarget_lock_acquire_recursive>
 800e95e:	89a3      	ldrh	r3, [r4, #12]
 800e960:	0719      	lsls	r1, r3, #28
 800e962:	d51d      	bpl.n	800e9a0 <_puts_r+0x78>
 800e964:	6923      	ldr	r3, [r4, #16]
 800e966:	b1db      	cbz	r3, 800e9a0 <_puts_r+0x78>
 800e968:	3e01      	subs	r6, #1
 800e96a:	68a3      	ldr	r3, [r4, #8]
 800e96c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e970:	3b01      	subs	r3, #1
 800e972:	60a3      	str	r3, [r4, #8]
 800e974:	bb39      	cbnz	r1, 800e9c6 <_puts_r+0x9e>
 800e976:	2b00      	cmp	r3, #0
 800e978:	da38      	bge.n	800e9ec <_puts_r+0xc4>
 800e97a:	4622      	mov	r2, r4
 800e97c:	210a      	movs	r1, #10
 800e97e:	4628      	mov	r0, r5
 800e980:	f000 f858 	bl	800ea34 <__swbuf_r>
 800e984:	3001      	adds	r0, #1
 800e986:	d011      	beq.n	800e9ac <_puts_r+0x84>
 800e988:	250a      	movs	r5, #10
 800e98a:	e011      	b.n	800e9b0 <_puts_r+0x88>
 800e98c:	4b1b      	ldr	r3, [pc, #108]	; (800e9fc <_puts_r+0xd4>)
 800e98e:	429c      	cmp	r4, r3
 800e990:	d101      	bne.n	800e996 <_puts_r+0x6e>
 800e992:	68ac      	ldr	r4, [r5, #8]
 800e994:	e7da      	b.n	800e94c <_puts_r+0x24>
 800e996:	4b1a      	ldr	r3, [pc, #104]	; (800ea00 <_puts_r+0xd8>)
 800e998:	429c      	cmp	r4, r3
 800e99a:	bf08      	it	eq
 800e99c:	68ec      	ldreq	r4, [r5, #12]
 800e99e:	e7d5      	b.n	800e94c <_puts_r+0x24>
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	f000 f898 	bl	800ead8 <__swsetup_r>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d0dd      	beq.n	800e968 <_puts_r+0x40>
 800e9ac:	f04f 35ff 	mov.w	r5, #4294967295
 800e9b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9b2:	07da      	lsls	r2, r3, #31
 800e9b4:	d405      	bmi.n	800e9c2 <_puts_r+0x9a>
 800e9b6:	89a3      	ldrh	r3, [r4, #12]
 800e9b8:	059b      	lsls	r3, r3, #22
 800e9ba:	d402      	bmi.n	800e9c2 <_puts_r+0x9a>
 800e9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9be:	f001 f933 	bl	800fc28 <__retarget_lock_release_recursive>
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	bd70      	pop	{r4, r5, r6, pc}
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	da04      	bge.n	800e9d4 <_puts_r+0xac>
 800e9ca:	69a2      	ldr	r2, [r4, #24]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	dc06      	bgt.n	800e9de <_puts_r+0xb6>
 800e9d0:	290a      	cmp	r1, #10
 800e9d2:	d004      	beq.n	800e9de <_puts_r+0xb6>
 800e9d4:	6823      	ldr	r3, [r4, #0]
 800e9d6:	1c5a      	adds	r2, r3, #1
 800e9d8:	6022      	str	r2, [r4, #0]
 800e9da:	7019      	strb	r1, [r3, #0]
 800e9dc:	e7c5      	b.n	800e96a <_puts_r+0x42>
 800e9de:	4622      	mov	r2, r4
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	f000 f827 	bl	800ea34 <__swbuf_r>
 800e9e6:	3001      	adds	r0, #1
 800e9e8:	d1bf      	bne.n	800e96a <_puts_r+0x42>
 800e9ea:	e7df      	b.n	800e9ac <_puts_r+0x84>
 800e9ec:	6823      	ldr	r3, [r4, #0]
 800e9ee:	250a      	movs	r5, #10
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	6022      	str	r2, [r4, #0]
 800e9f4:	701d      	strb	r5, [r3, #0]
 800e9f6:	e7db      	b.n	800e9b0 <_puts_r+0x88>
 800e9f8:	08010c44 	.word	0x08010c44
 800e9fc:	08010c64 	.word	0x08010c64
 800ea00:	08010c24 	.word	0x08010c24

0800ea04 <puts>:
 800ea04:	4b02      	ldr	r3, [pc, #8]	; (800ea10 <puts+0xc>)
 800ea06:	4601      	mov	r1, r0
 800ea08:	6818      	ldr	r0, [r3, #0]
 800ea0a:	f7ff bf8d 	b.w	800e928 <_puts_r>
 800ea0e:	bf00      	nop
 800ea10:	20000030 	.word	0x20000030

0800ea14 <_sbrk_r>:
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4d06      	ldr	r5, [pc, #24]	; (800ea30 <_sbrk_r+0x1c>)
 800ea18:	2300      	movs	r3, #0
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	4608      	mov	r0, r1
 800ea1e:	602b      	str	r3, [r5, #0]
 800ea20:	f7f3 fbce 	bl	80021c0 <_sbrk>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	d102      	bne.n	800ea2e <_sbrk_r+0x1a>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	b103      	cbz	r3, 800ea2e <_sbrk_r+0x1a>
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	bd38      	pop	{r3, r4, r5, pc}
 800ea30:	20008f78 	.word	0x20008f78

0800ea34 <__swbuf_r>:
 800ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea36:	460e      	mov	r6, r1
 800ea38:	4614      	mov	r4, r2
 800ea3a:	4605      	mov	r5, r0
 800ea3c:	b118      	cbz	r0, 800ea46 <__swbuf_r+0x12>
 800ea3e:	6983      	ldr	r3, [r0, #24]
 800ea40:	b90b      	cbnz	r3, 800ea46 <__swbuf_r+0x12>
 800ea42:	f001 f84d 	bl	800fae0 <__sinit>
 800ea46:	4b21      	ldr	r3, [pc, #132]	; (800eacc <__swbuf_r+0x98>)
 800ea48:	429c      	cmp	r4, r3
 800ea4a:	d12b      	bne.n	800eaa4 <__swbuf_r+0x70>
 800ea4c:	686c      	ldr	r4, [r5, #4]
 800ea4e:	69a3      	ldr	r3, [r4, #24]
 800ea50:	60a3      	str	r3, [r4, #8]
 800ea52:	89a3      	ldrh	r3, [r4, #12]
 800ea54:	071a      	lsls	r2, r3, #28
 800ea56:	d52f      	bpl.n	800eab8 <__swbuf_r+0x84>
 800ea58:	6923      	ldr	r3, [r4, #16]
 800ea5a:	b36b      	cbz	r3, 800eab8 <__swbuf_r+0x84>
 800ea5c:	6923      	ldr	r3, [r4, #16]
 800ea5e:	6820      	ldr	r0, [r4, #0]
 800ea60:	1ac0      	subs	r0, r0, r3
 800ea62:	6963      	ldr	r3, [r4, #20]
 800ea64:	b2f6      	uxtb	r6, r6
 800ea66:	4283      	cmp	r3, r0
 800ea68:	4637      	mov	r7, r6
 800ea6a:	dc04      	bgt.n	800ea76 <__swbuf_r+0x42>
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4628      	mov	r0, r5
 800ea70:	f000 ffa2 	bl	800f9b8 <_fflush_r>
 800ea74:	bb30      	cbnz	r0, 800eac4 <__swbuf_r+0x90>
 800ea76:	68a3      	ldr	r3, [r4, #8]
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	60a3      	str	r3, [r4, #8]
 800ea7c:	6823      	ldr	r3, [r4, #0]
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	6022      	str	r2, [r4, #0]
 800ea82:	701e      	strb	r6, [r3, #0]
 800ea84:	6963      	ldr	r3, [r4, #20]
 800ea86:	3001      	adds	r0, #1
 800ea88:	4283      	cmp	r3, r0
 800ea8a:	d004      	beq.n	800ea96 <__swbuf_r+0x62>
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	07db      	lsls	r3, r3, #31
 800ea90:	d506      	bpl.n	800eaa0 <__swbuf_r+0x6c>
 800ea92:	2e0a      	cmp	r6, #10
 800ea94:	d104      	bne.n	800eaa0 <__swbuf_r+0x6c>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f000 ff8d 	bl	800f9b8 <_fflush_r>
 800ea9e:	b988      	cbnz	r0, 800eac4 <__swbuf_r+0x90>
 800eaa0:	4638      	mov	r0, r7
 800eaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaa4:	4b0a      	ldr	r3, [pc, #40]	; (800ead0 <__swbuf_r+0x9c>)
 800eaa6:	429c      	cmp	r4, r3
 800eaa8:	d101      	bne.n	800eaae <__swbuf_r+0x7a>
 800eaaa:	68ac      	ldr	r4, [r5, #8]
 800eaac:	e7cf      	b.n	800ea4e <__swbuf_r+0x1a>
 800eaae:	4b09      	ldr	r3, [pc, #36]	; (800ead4 <__swbuf_r+0xa0>)
 800eab0:	429c      	cmp	r4, r3
 800eab2:	bf08      	it	eq
 800eab4:	68ec      	ldreq	r4, [r5, #12]
 800eab6:	e7ca      	b.n	800ea4e <__swbuf_r+0x1a>
 800eab8:	4621      	mov	r1, r4
 800eaba:	4628      	mov	r0, r5
 800eabc:	f000 f80c 	bl	800ead8 <__swsetup_r>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d0cb      	beq.n	800ea5c <__swbuf_r+0x28>
 800eac4:	f04f 37ff 	mov.w	r7, #4294967295
 800eac8:	e7ea      	b.n	800eaa0 <__swbuf_r+0x6c>
 800eaca:	bf00      	nop
 800eacc:	08010c44 	.word	0x08010c44
 800ead0:	08010c64 	.word	0x08010c64
 800ead4:	08010c24 	.word	0x08010c24

0800ead8 <__swsetup_r>:
 800ead8:	4b32      	ldr	r3, [pc, #200]	; (800eba4 <__swsetup_r+0xcc>)
 800eada:	b570      	push	{r4, r5, r6, lr}
 800eadc:	681d      	ldr	r5, [r3, #0]
 800eade:	4606      	mov	r6, r0
 800eae0:	460c      	mov	r4, r1
 800eae2:	b125      	cbz	r5, 800eaee <__swsetup_r+0x16>
 800eae4:	69ab      	ldr	r3, [r5, #24]
 800eae6:	b913      	cbnz	r3, 800eaee <__swsetup_r+0x16>
 800eae8:	4628      	mov	r0, r5
 800eaea:	f000 fff9 	bl	800fae0 <__sinit>
 800eaee:	4b2e      	ldr	r3, [pc, #184]	; (800eba8 <__swsetup_r+0xd0>)
 800eaf0:	429c      	cmp	r4, r3
 800eaf2:	d10f      	bne.n	800eb14 <__swsetup_r+0x3c>
 800eaf4:	686c      	ldr	r4, [r5, #4]
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eafc:	0719      	lsls	r1, r3, #28
 800eafe:	d42c      	bmi.n	800eb5a <__swsetup_r+0x82>
 800eb00:	06dd      	lsls	r5, r3, #27
 800eb02:	d411      	bmi.n	800eb28 <__swsetup_r+0x50>
 800eb04:	2309      	movs	r3, #9
 800eb06:	6033      	str	r3, [r6, #0]
 800eb08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eb0c:	81a3      	strh	r3, [r4, #12]
 800eb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb12:	e03e      	b.n	800eb92 <__swsetup_r+0xba>
 800eb14:	4b25      	ldr	r3, [pc, #148]	; (800ebac <__swsetup_r+0xd4>)
 800eb16:	429c      	cmp	r4, r3
 800eb18:	d101      	bne.n	800eb1e <__swsetup_r+0x46>
 800eb1a:	68ac      	ldr	r4, [r5, #8]
 800eb1c:	e7eb      	b.n	800eaf6 <__swsetup_r+0x1e>
 800eb1e:	4b24      	ldr	r3, [pc, #144]	; (800ebb0 <__swsetup_r+0xd8>)
 800eb20:	429c      	cmp	r4, r3
 800eb22:	bf08      	it	eq
 800eb24:	68ec      	ldreq	r4, [r5, #12]
 800eb26:	e7e6      	b.n	800eaf6 <__swsetup_r+0x1e>
 800eb28:	0758      	lsls	r0, r3, #29
 800eb2a:	d512      	bpl.n	800eb52 <__swsetup_r+0x7a>
 800eb2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb2e:	b141      	cbz	r1, 800eb42 <__swsetup_r+0x6a>
 800eb30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb34:	4299      	cmp	r1, r3
 800eb36:	d002      	beq.n	800eb3e <__swsetup_r+0x66>
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f7ff f993 	bl	800de64 <_free_r>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	6363      	str	r3, [r4, #52]	; 0x34
 800eb42:	89a3      	ldrh	r3, [r4, #12]
 800eb44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb48:	81a3      	strh	r3, [r4, #12]
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	6063      	str	r3, [r4, #4]
 800eb4e:	6923      	ldr	r3, [r4, #16]
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	89a3      	ldrh	r3, [r4, #12]
 800eb54:	f043 0308 	orr.w	r3, r3, #8
 800eb58:	81a3      	strh	r3, [r4, #12]
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	b94b      	cbnz	r3, 800eb72 <__swsetup_r+0x9a>
 800eb5e:	89a3      	ldrh	r3, [r4, #12]
 800eb60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb68:	d003      	beq.n	800eb72 <__swsetup_r+0x9a>
 800eb6a:	4621      	mov	r1, r4
 800eb6c:	4630      	mov	r0, r6
 800eb6e:	f001 f881 	bl	800fc74 <__smakebuf_r>
 800eb72:	89a0      	ldrh	r0, [r4, #12]
 800eb74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb78:	f010 0301 	ands.w	r3, r0, #1
 800eb7c:	d00a      	beq.n	800eb94 <__swsetup_r+0xbc>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	60a3      	str	r3, [r4, #8]
 800eb82:	6963      	ldr	r3, [r4, #20]
 800eb84:	425b      	negs	r3, r3
 800eb86:	61a3      	str	r3, [r4, #24]
 800eb88:	6923      	ldr	r3, [r4, #16]
 800eb8a:	b943      	cbnz	r3, 800eb9e <__swsetup_r+0xc6>
 800eb8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb90:	d1ba      	bne.n	800eb08 <__swsetup_r+0x30>
 800eb92:	bd70      	pop	{r4, r5, r6, pc}
 800eb94:	0781      	lsls	r1, r0, #30
 800eb96:	bf58      	it	pl
 800eb98:	6963      	ldrpl	r3, [r4, #20]
 800eb9a:	60a3      	str	r3, [r4, #8]
 800eb9c:	e7f4      	b.n	800eb88 <__swsetup_r+0xb0>
 800eb9e:	2000      	movs	r0, #0
 800eba0:	e7f7      	b.n	800eb92 <__swsetup_r+0xba>
 800eba2:	bf00      	nop
 800eba4:	20000030 	.word	0x20000030
 800eba8:	08010c44 	.word	0x08010c44
 800ebac:	08010c64 	.word	0x08010c64
 800ebb0:	08010c24 	.word	0x08010c24

0800ebb4 <quorem>:
 800ebb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb8:	6903      	ldr	r3, [r0, #16]
 800ebba:	690c      	ldr	r4, [r1, #16]
 800ebbc:	42a3      	cmp	r3, r4
 800ebbe:	4607      	mov	r7, r0
 800ebc0:	f2c0 8081 	blt.w	800ecc6 <quorem+0x112>
 800ebc4:	3c01      	subs	r4, #1
 800ebc6:	f101 0814 	add.w	r8, r1, #20
 800ebca:	f100 0514 	add.w	r5, r0, #20
 800ebce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebd2:	9301      	str	r3, [sp, #4]
 800ebd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ebd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ebe4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ebe8:	fbb2 f6f3 	udiv	r6, r2, r3
 800ebec:	d331      	bcc.n	800ec52 <quorem+0x9e>
 800ebee:	f04f 0e00 	mov.w	lr, #0
 800ebf2:	4640      	mov	r0, r8
 800ebf4:	46ac      	mov	ip, r5
 800ebf6:	46f2      	mov	sl, lr
 800ebf8:	f850 2b04 	ldr.w	r2, [r0], #4
 800ebfc:	b293      	uxth	r3, r2
 800ebfe:	fb06 e303 	mla	r3, r6, r3, lr
 800ec02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	ebaa 0303 	sub.w	r3, sl, r3
 800ec0c:	f8dc a000 	ldr.w	sl, [ip]
 800ec10:	0c12      	lsrs	r2, r2, #16
 800ec12:	fa13 f38a 	uxtah	r3, r3, sl
 800ec16:	fb06 e202 	mla	r2, r6, r2, lr
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	9b00      	ldr	r3, [sp, #0]
 800ec1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ec22:	b292      	uxth	r2, r2
 800ec24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ec28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec2c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ec30:	4581      	cmp	r9, r0
 800ec32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec36:	f84c 3b04 	str.w	r3, [ip], #4
 800ec3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ec3e:	d2db      	bcs.n	800ebf8 <quorem+0x44>
 800ec40:	f855 300b 	ldr.w	r3, [r5, fp]
 800ec44:	b92b      	cbnz	r3, 800ec52 <quorem+0x9e>
 800ec46:	9b01      	ldr	r3, [sp, #4]
 800ec48:	3b04      	subs	r3, #4
 800ec4a:	429d      	cmp	r5, r3
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	d32e      	bcc.n	800ecae <quorem+0xfa>
 800ec50:	613c      	str	r4, [r7, #16]
 800ec52:	4638      	mov	r0, r7
 800ec54:	f001 fadc 	bl	8010210 <__mcmp>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	db24      	blt.n	800eca6 <quorem+0xf2>
 800ec5c:	3601      	adds	r6, #1
 800ec5e:	4628      	mov	r0, r5
 800ec60:	f04f 0c00 	mov.w	ip, #0
 800ec64:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec68:	f8d0 e000 	ldr.w	lr, [r0]
 800ec6c:	b293      	uxth	r3, r2
 800ec6e:	ebac 0303 	sub.w	r3, ip, r3
 800ec72:	0c12      	lsrs	r2, r2, #16
 800ec74:	fa13 f38e 	uxtah	r3, r3, lr
 800ec78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ec7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec86:	45c1      	cmp	r9, r8
 800ec88:	f840 3b04 	str.w	r3, [r0], #4
 800ec8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ec90:	d2e8      	bcs.n	800ec64 <quorem+0xb0>
 800ec92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec9a:	b922      	cbnz	r2, 800eca6 <quorem+0xf2>
 800ec9c:	3b04      	subs	r3, #4
 800ec9e:	429d      	cmp	r5, r3
 800eca0:	461a      	mov	r2, r3
 800eca2:	d30a      	bcc.n	800ecba <quorem+0x106>
 800eca4:	613c      	str	r4, [r7, #16]
 800eca6:	4630      	mov	r0, r6
 800eca8:	b003      	add	sp, #12
 800ecaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecae:	6812      	ldr	r2, [r2, #0]
 800ecb0:	3b04      	subs	r3, #4
 800ecb2:	2a00      	cmp	r2, #0
 800ecb4:	d1cc      	bne.n	800ec50 <quorem+0x9c>
 800ecb6:	3c01      	subs	r4, #1
 800ecb8:	e7c7      	b.n	800ec4a <quorem+0x96>
 800ecba:	6812      	ldr	r2, [r2, #0]
 800ecbc:	3b04      	subs	r3, #4
 800ecbe:	2a00      	cmp	r2, #0
 800ecc0:	d1f0      	bne.n	800eca4 <quorem+0xf0>
 800ecc2:	3c01      	subs	r4, #1
 800ecc4:	e7eb      	b.n	800ec9e <quorem+0xea>
 800ecc6:	2000      	movs	r0, #0
 800ecc8:	e7ee      	b.n	800eca8 <quorem+0xf4>
 800ecca:	0000      	movs	r0, r0
 800eccc:	0000      	movs	r0, r0
	...

0800ecd0 <_dtoa_r>:
 800ecd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd4:	ed2d 8b04 	vpush	{d8-d9}
 800ecd8:	ec57 6b10 	vmov	r6, r7, d0
 800ecdc:	b093      	sub	sp, #76	; 0x4c
 800ecde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ece0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ece4:	9106      	str	r1, [sp, #24]
 800ece6:	ee10 aa10 	vmov	sl, s0
 800ecea:	4604      	mov	r4, r0
 800ecec:	9209      	str	r2, [sp, #36]	; 0x24
 800ecee:	930c      	str	r3, [sp, #48]	; 0x30
 800ecf0:	46bb      	mov	fp, r7
 800ecf2:	b975      	cbnz	r5, 800ed12 <_dtoa_r+0x42>
 800ecf4:	2010      	movs	r0, #16
 800ecf6:	f7ff f88f 	bl	800de18 <malloc>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	6260      	str	r0, [r4, #36]	; 0x24
 800ecfe:	b920      	cbnz	r0, 800ed0a <_dtoa_r+0x3a>
 800ed00:	4ba7      	ldr	r3, [pc, #668]	; (800efa0 <_dtoa_r+0x2d0>)
 800ed02:	21ea      	movs	r1, #234	; 0xea
 800ed04:	48a7      	ldr	r0, [pc, #668]	; (800efa4 <_dtoa_r+0x2d4>)
 800ed06:	f001 fd4b 	bl	80107a0 <__assert_func>
 800ed0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ed0e:	6005      	str	r5, [r0, #0]
 800ed10:	60c5      	str	r5, [r0, #12]
 800ed12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed14:	6819      	ldr	r1, [r3, #0]
 800ed16:	b151      	cbz	r1, 800ed2e <_dtoa_r+0x5e>
 800ed18:	685a      	ldr	r2, [r3, #4]
 800ed1a:	604a      	str	r2, [r1, #4]
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	4093      	lsls	r3, r2
 800ed20:	608b      	str	r3, [r1, #8]
 800ed22:	4620      	mov	r0, r4
 800ed24:	f001 f832 	bl	800fd8c <_Bfree>
 800ed28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	601a      	str	r2, [r3, #0]
 800ed2e:	1e3b      	subs	r3, r7, #0
 800ed30:	bfaa      	itet	ge
 800ed32:	2300      	movge	r3, #0
 800ed34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ed38:	f8c8 3000 	strge.w	r3, [r8]
 800ed3c:	4b9a      	ldr	r3, [pc, #616]	; (800efa8 <_dtoa_r+0x2d8>)
 800ed3e:	bfbc      	itt	lt
 800ed40:	2201      	movlt	r2, #1
 800ed42:	f8c8 2000 	strlt.w	r2, [r8]
 800ed46:	ea33 030b 	bics.w	r3, r3, fp
 800ed4a:	d11b      	bne.n	800ed84 <_dtoa_r+0xb4>
 800ed4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed52:	6013      	str	r3, [r2, #0]
 800ed54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed58:	4333      	orrs	r3, r6
 800ed5a:	f000 8592 	beq.w	800f882 <_dtoa_r+0xbb2>
 800ed5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed60:	b963      	cbnz	r3, 800ed7c <_dtoa_r+0xac>
 800ed62:	4b92      	ldr	r3, [pc, #584]	; (800efac <_dtoa_r+0x2dc>)
 800ed64:	e022      	b.n	800edac <_dtoa_r+0xdc>
 800ed66:	4b92      	ldr	r3, [pc, #584]	; (800efb0 <_dtoa_r+0x2e0>)
 800ed68:	9301      	str	r3, [sp, #4]
 800ed6a:	3308      	adds	r3, #8
 800ed6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed6e:	6013      	str	r3, [r2, #0]
 800ed70:	9801      	ldr	r0, [sp, #4]
 800ed72:	b013      	add	sp, #76	; 0x4c
 800ed74:	ecbd 8b04 	vpop	{d8-d9}
 800ed78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7c:	4b8b      	ldr	r3, [pc, #556]	; (800efac <_dtoa_r+0x2dc>)
 800ed7e:	9301      	str	r3, [sp, #4]
 800ed80:	3303      	adds	r3, #3
 800ed82:	e7f3      	b.n	800ed6c <_dtoa_r+0x9c>
 800ed84:	2200      	movs	r2, #0
 800ed86:	2300      	movs	r3, #0
 800ed88:	4650      	mov	r0, sl
 800ed8a:	4659      	mov	r1, fp
 800ed8c:	f7f1 feac 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed90:	ec4b ab19 	vmov	d9, sl, fp
 800ed94:	4680      	mov	r8, r0
 800ed96:	b158      	cbz	r0, 800edb0 <_dtoa_r+0xe0>
 800ed98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	6013      	str	r3, [r2, #0]
 800ed9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f000 856b 	beq.w	800f87c <_dtoa_r+0xbac>
 800eda6:	4883      	ldr	r0, [pc, #524]	; (800efb4 <_dtoa_r+0x2e4>)
 800eda8:	6018      	str	r0, [r3, #0]
 800edaa:	1e43      	subs	r3, r0, #1
 800edac:	9301      	str	r3, [sp, #4]
 800edae:	e7df      	b.n	800ed70 <_dtoa_r+0xa0>
 800edb0:	ec4b ab10 	vmov	d0, sl, fp
 800edb4:	aa10      	add	r2, sp, #64	; 0x40
 800edb6:	a911      	add	r1, sp, #68	; 0x44
 800edb8:	4620      	mov	r0, r4
 800edba:	f001 facf 	bl	801035c <__d2b>
 800edbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800edc2:	ee08 0a10 	vmov	s16, r0
 800edc6:	2d00      	cmp	r5, #0
 800edc8:	f000 8084 	beq.w	800eed4 <_dtoa_r+0x204>
 800edcc:	ee19 3a90 	vmov	r3, s19
 800edd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800edd8:	4656      	mov	r6, sl
 800edda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800edde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ede2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ede6:	4b74      	ldr	r3, [pc, #464]	; (800efb8 <_dtoa_r+0x2e8>)
 800ede8:	2200      	movs	r2, #0
 800edea:	4630      	mov	r0, r6
 800edec:	4639      	mov	r1, r7
 800edee:	f7f1 fa5b 	bl	80002a8 <__aeabi_dsub>
 800edf2:	a365      	add	r3, pc, #404	; (adr r3, 800ef88 <_dtoa_r+0x2b8>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	f7f1 fc0e 	bl	8000618 <__aeabi_dmul>
 800edfc:	a364      	add	r3, pc, #400	; (adr r3, 800ef90 <_dtoa_r+0x2c0>)
 800edfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee02:	f7f1 fa53 	bl	80002ac <__adddf3>
 800ee06:	4606      	mov	r6, r0
 800ee08:	4628      	mov	r0, r5
 800ee0a:	460f      	mov	r7, r1
 800ee0c:	f7f1 fb9a 	bl	8000544 <__aeabi_i2d>
 800ee10:	a361      	add	r3, pc, #388	; (adr r3, 800ef98 <_dtoa_r+0x2c8>)
 800ee12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee16:	f7f1 fbff 	bl	8000618 <__aeabi_dmul>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4630      	mov	r0, r6
 800ee20:	4639      	mov	r1, r7
 800ee22:	f7f1 fa43 	bl	80002ac <__adddf3>
 800ee26:	4606      	mov	r6, r0
 800ee28:	460f      	mov	r7, r1
 800ee2a:	f7f1 fea5 	bl	8000b78 <__aeabi_d2iz>
 800ee2e:	2200      	movs	r2, #0
 800ee30:	9000      	str	r0, [sp, #0]
 800ee32:	2300      	movs	r3, #0
 800ee34:	4630      	mov	r0, r6
 800ee36:	4639      	mov	r1, r7
 800ee38:	f7f1 fe60 	bl	8000afc <__aeabi_dcmplt>
 800ee3c:	b150      	cbz	r0, 800ee54 <_dtoa_r+0x184>
 800ee3e:	9800      	ldr	r0, [sp, #0]
 800ee40:	f7f1 fb80 	bl	8000544 <__aeabi_i2d>
 800ee44:	4632      	mov	r2, r6
 800ee46:	463b      	mov	r3, r7
 800ee48:	f7f1 fe4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee4c:	b910      	cbnz	r0, 800ee54 <_dtoa_r+0x184>
 800ee4e:	9b00      	ldr	r3, [sp, #0]
 800ee50:	3b01      	subs	r3, #1
 800ee52:	9300      	str	r3, [sp, #0]
 800ee54:	9b00      	ldr	r3, [sp, #0]
 800ee56:	2b16      	cmp	r3, #22
 800ee58:	d85a      	bhi.n	800ef10 <_dtoa_r+0x240>
 800ee5a:	9a00      	ldr	r2, [sp, #0]
 800ee5c:	4b57      	ldr	r3, [pc, #348]	; (800efbc <_dtoa_r+0x2ec>)
 800ee5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee66:	ec51 0b19 	vmov	r0, r1, d9
 800ee6a:	f7f1 fe47 	bl	8000afc <__aeabi_dcmplt>
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d050      	beq.n	800ef14 <_dtoa_r+0x244>
 800ee72:	9b00      	ldr	r3, [sp, #0]
 800ee74:	3b01      	subs	r3, #1
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	2300      	movs	r3, #0
 800ee7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee7e:	1b5d      	subs	r5, r3, r5
 800ee80:	1e6b      	subs	r3, r5, #1
 800ee82:	9305      	str	r3, [sp, #20]
 800ee84:	bf45      	ittet	mi
 800ee86:	f1c5 0301 	rsbmi	r3, r5, #1
 800ee8a:	9304      	strmi	r3, [sp, #16]
 800ee8c:	2300      	movpl	r3, #0
 800ee8e:	2300      	movmi	r3, #0
 800ee90:	bf4c      	ite	mi
 800ee92:	9305      	strmi	r3, [sp, #20]
 800ee94:	9304      	strpl	r3, [sp, #16]
 800ee96:	9b00      	ldr	r3, [sp, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	db3d      	blt.n	800ef18 <_dtoa_r+0x248>
 800ee9c:	9b05      	ldr	r3, [sp, #20]
 800ee9e:	9a00      	ldr	r2, [sp, #0]
 800eea0:	920a      	str	r2, [sp, #40]	; 0x28
 800eea2:	4413      	add	r3, r2
 800eea4:	9305      	str	r3, [sp, #20]
 800eea6:	2300      	movs	r3, #0
 800eea8:	9307      	str	r3, [sp, #28]
 800eeaa:	9b06      	ldr	r3, [sp, #24]
 800eeac:	2b09      	cmp	r3, #9
 800eeae:	f200 8089 	bhi.w	800efc4 <_dtoa_r+0x2f4>
 800eeb2:	2b05      	cmp	r3, #5
 800eeb4:	bfc4      	itt	gt
 800eeb6:	3b04      	subgt	r3, #4
 800eeb8:	9306      	strgt	r3, [sp, #24]
 800eeba:	9b06      	ldr	r3, [sp, #24]
 800eebc:	f1a3 0302 	sub.w	r3, r3, #2
 800eec0:	bfcc      	ite	gt
 800eec2:	2500      	movgt	r5, #0
 800eec4:	2501      	movle	r5, #1
 800eec6:	2b03      	cmp	r3, #3
 800eec8:	f200 8087 	bhi.w	800efda <_dtoa_r+0x30a>
 800eecc:	e8df f003 	tbb	[pc, r3]
 800eed0:	59383a2d 	.word	0x59383a2d
 800eed4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eed8:	441d      	add	r5, r3
 800eeda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eede:	2b20      	cmp	r3, #32
 800eee0:	bfc1      	itttt	gt
 800eee2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eee6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eeea:	fa0b f303 	lslgt.w	r3, fp, r3
 800eeee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eef2:	bfda      	itte	le
 800eef4:	f1c3 0320 	rsble	r3, r3, #32
 800eef8:	fa06 f003 	lslle.w	r0, r6, r3
 800eefc:	4318      	orrgt	r0, r3
 800eefe:	f7f1 fb11 	bl	8000524 <__aeabi_ui2d>
 800ef02:	2301      	movs	r3, #1
 800ef04:	4606      	mov	r6, r0
 800ef06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ef0a:	3d01      	subs	r5, #1
 800ef0c:	930e      	str	r3, [sp, #56]	; 0x38
 800ef0e:	e76a      	b.n	800ede6 <_dtoa_r+0x116>
 800ef10:	2301      	movs	r3, #1
 800ef12:	e7b2      	b.n	800ee7a <_dtoa_r+0x1aa>
 800ef14:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef16:	e7b1      	b.n	800ee7c <_dtoa_r+0x1ac>
 800ef18:	9b04      	ldr	r3, [sp, #16]
 800ef1a:	9a00      	ldr	r2, [sp, #0]
 800ef1c:	1a9b      	subs	r3, r3, r2
 800ef1e:	9304      	str	r3, [sp, #16]
 800ef20:	4253      	negs	r3, r2
 800ef22:	9307      	str	r3, [sp, #28]
 800ef24:	2300      	movs	r3, #0
 800ef26:	930a      	str	r3, [sp, #40]	; 0x28
 800ef28:	e7bf      	b.n	800eeaa <_dtoa_r+0x1da>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	9308      	str	r3, [sp, #32]
 800ef2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	dc55      	bgt.n	800efe0 <_dtoa_r+0x310>
 800ef34:	2301      	movs	r3, #1
 800ef36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ef3e:	e00c      	b.n	800ef5a <_dtoa_r+0x28a>
 800ef40:	2301      	movs	r3, #1
 800ef42:	e7f3      	b.n	800ef2c <_dtoa_r+0x25c>
 800ef44:	2300      	movs	r3, #0
 800ef46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef48:	9308      	str	r3, [sp, #32]
 800ef4a:	9b00      	ldr	r3, [sp, #0]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	9302      	str	r3, [sp, #8]
 800ef50:	3301      	adds	r3, #1
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	9303      	str	r3, [sp, #12]
 800ef56:	bfb8      	it	lt
 800ef58:	2301      	movlt	r3, #1
 800ef5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	6042      	str	r2, [r0, #4]
 800ef60:	2204      	movs	r2, #4
 800ef62:	f102 0614 	add.w	r6, r2, #20
 800ef66:	429e      	cmp	r6, r3
 800ef68:	6841      	ldr	r1, [r0, #4]
 800ef6a:	d93d      	bls.n	800efe8 <_dtoa_r+0x318>
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f000 fecd 	bl	800fd0c <_Balloc>
 800ef72:	9001      	str	r0, [sp, #4]
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d13b      	bne.n	800eff0 <_dtoa_r+0x320>
 800ef78:	4b11      	ldr	r3, [pc, #68]	; (800efc0 <_dtoa_r+0x2f0>)
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ef80:	e6c0      	b.n	800ed04 <_dtoa_r+0x34>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e7df      	b.n	800ef46 <_dtoa_r+0x276>
 800ef86:	bf00      	nop
 800ef88:	636f4361 	.word	0x636f4361
 800ef8c:	3fd287a7 	.word	0x3fd287a7
 800ef90:	8b60c8b3 	.word	0x8b60c8b3
 800ef94:	3fc68a28 	.word	0x3fc68a28
 800ef98:	509f79fb 	.word	0x509f79fb
 800ef9c:	3fd34413 	.word	0x3fd34413
 800efa0:	08010ba1 	.word	0x08010ba1
 800efa4:	08010bb8 	.word	0x08010bb8
 800efa8:	7ff00000 	.word	0x7ff00000
 800efac:	08010b9d 	.word	0x08010b9d
 800efb0:	08010b94 	.word	0x08010b94
 800efb4:	08010b71 	.word	0x08010b71
 800efb8:	3ff80000 	.word	0x3ff80000
 800efbc:	08010d08 	.word	0x08010d08
 800efc0:	08010c13 	.word	0x08010c13
 800efc4:	2501      	movs	r5, #1
 800efc6:	2300      	movs	r3, #0
 800efc8:	9306      	str	r3, [sp, #24]
 800efca:	9508      	str	r5, [sp, #32]
 800efcc:	f04f 33ff 	mov.w	r3, #4294967295
 800efd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800efd4:	2200      	movs	r2, #0
 800efd6:	2312      	movs	r3, #18
 800efd8:	e7b0      	b.n	800ef3c <_dtoa_r+0x26c>
 800efda:	2301      	movs	r3, #1
 800efdc:	9308      	str	r3, [sp, #32]
 800efde:	e7f5      	b.n	800efcc <_dtoa_r+0x2fc>
 800efe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efe2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800efe6:	e7b8      	b.n	800ef5a <_dtoa_r+0x28a>
 800efe8:	3101      	adds	r1, #1
 800efea:	6041      	str	r1, [r0, #4]
 800efec:	0052      	lsls	r2, r2, #1
 800efee:	e7b8      	b.n	800ef62 <_dtoa_r+0x292>
 800eff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eff2:	9a01      	ldr	r2, [sp, #4]
 800eff4:	601a      	str	r2, [r3, #0]
 800eff6:	9b03      	ldr	r3, [sp, #12]
 800eff8:	2b0e      	cmp	r3, #14
 800effa:	f200 809d 	bhi.w	800f138 <_dtoa_r+0x468>
 800effe:	2d00      	cmp	r5, #0
 800f000:	f000 809a 	beq.w	800f138 <_dtoa_r+0x468>
 800f004:	9b00      	ldr	r3, [sp, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	dd32      	ble.n	800f070 <_dtoa_r+0x3a0>
 800f00a:	4ab7      	ldr	r2, [pc, #732]	; (800f2e8 <_dtoa_r+0x618>)
 800f00c:	f003 030f 	and.w	r3, r3, #15
 800f010:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f014:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f018:	9b00      	ldr	r3, [sp, #0]
 800f01a:	05d8      	lsls	r0, r3, #23
 800f01c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f020:	d516      	bpl.n	800f050 <_dtoa_r+0x380>
 800f022:	4bb2      	ldr	r3, [pc, #712]	; (800f2ec <_dtoa_r+0x61c>)
 800f024:	ec51 0b19 	vmov	r0, r1, d9
 800f028:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f02c:	f7f1 fc1e 	bl	800086c <__aeabi_ddiv>
 800f030:	f007 070f 	and.w	r7, r7, #15
 800f034:	4682      	mov	sl, r0
 800f036:	468b      	mov	fp, r1
 800f038:	2503      	movs	r5, #3
 800f03a:	4eac      	ldr	r6, [pc, #688]	; (800f2ec <_dtoa_r+0x61c>)
 800f03c:	b957      	cbnz	r7, 800f054 <_dtoa_r+0x384>
 800f03e:	4642      	mov	r2, r8
 800f040:	464b      	mov	r3, r9
 800f042:	4650      	mov	r0, sl
 800f044:	4659      	mov	r1, fp
 800f046:	f7f1 fc11 	bl	800086c <__aeabi_ddiv>
 800f04a:	4682      	mov	sl, r0
 800f04c:	468b      	mov	fp, r1
 800f04e:	e028      	b.n	800f0a2 <_dtoa_r+0x3d2>
 800f050:	2502      	movs	r5, #2
 800f052:	e7f2      	b.n	800f03a <_dtoa_r+0x36a>
 800f054:	07f9      	lsls	r1, r7, #31
 800f056:	d508      	bpl.n	800f06a <_dtoa_r+0x39a>
 800f058:	4640      	mov	r0, r8
 800f05a:	4649      	mov	r1, r9
 800f05c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f060:	f7f1 fada 	bl	8000618 <__aeabi_dmul>
 800f064:	3501      	adds	r5, #1
 800f066:	4680      	mov	r8, r0
 800f068:	4689      	mov	r9, r1
 800f06a:	107f      	asrs	r7, r7, #1
 800f06c:	3608      	adds	r6, #8
 800f06e:	e7e5      	b.n	800f03c <_dtoa_r+0x36c>
 800f070:	f000 809b 	beq.w	800f1aa <_dtoa_r+0x4da>
 800f074:	9b00      	ldr	r3, [sp, #0]
 800f076:	4f9d      	ldr	r7, [pc, #628]	; (800f2ec <_dtoa_r+0x61c>)
 800f078:	425e      	negs	r6, r3
 800f07a:	4b9b      	ldr	r3, [pc, #620]	; (800f2e8 <_dtoa_r+0x618>)
 800f07c:	f006 020f 	and.w	r2, r6, #15
 800f080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f088:	ec51 0b19 	vmov	r0, r1, d9
 800f08c:	f7f1 fac4 	bl	8000618 <__aeabi_dmul>
 800f090:	1136      	asrs	r6, r6, #4
 800f092:	4682      	mov	sl, r0
 800f094:	468b      	mov	fp, r1
 800f096:	2300      	movs	r3, #0
 800f098:	2502      	movs	r5, #2
 800f09a:	2e00      	cmp	r6, #0
 800f09c:	d17a      	bne.n	800f194 <_dtoa_r+0x4c4>
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1d3      	bne.n	800f04a <_dtoa_r+0x37a>
 800f0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f000 8082 	beq.w	800f1ae <_dtoa_r+0x4de>
 800f0aa:	4b91      	ldr	r3, [pc, #580]	; (800f2f0 <_dtoa_r+0x620>)
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	4650      	mov	r0, sl
 800f0b0:	4659      	mov	r1, fp
 800f0b2:	f7f1 fd23 	bl	8000afc <__aeabi_dcmplt>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d079      	beq.n	800f1ae <_dtoa_r+0x4de>
 800f0ba:	9b03      	ldr	r3, [sp, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d076      	beq.n	800f1ae <_dtoa_r+0x4de>
 800f0c0:	9b02      	ldr	r3, [sp, #8]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	dd36      	ble.n	800f134 <_dtoa_r+0x464>
 800f0c6:	9b00      	ldr	r3, [sp, #0]
 800f0c8:	4650      	mov	r0, sl
 800f0ca:	4659      	mov	r1, fp
 800f0cc:	1e5f      	subs	r7, r3, #1
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	4b88      	ldr	r3, [pc, #544]	; (800f2f4 <_dtoa_r+0x624>)
 800f0d2:	f7f1 faa1 	bl	8000618 <__aeabi_dmul>
 800f0d6:	9e02      	ldr	r6, [sp, #8]
 800f0d8:	4682      	mov	sl, r0
 800f0da:	468b      	mov	fp, r1
 800f0dc:	3501      	adds	r5, #1
 800f0de:	4628      	mov	r0, r5
 800f0e0:	f7f1 fa30 	bl	8000544 <__aeabi_i2d>
 800f0e4:	4652      	mov	r2, sl
 800f0e6:	465b      	mov	r3, fp
 800f0e8:	f7f1 fa96 	bl	8000618 <__aeabi_dmul>
 800f0ec:	4b82      	ldr	r3, [pc, #520]	; (800f2f8 <_dtoa_r+0x628>)
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f7f1 f8dc 	bl	80002ac <__adddf3>
 800f0f4:	46d0      	mov	r8, sl
 800f0f6:	46d9      	mov	r9, fp
 800f0f8:	4682      	mov	sl, r0
 800f0fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f0fe:	2e00      	cmp	r6, #0
 800f100:	d158      	bne.n	800f1b4 <_dtoa_r+0x4e4>
 800f102:	4b7e      	ldr	r3, [pc, #504]	; (800f2fc <_dtoa_r+0x62c>)
 800f104:	2200      	movs	r2, #0
 800f106:	4640      	mov	r0, r8
 800f108:	4649      	mov	r1, r9
 800f10a:	f7f1 f8cd 	bl	80002a8 <__aeabi_dsub>
 800f10e:	4652      	mov	r2, sl
 800f110:	465b      	mov	r3, fp
 800f112:	4680      	mov	r8, r0
 800f114:	4689      	mov	r9, r1
 800f116:	f7f1 fd0f 	bl	8000b38 <__aeabi_dcmpgt>
 800f11a:	2800      	cmp	r0, #0
 800f11c:	f040 8295 	bne.w	800f64a <_dtoa_r+0x97a>
 800f120:	4652      	mov	r2, sl
 800f122:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f126:	4640      	mov	r0, r8
 800f128:	4649      	mov	r1, r9
 800f12a:	f7f1 fce7 	bl	8000afc <__aeabi_dcmplt>
 800f12e:	2800      	cmp	r0, #0
 800f130:	f040 8289 	bne.w	800f646 <_dtoa_r+0x976>
 800f134:	ec5b ab19 	vmov	sl, fp, d9
 800f138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f2c0 8148 	blt.w	800f3d0 <_dtoa_r+0x700>
 800f140:	9a00      	ldr	r2, [sp, #0]
 800f142:	2a0e      	cmp	r2, #14
 800f144:	f300 8144 	bgt.w	800f3d0 <_dtoa_r+0x700>
 800f148:	4b67      	ldr	r3, [pc, #412]	; (800f2e8 <_dtoa_r+0x618>)
 800f14a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f14e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f154:	2b00      	cmp	r3, #0
 800f156:	f280 80d5 	bge.w	800f304 <_dtoa_r+0x634>
 800f15a:	9b03      	ldr	r3, [sp, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	f300 80d1 	bgt.w	800f304 <_dtoa_r+0x634>
 800f162:	f040 826f 	bne.w	800f644 <_dtoa_r+0x974>
 800f166:	4b65      	ldr	r3, [pc, #404]	; (800f2fc <_dtoa_r+0x62c>)
 800f168:	2200      	movs	r2, #0
 800f16a:	4640      	mov	r0, r8
 800f16c:	4649      	mov	r1, r9
 800f16e:	f7f1 fa53 	bl	8000618 <__aeabi_dmul>
 800f172:	4652      	mov	r2, sl
 800f174:	465b      	mov	r3, fp
 800f176:	f7f1 fcd5 	bl	8000b24 <__aeabi_dcmpge>
 800f17a:	9e03      	ldr	r6, [sp, #12]
 800f17c:	4637      	mov	r7, r6
 800f17e:	2800      	cmp	r0, #0
 800f180:	f040 8245 	bne.w	800f60e <_dtoa_r+0x93e>
 800f184:	9d01      	ldr	r5, [sp, #4]
 800f186:	2331      	movs	r3, #49	; 0x31
 800f188:	f805 3b01 	strb.w	r3, [r5], #1
 800f18c:	9b00      	ldr	r3, [sp, #0]
 800f18e:	3301      	adds	r3, #1
 800f190:	9300      	str	r3, [sp, #0]
 800f192:	e240      	b.n	800f616 <_dtoa_r+0x946>
 800f194:	07f2      	lsls	r2, r6, #31
 800f196:	d505      	bpl.n	800f1a4 <_dtoa_r+0x4d4>
 800f198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f19c:	f7f1 fa3c 	bl	8000618 <__aeabi_dmul>
 800f1a0:	3501      	adds	r5, #1
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	1076      	asrs	r6, r6, #1
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	e777      	b.n	800f09a <_dtoa_r+0x3ca>
 800f1aa:	2502      	movs	r5, #2
 800f1ac:	e779      	b.n	800f0a2 <_dtoa_r+0x3d2>
 800f1ae:	9f00      	ldr	r7, [sp, #0]
 800f1b0:	9e03      	ldr	r6, [sp, #12]
 800f1b2:	e794      	b.n	800f0de <_dtoa_r+0x40e>
 800f1b4:	9901      	ldr	r1, [sp, #4]
 800f1b6:	4b4c      	ldr	r3, [pc, #304]	; (800f2e8 <_dtoa_r+0x618>)
 800f1b8:	4431      	add	r1, r6
 800f1ba:	910d      	str	r1, [sp, #52]	; 0x34
 800f1bc:	9908      	ldr	r1, [sp, #32]
 800f1be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f1c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f1c6:	2900      	cmp	r1, #0
 800f1c8:	d043      	beq.n	800f252 <_dtoa_r+0x582>
 800f1ca:	494d      	ldr	r1, [pc, #308]	; (800f300 <_dtoa_r+0x630>)
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	f7f1 fb4d 	bl	800086c <__aeabi_ddiv>
 800f1d2:	4652      	mov	r2, sl
 800f1d4:	465b      	mov	r3, fp
 800f1d6:	f7f1 f867 	bl	80002a8 <__aeabi_dsub>
 800f1da:	9d01      	ldr	r5, [sp, #4]
 800f1dc:	4682      	mov	sl, r0
 800f1de:	468b      	mov	fp, r1
 800f1e0:	4649      	mov	r1, r9
 800f1e2:	4640      	mov	r0, r8
 800f1e4:	f7f1 fcc8 	bl	8000b78 <__aeabi_d2iz>
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	f7f1 f9ab 	bl	8000544 <__aeabi_i2d>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	4640      	mov	r0, r8
 800f1f4:	4649      	mov	r1, r9
 800f1f6:	f7f1 f857 	bl	80002a8 <__aeabi_dsub>
 800f1fa:	3630      	adds	r6, #48	; 0x30
 800f1fc:	f805 6b01 	strb.w	r6, [r5], #1
 800f200:	4652      	mov	r2, sl
 800f202:	465b      	mov	r3, fp
 800f204:	4680      	mov	r8, r0
 800f206:	4689      	mov	r9, r1
 800f208:	f7f1 fc78 	bl	8000afc <__aeabi_dcmplt>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d163      	bne.n	800f2d8 <_dtoa_r+0x608>
 800f210:	4642      	mov	r2, r8
 800f212:	464b      	mov	r3, r9
 800f214:	4936      	ldr	r1, [pc, #216]	; (800f2f0 <_dtoa_r+0x620>)
 800f216:	2000      	movs	r0, #0
 800f218:	f7f1 f846 	bl	80002a8 <__aeabi_dsub>
 800f21c:	4652      	mov	r2, sl
 800f21e:	465b      	mov	r3, fp
 800f220:	f7f1 fc6c 	bl	8000afc <__aeabi_dcmplt>
 800f224:	2800      	cmp	r0, #0
 800f226:	f040 80b5 	bne.w	800f394 <_dtoa_r+0x6c4>
 800f22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f22c:	429d      	cmp	r5, r3
 800f22e:	d081      	beq.n	800f134 <_dtoa_r+0x464>
 800f230:	4b30      	ldr	r3, [pc, #192]	; (800f2f4 <_dtoa_r+0x624>)
 800f232:	2200      	movs	r2, #0
 800f234:	4650      	mov	r0, sl
 800f236:	4659      	mov	r1, fp
 800f238:	f7f1 f9ee 	bl	8000618 <__aeabi_dmul>
 800f23c:	4b2d      	ldr	r3, [pc, #180]	; (800f2f4 <_dtoa_r+0x624>)
 800f23e:	4682      	mov	sl, r0
 800f240:	468b      	mov	fp, r1
 800f242:	4640      	mov	r0, r8
 800f244:	4649      	mov	r1, r9
 800f246:	2200      	movs	r2, #0
 800f248:	f7f1 f9e6 	bl	8000618 <__aeabi_dmul>
 800f24c:	4680      	mov	r8, r0
 800f24e:	4689      	mov	r9, r1
 800f250:	e7c6      	b.n	800f1e0 <_dtoa_r+0x510>
 800f252:	4650      	mov	r0, sl
 800f254:	4659      	mov	r1, fp
 800f256:	f7f1 f9df 	bl	8000618 <__aeabi_dmul>
 800f25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f25c:	9d01      	ldr	r5, [sp, #4]
 800f25e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f260:	4682      	mov	sl, r0
 800f262:	468b      	mov	fp, r1
 800f264:	4649      	mov	r1, r9
 800f266:	4640      	mov	r0, r8
 800f268:	f7f1 fc86 	bl	8000b78 <__aeabi_d2iz>
 800f26c:	4606      	mov	r6, r0
 800f26e:	f7f1 f969 	bl	8000544 <__aeabi_i2d>
 800f272:	3630      	adds	r6, #48	; 0x30
 800f274:	4602      	mov	r2, r0
 800f276:	460b      	mov	r3, r1
 800f278:	4640      	mov	r0, r8
 800f27a:	4649      	mov	r1, r9
 800f27c:	f7f1 f814 	bl	80002a8 <__aeabi_dsub>
 800f280:	f805 6b01 	strb.w	r6, [r5], #1
 800f284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f286:	429d      	cmp	r5, r3
 800f288:	4680      	mov	r8, r0
 800f28a:	4689      	mov	r9, r1
 800f28c:	f04f 0200 	mov.w	r2, #0
 800f290:	d124      	bne.n	800f2dc <_dtoa_r+0x60c>
 800f292:	4b1b      	ldr	r3, [pc, #108]	; (800f300 <_dtoa_r+0x630>)
 800f294:	4650      	mov	r0, sl
 800f296:	4659      	mov	r1, fp
 800f298:	f7f1 f808 	bl	80002ac <__adddf3>
 800f29c:	4602      	mov	r2, r0
 800f29e:	460b      	mov	r3, r1
 800f2a0:	4640      	mov	r0, r8
 800f2a2:	4649      	mov	r1, r9
 800f2a4:	f7f1 fc48 	bl	8000b38 <__aeabi_dcmpgt>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d173      	bne.n	800f394 <_dtoa_r+0x6c4>
 800f2ac:	4652      	mov	r2, sl
 800f2ae:	465b      	mov	r3, fp
 800f2b0:	4913      	ldr	r1, [pc, #76]	; (800f300 <_dtoa_r+0x630>)
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	f7f0 fff8 	bl	80002a8 <__aeabi_dsub>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	4640      	mov	r0, r8
 800f2be:	4649      	mov	r1, r9
 800f2c0:	f7f1 fc1c 	bl	8000afc <__aeabi_dcmplt>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	f43f af35 	beq.w	800f134 <_dtoa_r+0x464>
 800f2ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f2cc:	1e6b      	subs	r3, r5, #1
 800f2ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2d4:	2b30      	cmp	r3, #48	; 0x30
 800f2d6:	d0f8      	beq.n	800f2ca <_dtoa_r+0x5fa>
 800f2d8:	9700      	str	r7, [sp, #0]
 800f2da:	e049      	b.n	800f370 <_dtoa_r+0x6a0>
 800f2dc:	4b05      	ldr	r3, [pc, #20]	; (800f2f4 <_dtoa_r+0x624>)
 800f2de:	f7f1 f99b 	bl	8000618 <__aeabi_dmul>
 800f2e2:	4680      	mov	r8, r0
 800f2e4:	4689      	mov	r9, r1
 800f2e6:	e7bd      	b.n	800f264 <_dtoa_r+0x594>
 800f2e8:	08010d08 	.word	0x08010d08
 800f2ec:	08010ce0 	.word	0x08010ce0
 800f2f0:	3ff00000 	.word	0x3ff00000
 800f2f4:	40240000 	.word	0x40240000
 800f2f8:	401c0000 	.word	0x401c0000
 800f2fc:	40140000 	.word	0x40140000
 800f300:	3fe00000 	.word	0x3fe00000
 800f304:	9d01      	ldr	r5, [sp, #4]
 800f306:	4656      	mov	r6, sl
 800f308:	465f      	mov	r7, fp
 800f30a:	4642      	mov	r2, r8
 800f30c:	464b      	mov	r3, r9
 800f30e:	4630      	mov	r0, r6
 800f310:	4639      	mov	r1, r7
 800f312:	f7f1 faab 	bl	800086c <__aeabi_ddiv>
 800f316:	f7f1 fc2f 	bl	8000b78 <__aeabi_d2iz>
 800f31a:	4682      	mov	sl, r0
 800f31c:	f7f1 f912 	bl	8000544 <__aeabi_i2d>
 800f320:	4642      	mov	r2, r8
 800f322:	464b      	mov	r3, r9
 800f324:	f7f1 f978 	bl	8000618 <__aeabi_dmul>
 800f328:	4602      	mov	r2, r0
 800f32a:	460b      	mov	r3, r1
 800f32c:	4630      	mov	r0, r6
 800f32e:	4639      	mov	r1, r7
 800f330:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f334:	f7f0 ffb8 	bl	80002a8 <__aeabi_dsub>
 800f338:	f805 6b01 	strb.w	r6, [r5], #1
 800f33c:	9e01      	ldr	r6, [sp, #4]
 800f33e:	9f03      	ldr	r7, [sp, #12]
 800f340:	1bae      	subs	r6, r5, r6
 800f342:	42b7      	cmp	r7, r6
 800f344:	4602      	mov	r2, r0
 800f346:	460b      	mov	r3, r1
 800f348:	d135      	bne.n	800f3b6 <_dtoa_r+0x6e6>
 800f34a:	f7f0 ffaf 	bl	80002ac <__adddf3>
 800f34e:	4642      	mov	r2, r8
 800f350:	464b      	mov	r3, r9
 800f352:	4606      	mov	r6, r0
 800f354:	460f      	mov	r7, r1
 800f356:	f7f1 fbef 	bl	8000b38 <__aeabi_dcmpgt>
 800f35a:	b9d0      	cbnz	r0, 800f392 <_dtoa_r+0x6c2>
 800f35c:	4642      	mov	r2, r8
 800f35e:	464b      	mov	r3, r9
 800f360:	4630      	mov	r0, r6
 800f362:	4639      	mov	r1, r7
 800f364:	f7f1 fbc0 	bl	8000ae8 <__aeabi_dcmpeq>
 800f368:	b110      	cbz	r0, 800f370 <_dtoa_r+0x6a0>
 800f36a:	f01a 0f01 	tst.w	sl, #1
 800f36e:	d110      	bne.n	800f392 <_dtoa_r+0x6c2>
 800f370:	4620      	mov	r0, r4
 800f372:	ee18 1a10 	vmov	r1, s16
 800f376:	f000 fd09 	bl	800fd8c <_Bfree>
 800f37a:	2300      	movs	r3, #0
 800f37c:	9800      	ldr	r0, [sp, #0]
 800f37e:	702b      	strb	r3, [r5, #0]
 800f380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f382:	3001      	adds	r0, #1
 800f384:	6018      	str	r0, [r3, #0]
 800f386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f43f acf1 	beq.w	800ed70 <_dtoa_r+0xa0>
 800f38e:	601d      	str	r5, [r3, #0]
 800f390:	e4ee      	b.n	800ed70 <_dtoa_r+0xa0>
 800f392:	9f00      	ldr	r7, [sp, #0]
 800f394:	462b      	mov	r3, r5
 800f396:	461d      	mov	r5, r3
 800f398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f39c:	2a39      	cmp	r2, #57	; 0x39
 800f39e:	d106      	bne.n	800f3ae <_dtoa_r+0x6de>
 800f3a0:	9a01      	ldr	r2, [sp, #4]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d1f7      	bne.n	800f396 <_dtoa_r+0x6c6>
 800f3a6:	9901      	ldr	r1, [sp, #4]
 800f3a8:	2230      	movs	r2, #48	; 0x30
 800f3aa:	3701      	adds	r7, #1
 800f3ac:	700a      	strb	r2, [r1, #0]
 800f3ae:	781a      	ldrb	r2, [r3, #0]
 800f3b0:	3201      	adds	r2, #1
 800f3b2:	701a      	strb	r2, [r3, #0]
 800f3b4:	e790      	b.n	800f2d8 <_dtoa_r+0x608>
 800f3b6:	4ba6      	ldr	r3, [pc, #664]	; (800f650 <_dtoa_r+0x980>)
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f7f1 f92d 	bl	8000618 <__aeabi_dmul>
 800f3be:	2200      	movs	r2, #0
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	4606      	mov	r6, r0
 800f3c4:	460f      	mov	r7, r1
 800f3c6:	f7f1 fb8f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	d09d      	beq.n	800f30a <_dtoa_r+0x63a>
 800f3ce:	e7cf      	b.n	800f370 <_dtoa_r+0x6a0>
 800f3d0:	9a08      	ldr	r2, [sp, #32]
 800f3d2:	2a00      	cmp	r2, #0
 800f3d4:	f000 80d7 	beq.w	800f586 <_dtoa_r+0x8b6>
 800f3d8:	9a06      	ldr	r2, [sp, #24]
 800f3da:	2a01      	cmp	r2, #1
 800f3dc:	f300 80ba 	bgt.w	800f554 <_dtoa_r+0x884>
 800f3e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3e2:	2a00      	cmp	r2, #0
 800f3e4:	f000 80b2 	beq.w	800f54c <_dtoa_r+0x87c>
 800f3e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f3ec:	9e07      	ldr	r6, [sp, #28]
 800f3ee:	9d04      	ldr	r5, [sp, #16]
 800f3f0:	9a04      	ldr	r2, [sp, #16]
 800f3f2:	441a      	add	r2, r3
 800f3f4:	9204      	str	r2, [sp, #16]
 800f3f6:	9a05      	ldr	r2, [sp, #20]
 800f3f8:	2101      	movs	r1, #1
 800f3fa:	441a      	add	r2, r3
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	9205      	str	r2, [sp, #20]
 800f400:	f000 fd7c 	bl	800fefc <__i2b>
 800f404:	4607      	mov	r7, r0
 800f406:	2d00      	cmp	r5, #0
 800f408:	dd0c      	ble.n	800f424 <_dtoa_r+0x754>
 800f40a:	9b05      	ldr	r3, [sp, #20]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	dd09      	ble.n	800f424 <_dtoa_r+0x754>
 800f410:	42ab      	cmp	r3, r5
 800f412:	9a04      	ldr	r2, [sp, #16]
 800f414:	bfa8      	it	ge
 800f416:	462b      	movge	r3, r5
 800f418:	1ad2      	subs	r2, r2, r3
 800f41a:	9204      	str	r2, [sp, #16]
 800f41c:	9a05      	ldr	r2, [sp, #20]
 800f41e:	1aed      	subs	r5, r5, r3
 800f420:	1ad3      	subs	r3, r2, r3
 800f422:	9305      	str	r3, [sp, #20]
 800f424:	9b07      	ldr	r3, [sp, #28]
 800f426:	b31b      	cbz	r3, 800f470 <_dtoa_r+0x7a0>
 800f428:	9b08      	ldr	r3, [sp, #32]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f000 80af 	beq.w	800f58e <_dtoa_r+0x8be>
 800f430:	2e00      	cmp	r6, #0
 800f432:	dd13      	ble.n	800f45c <_dtoa_r+0x78c>
 800f434:	4639      	mov	r1, r7
 800f436:	4632      	mov	r2, r6
 800f438:	4620      	mov	r0, r4
 800f43a:	f000 fe1f 	bl	801007c <__pow5mult>
 800f43e:	ee18 2a10 	vmov	r2, s16
 800f442:	4601      	mov	r1, r0
 800f444:	4607      	mov	r7, r0
 800f446:	4620      	mov	r0, r4
 800f448:	f000 fd6e 	bl	800ff28 <__multiply>
 800f44c:	ee18 1a10 	vmov	r1, s16
 800f450:	4680      	mov	r8, r0
 800f452:	4620      	mov	r0, r4
 800f454:	f000 fc9a 	bl	800fd8c <_Bfree>
 800f458:	ee08 8a10 	vmov	s16, r8
 800f45c:	9b07      	ldr	r3, [sp, #28]
 800f45e:	1b9a      	subs	r2, r3, r6
 800f460:	d006      	beq.n	800f470 <_dtoa_r+0x7a0>
 800f462:	ee18 1a10 	vmov	r1, s16
 800f466:	4620      	mov	r0, r4
 800f468:	f000 fe08 	bl	801007c <__pow5mult>
 800f46c:	ee08 0a10 	vmov	s16, r0
 800f470:	2101      	movs	r1, #1
 800f472:	4620      	mov	r0, r4
 800f474:	f000 fd42 	bl	800fefc <__i2b>
 800f478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	4606      	mov	r6, r0
 800f47e:	f340 8088 	ble.w	800f592 <_dtoa_r+0x8c2>
 800f482:	461a      	mov	r2, r3
 800f484:	4601      	mov	r1, r0
 800f486:	4620      	mov	r0, r4
 800f488:	f000 fdf8 	bl	801007c <__pow5mult>
 800f48c:	9b06      	ldr	r3, [sp, #24]
 800f48e:	2b01      	cmp	r3, #1
 800f490:	4606      	mov	r6, r0
 800f492:	f340 8081 	ble.w	800f598 <_dtoa_r+0x8c8>
 800f496:	f04f 0800 	mov.w	r8, #0
 800f49a:	6933      	ldr	r3, [r6, #16]
 800f49c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f4a0:	6918      	ldr	r0, [r3, #16]
 800f4a2:	f000 fcdb 	bl	800fe5c <__hi0bits>
 800f4a6:	f1c0 0020 	rsb	r0, r0, #32
 800f4aa:	9b05      	ldr	r3, [sp, #20]
 800f4ac:	4418      	add	r0, r3
 800f4ae:	f010 001f 	ands.w	r0, r0, #31
 800f4b2:	f000 8092 	beq.w	800f5da <_dtoa_r+0x90a>
 800f4b6:	f1c0 0320 	rsb	r3, r0, #32
 800f4ba:	2b04      	cmp	r3, #4
 800f4bc:	f340 808a 	ble.w	800f5d4 <_dtoa_r+0x904>
 800f4c0:	f1c0 001c 	rsb	r0, r0, #28
 800f4c4:	9b04      	ldr	r3, [sp, #16]
 800f4c6:	4403      	add	r3, r0
 800f4c8:	9304      	str	r3, [sp, #16]
 800f4ca:	9b05      	ldr	r3, [sp, #20]
 800f4cc:	4403      	add	r3, r0
 800f4ce:	4405      	add	r5, r0
 800f4d0:	9305      	str	r3, [sp, #20]
 800f4d2:	9b04      	ldr	r3, [sp, #16]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	dd07      	ble.n	800f4e8 <_dtoa_r+0x818>
 800f4d8:	ee18 1a10 	vmov	r1, s16
 800f4dc:	461a      	mov	r2, r3
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f000 fe26 	bl	8010130 <__lshift>
 800f4e4:	ee08 0a10 	vmov	s16, r0
 800f4e8:	9b05      	ldr	r3, [sp, #20]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	dd05      	ble.n	800f4fa <_dtoa_r+0x82a>
 800f4ee:	4631      	mov	r1, r6
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f000 fe1c 	bl	8010130 <__lshift>
 800f4f8:	4606      	mov	r6, r0
 800f4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d06e      	beq.n	800f5de <_dtoa_r+0x90e>
 800f500:	ee18 0a10 	vmov	r0, s16
 800f504:	4631      	mov	r1, r6
 800f506:	f000 fe83 	bl	8010210 <__mcmp>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	da67      	bge.n	800f5de <_dtoa_r+0x90e>
 800f50e:	9b00      	ldr	r3, [sp, #0]
 800f510:	3b01      	subs	r3, #1
 800f512:	ee18 1a10 	vmov	r1, s16
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	220a      	movs	r2, #10
 800f51a:	2300      	movs	r3, #0
 800f51c:	4620      	mov	r0, r4
 800f51e:	f000 fc57 	bl	800fdd0 <__multadd>
 800f522:	9b08      	ldr	r3, [sp, #32]
 800f524:	ee08 0a10 	vmov	s16, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f000 81b1 	beq.w	800f890 <_dtoa_r+0xbc0>
 800f52e:	2300      	movs	r3, #0
 800f530:	4639      	mov	r1, r7
 800f532:	220a      	movs	r2, #10
 800f534:	4620      	mov	r0, r4
 800f536:	f000 fc4b 	bl	800fdd0 <__multadd>
 800f53a:	9b02      	ldr	r3, [sp, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	4607      	mov	r7, r0
 800f540:	f300 808e 	bgt.w	800f660 <_dtoa_r+0x990>
 800f544:	9b06      	ldr	r3, [sp, #24]
 800f546:	2b02      	cmp	r3, #2
 800f548:	dc51      	bgt.n	800f5ee <_dtoa_r+0x91e>
 800f54a:	e089      	b.n	800f660 <_dtoa_r+0x990>
 800f54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f54e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f552:	e74b      	b.n	800f3ec <_dtoa_r+0x71c>
 800f554:	9b03      	ldr	r3, [sp, #12]
 800f556:	1e5e      	subs	r6, r3, #1
 800f558:	9b07      	ldr	r3, [sp, #28]
 800f55a:	42b3      	cmp	r3, r6
 800f55c:	bfbf      	itttt	lt
 800f55e:	9b07      	ldrlt	r3, [sp, #28]
 800f560:	9607      	strlt	r6, [sp, #28]
 800f562:	1af2      	sublt	r2, r6, r3
 800f564:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f566:	bfb6      	itet	lt
 800f568:	189b      	addlt	r3, r3, r2
 800f56a:	1b9e      	subge	r6, r3, r6
 800f56c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f56e:	9b03      	ldr	r3, [sp, #12]
 800f570:	bfb8      	it	lt
 800f572:	2600      	movlt	r6, #0
 800f574:	2b00      	cmp	r3, #0
 800f576:	bfb7      	itett	lt
 800f578:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f57c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f580:	1a9d      	sublt	r5, r3, r2
 800f582:	2300      	movlt	r3, #0
 800f584:	e734      	b.n	800f3f0 <_dtoa_r+0x720>
 800f586:	9e07      	ldr	r6, [sp, #28]
 800f588:	9d04      	ldr	r5, [sp, #16]
 800f58a:	9f08      	ldr	r7, [sp, #32]
 800f58c:	e73b      	b.n	800f406 <_dtoa_r+0x736>
 800f58e:	9a07      	ldr	r2, [sp, #28]
 800f590:	e767      	b.n	800f462 <_dtoa_r+0x792>
 800f592:	9b06      	ldr	r3, [sp, #24]
 800f594:	2b01      	cmp	r3, #1
 800f596:	dc18      	bgt.n	800f5ca <_dtoa_r+0x8fa>
 800f598:	f1ba 0f00 	cmp.w	sl, #0
 800f59c:	d115      	bne.n	800f5ca <_dtoa_r+0x8fa>
 800f59e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5a2:	b993      	cbnz	r3, 800f5ca <_dtoa_r+0x8fa>
 800f5a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f5a8:	0d1b      	lsrs	r3, r3, #20
 800f5aa:	051b      	lsls	r3, r3, #20
 800f5ac:	b183      	cbz	r3, 800f5d0 <_dtoa_r+0x900>
 800f5ae:	9b04      	ldr	r3, [sp, #16]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	9304      	str	r3, [sp, #16]
 800f5b4:	9b05      	ldr	r3, [sp, #20]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	9305      	str	r3, [sp, #20]
 800f5ba:	f04f 0801 	mov.w	r8, #1
 800f5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f47f af6a 	bne.w	800f49a <_dtoa_r+0x7ca>
 800f5c6:	2001      	movs	r0, #1
 800f5c8:	e76f      	b.n	800f4aa <_dtoa_r+0x7da>
 800f5ca:	f04f 0800 	mov.w	r8, #0
 800f5ce:	e7f6      	b.n	800f5be <_dtoa_r+0x8ee>
 800f5d0:	4698      	mov	r8, r3
 800f5d2:	e7f4      	b.n	800f5be <_dtoa_r+0x8ee>
 800f5d4:	f43f af7d 	beq.w	800f4d2 <_dtoa_r+0x802>
 800f5d8:	4618      	mov	r0, r3
 800f5da:	301c      	adds	r0, #28
 800f5dc:	e772      	b.n	800f4c4 <_dtoa_r+0x7f4>
 800f5de:	9b03      	ldr	r3, [sp, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	dc37      	bgt.n	800f654 <_dtoa_r+0x984>
 800f5e4:	9b06      	ldr	r3, [sp, #24]
 800f5e6:	2b02      	cmp	r3, #2
 800f5e8:	dd34      	ble.n	800f654 <_dtoa_r+0x984>
 800f5ea:	9b03      	ldr	r3, [sp, #12]
 800f5ec:	9302      	str	r3, [sp, #8]
 800f5ee:	9b02      	ldr	r3, [sp, #8]
 800f5f0:	b96b      	cbnz	r3, 800f60e <_dtoa_r+0x93e>
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	2205      	movs	r2, #5
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f000 fbea 	bl	800fdd0 <__multadd>
 800f5fc:	4601      	mov	r1, r0
 800f5fe:	4606      	mov	r6, r0
 800f600:	ee18 0a10 	vmov	r0, s16
 800f604:	f000 fe04 	bl	8010210 <__mcmp>
 800f608:	2800      	cmp	r0, #0
 800f60a:	f73f adbb 	bgt.w	800f184 <_dtoa_r+0x4b4>
 800f60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f610:	9d01      	ldr	r5, [sp, #4]
 800f612:	43db      	mvns	r3, r3
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	f04f 0800 	mov.w	r8, #0
 800f61a:	4631      	mov	r1, r6
 800f61c:	4620      	mov	r0, r4
 800f61e:	f000 fbb5 	bl	800fd8c <_Bfree>
 800f622:	2f00      	cmp	r7, #0
 800f624:	f43f aea4 	beq.w	800f370 <_dtoa_r+0x6a0>
 800f628:	f1b8 0f00 	cmp.w	r8, #0
 800f62c:	d005      	beq.n	800f63a <_dtoa_r+0x96a>
 800f62e:	45b8      	cmp	r8, r7
 800f630:	d003      	beq.n	800f63a <_dtoa_r+0x96a>
 800f632:	4641      	mov	r1, r8
 800f634:	4620      	mov	r0, r4
 800f636:	f000 fba9 	bl	800fd8c <_Bfree>
 800f63a:	4639      	mov	r1, r7
 800f63c:	4620      	mov	r0, r4
 800f63e:	f000 fba5 	bl	800fd8c <_Bfree>
 800f642:	e695      	b.n	800f370 <_dtoa_r+0x6a0>
 800f644:	2600      	movs	r6, #0
 800f646:	4637      	mov	r7, r6
 800f648:	e7e1      	b.n	800f60e <_dtoa_r+0x93e>
 800f64a:	9700      	str	r7, [sp, #0]
 800f64c:	4637      	mov	r7, r6
 800f64e:	e599      	b.n	800f184 <_dtoa_r+0x4b4>
 800f650:	40240000 	.word	0x40240000
 800f654:	9b08      	ldr	r3, [sp, #32]
 800f656:	2b00      	cmp	r3, #0
 800f658:	f000 80ca 	beq.w	800f7f0 <_dtoa_r+0xb20>
 800f65c:	9b03      	ldr	r3, [sp, #12]
 800f65e:	9302      	str	r3, [sp, #8]
 800f660:	2d00      	cmp	r5, #0
 800f662:	dd05      	ble.n	800f670 <_dtoa_r+0x9a0>
 800f664:	4639      	mov	r1, r7
 800f666:	462a      	mov	r2, r5
 800f668:	4620      	mov	r0, r4
 800f66a:	f000 fd61 	bl	8010130 <__lshift>
 800f66e:	4607      	mov	r7, r0
 800f670:	f1b8 0f00 	cmp.w	r8, #0
 800f674:	d05b      	beq.n	800f72e <_dtoa_r+0xa5e>
 800f676:	6879      	ldr	r1, [r7, #4]
 800f678:	4620      	mov	r0, r4
 800f67a:	f000 fb47 	bl	800fd0c <_Balloc>
 800f67e:	4605      	mov	r5, r0
 800f680:	b928      	cbnz	r0, 800f68e <_dtoa_r+0x9be>
 800f682:	4b87      	ldr	r3, [pc, #540]	; (800f8a0 <_dtoa_r+0xbd0>)
 800f684:	4602      	mov	r2, r0
 800f686:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f68a:	f7ff bb3b 	b.w	800ed04 <_dtoa_r+0x34>
 800f68e:	693a      	ldr	r2, [r7, #16]
 800f690:	3202      	adds	r2, #2
 800f692:	0092      	lsls	r2, r2, #2
 800f694:	f107 010c 	add.w	r1, r7, #12
 800f698:	300c      	adds	r0, #12
 800f69a:	f7fe fbcd 	bl	800de38 <memcpy>
 800f69e:	2201      	movs	r2, #1
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f000 fd44 	bl	8010130 <__lshift>
 800f6a8:	9b01      	ldr	r3, [sp, #4]
 800f6aa:	f103 0901 	add.w	r9, r3, #1
 800f6ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	9305      	str	r3, [sp, #20]
 800f6b6:	f00a 0301 	and.w	r3, sl, #1
 800f6ba:	46b8      	mov	r8, r7
 800f6bc:	9304      	str	r3, [sp, #16]
 800f6be:	4607      	mov	r7, r0
 800f6c0:	4631      	mov	r1, r6
 800f6c2:	ee18 0a10 	vmov	r0, s16
 800f6c6:	f7ff fa75 	bl	800ebb4 <quorem>
 800f6ca:	4641      	mov	r1, r8
 800f6cc:	9002      	str	r0, [sp, #8]
 800f6ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f6d2:	ee18 0a10 	vmov	r0, s16
 800f6d6:	f000 fd9b 	bl	8010210 <__mcmp>
 800f6da:	463a      	mov	r2, r7
 800f6dc:	9003      	str	r0, [sp, #12]
 800f6de:	4631      	mov	r1, r6
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	f000 fdb1 	bl	8010248 <__mdiff>
 800f6e6:	68c2      	ldr	r2, [r0, #12]
 800f6e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	bb02      	cbnz	r2, 800f732 <_dtoa_r+0xa62>
 800f6f0:	4601      	mov	r1, r0
 800f6f2:	ee18 0a10 	vmov	r0, s16
 800f6f6:	f000 fd8b 	bl	8010210 <__mcmp>
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	4620      	mov	r0, r4
 800f700:	9207      	str	r2, [sp, #28]
 800f702:	f000 fb43 	bl	800fd8c <_Bfree>
 800f706:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f70a:	ea43 0102 	orr.w	r1, r3, r2
 800f70e:	9b04      	ldr	r3, [sp, #16]
 800f710:	430b      	orrs	r3, r1
 800f712:	464d      	mov	r5, r9
 800f714:	d10f      	bne.n	800f736 <_dtoa_r+0xa66>
 800f716:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f71a:	d02a      	beq.n	800f772 <_dtoa_r+0xaa2>
 800f71c:	9b03      	ldr	r3, [sp, #12]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	dd02      	ble.n	800f728 <_dtoa_r+0xa58>
 800f722:	9b02      	ldr	r3, [sp, #8]
 800f724:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f728:	f88b a000 	strb.w	sl, [fp]
 800f72c:	e775      	b.n	800f61a <_dtoa_r+0x94a>
 800f72e:	4638      	mov	r0, r7
 800f730:	e7ba      	b.n	800f6a8 <_dtoa_r+0x9d8>
 800f732:	2201      	movs	r2, #1
 800f734:	e7e2      	b.n	800f6fc <_dtoa_r+0xa2c>
 800f736:	9b03      	ldr	r3, [sp, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	db04      	blt.n	800f746 <_dtoa_r+0xa76>
 800f73c:	9906      	ldr	r1, [sp, #24]
 800f73e:	430b      	orrs	r3, r1
 800f740:	9904      	ldr	r1, [sp, #16]
 800f742:	430b      	orrs	r3, r1
 800f744:	d122      	bne.n	800f78c <_dtoa_r+0xabc>
 800f746:	2a00      	cmp	r2, #0
 800f748:	ddee      	ble.n	800f728 <_dtoa_r+0xa58>
 800f74a:	ee18 1a10 	vmov	r1, s16
 800f74e:	2201      	movs	r2, #1
 800f750:	4620      	mov	r0, r4
 800f752:	f000 fced 	bl	8010130 <__lshift>
 800f756:	4631      	mov	r1, r6
 800f758:	ee08 0a10 	vmov	s16, r0
 800f75c:	f000 fd58 	bl	8010210 <__mcmp>
 800f760:	2800      	cmp	r0, #0
 800f762:	dc03      	bgt.n	800f76c <_dtoa_r+0xa9c>
 800f764:	d1e0      	bne.n	800f728 <_dtoa_r+0xa58>
 800f766:	f01a 0f01 	tst.w	sl, #1
 800f76a:	d0dd      	beq.n	800f728 <_dtoa_r+0xa58>
 800f76c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f770:	d1d7      	bne.n	800f722 <_dtoa_r+0xa52>
 800f772:	2339      	movs	r3, #57	; 0x39
 800f774:	f88b 3000 	strb.w	r3, [fp]
 800f778:	462b      	mov	r3, r5
 800f77a:	461d      	mov	r5, r3
 800f77c:	3b01      	subs	r3, #1
 800f77e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f782:	2a39      	cmp	r2, #57	; 0x39
 800f784:	d071      	beq.n	800f86a <_dtoa_r+0xb9a>
 800f786:	3201      	adds	r2, #1
 800f788:	701a      	strb	r2, [r3, #0]
 800f78a:	e746      	b.n	800f61a <_dtoa_r+0x94a>
 800f78c:	2a00      	cmp	r2, #0
 800f78e:	dd07      	ble.n	800f7a0 <_dtoa_r+0xad0>
 800f790:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f794:	d0ed      	beq.n	800f772 <_dtoa_r+0xaa2>
 800f796:	f10a 0301 	add.w	r3, sl, #1
 800f79a:	f88b 3000 	strb.w	r3, [fp]
 800f79e:	e73c      	b.n	800f61a <_dtoa_r+0x94a>
 800f7a0:	9b05      	ldr	r3, [sp, #20]
 800f7a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f7a6:	4599      	cmp	r9, r3
 800f7a8:	d047      	beq.n	800f83a <_dtoa_r+0xb6a>
 800f7aa:	ee18 1a10 	vmov	r1, s16
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	220a      	movs	r2, #10
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f000 fb0c 	bl	800fdd0 <__multadd>
 800f7b8:	45b8      	cmp	r8, r7
 800f7ba:	ee08 0a10 	vmov	s16, r0
 800f7be:	f04f 0300 	mov.w	r3, #0
 800f7c2:	f04f 020a 	mov.w	r2, #10
 800f7c6:	4641      	mov	r1, r8
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	d106      	bne.n	800f7da <_dtoa_r+0xb0a>
 800f7cc:	f000 fb00 	bl	800fdd0 <__multadd>
 800f7d0:	4680      	mov	r8, r0
 800f7d2:	4607      	mov	r7, r0
 800f7d4:	f109 0901 	add.w	r9, r9, #1
 800f7d8:	e772      	b.n	800f6c0 <_dtoa_r+0x9f0>
 800f7da:	f000 faf9 	bl	800fdd0 <__multadd>
 800f7de:	4639      	mov	r1, r7
 800f7e0:	4680      	mov	r8, r0
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	220a      	movs	r2, #10
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f000 faf2 	bl	800fdd0 <__multadd>
 800f7ec:	4607      	mov	r7, r0
 800f7ee:	e7f1      	b.n	800f7d4 <_dtoa_r+0xb04>
 800f7f0:	9b03      	ldr	r3, [sp, #12]
 800f7f2:	9302      	str	r3, [sp, #8]
 800f7f4:	9d01      	ldr	r5, [sp, #4]
 800f7f6:	ee18 0a10 	vmov	r0, s16
 800f7fa:	4631      	mov	r1, r6
 800f7fc:	f7ff f9da 	bl	800ebb4 <quorem>
 800f800:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f804:	9b01      	ldr	r3, [sp, #4]
 800f806:	f805 ab01 	strb.w	sl, [r5], #1
 800f80a:	1aea      	subs	r2, r5, r3
 800f80c:	9b02      	ldr	r3, [sp, #8]
 800f80e:	4293      	cmp	r3, r2
 800f810:	dd09      	ble.n	800f826 <_dtoa_r+0xb56>
 800f812:	ee18 1a10 	vmov	r1, s16
 800f816:	2300      	movs	r3, #0
 800f818:	220a      	movs	r2, #10
 800f81a:	4620      	mov	r0, r4
 800f81c:	f000 fad8 	bl	800fdd0 <__multadd>
 800f820:	ee08 0a10 	vmov	s16, r0
 800f824:	e7e7      	b.n	800f7f6 <_dtoa_r+0xb26>
 800f826:	9b02      	ldr	r3, [sp, #8]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	bfc8      	it	gt
 800f82c:	461d      	movgt	r5, r3
 800f82e:	9b01      	ldr	r3, [sp, #4]
 800f830:	bfd8      	it	le
 800f832:	2501      	movle	r5, #1
 800f834:	441d      	add	r5, r3
 800f836:	f04f 0800 	mov.w	r8, #0
 800f83a:	ee18 1a10 	vmov	r1, s16
 800f83e:	2201      	movs	r2, #1
 800f840:	4620      	mov	r0, r4
 800f842:	f000 fc75 	bl	8010130 <__lshift>
 800f846:	4631      	mov	r1, r6
 800f848:	ee08 0a10 	vmov	s16, r0
 800f84c:	f000 fce0 	bl	8010210 <__mcmp>
 800f850:	2800      	cmp	r0, #0
 800f852:	dc91      	bgt.n	800f778 <_dtoa_r+0xaa8>
 800f854:	d102      	bne.n	800f85c <_dtoa_r+0xb8c>
 800f856:	f01a 0f01 	tst.w	sl, #1
 800f85a:	d18d      	bne.n	800f778 <_dtoa_r+0xaa8>
 800f85c:	462b      	mov	r3, r5
 800f85e:	461d      	mov	r5, r3
 800f860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f864:	2a30      	cmp	r2, #48	; 0x30
 800f866:	d0fa      	beq.n	800f85e <_dtoa_r+0xb8e>
 800f868:	e6d7      	b.n	800f61a <_dtoa_r+0x94a>
 800f86a:	9a01      	ldr	r2, [sp, #4]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d184      	bne.n	800f77a <_dtoa_r+0xaaa>
 800f870:	9b00      	ldr	r3, [sp, #0]
 800f872:	3301      	adds	r3, #1
 800f874:	9300      	str	r3, [sp, #0]
 800f876:	2331      	movs	r3, #49	; 0x31
 800f878:	7013      	strb	r3, [r2, #0]
 800f87a:	e6ce      	b.n	800f61a <_dtoa_r+0x94a>
 800f87c:	4b09      	ldr	r3, [pc, #36]	; (800f8a4 <_dtoa_r+0xbd4>)
 800f87e:	f7ff ba95 	b.w	800edac <_dtoa_r+0xdc>
 800f882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f884:	2b00      	cmp	r3, #0
 800f886:	f47f aa6e 	bne.w	800ed66 <_dtoa_r+0x96>
 800f88a:	4b07      	ldr	r3, [pc, #28]	; (800f8a8 <_dtoa_r+0xbd8>)
 800f88c:	f7ff ba8e 	b.w	800edac <_dtoa_r+0xdc>
 800f890:	9b02      	ldr	r3, [sp, #8]
 800f892:	2b00      	cmp	r3, #0
 800f894:	dcae      	bgt.n	800f7f4 <_dtoa_r+0xb24>
 800f896:	9b06      	ldr	r3, [sp, #24]
 800f898:	2b02      	cmp	r3, #2
 800f89a:	f73f aea8 	bgt.w	800f5ee <_dtoa_r+0x91e>
 800f89e:	e7a9      	b.n	800f7f4 <_dtoa_r+0xb24>
 800f8a0:	08010c13 	.word	0x08010c13
 800f8a4:	08010b70 	.word	0x08010b70
 800f8a8:	08010b94 	.word	0x08010b94

0800f8ac <__sflush_r>:
 800f8ac:	898a      	ldrh	r2, [r1, #12]
 800f8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b2:	4605      	mov	r5, r0
 800f8b4:	0710      	lsls	r0, r2, #28
 800f8b6:	460c      	mov	r4, r1
 800f8b8:	d458      	bmi.n	800f96c <__sflush_r+0xc0>
 800f8ba:	684b      	ldr	r3, [r1, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	dc05      	bgt.n	800f8cc <__sflush_r+0x20>
 800f8c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	dc02      	bgt.n	800f8cc <__sflush_r+0x20>
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8ce:	2e00      	cmp	r6, #0
 800f8d0:	d0f9      	beq.n	800f8c6 <__sflush_r+0x1a>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8d8:	682f      	ldr	r7, [r5, #0]
 800f8da:	602b      	str	r3, [r5, #0]
 800f8dc:	d032      	beq.n	800f944 <__sflush_r+0x98>
 800f8de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8e0:	89a3      	ldrh	r3, [r4, #12]
 800f8e2:	075a      	lsls	r2, r3, #29
 800f8e4:	d505      	bpl.n	800f8f2 <__sflush_r+0x46>
 800f8e6:	6863      	ldr	r3, [r4, #4]
 800f8e8:	1ac0      	subs	r0, r0, r3
 800f8ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8ec:	b10b      	cbz	r3, 800f8f2 <__sflush_r+0x46>
 800f8ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8f0:	1ac0      	subs	r0, r0, r3
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8f8:	6a21      	ldr	r1, [r4, #32]
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	47b0      	blx	r6
 800f8fe:	1c43      	adds	r3, r0, #1
 800f900:	89a3      	ldrh	r3, [r4, #12]
 800f902:	d106      	bne.n	800f912 <__sflush_r+0x66>
 800f904:	6829      	ldr	r1, [r5, #0]
 800f906:	291d      	cmp	r1, #29
 800f908:	d82c      	bhi.n	800f964 <__sflush_r+0xb8>
 800f90a:	4a2a      	ldr	r2, [pc, #168]	; (800f9b4 <__sflush_r+0x108>)
 800f90c:	40ca      	lsrs	r2, r1
 800f90e:	07d6      	lsls	r6, r2, #31
 800f910:	d528      	bpl.n	800f964 <__sflush_r+0xb8>
 800f912:	2200      	movs	r2, #0
 800f914:	6062      	str	r2, [r4, #4]
 800f916:	04d9      	lsls	r1, r3, #19
 800f918:	6922      	ldr	r2, [r4, #16]
 800f91a:	6022      	str	r2, [r4, #0]
 800f91c:	d504      	bpl.n	800f928 <__sflush_r+0x7c>
 800f91e:	1c42      	adds	r2, r0, #1
 800f920:	d101      	bne.n	800f926 <__sflush_r+0x7a>
 800f922:	682b      	ldr	r3, [r5, #0]
 800f924:	b903      	cbnz	r3, 800f928 <__sflush_r+0x7c>
 800f926:	6560      	str	r0, [r4, #84]	; 0x54
 800f928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f92a:	602f      	str	r7, [r5, #0]
 800f92c:	2900      	cmp	r1, #0
 800f92e:	d0ca      	beq.n	800f8c6 <__sflush_r+0x1a>
 800f930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f934:	4299      	cmp	r1, r3
 800f936:	d002      	beq.n	800f93e <__sflush_r+0x92>
 800f938:	4628      	mov	r0, r5
 800f93a:	f7fe fa93 	bl	800de64 <_free_r>
 800f93e:	2000      	movs	r0, #0
 800f940:	6360      	str	r0, [r4, #52]	; 0x34
 800f942:	e7c1      	b.n	800f8c8 <__sflush_r+0x1c>
 800f944:	6a21      	ldr	r1, [r4, #32]
 800f946:	2301      	movs	r3, #1
 800f948:	4628      	mov	r0, r5
 800f94a:	47b0      	blx	r6
 800f94c:	1c41      	adds	r1, r0, #1
 800f94e:	d1c7      	bne.n	800f8e0 <__sflush_r+0x34>
 800f950:	682b      	ldr	r3, [r5, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d0c4      	beq.n	800f8e0 <__sflush_r+0x34>
 800f956:	2b1d      	cmp	r3, #29
 800f958:	d001      	beq.n	800f95e <__sflush_r+0xb2>
 800f95a:	2b16      	cmp	r3, #22
 800f95c:	d101      	bne.n	800f962 <__sflush_r+0xb6>
 800f95e:	602f      	str	r7, [r5, #0]
 800f960:	e7b1      	b.n	800f8c6 <__sflush_r+0x1a>
 800f962:	89a3      	ldrh	r3, [r4, #12]
 800f964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f968:	81a3      	strh	r3, [r4, #12]
 800f96a:	e7ad      	b.n	800f8c8 <__sflush_r+0x1c>
 800f96c:	690f      	ldr	r7, [r1, #16]
 800f96e:	2f00      	cmp	r7, #0
 800f970:	d0a9      	beq.n	800f8c6 <__sflush_r+0x1a>
 800f972:	0793      	lsls	r3, r2, #30
 800f974:	680e      	ldr	r6, [r1, #0]
 800f976:	bf08      	it	eq
 800f978:	694b      	ldreq	r3, [r1, #20]
 800f97a:	600f      	str	r7, [r1, #0]
 800f97c:	bf18      	it	ne
 800f97e:	2300      	movne	r3, #0
 800f980:	eba6 0807 	sub.w	r8, r6, r7
 800f984:	608b      	str	r3, [r1, #8]
 800f986:	f1b8 0f00 	cmp.w	r8, #0
 800f98a:	dd9c      	ble.n	800f8c6 <__sflush_r+0x1a>
 800f98c:	6a21      	ldr	r1, [r4, #32]
 800f98e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f990:	4643      	mov	r3, r8
 800f992:	463a      	mov	r2, r7
 800f994:	4628      	mov	r0, r5
 800f996:	47b0      	blx	r6
 800f998:	2800      	cmp	r0, #0
 800f99a:	dc06      	bgt.n	800f9aa <__sflush_r+0xfe>
 800f99c:	89a3      	ldrh	r3, [r4, #12]
 800f99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a2:	81a3      	strh	r3, [r4, #12]
 800f9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a8:	e78e      	b.n	800f8c8 <__sflush_r+0x1c>
 800f9aa:	4407      	add	r7, r0
 800f9ac:	eba8 0800 	sub.w	r8, r8, r0
 800f9b0:	e7e9      	b.n	800f986 <__sflush_r+0xda>
 800f9b2:	bf00      	nop
 800f9b4:	20400001 	.word	0x20400001

0800f9b8 <_fflush_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	690b      	ldr	r3, [r1, #16]
 800f9bc:	4605      	mov	r5, r0
 800f9be:	460c      	mov	r4, r1
 800f9c0:	b913      	cbnz	r3, 800f9c8 <_fflush_r+0x10>
 800f9c2:	2500      	movs	r5, #0
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	bd38      	pop	{r3, r4, r5, pc}
 800f9c8:	b118      	cbz	r0, 800f9d2 <_fflush_r+0x1a>
 800f9ca:	6983      	ldr	r3, [r0, #24]
 800f9cc:	b90b      	cbnz	r3, 800f9d2 <_fflush_r+0x1a>
 800f9ce:	f000 f887 	bl	800fae0 <__sinit>
 800f9d2:	4b14      	ldr	r3, [pc, #80]	; (800fa24 <_fflush_r+0x6c>)
 800f9d4:	429c      	cmp	r4, r3
 800f9d6:	d11b      	bne.n	800fa10 <_fflush_r+0x58>
 800f9d8:	686c      	ldr	r4, [r5, #4]
 800f9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d0ef      	beq.n	800f9c2 <_fflush_r+0xa>
 800f9e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9e4:	07d0      	lsls	r0, r2, #31
 800f9e6:	d404      	bmi.n	800f9f2 <_fflush_r+0x3a>
 800f9e8:	0599      	lsls	r1, r3, #22
 800f9ea:	d402      	bmi.n	800f9f2 <_fflush_r+0x3a>
 800f9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9ee:	f000 f91a 	bl	800fc26 <__retarget_lock_acquire_recursive>
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	f7ff ff59 	bl	800f8ac <__sflush_r>
 800f9fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9fc:	07da      	lsls	r2, r3, #31
 800f9fe:	4605      	mov	r5, r0
 800fa00:	d4e0      	bmi.n	800f9c4 <_fflush_r+0xc>
 800fa02:	89a3      	ldrh	r3, [r4, #12]
 800fa04:	059b      	lsls	r3, r3, #22
 800fa06:	d4dd      	bmi.n	800f9c4 <_fflush_r+0xc>
 800fa08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa0a:	f000 f90d 	bl	800fc28 <__retarget_lock_release_recursive>
 800fa0e:	e7d9      	b.n	800f9c4 <_fflush_r+0xc>
 800fa10:	4b05      	ldr	r3, [pc, #20]	; (800fa28 <_fflush_r+0x70>)
 800fa12:	429c      	cmp	r4, r3
 800fa14:	d101      	bne.n	800fa1a <_fflush_r+0x62>
 800fa16:	68ac      	ldr	r4, [r5, #8]
 800fa18:	e7df      	b.n	800f9da <_fflush_r+0x22>
 800fa1a:	4b04      	ldr	r3, [pc, #16]	; (800fa2c <_fflush_r+0x74>)
 800fa1c:	429c      	cmp	r4, r3
 800fa1e:	bf08      	it	eq
 800fa20:	68ec      	ldreq	r4, [r5, #12]
 800fa22:	e7da      	b.n	800f9da <_fflush_r+0x22>
 800fa24:	08010c44 	.word	0x08010c44
 800fa28:	08010c64 	.word	0x08010c64
 800fa2c:	08010c24 	.word	0x08010c24

0800fa30 <std>:
 800fa30:	2300      	movs	r3, #0
 800fa32:	b510      	push	{r4, lr}
 800fa34:	4604      	mov	r4, r0
 800fa36:	e9c0 3300 	strd	r3, r3, [r0]
 800fa3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa3e:	6083      	str	r3, [r0, #8]
 800fa40:	8181      	strh	r1, [r0, #12]
 800fa42:	6643      	str	r3, [r0, #100]	; 0x64
 800fa44:	81c2      	strh	r2, [r0, #14]
 800fa46:	6183      	str	r3, [r0, #24]
 800fa48:	4619      	mov	r1, r3
 800fa4a:	2208      	movs	r2, #8
 800fa4c:	305c      	adds	r0, #92	; 0x5c
 800fa4e:	f7fe fa01 	bl	800de54 <memset>
 800fa52:	4b05      	ldr	r3, [pc, #20]	; (800fa68 <std+0x38>)
 800fa54:	6263      	str	r3, [r4, #36]	; 0x24
 800fa56:	4b05      	ldr	r3, [pc, #20]	; (800fa6c <std+0x3c>)
 800fa58:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa5a:	4b05      	ldr	r3, [pc, #20]	; (800fa70 <std+0x40>)
 800fa5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa5e:	4b05      	ldr	r3, [pc, #20]	; (800fa74 <std+0x44>)
 800fa60:	6224      	str	r4, [r4, #32]
 800fa62:	6323      	str	r3, [r4, #48]	; 0x30
 800fa64:	bd10      	pop	{r4, pc}
 800fa66:	bf00      	nop
 800fa68:	080106f5 	.word	0x080106f5
 800fa6c:	08010717 	.word	0x08010717
 800fa70:	0801074f 	.word	0x0801074f
 800fa74:	08010773 	.word	0x08010773

0800fa78 <_cleanup_r>:
 800fa78:	4901      	ldr	r1, [pc, #4]	; (800fa80 <_cleanup_r+0x8>)
 800fa7a:	f000 b8af 	b.w	800fbdc <_fwalk_reent>
 800fa7e:	bf00      	nop
 800fa80:	0800f9b9 	.word	0x0800f9b9

0800fa84 <__sfmoreglue>:
 800fa84:	b570      	push	{r4, r5, r6, lr}
 800fa86:	2268      	movs	r2, #104	; 0x68
 800fa88:	1e4d      	subs	r5, r1, #1
 800fa8a:	4355      	muls	r5, r2
 800fa8c:	460e      	mov	r6, r1
 800fa8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa92:	f7fe fa53 	bl	800df3c <_malloc_r>
 800fa96:	4604      	mov	r4, r0
 800fa98:	b140      	cbz	r0, 800faac <__sfmoreglue+0x28>
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	e9c0 1600 	strd	r1, r6, [r0]
 800faa0:	300c      	adds	r0, #12
 800faa2:	60a0      	str	r0, [r4, #8]
 800faa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800faa8:	f7fe f9d4 	bl	800de54 <memset>
 800faac:	4620      	mov	r0, r4
 800faae:	bd70      	pop	{r4, r5, r6, pc}

0800fab0 <__sfp_lock_acquire>:
 800fab0:	4801      	ldr	r0, [pc, #4]	; (800fab8 <__sfp_lock_acquire+0x8>)
 800fab2:	f000 b8b8 	b.w	800fc26 <__retarget_lock_acquire_recursive>
 800fab6:	bf00      	nop
 800fab8:	20008f75 	.word	0x20008f75

0800fabc <__sfp_lock_release>:
 800fabc:	4801      	ldr	r0, [pc, #4]	; (800fac4 <__sfp_lock_release+0x8>)
 800fabe:	f000 b8b3 	b.w	800fc28 <__retarget_lock_release_recursive>
 800fac2:	bf00      	nop
 800fac4:	20008f75 	.word	0x20008f75

0800fac8 <__sinit_lock_acquire>:
 800fac8:	4801      	ldr	r0, [pc, #4]	; (800fad0 <__sinit_lock_acquire+0x8>)
 800faca:	f000 b8ac 	b.w	800fc26 <__retarget_lock_acquire_recursive>
 800face:	bf00      	nop
 800fad0:	20008f76 	.word	0x20008f76

0800fad4 <__sinit_lock_release>:
 800fad4:	4801      	ldr	r0, [pc, #4]	; (800fadc <__sinit_lock_release+0x8>)
 800fad6:	f000 b8a7 	b.w	800fc28 <__retarget_lock_release_recursive>
 800fada:	bf00      	nop
 800fadc:	20008f76 	.word	0x20008f76

0800fae0 <__sinit>:
 800fae0:	b510      	push	{r4, lr}
 800fae2:	4604      	mov	r4, r0
 800fae4:	f7ff fff0 	bl	800fac8 <__sinit_lock_acquire>
 800fae8:	69a3      	ldr	r3, [r4, #24]
 800faea:	b11b      	cbz	r3, 800faf4 <__sinit+0x14>
 800faec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faf0:	f7ff bff0 	b.w	800fad4 <__sinit_lock_release>
 800faf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800faf8:	6523      	str	r3, [r4, #80]	; 0x50
 800fafa:	4b13      	ldr	r3, [pc, #76]	; (800fb48 <__sinit+0x68>)
 800fafc:	4a13      	ldr	r2, [pc, #76]	; (800fb4c <__sinit+0x6c>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	62a2      	str	r2, [r4, #40]	; 0x28
 800fb02:	42a3      	cmp	r3, r4
 800fb04:	bf04      	itt	eq
 800fb06:	2301      	moveq	r3, #1
 800fb08:	61a3      	streq	r3, [r4, #24]
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f000 f820 	bl	800fb50 <__sfp>
 800fb10:	6060      	str	r0, [r4, #4]
 800fb12:	4620      	mov	r0, r4
 800fb14:	f000 f81c 	bl	800fb50 <__sfp>
 800fb18:	60a0      	str	r0, [r4, #8]
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f000 f818 	bl	800fb50 <__sfp>
 800fb20:	2200      	movs	r2, #0
 800fb22:	60e0      	str	r0, [r4, #12]
 800fb24:	2104      	movs	r1, #4
 800fb26:	6860      	ldr	r0, [r4, #4]
 800fb28:	f7ff ff82 	bl	800fa30 <std>
 800fb2c:	68a0      	ldr	r0, [r4, #8]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	2109      	movs	r1, #9
 800fb32:	f7ff ff7d 	bl	800fa30 <std>
 800fb36:	68e0      	ldr	r0, [r4, #12]
 800fb38:	2202      	movs	r2, #2
 800fb3a:	2112      	movs	r1, #18
 800fb3c:	f7ff ff78 	bl	800fa30 <std>
 800fb40:	2301      	movs	r3, #1
 800fb42:	61a3      	str	r3, [r4, #24]
 800fb44:	e7d2      	b.n	800faec <__sinit+0xc>
 800fb46:	bf00      	nop
 800fb48:	08010b5c 	.word	0x08010b5c
 800fb4c:	0800fa79 	.word	0x0800fa79

0800fb50 <__sfp>:
 800fb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb52:	4607      	mov	r7, r0
 800fb54:	f7ff ffac 	bl	800fab0 <__sfp_lock_acquire>
 800fb58:	4b1e      	ldr	r3, [pc, #120]	; (800fbd4 <__sfp+0x84>)
 800fb5a:	681e      	ldr	r6, [r3, #0]
 800fb5c:	69b3      	ldr	r3, [r6, #24]
 800fb5e:	b913      	cbnz	r3, 800fb66 <__sfp+0x16>
 800fb60:	4630      	mov	r0, r6
 800fb62:	f7ff ffbd 	bl	800fae0 <__sinit>
 800fb66:	3648      	adds	r6, #72	; 0x48
 800fb68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	d503      	bpl.n	800fb78 <__sfp+0x28>
 800fb70:	6833      	ldr	r3, [r6, #0]
 800fb72:	b30b      	cbz	r3, 800fbb8 <__sfp+0x68>
 800fb74:	6836      	ldr	r6, [r6, #0]
 800fb76:	e7f7      	b.n	800fb68 <__sfp+0x18>
 800fb78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb7c:	b9d5      	cbnz	r5, 800fbb4 <__sfp+0x64>
 800fb7e:	4b16      	ldr	r3, [pc, #88]	; (800fbd8 <__sfp+0x88>)
 800fb80:	60e3      	str	r3, [r4, #12]
 800fb82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb86:	6665      	str	r5, [r4, #100]	; 0x64
 800fb88:	f000 f84c 	bl	800fc24 <__retarget_lock_init_recursive>
 800fb8c:	f7ff ff96 	bl	800fabc <__sfp_lock_release>
 800fb90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb98:	6025      	str	r5, [r4, #0]
 800fb9a:	61a5      	str	r5, [r4, #24]
 800fb9c:	2208      	movs	r2, #8
 800fb9e:	4629      	mov	r1, r5
 800fba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fba4:	f7fe f956 	bl	800de54 <memset>
 800fba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fbac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb4:	3468      	adds	r4, #104	; 0x68
 800fbb6:	e7d9      	b.n	800fb6c <__sfp+0x1c>
 800fbb8:	2104      	movs	r1, #4
 800fbba:	4638      	mov	r0, r7
 800fbbc:	f7ff ff62 	bl	800fa84 <__sfmoreglue>
 800fbc0:	4604      	mov	r4, r0
 800fbc2:	6030      	str	r0, [r6, #0]
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d1d5      	bne.n	800fb74 <__sfp+0x24>
 800fbc8:	f7ff ff78 	bl	800fabc <__sfp_lock_release>
 800fbcc:	230c      	movs	r3, #12
 800fbce:	603b      	str	r3, [r7, #0]
 800fbd0:	e7ee      	b.n	800fbb0 <__sfp+0x60>
 800fbd2:	bf00      	nop
 800fbd4:	08010b5c 	.word	0x08010b5c
 800fbd8:	ffff0001 	.word	0xffff0001

0800fbdc <_fwalk_reent>:
 800fbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	4688      	mov	r8, r1
 800fbe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fbe8:	2700      	movs	r7, #0
 800fbea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbee:	f1b9 0901 	subs.w	r9, r9, #1
 800fbf2:	d505      	bpl.n	800fc00 <_fwalk_reent+0x24>
 800fbf4:	6824      	ldr	r4, [r4, #0]
 800fbf6:	2c00      	cmp	r4, #0
 800fbf8:	d1f7      	bne.n	800fbea <_fwalk_reent+0xe>
 800fbfa:	4638      	mov	r0, r7
 800fbfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc00:	89ab      	ldrh	r3, [r5, #12]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d907      	bls.n	800fc16 <_fwalk_reent+0x3a>
 800fc06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	d003      	beq.n	800fc16 <_fwalk_reent+0x3a>
 800fc0e:	4629      	mov	r1, r5
 800fc10:	4630      	mov	r0, r6
 800fc12:	47c0      	blx	r8
 800fc14:	4307      	orrs	r7, r0
 800fc16:	3568      	adds	r5, #104	; 0x68
 800fc18:	e7e9      	b.n	800fbee <_fwalk_reent+0x12>
	...

0800fc1c <_localeconv_r>:
 800fc1c:	4800      	ldr	r0, [pc, #0]	; (800fc20 <_localeconv_r+0x4>)
 800fc1e:	4770      	bx	lr
 800fc20:	20000184 	.word	0x20000184

0800fc24 <__retarget_lock_init_recursive>:
 800fc24:	4770      	bx	lr

0800fc26 <__retarget_lock_acquire_recursive>:
 800fc26:	4770      	bx	lr

0800fc28 <__retarget_lock_release_recursive>:
 800fc28:	4770      	bx	lr

0800fc2a <__swhatbuf_r>:
 800fc2a:	b570      	push	{r4, r5, r6, lr}
 800fc2c:	460e      	mov	r6, r1
 800fc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc32:	2900      	cmp	r1, #0
 800fc34:	b096      	sub	sp, #88	; 0x58
 800fc36:	4614      	mov	r4, r2
 800fc38:	461d      	mov	r5, r3
 800fc3a:	da08      	bge.n	800fc4e <__swhatbuf_r+0x24>
 800fc3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	602a      	str	r2, [r5, #0]
 800fc44:	061a      	lsls	r2, r3, #24
 800fc46:	d410      	bmi.n	800fc6a <__swhatbuf_r+0x40>
 800fc48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc4c:	e00e      	b.n	800fc6c <__swhatbuf_r+0x42>
 800fc4e:	466a      	mov	r2, sp
 800fc50:	f000 fde6 	bl	8010820 <_fstat_r>
 800fc54:	2800      	cmp	r0, #0
 800fc56:	dbf1      	blt.n	800fc3c <__swhatbuf_r+0x12>
 800fc58:	9a01      	ldr	r2, [sp, #4]
 800fc5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc62:	425a      	negs	r2, r3
 800fc64:	415a      	adcs	r2, r3
 800fc66:	602a      	str	r2, [r5, #0]
 800fc68:	e7ee      	b.n	800fc48 <__swhatbuf_r+0x1e>
 800fc6a:	2340      	movs	r3, #64	; 0x40
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	6023      	str	r3, [r4, #0]
 800fc70:	b016      	add	sp, #88	; 0x58
 800fc72:	bd70      	pop	{r4, r5, r6, pc}

0800fc74 <__smakebuf_r>:
 800fc74:	898b      	ldrh	r3, [r1, #12]
 800fc76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc78:	079d      	lsls	r5, r3, #30
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	460c      	mov	r4, r1
 800fc7e:	d507      	bpl.n	800fc90 <__smakebuf_r+0x1c>
 800fc80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc84:	6023      	str	r3, [r4, #0]
 800fc86:	6123      	str	r3, [r4, #16]
 800fc88:	2301      	movs	r3, #1
 800fc8a:	6163      	str	r3, [r4, #20]
 800fc8c:	b002      	add	sp, #8
 800fc8e:	bd70      	pop	{r4, r5, r6, pc}
 800fc90:	ab01      	add	r3, sp, #4
 800fc92:	466a      	mov	r2, sp
 800fc94:	f7ff ffc9 	bl	800fc2a <__swhatbuf_r>
 800fc98:	9900      	ldr	r1, [sp, #0]
 800fc9a:	4605      	mov	r5, r0
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	f7fe f94d 	bl	800df3c <_malloc_r>
 800fca2:	b948      	cbnz	r0, 800fcb8 <__smakebuf_r+0x44>
 800fca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fca8:	059a      	lsls	r2, r3, #22
 800fcaa:	d4ef      	bmi.n	800fc8c <__smakebuf_r+0x18>
 800fcac:	f023 0303 	bic.w	r3, r3, #3
 800fcb0:	f043 0302 	orr.w	r3, r3, #2
 800fcb4:	81a3      	strh	r3, [r4, #12]
 800fcb6:	e7e3      	b.n	800fc80 <__smakebuf_r+0xc>
 800fcb8:	4b0d      	ldr	r3, [pc, #52]	; (800fcf0 <__smakebuf_r+0x7c>)
 800fcba:	62b3      	str	r3, [r6, #40]	; 0x28
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	6020      	str	r0, [r4, #0]
 800fcc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcc4:	81a3      	strh	r3, [r4, #12]
 800fcc6:	9b00      	ldr	r3, [sp, #0]
 800fcc8:	6163      	str	r3, [r4, #20]
 800fcca:	9b01      	ldr	r3, [sp, #4]
 800fccc:	6120      	str	r0, [r4, #16]
 800fcce:	b15b      	cbz	r3, 800fce8 <__smakebuf_r+0x74>
 800fcd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	f000 fdb5 	bl	8010844 <_isatty_r>
 800fcda:	b128      	cbz	r0, 800fce8 <__smakebuf_r+0x74>
 800fcdc:	89a3      	ldrh	r3, [r4, #12]
 800fcde:	f023 0303 	bic.w	r3, r3, #3
 800fce2:	f043 0301 	orr.w	r3, r3, #1
 800fce6:	81a3      	strh	r3, [r4, #12]
 800fce8:	89a0      	ldrh	r0, [r4, #12]
 800fcea:	4305      	orrs	r5, r0
 800fcec:	81a5      	strh	r5, [r4, #12]
 800fcee:	e7cd      	b.n	800fc8c <__smakebuf_r+0x18>
 800fcf0:	0800fa79 	.word	0x0800fa79

0800fcf4 <__malloc_lock>:
 800fcf4:	4801      	ldr	r0, [pc, #4]	; (800fcfc <__malloc_lock+0x8>)
 800fcf6:	f7ff bf96 	b.w	800fc26 <__retarget_lock_acquire_recursive>
 800fcfa:	bf00      	nop
 800fcfc:	20008f74 	.word	0x20008f74

0800fd00 <__malloc_unlock>:
 800fd00:	4801      	ldr	r0, [pc, #4]	; (800fd08 <__malloc_unlock+0x8>)
 800fd02:	f7ff bf91 	b.w	800fc28 <__retarget_lock_release_recursive>
 800fd06:	bf00      	nop
 800fd08:	20008f74 	.word	0x20008f74

0800fd0c <_Balloc>:
 800fd0c:	b570      	push	{r4, r5, r6, lr}
 800fd0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd10:	4604      	mov	r4, r0
 800fd12:	460d      	mov	r5, r1
 800fd14:	b976      	cbnz	r6, 800fd34 <_Balloc+0x28>
 800fd16:	2010      	movs	r0, #16
 800fd18:	f7fe f87e 	bl	800de18 <malloc>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	6260      	str	r0, [r4, #36]	; 0x24
 800fd20:	b920      	cbnz	r0, 800fd2c <_Balloc+0x20>
 800fd22:	4b18      	ldr	r3, [pc, #96]	; (800fd84 <_Balloc+0x78>)
 800fd24:	4818      	ldr	r0, [pc, #96]	; (800fd88 <_Balloc+0x7c>)
 800fd26:	2166      	movs	r1, #102	; 0x66
 800fd28:	f000 fd3a 	bl	80107a0 <__assert_func>
 800fd2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd30:	6006      	str	r6, [r0, #0]
 800fd32:	60c6      	str	r6, [r0, #12]
 800fd34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fd36:	68f3      	ldr	r3, [r6, #12]
 800fd38:	b183      	cbz	r3, 800fd5c <_Balloc+0x50>
 800fd3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd42:	b9b8      	cbnz	r0, 800fd74 <_Balloc+0x68>
 800fd44:	2101      	movs	r1, #1
 800fd46:	fa01 f605 	lsl.w	r6, r1, r5
 800fd4a:	1d72      	adds	r2, r6, #5
 800fd4c:	0092      	lsls	r2, r2, #2
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f000 fb60 	bl	8010414 <_calloc_r>
 800fd54:	b160      	cbz	r0, 800fd70 <_Balloc+0x64>
 800fd56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd5a:	e00e      	b.n	800fd7a <_Balloc+0x6e>
 800fd5c:	2221      	movs	r2, #33	; 0x21
 800fd5e:	2104      	movs	r1, #4
 800fd60:	4620      	mov	r0, r4
 800fd62:	f000 fb57 	bl	8010414 <_calloc_r>
 800fd66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd68:	60f0      	str	r0, [r6, #12]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d1e4      	bne.n	800fd3a <_Balloc+0x2e>
 800fd70:	2000      	movs	r0, #0
 800fd72:	bd70      	pop	{r4, r5, r6, pc}
 800fd74:	6802      	ldr	r2, [r0, #0]
 800fd76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd80:	e7f7      	b.n	800fd72 <_Balloc+0x66>
 800fd82:	bf00      	nop
 800fd84:	08010ba1 	.word	0x08010ba1
 800fd88:	08010c84 	.word	0x08010c84

0800fd8c <_Bfree>:
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd90:	4605      	mov	r5, r0
 800fd92:	460c      	mov	r4, r1
 800fd94:	b976      	cbnz	r6, 800fdb4 <_Bfree+0x28>
 800fd96:	2010      	movs	r0, #16
 800fd98:	f7fe f83e 	bl	800de18 <malloc>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	6268      	str	r0, [r5, #36]	; 0x24
 800fda0:	b920      	cbnz	r0, 800fdac <_Bfree+0x20>
 800fda2:	4b09      	ldr	r3, [pc, #36]	; (800fdc8 <_Bfree+0x3c>)
 800fda4:	4809      	ldr	r0, [pc, #36]	; (800fdcc <_Bfree+0x40>)
 800fda6:	218a      	movs	r1, #138	; 0x8a
 800fda8:	f000 fcfa 	bl	80107a0 <__assert_func>
 800fdac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdb0:	6006      	str	r6, [r0, #0]
 800fdb2:	60c6      	str	r6, [r0, #12]
 800fdb4:	b13c      	cbz	r4, 800fdc6 <_Bfree+0x3a>
 800fdb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fdb8:	6862      	ldr	r2, [r4, #4]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fdc0:	6021      	str	r1, [r4, #0]
 800fdc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdc6:	bd70      	pop	{r4, r5, r6, pc}
 800fdc8:	08010ba1 	.word	0x08010ba1
 800fdcc:	08010c84 	.word	0x08010c84

0800fdd0 <__multadd>:
 800fdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd4:	690d      	ldr	r5, [r1, #16]
 800fdd6:	4607      	mov	r7, r0
 800fdd8:	460c      	mov	r4, r1
 800fdda:	461e      	mov	r6, r3
 800fddc:	f101 0c14 	add.w	ip, r1, #20
 800fde0:	2000      	movs	r0, #0
 800fde2:	f8dc 3000 	ldr.w	r3, [ip]
 800fde6:	b299      	uxth	r1, r3
 800fde8:	fb02 6101 	mla	r1, r2, r1, r6
 800fdec:	0c1e      	lsrs	r6, r3, #16
 800fdee:	0c0b      	lsrs	r3, r1, #16
 800fdf0:	fb02 3306 	mla	r3, r2, r6, r3
 800fdf4:	b289      	uxth	r1, r1
 800fdf6:	3001      	adds	r0, #1
 800fdf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fdfc:	4285      	cmp	r5, r0
 800fdfe:	f84c 1b04 	str.w	r1, [ip], #4
 800fe02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe06:	dcec      	bgt.n	800fde2 <__multadd+0x12>
 800fe08:	b30e      	cbz	r6, 800fe4e <__multadd+0x7e>
 800fe0a:	68a3      	ldr	r3, [r4, #8]
 800fe0c:	42ab      	cmp	r3, r5
 800fe0e:	dc19      	bgt.n	800fe44 <__multadd+0x74>
 800fe10:	6861      	ldr	r1, [r4, #4]
 800fe12:	4638      	mov	r0, r7
 800fe14:	3101      	adds	r1, #1
 800fe16:	f7ff ff79 	bl	800fd0c <_Balloc>
 800fe1a:	4680      	mov	r8, r0
 800fe1c:	b928      	cbnz	r0, 800fe2a <__multadd+0x5a>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	4b0c      	ldr	r3, [pc, #48]	; (800fe54 <__multadd+0x84>)
 800fe22:	480d      	ldr	r0, [pc, #52]	; (800fe58 <__multadd+0x88>)
 800fe24:	21b5      	movs	r1, #181	; 0xb5
 800fe26:	f000 fcbb 	bl	80107a0 <__assert_func>
 800fe2a:	6922      	ldr	r2, [r4, #16]
 800fe2c:	3202      	adds	r2, #2
 800fe2e:	f104 010c 	add.w	r1, r4, #12
 800fe32:	0092      	lsls	r2, r2, #2
 800fe34:	300c      	adds	r0, #12
 800fe36:	f7fd ffff 	bl	800de38 <memcpy>
 800fe3a:	4621      	mov	r1, r4
 800fe3c:	4638      	mov	r0, r7
 800fe3e:	f7ff ffa5 	bl	800fd8c <_Bfree>
 800fe42:	4644      	mov	r4, r8
 800fe44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe48:	3501      	adds	r5, #1
 800fe4a:	615e      	str	r6, [r3, #20]
 800fe4c:	6125      	str	r5, [r4, #16]
 800fe4e:	4620      	mov	r0, r4
 800fe50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe54:	08010c13 	.word	0x08010c13
 800fe58:	08010c84 	.word	0x08010c84

0800fe5c <__hi0bits>:
 800fe5c:	0c03      	lsrs	r3, r0, #16
 800fe5e:	041b      	lsls	r3, r3, #16
 800fe60:	b9d3      	cbnz	r3, 800fe98 <__hi0bits+0x3c>
 800fe62:	0400      	lsls	r0, r0, #16
 800fe64:	2310      	movs	r3, #16
 800fe66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe6a:	bf04      	itt	eq
 800fe6c:	0200      	lsleq	r0, r0, #8
 800fe6e:	3308      	addeq	r3, #8
 800fe70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe74:	bf04      	itt	eq
 800fe76:	0100      	lsleq	r0, r0, #4
 800fe78:	3304      	addeq	r3, #4
 800fe7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe7e:	bf04      	itt	eq
 800fe80:	0080      	lsleq	r0, r0, #2
 800fe82:	3302      	addeq	r3, #2
 800fe84:	2800      	cmp	r0, #0
 800fe86:	db05      	blt.n	800fe94 <__hi0bits+0x38>
 800fe88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe8c:	f103 0301 	add.w	r3, r3, #1
 800fe90:	bf08      	it	eq
 800fe92:	2320      	moveq	r3, #32
 800fe94:	4618      	mov	r0, r3
 800fe96:	4770      	bx	lr
 800fe98:	2300      	movs	r3, #0
 800fe9a:	e7e4      	b.n	800fe66 <__hi0bits+0xa>

0800fe9c <__lo0bits>:
 800fe9c:	6803      	ldr	r3, [r0, #0]
 800fe9e:	f013 0207 	ands.w	r2, r3, #7
 800fea2:	4601      	mov	r1, r0
 800fea4:	d00b      	beq.n	800febe <__lo0bits+0x22>
 800fea6:	07da      	lsls	r2, r3, #31
 800fea8:	d423      	bmi.n	800fef2 <__lo0bits+0x56>
 800feaa:	0798      	lsls	r0, r3, #30
 800feac:	bf49      	itett	mi
 800feae:	085b      	lsrmi	r3, r3, #1
 800feb0:	089b      	lsrpl	r3, r3, #2
 800feb2:	2001      	movmi	r0, #1
 800feb4:	600b      	strmi	r3, [r1, #0]
 800feb6:	bf5c      	itt	pl
 800feb8:	600b      	strpl	r3, [r1, #0]
 800feba:	2002      	movpl	r0, #2
 800febc:	4770      	bx	lr
 800febe:	b298      	uxth	r0, r3
 800fec0:	b9a8      	cbnz	r0, 800feee <__lo0bits+0x52>
 800fec2:	0c1b      	lsrs	r3, r3, #16
 800fec4:	2010      	movs	r0, #16
 800fec6:	b2da      	uxtb	r2, r3
 800fec8:	b90a      	cbnz	r2, 800fece <__lo0bits+0x32>
 800feca:	3008      	adds	r0, #8
 800fecc:	0a1b      	lsrs	r3, r3, #8
 800fece:	071a      	lsls	r2, r3, #28
 800fed0:	bf04      	itt	eq
 800fed2:	091b      	lsreq	r3, r3, #4
 800fed4:	3004      	addeq	r0, #4
 800fed6:	079a      	lsls	r2, r3, #30
 800fed8:	bf04      	itt	eq
 800feda:	089b      	lsreq	r3, r3, #2
 800fedc:	3002      	addeq	r0, #2
 800fede:	07da      	lsls	r2, r3, #31
 800fee0:	d403      	bmi.n	800feea <__lo0bits+0x4e>
 800fee2:	085b      	lsrs	r3, r3, #1
 800fee4:	f100 0001 	add.w	r0, r0, #1
 800fee8:	d005      	beq.n	800fef6 <__lo0bits+0x5a>
 800feea:	600b      	str	r3, [r1, #0]
 800feec:	4770      	bx	lr
 800feee:	4610      	mov	r0, r2
 800fef0:	e7e9      	b.n	800fec6 <__lo0bits+0x2a>
 800fef2:	2000      	movs	r0, #0
 800fef4:	4770      	bx	lr
 800fef6:	2020      	movs	r0, #32
 800fef8:	4770      	bx	lr
	...

0800fefc <__i2b>:
 800fefc:	b510      	push	{r4, lr}
 800fefe:	460c      	mov	r4, r1
 800ff00:	2101      	movs	r1, #1
 800ff02:	f7ff ff03 	bl	800fd0c <_Balloc>
 800ff06:	4602      	mov	r2, r0
 800ff08:	b928      	cbnz	r0, 800ff16 <__i2b+0x1a>
 800ff0a:	4b05      	ldr	r3, [pc, #20]	; (800ff20 <__i2b+0x24>)
 800ff0c:	4805      	ldr	r0, [pc, #20]	; (800ff24 <__i2b+0x28>)
 800ff0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ff12:	f000 fc45 	bl	80107a0 <__assert_func>
 800ff16:	2301      	movs	r3, #1
 800ff18:	6144      	str	r4, [r0, #20]
 800ff1a:	6103      	str	r3, [r0, #16]
 800ff1c:	bd10      	pop	{r4, pc}
 800ff1e:	bf00      	nop
 800ff20:	08010c13 	.word	0x08010c13
 800ff24:	08010c84 	.word	0x08010c84

0800ff28 <__multiply>:
 800ff28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff2c:	4691      	mov	r9, r2
 800ff2e:	690a      	ldr	r2, [r1, #16]
 800ff30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	bfb8      	it	lt
 800ff38:	460b      	movlt	r3, r1
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	bfbc      	itt	lt
 800ff3e:	464c      	movlt	r4, r9
 800ff40:	4699      	movlt	r9, r3
 800ff42:	6927      	ldr	r7, [r4, #16]
 800ff44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff48:	68a3      	ldr	r3, [r4, #8]
 800ff4a:	6861      	ldr	r1, [r4, #4]
 800ff4c:	eb07 060a 	add.w	r6, r7, sl
 800ff50:	42b3      	cmp	r3, r6
 800ff52:	b085      	sub	sp, #20
 800ff54:	bfb8      	it	lt
 800ff56:	3101      	addlt	r1, #1
 800ff58:	f7ff fed8 	bl	800fd0c <_Balloc>
 800ff5c:	b930      	cbnz	r0, 800ff6c <__multiply+0x44>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	4b44      	ldr	r3, [pc, #272]	; (8010074 <__multiply+0x14c>)
 800ff62:	4845      	ldr	r0, [pc, #276]	; (8010078 <__multiply+0x150>)
 800ff64:	f240 115d 	movw	r1, #349	; 0x15d
 800ff68:	f000 fc1a 	bl	80107a0 <__assert_func>
 800ff6c:	f100 0514 	add.w	r5, r0, #20
 800ff70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff74:	462b      	mov	r3, r5
 800ff76:	2200      	movs	r2, #0
 800ff78:	4543      	cmp	r3, r8
 800ff7a:	d321      	bcc.n	800ffc0 <__multiply+0x98>
 800ff7c:	f104 0314 	add.w	r3, r4, #20
 800ff80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ff84:	f109 0314 	add.w	r3, r9, #20
 800ff88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ff8c:	9202      	str	r2, [sp, #8]
 800ff8e:	1b3a      	subs	r2, r7, r4
 800ff90:	3a15      	subs	r2, #21
 800ff92:	f022 0203 	bic.w	r2, r2, #3
 800ff96:	3204      	adds	r2, #4
 800ff98:	f104 0115 	add.w	r1, r4, #21
 800ff9c:	428f      	cmp	r7, r1
 800ff9e:	bf38      	it	cc
 800ffa0:	2204      	movcc	r2, #4
 800ffa2:	9201      	str	r2, [sp, #4]
 800ffa4:	9a02      	ldr	r2, [sp, #8]
 800ffa6:	9303      	str	r3, [sp, #12]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d80c      	bhi.n	800ffc6 <__multiply+0x9e>
 800ffac:	2e00      	cmp	r6, #0
 800ffae:	dd03      	ble.n	800ffb8 <__multiply+0x90>
 800ffb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d05a      	beq.n	801006e <__multiply+0x146>
 800ffb8:	6106      	str	r6, [r0, #16]
 800ffba:	b005      	add	sp, #20
 800ffbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc0:	f843 2b04 	str.w	r2, [r3], #4
 800ffc4:	e7d8      	b.n	800ff78 <__multiply+0x50>
 800ffc6:	f8b3 a000 	ldrh.w	sl, [r3]
 800ffca:	f1ba 0f00 	cmp.w	sl, #0
 800ffce:	d024      	beq.n	801001a <__multiply+0xf2>
 800ffd0:	f104 0e14 	add.w	lr, r4, #20
 800ffd4:	46a9      	mov	r9, r5
 800ffd6:	f04f 0c00 	mov.w	ip, #0
 800ffda:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ffde:	f8d9 1000 	ldr.w	r1, [r9]
 800ffe2:	fa1f fb82 	uxth.w	fp, r2
 800ffe6:	b289      	uxth	r1, r1
 800ffe8:	fb0a 110b 	mla	r1, sl, fp, r1
 800ffec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fff0:	f8d9 2000 	ldr.w	r2, [r9]
 800fff4:	4461      	add	r1, ip
 800fff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fffa:	fb0a c20b 	mla	r2, sl, fp, ip
 800fffe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010002:	b289      	uxth	r1, r1
 8010004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010008:	4577      	cmp	r7, lr
 801000a:	f849 1b04 	str.w	r1, [r9], #4
 801000e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010012:	d8e2      	bhi.n	800ffda <__multiply+0xb2>
 8010014:	9a01      	ldr	r2, [sp, #4]
 8010016:	f845 c002 	str.w	ip, [r5, r2]
 801001a:	9a03      	ldr	r2, [sp, #12]
 801001c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010020:	3304      	adds	r3, #4
 8010022:	f1b9 0f00 	cmp.w	r9, #0
 8010026:	d020      	beq.n	801006a <__multiply+0x142>
 8010028:	6829      	ldr	r1, [r5, #0]
 801002a:	f104 0c14 	add.w	ip, r4, #20
 801002e:	46ae      	mov	lr, r5
 8010030:	f04f 0a00 	mov.w	sl, #0
 8010034:	f8bc b000 	ldrh.w	fp, [ip]
 8010038:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801003c:	fb09 220b 	mla	r2, r9, fp, r2
 8010040:	4492      	add	sl, r2
 8010042:	b289      	uxth	r1, r1
 8010044:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010048:	f84e 1b04 	str.w	r1, [lr], #4
 801004c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010050:	f8be 1000 	ldrh.w	r1, [lr]
 8010054:	0c12      	lsrs	r2, r2, #16
 8010056:	fb09 1102 	mla	r1, r9, r2, r1
 801005a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801005e:	4567      	cmp	r7, ip
 8010060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010064:	d8e6      	bhi.n	8010034 <__multiply+0x10c>
 8010066:	9a01      	ldr	r2, [sp, #4]
 8010068:	50a9      	str	r1, [r5, r2]
 801006a:	3504      	adds	r5, #4
 801006c:	e79a      	b.n	800ffa4 <__multiply+0x7c>
 801006e:	3e01      	subs	r6, #1
 8010070:	e79c      	b.n	800ffac <__multiply+0x84>
 8010072:	bf00      	nop
 8010074:	08010c13 	.word	0x08010c13
 8010078:	08010c84 	.word	0x08010c84

0801007c <__pow5mult>:
 801007c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010080:	4615      	mov	r5, r2
 8010082:	f012 0203 	ands.w	r2, r2, #3
 8010086:	4606      	mov	r6, r0
 8010088:	460f      	mov	r7, r1
 801008a:	d007      	beq.n	801009c <__pow5mult+0x20>
 801008c:	4c25      	ldr	r4, [pc, #148]	; (8010124 <__pow5mult+0xa8>)
 801008e:	3a01      	subs	r2, #1
 8010090:	2300      	movs	r3, #0
 8010092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010096:	f7ff fe9b 	bl	800fdd0 <__multadd>
 801009a:	4607      	mov	r7, r0
 801009c:	10ad      	asrs	r5, r5, #2
 801009e:	d03d      	beq.n	801011c <__pow5mult+0xa0>
 80100a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80100a2:	b97c      	cbnz	r4, 80100c4 <__pow5mult+0x48>
 80100a4:	2010      	movs	r0, #16
 80100a6:	f7fd feb7 	bl	800de18 <malloc>
 80100aa:	4602      	mov	r2, r0
 80100ac:	6270      	str	r0, [r6, #36]	; 0x24
 80100ae:	b928      	cbnz	r0, 80100bc <__pow5mult+0x40>
 80100b0:	4b1d      	ldr	r3, [pc, #116]	; (8010128 <__pow5mult+0xac>)
 80100b2:	481e      	ldr	r0, [pc, #120]	; (801012c <__pow5mult+0xb0>)
 80100b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80100b8:	f000 fb72 	bl	80107a0 <__assert_func>
 80100bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100c0:	6004      	str	r4, [r0, #0]
 80100c2:	60c4      	str	r4, [r0, #12]
 80100c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80100c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100cc:	b94c      	cbnz	r4, 80100e2 <__pow5mult+0x66>
 80100ce:	f240 2171 	movw	r1, #625	; 0x271
 80100d2:	4630      	mov	r0, r6
 80100d4:	f7ff ff12 	bl	800fefc <__i2b>
 80100d8:	2300      	movs	r3, #0
 80100da:	f8c8 0008 	str.w	r0, [r8, #8]
 80100de:	4604      	mov	r4, r0
 80100e0:	6003      	str	r3, [r0, #0]
 80100e2:	f04f 0900 	mov.w	r9, #0
 80100e6:	07eb      	lsls	r3, r5, #31
 80100e8:	d50a      	bpl.n	8010100 <__pow5mult+0x84>
 80100ea:	4639      	mov	r1, r7
 80100ec:	4622      	mov	r2, r4
 80100ee:	4630      	mov	r0, r6
 80100f0:	f7ff ff1a 	bl	800ff28 <__multiply>
 80100f4:	4639      	mov	r1, r7
 80100f6:	4680      	mov	r8, r0
 80100f8:	4630      	mov	r0, r6
 80100fa:	f7ff fe47 	bl	800fd8c <_Bfree>
 80100fe:	4647      	mov	r7, r8
 8010100:	106d      	asrs	r5, r5, #1
 8010102:	d00b      	beq.n	801011c <__pow5mult+0xa0>
 8010104:	6820      	ldr	r0, [r4, #0]
 8010106:	b938      	cbnz	r0, 8010118 <__pow5mult+0x9c>
 8010108:	4622      	mov	r2, r4
 801010a:	4621      	mov	r1, r4
 801010c:	4630      	mov	r0, r6
 801010e:	f7ff ff0b 	bl	800ff28 <__multiply>
 8010112:	6020      	str	r0, [r4, #0]
 8010114:	f8c0 9000 	str.w	r9, [r0]
 8010118:	4604      	mov	r4, r0
 801011a:	e7e4      	b.n	80100e6 <__pow5mult+0x6a>
 801011c:	4638      	mov	r0, r7
 801011e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010122:	bf00      	nop
 8010124:	08010dd0 	.word	0x08010dd0
 8010128:	08010ba1 	.word	0x08010ba1
 801012c:	08010c84 	.word	0x08010c84

08010130 <__lshift>:
 8010130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010134:	460c      	mov	r4, r1
 8010136:	6849      	ldr	r1, [r1, #4]
 8010138:	6923      	ldr	r3, [r4, #16]
 801013a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801013e:	68a3      	ldr	r3, [r4, #8]
 8010140:	4607      	mov	r7, r0
 8010142:	4691      	mov	r9, r2
 8010144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010148:	f108 0601 	add.w	r6, r8, #1
 801014c:	42b3      	cmp	r3, r6
 801014e:	db0b      	blt.n	8010168 <__lshift+0x38>
 8010150:	4638      	mov	r0, r7
 8010152:	f7ff fddb 	bl	800fd0c <_Balloc>
 8010156:	4605      	mov	r5, r0
 8010158:	b948      	cbnz	r0, 801016e <__lshift+0x3e>
 801015a:	4602      	mov	r2, r0
 801015c:	4b2a      	ldr	r3, [pc, #168]	; (8010208 <__lshift+0xd8>)
 801015e:	482b      	ldr	r0, [pc, #172]	; (801020c <__lshift+0xdc>)
 8010160:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010164:	f000 fb1c 	bl	80107a0 <__assert_func>
 8010168:	3101      	adds	r1, #1
 801016a:	005b      	lsls	r3, r3, #1
 801016c:	e7ee      	b.n	801014c <__lshift+0x1c>
 801016e:	2300      	movs	r3, #0
 8010170:	f100 0114 	add.w	r1, r0, #20
 8010174:	f100 0210 	add.w	r2, r0, #16
 8010178:	4618      	mov	r0, r3
 801017a:	4553      	cmp	r3, sl
 801017c:	db37      	blt.n	80101ee <__lshift+0xbe>
 801017e:	6920      	ldr	r0, [r4, #16]
 8010180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010184:	f104 0314 	add.w	r3, r4, #20
 8010188:	f019 091f 	ands.w	r9, r9, #31
 801018c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010194:	d02f      	beq.n	80101f6 <__lshift+0xc6>
 8010196:	f1c9 0e20 	rsb	lr, r9, #32
 801019a:	468a      	mov	sl, r1
 801019c:	f04f 0c00 	mov.w	ip, #0
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	fa02 f209 	lsl.w	r2, r2, r9
 80101a6:	ea42 020c 	orr.w	r2, r2, ip
 80101aa:	f84a 2b04 	str.w	r2, [sl], #4
 80101ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80101b2:	4298      	cmp	r0, r3
 80101b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80101b8:	d8f2      	bhi.n	80101a0 <__lshift+0x70>
 80101ba:	1b03      	subs	r3, r0, r4
 80101bc:	3b15      	subs	r3, #21
 80101be:	f023 0303 	bic.w	r3, r3, #3
 80101c2:	3304      	adds	r3, #4
 80101c4:	f104 0215 	add.w	r2, r4, #21
 80101c8:	4290      	cmp	r0, r2
 80101ca:	bf38      	it	cc
 80101cc:	2304      	movcc	r3, #4
 80101ce:	f841 c003 	str.w	ip, [r1, r3]
 80101d2:	f1bc 0f00 	cmp.w	ip, #0
 80101d6:	d001      	beq.n	80101dc <__lshift+0xac>
 80101d8:	f108 0602 	add.w	r6, r8, #2
 80101dc:	3e01      	subs	r6, #1
 80101de:	4638      	mov	r0, r7
 80101e0:	612e      	str	r6, [r5, #16]
 80101e2:	4621      	mov	r1, r4
 80101e4:	f7ff fdd2 	bl	800fd8c <_Bfree>
 80101e8:	4628      	mov	r0, r5
 80101ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80101f2:	3301      	adds	r3, #1
 80101f4:	e7c1      	b.n	801017a <__lshift+0x4a>
 80101f6:	3904      	subs	r1, #4
 80101f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80101fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010200:	4298      	cmp	r0, r3
 8010202:	d8f9      	bhi.n	80101f8 <__lshift+0xc8>
 8010204:	e7ea      	b.n	80101dc <__lshift+0xac>
 8010206:	bf00      	nop
 8010208:	08010c13 	.word	0x08010c13
 801020c:	08010c84 	.word	0x08010c84

08010210 <__mcmp>:
 8010210:	b530      	push	{r4, r5, lr}
 8010212:	6902      	ldr	r2, [r0, #16]
 8010214:	690c      	ldr	r4, [r1, #16]
 8010216:	1b12      	subs	r2, r2, r4
 8010218:	d10e      	bne.n	8010238 <__mcmp+0x28>
 801021a:	f100 0314 	add.w	r3, r0, #20
 801021e:	3114      	adds	r1, #20
 8010220:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010224:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010228:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801022c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010230:	42a5      	cmp	r5, r4
 8010232:	d003      	beq.n	801023c <__mcmp+0x2c>
 8010234:	d305      	bcc.n	8010242 <__mcmp+0x32>
 8010236:	2201      	movs	r2, #1
 8010238:	4610      	mov	r0, r2
 801023a:	bd30      	pop	{r4, r5, pc}
 801023c:	4283      	cmp	r3, r0
 801023e:	d3f3      	bcc.n	8010228 <__mcmp+0x18>
 8010240:	e7fa      	b.n	8010238 <__mcmp+0x28>
 8010242:	f04f 32ff 	mov.w	r2, #4294967295
 8010246:	e7f7      	b.n	8010238 <__mcmp+0x28>

08010248 <__mdiff>:
 8010248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801024c:	460c      	mov	r4, r1
 801024e:	4606      	mov	r6, r0
 8010250:	4611      	mov	r1, r2
 8010252:	4620      	mov	r0, r4
 8010254:	4690      	mov	r8, r2
 8010256:	f7ff ffdb 	bl	8010210 <__mcmp>
 801025a:	1e05      	subs	r5, r0, #0
 801025c:	d110      	bne.n	8010280 <__mdiff+0x38>
 801025e:	4629      	mov	r1, r5
 8010260:	4630      	mov	r0, r6
 8010262:	f7ff fd53 	bl	800fd0c <_Balloc>
 8010266:	b930      	cbnz	r0, 8010276 <__mdiff+0x2e>
 8010268:	4b3a      	ldr	r3, [pc, #232]	; (8010354 <__mdiff+0x10c>)
 801026a:	4602      	mov	r2, r0
 801026c:	f240 2132 	movw	r1, #562	; 0x232
 8010270:	4839      	ldr	r0, [pc, #228]	; (8010358 <__mdiff+0x110>)
 8010272:	f000 fa95 	bl	80107a0 <__assert_func>
 8010276:	2301      	movs	r3, #1
 8010278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801027c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010280:	bfa4      	itt	ge
 8010282:	4643      	movge	r3, r8
 8010284:	46a0      	movge	r8, r4
 8010286:	4630      	mov	r0, r6
 8010288:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801028c:	bfa6      	itte	ge
 801028e:	461c      	movge	r4, r3
 8010290:	2500      	movge	r5, #0
 8010292:	2501      	movlt	r5, #1
 8010294:	f7ff fd3a 	bl	800fd0c <_Balloc>
 8010298:	b920      	cbnz	r0, 80102a4 <__mdiff+0x5c>
 801029a:	4b2e      	ldr	r3, [pc, #184]	; (8010354 <__mdiff+0x10c>)
 801029c:	4602      	mov	r2, r0
 801029e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80102a2:	e7e5      	b.n	8010270 <__mdiff+0x28>
 80102a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80102a8:	6926      	ldr	r6, [r4, #16]
 80102aa:	60c5      	str	r5, [r0, #12]
 80102ac:	f104 0914 	add.w	r9, r4, #20
 80102b0:	f108 0514 	add.w	r5, r8, #20
 80102b4:	f100 0e14 	add.w	lr, r0, #20
 80102b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80102bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80102c0:	f108 0210 	add.w	r2, r8, #16
 80102c4:	46f2      	mov	sl, lr
 80102c6:	2100      	movs	r1, #0
 80102c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80102cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80102d0:	fa1f f883 	uxth.w	r8, r3
 80102d4:	fa11 f18b 	uxtah	r1, r1, fp
 80102d8:	0c1b      	lsrs	r3, r3, #16
 80102da:	eba1 0808 	sub.w	r8, r1, r8
 80102de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80102e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80102e6:	fa1f f888 	uxth.w	r8, r8
 80102ea:	1419      	asrs	r1, r3, #16
 80102ec:	454e      	cmp	r6, r9
 80102ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80102f2:	f84a 3b04 	str.w	r3, [sl], #4
 80102f6:	d8e7      	bhi.n	80102c8 <__mdiff+0x80>
 80102f8:	1b33      	subs	r3, r6, r4
 80102fa:	3b15      	subs	r3, #21
 80102fc:	f023 0303 	bic.w	r3, r3, #3
 8010300:	3304      	adds	r3, #4
 8010302:	3415      	adds	r4, #21
 8010304:	42a6      	cmp	r6, r4
 8010306:	bf38      	it	cc
 8010308:	2304      	movcc	r3, #4
 801030a:	441d      	add	r5, r3
 801030c:	4473      	add	r3, lr
 801030e:	469e      	mov	lr, r3
 8010310:	462e      	mov	r6, r5
 8010312:	4566      	cmp	r6, ip
 8010314:	d30e      	bcc.n	8010334 <__mdiff+0xec>
 8010316:	f10c 0203 	add.w	r2, ip, #3
 801031a:	1b52      	subs	r2, r2, r5
 801031c:	f022 0203 	bic.w	r2, r2, #3
 8010320:	3d03      	subs	r5, #3
 8010322:	45ac      	cmp	ip, r5
 8010324:	bf38      	it	cc
 8010326:	2200      	movcc	r2, #0
 8010328:	441a      	add	r2, r3
 801032a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801032e:	b17b      	cbz	r3, 8010350 <__mdiff+0x108>
 8010330:	6107      	str	r7, [r0, #16]
 8010332:	e7a3      	b.n	801027c <__mdiff+0x34>
 8010334:	f856 8b04 	ldr.w	r8, [r6], #4
 8010338:	fa11 f288 	uxtah	r2, r1, r8
 801033c:	1414      	asrs	r4, r2, #16
 801033e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010342:	b292      	uxth	r2, r2
 8010344:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010348:	f84e 2b04 	str.w	r2, [lr], #4
 801034c:	1421      	asrs	r1, r4, #16
 801034e:	e7e0      	b.n	8010312 <__mdiff+0xca>
 8010350:	3f01      	subs	r7, #1
 8010352:	e7ea      	b.n	801032a <__mdiff+0xe2>
 8010354:	08010c13 	.word	0x08010c13
 8010358:	08010c84 	.word	0x08010c84

0801035c <__d2b>:
 801035c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010360:	4689      	mov	r9, r1
 8010362:	2101      	movs	r1, #1
 8010364:	ec57 6b10 	vmov	r6, r7, d0
 8010368:	4690      	mov	r8, r2
 801036a:	f7ff fccf 	bl	800fd0c <_Balloc>
 801036e:	4604      	mov	r4, r0
 8010370:	b930      	cbnz	r0, 8010380 <__d2b+0x24>
 8010372:	4602      	mov	r2, r0
 8010374:	4b25      	ldr	r3, [pc, #148]	; (801040c <__d2b+0xb0>)
 8010376:	4826      	ldr	r0, [pc, #152]	; (8010410 <__d2b+0xb4>)
 8010378:	f240 310a 	movw	r1, #778	; 0x30a
 801037c:	f000 fa10 	bl	80107a0 <__assert_func>
 8010380:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010384:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010388:	bb35      	cbnz	r5, 80103d8 <__d2b+0x7c>
 801038a:	2e00      	cmp	r6, #0
 801038c:	9301      	str	r3, [sp, #4]
 801038e:	d028      	beq.n	80103e2 <__d2b+0x86>
 8010390:	4668      	mov	r0, sp
 8010392:	9600      	str	r6, [sp, #0]
 8010394:	f7ff fd82 	bl	800fe9c <__lo0bits>
 8010398:	9900      	ldr	r1, [sp, #0]
 801039a:	b300      	cbz	r0, 80103de <__d2b+0x82>
 801039c:	9a01      	ldr	r2, [sp, #4]
 801039e:	f1c0 0320 	rsb	r3, r0, #32
 80103a2:	fa02 f303 	lsl.w	r3, r2, r3
 80103a6:	430b      	orrs	r3, r1
 80103a8:	40c2      	lsrs	r2, r0
 80103aa:	6163      	str	r3, [r4, #20]
 80103ac:	9201      	str	r2, [sp, #4]
 80103ae:	9b01      	ldr	r3, [sp, #4]
 80103b0:	61a3      	str	r3, [r4, #24]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	bf14      	ite	ne
 80103b6:	2202      	movne	r2, #2
 80103b8:	2201      	moveq	r2, #1
 80103ba:	6122      	str	r2, [r4, #16]
 80103bc:	b1d5      	cbz	r5, 80103f4 <__d2b+0x98>
 80103be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80103c2:	4405      	add	r5, r0
 80103c4:	f8c9 5000 	str.w	r5, [r9]
 80103c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80103cc:	f8c8 0000 	str.w	r0, [r8]
 80103d0:	4620      	mov	r0, r4
 80103d2:	b003      	add	sp, #12
 80103d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103dc:	e7d5      	b.n	801038a <__d2b+0x2e>
 80103de:	6161      	str	r1, [r4, #20]
 80103e0:	e7e5      	b.n	80103ae <__d2b+0x52>
 80103e2:	a801      	add	r0, sp, #4
 80103e4:	f7ff fd5a 	bl	800fe9c <__lo0bits>
 80103e8:	9b01      	ldr	r3, [sp, #4]
 80103ea:	6163      	str	r3, [r4, #20]
 80103ec:	2201      	movs	r2, #1
 80103ee:	6122      	str	r2, [r4, #16]
 80103f0:	3020      	adds	r0, #32
 80103f2:	e7e3      	b.n	80103bc <__d2b+0x60>
 80103f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80103fc:	f8c9 0000 	str.w	r0, [r9]
 8010400:	6918      	ldr	r0, [r3, #16]
 8010402:	f7ff fd2b 	bl	800fe5c <__hi0bits>
 8010406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801040a:	e7df      	b.n	80103cc <__d2b+0x70>
 801040c:	08010c13 	.word	0x08010c13
 8010410:	08010c84 	.word	0x08010c84

08010414 <_calloc_r>:
 8010414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010416:	fba1 2402 	umull	r2, r4, r1, r2
 801041a:	b94c      	cbnz	r4, 8010430 <_calloc_r+0x1c>
 801041c:	4611      	mov	r1, r2
 801041e:	9201      	str	r2, [sp, #4]
 8010420:	f7fd fd8c 	bl	800df3c <_malloc_r>
 8010424:	9a01      	ldr	r2, [sp, #4]
 8010426:	4605      	mov	r5, r0
 8010428:	b930      	cbnz	r0, 8010438 <_calloc_r+0x24>
 801042a:	4628      	mov	r0, r5
 801042c:	b003      	add	sp, #12
 801042e:	bd30      	pop	{r4, r5, pc}
 8010430:	220c      	movs	r2, #12
 8010432:	6002      	str	r2, [r0, #0]
 8010434:	2500      	movs	r5, #0
 8010436:	e7f8      	b.n	801042a <_calloc_r+0x16>
 8010438:	4621      	mov	r1, r4
 801043a:	f7fd fd0b 	bl	800de54 <memset>
 801043e:	e7f4      	b.n	801042a <_calloc_r+0x16>

08010440 <__sfputc_r>:
 8010440:	6893      	ldr	r3, [r2, #8]
 8010442:	3b01      	subs	r3, #1
 8010444:	2b00      	cmp	r3, #0
 8010446:	b410      	push	{r4}
 8010448:	6093      	str	r3, [r2, #8]
 801044a:	da08      	bge.n	801045e <__sfputc_r+0x1e>
 801044c:	6994      	ldr	r4, [r2, #24]
 801044e:	42a3      	cmp	r3, r4
 8010450:	db01      	blt.n	8010456 <__sfputc_r+0x16>
 8010452:	290a      	cmp	r1, #10
 8010454:	d103      	bne.n	801045e <__sfputc_r+0x1e>
 8010456:	f85d 4b04 	ldr.w	r4, [sp], #4
 801045a:	f7fe baeb 	b.w	800ea34 <__swbuf_r>
 801045e:	6813      	ldr	r3, [r2, #0]
 8010460:	1c58      	adds	r0, r3, #1
 8010462:	6010      	str	r0, [r2, #0]
 8010464:	7019      	strb	r1, [r3, #0]
 8010466:	4608      	mov	r0, r1
 8010468:	f85d 4b04 	ldr.w	r4, [sp], #4
 801046c:	4770      	bx	lr

0801046e <__sfputs_r>:
 801046e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010470:	4606      	mov	r6, r0
 8010472:	460f      	mov	r7, r1
 8010474:	4614      	mov	r4, r2
 8010476:	18d5      	adds	r5, r2, r3
 8010478:	42ac      	cmp	r4, r5
 801047a:	d101      	bne.n	8010480 <__sfputs_r+0x12>
 801047c:	2000      	movs	r0, #0
 801047e:	e007      	b.n	8010490 <__sfputs_r+0x22>
 8010480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010484:	463a      	mov	r2, r7
 8010486:	4630      	mov	r0, r6
 8010488:	f7ff ffda 	bl	8010440 <__sfputc_r>
 801048c:	1c43      	adds	r3, r0, #1
 801048e:	d1f3      	bne.n	8010478 <__sfputs_r+0xa>
 8010490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010494 <_vfiprintf_r>:
 8010494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010498:	460d      	mov	r5, r1
 801049a:	b09d      	sub	sp, #116	; 0x74
 801049c:	4614      	mov	r4, r2
 801049e:	4698      	mov	r8, r3
 80104a0:	4606      	mov	r6, r0
 80104a2:	b118      	cbz	r0, 80104ac <_vfiprintf_r+0x18>
 80104a4:	6983      	ldr	r3, [r0, #24]
 80104a6:	b90b      	cbnz	r3, 80104ac <_vfiprintf_r+0x18>
 80104a8:	f7ff fb1a 	bl	800fae0 <__sinit>
 80104ac:	4b89      	ldr	r3, [pc, #548]	; (80106d4 <_vfiprintf_r+0x240>)
 80104ae:	429d      	cmp	r5, r3
 80104b0:	d11b      	bne.n	80104ea <_vfiprintf_r+0x56>
 80104b2:	6875      	ldr	r5, [r6, #4]
 80104b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104b6:	07d9      	lsls	r1, r3, #31
 80104b8:	d405      	bmi.n	80104c6 <_vfiprintf_r+0x32>
 80104ba:	89ab      	ldrh	r3, [r5, #12]
 80104bc:	059a      	lsls	r2, r3, #22
 80104be:	d402      	bmi.n	80104c6 <_vfiprintf_r+0x32>
 80104c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104c2:	f7ff fbb0 	bl	800fc26 <__retarget_lock_acquire_recursive>
 80104c6:	89ab      	ldrh	r3, [r5, #12]
 80104c8:	071b      	lsls	r3, r3, #28
 80104ca:	d501      	bpl.n	80104d0 <_vfiprintf_r+0x3c>
 80104cc:	692b      	ldr	r3, [r5, #16]
 80104ce:	b9eb      	cbnz	r3, 801050c <_vfiprintf_r+0x78>
 80104d0:	4629      	mov	r1, r5
 80104d2:	4630      	mov	r0, r6
 80104d4:	f7fe fb00 	bl	800ead8 <__swsetup_r>
 80104d8:	b1c0      	cbz	r0, 801050c <_vfiprintf_r+0x78>
 80104da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104dc:	07dc      	lsls	r4, r3, #31
 80104de:	d50e      	bpl.n	80104fe <_vfiprintf_r+0x6a>
 80104e0:	f04f 30ff 	mov.w	r0, #4294967295
 80104e4:	b01d      	add	sp, #116	; 0x74
 80104e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ea:	4b7b      	ldr	r3, [pc, #492]	; (80106d8 <_vfiprintf_r+0x244>)
 80104ec:	429d      	cmp	r5, r3
 80104ee:	d101      	bne.n	80104f4 <_vfiprintf_r+0x60>
 80104f0:	68b5      	ldr	r5, [r6, #8]
 80104f2:	e7df      	b.n	80104b4 <_vfiprintf_r+0x20>
 80104f4:	4b79      	ldr	r3, [pc, #484]	; (80106dc <_vfiprintf_r+0x248>)
 80104f6:	429d      	cmp	r5, r3
 80104f8:	bf08      	it	eq
 80104fa:	68f5      	ldreq	r5, [r6, #12]
 80104fc:	e7da      	b.n	80104b4 <_vfiprintf_r+0x20>
 80104fe:	89ab      	ldrh	r3, [r5, #12]
 8010500:	0598      	lsls	r0, r3, #22
 8010502:	d4ed      	bmi.n	80104e0 <_vfiprintf_r+0x4c>
 8010504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010506:	f7ff fb8f 	bl	800fc28 <__retarget_lock_release_recursive>
 801050a:	e7e9      	b.n	80104e0 <_vfiprintf_r+0x4c>
 801050c:	2300      	movs	r3, #0
 801050e:	9309      	str	r3, [sp, #36]	; 0x24
 8010510:	2320      	movs	r3, #32
 8010512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010516:	f8cd 800c 	str.w	r8, [sp, #12]
 801051a:	2330      	movs	r3, #48	; 0x30
 801051c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80106e0 <_vfiprintf_r+0x24c>
 8010520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010524:	f04f 0901 	mov.w	r9, #1
 8010528:	4623      	mov	r3, r4
 801052a:	469a      	mov	sl, r3
 801052c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010530:	b10a      	cbz	r2, 8010536 <_vfiprintf_r+0xa2>
 8010532:	2a25      	cmp	r2, #37	; 0x25
 8010534:	d1f9      	bne.n	801052a <_vfiprintf_r+0x96>
 8010536:	ebba 0b04 	subs.w	fp, sl, r4
 801053a:	d00b      	beq.n	8010554 <_vfiprintf_r+0xc0>
 801053c:	465b      	mov	r3, fp
 801053e:	4622      	mov	r2, r4
 8010540:	4629      	mov	r1, r5
 8010542:	4630      	mov	r0, r6
 8010544:	f7ff ff93 	bl	801046e <__sfputs_r>
 8010548:	3001      	adds	r0, #1
 801054a:	f000 80aa 	beq.w	80106a2 <_vfiprintf_r+0x20e>
 801054e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010550:	445a      	add	r2, fp
 8010552:	9209      	str	r2, [sp, #36]	; 0x24
 8010554:	f89a 3000 	ldrb.w	r3, [sl]
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 80a2 	beq.w	80106a2 <_vfiprintf_r+0x20e>
 801055e:	2300      	movs	r3, #0
 8010560:	f04f 32ff 	mov.w	r2, #4294967295
 8010564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010568:	f10a 0a01 	add.w	sl, sl, #1
 801056c:	9304      	str	r3, [sp, #16]
 801056e:	9307      	str	r3, [sp, #28]
 8010570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010574:	931a      	str	r3, [sp, #104]	; 0x68
 8010576:	4654      	mov	r4, sl
 8010578:	2205      	movs	r2, #5
 801057a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801057e:	4858      	ldr	r0, [pc, #352]	; (80106e0 <_vfiprintf_r+0x24c>)
 8010580:	f7ef fe3e 	bl	8000200 <memchr>
 8010584:	9a04      	ldr	r2, [sp, #16]
 8010586:	b9d8      	cbnz	r0, 80105c0 <_vfiprintf_r+0x12c>
 8010588:	06d1      	lsls	r1, r2, #27
 801058a:	bf44      	itt	mi
 801058c:	2320      	movmi	r3, #32
 801058e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010592:	0713      	lsls	r3, r2, #28
 8010594:	bf44      	itt	mi
 8010596:	232b      	movmi	r3, #43	; 0x2b
 8010598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801059c:	f89a 3000 	ldrb.w	r3, [sl]
 80105a0:	2b2a      	cmp	r3, #42	; 0x2a
 80105a2:	d015      	beq.n	80105d0 <_vfiprintf_r+0x13c>
 80105a4:	9a07      	ldr	r2, [sp, #28]
 80105a6:	4654      	mov	r4, sl
 80105a8:	2000      	movs	r0, #0
 80105aa:	f04f 0c0a 	mov.w	ip, #10
 80105ae:	4621      	mov	r1, r4
 80105b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105b4:	3b30      	subs	r3, #48	; 0x30
 80105b6:	2b09      	cmp	r3, #9
 80105b8:	d94e      	bls.n	8010658 <_vfiprintf_r+0x1c4>
 80105ba:	b1b0      	cbz	r0, 80105ea <_vfiprintf_r+0x156>
 80105bc:	9207      	str	r2, [sp, #28]
 80105be:	e014      	b.n	80105ea <_vfiprintf_r+0x156>
 80105c0:	eba0 0308 	sub.w	r3, r0, r8
 80105c4:	fa09 f303 	lsl.w	r3, r9, r3
 80105c8:	4313      	orrs	r3, r2
 80105ca:	9304      	str	r3, [sp, #16]
 80105cc:	46a2      	mov	sl, r4
 80105ce:	e7d2      	b.n	8010576 <_vfiprintf_r+0xe2>
 80105d0:	9b03      	ldr	r3, [sp, #12]
 80105d2:	1d19      	adds	r1, r3, #4
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	9103      	str	r1, [sp, #12]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	bfbb      	ittet	lt
 80105dc:	425b      	neglt	r3, r3
 80105de:	f042 0202 	orrlt.w	r2, r2, #2
 80105e2:	9307      	strge	r3, [sp, #28]
 80105e4:	9307      	strlt	r3, [sp, #28]
 80105e6:	bfb8      	it	lt
 80105e8:	9204      	strlt	r2, [sp, #16]
 80105ea:	7823      	ldrb	r3, [r4, #0]
 80105ec:	2b2e      	cmp	r3, #46	; 0x2e
 80105ee:	d10c      	bne.n	801060a <_vfiprintf_r+0x176>
 80105f0:	7863      	ldrb	r3, [r4, #1]
 80105f2:	2b2a      	cmp	r3, #42	; 0x2a
 80105f4:	d135      	bne.n	8010662 <_vfiprintf_r+0x1ce>
 80105f6:	9b03      	ldr	r3, [sp, #12]
 80105f8:	1d1a      	adds	r2, r3, #4
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	9203      	str	r2, [sp, #12]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	bfb8      	it	lt
 8010602:	f04f 33ff 	movlt.w	r3, #4294967295
 8010606:	3402      	adds	r4, #2
 8010608:	9305      	str	r3, [sp, #20]
 801060a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106f0 <_vfiprintf_r+0x25c>
 801060e:	7821      	ldrb	r1, [r4, #0]
 8010610:	2203      	movs	r2, #3
 8010612:	4650      	mov	r0, sl
 8010614:	f7ef fdf4 	bl	8000200 <memchr>
 8010618:	b140      	cbz	r0, 801062c <_vfiprintf_r+0x198>
 801061a:	2340      	movs	r3, #64	; 0x40
 801061c:	eba0 000a 	sub.w	r0, r0, sl
 8010620:	fa03 f000 	lsl.w	r0, r3, r0
 8010624:	9b04      	ldr	r3, [sp, #16]
 8010626:	4303      	orrs	r3, r0
 8010628:	3401      	adds	r4, #1
 801062a:	9304      	str	r3, [sp, #16]
 801062c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010630:	482c      	ldr	r0, [pc, #176]	; (80106e4 <_vfiprintf_r+0x250>)
 8010632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010636:	2206      	movs	r2, #6
 8010638:	f7ef fde2 	bl	8000200 <memchr>
 801063c:	2800      	cmp	r0, #0
 801063e:	d03f      	beq.n	80106c0 <_vfiprintf_r+0x22c>
 8010640:	4b29      	ldr	r3, [pc, #164]	; (80106e8 <_vfiprintf_r+0x254>)
 8010642:	bb1b      	cbnz	r3, 801068c <_vfiprintf_r+0x1f8>
 8010644:	9b03      	ldr	r3, [sp, #12]
 8010646:	3307      	adds	r3, #7
 8010648:	f023 0307 	bic.w	r3, r3, #7
 801064c:	3308      	adds	r3, #8
 801064e:	9303      	str	r3, [sp, #12]
 8010650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010652:	443b      	add	r3, r7
 8010654:	9309      	str	r3, [sp, #36]	; 0x24
 8010656:	e767      	b.n	8010528 <_vfiprintf_r+0x94>
 8010658:	fb0c 3202 	mla	r2, ip, r2, r3
 801065c:	460c      	mov	r4, r1
 801065e:	2001      	movs	r0, #1
 8010660:	e7a5      	b.n	80105ae <_vfiprintf_r+0x11a>
 8010662:	2300      	movs	r3, #0
 8010664:	3401      	adds	r4, #1
 8010666:	9305      	str	r3, [sp, #20]
 8010668:	4619      	mov	r1, r3
 801066a:	f04f 0c0a 	mov.w	ip, #10
 801066e:	4620      	mov	r0, r4
 8010670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010674:	3a30      	subs	r2, #48	; 0x30
 8010676:	2a09      	cmp	r2, #9
 8010678:	d903      	bls.n	8010682 <_vfiprintf_r+0x1ee>
 801067a:	2b00      	cmp	r3, #0
 801067c:	d0c5      	beq.n	801060a <_vfiprintf_r+0x176>
 801067e:	9105      	str	r1, [sp, #20]
 8010680:	e7c3      	b.n	801060a <_vfiprintf_r+0x176>
 8010682:	fb0c 2101 	mla	r1, ip, r1, r2
 8010686:	4604      	mov	r4, r0
 8010688:	2301      	movs	r3, #1
 801068a:	e7f0      	b.n	801066e <_vfiprintf_r+0x1da>
 801068c:	ab03      	add	r3, sp, #12
 801068e:	9300      	str	r3, [sp, #0]
 8010690:	462a      	mov	r2, r5
 8010692:	4b16      	ldr	r3, [pc, #88]	; (80106ec <_vfiprintf_r+0x258>)
 8010694:	a904      	add	r1, sp, #16
 8010696:	4630      	mov	r0, r6
 8010698:	f7fd fd64 	bl	800e164 <_printf_float>
 801069c:	4607      	mov	r7, r0
 801069e:	1c78      	adds	r0, r7, #1
 80106a0:	d1d6      	bne.n	8010650 <_vfiprintf_r+0x1bc>
 80106a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106a4:	07d9      	lsls	r1, r3, #31
 80106a6:	d405      	bmi.n	80106b4 <_vfiprintf_r+0x220>
 80106a8:	89ab      	ldrh	r3, [r5, #12]
 80106aa:	059a      	lsls	r2, r3, #22
 80106ac:	d402      	bmi.n	80106b4 <_vfiprintf_r+0x220>
 80106ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106b0:	f7ff faba 	bl	800fc28 <__retarget_lock_release_recursive>
 80106b4:	89ab      	ldrh	r3, [r5, #12]
 80106b6:	065b      	lsls	r3, r3, #25
 80106b8:	f53f af12 	bmi.w	80104e0 <_vfiprintf_r+0x4c>
 80106bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106be:	e711      	b.n	80104e4 <_vfiprintf_r+0x50>
 80106c0:	ab03      	add	r3, sp, #12
 80106c2:	9300      	str	r3, [sp, #0]
 80106c4:	462a      	mov	r2, r5
 80106c6:	4b09      	ldr	r3, [pc, #36]	; (80106ec <_vfiprintf_r+0x258>)
 80106c8:	a904      	add	r1, sp, #16
 80106ca:	4630      	mov	r0, r6
 80106cc:	f7fd ffee 	bl	800e6ac <_printf_i>
 80106d0:	e7e4      	b.n	801069c <_vfiprintf_r+0x208>
 80106d2:	bf00      	nop
 80106d4:	08010c44 	.word	0x08010c44
 80106d8:	08010c64 	.word	0x08010c64
 80106dc:	08010c24 	.word	0x08010c24
 80106e0:	08010ddc 	.word	0x08010ddc
 80106e4:	08010de6 	.word	0x08010de6
 80106e8:	0800e165 	.word	0x0800e165
 80106ec:	0801046f 	.word	0x0801046f
 80106f0:	08010de2 	.word	0x08010de2

080106f4 <__sread>:
 80106f4:	b510      	push	{r4, lr}
 80106f6:	460c      	mov	r4, r1
 80106f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106fc:	f000 f8d6 	bl	80108ac <_read_r>
 8010700:	2800      	cmp	r0, #0
 8010702:	bfab      	itete	ge
 8010704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010706:	89a3      	ldrhlt	r3, [r4, #12]
 8010708:	181b      	addge	r3, r3, r0
 801070a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801070e:	bfac      	ite	ge
 8010710:	6563      	strge	r3, [r4, #84]	; 0x54
 8010712:	81a3      	strhlt	r3, [r4, #12]
 8010714:	bd10      	pop	{r4, pc}

08010716 <__swrite>:
 8010716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801071a:	461f      	mov	r7, r3
 801071c:	898b      	ldrh	r3, [r1, #12]
 801071e:	05db      	lsls	r3, r3, #23
 8010720:	4605      	mov	r5, r0
 8010722:	460c      	mov	r4, r1
 8010724:	4616      	mov	r6, r2
 8010726:	d505      	bpl.n	8010734 <__swrite+0x1e>
 8010728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801072c:	2302      	movs	r3, #2
 801072e:	2200      	movs	r2, #0
 8010730:	f000 f898 	bl	8010864 <_lseek_r>
 8010734:	89a3      	ldrh	r3, [r4, #12]
 8010736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801073a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801073e:	81a3      	strh	r3, [r4, #12]
 8010740:	4632      	mov	r2, r6
 8010742:	463b      	mov	r3, r7
 8010744:	4628      	mov	r0, r5
 8010746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801074a:	f000 b817 	b.w	801077c <_write_r>

0801074e <__sseek>:
 801074e:	b510      	push	{r4, lr}
 8010750:	460c      	mov	r4, r1
 8010752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010756:	f000 f885 	bl	8010864 <_lseek_r>
 801075a:	1c43      	adds	r3, r0, #1
 801075c:	89a3      	ldrh	r3, [r4, #12]
 801075e:	bf15      	itete	ne
 8010760:	6560      	strne	r0, [r4, #84]	; 0x54
 8010762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801076a:	81a3      	strheq	r3, [r4, #12]
 801076c:	bf18      	it	ne
 801076e:	81a3      	strhne	r3, [r4, #12]
 8010770:	bd10      	pop	{r4, pc}

08010772 <__sclose>:
 8010772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010776:	f000 b831 	b.w	80107dc <_close_r>
	...

0801077c <_write_r>:
 801077c:	b538      	push	{r3, r4, r5, lr}
 801077e:	4d07      	ldr	r5, [pc, #28]	; (801079c <_write_r+0x20>)
 8010780:	4604      	mov	r4, r0
 8010782:	4608      	mov	r0, r1
 8010784:	4611      	mov	r1, r2
 8010786:	2200      	movs	r2, #0
 8010788:	602a      	str	r2, [r5, #0]
 801078a:	461a      	mov	r2, r3
 801078c:	f7f1 fcc7 	bl	800211e <_write>
 8010790:	1c43      	adds	r3, r0, #1
 8010792:	d102      	bne.n	801079a <_write_r+0x1e>
 8010794:	682b      	ldr	r3, [r5, #0]
 8010796:	b103      	cbz	r3, 801079a <_write_r+0x1e>
 8010798:	6023      	str	r3, [r4, #0]
 801079a:	bd38      	pop	{r3, r4, r5, pc}
 801079c:	20008f78 	.word	0x20008f78

080107a0 <__assert_func>:
 80107a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107a2:	4614      	mov	r4, r2
 80107a4:	461a      	mov	r2, r3
 80107a6:	4b09      	ldr	r3, [pc, #36]	; (80107cc <__assert_func+0x2c>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	4605      	mov	r5, r0
 80107ac:	68d8      	ldr	r0, [r3, #12]
 80107ae:	b14c      	cbz	r4, 80107c4 <__assert_func+0x24>
 80107b0:	4b07      	ldr	r3, [pc, #28]	; (80107d0 <__assert_func+0x30>)
 80107b2:	9100      	str	r1, [sp, #0]
 80107b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107b8:	4906      	ldr	r1, [pc, #24]	; (80107d4 <__assert_func+0x34>)
 80107ba:	462b      	mov	r3, r5
 80107bc:	f000 f81e 	bl	80107fc <fiprintf>
 80107c0:	f000 f893 	bl	80108ea <abort>
 80107c4:	4b04      	ldr	r3, [pc, #16]	; (80107d8 <__assert_func+0x38>)
 80107c6:	461c      	mov	r4, r3
 80107c8:	e7f3      	b.n	80107b2 <__assert_func+0x12>
 80107ca:	bf00      	nop
 80107cc:	20000030 	.word	0x20000030
 80107d0:	08010ded 	.word	0x08010ded
 80107d4:	08010dfa 	.word	0x08010dfa
 80107d8:	08010e28 	.word	0x08010e28

080107dc <_close_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	4d06      	ldr	r5, [pc, #24]	; (80107f8 <_close_r+0x1c>)
 80107e0:	2300      	movs	r3, #0
 80107e2:	4604      	mov	r4, r0
 80107e4:	4608      	mov	r0, r1
 80107e6:	602b      	str	r3, [r5, #0]
 80107e8:	f7f1 fcb5 	bl	8002156 <_close>
 80107ec:	1c43      	adds	r3, r0, #1
 80107ee:	d102      	bne.n	80107f6 <_close_r+0x1a>
 80107f0:	682b      	ldr	r3, [r5, #0]
 80107f2:	b103      	cbz	r3, 80107f6 <_close_r+0x1a>
 80107f4:	6023      	str	r3, [r4, #0]
 80107f6:	bd38      	pop	{r3, r4, r5, pc}
 80107f8:	20008f78 	.word	0x20008f78

080107fc <fiprintf>:
 80107fc:	b40e      	push	{r1, r2, r3}
 80107fe:	b503      	push	{r0, r1, lr}
 8010800:	4601      	mov	r1, r0
 8010802:	ab03      	add	r3, sp, #12
 8010804:	4805      	ldr	r0, [pc, #20]	; (801081c <fiprintf+0x20>)
 8010806:	f853 2b04 	ldr.w	r2, [r3], #4
 801080a:	6800      	ldr	r0, [r0, #0]
 801080c:	9301      	str	r3, [sp, #4]
 801080e:	f7ff fe41 	bl	8010494 <_vfiprintf_r>
 8010812:	b002      	add	sp, #8
 8010814:	f85d eb04 	ldr.w	lr, [sp], #4
 8010818:	b003      	add	sp, #12
 801081a:	4770      	bx	lr
 801081c:	20000030 	.word	0x20000030

08010820 <_fstat_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4d07      	ldr	r5, [pc, #28]	; (8010840 <_fstat_r+0x20>)
 8010824:	2300      	movs	r3, #0
 8010826:	4604      	mov	r4, r0
 8010828:	4608      	mov	r0, r1
 801082a:	4611      	mov	r1, r2
 801082c:	602b      	str	r3, [r5, #0]
 801082e:	f7f1 fc9e 	bl	800216e <_fstat>
 8010832:	1c43      	adds	r3, r0, #1
 8010834:	d102      	bne.n	801083c <_fstat_r+0x1c>
 8010836:	682b      	ldr	r3, [r5, #0]
 8010838:	b103      	cbz	r3, 801083c <_fstat_r+0x1c>
 801083a:	6023      	str	r3, [r4, #0]
 801083c:	bd38      	pop	{r3, r4, r5, pc}
 801083e:	bf00      	nop
 8010840:	20008f78 	.word	0x20008f78

08010844 <_isatty_r>:
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	4d06      	ldr	r5, [pc, #24]	; (8010860 <_isatty_r+0x1c>)
 8010848:	2300      	movs	r3, #0
 801084a:	4604      	mov	r4, r0
 801084c:	4608      	mov	r0, r1
 801084e:	602b      	str	r3, [r5, #0]
 8010850:	f7f1 fc9d 	bl	800218e <_isatty>
 8010854:	1c43      	adds	r3, r0, #1
 8010856:	d102      	bne.n	801085e <_isatty_r+0x1a>
 8010858:	682b      	ldr	r3, [r5, #0]
 801085a:	b103      	cbz	r3, 801085e <_isatty_r+0x1a>
 801085c:	6023      	str	r3, [r4, #0]
 801085e:	bd38      	pop	{r3, r4, r5, pc}
 8010860:	20008f78 	.word	0x20008f78

08010864 <_lseek_r>:
 8010864:	b538      	push	{r3, r4, r5, lr}
 8010866:	4d07      	ldr	r5, [pc, #28]	; (8010884 <_lseek_r+0x20>)
 8010868:	4604      	mov	r4, r0
 801086a:	4608      	mov	r0, r1
 801086c:	4611      	mov	r1, r2
 801086e:	2200      	movs	r2, #0
 8010870:	602a      	str	r2, [r5, #0]
 8010872:	461a      	mov	r2, r3
 8010874:	f7f1 fc96 	bl	80021a4 <_lseek>
 8010878:	1c43      	adds	r3, r0, #1
 801087a:	d102      	bne.n	8010882 <_lseek_r+0x1e>
 801087c:	682b      	ldr	r3, [r5, #0]
 801087e:	b103      	cbz	r3, 8010882 <_lseek_r+0x1e>
 8010880:	6023      	str	r3, [r4, #0]
 8010882:	bd38      	pop	{r3, r4, r5, pc}
 8010884:	20008f78 	.word	0x20008f78

08010888 <__ascii_mbtowc>:
 8010888:	b082      	sub	sp, #8
 801088a:	b901      	cbnz	r1, 801088e <__ascii_mbtowc+0x6>
 801088c:	a901      	add	r1, sp, #4
 801088e:	b142      	cbz	r2, 80108a2 <__ascii_mbtowc+0x1a>
 8010890:	b14b      	cbz	r3, 80108a6 <__ascii_mbtowc+0x1e>
 8010892:	7813      	ldrb	r3, [r2, #0]
 8010894:	600b      	str	r3, [r1, #0]
 8010896:	7812      	ldrb	r2, [r2, #0]
 8010898:	1e10      	subs	r0, r2, #0
 801089a:	bf18      	it	ne
 801089c:	2001      	movne	r0, #1
 801089e:	b002      	add	sp, #8
 80108a0:	4770      	bx	lr
 80108a2:	4610      	mov	r0, r2
 80108a4:	e7fb      	b.n	801089e <__ascii_mbtowc+0x16>
 80108a6:	f06f 0001 	mvn.w	r0, #1
 80108aa:	e7f8      	b.n	801089e <__ascii_mbtowc+0x16>

080108ac <_read_r>:
 80108ac:	b538      	push	{r3, r4, r5, lr}
 80108ae:	4d07      	ldr	r5, [pc, #28]	; (80108cc <_read_r+0x20>)
 80108b0:	4604      	mov	r4, r0
 80108b2:	4608      	mov	r0, r1
 80108b4:	4611      	mov	r1, r2
 80108b6:	2200      	movs	r2, #0
 80108b8:	602a      	str	r2, [r5, #0]
 80108ba:	461a      	mov	r2, r3
 80108bc:	f7f1 fc12 	bl	80020e4 <_read>
 80108c0:	1c43      	adds	r3, r0, #1
 80108c2:	d102      	bne.n	80108ca <_read_r+0x1e>
 80108c4:	682b      	ldr	r3, [r5, #0]
 80108c6:	b103      	cbz	r3, 80108ca <_read_r+0x1e>
 80108c8:	6023      	str	r3, [r4, #0]
 80108ca:	bd38      	pop	{r3, r4, r5, pc}
 80108cc:	20008f78 	.word	0x20008f78

080108d0 <__ascii_wctomb>:
 80108d0:	b149      	cbz	r1, 80108e6 <__ascii_wctomb+0x16>
 80108d2:	2aff      	cmp	r2, #255	; 0xff
 80108d4:	bf85      	ittet	hi
 80108d6:	238a      	movhi	r3, #138	; 0x8a
 80108d8:	6003      	strhi	r3, [r0, #0]
 80108da:	700a      	strbls	r2, [r1, #0]
 80108dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80108e0:	bf98      	it	ls
 80108e2:	2001      	movls	r0, #1
 80108e4:	4770      	bx	lr
 80108e6:	4608      	mov	r0, r1
 80108e8:	4770      	bx	lr

080108ea <abort>:
 80108ea:	b508      	push	{r3, lr}
 80108ec:	2006      	movs	r0, #6
 80108ee:	f000 f82b 	bl	8010948 <raise>
 80108f2:	2001      	movs	r0, #1
 80108f4:	f7f1 fbec 	bl	80020d0 <_exit>

080108f8 <_raise_r>:
 80108f8:	291f      	cmp	r1, #31
 80108fa:	b538      	push	{r3, r4, r5, lr}
 80108fc:	4604      	mov	r4, r0
 80108fe:	460d      	mov	r5, r1
 8010900:	d904      	bls.n	801090c <_raise_r+0x14>
 8010902:	2316      	movs	r3, #22
 8010904:	6003      	str	r3, [r0, #0]
 8010906:	f04f 30ff 	mov.w	r0, #4294967295
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801090e:	b112      	cbz	r2, 8010916 <_raise_r+0x1e>
 8010910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010914:	b94b      	cbnz	r3, 801092a <_raise_r+0x32>
 8010916:	4620      	mov	r0, r4
 8010918:	f000 f830 	bl	801097c <_getpid_r>
 801091c:	462a      	mov	r2, r5
 801091e:	4601      	mov	r1, r0
 8010920:	4620      	mov	r0, r4
 8010922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010926:	f000 b817 	b.w	8010958 <_kill_r>
 801092a:	2b01      	cmp	r3, #1
 801092c:	d00a      	beq.n	8010944 <_raise_r+0x4c>
 801092e:	1c59      	adds	r1, r3, #1
 8010930:	d103      	bne.n	801093a <_raise_r+0x42>
 8010932:	2316      	movs	r3, #22
 8010934:	6003      	str	r3, [r0, #0]
 8010936:	2001      	movs	r0, #1
 8010938:	e7e7      	b.n	801090a <_raise_r+0x12>
 801093a:	2400      	movs	r4, #0
 801093c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010940:	4628      	mov	r0, r5
 8010942:	4798      	blx	r3
 8010944:	2000      	movs	r0, #0
 8010946:	e7e0      	b.n	801090a <_raise_r+0x12>

08010948 <raise>:
 8010948:	4b02      	ldr	r3, [pc, #8]	; (8010954 <raise+0xc>)
 801094a:	4601      	mov	r1, r0
 801094c:	6818      	ldr	r0, [r3, #0]
 801094e:	f7ff bfd3 	b.w	80108f8 <_raise_r>
 8010952:	bf00      	nop
 8010954:	20000030 	.word	0x20000030

08010958 <_kill_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	4d07      	ldr	r5, [pc, #28]	; (8010978 <_kill_r+0x20>)
 801095c:	2300      	movs	r3, #0
 801095e:	4604      	mov	r4, r0
 8010960:	4608      	mov	r0, r1
 8010962:	4611      	mov	r1, r2
 8010964:	602b      	str	r3, [r5, #0]
 8010966:	f7f1 fba3 	bl	80020b0 <_kill>
 801096a:	1c43      	adds	r3, r0, #1
 801096c:	d102      	bne.n	8010974 <_kill_r+0x1c>
 801096e:	682b      	ldr	r3, [r5, #0]
 8010970:	b103      	cbz	r3, 8010974 <_kill_r+0x1c>
 8010972:	6023      	str	r3, [r4, #0]
 8010974:	bd38      	pop	{r3, r4, r5, pc}
 8010976:	bf00      	nop
 8010978:	20008f78 	.word	0x20008f78

0801097c <_getpid_r>:
 801097c:	f7f1 bb90 	b.w	80020a0 <_getpid>

08010980 <_init>:
 8010980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010982:	bf00      	nop
 8010984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010986:	bc08      	pop	{r3}
 8010988:	469e      	mov	lr, r3
 801098a:	4770      	bx	lr

0801098c <_fini>:
 801098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098e:	bf00      	nop
 8010990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010992:	bc08      	pop	{r3}
 8010994:	469e      	mov	lr, r3
 8010996:	4770      	bx	lr
